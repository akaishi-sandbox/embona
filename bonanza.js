/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */(function() {'use strict';function n(e){throw e;}var q=void 0,aa=this;function r(e,c){var d=e.split("."),b=aa;b=self;!(d[0]in b)&&b.execScript&&b.execScript("var "+d[0]);for(var a;d.length&&(a=d.shift());)!d.length&&c!==q?b[a]=c:b=b[a]?b[a]:b[a]={}};var u="undefined"!==typeof Uint8Array&&"undefined"!==typeof Uint16Array&&"undefined"!==typeof Uint32Array&&"undefined"!==typeof DataView;new (u?Uint8Array:Array)(256);var v;for(v=0;256>v;++v)for(var w=v,ba=7,w=w>>>1;w;w>>>=1)--ba;function x(e,c,d){var b,a="number"===typeof c?c:c=0,f="number"===typeof d?d:e.length;b=-1;for(a=f&7;a--;++c)b=b>>>8^z[(b^e[c])&255];for(a=f>>3;a--;c+=8)b=b>>>8^z[(b^e[c])&255],b=b>>>8^z[(b^e[c+1])&255],b=b>>>8^z[(b^e[c+2])&255],b=b>>>8^z[(b^e[c+3])&255],b=b>>>8^z[(b^e[c+4])&255],b=b>>>8^z[(b^e[c+5])&255],b=b>>>8^z[(b^e[c+6])&255],b=b>>>8^z[(b^e[c+7])&255];return(b^4294967295)>>>0}
var A=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,
2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,
2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,
2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,
3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,
936918E3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117],z=u?new Uint32Array(A):A;function B(){}B.prototype.getName=function(){return this.name};B.prototype.getData=function(){return this.data};B.prototype.H=function(){return this.I};r("Zlib.GunzipMember",B);r("Zlib.GunzipMember.prototype.getName",B.prototype.getName);r("Zlib.GunzipMember.prototype.getData",B.prototype.getData);r("Zlib.GunzipMember.prototype.getMtime",B.prototype.H);function D(e){var c=e.length,d=0,b=Number.POSITIVE_INFINITY,a,f,g,k,m,p,t,h,l,y;for(h=0;h<c;++h)e[h]>d&&(d=e[h]),e[h]<b&&(b=e[h]);a=1<<d;f=new (u?Uint32Array:Array)(a);g=1;k=0;for(m=2;g<=d;){for(h=0;h<c;++h)if(e[h]===g){p=0;t=k;for(l=0;l<g;++l)p=p<<1|t&1,t>>=1;y=g<<16|h;for(l=p;l<a;l+=m)f[l]=y;++k}++g;k<<=1;m<<=1}return[f,d,b]};var E=[],F;for(F=0;288>F;F++)switch(!0){case 143>=F:E.push([F+48,8]);break;case 255>=F:E.push([F-144+400,9]);break;case 279>=F:E.push([F-256+0,7]);break;case 287>=F:E.push([F-280+192,8]);break;default:n("invalid literal: "+F)}
var ca=function(){function e(a){switch(!0){case 3===a:return[257,a-3,0];case 4===a:return[258,a-4,0];case 5===a:return[259,a-5,0];case 6===a:return[260,a-6,0];case 7===a:return[261,a-7,0];case 8===a:return[262,a-8,0];case 9===a:return[263,a-9,0];case 10===a:return[264,a-10,0];case 12>=a:return[265,a-11,1];case 14>=a:return[266,a-13,1];case 16>=a:return[267,a-15,1];case 18>=a:return[268,a-17,1];case 22>=a:return[269,a-19,2];case 26>=a:return[270,a-23,2];case 30>=a:return[271,a-27,2];case 34>=a:return[272,
a-31,2];case 42>=a:return[273,a-35,3];case 50>=a:return[274,a-43,3];case 58>=a:return[275,a-51,3];case 66>=a:return[276,a-59,3];case 82>=a:return[277,a-67,4];case 98>=a:return[278,a-83,4];case 114>=a:return[279,a-99,4];case 130>=a:return[280,a-115,4];case 162>=a:return[281,a-131,5];case 194>=a:return[282,a-163,5];case 226>=a:return[283,a-195,5];case 257>=a:return[284,a-227,5];case 258===a:return[285,a-258,0];default:n("invalid length: "+a)}}var c=[],d,b;for(d=3;258>=d;d++)b=e(d),c[d]=b[2]<<24|b[1]<<
16|b[0];return c}();u&&new Uint32Array(ca);function G(e,c){this.i=[];this.j=32768;this.d=this.f=this.c=this.n=0;this.input=u?new Uint8Array(e):e;this.o=!1;this.k=H;this.z=!1;if(c||!(c={}))c.index&&(this.c=c.index),c.bufferSize&&(this.j=c.bufferSize),c.bufferType&&(this.k=c.bufferType),c.resize&&(this.z=c.resize);switch(this.k){case I:this.a=32768;this.b=new (u?Uint8Array:Array)(32768+this.j+258);break;case H:this.a=0;this.b=new (u?Uint8Array:Array)(this.j);this.e=this.F;this.q=this.B;this.l=this.D;break;default:n(Error("invalid inflate mode"))}}
var I=0,H=1;
G.prototype.g=function(){for(;!this.o;){var e=J(this,3);e&1&&(this.o=!0);e>>>=1;switch(e){case 0:var c=this.input,d=this.c,b=this.b,a=this.a,f=c.length,g=q,k=q,m=b.length,p=q;this.d=this.f=0;d+1>=f&&n(Error("invalid uncompressed block header: LEN"));g=c[d++]|c[d++]<<8;d+1>=f&&n(Error("invalid uncompressed block header: NLEN"));k=c[d++]|c[d++]<<8;g===~k&&n(Error("invalid uncompressed block header: length verify"));d+g>c.length&&n(Error("input buffer is broken"));switch(this.k){case I:for(;a+g>b.length;){p=
m-a;g-=p;if(u)b.set(c.subarray(d,d+p),a),a+=p,d+=p;else for(;p--;)b[a++]=c[d++];this.a=a;b=this.e();a=this.a}break;case H:for(;a+g>b.length;)b=this.e({t:2});break;default:n(Error("invalid inflate mode"))}if(u)b.set(c.subarray(d,d+g),a),a+=g,d+=g;else for(;g--;)b[a++]=c[d++];this.c=d;this.a=a;this.b=b;break;case 1:this.l(da,ea);break;case 2:fa(this);break;default:n(Error("unknown BTYPE: "+e))}}return this.q()};
var K=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],L=u?new Uint16Array(K):K,N=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],O=u?new Uint16Array(N):N,P=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],Q=u?new Uint8Array(P):P,R=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],ga=u?new Uint16Array(R):R,ha=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,
13,13],U=u?new Uint8Array(ha):ha,V=new (u?Uint8Array:Array)(288),W,ia;W=0;for(ia=V.length;W<ia;++W)V[W]=143>=W?8:255>=W?9:279>=W?7:8;var da=D(V),X=new (u?Uint8Array:Array)(30),Y,ja;Y=0;for(ja=X.length;Y<ja;++Y)X[Y]=5;var ea=D(X);function J(e,c){for(var d=e.f,b=e.d,a=e.input,f=e.c,g=a.length,k;b<c;)f>=g&&n(Error("input buffer is broken")),d|=a[f++]<<b,b+=8;k=d&(1<<c)-1;e.f=d>>>c;e.d=b-c;e.c=f;return k}
function Z(e,c){for(var d=e.f,b=e.d,a=e.input,f=e.c,g=a.length,k=c[0],m=c[1],p,t;b<m&&!(f>=g);)d|=a[f++]<<b,b+=8;p=k[d&(1<<m)-1];t=p>>>16;e.f=d>>t;e.d=b-t;e.c=f;return p&65535}
function fa(e){function c(a,c,b){var d,e=this.w,f,g;for(g=0;g<a;)switch(d=Z(this,c),d){case 16:for(f=3+J(this,2);f--;)b[g++]=e;break;case 17:for(f=3+J(this,3);f--;)b[g++]=0;e=0;break;case 18:for(f=11+J(this,7);f--;)b[g++]=0;e=0;break;default:e=b[g++]=d}this.w=e;return b}var d=J(e,5)+257,b=J(e,5)+1,a=J(e,4)+4,f=new (u?Uint8Array:Array)(L.length),g,k,m,p;for(p=0;p<a;++p)f[L[p]]=J(e,3);if(!u){p=a;for(a=f.length;p<a;++p)f[L[p]]=0}g=D(f);k=new (u?Uint8Array:Array)(d);m=new (u?Uint8Array:Array)(b);e.w=
0;e.l(D(c.call(e,d,g,k)),D(c.call(e,b,g,m)))}G.prototype.l=function(e,c){var d=this.b,b=this.a;this.r=e;for(var a=d.length-258,f,g,k,m;256!==(f=Z(this,e));)if(256>f)b>=a&&(this.a=b,d=this.e(),b=this.a),d[b++]=f;else{g=f-257;m=O[g];0<Q[g]&&(m+=J(this,Q[g]));f=Z(this,c);k=ga[f];0<U[f]&&(k+=J(this,U[f]));b>=a&&(this.a=b,d=this.e(),b=this.a);for(;m--;)d[b]=d[b++-k]}for(;8<=this.d;)this.d-=8,this.c--;this.a=b};
G.prototype.D=function(e,c){var d=this.b,b=this.a;this.r=e;for(var a=d.length,f,g,k,m;256!==(f=Z(this,e));)if(256>f)b>=a&&(d=this.e(),a=d.length),d[b++]=f;else{g=f-257;m=O[g];0<Q[g]&&(m+=J(this,Q[g]));f=Z(this,c);k=ga[f];0<U[f]&&(k+=J(this,U[f]));b+m>a&&(d=this.e(),a=d.length);for(;m--;)d[b]=d[b++-k]}for(;8<=this.d;)this.d-=8,this.c--;this.a=b};
G.prototype.e=function(){var e=new (u?Uint8Array:Array)(this.a-32768),c=this.a-32768,d,b,a=this.b;if(u)e.set(a.subarray(32768,e.length));else{d=0;for(b=e.length;d<b;++d)e[d]=a[d+32768]}this.i.push(e);this.n+=e.length;if(u)a.set(a.subarray(c,c+32768));else for(d=0;32768>d;++d)a[d]=a[c+d];this.a=32768;return a};
G.prototype.F=function(e){var c,d=this.input.length/this.c+1|0,b,a,f,g=this.input,k=this.b;e&&("number"===typeof e.t&&(d=e.t),"number"===typeof e.A&&(d+=e.A));2>d?(b=(g.length-this.c)/this.r[2],f=258*(b/2)|0,a=f<k.length?k.length+f:k.length<<1):a=k.length*d;u?(c=new Uint8Array(a),c.set(k)):c=k;return this.b=c};
G.prototype.q=function(){var e=0,c=this.b,d=this.i,b,a=new (u?Uint8Array:Array)(this.n+(this.a-32768)),f,g,k,m;if(0===d.length)return u?this.b.subarray(32768,this.a):this.b.slice(32768,this.a);f=0;for(g=d.length;f<g;++f){b=d[f];k=0;for(m=b.length;k<m;++k)a[e++]=b[k]}f=32768;for(g=this.a;f<g;++f)a[e++]=c[f];this.i=[];return this.buffer=a};
G.prototype.B=function(){var e,c=this.a;u?this.z?(e=new Uint8Array(c),e.set(this.b.subarray(0,c))):e=this.b.subarray(0,c):(this.b.length>c&&(this.b.length=c),e=this.b);return this.buffer=e};function $(e){this.input=e;this.c=0;this.m=[];this.s=!1}$.prototype.G=function(){this.s||this.g();return this.m.slice()};
$.prototype.g=function(){for(var e=this.input.length;this.c<e;){var c=new B,d=q,b=q,a=q,f=q,g=q,k=q,m=q,p=q,t=q,h=this.input,l=this.c;c.u=h[l++];c.v=h[l++];(31!==c.u||139!==c.v)&&n(Error("invalid file signature:"+c.u+","+c.v));c.p=h[l++];switch(c.p){case 8:break;default:n(Error("unknown compression method: "+c.p))}c.h=h[l++];p=h[l++]|h[l++]<<8|h[l++]<<16|h[l++]<<24;c.I=new Date(1E3*p);c.O=h[l++];c.N=h[l++];0<(c.h&4)&&(c.J=h[l++]|h[l++]<<8,l+=c.J);if(0<(c.h&8)){m=[];for(k=0;0<(g=h[l++]);)m[k++]=String.fromCharCode(g);
c.name=m.join("")}if(0<(c.h&16)){m=[];for(k=0;0<(g=h[l++]);)m[k++]=String.fromCharCode(g);c.K=m.join("")}0<(c.h&2)&&(c.C=x(h,0,l)&65535,c.C!==(h[l++]|h[l++]<<8)&&n(Error("invalid header crc16")));d=h[h.length-4]|h[h.length-3]<<8|h[h.length-2]<<16|h[h.length-1]<<24;h.length-l-4-4<512*d&&(f=d);b=new G(h,{index:l,bufferSize:f});c.data=a=b.g();l=b.c;c.L=t=(h[l++]|h[l++]<<8|h[l++]<<16|h[l++]<<24)>>>0;x(a,q,q)!==t&&n(Error("invalid CRC-32 checksum: 0x"+x(a,q,q).toString(16)+" / 0x"+t.toString(16)));c.M=
d=(h[l++]|h[l++]<<8|h[l++]<<16|h[l++]<<24)>>>0;(a.length&4294967295)!==d&&n(Error("invalid input size: "+(a.length&4294967295)+" / "+d));this.m.push(c);this.c=l}this.s=!0;var y=this.m,s,M,S=0,T=0,C;s=0;for(M=y.length;s<M;++s)T+=y[s].data.length;if(u){C=new Uint8Array(T);for(s=0;s<M;++s)C.set(y[s].data,S),S+=y[s].data.length}else{C=[];for(s=0;s<M;++s)C[s]=y[s].data;C=Array.prototype.concat.apply([],C)}return C};r("Zlib.Gunzip",$);r("Zlib.Gunzip.prototype.decompress",$.prototype.g);r("Zlib.Gunzip.prototype.getMembers",$.prototype.G);}).call(self);

self.addEventListener("message", function(e) {
	var command = e.data.split(":");
	switch(command[0]) {
	case "move":
		var move = command[1];
		if(move) {
			console.log(move);
			stdin_buffer += move + "\n";
		} else {
			stdin_buffer += "move\n";
		}
		break;
	case "new":
		var time = command[2];
		var style = command[1];
		stdin_buffer += "s\n";
		stdin_buffer += "limit time 0 " + time + "\n";
		stdin_buffer += "s\n";
		stdin_buffer += "new\n";
		if(style != "black") {
			stdin_buffer += "move\n";
		}
		break;
	}
}, false);

var stdin_buffer = "resign 99999\nlimit time 0 1\nstress off\nponder off\nmove\n";
function input_callback (){
	if(!stdin_buffer) {
		return "\n".charCodeAt(0); // no input
	}
	var c = stdin_buffer[0];
	stdin_buffer = stdin_buffer.substr(1);
	return c.charCodeAt(0);
}
var stdout_buffer = "";
var crflag = false;
var newFlag = false;
function output_callback (_char){
	if(_char == 0 || _char == 0x0a) {
		if(stdout_buffer.length < 1000) {
			console.log(stdout_buffer);
			self.postMessage(stdout_buffer);
		}
		//if(stdout_buffer.indexOf("White") == 0 || stdout_buffer.indexOf("Black") == 0) {
			//stdin_buffer += "move\n";
		//}
		//if(/resign/.test(stdout_buffer)) {
			//stdin_buffer += "quit\n";
		//}
		stdout_buffer = "";
		crflag = false;
		newFlag = false;
		return;
	}
	if(_char == 0x0d) {
		crflag = true;
		return;
	} 
	if(crflag) {
		crflag = false;
		stdout_buffer = "";
	}
	stdout_buffer += String.fromCharCode(_char);
	if(!newFlag && /Black 1>/.test(stdout_buffer)) {
		newFlag = true;
		self.postMessage("embona:new");
		//console.log("Mated");
	}
	if(/Mated/.test(stdout_buffer)) {
		//console.log("Mated");
	}
}
var stderr_buffer = "";
function error_callback (_char){
	if(_char == 0 || _char == 0x0a) {
		console.warn(stderr_buffer);
		if(/illegal move/.test(stderr_buffer)
			|| /double pawn/.test(stderr_buffer)
			|| /The king is hang/.test(stderr_buffer)
			|| /mated by a droped pawn/.test(stderr_buffer)) {
			self.postMessage("embona:illegal");
		}
		stderr_buffer = "";
		return;
	}
	stderr_buffer += String.fromCharCode(_char);
}
if(typeof Module !== "undefined") {
} else {
	var Module = {};
	Module["preRun"] = [];
}
Module["preRun"].push(function() {
	FS.init(input_callback, output_callback, error_callback) 
});
Module["noInitialRun"] = true;

var db;
var openDB = function() {
	if(typeof indexedDB == "undefined") {
		console.log("embona: indexedDB not implemented on this browser");
		readXHR();
		return;
	}
	var req = indexedDB.open("embona", 1);
	req.onupgradeneeded = function(e) {
		var db = e.target.result;
		if(!db.objectStoreNames.contains("fv.bin")) {
			db.createObjectStore("fv.bin");
		}
		console.log("embona: updated object store");
	};
	req.onsuccess = function(e) {
		db = e.target.result;
		console.log("embona: successfully opened");
		getData();
	};
	req.onerror = function(e) {
		console.log("embona: db open failed");
		readXHR();
	};
};

var saveData = function(data) {
	if(!db) {
		console.log("embona: no db exist at saveData");
		decompress(data);
		return;
	}
	console.log("embona: trying to save data")
	self.postMessage("message:saving data...\n");
	var tx = db.transaction('fv.bin', 'readwrite');
	tx.oncomplete = function() {
		console.log("embona: transaction commited");
		decompress(data);
	};
	tx.onerror = function() {
		console.log("embona: transaction rollbacked");
		decompress(data);
	};
	var store = tx.objectStore('fv.bin');
	var req = store.add(data, "file");
	req.onsuccess = function() {
		console.log("embona: data saved");
	};
	req.onerror = function() {
		console.log("embona: fail to save data");
	};
};
var getData = function() {
	if(!db) {
		console.log("embona: no db exist at getdata");
		return;
	}
	var tx = db.transaction('fv.bin', 'readwrite');
	var store = tx.objectStore('fv.bin');
	var req = store.get('file');
	req.onsuccess = function(e) {
		console.log("embona: successfully get data from db");
		var data = e.target.result;
		if(data) {
			decompress(data);
		} else {
			console.log("embona: no saved data");
			readXHR();
		}
	};
	req.onerror = function() {
		console.log("embona: fail to get data");
		readXHR();
	};
};

var readXHR = function() {
	var xhr = new XMLHttpRequest();
	xhr.open("GET", "fvg.bin");
	xhr.responseType = "arraybuffer";
	xhr.send(null);
	xhr.onreadystatechange = function() {
		if(xhr.readyState == 4) {
			if(xhr.status == 200) {
				if(xhr.response != undefined) {
					self.postMessage("message:loading completed");
					var compressed = new Uint8Array(xhr.response);
					saveData(compressed);
				}
			}
		}
	};
	xhr.onprogress = function(e) {
		self.postMessage("message:loading: " + (e.loaded / 43235726 * 100).toFixed(2) + "% (" + e.loaded + "/43235726)");
	};
};
var decompress = function(compressed) {
	self.postMessage("message:decompressing...\n");
	var inflate = new self["Zlib"]["Gunzip"](compressed);
	var plain = inflate["decompress"]();
	FS.writeFile("fv.bin", plain, {encoding: "binary"});
	self.postMessage("message:running Bonanza...\n");
	Module["_main"]();
	(function ping() {
		stdin_buffer += "ping\n";
		setTimeout(ping, 1000);
	})();
};

openDB();


// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  } else {
    Module['thisProgram'] = 'unknown-program';
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var final = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    final = parse();
  } catch(e) {
    final += '?';
  }
  if (final.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return final;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(DYNAMICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;


  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic.
    TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY);
  }

  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, 16*1024*1024);

  Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);


  assert(TOTAL_MEMORY <= Math.pow(2, 30)); // 2^30==1GB is a practical maximum - 2^31 is already close to possible negative numbers etc.

  var start = Date.now();

  if (ArrayBuffer.transfer) {
    buffer = ArrayBuffer.transfer(buffer, TOTAL_MEMORY);
  } else {
    var oldHEAP8 = HEAP8;
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  Module['buffer'] = buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  if (!ArrayBuffer.transfer) {
    HEAP8.set(oldHEAP8);
  }
  var success = _emscripten_replace_memory(buffer);
  assert(success);

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 671088640;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
totalMemory = Math.max(totalMemory, 16*1024*1024);
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 227425392;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([66,111,110,97,110,122,97,32,54,46,48,0,0,0,0,0,8,0,0,0,0,0,0,0,37,84,79,82,89,79,0,0,32,0,0,0,0,0,0,0,37,83,69,78,78,73,67,72,73,84,69,0,0,0,0,0,48,0,0,0,0,0,0,0,37,74,73,83,72,79,71,73,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,37,69,82,82,79,82,0,0,96,0,0,0,0,0,0,0,32,9,44,0,0,0,0,0,112,0,0,0,0,0,0,0,76,105,110,101,32,37,117,58,32,37,115,0,0,0,0,0,128,0,0,0,0,0,0,0,111,110,0,0,0,0,0,0,152,0,0,0,0,0,0,0,111,102,102,0,0,0,0,0,168,0,0,0,0,0,0,0,98,111,111,107,46,98,105,110,0,0,0,0,0,0,0,0,184,0,0,0,0,0,0,0,102,118,46,98,105,110,0,0,208,0,0,0,0,0,0,0,73,47,79,32,101,114,114,111,114,0,0,0,0,0,0,0,224,0,0,0,0,0,0,0,112,101,114,112,101,116,117,97,108,32,99,104,101,99,107,0,248,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,99,111,109,109,97,110,100,32,108,105,110,101,0,0,0,0,16,1,0,0,0,0,0,0,73,39,109,32,98,117,115,121,32,105,110,32,116,104,105,110,107,105,110,103,32,110,111,119,0,0,0,0,0,0,0,0,48,1,0,0,0,0,0,0,105,110,118,97,108,105,100,32,114,101,99,111,114,100,32,111,102,32,103,97,109,101,0,0,88,1,0,0,0,0,0,0,105,110,118,97,108,105,100,32,98,111,97,114,100,32,114,101,112,114,101,115,101,110,116,97,116,105,111,110,0,0,0,0,120,1,0,0,0,0,0,0,105,108,108,101,103,97,108,32,109,111,118,101,0,0,0,0,160,1,0,0,0,0,0,0,100,111,117,98,108,101,32,112,97,119,110,0,0,0,0,0,184,1,0,0,0,0,0,0,109,97,116,101,100,32,98,121,32,97,32,100,114,111,112,101,100,32,112,97,119,110,0,0,208,1,0,0,0,0,0,0,117,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,102,105,108,101,0,0,240,1,0,0,0,0,0,0,84,104,101,32,107,105,110,103,32,105,115,32,104,97,110,103,46,0,0,0,0,0,0,0,16,2,0,0,0,0,0,0,109,111,118,101,32,97,102,116,101,114,32,97,32,103,97,109,101,32,119,97,115,32,99,111,110,99,108,117,100,101,100,0,48,2,0,0,0,0,0,0,67,97,110,39,116,32,111,112,101,110,32,97,32,102,105,108,101,0,0,0,0,0,0,0,88,2,0,0,0,0,0,0,84,111,111,32,109,97,110,121,32,99,104,97,114,97,99,116,101,114,115,32,105,110,32,97,32,108,105,110,101,46,0,0,120,2,0,0,0,0,0,0,78,111,32,108,101,103,97,108,32,109,111,118,101,115,32,116,111,32,115,101,97,114,99,104,0,0,0,0,0,0,0,0,160,2,0,0,0,0,0,0,87,65,82,78,73,78,71,58,32,0,0,0,0,0,0,0,200,2,0,0,0,0,0,0,114,101,99,101,105,118,101,100,32,105,110,118,97,108,105,100,32,109,101,115,115,97,103,101,32,102,114,111,109,32,116,104,101,32,115,101,114,118,101,114,0,0,0,0,0,0,0,0,224,2,0,0,0,0,0,0,42,32,0,0,0,0,0,0,70,85,0,0,0,0,0,0,75,89,0,0,0,0,0,0,75,69,0,0,0,0,0,0,71,73,0,0,0,0,0,0,75,73,0,0,0,0,0,0,75,65,0,0,0,0,0,0,72,73,0,0,0,0,0,0,79,85,0,0,0,0,0,0,84,79,0,0,0,0,0,0,78,89,0,0,0,0,0,0,78,75,0,0,0,0,0,0,78,71,0,0,0,0,0,0,35,35,0,0,0,0,0,0,85,77,0,0,0,0,0,0,82,89,0,0,0,0,0,0,24,3,0,0,32,3,0,0,40,3,0,0,48,3,0,0,56,3,0,0,64,3,0,0,72,3,0,0,80,3,0,0,88,3,0,0,96,3,0,0,104,3,0,0,112,3,0,0,120,3,0,0,128,3,0,0,136,3,0,0,144,3,0,0,43,45,0,0,0,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,31,0,0,0,63,0,0,0,127,0,0,0,0,0,0,0,115,5,0,0,47,4,0,0,0,0,0,0,235,2,0,0,235,2,0,0,235,2,0,0,235,2,0,0,0,0,0,0,209,4,0,0,141,3,0,0,235,2,0,0,73,2,0,0,185,1,0,0,50,1,0,0,162,0,0,0,0,0,0,0,81,0,0,0,225,0,0,0,104,1,0,0,248,1,0,0,154,2,0,0,60,3,0,0,128,4,0,0,0,0,0,0,154,2,0,0,154,2,0,0,154,2,0,0,154,2,0,0,0,0,0,0,222,3,0,0,34,5,0,0,0,0,0,0,0,0,0,0,36,0,0,0,108,0,0,0,171,0,0,0,252,0,0,0,77,1,0,0,158,1,0,0,64,2,0,0,0,0,0,0,77,1,0,0,77,1,0,0,77,1,0,0,77,1,0,0,77,1,0,0,239,1,0,0,145,2,0,0,0,0,0,0,0,0,0,0,19,0,0,0,24,0,0,0,29,0,0,0,34,0,0,0,39,0,0,0,42,0,0,0,0,1,2,3,4,5,6,7,8,0,1,2,3,4,5,6,7,8,0,1,2,3,4,5,6,7,8,0,1,2,3,4,5,6,7,8,0,1,2,3,4,5,6,7,8,0,1,2,3,4,5,6,7,8,0,1,2,3,4,5,6,7,8,0,1,2,3,4,5,6,7,8,0,1,2,3,4,5,6,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,253,252,251,248,251,252,253,254,0,249,0,0,0,0,0,250,0,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,6,0,0,0,0,0,7,0,2,3,4,5,8,5,4,3,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([37,115,0,0,0,0,0,0,10,37,115,0,0,0,0,0,10,10,0,0,0,0,0,0,10,69,82,82,79,82,58,32,0,0,0,0,0,0,0,0,37,115,44,32,37,115,0,0,68,114,97,119,110,62,32,0,66,108,97,99,107,32,77,97,116,101,100,62,32,0,0,0,87,104,105,116,101,32,77,97,116,101,100,62,32,0,0,0,87,104,105,116,101,32,82,101,115,105,103,110,101,100,62,32,0,0,0,0,0,0,0,0,66,108,97,99,107,32,82,101,115,105,103,110,101,100,62,32,0,0,0,0,0,0,0,0,87,104,105,116,101,32,83,117,115,112,101,110,100,62,32,0,66,108,97,99,107,32,83,117,115,112,101,110,100,62,32,0,87,104,105,116,101,32,37,100,62,32,0,0,0,0,0,0,66,108,97,99,107,32,37,100,62,32,0,0,0,0,0,0,103,97,109,101,46,99,115,97,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,60,114,101,118,101,114,115,101,100,62,32,32,32,32,32,32,32,32,10,0,0,0,39,32,32,49,32,32,50,32,32,51,32,32,52,32,32,53,32,32,54,32,32,55,32,32,56,32,32,57,10,0,0,0,80,37,100,0,0,0,0,0,39,32,32,57,32,32,56,32,32,55,32,32,54,32,32,53,32,32,52,32,32,51,32,32,50,32,32,49,10,0,0,0,80,43,0,0,0,0,0,0,80,45,0,0,0,0,0,0,27,91,48,109,0,0,0,0,27,91,55,59,51,49,109,0,27,91,55,59,51,52,109,0,27,91,55,109,0,0,0,0,115,101,108,101,99,116,40,41,32,102,97,105,108,100,46,0,114,101,97,100,40,41,32,102,97,105,108,100,46,0,0,0,48,48,70,85,0,0,0,0,48,48,75,89,0,0,0,0,48,48,75,69,0,0,0,0,48,48,71,73,0,0,0,0,48,48,75,73,0,0,0,0,48,48,75,65,0,0,0,0,48,48,72,73,0,0,0,0,37,99,37,115,0,0,0,0,32,32,32,0,0,0,0,0,32,42,32,0,0,0,0,0,110,101,119,0,0,0,0,0,105,103,110,111,114,101,0,0,105,100,108,101,0,0,0,0,97,108,116,101,114,0,0,0,114,101,116,114,97,99,116,0,109,111,118,101,0,0,0,0,45,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,32,32,101,108,97,112,115,101,100,58,32,98,37,117,44,32,119,37,117,10,0,0,0,0,35,87,73,78,0,0,0,0,35,76,79,83,69,0,0,0,35,68,82,65,87,0,0,0,35,67,72,85,68,65,78,0,76,79,71,79,85,84,10,0,32,32,32,32,37,54,115,32,32,32,32,32,32,32,32,32,32,77,79,86,69,32,80,82,69,68,73,67,84,73,79,78,32,72,73,84,10,32,32,101,108,97,112,115,101,100,58,32,98,37,117,44,32,119,37,117,10,0,0,0,0,0,0,0,37,99,37,115,10,0,0,0,112,101,114,112,101,116,117,97,108,32,99,104,101,99,107,32,40,37,99,37,115,41,0,0,37,37,84,79,82,89,79,10,0,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,98,101,101,112,0,0,0,0,98,111,111,107,0,0,0,0,100,105,115,112,108,97,121,0,104,97,115,104,0,0,0,0,108,105,109,105,116,0,0,0,111,117,116,109,111,118,101,0,112,101,101,107,0,0,0,0,115,116,100,111,117,116,0,0,112,105,110,103,0,0,0,0,112,111,110,100,101,114,0,0,112,114,111,98,108,101,109,0,113,117,105,116,0,0,0,0,114,101,97,100,0,0,0,0,114,101,115,105,103,110,0,0,115,117,115,112,101,110,100,0,116,105,109,101,0,0,0,0,110,101,119,108,111,103,0,0,99,111,110,110,101,99,116,0,115,101,110,100,112,118,0,0,109,110,106,0,0,0,0,0,100,102,112,110,0,0,0,0,115,116,114,101,115,115,0,0,103,111,0,0,0,0,0,0,46,0,0,0,0,0,0,0,49,50,55,46,48,46,48,46,49,0,0,0,0,0,0,0,52,48,56,51,0,0,0,0,98,111,110,97,110,122,97,49,0,0,0,0,0,0,0,0,87,111,114,107,101,114,58,32,37,115,10,0,0,0,0,0,108,111,99,97,108,104,111,115,116,0,0,0,0,0,0,0,52,48,56,50,0,0,0,0,49,46,48,0,0,0,0,0,83,101,110,100,105,110,103,32,109,121,32,110,97,109,101,32,37,115,0,0,0,0,0,0,37,115,32,37,103,32,102,105,110,97,108,37,115,10,0,0,0,0,0,0,0,0,0,0,32,115,116,97,98,108,101,0,103,115,101,114,118,101,114,46,99,111,109,112,117,116,101,114,45,115,104,111,103,105,46,111,114,103,0,0,0,0,0,0,52,48,56,49,0,0,0,0,98,111,110,97,110,122,97,95,116,101,115,116,0,0,0,0,32,9,0,0,0,0,0,0,114,101,115,112,111,110,115,101,0,0,0,0,0,0,0,0,114,101,109,97,105,110,0,0,116,0,0,0,0,0,0,0,110,105,108,0,0,0,0,0,103,97,109,101,46,99,115,95,0,0,0,0,0,0,0,0,103,97,109,101,46,99,115,97,0,0,0,0,0,0,0,0,119,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,114,101,109,111,118,101,40,41,32,102,97,105,108,101,100,46,0,0,0,0,0,0,0,0,109,97,116,101,0,0,0,0,112,114,111,98,108,101,109,46,99,115,97,0,0,0,0,0,112,111,110,103,10,0,0,0,78,79,32,76,69,71,65,76,32,77,79,86,69,10,0,0,37,115,10,0,0,0,0,0,37,115,32,0,0,0,0,0,100,101,112,116,104,0,0,0,110,111,100,101,115,0,0,0,101,120,116,101,110,100,97,98,108,101,0,0,0,0,0,0,115,116,114,105,99,116,0,0,10,0,0,0,0,0,0,0,110,97,114,114,111,119,0,0,119,105,100,101,0,0,0,0,37,37,84,79,82,89,79,10,0,0,0,0,0,0,0,0,37,99,37,115,44,39,42,32,37,100,0,0,0,0,0,0,32,37,99,37,115,0,0,0,37,115,10,0,0,0,0,0,37,99,37,115,10,0,0,0,114,101,115,105,103,110,0,0,37,115,32,39,40,37,100,37,115,41,32,37,48,51,117,58,37,48,50,117,47,37,48,51,117,58,37,48,50,117,32,32,101,108,97,112,115,101,100,58,32,98,37,117,44,32,119,37,117,10,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,84,104,101,32,110,111,114,109,97,108,32,100,105,115,116,114,105,98,117,116,105,111,110,32,78,40,48,44,115,100,94,50,41,32,105,115,32,103,101,110,101,114,97,116,101,100,46,10,0,0,0,0,0,0,0,32,32,97,99,116,117,97,108,32,97,118,101,114,97,103,101,58,32,32,32,32,32,32,32,32,32,32,32,32,37,32,46,55,102,10,0,0,0,0,0,32,32,97,99,116,117,97,108,32,115,116,97,110,100,97,114,100,32,100,101,118,105,97,116,105,111,110,58,32,37,32,46,55,102,10,0,0,0,0,0,114,97,110,100,32,115,101,101,100,32,61,32,37,120,10,0,109,97,108,108,111,99,40,41,32,102,97,105,108,100,0,0,114,98,0,0,0,0,0,0,37,115,10,0,0,0,0,0,37,115,0,0,0,0,0,0,37,115,32,102,111,117,110,100,10,0,0,0,0,0,0,0,114,97,110,100,32,115,101,101,100,32,61,32,37,120,10,0,72,63,54,45,36,27,18,9,0,73,64,55,46,37,28,19,10,1,74,65,56,47,38,29,20,11,2,75,66,57,48,39,30,21,12,3,76,67,58,49,40,31,22,13,4,77,68,59,50,41,32,23,14,5,78,69,60,51,42,33,24,15,6,79,70,61,52,43,34,25,16,7,80,71,62,53,44,35,26,17,8,0,0,0,0,0,0,0,0,73,65,57,49,41,33,25,17,9,1,74,66,58,50,42,34,26,18,10,2,75,67,59,51,43,35,27,19,11,3,76,68,60,52,44,36,28,20,12,4,77,69,61,53,45,37,29,21,13,5,78,70,62,54,46,38,30,22,14,6,79,71,63,55,47,39,31,23,15,7,80,72,64,56,48,40,32,24,16,8,0,0,0,0,0,0,0,17,26,35,44,53,62,71,80,8,25,34,43,52,61,70,79,7,16,33,42,51,60,69,78,6,15,24,41,50,59,68,77,5,14,23,32,49,58,67,76,4,13,22,31,40,57,66,75,3,12,21,30,39,48,65,74,2,11,20,29,38,47,56,73,1,10,19,28,37,46,55,64,0,9,18,27,36,45,54,63,72,0,0,0,0,0,0,0,114,98,43,0,0,0,0,0,32,32,32,32,109,111,118,101,32,32,32,32,32,102,114,101,113,10,0,0,0,0,0,0,32,32,37,99,32,37,115,32,32,37,53,46,49,102,10,0,66,65,68,32,66,79,79,75,32,77,79,86,69,33,33,32,0,0,0,0,0,0,0,0,110,111,114,109,97,108,105,122,97,116,105,111,110,32,101,114,114,111,114,0,0,0,0,0,110,111,32,109,111,114,101,32,117,110,100,111,32,105,110,102,111,109,97,116,105,111,110,32,97,116,32,114,111,111,116,0,45,32,116,105,109,101,32,99,116,114,108,58,32,37,117,32,45,45,32,37,117,10,0,0,84,73,77,69,32,83,75,69,87,32,68,69,84,69,67,84,69,68,0,0,0,0,0,0,110,111,32,116,105,109,101,32,108,105,109,105,116,32,105,115,32,115,101,116,0,0,0,0,116,105,109,101,32,114,101,109,97,105,110,105,110,103,32,99,97,110,39,116,32,98,101,32,108,97,114,103,101,114,32,116,104,97,110,32,37,117,0,0,32,32,101,108,97,112,115,101,100,58,32,98,37,117,44,32,119,37,117,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,53,46,50,102,0,0,0,37,50,117,58,37,48,50,117,0,0,0,0,0,0,0,0,116,105,109,101,115,40,41,32,102,97,105,108,100,46,0,0,103,101,116,116,105,109,101,111,102,100,97,121,40,41,32,102,97,105,108,100,46,0,0,0,119,0,0,0,0,0,0,0,119,98,43,0,0,0,0,0,114,98,0,0,0,0,0,0,37,115,10,0,0,0,0,0,37,99,37,115,10,0,0,0,84,37,45,55,117,44,39,37,48,51,117,58,37,48,50,117,32,10,0,0,0,0,0,0,37,37,84,83,85,77,73,10,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,84,105,109,101,32,115,112,101,110,116,32,105,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,46,0,0,0,0,0,0,0,0,0,0,0,0,37,100,37,100,37,100,37,100,37,115,0,0,0,0,0,0,48,48,37,100,37,100,37,115,0,0,0,0,0,0,0,0,36,65,78,83,87,69,82,58,0,0,0,0,0,0,0,0,84,104,101,32,110,117,109,98,101,114,32,111,102,32,97,110,115,119,101,114,115,32,114,101,97,99,104,101,100,32,77,65,88,95,65,78,83,87,69,82,46,0,0,0,0,0,0,0,78,43,0,0,0,0,0,0,78,45,0,0,0,0,0,0,43,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,39,66,111,110,97,110,122,97,32,118,101,114,115,105,111,110,32,54,46,48,10,0,0,0,78,43,37,115,10,0,0,0,78,45,37,115,10,0,0,0,37,115,32,116,105,109,101,40,41,32,102,97,105,108,100,46,0,0,0,0,0,0,0,0,36,83,84,65,82,84,95,84,73,77,69,58,37,52,100,47,37,48,50,100,47,37,48,50,100,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,10,0,0,0,0,0,0,0,80,73,10,0,0,0,0,0,45,10,0,0,0,0,0,0,43,10,0,0,0,0,0,0,116,111,111,32,109,97,110,121,32,112,97,119,110,115,0,0,116,111,111,32,109,97,110,121,32,108,97,110,99,101,115,0,116,111,111,32,109,97,110,121,32,107,110,105,103,104,116,115,0,0,0,0,0,0,0,0,116,111,111,32,109,97,110,121,32,115,105,108,118,101,114,115,0,0,0,0,0,0,0,0,116,111,111,32,109,97,110,121,32,103,111,108,100,115,0,0,116,111,111,32,109,97,110,121,32,98,105,115,104,111,112,115,0,0,0,0,0,0,0,0,116,111,111,32,109,97,110,121,32,114,111,111,107,115,0,0,105,110,118,97,108,105,100,32,110,117,109,98,101,114,32,111,102,32,107,105,110,103,115,0,116,119,111,32,98,108,97,99,107,32,112,97,119,110,115,32,97,116,32,97,32,102,105,108,101,0,0,0,0,0,0,0,116,119,111,32,119,104,105,116,101,32,112,97,119,110,115,32,97,116,32,97,32,102,105,108,101,0,0,0,0,0,0,0,98,108,97,99,107,32,112,97,119,110,115,32,105,110,32,114,97,110,107,32,49,0,0,0,98,108,97,99,107,32,108,97,110,99,101,115,32,105,110,32,114,97,110,107,32,49,0,0,98,108,97,99,107,32,107,110,105,103,104,116,115,32,105,110,32,114,97,110,107,32,49,45,50,0,0,0,0,0,0,0,119,104,105,116,101,32,112,97,119,110,115,32,105,110,32,114,97,110,107,32,57,0,0,0,119,104,105,116,101,32,108,97,110,99,101,115,32,105,110,32,114,97,110,107,32,57,0,0,119,104,105,116,101,32,107,110,105,103,104,116,115,32,105,110,32,114,97,110,107,32,56,45,57,0,0,0,0,0,0,0,45,32,111,112,101,110,105,110,103,32,98,111,111,107,32,105,115,32,112,114,111,98,101,100,46,32,40,37,115,115,41,10,0,0,0,0,0,0,0,0,112,105,100,61,37,100,32,109,111,118,101,61,37,115,32,110,61,48,32,118,61,48,101,32,102,105,110,97,108,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,115,116,97,98,108,101,0,10,73,78,65,78,73,87,65,32,83,72,73,70,84,32,84,85,82,78,69,68,32,79,78,32,40,66,76,65,67,75,41,10,10,0,0,0,0,0,0,10,73,78,65,78,73,87,65,32,83,72,73,70,84,32,84,85,82,78,69,68,32,79,78,32,40,87,72,73,84,69,41,10,10,0,0,0,0,0,0,110,115,117,99,95,99,104,101,99,107,58,32,91,48,93,61,37,100,32,91,49,93,61,37,100,10,0,0,0,0,0,0,45,32,97,32,112,118,32,119,97,115,32,102,111,117,110,100,32,105,110,32,116,104,101,32,112,114,101,118,105,111,117,115,32,115,101,97,114,99,104,32,114,101,115,117,108,116,46,10,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,45,32,97,32,112,118,32,119,97,115,32,112,101,101,107,101,100,32,116,104,114,111,117,103,104,32,116,104,101,32,116,114,97,110,115,112,111,115,105,116,105,111,110,32,116,97,98,108,101,46,10,0,0,0,0,0,45,32,114,111,111,116,32,109,111,118,101,32,103,101,110,101,114,97,116,105,111,110,0,0,112,105,100,61,37,100,32,109,111,118,101,61,37,37,84,79,82,89,79,32,118,61,37,100,101,32,110,61,48,32,102,105,110,97,108,37,115,10,0,0,32,46,46,46,32,100,111,110,101,32,40,37,100,32,109,111,118,101,115,44,32,37,115,115,41,10,0,0,0,0,0,0,112,105,100,61,37,100,32,109,111,118,101,61,37,115,32,118,61,37,100,101,32,110,61,37,108,108,117,10,0,0,0,0,45,32,100,114,105,118,101,32,97,110,32,105,116,101,114,97,116,105,118,101,32,100,101,101,112,101,110,105,110,103,32,115,101,97,114,99,104,32,115,116,97,114,116,105,110,103,32,102,114,111,109,32,100,101,112,116,104,32,37,100,10,0,0,0,112,105,100,61,37,100,32,109,111,118,101,61,37,115,32,118,61,37,100,108,32,110,61,37,108,108,117,37,115,10,0,0,40,37,50,100,41,37,54,115,32,37,55,46,50,102,32,0,32,32,32,32,37,54,115,32,37,55,46,50,102,32,0,0,32,49,46,37,99,37,115,32,91,37,115,33,93,10,0,0,32,49,46,37,99,37,115,32,91,37,115,63,93,10,0,0,32,32,32,32,112,114,117,110,105,110,103,32,32,45,62,32,114,101,112,61,37,52,46,51,102,37,37,32,32,104,97,115,104,61,37,50,46,48,102,37,37,32,32,110,117,108,108,61,37,50,46,48,102,37,37,32,32,102,104,49,115,116,61,37,52,46,49,102,37,37,10,0,32,32,32,32,101,120,116,101,110,115,105,111,110,45,62,32,99,104,107,61,37,117,32,114,101,99,97,112,61,37,117,32,49,114,101,112,61,37,117,10,0,0,0,0,0,0,0,0,32,32,32,32,102,117,116,105,108,105,116,121,32,45,62,32,109,105,115,99,61,37,100,32,100,114,111,112,61,37,100,32,99,97,112,61,37,100,32,109,116,61,37,100,32,109,105,115,99,40,107,41,61,37,100,32,99,97,112,40,107,41,61,37,100,10,0,0,0,0,0,0,32,32,32,32,104,97,115,104,105,110,103,32,32,45,62,32,97,108,119,97,121,115,61,37,50,46,48,102,37,37,32,112,114,101,102,101,114,61,37,50,46,48,102,37,37,32,115,117,112,101,61,37,52,46,50,102,37,37,32,105,110,102,101,61,37,52,46,50,102,37,37,10,0,0,0,0,0,0,0,0,32,32,32,32,104,97,115,104,105,110,103,32,32,45,62,32,101,120,97,99,116,61,37,100,32,108,111,119,101,114,61,37,50,46,48,102,37,37,32,117,112,112,101,114,61,37,52,46,50,102,37,37,32,115,97,116,61,37,50,46,48,102,37,37,32,97,103,101,61,37,100,10,0,0,0,0,0,0,0,0,32,32,32,32,110,61,37,108,108,117,32,113,117,105,101,115,61,37,117,32,101,118,97,108,61,37,117,32,114,101,112,61,37,117,32,37,117,40,99,104,107,41,32,37,117,40,115,117,112,101,41,10,0,0,0,0,32,32,32,32,116,105,109,101,61,37,115,32,32,0,0,0,99,112,117,61,37,51,46,48,102,37,37,32,32,109,97,116,61,37,46,49,102,32,32,110,112,115,61,37,46,50,102,75,10,0,0,0,0,0,0,0,45,49,0,0,0,0,0,0,43,49,0,0,0,0,0,0,45,52,0,0,0,0,0,0,43,52,0,0,0,0,0,0,45,50,0,0,0,0,0,0,43,50,0,0,0,0,0,0,45,54,0,0,0,0,0,0,43,54,0,0,0,0,0,0,69,114,114,111,114,32,97,116,32,115,101,116,95,114,111,111,116,95,97,108,112,104,97,33,0,0,0,0,0,0,0,0,69,114,114,111,114,32,97,116,32,115,101,116,95,114,111,111,116,95,98,101,116,97,33,0,45,32,98,111,111,107,32,105,115,32,105,103,110,111,114,101,100,32,100,117,101,32,116,111,32,97,32,114,101,112,101,116,105,116,105,111,110,46,10,0,112,105,100,61,37,100,32,109,111,118,101,61,37,115,32,118,61,37,100,108,32,110,61,37,32,108,108,117,37,115,10,0,32,115,116,97,98,108,101,0,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,37,55,46,50,102,32,32,49,46,37,99,37,115,32,91,37,99,48,33,93,10,0,0,0,0,0,0,0,0,32,37,50,100,32,37,54,115,32,37,55,46,50,102,32,0,32,32,32,32,37,54,115,32,37,55,46,50,102,32,0,0,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,0,0,0,37,50,100,46,37,99,37,45,55,115,0,0,0,0,0,0,37,50,100,58,37,99,37,45,55,115,0,0,0,0,0,0,80,69,82,46,32,67,72,69,67,75,0,0,0,0,0,0,82,69,80,69,84,73,84,73,79,78,0,0,0,0,0,0,83,85,80,69,82,73,46,32,80,79,83,73,46,0,0,0,80,82,69,86,46,32,83,69,65,82,67,72,0,0,0,0,72,65,83,72,32,72,73,84,0,0,0,0,0,0,0,0,66,79,79,75,32,72,73,84,0,0,0,0,0,0,0,0,70,65,73,76,32,72,73,71,72,0,0,0,0,0,0,0,77,65,84,69,32,83,69,65,82,67,72,0,0,0,0,0,32,60,37,115,62,0,0,0,10,0,0,0,0,0,0,0,37,100,47,37,100,0,0,0,40,37,50,100,41,32,32,32,32,32,32,32,37,55,115,42,32,49,46,37,99,37,115,32,32,32,32,32,13,0,0,0,32,32,32,32,32,32,32,32,32,32,32,37,55,115,42,32,49,46,37,99,37,115,32,32,32,32,32,13,0,0,0,0,112,105,100,61,37,100,32,109,111,118,101,61,37,115,32,118,61,37,100,101,32,110,61,37,108,108,117,37,115,10,0,0,37,115,0,0,0,0,0,0,10,0,0,0,0,0,0,0,112,105,100,61,37,100,32,110,61,37,108,108,117,10,0,0,32,32,84,104,101,32,114,111,111,116,32,109,111,118,101,32,37,115,32,99,111,117,110,116,101,100,32,97,115,32,101,97,115,121,33,33,10,0,0,0,84,114,97,110,115,46,32,84,97,98,108,101,32,69,110,116,114,105,101,115,32,61,32,37,100,75,32,40,37,100,77,66,41,10,0,0,0,0,0,0,99,108,101,97,110,110,105,110,103,32,116,104,101,32,116,114,97,110,115,112,111,115,105,116,105,111,110,32,116,97,98,108,101,32,46,46,46,0,0,0,32,100,111,110,101,32,40,37,115,115,41,10,0,0,0,0,10,32,32,32,32,116,104,101,32,114,111,111,116,32,109,111,118,101,32,37,115,32,108,111,111,107,115,32,101,97,115,121,32,40,116,121,112,101,32,37,100,41,46,10,0,0,0,0,32,32,32,32,101,118,97,115,105,111,110,58,37,100,44,32,99,97,112,116,117,114,101,58,37,100,44,32,112,114,111,109,111,116,105,111,110,58,37,100,44,32,100,114,111,112,58,37,100,44,32,118,97,108,117,101,58,37,53,100,32,45,32,37,53,100,10,0,0,0,0,0,65,110,115,119,101,114,115,58,0,0,0,0,0,0,0,0,65,110,115,119,101,114,115,32,104,97,115,32,105,110,118,97,108,105,100,32,115,105,103,110,32,111,102,32,116,117,114,110,46,0,0,0,0,0,0,0,37,115,32,0,0,0,0,0,10,0,0,0,0,0,0,0,78,111,32,97,110,115,119,101,114,115,32,105,110,32,116,104,101,32,114,101,99,111,114,100,0,0,0,0,0,0,0,0,112,114,111,98,108,101,109,32,35,37,100,32,97,110,115,119,101,114,61,37,115,32,45,45,32,37,115,32,40,99,111,114,114,101,99,116,61,37,100,44,32,105,110,99,111,114,114,101,99,116,61,37,100,41,10,10,0,0,0,0,0,0,0,0,99,111,114,114,101,99,116,0,105,110,99,111,114,114,101,99,116,0,0,0,0,0,0,0,84,111,116,97,108,32,78,111,100,101,115,58,32,32,32,37,108,108,117,10,0,0,0,0,84,111,116,97,108,32,69,108,97,112,115,101,100,58,32,37,46,50,102,10,0,0,0,0,80,114,111,98,108,101,109,32,35,37,100,32,37,115,10,0,40,105,110,32,99,104,101,99,107,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,83,101,97,114,99,104,32,97,32,109,111,118,101,32,116,111,32,112,111,110,100,101,114,10,10,0,0,0,0,0,0,112,111,110,100,101,114,32,101,110,100,10,0,0,0,0,0,10,80,111,110,100,101,114,32,111,110,32,37,99,37,115,32,40,37,43,46,50,102,41,10,10,0,0,0,0,0,0,0,112,105,100,61,37,100,32,109,111,118,101,61,37,37,84,79,82,89,79,32,118,61,37,100,101,32,110,61,48,32,102,105,110,97,108,37,115,10,0,0,0,0,0,0,0,0,0,0,32,115,116,97,98,108,101,0,112,105,100,61,37,100,32,102,105,110,97,108,37,115,10,0,76,79,71,73,78,32,37,115,32,37,115,10,0,0,0,0,119,97,105,116,32,102,111,114,32,110,101,120,116,32,103,97,109,101,45,99,111,110,100,105,116,105,111,110,115,46,46,46,10,0,0,0,0,0,0,0,69,78,68,32,71,97,109,101,95,83,117,109,109,97,114,121,0,0,0,0,0,0,0,0,89,111,117,114,95,84,117,114,110,58,45,0,0,0,0,0,78,97,109,101,43,58,0,0,78,97,109,101,45,58,0,0,65,71,82,69,69,10,0,0,82,69,74,69,67,84,58,0,83,84,65,82,84,58,0,0,71,97,109,101,32,67,111,110,100,105,116,105,111,110,115,32,40,37,100,116,104,41,58,10,0,0,0,0,0,0,0,0,32,32,109,121,32,116,117,114,110,58,37,99,10,0,0,0,103,101,116,104,111,115,116,98,121,110,97,109,101,40,41,32,102,97,105,108,100,46,0,0,115,111,99,107,101,116,40,41,32,102,97,105,108,100,46,0,99,111,110,110,101,99,116,40,41,32,102,97,105,108,101,100,46,32,32,116,114,121,32,97,103,97,105,110,32,0,0,0,46,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,115,104,117,116,32,100,111,119,110,32,99,111,110,110,101,99,116,105,111,110,0,0,0,0,115,104,117,116,100,111,119,110,40,41,32,102,97,105,108,100,46,0,0,0,0,0,0,0,114,101,99,118,40,41,32,102,97,105,108,101,100,46,0,0,99,108,111,115,101,40,41,32,102,97,105,108,101,100,46,0,115,101,108,101,99,116,40,41,32,119,105,116,104,32,97,32,115,111,99,107,101,116,32,99,111,110,110,101,99,116,101,100,32,102,97,105,108,101,100,58,0,0,0,0,0,0,0,0,119,97,105,116,32,102,111,114,32,97,32,109,101,115,115,97,103,101,32,46,46,46,32,0,115,101,108,101,99,116,40,41,32,119,105,116,104,32,97,32,115,111,99,107,101,116,32,99,111,110,110,101,99,116,101,100,32,102,97,105,108,101,100,46,0,0,0,0,0,0,0,0,100,111,110,101,46,10,0,0,116,105,109,101,32,111,117,116,46,10,0,0,0,0,0,0,115,101,110,100,40,41,32,102,97,105,108,101,100,58,0,0,114,101,99,118,40,41,32,102,97,105,108,101,100,58,0,0,67,111,110,110,101,99,116,105,111,110,32,99,108,111,115,101,100,46,10,0,0,0,0,0,37,115,91,69,78,68,93,10,0,0,0,0,0,0,0,0,98,117,102,102,101,114,32,111,118,101,114,102,108,111,119,32,97,116,32,115,99,107,116,95,111,117,116,40,41,0,0,0,45,32,110,111,119,32,115,101,110,100,105,110,103,32,116,104,101,32,109,101,115,115,97,103,101,58,32,37,115], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+221111344);
/* memory initializer */ allocate([234,22,1,55,47,61,182,17,121,58,218,11,82,32,146,29,235,56,68,60,105,11,37,0,230,9,119,18,148,2,249,0,116,32,78,14,178,61,95,39,33,54,219,50,182,23,181,35,102,15,37,57,235,26,41,45,124,47,185,18,124,43,189,50,60,39,176,63,173,36,180,8,189,19,205,14,100,23,127,17,15,34,77,54,164,60,26,12,146,29,149,50,50,4,0,0,95,39,105,63,107,29,50,57,32,53,151,31,0,0,170,45,131,33,53,60,122,25,52,4,117,10,2,27,129,42,235,53,238,53,173,61,50,57,87,8,67,60,199,54,255,54,28,30,18,14,0,0,112,19,158,42,213,18,191,17,79,21,152,36,105,16,242,38,151,41,26,59,95,39,172,58,182,21,30,62,178,30,146,11,146,40,107,8,49,57,20,48,85,31,234,31,186,9,32,41,67,60,37,57,32,41,32,59,231,3,91,7,64,58,36,42,216,24,93,14,112,58,225,47,246,8,70,49,250,33,145,48,139,38,119,49,144,62,68,44,120,33,156,32,0,0,156,12,146,33,241,43,18,26,26,12,81,36,93,39,100,40,171,22,44,21,182,23,148,2,44,22,1,0,25,37,252,33,184,55,214,22,145,48,154,63,17,49,0,47,164,53,47,32,235,41,68,28,46,40,118,10,153,28,56,52,194,25,87,35,171,20,101,32,249,10,196,12,85,25,13,41,229,8,231,40,83,2,183,34,47,62,77,56,9,62,123,34,158,53,151,54,12,55,210,29,116,6,49,34,145,26,168,25,237,61,254,3,32,22,0,0,87,36,103,61,240,23,18,26,9,29,157,0,144,36,155,25,144,48,121,37,188,37,1,55,103,54,254,33,134,53,215,33,253,21,107,14,170,63,37,6,134,3,248,4,72,9,60,4,111,56,74,57,156,6,212,59,25,59,249,14,152,3,156,32,223,61,30,62,19,61,100,40,203,25,228,6,162,37,249,14,166,9,96,18,174,37,129,1,144,51,193,11,26,6,190,26,198,25,245,61,220,34,242,45,182,14,135,35,175,1,199,25,195,7,30,62,56,43,108,19,143,47,50,57,33,54,242,23,201,22,33,54,80,47,234,31,139,38,9,10,176,37,91,7,221,39,77,48,145,26,102,20,170,56,27,7,22,20,124,8,171,20,182,60,80,47,44,8,184,21,186,17,85,21,211,58,253,45,12,62,51,8,220,26,138,46,249,14,108,19,228,31,96,24,199,48,61,5,235,41,242,45,212,56,119,17,180,19,152,29,88,9,1,63,239,31,135,29,15,49,245,61,252,24,110,11,194,29,225,32,143,61,0,0,135,35,182,13,79,28,176,6,217,63,161,8,119,31,0,0,63,1,177,47,88,51,55,59,46,32,142,30,150,19,93,39,236,8,9,28,155,25,245,61,143,56,206,9,234,31,30,46,117,47,152,48,105,55,242,45,32,45,68,32,88,46,208,45,198,58,41,45,99,18,108,52,31,14,185,8,229,8,172,41,180,8,80,31,21,7,117,10,120,20,194,25,236,25,183,38,201,6,44,17,212,48,210,37,8,28,235,7,212,48,124,20,80,47,232,6,235,56,119,49,73,26,78,14,234,31,25,61,212,59,176,37,253,20,99,21,122,25,235,56,78,14,30,62,116,6,176,37,180,8,156,32,134,3,100,23,190,35,194,51,99,52,67,18,175,1,131,21,120,41,163,54,212,59,98,5,8,54,44,52,103,39,71,37,133,35,129,31,1,41,36,32,242,45,104,2,168,50,35,21,176,37,199,48,247,36,237,60,28,44,161,54,146,56,8,57,169,6,70,18,244,46,124,34,66,24,9,37,132,58,106,22,102,23,111,56,33,6,170,33,225,8,95,33,27,7,30,63,159,48,182,48,176,39,117,18,26,42,132,5,104,31,204,16,78,37,56,2,226,28,80,2,9,37,64,61,148,13,0,63,236,29,190,4,103,1,37,24,170,33,227,15,107,57,56,52,2,2,91,44,210,34,217,14,184,56,181,34,194,40,82,32,29,30,216,16,75,28,89,49,3,19,93,23,186,17,186,9,218,11,182,21,145,26,88,29,123,58,219,16,41,19,162,45,141,34,148,14,195,5,141,45,205,39,205,6,147,45,229,21,96,10,101,37,146,42,236,10,25,7,112,59,144,43,214,1,100,23,20,24,108,19,146,40,72,51,79,28,196,12,73,26,204,16,45,51,120,33,119,49,25,54,16,14,246,37,195,43,32,41,164,53,131,20,68,55,120,33,72,51,221,39,68,44,176,6,21,50,85,37,209,49,9,41,156,20,109,0,154,40,138,39,81,38,185,13,221,62,186,9,215,38,206,57,236,58,246,17,54,20,32,61,53,51,0,0,59,27,66,60,164,56,235,56,175,26,63,10,145,26,122,25,28,60,156,12,45,43,0,0,86,11,189,16,29,54,238,57,253,20,33,59,103,39,196,12,9,10,140,24,86,11,203,5,254,14,127,47,156,18,26,59,190,26,45,27,211,48,252,17,179,10,37,57,228,3,3,19,108,52,111,30,143,20,183,31,104,39,32,16,14,31,99,46,116,63,123,4,145,13,196,12,253,61,21,50,144,43,194,38,195,7,46,32,167,59,84,3,9,27,59,16,177,30,179,43,227,8,144,55,109,61,239,38,127,17,122,25,144,43,153,9,74,23,164,53,104,39,218,43,95,44,189,19,108,52,143,14,199,48,239,14,100,52,164,53,74,23,253,42,165,43,15,34,2,17,165,26,157,44,24,61,161,18,20,58,153,36,215,0,240,31,59,9,138,7,28,16,74,44,253,20,87,8,133,20,152,41,76,24,221,22,181,10,244,46,246,54,235,56,52,29,51,35,151,44,26,5,198,20,106,52,125,28,4,60,194,34,74,13,200,46,109,36,26,6,198,28,67,13,10,42,232,27,32,9,146,52,186,17,135,4,195,7,132,45,164,50,201,52,29,2,224,53,13,38,88,42,1,63,165,42,182,17,32,53,86,21,53,9,50,15,155,24,51,44,64,52,252,53,57,52,98,17,202,55,182,13,24,39,77,9,85,36,181,39,224,18,242,50,205,14,231,45,85,31,206,55,125,36,180,1,211,35,175,33,201,49,194,49,55,2,172,54,70,14,23,37,76,3,68,32,4,59,35,11,111,40,196,10,124,33,110,14,147,34,201,22,184,16,136,47,78,37,135,35,116,6,194,25,230,9,78,14,233,46,171,26,23,29,180,8,155,25,47,62,246,8,122,25,18,26,0,0,72,51,118,60,26,12,235,56,37,6,61,51,208,63,94,13,207,49,27,18,80,38,115,51,99,46,68,55,167,57,64,61,98,2,12,3,47,55,219,58,173,49,248,45,175,8,137,18,63,8,11,17,165,26,198,47,144,51,221,62,154,1,101,59,254,14,172,58,198,47,145,13,15,31,110,11,213,3,102,52,218,11,107,38,35,15,79,28,160,61,45,43,37,41,249,24,73,26,176,6,201,47,104,39,32,20,98,5,155,23,31,15,155,23,199,48,167,60,249,45,20,48,74,23,88,46,52,42,196,12,181,54,94,53,151,41,108,19,33,59,149,56,104,30,107,28,154,1,155,25,166,9,162,27,103,1,207,49,22,47,147,34,177,11,15,37,214,51,51,36,66,9,183,31,32,55,239,25,157,0,5,40,249,62,239,38,64,58,67,40,75,31,62,47,166,9,82,40,242,13,10,24,173,5,236,58,209,57,239,14,91,28,12,3,108,19,247,50,164,56,9,10,201,22,56,0,9,57,130,10,172,19,20,3,46,0,178,10,194,38,68,44,123,41,75,31,72,51,196,12,175,1,100,52,147,34,156,57,172,19,153,47,242,50,46,39,196,45,100,0,77,63,15,31,106,22,225,32,5,42,63,25,202,27,159,4,206,57,221,39,249,37,255,59,90,39,23,34,235,17,99,46,23,57,100,40,211,35,211,35,78,18,51,30,173,16,242,50,126,33,170,63,112,27,69,40,42,11,40,19,55,28,46,32,88,29,204,17,204,13,118,59,113,8,138,4,76,25,149,12,50,40,221,43,33,59,73,58,39,5,61,19,199,7,137,30,3,29,241,58,150,36,152,3,35,15,33,18,11,46,175,55,51,19,164,29,195,60,50,51,142,62,82,50,84,40,85,1,51,5,189,41,14,31,4,48,246,39,232,59,7,29,152,29,14,24,194,19,117,47,217,10,122,52,143,20,153,61,149,38,144,10,60,40,99,3,163,5,165,20,107,8,122,17,167,3,42,49,57,49,158,0,63,63,183,31,142,14,226,13,158,40,106,52,234,31,3,19,50,57,118,60,176,6,152,39,18,26,0,0,46,0,139,38,182,14,145,48,169,23,132,15,108,8,84,3,96,8,128,38,169,57,227,44,46,0,107,1,65,41,132,17,231,3,85,37,86,11,155,28,236,58,82,32,215,62,23,26,211,26,59,27,98,11,74,2,96,24,100,23,146,40,112,32,78,14,104,39,100,23,21,50,241,28,116,32,59,62,40,56,108,57,126,62,132,17,230,6,178,61,249,14,160,9,246,16,78,5,63,1,115,39,160,61,223,61,250,5,90,33,120,30,57,14,193,21,45,29,56,8,122,32,16,35,74,23,81,46,90,40,101,32,68,48,119,5,199,7,39,21,1,41,118,60,59,62,116,32,88,45,183,39,89,16,153,36,122,6,49,24,74,23,12,20,34,48,63,1,122,30,99,18,218,11,44,44,87,37,36,42,180,8,147,32,201,52,102,20,176,6,26,12,195,7,159,10,12,6,67,60,49,52,168,53,19,20,231,4,56,43,75,31,217,3,247,23,20,3,201,10,122,25,242,20,72,51,148,13,20,24,0,47,86,11,9,62,45,43,202,56,164,50,138,57,167,14,90,50,140,1,108,4,20,24,2,31,93,12,253,29,186,47,95,27,216,18,122,24,102,16,167,35,21,50,63,25,199,0,122,25,86,21,60,4,64,28,101,61,26,13,228,10,150,24,81,46,94,55,187,8,247,23,128,30,59,62,137,40,144,4,202,35,8,28,11,14,62,39,168,7,142,14,187,6,123,26,203,42,193,43,113,18,149,2,79,28,100,23,27,44,135,35,107,33,105,27,87,23,164,56,206,61,135,42,63,31,176,37,36,62,122,11,101,32,37,57,137,16,227,32,21,20,139,48,144,36,132,11,105,36,161,52,110,4,87,0,84,16,236,8,118,34,53,15,37,61,52,61,143,47,15,31,124,49,63,51,159,30,185,18,78,18,146,3,9,37,136,46,140,51,139,16,189,59,72,22,103,35,69,6,24,61,214,51,168,4,239,38,250,33,200,21,243,11,227,15,33,46,44,21,11,30,215,62,252,2,199,48,225,8,144,55,100,52,253,20,119,49,20,3,145,48,166,34,30,62,195,54,126,15,80,4,145,43,61,51,209,34,46,0,194,38,136,59,68,32,146,38,176,6,136,35,28,30,192,17,241,60,0,0,33,41,251,28,188,36,141,2,227,15,221,41,37,19,25,39,61,28,139,38,196,29,132,5,204,55,203,38,141,34,151,54,46,32,189,42,221,39,166,2,44,44,137,58,67,47,196,12,112,43,68,55,220,30,46,23,115,39,103,50,130,24,176,37,35,11,204,3,29,20,34,37,70,47,211,2,1,62,161,56,71,21,193,52,90,53,72,51,91,18,144,43,0,0,0,0,128,30,63,10,18,26,85,37,240,30,20,39,1,55,0,0,118,60,210,48,250,27,94,53,102,56,27,27,89,42,199,25,162,27,81,8,87,36,30,14,1,20,58,53,214,57,40,51,155,20,0,47,167,44,233,47,242,0,107,49,65,25,145,43,19,61,10,24,184,30,191,12,28,30,160,51,250,36,65,19,155,18,249,62,149,50,145,26,164,55,145,24,182,14,209,34,156,12,115,39,102,16,119,46,30,1,63,51,26,42,198,47,70,28,30,14,1,55,155,28,210,15,190,26,37,57,108,52,211,36,84,21,10,20,32,41,89,61,225,24,169,32,188,4,162,34,21,50,67,60,155,28,217,10,176,37,40,34,10,21,49,32,99,46,32,55,178,57,9,60,85,38,94,26,164,53,194,25,160,9,162,45,239,7,25,59,204,13,80,47,223,18,2,17,227,8,136,40,218,43,91,45,121,32,118,37,164,56,150,33,91,52,220,16,28,60,146,52,193,3,208,0,107,23,201,4,55,25,44,23,211,46,86,11,72,51,200,4,235,3,241,28,212,11,138,2,124,52,37,33,253,25,143,3,209,36,157,44,82,37,241,42,189,59,2,2,14,26,242,56,108,19,146,38,35,33,230,9,121,58,142,7,74,55,222,34,54,46,80,34,171,11,162,37,14,26,189,52,133,54,164,16,129,22,243,59,55,31,102,52,247,27,65,28,126,55,145,45,59,26,71,43,217,13,65,20,23,61,227,55,122,36,11,35,122,62,13,22,26,12,1,55,20,3,234,31,204,39,80,31,100,23,47,62,244,49,112,58,230,39,62,49,144,43,166,9,108,52,111,11,120,20,202,28,176,37,115,39,247,7,238,18,114,41,47,46,214,51,169,57,74,23,88,29,95,39,3,19,68,32,87,8,28,4,71,42,97,22,155,40,25,56,70,52,168,47,226,31,253,19,107,29,49,52,184,56,106,41,237,33,70,14,49,38,135,63,247,23,245,24,225,45,143,40,102,33,74,49,100,40,32,16,99,60,150,27,15,20,87,35,130,36,9,23,119,60,100,28,200,21,0,0,89,58,192,49,169,21,95,39,107,25,166,12,132,12,137,38,211,22,199,48,198,0,59,32,139,51,158,0,209,34,198,25,21,17,119,62,33,54,31,14,98,43,172,12,158,41,250,24,39,24,113,45,26,12,225,47,67,60,232,6,41,28,211,46,195,3,33,54,79,28,174,62,71,28,144,51,253,45,98,11,127,50,149,45,211,50,113,7,129,35,48,63,159,14,158,0,102,20,173,49,193,22,215,62,47,37,11,36,203,60,176,6,63,33,253,42,3,19,144,51,50,51,36,42,22,14,232,33,119,13,201,22,125,14,174,17,95,42,55,11,112,23,156,8,153,61,153,11,193,29,104,62,194,29,227,15,5,42,212,59,76,25,13,41,68,34,135,35,0,0,36,35,154,1,150,57,71,28,36,41,190,36,251,28,31,62,61,21,184,21,64,49,181,35,146,15,22,56,241,28,152,15,149,12,26,24,45,46,252,1,34,25,162,5,164,16,229,14,116,32,56,25,206,13,175,1,186,17,78,13,147,48,11,22,232,27,166,34,226,35,191,14,25,7,177,38,15,31,240,16,225,8,232,47,113,25,177,11,142,63,165,21,213,19,119,24,235,4,255,9,139,6,90,63,254,6,4,50,250,58,93,17,96,40,112,59,112,47,170,33,221,17,111,53,152,58,205,39,161,8,231,17,233,20,216,53,63,10,40,30,201,22,56,43,104,39,93,39,114,41,130,26,187,42,115,42,232,6,183,31,226,28,24,47,205,14,50,4,53,60,31,41,79,28,199,48,120,33,152,39,180,8,100,52,232,18,116,6,84,26,58,44,173,19,94,11,54,20,100,40,87,8,75,31,119,46,119,46,109,0,181,46,0,56,178,51,33,32,7,56,103,35,91,38,205,52,115,45,237,52,88,58,220,3,225,14,201,22,177,30,150,52,41,1,244,29,146,56,220,16,96,42,9,10,107,54,217,21,24,47,95,43,90,55,192,1,134,3,232,6,32,45,155,23,0,0,0,0,198,33,151,40,0,0,212,59,153,14,98,41,18,43,224,51,75,57,81,22,217,15,227,10,95,16,254,14,79,28,68,34,105,55,25,61,68,34,0,0,1,55,0,0,213,36,17,0,101,2,4,29,27,59,35,61,14,56,13,17,240,61,49,37,156,12,14,31,67,13,0,0,194,25,70,43,127,58,233,26,16,42,192,16,51,26,7,28,187,8,144,42,143,3,27,30,168,29,116,50,210,60,28,61,85,27,235,48,165,57,119,46,197,27,151,63,169,50,170,45,0,0,150,34,176,63,120,33,70,44,25,61,118,60,227,8,49,24,155,28,110,20,107,38,21,50,116,6,189,48,180,19,103,1,199,48,57,54,235,41,54,32,50,57,37,58,155,25,47,62,33,54,190,7,222,29,240,48,233,46,142,28,22,48,121,12,103,1,203,5,202,20,236,40,46,0,167,14,182,14,73,26,160,17,29,54,182,21,192,49,197,6,158,10,228,38,177,30,119,25,139,8,164,50,149,50,238,2,173,34,32,59,158,14,143,17,27,54,227,14,138,3,72,45,215,38,152,3,54,42,202,40,17,49,171,19,220,3,245,61,88,31,32,40,244,63,41,52,74,62,162,28,226,18,198,36,75,32,132,6,210,48,178,17,202,35,200,33,43,15,235,36,60,15,236,7,139,48,195,43,255,11,13,22,244,39,99,46,6,32,211,17,215,0,30,14,85,22,68,44,81,6,118,44,163,54,82,49,81,46,124,47,113,25,184,52,85,27,30,63,133,35,69,26,169,53,2,23,24,39,111,56,99,21,183,47,141,0,64,63,216,39,98,17,32,26,82,43,237,62,224,47,67,35,251,59,94,13,95,39,235,56,45,51,239,38,8,48,132,13,156,32,53,60,102,20,242,45,239,14,100,52,73,26,199,25,32,41,194,38,144,43,211,35,242,20,253,20,238,2,9,35,116,6,76,24,253,20,9,10,158,14,15,59,100,40,231,3,104,39,235,41,4,4,156,12,201,28,152,59,46,46,104,50,185,31,121,45,150,43,152,19,229,41,220,32,159,4,202,37,30,46,80,47,63,10,156,60,130,16,37,39,4,52,43,47,24,3,108,19,58,33,217,34,245,23,126,57,55,2,253,16,108,52,65,23,217,8,126,46,35,39,137,63,184,63,0,0,194,38,193,11,234,31,145,13,5,42,239,13,9,11,3,27,54,20,203,16,0,0,82,32,148,24,39,1,122,25,195,5,103,1,186,17,238,20,54,20,192,11,173,24,144,49,69,16,240,2,20,47,24,39,72,15,7,29,52,52,166,38,212,52,28,1,141,62,92,38,31,44,120,4,29,11,210,13,182,41,238,53,189,5,130,55,190,30,182,14,32,41,74,53,71,42,104,16,95,31,63,18,13,55,165,21,190,4,19,16,214,12,25,32,82,31], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+225311792);
/* memory initializer */ allocate([82,101,115,101,97,114,99,104,32,91,37,115,58,37,115,93,10,0,0,0,0,0,0,0,85,78,83,79,76,86,69,68,32,37,100,10,0,0,0,0,82,69,83,85,76,84,58,32,77,65,88,32,78,79,68,69,10,0,0,0,0,0,0,0,82,69,83,85,76,84,58,32,77,65,88,32,80,76,89,10,0,0,0,0,0,0,0,0,82,69,83,85,76,84,58,32,77,65,88,32,83,85,77,95,80,72,73,10,0,0,0,0,82,69,83,85,76,84,58,32,77,65,88,32,68,69,76,84,65,50,43,49,10,0,0,0,82,69,83,85,76,84,58,32,83,73,71,78,65,76,10,0,82,69,83,85,76,84,58,32,87,73,78,32,37,115,10,0,87,73,78,32,37,115,10,0,82,69,83,85,76,84,58,32,76,79,83,69,10,0,0,0,76,79,83,69,10,0,0,0,0,0,0,0,0,0,0,0,110,61,37,108,108,117,32,115,97,116,61,37,51,46,49,102,37,37,0,0,0,0,0,0,32,97,103,101,61,37,117,32,115,117,109,95,112,104,105,61,37,117,0,0,0,0,0,0,32,116,105,109,101,61,37,46,50,102,32,99,112,117,61,37,46,49,102,37,37,32,110,112,115,61,37,46,50,102,75,10,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,110,102,0,0,0,0,0,105,110,102,45,49,0,0,0,37,117,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,0,1,0,0,0,8,0,0,0,64,0,0,0,0,2,0,0,0,8,0,0,0,0,0,1,0,0,0,32,0,0,0,0,1,0,0,0,8,0,0,0,0,0,0,0,0,2,0,0,0,8,0,68,70,80,78,32,84,97,98,108,101,32,69,110,116,114,105,101,115,32,61,32,37,117,107,32,40,37,117,77,66,41,10,0,0,0,0,0,0,0,0,72,65,83,72,32,69,82,82,79,82,32,105,110,32,36,115,32,108,105,110,101,32,37,100,0,0,0,0,0,0,0,0,100,102,112,110,104,97,115,104,46,99,0,0,0,0,0,0,0,0,0,0,31,0,0,0,224,0,0,0,0,7,0,0,0,56,0,0,0,192,1,0,0,0,6,0,0,0,24,0,0,0,0,0,31,0,0,0,224,0,0,0,0,7,0,0,0,56,0,0,0,0,0,0,0,0,6,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+227423312);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc() {
  return _fgetc.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }


   
  Module["_memset"] = _memset;

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  
  
  function __inet_pton4_raw(str) {
      var b = str.split('.');
      for (var i = 0; i < 4; i++) {
        var tmp = Number(b[i]);
        if (isNaN(tmp)) return null;
        b[i] = tmp;
      }
      return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;
    }
  
  
  function _htons(value) {
      return ((value & 0xff) << 8) + ((value & 0xff00) >> 8);
    }function __inet_pton6_raw(str) {
      var words;
      var w, offset, z, i;
      /* http://home.deds.nl/~aeron/regex/ */
      var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i
      var parts = [];
      if (!valid6regx.test(str)) {
        return null;
      }
      if (str === "::") {
        return [0, 0, 0, 0, 0, 0, 0, 0];
      }
      // Z placeholder to keep track of zeros when splitting the string on ":"
      if (str.indexOf("::") === 0) {
        str = str.replace("::", "Z:"); // leading zeros case
      } else {
        str = str.replace("::", ":Z:");
      }
  
      if (str.indexOf(".") > 0) {
        // parse IPv4 embedded stress
        str = str.replace(new RegExp('[.]', 'g'), ":");
        words = str.split(":");
        words[words.length-4] = parseInt(words[words.length-4]) + parseInt(words[words.length-3])*256;
        words[words.length-3] = parseInt(words[words.length-2]) + parseInt(words[words.length-1])*256;
        words = words.slice(0, words.length-2);
      } else {
        words = str.split(":");
      }
  
      offset = 0; z = 0;
      for (w=0; w < words.length; w++) {
        if (typeof words[w] === 'string') {
          if (words[w] === 'Z') {
            // compressed zeros - write appropriate number of zero words
            for (z = 0; z < (8 - words.length+1); z++) {
              parts[w+z] = 0;
            }
            offset = z-1;
          } else {
            // parse hex to field to 16-bit value and write it in network byte-order
            parts[w+offset] = _htons(parseInt(words[w],16));
          }
        } else {
          // parsed IPv4 words
          parts[w+offset] = words[w];
        }
      }
      return [
        (parts[1] << 16) | parts[0],
        (parts[3] << 16) | parts[2],
        (parts[5] << 16) | parts[4],
        (parts[7] << 16) | parts[6]
      ];
    }var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:function (name) {
        // If the name is already a valid ipv4 / ipv6 address, don't generate a fake one.
        var res = __inet_pton4_raw(name);
        if (res) {
          return name;
        }
        res = __inet_pton6_raw(name);
        if (res) {
          return name;
        }
  
        // See if this name is already mapped.
        var addr;
  
        if (DNS.address_map.addrs[name]) {
          addr = DNS.address_map.addrs[name];
        } else {
          var id = DNS.address_map.id++;
          assert(id < 65535, 'exceeded max address mappings of 65535');
  
          addr = '172.29.' + (id & 0xff) + '.' + (id & 0xff00);
  
          DNS.address_map.names[addr] = name;
          DNS.address_map.addrs[name] = addr;
        }
  
        return addr;
      },lookup_addr:function (addr) {
        if (DNS.address_map.names[addr]) {
          return DNS.address_map.names[addr];
        }
  
        return null;
      }};
  
  
  var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};
  
  function __inet_ntop4_raw(addr) {
      return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)
    }
  
  
  function _ntohs() {
  return _htons.apply(null, arguments)
  }function __inet_ntop6_raw(ints) {
      //  ref:  http://www.ietf.org/rfc/rfc2373.txt - section 2.5.4
      //  Format for IPv4 compatible and mapped  128-bit IPv6 Addresses
      //  128-bits are split into eight 16-bit words
      //  stored in network byte order (big-endian)
      //  |                80 bits               | 16 |      32 bits        |
      //  +-----------------------------------------------------------------+
      //  |               10 bytes               |  2 |      4 bytes        |
      //  +--------------------------------------+--------------------------+
      //  +               5 words                |  1 |      2 words        |
      //  +--------------------------------------+--------------------------+
      //  |0000..............................0000|0000|    IPv4 ADDRESS     | (compatible)
      //  +--------------------------------------+----+---------------------+
      //  |0000..............................0000|FFFF|    IPv4 ADDRESS     | (mapped)
      //  +--------------------------------------+----+---------------------+
      var str = "";
      var word = 0;
      var longest = 0;
      var lastzero = 0;
      var zstart = 0;
      var len = 0;
      var i = 0;
      var parts = [
        ints[0] & 0xffff,
        (ints[0] >> 16),
        ints[1] & 0xffff,
        (ints[1] >> 16),
        ints[2] & 0xffff,
        (ints[2] >> 16),
        ints[3] & 0xffff,
        (ints[3] >> 16)
      ];
  
      // Handle IPv4-compatible, IPv4-mapped, loopback and any/unspecified addresses
  
      var hasipv4 = true;
      var v4part = "";
      // check if the 10 high-order bytes are all zeros (first 5 words)
      for (i = 0; i < 5; i++) {
        if (parts[i] !== 0) { hasipv4 = false; break; }
      }
  
      if (hasipv4) {
        // low-order 32-bits store an IPv4 address (bytes 13 to 16) (last 2 words)
        v4part = __inet_ntop4_raw(parts[6] | (parts[7] << 16));
        // IPv4-mapped IPv6 address if 16-bit value (bytes 11 and 12) == 0xFFFF (6th word)
        if (parts[5] === -1) {
          str = "::ffff:";
          str += v4part;
          return str;
        }
        // IPv4-compatible IPv6 address if 16-bit value (bytes 11 and 12) == 0x0000 (6th word)
        if (parts[5] === 0) {
          str = "::";
          //special case IPv6 addresses
          if(v4part === "0.0.0.0") v4part = ""; // any/unspecified address
          if(v4part === "0.0.0.1") v4part = "1";// loopback address
          str += v4part;
          return str;
        }
      }
  
      // Handle all other IPv6 addresses
  
      // first run to find the longest contiguous zero words
      for (word = 0; word < 8; word++) {
        if (parts[word] === 0) {
          if (word - lastzero > 1) {
            len = 0;
          }
          lastzero = word;
          len++;
        }
        if (len > longest) {
          longest = len;
          zstart = word - longest + 1;
        }
      }
  
      for (word = 0; word < 8; word++) {
        if (longest > 1) {
          // compress contiguous zeros - to produce "::"
          if (parts[word] === 0 && word >= zstart && word < (zstart + longest) ) {
            if (word === zstart) {
              str += ":";
              if (zstart === 0) str += ":"; //leading zeros case
            }
            continue;
          }
        }
        // converts 16-bit words from big-endian to little-endian before converting to hex string
        str += Number(_ntohs(parts[word] & 0xffff)).toString(16);
        str += word < 7 ? ":" : "";
      }
      return str;
    }function __read_sockaddr(sa, salen) {
      // family / port offsets are common to both sockaddr_in and sockaddr_in6
      var family = HEAP16[((sa)>>1)];
      var port = _ntohs(HEAP16[(((sa)+(2))>>1)]);
      var addr;
  
      switch (family) {
        case 2:
          if (salen !== 16) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = HEAP32[(((sa)+(4))>>2)];
          addr = __inet_ntop4_raw(addr);
          break;
        case 10:
          if (salen !== 28) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = [
            HEAP32[(((sa)+(8))>>2)],
            HEAP32[(((sa)+(12))>>2)],
            HEAP32[(((sa)+(16))>>2)],
            HEAP32[(((sa)+(20))>>2)]
          ];
          addr = __inet_ntop6_raw(addr);
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
  
      return { family: family, addr: addr, port: port };
    }function _connect(fd, addrp, addrlen) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
      var info = __read_sockaddr(addrp, addrlen);
      if (info.errno) {
        ___setErrNo(info.errno);
        return -1;
      }
      var port = info.port;
      var addr = DNS.lookup_addr(info.addr) || info.addr;
  
      try {
        sock.sock_ops.connect(sock, addr, port);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _shutdown(fd, how) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      _close(fd);
    }

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }



  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }


   
  Module["_strncpy"] = _strncpy;

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }


   
  Module["_i64Add"] = _i64Add;

  var _fabs=Math_abs;


  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  function _inet_addr(ptr) {
      var addr = __inet_pton4_raw(Pointer_stringify(ptr));
      if (addr === null) {
        return -1;
      }
      return addr;
    }

  var _sqrt=Math_sqrt;

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  
  var ___DEFAULT_POLLMASK=5;function _select(nfds, readfds, writefds, exceptfds, timeout) {
      // readfds are supported,
      // writefds checks socket open status
      // exceptfds not supported
      // timeout is always 0 - fully async
      assert(nfds <= 64, 'nfds must be less than or equal to 64');  // fd sets have 64 bits
      assert(!exceptfds, 'exceptfds not supported');
  
      var total = 0;
      
      var srcReadLow = (readfds ? HEAP32[((readfds)>>2)] : 0),
          srcReadHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0);
      var srcWriteLow = (writefds ? HEAP32[((writefds)>>2)] : 0),
          srcWriteHigh = (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0);
      var srcExceptLow = (exceptfds ? HEAP32[((exceptfds)>>2)] : 0),
          srcExceptHigh = (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      var dstReadLow = 0,
          dstReadHigh = 0;
      var dstWriteLow = 0,
          dstWriteHigh = 0;
      var dstExceptLow = 0,
          dstExceptHigh = 0;
  
      var allLow = (readfds ? HEAP32[((readfds)>>2)] : 0) |
                   (writefds ? HEAP32[((writefds)>>2)] : 0) |
                   (exceptfds ? HEAP32[((exceptfds)>>2)] : 0);
      var allHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0) |
                    (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0) |
                    (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      function get(fd, low, high, val) {
        return (fd < 32 ? (low & val) : (high & val));
      }
  
      for (var fd = 0; fd < nfds; fd++) {
        var mask = 1 << (fd % 32);
        if (!(get(fd, allLow, allHigh, mask))) {
          continue;  // index isn't in the set
        }
  
        var stream = FS.getStream(fd);
        if (!stream) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return -1;
        }
  
        var flags = ___DEFAULT_POLLMASK;
  
        if (stream.stream_ops.poll) {
          flags = stream.stream_ops.poll(stream);
        }
  
        if ((flags & 1) && get(fd, srcReadLow, srcReadHigh, mask)) {
          fd < 32 ? (dstReadLow = dstReadLow | mask) : (dstReadHigh = dstReadHigh | mask);
          total++;
        }
        if ((flags & 4) && get(fd, srcWriteLow, srcWriteHigh, mask)) {
          fd < 32 ? (dstWriteLow = dstWriteLow | mask) : (dstWriteHigh = dstWriteHigh | mask);
          total++;
        }
        if ((flags & 2) && get(fd, srcExceptLow, srcExceptHigh, mask)) {
          fd < 32 ? (dstExceptLow = dstExceptLow | mask) : (dstExceptHigh = dstExceptHigh | mask);
          total++;
        }
      }
  
      if (readfds) {
        HEAP32[((readfds)>>2)]=dstReadLow;
        HEAP32[(((readfds)+(4))>>2)]=dstReadHigh;
      }
      if (writefds) {
        HEAP32[((writefds)>>2)]=dstWriteLow;
        HEAP32[(((writefds)+(4))>>2)]=dstWriteHigh;
      }
      if (exceptfds) {
        HEAP32[((exceptfds)>>2)]=dstExceptLow;
        HEAP32[(((exceptfds)+(4))>>2)]=dstExceptHigh;
      }
      
      return total;
    }

  function _putc() {
  return _fputc.apply(null, arguments)
  }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  var _UItoD=true;

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;


  function _vprintf(format, va_arg) {
      return _printf(format, HEAP32[((va_arg)>>2)]);
    }


  var _BDtoILow=true;

  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.error);
    }

  var _BDtoIHigh=true;


  function _gethostbyname(name) {
      name = Pointer_stringify(name);
  
      // generate hostent
      var ret = _malloc(20); // XXX possibly leaked, as are others here
      var nameBuf = _malloc(name.length+1);
      writeStringToMemory(name, nameBuf);
      HEAP32[((ret)>>2)]=nameBuf;
      var aliasesBuf = _malloc(4);
      HEAP32[((aliasesBuf)>>2)]=0;
      HEAP32[(((ret)+(4))>>2)]=aliasesBuf;
      var afinet = 2;
      HEAP32[(((ret)+(8))>>2)]=afinet;
      HEAP32[(((ret)+(12))>>2)]=4;
      var addrListBuf = _malloc(12);
      HEAP32[((addrListBuf)>>2)]=addrListBuf+8;
      HEAP32[(((addrListBuf)+(4))>>2)]=0;
      HEAP32[(((addrListBuf)+(8))>>2)]=__inet_pton4_raw(DNS.lookup_name(name));
      HEAP32[(((ret)+(16))>>2)]=addrListBuf;
      return ret;
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }


  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    }

  function _socket(family, type, protocol) {
      var sock = SOCKFS.createSocket(family, type, protocol);
      assert(sock.stream.fd < 64); // select() assumes socket fd values are in 0..63
      return sock.stream.fd;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _rmdir(path) {
      // int rmdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
      path = Pointer_stringify(path);
      try {
        FS.rmdir(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _remove(path) {
      // int remove(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/remove.html
      var ret = _unlink(path);
      if (ret == -1) ret = _rmdir(path);
      return ret;
    }

  function _times(buffer) {
      // clock_t times(struct tms *buffer);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/times.html
      // NOTE: This is fake, since we can't calculate real CPU time usage in JS.
      if (buffer !== 0) {
        _memset(buffer, 0, 16);
      }
      return 0;
    }

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }function _copysignl() {
  return _copysign.apply(null, arguments)
  }

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }function _sleep(seconds) {
      // unsigned sleep(unsigned seconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/sleep.html
      return _usleep(seconds * 1e6);
    }

  
  function _fmod(x, y) {
      return x % y;
    }function _fmodl() {
  return _fmod.apply(null, arguments)
  }

  var _UItoF=true;


_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "byteLength": byteLength };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "min": Math_min, "nullFunc_iiii": nullFunc_iiii, "invoke_iiii": invoke_iiii, "_fabs": _fabs, "_putc": _putc, "__inet_pton4_raw": __inet_pton4_raw, "__inet_ntop6_raw": __inet_ntop6_raw, "_send": _send, "_fread": _fread, "__inet_ntop4_raw": __inet_ntop4_raw, "_fmod": _fmod, "_lseek": _lseek, "_open": _open, "_sleep": _sleep, "_vfprintf": _vfprintf, "__inet_pton6_raw": __inet_pton6_raw, "_rmdir": _rmdir, "_usleep": _usleep, "_remove": _remove, "__read_sockaddr": __read_sockaddr, "_fflush": _fflush, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_socket": _socket, "_localtime_r": _localtime_r, "_tzset": _tzset, "__reallyNegative": __reallyNegative, "_gethostbyname": _gethostbyname, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_unlink": _unlink, "_fprintf": _fprintf, "_sysconf": _sysconf, "___setErrNo": ___setErrNo, "_ferror": _ferror, "_vprintf": _vprintf, "_ntohs": _ntohs, "_putchar": _putchar, "_inet_addr": _inet_addr, "_fseek": _fseek, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_pread": _pread, "_printf": _printf, "_fclose": _fclose, "_fopen": _fopen, "_getc": _getc, "_write": _write, "_fsync": _fsync, "___errno_location": ___errno_location, "_select": _select, "_times": _times, "_recv": _recv, "_connect": _connect, "_fgetc": _fgetc, "_copysign": _copysign, "_mkport": _mkport, "_shutdown": _shutdown, "__exit": __exit, "_read": _read, "_copysignl": _copysignl, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_htons": _htons, "_strerror": _strerror, "_gettimeofday": _gettimeofday, "__formatString": __formatString, "_fputc": _fputc, "_sqrt": _sqrt, "_localtime": _localtime, "_exit": _exit, "_close": _close, "_fmodl": _fmodl, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_stderr": _stderr, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var Int8View = global.Int8Array;
  var Int16View = global.Int16Array;
  var Int32View = global.Int32Array;
  var Uint8View = global.Uint8Array;
  var Uint16View = global.Uint16Array;
  var Uint32View = global.Uint32Array;
  var Float32View = global.Float32Array;
  var Float64View = global.Float64Array;
  var HEAP8 = new Int8View(buffer);
  var HEAP16 = new Int16View(buffer);
  var HEAP32 = new Int32View(buffer);
  var HEAPU8 = new Uint8View(buffer);
  var HEAPU16 = new Uint16View(buffer);
  var HEAPU32 = new Uint32View(buffer);
  var HEAPF32 = new Float32View(buffer);
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stderr=env._stderr|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var nullFunc_iiii=env.nullFunc_iiii;
  var invoke_iiii=env.invoke_iiii;
  var _fabs=env._fabs;
  var _putc=env._putc;
  var __inet_pton4_raw=env.__inet_pton4_raw;
  var __inet_ntop6_raw=env.__inet_ntop6_raw;
  var _send=env._send;
  var _fread=env._fread;
  var __inet_ntop4_raw=env.__inet_ntop4_raw;
  var _fmod=env._fmod;
  var _lseek=env._lseek;
  var _open=env._open;
  var _sleep=env._sleep;
  var _vfprintf=env._vfprintf;
  var __inet_pton6_raw=env.__inet_pton6_raw;
  var _rmdir=env._rmdir;
  var _usleep=env._usleep;
  var _remove=env._remove;
  var __read_sockaddr=env.__read_sockaddr;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _socket=env._socket;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var __reallyNegative=env.__reallyNegative;
  var _gethostbyname=env._gethostbyname;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _unlink=env._unlink;
  var _fprintf=env._fprintf;
  var _sysconf=env._sysconf;
  var ___setErrNo=env.___setErrNo;
  var _ferror=env._ferror;
  var _vprintf=env._vprintf;
  var _ntohs=env._ntohs;
  var _putchar=env._putchar;
  var _inet_addr=env._inet_addr;
  var _fseek=env._fseek;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _pread=env._pread;
  var _printf=env._printf;
  var _fclose=env._fclose;
  var _fopen=env._fopen;
  var _getc=env._getc;
  var _write=env._write;
  var _fsync=env._fsync;
  var ___errno_location=env.___errno_location;
  var _select=env._select;
  var _times=env._times;
  var _recv=env._recv;
  var _connect=env._connect;
  var _fgetc=env._fgetc;
  var _copysign=env._copysign;
  var _mkport=env._mkport;
  var _shutdown=env._shutdown;
  var __exit=env.__exit;
  var _read=env._read;
  var _copysignl=env._copysignl;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _htons=env._htons;
  var _strerror=env._strerror;
  var _gettimeofday=env._gettimeofday;
  var __formatString=env.__formatString;
  var _fputc=env._fputc;
  var _sqrt=env._sqrt;
  var _localtime=env._localtime;
  var _exit=env._exit;
  var _close=env._close;
  var _fmodl=env._fmodl;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _main() {
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_ini(220526688)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $2 = HEAP32[220526664>>2]|0;
  HEAP32[$vararg_buffer>>2] = $2;
  _out_error(221111352,$vararg_buffer);
  STACKTOP = sp;return 0;
 }
 (function __main_loop() {
  HEAP32[34181088>>2] = 0;
  $3 = (_ponder(220526688)|0);
  $4 = ($3|0)<(0);
  if ($4) {
   $$0$i = $3;
  } else {
   $5 = HEAP32[34180920>>2]|0;
   $6 = $5 & 16;
   $7 = ($6|0)==(0);
   if (!($7)) {
    return;
    //break;
   }
   $8 = ($3|0)==(2);
   if ($8) {
    setTimeout(__main_loop,0);return;
    //continue;
   }
   $9 = HEAP32[34181088>>2]|0;
   $10 = ($9|0)==(-33554432);
   if (!($10)) {
    _show_prompt();
   }
   $11 = (_next_cmdline(1)|0);
   $12 = ($11|0)<(0);
   if ($12) {
    $$0$i = $11;
   } else {
    $13 = HEAP32[34180920>>2]|0;
    $14 = $13 & 16;
    $15 = ($14|0)==(0);
    if (!($15)) {
     return;
     //break;
    }
    $16 = (_procedure(220526688)|0);
    $17 = ($16|0)<(0);
    if ($17) {
     $$0$i = $16;
    } else {
     $18 = HEAP32[34180920>>2]|0;
     $19 = $18 >>> 2;
     $20 = $19 & 4;
     $21 = $20 ^ 4;
     $22 = (($21) + -3)|0;
     $$0$i = $22;
    }
   }
  }
  if ((($$0$i|0) == -1)) {
   label = 13;
   return;
   //break;
  } else if ((($$0$i|0) == -3)) {
   return;
   //break;
  } else if (!((($$0$i|0) == -2))) {
   setTimeout(__main_loop,0);return;
   //continue;
  }
  $24 = HEAP32[220526664>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $24;
  _out_warning(221111352,$vararg_buffer4);
  _shutdown_all();
  setTimeout(__main_loop,0);
 })();
  /*
 if ((label|0) == 13) {
  $23 = HEAP32[220526664>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $23;
  _out_error(221111352,$vararg_buffer1);
  _shutdown_all();
 }
 $25 = (_fin()|0);
 $26 = ($25|0)<(0);
 if (!($26)) {
  STACKTOP = sp;return 0;
 }
 $27 = HEAP32[220526664>>2]|0;
 HEAP32[$vararg_buffer7>>2] = $27;
 _out_error(221111352,$vararg_buffer7);
 STACKTOP = sp;return 0;
 */
}
function _out($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $arg = sp;
 $0 = HEAP32[34180920>>2]|0;
 $1 = $0 & 2048;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 HEAP32[$arg>>2] = $varargs;
 (_vprintf(($format|0),($arg|0))|0);
 $3 = HEAP32[_stdout>>2]|0;
 (_fflush(($3|0))|0);
 STACKTOP = sp;return;
}
function _out_warning($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $arg = sp + 8|0;
 $0 = HEAP32[34180920>>2]|0;
 $1 = $0 & 2048;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[_stderr>>2]|0;
 $4 = HEAP32[728>>2]|0;
 HEAP32[$vararg_buffer>>2] = $4;
 (_fprintf(($3|0),(221111360|0),($vararg_buffer|0))|0);
 HEAP32[$arg>>2] = $varargs;
 (_vfprintf(($3|0),($format|0),($arg|0))|0);
 (_fwrite((221111368|0),2,1,($3|0))|0);
 (_fflush(($3|0))|0);
 STACKTOP = sp;return;
}
function _out_error($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $arg = sp;
 $0 = HEAP32[34180920>>2]|0;
 $1 = $0 & 2048;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[_stderr>>2]|0;
 (_fwrite((221111376|0),8,1,($3|0))|0);
 HEAP32[$arg>>2] = $varargs;
 (_vfprintf(($3|0),($format|0),($arg|0))|0);
 (_fwrite((221111368|0),2,1,($3|0))|0);
 (_fflush(($3|0))|0);
 STACKTOP = sp;return;
}
function _file_open($str_file,$str_mode) {
 $str_file = $str_file|0;
 $str_mode = $str_mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_fopen(($str_file|0),($str_mode|0))|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[624>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $str_file;
 (_snprintf(220525640,512,221111392,$vararg_buffer)|0);
 HEAP32[220526664>>2] = 220525640;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _file_close($pf) {
 $pf = $pf|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pf|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = (_ferror(($pf|0))|0);
   $2 = ($1|0)==(0);
   $3 = (_fclose(($pf|0))|0);
   if (!($2)) {
    $4 = HEAP32[240>>2]|0;
    HEAP32[220526664>>2] = $4;
    $$0 = -2;
    break;
   }
   $5 = ($3|0)==(0);
   if ($5) {
    $$0 = 1;
   } else {
    $6 = HEAP32[240>>2]|0;
    HEAP32[220526664>>2] = $6;
    $$0 = -2;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _show_prompt() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer11 = sp + 8|0;
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer7 = sp + 64|0;
 $vararg_buffer5 = sp;
 $vararg_buffer3 = sp + 24|0;
 $vararg_buffer1 = sp + 48|0;
 $vararg_buffer = sp + 40|0;
 $0 = HEAP32[34180920>>2]|0;
 $1 = $0 & 4194304;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0 & 4;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _out(221111400,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $5 = $0 & 1;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = HEAP32[34184024>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   _out(221111424,$vararg_buffer3);
   STACKTOP = sp;return;
  } else {
   _out(221111408,$vararg_buffer1);
   STACKTOP = sp;return;
  }
 }
 $9 = $0 & 2;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $11 = HEAP32[34184024>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   _out(221111464,$vararg_buffer7);
   STACKTOP = sp;return;
  } else {
   _out(221111440,$vararg_buffer5);
   STACKTOP = sp;return;
  }
 }
 $13 = $0 & 8;
 $14 = ($13|0)==(0);
 $15 = HEAP32[34184024>>2]|0;
 $16 = ($15|0)!=(0);
 if ($14) {
  $17 = HEAP32[((33556568 + 584|0))>>2]|0;
  $18 = (($17) + 1)|0;
  if ($16) {
   HEAP32[$vararg_buffer13>>2] = $18;
   _out(221111520,$vararg_buffer13);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer15>>2] = $18;
   _out(221111536,$vararg_buffer15);
   STACKTOP = sp;return;
  }
 } else {
  if ($16) {
   _out(221111488,$vararg_buffer9);
   STACKTOP = sp;return;
  } else {
   _out(221111504,$vararg_buffer11);
   STACKTOP = sp;return;
  }
 }
}
function _open_history($str_name1,$str_name2) {
 $str_name1 = $str_name1|0;
 $str_name2 = $str_name2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_record_close(33556568)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_record_open(33556568,221111552,1,$str_name1,$str_name2)|0);
 $3 = $2 >> 31;
 $4 = $3 | 1;
 $$0 = $4;
 STACKTOP = sp;return ($$0|0);
}
function _out_board($ptree,$pf,$move,$is_strict) {
 $ptree = $ptree|0;
 $pf = $pf|0;
 $move = $move|0;
 $is_strict = $is_strict|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i12 = 0, $exitcond$i18 = 0, $exitcond$i24 = 0, $exitcond$i30 = 0, $exitcond$i36 = 0, $exitcond$i42 = 0, $exitcond$i48 = 0, $exitcond$i54 = 0, $exitcond$i6 = 0, $exitcond$i60 = 0, $exitcond$i66 = 0, $exitcond$i72 = 0, $exitcond$i78 = 0, $i$01$i = 0;
 var $i$01$i11 = 0, $i$01$i17 = 0, $i$01$i23 = 0, $i$01$i29 = 0, $i$01$i35 = 0, $i$01$i41 = 0, $i$01$i47 = 0, $i$01$i5 = 0, $i$01$i53 = 0, $i$01$i59 = 0, $i$01$i65 = 0, $i$01$i71 = 0, $i$01$i77 = 0, $ifrom$0 = 0, $irank$086 = 0, $irank$183 = 0, $is_promote$0 = 0, $ito$0 = 0, $or$cond = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[34180920>>2]|0;
 $1 = $0 & 2048;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return 1;
 }
 $3 = ($is_strict|0)!=(0);
 $4 = ($move|0)==(0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  $ifrom$0 = 81;$is_promote$0 = 0;$ito$0 = 81;
 } else {
  $5 = $move & 127;
  $6 = $move >>> 7;
  $7 = $6 & 127;
  $8 = $move & 16384;
  $ifrom$0 = $7;$is_promote$0 = $8;$ito$0 = $5;
 }
 $9 = $0 & 16384;
 $10 = ($9|0)==(0);
 $brmerge = $10 | $3;
 if ($brmerge) {
  (_fwrite((221111640|0),29,1,($pf|0))|0);
  $irank$183 = 0;
  while(1) {
   $50 = (($irank$183) + 1)|0;
   HEAP32[$vararg_buffer1>>2] = $50;
   (_fprintf(($pf|0),(221111632|0),($vararg_buffer1|0))|0);
   $51 = ($irank$183*9)|0;
   $52 = ((($ptree) + ($51)|0) + 512|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53 << 24 >> 24;
   _out_board0($pf,$54,$51,$ito$0,$ifrom$0,$is_promote$0);
   $55 = (($51) + 1)|0;
   $56 = ((($ptree) + ($55)|0) + 512|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57 << 24 >> 24;
   _out_board0($pf,$58,$55,$ito$0,$ifrom$0,$is_promote$0);
   $59 = (($51) + 2)|0;
   $60 = ((($ptree) + ($59)|0) + 512|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61 << 24 >> 24;
   _out_board0($pf,$62,$59,$ito$0,$ifrom$0,$is_promote$0);
   $63 = (($51) + 3)|0;
   $64 = ((($ptree) + ($63)|0) + 512|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65 << 24 >> 24;
   _out_board0($pf,$66,$63,$ito$0,$ifrom$0,$is_promote$0);
   $67 = (($51) + 4)|0;
   $68 = ((($ptree) + ($67)|0) + 512|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = $69 << 24 >> 24;
   _out_board0($pf,$70,$67,$ito$0,$ifrom$0,$is_promote$0);
   $71 = (($51) + 5)|0;
   $72 = ((($ptree) + ($71)|0) + 512|0);
   $73 = HEAP8[$72>>0]|0;
   $74 = $73 << 24 >> 24;
   _out_board0($pf,$74,$71,$ito$0,$ifrom$0,$is_promote$0);
   $75 = (($51) + 6)|0;
   $76 = ((($ptree) + ($75)|0) + 512|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77 << 24 >> 24;
   _out_board0($pf,$78,$75,$ito$0,$ifrom$0,$is_promote$0);
   $79 = (($51) + 7)|0;
   $80 = ((($ptree) + ($79)|0) + 512|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $81 << 24 >> 24;
   _out_board0($pf,$82,$79,$ito$0,$ifrom$0,$is_promote$0);
   $83 = (($51) + 8)|0;
   $84 = ((($ptree) + ($83)|0) + 512|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = $85 << 24 >> 24;
   _out_board0($pf,$86,$83,$ito$0,$ifrom$0,$is_promote$0);
   (_fputc(10,($pf|0))|0);
   $exitcond = ($50|0)==(9);
   if ($exitcond) {
    break;
   } else {
    $irank$183 = $50;
   }
  }
 } else {
  (_fwrite((221111568|0),29,1,($pf|0))|0);
  (_fwrite((221111600|0),29,1,($pf|0))|0);
  $irank$086 = 8;
  while(1) {
   $11 = (($irank$086) + 1)|0;
   HEAP32[$vararg_buffer>>2] = $11;
   (_fprintf(($pf|0),(221111632|0),($vararg_buffer|0))|0);
   $12 = ($irank$086*9)|0;
   $13 = (($12) + 8)|0;
   $14 = ((($ptree) + ($13)|0) + 512|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 << 24 >> 24;
   _out_board0($pf,$16,$13,$ito$0,$ifrom$0,$is_promote$0);
   $17 = (($12) + 7)|0;
   $18 = ((($ptree) + ($17)|0) + 512|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   _out_board0($pf,$20,$17,$ito$0,$ifrom$0,$is_promote$0);
   $21 = (($12) + 6)|0;
   $22 = ((($ptree) + ($21)|0) + 512|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   _out_board0($pf,$24,$21,$ito$0,$ifrom$0,$is_promote$0);
   $25 = (($12) + 5)|0;
   $26 = ((($ptree) + ($25)|0) + 512|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 << 24 >> 24;
   _out_board0($pf,$28,$25,$ito$0,$ifrom$0,$is_promote$0);
   $29 = (($12) + 4)|0;
   $30 = ((($ptree) + ($29)|0) + 512|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31 << 24 >> 24;
   _out_board0($pf,$32,$29,$ito$0,$ifrom$0,$is_promote$0);
   $33 = (($12) + 3)|0;
   $34 = ((($ptree) + ($33)|0) + 512|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35 << 24 >> 24;
   _out_board0($pf,$36,$33,$ito$0,$ifrom$0,$is_promote$0);
   $37 = (($12) + 2)|0;
   $38 = ((($ptree) + ($37)|0) + 512|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39 << 24 >> 24;
   _out_board0($pf,$40,$37,$ito$0,$ifrom$0,$is_promote$0);
   $41 = (($12) + 1)|0;
   $42 = ((($ptree) + ($41)|0) + 512|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $43 << 24 >> 24;
   _out_board0($pf,$44,$41,$ito$0,$ifrom$0,$is_promote$0);
   $45 = ((($ptree) + ($12)|0) + 512|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46 << 24 >> 24;
   _out_board0($pf,$47,$12,$ito$0,$ifrom$0,$is_promote$0);
   (_fputc(10,($pf|0))|0);
   $48 = (($irank$086) + -1)|0;
   $49 = ($irank$086|0)>(0);
   if ($49) {
    $irank$086 = $48;
   } else {
    break;
   }
  }
 }
 $87 = (($ptree) + 500|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $88 & 31;
 $90 = ($89|0)==(0);
 if (!($90)) {
  (_fwrite((221111672|0),2,1,($pf|0))|0);
  $i$01$i11 = 0;
  while(1) {
   (_fwrite((221111752|0),4,1,($pf|0))|0);
   $91 = (($i$01$i11) + 1)|0;
   $exitcond$i12 = ($91|0)==($89|0);
   if ($exitcond$i12) {
    break;
   } else {
    $i$01$i11 = $91;
   }
  }
  (_fputc(10,($pf|0))|0);
 }
 $92 = $88 >>> 5;
 $93 = $92 & 7;
 $94 = ($93|0)==(0);
 if (!($94)) {
  (_fwrite((221111672|0),2,1,($pf|0))|0);
  $i$01$i17 = 0;
  while(1) {
   (_fwrite((221111760|0),4,1,($pf|0))|0);
   $95 = (($i$01$i17) + 1)|0;
   $exitcond$i18 = ($95|0)==($93|0);
   if ($exitcond$i18) {
    break;
   } else {
    $i$01$i17 = $95;
   }
  }
  (_fputc(10,($pf|0))|0);
 }
 $96 = $88 >>> 8;
 $97 = $96 & 7;
 $98 = ($97|0)==(0);
 if (!($98)) {
  (_fwrite((221111672|0),2,1,($pf|0))|0);
  $i$01$i23 = 0;
  while(1) {
   (_fwrite((221111768|0),4,1,($pf|0))|0);
   $99 = (($i$01$i23) + 1)|0;
   $exitcond$i24 = ($99|0)==($97|0);
   if ($exitcond$i24) {
    break;
   } else {
    $i$01$i23 = $99;
   }
  }
  (_fputc(10,($pf|0))|0);
 }
 $100 = $88 >>> 11;
 $101 = $100 & 7;
 $102 = ($101|0)==(0);
 if (!($102)) {
  (_fwrite((221111672|0),2,1,($pf|0))|0);
  $i$01$i29 = 0;
  while(1) {
   (_fwrite((221111776|0),4,1,($pf|0))|0);
   $103 = (($i$01$i29) + 1)|0;
   $exitcond$i30 = ($103|0)==($101|0);
   if ($exitcond$i30) {
    break;
   } else {
    $i$01$i29 = $103;
   }
  }
  (_fputc(10,($pf|0))|0);
 }
 $104 = $88 >>> 14;
 $105 = $104 & 7;
 $106 = ($105|0)==(0);
 if (!($106)) {
  (_fwrite((221111672|0),2,1,($pf|0))|0);
  $i$01$i35 = 0;
  while(1) {
   (_fwrite((221111784|0),4,1,($pf|0))|0);
   $107 = (($i$01$i35) + 1)|0;
   $exitcond$i36 = ($107|0)==($105|0);
   if ($exitcond$i36) {
    break;
   } else {
    $i$01$i35 = $107;
   }
  }
  (_fputc(10,($pf|0))|0);
 }
 $108 = $88 >>> 17;
 $109 = $108 & 3;
 $110 = ($109|0)==(0);
 if (!($110)) {
  (_fwrite((221111672|0),2,1,($pf|0))|0);
  $i$01$i41 = 0;
  while(1) {
   (_fwrite((221111792|0),4,1,($pf|0))|0);
   $111 = (($i$01$i41) + 1)|0;
   $exitcond$i42 = ($111|0)==($109|0);
   if ($exitcond$i42) {
    break;
   } else {
    $i$01$i41 = $111;
   }
  }
  (_fputc(10,($pf|0))|0);
 }
 $112 = $88 >>> 19;
 $113 = ($112|0)==(0);
 if (!($113)) {
  (_fwrite((221111672|0),2,1,($pf|0))|0);
  $i$01$i = 0;
  while(1) {
   (_fwrite((221111800|0),4,1,($pf|0))|0);
   $114 = (($i$01$i) + 1)|0;
   $exitcond$i = ($114|0)==($112|0);
   if ($exitcond$i) {
    break;
   } else {
    $i$01$i = $114;
   }
  }
  (_fputc(10,($pf|0))|0);
 }
 $115 = (($ptree) + 504|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $116 & 31;
 $118 = ($117|0)==(0);
 if (!($118)) {
  (_fwrite((221111680|0),2,1,($pf|0))|0);
  $i$01$i47 = 0;
  while(1) {
   (_fwrite((221111752|0),4,1,($pf|0))|0);
   $119 = (($i$01$i47) + 1)|0;
   $exitcond$i48 = ($119|0)==($117|0);
   if ($exitcond$i48) {
    break;
   } else {
    $i$01$i47 = $119;
   }
  }
  (_fputc(10,($pf|0))|0);
 }
 $120 = $116 >>> 5;
 $121 = $120 & 7;
 $122 = ($121|0)==(0);
 if (!($122)) {
  (_fwrite((221111680|0),2,1,($pf|0))|0);
  $i$01$i53 = 0;
  while(1) {
   (_fwrite((221111760|0),4,1,($pf|0))|0);
   $123 = (($i$01$i53) + 1)|0;
   $exitcond$i54 = ($123|0)==($121|0);
   if ($exitcond$i54) {
    break;
   } else {
    $i$01$i53 = $123;
   }
  }
  (_fputc(10,($pf|0))|0);
 }
 $124 = $116 >>> 8;
 $125 = $124 & 7;
 $126 = ($125|0)==(0);
 if (!($126)) {
  (_fwrite((221111680|0),2,1,($pf|0))|0);
  $i$01$i59 = 0;
  while(1) {
   (_fwrite((221111768|0),4,1,($pf|0))|0);
   $127 = (($i$01$i59) + 1)|0;
   $exitcond$i60 = ($127|0)==($125|0);
   if ($exitcond$i60) {
    break;
   } else {
    $i$01$i59 = $127;
   }
  }
  (_fputc(10,($pf|0))|0);
 }
 $128 = $116 >>> 11;
 $129 = $128 & 7;
 $130 = ($129|0)==(0);
 if (!($130)) {
  (_fwrite((221111680|0),2,1,($pf|0))|0);
  $i$01$i65 = 0;
  while(1) {
   (_fwrite((221111776|0),4,1,($pf|0))|0);
   $131 = (($i$01$i65) + 1)|0;
   $exitcond$i66 = ($131|0)==($129|0);
   if ($exitcond$i66) {
    break;
   } else {
    $i$01$i65 = $131;
   }
  }
  (_fputc(10,($pf|0))|0);
 }
 $132 = $116 >>> 14;
 $133 = $132 & 7;
 $134 = ($133|0)==(0);
 if (!($134)) {
  (_fwrite((221111680|0),2,1,($pf|0))|0);
  $i$01$i71 = 0;
  while(1) {
   (_fwrite((221111784|0),4,1,($pf|0))|0);
   $135 = (($i$01$i71) + 1)|0;
   $exitcond$i72 = ($135|0)==($133|0);
   if ($exitcond$i72) {
    break;
   } else {
    $i$01$i71 = $135;
   }
  }
  (_fputc(10,($pf|0))|0);
 }
 $136 = $116 >>> 17;
 $137 = $136 & 3;
 $138 = ($137|0)==(0);
 if (!($138)) {
  (_fwrite((221111680|0),2,1,($pf|0))|0);
  $i$01$i77 = 0;
  while(1) {
   (_fwrite((221111792|0),4,1,($pf|0))|0);
   $139 = (($i$01$i77) + 1)|0;
   $exitcond$i78 = ($139|0)==($137|0);
   if ($exitcond$i78) {
    break;
   } else {
    $i$01$i77 = $139;
   }
  }
  (_fputc(10,($pf|0))|0);
 }
 $140 = $116 >>> 19;
 $141 = ($140|0)==(0);
 if (!($141)) {
  (_fwrite((221111680|0),2,1,($pf|0))|0);
  $i$01$i5 = 0;
  while(1) {
   (_fwrite((221111800|0),4,1,($pf|0))|0);
   $142 = (($i$01$i5) + 1)|0;
   $exitcond$i6 = ($142|0)==($140|0);
   if ($exitcond$i6) {
    break;
   } else {
    $i$01$i5 = $142;
   }
  }
  (_fputc(10,($pf|0))|0);
 }
 (_fflush(($pf|0))|0);
 STACKTOP = sp;return 1;
}
function _out_board0($pf,$piece,$i,$ito,$ifrom,$is_promote) {
 $pf = $pf|0;
 $piece = $piece|0;
 $i = $i|0;
 $ito = $ito|0;
 $ifrom = $ifrom|0;
 $is_promote = $is_promote|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0, $ispos$c = 0, $neg = 0, $neg$c = 0, $or$cond = 0, $or$cond4 = 0, $or$cond5 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr13 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($piece|0)==(0);
 if ($0) {
  $18 = ($ifrom|0)<(81);
  do {
   if ($18) {
    $19 = ($ifrom|0)==($i|0);
    if (!($19)) {
     $20 = ((220518304 + (($ito*81)|0)|0) + ($ifrom)|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      break;
     }
     $23 = ((220518304 + (($ito*81)|0)|0) + ($i)|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = ($21<<24>>24)==($24<<24>>24);
     if (!($25)) {
      break;
     }
     $26 = ($ito|0)>=($i|0);
     $27 = ($i|0)>($ifrom|0);
     $or$cond4 = $26 | $27;
     if ($or$cond4) {
      $28 = ($ito|0)<=($i|0);
      $29 = ($i|0)<($ifrom|0);
      $or$cond5 = $28 | $29;
      if ($or$cond5) {
       break;
      }
     }
    }
    (_fwrite((221111816|0),3,1,($pf|0))|0);
    STACKTOP = sp;return;
   }
  } while(0);
  (_fwrite((221111824|0),3,1,($pf|0))|0);
  STACKTOP = sp;return;
 }
 $1 = $piece >> 31;
 $2 = $1 & 2;
 $3 = (($2) + 43)|0;
 $4 = ($i|0)==($ito|0);
 $5 = HEAP32[_stdout>>2]|0;
 $6 = ($5|0)==($pf|0);
 $or$cond = $4 & $6;
 if (!($or$cond)) {
  $ispos$c = ($piece|0)>(-1);
  $neg$c = (0 - ($piece))|0;
  $30 = $ispos$c ? $piece : $neg$c;
  $31 = (920 + ($30<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $3;
  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $32;
  (_fprintf(($pf|0),(221111808|0),($vararg_buffer10|0))|0);
  STACKTOP = sp;return;
 }
 $7 = HEAP32[34180920>>2]|0;
 $8 = $7 & 524288;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = ($is_promote|0)==(0);
   if (!($10)) {
    (_printf((221111696|0),($vararg_buffer|0))|0);
    break;
   }
   $11 = ($ifrom|0)>(80);
   if ($11) {
    (_printf((221111704|0),($vararg_buffer1|0))|0);
    break;
   } else {
    (_printf((221111712|0),($vararg_buffer3|0))|0);
    break;
   }
  }
 } while(0);
 $ispos = ($piece|0)>(-1);
 $neg = (0 - ($piece))|0;
 $12 = $ispos ? $piece : $neg;
 $13 = (920 + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$vararg_buffer5>>2] = $3;
 $vararg_ptr7 = (($vararg_buffer5) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $14;
 (_fprintf(($pf|0),(221111808|0),($vararg_buffer5|0))|0);
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[34180920>>2]|0;
 $16 = $15 & 524288;
 $17 = ($16|0)==(0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 (_printf((221111688|0),($vararg_buffer8|0))|0);
 STACKTOP = sp;return;
}
function _next_cmdline($is_wait) {
 $is_wait = $is_wait|0;
 var $$0 = 0, $$1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $readfds$i = 0, $str_line_end = 0, $tv$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $readfds$i = sp + 16|0;
 $tv$i = sp + 8|0;
 $str_line_end = sp;
 $0 = (_strchr(220526152,10)|0);
 HEAP32[$str_line_end>>2] = $0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $2 = ($is_wait|0)==(0);
   if (!($2)) {
    while(1) {
     $3 = (_read_command($str_line_end)|0);
     $4 = ($3|0)<(0);
     if ($4) {
      $$0 = $3;
      label = 24;
      break;
     }
     $5 = HEAP32[$str_line_end>>2]|0;
     $6 = ($5|0)!=(0|0);
     $7 = ($3|0)==(0);
     $or$cond = $6 | $7;
     if ($or$cond) {
      break;
     }
    }
    if ((label|0) == 24) {
     STACKTOP = sp;return ($$0|0);
    }
    if (!($7)) {
     $31 = $5;
     break;
    }
    $8 = HEAP32[34180920>>2]|0;
    $9 = $8 | 16;
    HEAP32[34180920>>2] = $9;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $10 = HEAP32[221099712>>2]|0;
   $11 = ($10|0)==(-1);
   do {
    if ($11) {
     $13 = HEAP32[221102520>>2]|0;
     $14 = ($13|0)==(-1);
     if (!($14)) {
      $15 = (_sckt_check($13)|0);
      $$1$i = $15;
      break;
     }
     $16 = HEAP32[220526680>>2]|0;
     $17 = ($16|0)==(-1);
     if (!($17)) {
      $18 = (_sckt_check($16)|0);
      $$1$i = $18;
      break;
     }
     dest=$readfds$i+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     HEAP32[$readfds$i>>2] = 1;
     HEAP32[$tv$i>>2] = 0;
     $19 = (($tv$i) + 4|0);
     HEAP32[$19>>2] = 0;
     $20 = (_select(1,($readfds$i|0),(0|0),(0|0),($tv$i|0))|0);
     $21 = ($20|0)==(-1);
     if ($21) {
      HEAP32[220526664>>2] = 221111720;
      $$0 = -1;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$1$i = $20;
     }
    } else {
     $12 = (_sckt_check($10)|0);
     $$1$i = $12;
    }
   } while(0);
   $22 = ($$1$i|0)<(1);
   if ($22) {
    $$0 = $$1$i;
    STACKTOP = sp;return ($$0|0);
   }
   $23 = (_read_command($str_line_end)|0);
   $24 = ($23|0)<(0);
   if ($24) {
    $$0 = $23;
    STACKTOP = sp;return ($$0|0);
   }
   $25 = ($23|0)==(0);
   if ($25) {
    $26 = HEAP32[34180920>>2]|0;
    $27 = $26 | 16;
    HEAP32[34180920>>2] = $27;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $28 = HEAP32[$str_line_end>>2]|0;
    $29 = ($28|0)==(0|0);
    if ($29) {
     $$0 = 0;
    } else {
     $31 = $28;
     break;
    }
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $31 = $0;
  }
 } while(0);
 $30 = $31;
 $32 = (($30) - (220526152))|0;
 $33 = ($32|0)>(510);
 if ($33) {
  $34 = HEAP32[664>>2]|0;
  HEAP32[220526664>>2] = $34;
  $35 = (($31) + 1|0);
  $36 = (_strlen(($35|0))|0);
  $37 = (($36) + 1)|0;
  _memmove((220526152|0),($35|0),($37|0))|0;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 _memcpy((220525128|0),(220526152|0),($32|0))|0;
 $38 = (220525128 + ($32)|0);
 HEAP8[$38>>0] = 0;
 $39 = ($is_wait|0)==(0);
 if ($39) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $40 = (($31) + 1|0);
 $41 = (_strlen(($40|0))|0);
 $42 = (($41) + 1)|0;
 _memmove((220526152|0),($40|0),($42|0))|0;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _read_command($pstr_line_end) {
 $pstr_line_end = $pstr_line_end|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count_byte$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen((220526152|0))|0);
 $1 = (220526152 + ($0)|0);
 $2 = HEAP32[221099712>>2]|0;
 $3 = ($2|0)==(-1);
 do {
  if ($3) {
   $7 = HEAP32[221102520>>2]|0;
   $8 = ($7|0)==(-1);
   if (!($8)) {
    $9 = (511 - ($0))|0;
    $10 = (_sckt_in($7,$1,$9)|0);
    $11 = ($10|0)<(0);
    if ($11) {
     $$0 = $10;
    } else {
     $count_byte$0 = $10;
     break;
    }
    STACKTOP = sp;return ($$0|0);
   }
   $12 = HEAP32[220526680>>2]|0;
   $13 = ($12|0)==(-1);
   $14 = (511 - ($0))|0;
   if (!($13)) {
    $15 = (_sckt_in($12,$1,$14)|0);
    $16 = ($15|0)<(0);
    if ($16) {
     $$0 = $15;
    } else {
     $count_byte$0 = $15;
     break;
    }
    STACKTOP = sp;return ($$0|0);
   }
   while(1) {
    $17 = (_read(0,($1|0),($14|0))|0);
    $18 = ($17|0)<(0);
    if (!($18)) {
     label = 10;
     break;
    }
    $19 = (___errno_location()|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(4);
    if (!($21)) {
     break;
    }
   }
   if ((label|0) == 10) {
    $$sum = (($17) + ($0))|0;
    $22 = (220526152 + ($$sum)|0);
    HEAP8[$22>>0] = 0;
    $count_byte$0 = $17;
    break;
   }
   HEAP32[220526664>>2] = 221111736;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $4 = (511 - ($0))|0;
   $5 = (_sckt_in($2,$1,$4)|0);
   $6 = ($5|0)<(0);
   if ($6) {
    $$0 = $5;
    STACKTOP = sp;return ($$0|0);
   } else {
    $count_byte$0 = $5;
   }
  }
 } while(0);
 $23 = (_strchr(220526152,10)|0);
 HEAP32[$pstr_line_end>>2] = $23;
 $24 = ($23|0)==(0|0);
 if (!($24)) {
  $$0 = $count_byte$0;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = (($count_byte$0) + ($0))|0;
 $26 = ($25|0)>(510);
 if (!($26)) {
  $$0 = $count_byte$0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP8[220526152>>0] = 0;
 $27 = HEAP32[664>>2]|0;
 HEAP32[220526664>>2] = $27;
 $$0 = -2;
 STACKTOP = sp;return ($$0|0);
}
function _out_beep() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[34180920>>2]|0;
 $1 = $0 & 262144;
 $2 = ($1|0)==(0);
 if ($2) {
  (_putchar(7)|0);
 }
 STACKTOP = sp;return;
}
function _procedure($ptree) {
 $ptree = $ptree|0;
 var $$$i$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i32$i = 0, $$0$i4$i = 0, $$l$0$i$i = 0, $$off$i$i = 0, $$sum$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0.0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $buffer$i$i = 0, $c$03$i$i = 0, $c$1$i$i = 0, $client_str_id$i$i = 0, $exitcond$i$i = 0, $flag$0$i$i = 0, $flag$1$i$i = 0, $i$02$i$i = 0, $i$03$i$i = 0, $i$05$i$i = 0, $is_mate$02$i$i = 0, $is_mate$05$i$i = 0, $isdigit$i$i = 0, $isdigit$i$i9 = 0, $isdigit$i3$i = 0, $isdigit2$i$i = 0, $isdigit2$i$i11 = 0, $isdigit2$i5$i = 0, $isdigit4$i$i = 0, $isdigit4$i$i13 = 0;
 var $isdigit4$i7$i = 0, $isdigit6$i$i = 0, $isdigit6$i$i15 = 0, $isdigit6$i9$i = 0, $isdigittmp$i$i = 0, $isdigittmp$i$i8 = 0, $isdigittmp$i2$i = 0, $isdigittmp1$i$i = 0, $isdigittmp1$i$i10 = 0, $isdigittmp1$i4$i = 0, $isdigittmp3$i$i = 0, $isdigittmp3$i$i12 = 0, $isdigittmp3$i6$i = 0, $isdigittmp5$i$i = 0, $isdigittmp5$i$i14 = 0, $isdigittmp5$i8$i = 0, $l$0$i$i = 0, $l3$0$i$i = 0, $last$i = 0, $last$i1 = 0;
 var $last$i7 = 0, $move$i$i = 0, $move$i$i5 = 0, $move_list$i$i = 0, $moves$0$i$i = 0, $nposition$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i$i17 = 0, $or$cond$i11$i = 0, $or$cond$i13$i = 0, $or$cond$i23$i = 0, $or$cond$i26$i = 0, $or$cond$i3 = 0, $or$cond$i34$i = 0, $or$cond$i43$i = 0, $or$cond$i52$i = 0, $or$cond$i62$i = 0, $or$cond$i7$i = 0, $or$cond3$i$i = 0;
 var $or$cond3$i35$i = 0, $or$cond3$i44$i = 0, $or$cond3$i53$i = 0, $or$cond3$i65$i = 0, $or$cond3$i8$i = 0, $or$cond5$i$i = 0, $or$cond5$i36$i = 0, $or$cond5$i45$i = 0, $or$cond5$i56$i = 0, $or$cond5$i66$i = 0, $or$cond7$i$i = 0, $or$cond7$i37$i = 0, $or$cond7$i46$i = 0, $or$cond7$i57$i = 0, $or$cond8$i$i = 0, $or$cond9$i$i = 0, $ptr$i = 0, $ptr$i$i = 0, $ptr$i$i6 = 0, $ptr$i10$i = 0;
 var $ptr$i2 = 0, $ptr$i22$i = 0, $ptr$i25$i = 0, $ptr$i33$i = 0, $ptr$i4$i = 0, $ptr$i41$i = 0, $ptr$i51$i = 0, $ptr$i6$i = 0, $ptr$i61$i = 0, $ptr1$i$i = 0, $storemerge$i$i = 0, $storemerge$i$i$i = 0, $storemerge$i$i16 = 0, $storemerge$i16$i = 0, $storemerge$i18$i = 0, $storemerge$i20$i = 0, $storemerge$i3$i = 0, $storemerge$i31$i = 0, $storemerge$i39$i = 0, $storemerge$i47$i = 0;
 var $storemerge$i49$i = 0, $storemerge$i68$i = 0, $storemerge$v$i$i = 0, $storemerge$v$i$i$i = 0, $storemerge$v$i$i21 = 0, $storemerge$v$i2$i = 0, $str$0$i$i = 0, $str$0$i42$i = 0, $str$0$i54$i = 0, $str$0$i63$i = 0, $str$04$i$i = 0, $str$1$i$i = 0, $str$1$i55$i = 0, $str$1$i64$i = 0, $str$2$i$i = 0, $str$2$i58$i = 0, $str$2$i67$i = 0, $str$3$i$i = 0, $str$3$i59$i = 0, $str1$0$i$i = 0;
 var $str_tmp$0$i$i = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer36 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3520|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer36 = sp + 16|0;
 $vararg_buffer31 = sp + 80|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer26 = sp + 120|0;
 $vararg_buffer24 = sp + 24|0;
 $vararg_buffer21 = sp + 8|0;
 $vararg_buffer18 = sp + 104|0;
 $vararg_buffer15 = sp + 112|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 48|0;
 $vararg_buffer6 = sp + 64|0;
 $vararg_buffer4 = sp + 72|0;
 $vararg_buffer2 = sp;
 $vararg_buffer = sp + 56|0;
 $ptr$i61$i = sp + 2948|0;
 $ptr1$i$i = sp + 136|0;
 $client_str_id$i$i = sp + 3000|0;
 $ptr$i51$i = sp + 2960|0;
 $ptr$i41$i = sp + 128|0;
 $ptr$i33$i = sp + 132|0;
 $ptr$i25$i = sp + 2968|0;
 $ptr$i22$i = sp + 2972|0;
 $buffer$i$i = sp + 3256|0;
 $move_list$i$i = sp + 144|0;
 $ptr$i10$i = sp + 2944|0;
 $move$i$i5 = sp + 2952|0;
 $ptr$i6$i = sp + 2956|0;
 $ptr$i4$i = sp + 124|0;
 $ptr$i$i6 = sp + 2976|0;
 $last$i7 = sp + 2980|0;
 $ptr$i$i = sp + 2984|0;
 $move$i$i = sp + 2988|0;
 $last$i1 = sp + 2992|0;
 $ptr$i2 = sp + 2964|0;
 $last$i = sp + 140|0;
 $ptr$i = sp + 2996|0;
 $0 = HEAP32[221099712>>2]|0;
 $1 = ($0|0)==(-1);
 if (!($1)) {
  $2 = HEAP32[120>>2]|0;
  $3 = (_strtok_r(220525128,$2,$last$i)|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $5 = HEAP8[$3>>0]|0;
  $6 = HEAP32[221098912>>2]|0;
  $7 = (984 + ($6)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($5<<24>>24)==($8<<24>>24);
  if ($9) {
   $10 = (($3) + 1|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11 << 24 >> 24;
   $isdigittmp$i$i = (($12) + -48)|0;
   $isdigit$i$i = ($isdigittmp$i$i>>>0)<(10);
   if ($isdigit$i$i) {
    $13 = (($3) + 2|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = $14 << 24 >> 24;
    $isdigittmp1$i$i = (($15) + -48)|0;
    $isdigit2$i$i = ($isdigittmp1$i$i>>>0)<(10);
    if ($isdigit2$i$i) {
     $16 = (($3) + 3|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17 << 24 >> 24;
     $isdigittmp3$i$i = (($18) + -48)|0;
     $isdigit4$i$i = ($isdigittmp3$i$i>>>0)<(10);
     if ($isdigit4$i$i) {
      $19 = (($3) + 4|0);
      $20 = HEAP8[$19>>0]|0;
      $21 = $20 << 24 >> 24;
      $isdigittmp5$i$i = (($21) + -48)|0;
      $isdigit6$i$i = ($isdigittmp5$i$i>>>0)<(10);
      if ($isdigit6$i$i) {
       $22 = (($3) + 5|0);
       $23 = HEAP8[$22>>0]|0;
       $24 = $23 << 24 >> 24;
       $25 = (_isupper($24)|0);
       $26 = ($25|0)==(0);
       if (!($26)) {
        $27 = (($3) + 6|0);
        $28 = HEAP8[$27>>0]|0;
        $29 = $28 << 24 >> 24;
        $30 = (_isupper($29)|0);
        $31 = ($30|0)==(0);
        if (!($31)) {
         $32 = (($3) + 7|0);
         $33 = HEAP8[$32>>0]|0;
         $34 = ($33<<24>>24)==(0);
         if ($34) {
          $35 = HEAP32[120>>2]|0;
          $36 = (_strtok_r(0,$35,$last$i)|0);
          $37 = ($36|0)==(0|0);
          if (!($37)) {
           $38 = HEAP8[$36>>0]|0;
           $39 = ($38<<24>>24)==(84);
           if ($39) {
            $41 = (($36) + 1|0);
            $42 = (_strtol($41,$ptr$i,0)|0);
            $43 = HEAP32[$ptr$i>>2]|0;
            $44 = ($41|0)==($43|0);
            if (!($44)) {
             $45 = ($42|0)==(2147483647);
             $46 = ($42|0)<(1);
             $or$cond$i = $45 | $46;
             if (!($or$cond$i)) {
              $48 = HEAP32[221098912>>2]|0;
              _adjust_time($42,$48);
              $49 = HEAP32[34180984>>2]|0;
              $50 = HEAP32[34180992>>2]|0;
              HEAP32[$vararg_buffer>>2] = $49;
              $vararg_ptr1 = (($vararg_buffer) + 4|0);
              HEAP32[$vararg_ptr1>>2] = $50;
              _out(221111896,$vararg_buffer);
              $$0 = 1;
              STACKTOP = sp;return ($$0|0);
             }
            }
            $47 = HEAP32[296>>2]|0;
            HEAP32[220526664>>2] = $47;
            $$0 = -1;
            STACKTOP = sp;return ($$0|0);
           }
          }
          $40 = HEAP32[296>>2]|0;
          HEAP32[220526664>>2] = $40;
          $$0 = -1;
          STACKTOP = sp;return ($$0|0);
         }
        }
       }
      }
     }
    }
   }
  }
  $51 = HEAP8[$3>>0]|0;
  $52 = HEAP32[221098912>>2]|0;
  $53 = $52 ^ 1;
  $54 = (984 + ($53)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = ($51<<24>>24)==($55<<24>>24);
  if ($56) {
   $57 = (($3) + 1|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58 << 24 >> 24;
   $isdigittmp$i2$i = (($59) + -48)|0;
   $isdigit$i3$i = ($isdigittmp$i2$i>>>0)<(10);
   if ($isdigit$i3$i) {
    $60 = (($3) + 2|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61 << 24 >> 24;
    $isdigittmp1$i4$i = (($62) + -48)|0;
    $isdigit2$i5$i = ($isdigittmp1$i4$i>>>0)<(10);
    if ($isdigit2$i5$i) {
     $63 = (($3) + 3|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = $64 << 24 >> 24;
     $isdigittmp3$i6$i = (($65) + -48)|0;
     $isdigit4$i7$i = ($isdigittmp3$i6$i>>>0)<(10);
     if ($isdigit4$i7$i) {
      $66 = (($3) + 4|0);
      $67 = HEAP8[$66>>0]|0;
      $68 = $67 << 24 >> 24;
      $isdigittmp5$i8$i = (($68) + -48)|0;
      $isdigit6$i9$i = ($isdigittmp5$i8$i>>>0)<(10);
      if ($isdigit6$i9$i) {
       $69 = (($3) + 5|0);
       $70 = HEAP8[$69>>0]|0;
       $71 = $70 << 24 >> 24;
       $72 = (_isupper($71)|0);
       $73 = ($72|0)==(0);
       if (!($73)) {
        $74 = (($3) + 6|0);
        $75 = HEAP8[$74>>0]|0;
        $76 = $75 << 24 >> 24;
        $77 = (_isupper($76)|0);
        $78 = ($77|0)==(0);
        if (!($78)) {
         $79 = (($3) + 7|0);
         $80 = HEAP8[$79>>0]|0;
         $81 = ($80<<24>>24)==(0);
         if ($81) {
          $82 = (_cmd_usrmove($ptree,$57,$last$i)|0);
          $$0 = $82;
          STACKTOP = sp;return ($$0|0);
         }
        }
       }
      }
     }
    }
   }
  }
  $83 = HEAP32[40>>2]|0;
  $84 = (_strcmp($3,$83)|0);
  $85 = ($84|0)==(0);
  if ($85) {
   $86 = (_cmd_resign($ptree,$last$i)|0);
   $$0 = $86;
   STACKTOP = sp;return ($$0|0);
  }
  $87 = (_strcmp($3,221111920)|0);
  $88 = ($87|0)==(0);
  if (!($88)) {
   $89 = (_strcmp($3,221111928)|0);
   $90 = ($89|0)==(0);
   if (!($90)) {
    $91 = (_strcmp($3,221111936)|0);
    $92 = ($91|0)==(0);
    if (!($92)) {
     $93 = (_strcmp($3,221111944)|0);
     $94 = ($93|0)==(0);
     if (!($94)) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
    }
   }
  }
  $95 = HEAP32[34180920>>2]|0;
  $96 = $95 & 224;
  $97 = ($96|0)==(0);
  if (!($97)) {
   $98 = $95 | 8;
   HEAP32[34180920>>2] = $98;
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
  $99 = HEAP32[221099712>>2]|0;
  $100 = (_sckt_out($99,221111952,$vararg_buffer2)|0);
  $101 = ($100|0)<(0);
  if ($101) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $102 = HEAP32[221099712>>2]|0;
  $103 = (_sckt_recv_all($102)|0);
  $104 = ($103|0)<(0);
  if ($104) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  _shutdown_all();
  $105 = HEAP32[221098920>>2]|0;
  $106 = HEAP32[221098928>>2]|0;
  $107 = ($105|0)==($106|0);
  if ($107) {
   $108 = HEAP32[34180920>>2]|0;
   $109 = $108 | 16;
   HEAP32[34180920>>2] = $109;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $110 = HEAP32[221098936>>2]|0;
   $111 = (_client_next_game($ptree,221098944,$110)|0);
   $$0 = $111;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $112 = HEAP32[221102520>>2]|0;
 $113 = ($112|0)==(-1);
 if (!($113)) {
  $114 = HEAP32[120>>2]|0;
  $115 = (_strtok_r(220525128,$114,$last$i1)|0);
  $116 = ($115|0)==(0|0);
  if ($116) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $117 = (_strcmp($115,221111832)|0);
  $118 = ($117|0)==(0);
  if ($118) {
   $119 = HEAP32[34180920>>2]|0;
   $120 = $119 & 96;
   $121 = ($120|0)==(0);
   $storemerge$v$i$i = $121 ? 8 : 1024;
   $storemerge$i$i = $storemerge$v$i$i | $119;
   $$0$i$i = $121 ? 1 : 2;
   HEAP32[34180920>>2] = $storemerge$i$i;
   if (!($121)) {
    $$0 = $$0$i$i;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[221102528>>2] = 0;
   $122 = (_cmd_new($ptree,$last$i1)|0);
   $123 = ($122|0)<(0);
   if ($123) {
    $$0 = $122;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[221099720>>2] = 0;
   $124 = (_analyze($ptree)|0);
   $$0 = $124;
   STACKTOP = sp;return ($$0|0);
  }
  $125 = (_strcmp($115,221111840)|0);
  $126 = ($125|0)==(0);
  if (!($126)) {
   $160 = (_strcmp($115,221111848)|0);
   $161 = ($160|0)==(0);
   if ($161) {
    $162 = HEAP32[34180920>>2]|0;
    $163 = $162 & 96;
    $164 = ($163|0)==(0);
    $storemerge$v$i2$i = $164 ? 8 : 1024;
    $storemerge$i3$i = $storemerge$v$i2$i | $162;
    $$0$i4$i = $164 ? 1 : 2;
    HEAP32[34180920>>2] = $storemerge$i3$i;
    $$0 = $$0$i4$i;
    STACKTOP = sp;return ($$0|0);
   }
   $165 = (_strcmp($115,221111856)|0);
   $166 = ($165|0)==(0);
   if ($166) {
    $167 = (_cmd_mnjmove($ptree,$last$i1,1)|0);
    $$0 = $167;
    STACKTOP = sp;return ($$0|0);
   }
   $168 = (_strcmp($115,221111864)|0);
   $169 = ($168|0)==(0);
   if (!($169)) {
    $180 = (_strcmp($115,221111872)|0);
    $181 = ($180|0)==(0);
    if ($181) {
     $182 = (_cmd_mnjmove($ptree,$last$i1,0)|0);
     $$0 = $182;
     STACKTOP = sp;return ($$0|0);
    } else {
     $183 = HEAP32[296>>2]|0;
     HEAP32[220526664>>2] = $183;
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $170 = HEAP32[120>>2]|0;
   $171 = (_strtok_r(0,$170,$last$i1)|0);
   $172 = ($171|0)==(0|0);
   if ($172) {
    $173 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $173;
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $174 = (_strtol($171,$ptr$i2,0)|0);
   $175 = HEAP32[$ptr$i2>>2]|0;
   $176 = ($175|0)==($171|0);
   $177 = ($174|0)>(2);
   $or$cond$i3 = $176 | $177;
   if ($or$cond$i3) {
    $178 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $178;
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $179 = (_cmd_mnjmove($ptree,$last$i1,$174)|0);
    $$0 = $179;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $127 = HEAP32[120>>2]|0;
  $128 = (_strtok_r(0,$127,$last$i1)|0);
  $129 = ($128|0)==(0|0);
  if ($129) {
   $130 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $130;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $131 = (_strtol($128,$ptr$i$i,0)|0);
  $132 = HEAP32[$ptr$i$i>>2]|0;
  $133 = ($132|0)==($128|0);
  if (!($133)) {
   $134 = ($131|0)==(2147483647);
   $135 = ($131|0)<(1);
   $or$cond$i$i = $134 | $135;
   if (!($or$cond$i$i)) {
    $137 = HEAP32[34180920>>2]|0;
    $138 = $137 & 128;
    $139 = ($138|0)==(0);
    if (!($139)) {
     $140 = HEAP32[336>>2]|0;
     HEAP32[220526664>>2] = $140;
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    $141 = $137 & 96;
    $142 = ($141|0)==(0);
    if (!($142)) {
     $146 = $137 | 1024;
     HEAP32[34180920>>2] = $146;
     $$0 = 2;
     STACKTOP = sp;return ($$0|0);
    }
    $143 = HEAP32[120>>2]|0;
    $144 = (_strtok_r(0,$143,$last$i1)|0);
    $145 = ($144|0)==(0|0);
    if (!($145)) {
     $147 = $144;$i$03$i$i = 0;
     while(1) {
      $148 = (_interpret_CSA_move($ptree,$move$i$i,$147)|0);
      $149 = ($148|0)<(0);
      if ($149) {
       $$0 = -1;
       label = 459;
       break;
      }
      $150 = HEAP32[$move$i$i>>2]|0;
      $151 = (221099720 + ($i$03$i$i<<2)|0);
      HEAP32[$151>>2] = $150;
      $152 = (($i$03$i$i) + 1)|0;
      $153 = HEAP32[120>>2]|0;
      $154 = (_strtok_r(0,$153,$last$i1)|0);
      $155 = ($154|0)==(0|0);
      if ($155) {
       break;
      } else {
       $147 = $154;$i$03$i$i = $152;
      }
     }
     if ((label|0) == 459) {
      STACKTOP = sp;return ($$0|0);
     }
     $156 = ($152|0)==(0);
     if (!($156)) {
      HEAP32[221102528>>2] = $131;
      $158 = (221099720 + ($152<<2)|0);
      HEAP32[$158>>2] = 0;
      $159 = (_analyze($ptree)|0);
      $$0 = $159;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $157 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $157;
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $136 = HEAP32[296>>2]|0;
  HEAP32[220526664>>2] = $136;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $184 = HEAP32[120>>2]|0;
 $185 = (_strtok_r(220525128,$184,$last$i7)|0);
 $186 = ($185|0)==(0|0);
 if ($186) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $187 = HEAP8[$185>>0]|0;
 $188 = ($187<<24>>24)==(35);
 if ($188) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $189 = $187 << 24 >> 24;
 $isdigittmp$i$i8 = (($189) + -48)|0;
 $isdigit$i$i9 = ($isdigittmp$i$i8>>>0)<(10);
 if ($isdigit$i$i9) {
  $190 = (($185) + 1|0);
  $191 = HEAP8[$190>>0]|0;
  $192 = $191 << 24 >> 24;
  $isdigittmp1$i$i10 = (($192) + -48)|0;
  $isdigit2$i$i11 = ($isdigittmp1$i$i10>>>0)<(10);
  if ($isdigit2$i$i11) {
   $193 = (($185) + 2|0);
   $194 = HEAP8[$193>>0]|0;
   $195 = $194 << 24 >> 24;
   $isdigittmp3$i$i12 = (($195) + -48)|0;
   $isdigit4$i$i13 = ($isdigittmp3$i$i12>>>0)<(10);
   if ($isdigit4$i$i13) {
    $196 = (($185) + 3|0);
    $197 = HEAP8[$196>>0]|0;
    $198 = $197 << 24 >> 24;
    $isdigittmp5$i$i14 = (($198) + -48)|0;
    $isdigit6$i$i15 = ($isdigittmp5$i$i14>>>0)<(10);
    if ($isdigit6$i$i15) {
     $199 = (($185) + 4|0);
     $200 = HEAP8[$199>>0]|0;
     $201 = $200 << 24 >> 24;
     $202 = (_isupper($201)|0);
     $203 = ($202|0)==(0);
     if (!($203)) {
      $204 = (($185) + 5|0);
      $205 = HEAP8[$204>>0]|0;
      $206 = $205 << 24 >> 24;
      $207 = (_isupper($206)|0);
      $208 = ($207|0)==(0);
      if (!($208)) {
       $209 = (($185) + 6|0);
       $210 = HEAP8[$209>>0]|0;
       $211 = ($210<<24>>24)==(0);
       if ($211) {
        $212 = (_cmd_usrmove($ptree,$185,$last$i7)|0);
        $$0 = $212;
        STACKTOP = sp;return ($$0|0);
       }
      }
     }
    }
   }
  }
 }
 $213 = (_strcmp($185,221112072)|0);
 $214 = ($213|0)==(0);
 if ($214) {
  $215 = HEAP32[34180920>>2]|0;
  $216 = $215 & 128;
  $217 = ($216|0)==(0);
  if ($217) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $218 = $215 | 512;
  HEAP32[34180920>>2] = $218;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $219 = (_strcmp($185,221112080)|0);
 $220 = ($219|0)==(0);
 if ($220) {
  $221 = HEAP32[120>>2]|0;
  $222 = (_strtok_r(0,$221,$last$i7)|0);
  $223 = ($222|0)==(0|0);
  if ($223) {
   $224 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $224;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $225 = HEAP32[160>>2]|0;
  $226 = (_strcmp($222,$225)|0);
  $227 = ($226|0)==(0);
  do {
   if ($227) {
    $228 = HEAP32[34180920>>2]|0;
    $229 = $228 & -262145;
    $storemerge$i$i16 = $229;
   } else {
    $230 = HEAP32[176>>2]|0;
    $231 = (_strcmp($222,$230)|0);
    $232 = ($231|0)==(0);
    if ($232) {
     $233 = HEAP32[34180920>>2]|0;
     $234 = $233 | 262144;
     $storemerge$i$i16 = $234;
     break;
    }
    $235 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $235;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  HEAP32[34180920>>2] = $storemerge$i$i16;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $236 = (_strcmp($185,221112088)|0);
 $237 = ($236|0)==(0);
 if ($237) {
  $238 = HEAP32[120>>2]|0;
  $239 = (_strtok_r(0,$238,$last$i7)|0);
  $240 = ($239|0)==(0|0);
  if ($240) {
   $241 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $241;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $242 = HEAP32[160>>2]|0;
  $243 = (_strcmp($239,$242)|0);
  $244 = ($243|0)==(0);
  if ($244) {
   $245 = (_book_on()|0);
   $$0 = $245;
   STACKTOP = sp;return ($$0|0);
  }
  $246 = HEAP32[176>>2]|0;
  $247 = (_strcmp($239,$246)|0);
  $248 = ($247|0)==(0);
  if ($248) {
   $249 = (_book_off()|0);
   $$0 = $249;
   STACKTOP = sp;return ($$0|0);
  }
  $250 = (_strcmp($239,221112704)|0);
  $251 = ($250|0)==(0);
  if ($251) {
   $252 = HEAP32[34180920>>2]|0;
   $253 = $252 | 32768;
   HEAP32[34180920>>2] = $253;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $254 = (_strcmp($239,221112712)|0);
  $255 = ($254|0)==(0);
  if ($255) {
   $256 = HEAP32[34180920>>2]|0;
   $257 = $256 & -32769;
   HEAP32[34180920>>2] = $257;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $258 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $258;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $259 = (_strcmp($185,221112096)|0);
 $260 = ($259|0)==(0);
 if ($260) {
  $261 = HEAP32[120>>2]|0;
  $262 = (_strtok_r(0,$261,$last$i7)|0);
  $263 = ($262|0)==(0|0);
  do {
   if (!($263)) {
    $264 = (_strtol($262,$ptr$i$i6,0)|0);
    $265 = HEAP32[$ptr$i$i6>>2]|0;
    $266 = ($265|0)==($262|0);
    if ($266) {
     $267 = HEAP32[296>>2]|0;
     HEAP32[220526664>>2] = $267;
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    if ((($264|0) == 1)) {
     $268 = HEAP32[34180920>>2]|0;
     $269 = $268 & -16385;
     HEAP32[34180920>>2] = $269;
     break;
    } else if ((($264|0) == 2)) {
     $270 = HEAP32[34180920>>2]|0;
     $271 = $270 | 16384;
     HEAP32[34180920>>2] = $271;
     break;
    } else {
     $272 = HEAP32[296>>2]|0;
     HEAP32[220526664>>2] = $272;
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  _out(221112696,$vararg_buffer4);
  $273 = HEAP32[_stdout>>2]|0;
  $274 = (_out_board($ptree,$273,0,0)|0);
  $275 = ($274|0)<(0);
  if ($275) {
   $$0 = $274;
   STACKTOP = sp;return ($$0|0);
  }
  _out(221112696,$vararg_buffer6);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $276 = (_strcmp($185,221112104)|0);
 $277 = ($276|0)==(0);
 if ($277) {
  $278 = HEAP32[120>>2]|0;
  $279 = (_strtok_r(0,$278,$last$i7)|0);
  $280 = ($279|0)==(0|0);
  if ($280) {
   $281 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $281;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $282 = (_strtol($279,$ptr$i4$i,0)|0);
  $283 = HEAP32[$ptr$i4$i>>2]|0;
  $284 = ($283|0)==($279|0);
  if (!($284)) {
   $285 = ($282|0)==(2147483647);
   $286 = ($282|0)<(1);
   $or$cond$i$i17 = $285 | $286;
   $287 = ($282|0)>(31);
   $or$cond3$i$i = $or$cond$i$i17 | $287;
   if (!($or$cond3$i$i)) {
    $289 = HEAP32[34180920>>2]|0;
    $290 = $289 & 128;
    $291 = ($290|0)==(0);
    if (!($291)) {
     $292 = HEAP32[336>>2]|0;
     HEAP32[220526664>>2] = $292;
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    $293 = $289 & 96;
    $294 = ($293|0)==(0);
    if ($294) {
     HEAP32[34184064>>2] = $282;
     $296 = HEAP32[33555960>>2]|0;
     (_memory_free($296)|0);
     $297 = (_ini_trans_table()|0);
     $$0 = $297;
     STACKTOP = sp;return ($$0|0);
    } else {
     $295 = $289 | 1024;
     HEAP32[34180920>>2] = $295;
     $$0 = 2;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
  $288 = HEAP32[296>>2]|0;
  HEAP32[220526664>>2] = $288;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $298 = (_strcmp($185,221112112)|0);
 $299 = ($298|0)==(0);
 if ($299) {
  $300 = HEAP32[120>>2]|0;
  $301 = (_strtok_r(0,$300,$last$i7)|0);
  $302 = ($301|0)==(0|0);
  if ($302) {
   $303 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $303;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $304 = HEAP32[34180920>>2]|0;
  $305 = $304 & 128;
  $306 = ($305|0)==(0);
  if (!($306)) {
   $307 = HEAP32[336>>2]|0;
   HEAP32[220526664>>2] = $307;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $308 = $304 & 96;
  $309 = ($308|0)==(0);
  if (!($309)) {
   $310 = $304 | 1024;
   HEAP32[34180920>>2] = $310;
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
  $311 = (_strcmp($301,221112656)|0);
  $312 = ($311|0)==(0);
  if ($312) {
   $313 = HEAP32[120>>2]|0;
   $314 = (_strtok_r(0,$313,$last$i7)|0);
   $315 = ($314|0)==(0|0);
   if ($315) {
    $316 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $316;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $317 = (_strtol($314,$ptr$i6$i,0)|0);
   $318 = HEAP32[$ptr$i6$i>>2]|0;
   $319 = ($318|0)==($314|0);
   do {
    if (!($319)) {
     $320 = ($317|0)==(2147483647);
     $321 = ($317|0)<(1);
     $or$cond$i7$i = $320 | $321;
     if ($or$cond$i7$i) {
      break;
     }
     HEAP32[34181008>>2] = -1;
     $323 = 34180912;
     $324 = $323;
     HEAP32[$324>>2] = -1;
     $325 = (($323) + 4)|0;
     $326 = $325;
     HEAP32[$326>>2] = -1;
     HEAP32[34184088>>2] = $317;
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   $322 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $322;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $327 = (_strcmp($301,221112664)|0);
  $328 = ($327|0)==(0);
  if ($328) {
   $329 = HEAP32[120>>2]|0;
   $330 = (_strtok_r(0,$329,$last$i7)|0);
   $331 = ($330|0)==(0|0);
   if ($331) {
    $332 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $332;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $333 = (_strtol($330,$ptr$i6$i,0)|0);
   $334 = HEAP32[$ptr$i6$i>>2]|0;
   $335 = ($334|0)==($330|0);
   do {
    if (!($335)) {
     $336 = ($333|0)==(2147483647);
     $337 = ($333|0)<(1);
     $or$cond3$i8$i = $336 | $337;
     if ($or$cond3$i8$i) {
      break;
     }
     HEAP32[34181008>>2] = -1;
     HEAP32[34184088>>2] = 128;
     $339 = ($333|0)<(0);
     $340 = $339 << 31 >> 31;
     $341 = 34180912;
     $342 = $341;
     HEAP32[$342>>2] = $333;
     $343 = (($341) + 4)|0;
     $344 = $343;
     HEAP32[$344>>2] = $340;
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   $338 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $338;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $345 = (_strcmp($301,221112200)|0);
  $346 = ($345|0)==(0);
  if (!($346)) {
   $391 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $391;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $347 = HEAP32[120>>2]|0;
  $348 = (_strtok_r(0,$347,$last$i7)|0);
  $349 = ($348|0)==(0|0);
  if ($349) {
   $350 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $350;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $351 = (_strcmp($348,221112672)|0);
  $352 = ($351|0)==(0);
  if ($352) {
   $353 = HEAP32[34180920>>2]|0;
   $354 = $353 | 65536;
   HEAP32[34180920>>2] = $354;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $355 = (_strcmp($348,221112688)|0);
  $356 = ($355|0)==(0);
  if ($356) {
   $357 = HEAP32[34180920>>2]|0;
   $358 = $357 & -65537;
   HEAP32[34180920>>2] = $358;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $359 = (_strtol($348,$ptr$i6$i,0)|0);
  $360 = HEAP32[$ptr$i6$i>>2]|0;
  $361 = ($360|0)==($348|0);
  do {
   if (!($361)) {
    $362 = ($359|0)==(2147483647);
    $363 = ($359|0)<(0);
    $or$cond5$i$i = $362 | $363;
    if ($or$cond5$i$i) {
     break;
    }
    $365 = HEAP32[120>>2]|0;
    $366 = (_strtok_r(0,$365,$last$i7)|0);
    $367 = ($366|0)==(0|0);
    if ($367) {
     $368 = HEAP32[296>>2]|0;
     HEAP32[220526664>>2] = $368;
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    $369 = (_strtol($366,$ptr$i6$i,0)|0);
    $370 = HEAP32[$ptr$i6$i>>2]|0;
    $371 = ($370|0)==($366|0);
    do {
     if (!($371)) {
      $372 = ($369|0)==(2147483647);
      $373 = ($369|0)<(0);
      $or$cond7$i$i = $372 | $373;
      if ($or$cond7$i$i) {
       break;
      }
      $375 = HEAP32[120>>2]|0;
      $376 = (_strtok_r(0,$375,$last$i7)|0);
      $377 = ($376|0)==(0|0);
      do {
       if ($377) {
        $l3$0$i$i = -1;
       } else {
        $378 = (_strtol($376,$ptr$i6$i,0)|0);
        $379 = HEAP32[$ptr$i6$i>>2]|0;
        $380 = ($379|0)==($376|0);
        if (!($380)) {
         $$off$i$i = (($378) + 1)|0;
         $381 = ($$off$i$i>>>0)>(128);
         if (!($381)) {
          $l3$0$i$i = $378;
          break;
         }
        }
        $382 = HEAP32[296>>2]|0;
        HEAP32[220526664>>2] = $382;
        $$0 = -2;
        STACKTOP = sp;return ($$0|0);
       }
      } while(0);
      $383 = $369 | $359;
      $384 = ($383|0)==(0);
      $$$i$i = $384 ? 1 : $369;
      HEAP32[34184088>>2] = 128;
      $385 = 34180912;
      $386 = $385;
      HEAP32[$386>>2] = -1;
      $387 = (($385) + 4)|0;
      $388 = $387;
      HEAP32[$388>>2] = -1;
      $389 = ($359*60)|0;
      HEAP32[34181000>>2] = $389;
      HEAP32[34181008>>2] = $$$i$i;
      $390 = ($l3$0$i$i|0)==(-1);
      if ($390) {
       HEAP32[34181016>>2] = -1;
       $$0 = 1;
       STACKTOP = sp;return ($$0|0);
      } else {
       HEAP32[34181016>>2] = $l3$0$i$i;
       $$0 = 1;
       STACKTOP = sp;return ($$0|0);
      }
     }
    } while(0);
    $374 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $374;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $364 = HEAP32[296>>2]|0;
  HEAP32[220526664>>2] = $364;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $392 = (_strcmp($185,221111872)|0);
 $393 = ($392|0)==(0);
 if ($393) {
  $394 = HEAP32[120>>2]|0;
  $395 = (_strtok_r(0,$394,$last$i7)|0);
  $396 = HEAP32[34180920>>2]|0;
  $397 = $396 & 15;
  $398 = ($397|0)==(0);
  if (!($398)) {
   $399 = HEAP32[592>>2]|0;
   HEAP32[220526664>>2] = $399;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $400 = $396 & 128;
  $401 = ($400|0)==(0);
  if (!($401)) {
   $402 = HEAP32[336>>2]|0;
   HEAP32[220526664>>2] = $402;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $403 = $396 & 96;
  $404 = ($403|0)==(0);
  if (!($404)) {
   $405 = $396 | 1024;
   HEAP32[34180920>>2] = $405;
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
  $406 = ($395|0)==(0|0);
  if ($406) {
   $407 = (_get_elapsed(34181048)|0);
   $408 = ($407|0)<(0);
   if ($408) {
    $$0 = $407;
    STACKTOP = sp;return ($$0|0);
   }
   $409 = (_com_turn_start($ptree,0)|0);
   $$0 = $409;
   STACKTOP = sp;return ($$0|0);
  }
  $410 = (_strtol($395,$ptr$i10$i,0)|0);
  $411 = HEAP32[$ptr$i10$i>>2]|0;
  $412 = ($395|0)==($411|0);
  do {
   if ($412) {
    $str$0$i$i = $395;
   } else {
    $413 = ($410|0)!=(2147483647);
    $414 = ($410|0)>(0);
    $or$cond$i11$i = $413 & $414;
    if ($or$cond$i11$i) {
     $415 = HEAP8[$411>>0]|0;
     $416 = ($415<<24>>24)==(0);
     if ($416) {
      $i$05$i$i = 0;
     } else {
      $str$0$i$i = $395;
      break;
     }
     while(1) {
      $419 = HEAP32[34180920>>2]|0;
      $420 = $419 & 527;
      $421 = ($420|0)==(0);
      if (!($421)) {
       $$0 = 1;
       label = 459;
       break;
      }
      $422 = (_get_elapsed(34181048)|0);
      $423 = ($422|0)<(0);
      if ($423) {
       $$0 = $422;
       label = 459;
       break;
      }
      $424 = (_com_turn_start($ptree,0)|0);
      $425 = ($424|0)<(0);
      $418 = (($i$05$i$i) + 1)|0;
      if ($425) {
       $$0 = $424;
       label = 459;
       break;
      }
      $417 = ($418|0)<($410|0);
      if ($417) {
       $i$05$i$i = $418;
      } else {
       $$0 = 1;
       label = 459;
       break;
      }
     }
     if ((label|0) == 459) {
      STACKTOP = sp;return ($$0|0);
     }
    } else {
     $str$0$i$i = $395;
    }
   }
  } while(0);
  while(1) {
   $426 = (_interpret_CSA_move($ptree,$move$i$i5,$str$0$i$i)|0);
   $427 = ($426|0)<(0);
   if ($427) {
    $$0 = $426;
    label = 459;
    break;
   }
   $428 = (_get_elapsed(34181048)|0);
   $429 = ($428|0)<(0);
   if ($429) {
    $$0 = $428;
    label = 459;
    break;
   }
   $430 = HEAP32[$move$i$i5>>2]|0;
   $431 = (_make_move_root($ptree,$430,15)|0);
   $432 = ($431|0)<(0);
   if ($432) {
    $$0 = $431;
    label = 459;
    break;
   }
   $433 = HEAP32[120>>2]|0;
   $434 = (_strtok_r(0,$433,$last$i7)|0);
   $435 = ($434|0)==(0|0);
   if ($435) {
    $$0 = 1;
    label = 459;
    break;
   } else {
    $str$0$i$i = $434;
   }
  }
  if ((label|0) == 459) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $436 = (_strcmp($185,221111832)|0);
 $437 = ($436|0)==(0);
 if ($437) {
  $438 = (_cmd_new($ptree,$last$i7)|0);
  $$0 = $438;
  STACKTOP = sp;return ($$0|0);
 }
 $439 = (_strcmp($185,221112120)|0);
 $440 = ($439|0)==(0);
 if ($440) {
  $441 = HEAP32[34180920>>2]|0;
  $442 = $441 & 128;
  $443 = ($442|0)==(0);
  if (!($443)) {
   $444 = HEAP32[336>>2]|0;
   HEAP32[220526664>>2] = $444;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $445 = $441 & 96;
  $446 = ($445|0)==(0);
  if (!($446)) {
   $447 = $441 | 1024;
   HEAP32[34180920>>2] = $447;
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
  $448 = $441 & 15;
  $449 = ($448|0)==(0);
  if (!($449)) {
   _out(221112624,$vararg_buffer8);
   $450 = HEAP32[220526680>>2]|0;
   $451 = ($450|0)==(-1);
   if ($451) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   (_sckt_out($450,221112624,$vararg_buffer10)|0);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $452 = (_gen_legal_moves($ptree,$move_list$i$i,0)|0);
  HEAP8[$buffer$i$i>>0] = 0;
  $453 = ($452|0)>(0);
  if ($453) {
   $c$03$i$i = 0;$i$02$i$i = 0;
   while(1) {
    $454 = (($move_list$i$i) + ($i$02$i$i<<2)|0);
    $455 = HEAP32[$454>>2]|0;
    $456 = (_str_CSA_move($455)|0);
    $457 = ($i$02$i$i|0)!=(0);
    $458 = (($i$02$i$i|0) % 10)&-1;
    $459 = ($458|0)==(0);
    $or$cond$i13$i = $457 & $459;
    do {
     if ($or$cond$i13$i) {
      HEAP32[$vararg_buffer12>>2] = $buffer$i$i;
      _out(221112640,$vararg_buffer12);
      $460 = HEAP32[220526680>>2]|0;
      $461 = ($460|0)==(-1);
      if (!($461)) {
       HEAP32[$vararg_buffer15>>2] = $buffer$i$i;
       (_sckt_out($460,221112648,$vararg_buffer15)|0);
      }
      ;HEAP8[$buffer$i$i+0>>0]=HEAP8[$456+0>>0]|0;HEAP8[$buffer$i$i+1>>0]=HEAP8[$456+1>>0]|0;HEAP8[$buffer$i$i+2>>0]=HEAP8[$456+2>>0]|0;HEAP8[$buffer$i$i+3>>0]=HEAP8[$456+3>>0]|0;HEAP8[$buffer$i$i+4>>0]=HEAP8[$456+4>>0]|0;HEAP8[$buffer$i$i+5>>0]=HEAP8[$456+5>>0]|0;
      $c$1$i$i = 6;
     } else {
      $462 = (($buffer$i$i) + ($c$03$i$i)|0);
      if ($457) {
       HEAP8[$462>>0] = 32;
       $$sum$i$i = (($c$03$i$i) + 1)|0;
       $463 = (($buffer$i$i) + ($$sum$i$i)|0);
       ;HEAP8[$463+0>>0]=HEAP8[$456+0>>0]|0;HEAP8[$463+1>>0]=HEAP8[$456+1>>0]|0;HEAP8[$463+2>>0]=HEAP8[$456+2>>0]|0;HEAP8[$463+3>>0]=HEAP8[$456+3>>0]|0;HEAP8[$463+4>>0]=HEAP8[$456+4>>0]|0;HEAP8[$463+5>>0]=HEAP8[$456+5>>0]|0;
       $464 = (($c$03$i$i) + 7)|0;
       $c$1$i$i = $464;
       break;
      } else {
       ;HEAP8[$462+0>>0]=HEAP8[$456+0>>0]|0;HEAP8[$462+1>>0]=HEAP8[$456+1>>0]|0;HEAP8[$462+2>>0]=HEAP8[$456+2>>0]|0;HEAP8[$462+3>>0]=HEAP8[$456+3>>0]|0;HEAP8[$462+4>>0]=HEAP8[$456+4>>0]|0;HEAP8[$462+5>>0]=HEAP8[$456+5>>0]|0;
       $465 = (($c$03$i$i) + 6)|0;
       $c$1$i$i = $465;
       break;
      }
     }
    } while(0);
    $466 = (($buffer$i$i) + ($c$1$i$i)|0);
    HEAP8[$466>>0] = 0;
    $467 = (($i$02$i$i) + 1)|0;
    $exitcond$i$i = ($467|0)==($452|0);
    if ($exitcond$i$i) {
     break;
    } else {
     $c$03$i$i = $c$1$i$i;$i$02$i$i = $467;
    }
   }
  }
  HEAP32[$vararg_buffer18>>2] = $buffer$i$i;
  _out(221112640,$vararg_buffer18);
  $468 = HEAP32[220526680>>2]|0;
  $469 = ($468|0)==(-1);
  if ($469) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$vararg_buffer21>>2] = $buffer$i$i;
  (_sckt_out($468,221112640,$vararg_buffer21)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $470 = (_strcmp($185,221112128)|0);
 $471 = ($470|0)==(0);
 if ($471) {
  $472 = HEAP32[120>>2]|0;
  $473 = (_strtok_r(0,$472,$last$i7)|0);
  $474 = ($473|0)==(0|0);
  if ($474) {
   $475 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $475;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $476 = HEAP32[160>>2]|0;
  $477 = (_strcmp($473,$476)|0);
  $478 = ($477|0)==(0);
  do {
   if ($478) {
    $479 = HEAP32[34180920>>2]|0;
    $480 = $479 & -1048577;
    $storemerge$i16$i = $480;
   } else {
    $481 = HEAP32[176>>2]|0;
    $482 = (_strcmp($473,$481)|0);
    $483 = ($482|0)==(0);
    if ($483) {
     $484 = HEAP32[34180920>>2]|0;
     $485 = $484 | 1048576;
     $storemerge$i16$i = $485;
     break;
    }
    $486 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $486;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  HEAP32[34180920>>2] = $storemerge$i16$i;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $487 = (_strcmp($185,221112136)|0);
 $488 = ($487|0)==(0);
 if ($488) {
  $489 = HEAP32[120>>2]|0;
  $490 = (_strtok_r(0,$489,$last$i7)|0);
  $491 = ($490|0)==(0|0);
  if ($491) {
   $492 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $492;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $493 = HEAP32[160>>2]|0;
  $494 = (_strcmp($490,$493)|0);
  $495 = ($494|0)==(0);
  do {
   if ($495) {
    $496 = HEAP32[34180920>>2]|0;
    $497 = $496 & -2049;
    $storemerge$i18$i = $497;
   } else {
    $498 = HEAP32[176>>2]|0;
    $499 = (_strcmp($490,$498)|0);
    $500 = ($499|0)==(0);
    if ($500) {
     $501 = HEAP32[34180920>>2]|0;
     $502 = $501 | 2048;
     $storemerge$i18$i = $502;
     break;
    }
    $503 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $503;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  HEAP32[34180920>>2] = $storemerge$i18$i;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $504 = (_strcmp($185,221112144)|0);
 $505 = ($504|0)==(0);
 if ($505) {
  _out(221112616,$vararg_buffer24);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $506 = (_strcmp($185,221112152)|0);
 $507 = ($506|0)==(0);
 if ($507) {
  $508 = HEAP32[120>>2]|0;
  $509 = (_strtok_r(0,$508,$last$i7)|0);
  $510 = ($509|0)==(0|0);
  if ($510) {
   $511 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $511;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $512 = HEAP32[160>>2]|0;
  $513 = (_strcmp($509,$512)|0);
  $514 = ($513|0)==(0);
  if ($514) {
   $515 = HEAP32[34180920>>2]|0;
   $516 = $515 & -2097153;
   $storemerge$i20$i = $516;
  } else {
   $517 = HEAP32[176>>2]|0;
   $518 = (_strcmp($509,$517)|0);
   $519 = ($518|0)==(0);
   if (!($519)) {
    $526 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $526;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $520 = HEAP32[34180920>>2]|0;
   $521 = $520 & 96;
   $522 = ($521|0)==(0);
   if ($522) {
    $525 = $520;
   } else {
    $523 = $520 | 1024;
    HEAP32[34180920>>2] = $523;
    $525 = $523;
   }
   $524 = $525 | 2097152;
   $storemerge$i20$i = $524;
  }
  HEAP32[34180920>>2] = $storemerge$i20$i;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $527 = (_strcmp($185,221112160)|0);
 $528 = ($527|0)==(0);
 if ($528) {
  $529 = HEAP32[120>>2]|0;
  $530 = (_strtok_r(0,$529,$last$i7)|0);
  $531 = HEAP32[34180920>>2]|0;
  $532 = $531 & 128;
  $533 = ($532|0)==(0);
  if (!($533)) {
   $534 = HEAP32[336>>2]|0;
   HEAP32[220526664>>2] = $534;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $535 = $531 & 96;
  $536 = ($535|0)==(0);
  if (!($536)) {
   $537 = $531 | 1024;
   HEAP32[34180920>>2] = $537;
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
  $538 = ($530|0)==(0|0);
  do {
   if ($538) {
    $is_mate$02$i$i = 0;$nposition$0$i$i = -1;
   } else {
    $539 = (_strcmp($530,221112592)|0);
    $540 = ($539|0)==(0);
    if ($540) {
     $541 = HEAP32[120>>2]|0;
     $542 = (_strtok_r(0,$541,$last$i7)|0);
     $543 = ($542|0)==(0|0);
     if ($543) {
      $is_mate$02$i$i = 1;$nposition$0$i$i = -1;
      break;
     } else {
      $is_mate$05$i$i = 1;$str$04$i$i = $542;
     }
    } else {
     $is_mate$05$i$i = 0;$str$04$i$i = $530;
    }
    $544 = (_strtol($str$04$i$i,$ptr$i22$i,0)|0);
    $545 = HEAP32[$ptr$i22$i>>2]|0;
    $546 = ($545|0)==($str$04$i$i|0);
    if (!($546)) {
     $547 = ($544|0)==(2147483647);
     $548 = ($544|0)<(1);
     $or$cond$i23$i = $547 | $548;
     if (!($or$cond$i23$i)) {
      $is_mate$02$i$i = $is_mate$05$i$i;$nposition$0$i$i = $544;
      break;
     }
    }
    $549 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $549;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $550 = (_record_open(33555976,221112600,2,0,0)|0);
  $551 = ($550|0)<(0);
  if ($551) {
   $$0 = $550;
   STACKTOP = sp;return ($$0|0);
  }
  $552 = ($is_mate$02$i$i|0)==(0);
  if ($552) {
   $554 = (_solve_problems($ptree,$nposition$0$i$i)|0);
   $556 = $554;
  } else {
   $553 = (_solve_mate_problems($ptree,$nposition$0$i$i)|0);
   $556 = $553;
  }
  $555 = ($556|0)<(0);
  $557 = (_record_close(33555976)|0);
  if ($555) {
   $$0 = $556;
   STACKTOP = sp;return ($$0|0);
  }
  $558 = ($557|0)<(0);
  if ($558) {
   $$0 = $557;
   STACKTOP = sp;return ($$0|0);
  }
  $559 = (_get_elapsed(34181048)|0);
  $$0 = $559;
  STACKTOP = sp;return ($$0|0);
 }
 $560 = (_strcmp($185,221112168)|0);
 $561 = ($560|0)==(0);
 if ($561) {
  $562 = HEAP32[34180920>>2]|0;
  $563 = $562 | 16;
  HEAP32[34180920>>2] = $563;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $564 = (_strcmp($185,221112176)|0);
 $565 = ($564|0)==(0);
 if ($565) {
  $566 = HEAP32[120>>2]|0;
  $567 = (_strtok_r(0,$566,$last$i7)|0);
  $568 = HEAP32[120>>2]|0;
  $569 = (_strtok_r(0,$568,$last$i7)|0);
  $570 = HEAP32[120>>2]|0;
  $571 = (_strtok_r(0,$570,$last$i7)|0);
  $572 = ($567|0)==(0|0);
  if ($572) {
   $573 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $573;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $574 = ($569|0)==(0|0);
  do {
   if ($574) {
    $flag$0$i$i = 14;
   } else {
    $575 = (_strcmp($569,221112504)|0);
    $576 = ($575|0)==(0);
    if ($576) {
     $flag$0$i$i = 15;
     break;
    }
    $577 = (_strcmp($569,221112512)|0);
    $578 = ($577|0)==(0);
    if ($578) {
     $flag$0$i$i = 14;
     break;
    }
    $579 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $579;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $580 = ($571|0)==(0|0);
  L513: do {
   if ($580) {
    $moves$0$i$i = -1;
   } else {
    $581 = (_strtol($571,$ptr$i25$i,0)|0);
    $582 = HEAP32[$ptr$i25$i>>2]|0;
    $583 = ($582|0)==($571|0);
    do {
     if (!($583)) {
      $584 = ($581|0)==(2147483647);
      $585 = ($581|0)<(1);
      $or$cond$i26$i = $584 | $585;
      if ($or$cond$i26$i) {
       break;
      }
      $587 = (($581) + -1)|0;
      $moves$0$i$i = $587;
      break L513;
     }
    } while(0);
    $586 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $586;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $588 = HEAP32[34180920>>2]|0;
  $589 = $588 & 128;
  $590 = ($589|0)==(0);
  if (!($590)) {
   $591 = HEAP32[336>>2]|0;
   HEAP32[220526664>>2] = $591;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $592 = $588 & 96;
  $593 = ($592|0)==(0);
  if (!($593)) {
   $594 = $588 | 1024;
   HEAP32[34180920>>2] = $594;
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
  $595 = (_strcmp($567,221112264)|0);
  $596 = ($595|0)==(0);
  do {
   if ($596) {
    (_strncpy(($buffer$i$i|0),(221112536|0),255)|0);
    $597 = (_file_open(221112520,221112552)|0);
    $598 = ($597|0)==(0|0);
    if ($598) {
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    $599 = (_file_open($buffer$i$i,221112560)|0);
    $600 = ($599|0)==(0|0);
    if ($600) {
     (_file_close($597)|0);
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    $601 = (_getc(($599|0))|0);
    $602 = ($601|0)==(-1);
    if (!($602)) {
     $603 = $601;
     while(1) {
      (_putc(($603|0),($597|0))|0);
      $604 = (_getc(($599|0))|0);
      $605 = ($604|0)==(-1);
      if ($605) {
       break;
      } else {
       $603 = $604;
      }
     }
    }
    $606 = (_file_close($599)|0);
    $607 = ($606|0)<(0);
    $608 = (_file_close($597)|0);
    if ($607) {
     $$0 = $606;
     STACKTOP = sp;return ($$0|0);
    }
    $609 = ($608|0)<(0);
    if ($609) {
     $$0 = $608;
    } else {
     $flag$1$i$i = 15;$str1$0$i$i = 221112520;$str_tmp$0$i$i = 221112520;
     break;
    }
    STACKTOP = sp;return ($$0|0);
   } else {
    $flag$1$i$i = $flag$0$i$i;$str1$0$i$i = $567;$str_tmp$0$i$i = 0;
   }
  } while(0);
  $610 = (_read_record($ptree,$str1$0$i$i,$moves$0$i$i,$flag$1$i$i)|0);
  $611 = ($610|0)<(0);
  if ($611) {
   $$0 = $610;
   STACKTOP = sp;return ($$0|0);
  }
  $612 = (_get_elapsed(34181048)|0);
  $613 = ($612|0)<(0);
  if ($613) {
   $$0 = $612;
   STACKTOP = sp;return ($$0|0);
  }
  $614 = ($str_tmp$0$i$i|0)==(0|0);
  if ($614) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $615 = (_remove(($str_tmp$0$i$i|0))|0);
  $616 = ($615|0)==(0);
  if ($616) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  _out_warning(221112568,$vararg_buffer26);
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $617 = (_strcmp($185,221112184)|0);
 $618 = ($617|0)==(0);
 if ($618) {
  $619 = (_cmd_resign($ptree,$last$i7)|0);
  $$0 = $619;
  STACKTOP = sp;return ($$0|0);
 }
 $620 = (_strcmp($185,221112192)|0);
 $621 = ($620|0)==(0);
 if ($621) {
  $622 = HEAP32[34180920>>2]|0;
  $623 = $622 & 96;
  $624 = ($623|0)==(0);
  $storemerge$v$i$i21 = $624 ? 8 : 1024;
  $storemerge$i31$i = $storemerge$v$i$i21 | $622;
  $$0$i32$i = $624 ? 1 : 2;
  HEAP32[34180920>>2] = $storemerge$i31$i;
  $$0 = $$0$i32$i;
  STACKTOP = sp;return ($$0|0);
 }
 $625 = (_strcmp($185,221112200)|0);
 $626 = ($625|0)==(0);
 if ($626) {
  $627 = HEAP32[120>>2]|0;
  $628 = (_strtok_r(0,$627,$last$i7)|0);
  $629 = ($628|0)==(0|0);
  if ($629) {
   $630 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $630;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $631 = (_strcmp($628,221112480)|0);
  $632 = ($631|0)==(0);
  if ($632) {
   $633 = HEAP32[120>>2]|0;
   $634 = (_strtok_r(0,$633,$last$i7)|0);
   $635 = ($634|0)==(0|0);
   if ($635) {
    $636 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $636;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $637 = (_strtol($634,$ptr$i33$i,0)|0);
   $638 = HEAP32[$ptr$i33$i>>2]|0;
   $639 = ($638|0)==($634|0);
   do {
    if (!($639)) {
     $640 = ($637|0)==(2147483647);
     $641 = ($637|0)<(0);
     $or$cond$i34$i = $640 | $641;
     $642 = ($637|0)>(1000);
     $or$cond3$i35$i = $or$cond$i34$i | $642;
     if ($or$cond3$i35$i) {
      break;
     }
     HEAP32[34181080>>2] = $637;
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   $643 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $643;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $644 = (_strcmp($628,221112496)|0);
  $645 = ($644|0)==(0);
  if (!($645)) {
   $670 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $670;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $646 = HEAP32[120>>2]|0;
  $647 = (_strtok_r(0,$646,$last$i7)|0);
  $648 = ($647|0)==(0|0);
  if ($648) {
   $649 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $649;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $650 = (_strtol($647,$ptr$i33$i,0)|0);
  $651 = HEAP32[$ptr$i33$i>>2]|0;
  $652 = ($651|0)==($647|0);
  do {
   if (!($652)) {
    $653 = ($650|0)==(2147483647);
    $654 = ($650|0)<(0);
    $or$cond5$i36$i = $653 | $654;
    if ($or$cond5$i36$i) {
     break;
    }
    $656 = HEAP32[120>>2]|0;
    $657 = (_strtok_r(0,$656,$last$i7)|0);
    $658 = ($657|0)==(0|0);
    if ($658) {
     $659 = HEAP32[296>>2]|0;
     HEAP32[220526664>>2] = $659;
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    $660 = (_strtol($657,$ptr$i33$i,0)|0);
    $661 = HEAP32[$ptr$i33$i>>2]|0;
    $662 = ($661|0)==($657|0);
    do {
     if (!($662)) {
      $663 = ($660|0)==(2147483647);
      $664 = ($660|0)<(0);
      $or$cond7$i37$i = $663 | $664;
      if ($or$cond7$i37$i) {
       break;
      }
      $666 = HEAP32[34181008>>2]|0;
      $667 = ($666|0)==(-1);
      if ($667) {
       $668 = HEAP32[296>>2]|0;
       HEAP32[220526664>>2] = $668;
       $$0 = -2;
       STACKTOP = sp;return ($$0|0);
      } else {
       $669 = (_reset_time($650,$660)|0);
       $$0 = $669;
       STACKTOP = sp;return ($$0|0);
      }
     }
    } while(0);
    $665 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $665;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $655 = HEAP32[296>>2]|0;
  HEAP32[220526664>>2] = $655;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $671 = (_strcmp($185,221112208)|0);
 $672 = ($671|0)==(0);
 if ($672) {
  $673 = HEAP32[120>>2]|0;
  $674 = (_strtok_r(0,$673,$last$i7)|0);
  $675 = ($674|0)==(0|0);
  if ($675) {
   $676 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $676;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $677 = HEAP32[160>>2]|0;
  $678 = (_strcmp($674,$677)|0);
  $679 = ($678|0)==(0);
  do {
   if ($679) {
    $680 = HEAP32[34180920>>2]|0;
    $681 = $680 & -8193;
    $storemerge$i39$i = $681;
   } else {
    $682 = HEAP32[176>>2]|0;
    $683 = (_strcmp($674,$682)|0);
    $684 = ($683|0)==(0);
    if ($684) {
     $685 = HEAP32[34180920>>2]|0;
     $686 = $685 | 8192;
     $storemerge$i39$i = $686;
     break;
    }
    $687 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $687;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  HEAP32[34180920>>2] = $storemerge$i39$i;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $688 = (_strcmp($185,221112216)|0);
 $689 = ($688|0)==(0);
 if ($689) {
  $690 = HEAP32[120>>2]|0;
  $691 = (_strtok_r(0,$690,$last$i7)|0);
  $692 = ($691|0)==(0|0);
  if ($692) {
   label = 337;
  } else {
   $693 = (_strcmp($691,221112264)|0);
   $694 = ($693|0)==(0);
   if ($694) {
    label = 337;
   } else {
    $str$0$i42$i = $691;
   }
  }
  if ((label|0) == 337) {
   $str$0$i42$i = 221112416;
  }
  (_strncpy((221098944|0),($str$0$i42$i|0),255)|0);
  HEAP8[((221098944 + 255|0))>>0] = 0;
  $695 = HEAP32[120>>2]|0;
  $696 = (_strtok_r(0,$695,$last$i7)|0);
  $697 = ($696|0)==(0|0);
  if ($697) {
   label = 340;
  } else {
   $698 = (_strcmp($696,221112264)|0);
   $699 = ($698|0)==(0);
   if ($699) {
    label = 340;
   } else {
    $str$1$i$i = $696;
   }
  }
  if ((label|0) == 340) {
   $str$1$i$i = 221112448;
  }
  $700 = (_strtol($str$1$i$i,$ptr$i41$i,0)|0);
  HEAP32[221098936>>2] = $700;
  $701 = HEAP32[$ptr$i41$i>>2]|0;
  $702 = ($701|0)==($str$1$i$i|0);
  $703 = ($700|0)==(2147483647);
  $or$cond$i43$i = $702 | $703;
  $704 = ($700|0)<(0);
  $or$cond3$i44$i = $or$cond$i43$i | $704;
  $705 = ($700|0)>(65535);
  $or$cond5$i45$i = $or$cond3$i44$i | $705;
  if ($or$cond5$i45$i) {
   $706 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $706;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $707 = HEAP32[120>>2]|0;
  $708 = (_strtok_r(0,$707,$last$i7)|0);
  $709 = ($708|0)==(0|0);
  if ($709) {
   label = 345;
  } else {
   $710 = (_strcmp($708,221112264)|0);
   $711 = ($710|0)==(0);
   if ($711) {
    label = 345;
   } else {
    $str$2$i$i = $708;
   }
  }
  if ((label|0) == 345) {
   $str$2$i$i = 221112456;
  }
  (_strncpy((221099200|0),($str$2$i$i|0),255)|0);
  HEAP8[((221099200 + 255|0))>>0] = 0;
  $712 = (_strtok_r(0,221112472,$last$i7)|0);
  $713 = ($712|0)==(0|0);
  if ($713) {
   label = 348;
  } else {
   $714 = (_strcmp($712,221112264)|0);
   $715 = ($714|0)==(0);
   if ($715) {
    label = 348;
   } else {
    $str$3$i$i = $712;
   }
  }
  if ((label|0) == 348) {
   $str$3$i$i = 221112456;
  }
  (_strncpy((221099456|0),($str$3$i$i|0),255)|0);
  HEAP8[((221099456 + 255|0))>>0] = 0;
  $716 = HEAP32[120>>2]|0;
  $717 = (_strtok_r(0,$716,$last$i7)|0);
  $718 = ($717|0)==(0|0);
  do {
   if ($718) {
    $storemerge$i47$i = 2147483647;
   } else {
    $719 = (_strcmp($717,221112264)|0);
    $720 = ($719|0)==(0);
    if ($720) {
     $storemerge$i47$i = 2147483647;
     break;
    }
    $721 = (_strtol($717,$ptr$i41$i,0)|0);
    $722 = HEAP32[$ptr$i41$i>>2]|0;
    $723 = ($722|0)==($717|0);
    if (!($723)) {
     $724 = ($721|0)==(2147483647);
     $725 = ($721|0)<(1);
     $or$cond7$i46$i = $724 | $725;
     if (!($or$cond7$i46$i)) {
      $storemerge$i47$i = $721;
      break;
     }
    }
    $726 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $726;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  HEAP32[221098928>>2] = $storemerge$i47$i;
  $727 = HEAP32[34180920>>2]|0;
  $728 = $727 & 128;
  $729 = ($728|0)==(0);
  if (!($729)) {
   $730 = HEAP32[336>>2]|0;
   HEAP32[220526664>>2] = $730;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $731 = $727 & 96;
  $732 = ($731|0)==(0);
  if ($732) {
   HEAP32[221098920>>2] = 0;
   $734 = HEAP32[221098936>>2]|0;
   $735 = (_client_next_game($ptree,221098944,$734)|0);
   $$0 = $735;
   STACKTOP = sp;return ($$0|0);
  } else {
   $733 = $727 | 1024;
   HEAP32[34180920>>2] = $733;
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $736 = (_strcmp($185,221112224)|0);
 $737 = ($736|0)==(0);
 if ($737) {
  $738 = HEAP32[120>>2]|0;
  $739 = (_strtok_r(0,$738,$last$i7)|0);
  $740 = ($739|0)==(0|0);
  if ($740) {
   $741 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $741;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $742 = HEAP32[176>>2]|0;
  $743 = (_strcmp($739,$742)|0);
  $744 = ($743|0)==(0);
  do {
   if ($744) {
    $745 = HEAP32[34180920>>2]|0;
    $746 = $745 & -8388609;
    $storemerge$i49$i = $746;
   } else {
    $747 = HEAP32[160>>2]|0;
    $748 = (_strcmp($739,$747)|0);
    $749 = ($748|0)==(0);
    if ($749) {
     $750 = HEAP32[34180920>>2]|0;
     $751 = $750 | 8388608;
     $storemerge$i49$i = $751;
     break;
    }
    $752 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $752;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  HEAP32[34180920>>2] = $storemerge$i49$i;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $753 = (_strcmp($185,221112232)|0);
 $754 = ($753|0)==(0);
 if ($754) {
  $755 = HEAP32[120>>2]|0;
  $756 = (_strtok_r(0,$755,$last$i7)|0);
  $757 = ($756|0)==(0|0);
  if ($757) {
   $758 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $758;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $759 = (_strtol($756,$ptr$i51$i,0)|0);
  $760 = HEAP32[$ptr$i51$i>>2]|0;
  $761 = ($760|0)==($756|0);
  do {
   if (!($761)) {
    $762 = ($759|0)==(2147483647);
    $763 = ($759|0)<(0);
    $or$cond$i52$i = $762 | $763;
    if ($or$cond$i52$i) {
     break;
    }
    $765 = HEAP32[120>>2]|0;
    $766 = (_strtok_r(0,$765,$last$i7)|0);
    $767 = ($766|0)==(0|0);
    if ($767) {
     $768 = HEAP32[296>>2]|0;
     HEAP32[220526664>>2] = $768;
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    $769 = (_strtol($766,$ptr$i51$i,0)|0);
    $770 = HEAP32[$ptr$i51$i>>2]|0;
    $771 = ($770|0)==($766|0);
    do {
     if (!($771)) {
      $772 = ($769|0)==(2147483647);
      $773 = ($769|0)<(0);
      $or$cond3$i53$i = $772 | $773;
      if ($or$cond3$i53$i) {
       break;
      }
      $775 = HEAP32[120>>2]|0;
      $776 = (_strtok_r(0,$775,$last$i7)|0);
      $777 = ($776|0)==(0|0);
      if ($777) {
       label = 381;
      } else {
       $778 = (_strcmp($776,221112264)|0);
       $779 = ($778|0)==(0);
       if ($779) {
        label = 381;
       } else {
        $str$0$i54$i = $776;
       }
      }
      if ((label|0) == 381) {
       $str$0$i54$i = 221112328;
      }
      (_strncpy(($buffer$i$i|0),($str$0$i54$i|0),255)|0);
      $780 = (($buffer$i$i) + 255|0);
      HEAP8[$780>>0] = 0;
      $781 = HEAP32[120>>2]|0;
      $782 = (_strtok_r(0,$781,$last$i7)|0);
      $783 = ($782|0)==(0|0);
      if ($783) {
       label = 384;
      } else {
       $784 = (_strcmp($782,221112264)|0);
       $785 = ($784|0)==(0);
       if ($785) {
        label = 384;
       } else {
        $str$1$i55$i = $782;
       }
      }
      if ((label|0) == 384) {
       $str$1$i55$i = 221112344;
      }
      $786 = (_strtol($str$1$i55$i,$ptr$i51$i,0)|0);
      $787 = HEAP32[$ptr$i51$i>>2]|0;
      $788 = ($787|0)==($str$1$i55$i|0);
      do {
       if (!($788)) {
        $789 = ($786|0)==(2147483647);
        $790 = ($786|0)<(0);
        $or$cond5$i56$i = $789 | $790;
        $791 = ($786|0)>(65535);
        $or$cond7$i57$i = $or$cond5$i56$i | $791;
        if ($or$cond7$i57$i) {
         break;
        }
        $793 = HEAP32[120>>2]|0;
        $794 = (_strtok_r(0,$793,$last$i7)|0);
        $795 = ($794|0)==(0|0);
        if ($795) {
         label = 390;
        } else {
         $796 = (_strcmp($794,221112264)|0);
         $797 = ($796|0)==(0);
         if ($797) {
          label = 390;
         } else {
          $str$2$i58$i = $794;
         }
        }
        if ((label|0) == 390) {
         $str$2$i58$i = 221112296;
        }
        (_strncpy(($client_str_id$i$i|0),($str$2$i58$i|0),255)|0);
        $798 = (($client_str_id$i$i) + 255|0);
        HEAP8[$798>>0] = 0;
        $799 = HEAP32[120>>2]|0;
        $800 = (_strtok_r(0,$799,$last$i7)|0);
        $801 = ($800|0)==(0|0);
        if ($801) {
         label = 393;
        } else {
         $802 = (_strcmp($800,221112264)|0);
         $803 = ($802|0)==(0);
         if ($803) {
          label = 393;
         } else {
          $str$3$i59$i = $800;
         }
        }
        if ((label|0) == 393) {
         $str$3$i59$i = 221112352;
        }
        $804 = (+_strtod($str$3$i59$i,$ptr$i51$i));
        $805 = HEAP32[$ptr$i51$i>>2]|0;
        $806 = ($805|0)==($str$3$i59$i|0);
        $807 = $804 < 0.0;
        $or$cond8$i$i = $806 | $807;
        if ($or$cond8$i$i) {
         $808 = HEAP32[296>>2]|0;
         HEAP32[220526664>>2] = $808;
         $$0 = -2;
         STACKTOP = sp;return ($$0|0);
        }
        $809 = HEAP32[120>>2]|0;
        $810 = (_strtok_r(0,$809,$last$i7)|0);
        $811 = ($810|0)==(0|0);
        do {
         if ($811) {
          $l$0$i$i = -1;
         } else {
          $812 = (_strcmp($810,221112264)|0);
          $813 = ($812|0)==(0);
          if ($813) {
           $l$0$i$i = -1;
           break;
          }
          $814 = (_strtol($810,$ptr$i51$i,0)|0);
          $815 = HEAP32[$ptr$i51$i>>2]|0;
          $816 = ($815|0)==($810|0);
          $817 = ($814|0)==(2147483647);
          $or$cond9$i$i = $816 | $817;
          if (!($or$cond9$i$i)) {
           $l$0$i$i = $814;
           break;
          }
          $818 = HEAP32[296>>2]|0;
          HEAP32[220526664>>2] = $818;
          $$0 = -2;
          STACKTOP = sp;return ($$0|0);
         }
        } while(0);
        $819 = ($l$0$i$i|0)<(1);
        $$l$0$i$i = $819 ? 2147483647 : $l$0$i$i;
        HEAP32[221102536>>2] = $$l$0$i$i;
        $820 = HEAP32[34180920>>2]|0;
        $821 = $820 & 128;
        $822 = ($821|0)==(0);
        if (!($822)) {
         $823 = HEAP32[336>>2]|0;
         HEAP32[220526664>>2] = $823;
         $$0 = -2;
         STACKTOP = sp;return ($$0|0);
        }
        $824 = $820 & 96;
        $825 = ($824|0)==(0);
        if (!($825)) {
         $826 = $820 | 1024;
         HEAP32[34180920>>2] = $826;
         $$0 = 2;
         STACKTOP = sp;return ($$0|0);
        }
        HEAP32[34184160>>2] = 65535;
        $827 = $820 | 6291456;
        HEAP32[34180920>>2] = $827;
        $828 = (_mnj_reset_tbl($759,$769)|0);
        $829 = ($828|0)<(0);
        if ($829) {
         $$0 = -1;
         STACKTOP = sp;return ($$0|0);
        }
        $830 = (_sckt_connect($buffer$i$i,$786)|0);
        HEAP32[221102520>>2] = $830;
        $831 = ($830|0)==(-1);
        if ($831) {
         $$0 = -2;
         STACKTOP = sp;return ($$0|0);
        }
        HEAP8[220526152>>0] = 0;
        HEAP32[$vararg_buffer28>>2] = $client_str_id$i$i;
        _out(221112360,$vararg_buffer28);
        $832 = HEAP32[221102520>>2]|0;
        $833 = ($832|0)==(-1);
        if (!($833)) {
         $834 = HEAP32[221102536>>2]|0;
         $835 = ($834|0)==(2147483647);
         $836 = $835 ? 221112400 : 221112408;
         HEAP32[$vararg_buffer31>>2] = $client_str_id$i$i;
         $vararg_ptr34 = (($vararg_buffer31) + 4|0);
         HEAPF64[tempDoublePtr>>3]=$804;HEAP32[$vararg_ptr34>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr34+4>>2]=HEAP32[tempDoublePtr+4>>2];
         $vararg_ptr35 = (($vararg_buffer31) + 12|0);
         HEAP32[$vararg_ptr35>>2] = $836;
         (_sckt_out($832,221112384,$vararg_buffer31)|0);
        }
        $837 = HEAP32[34180920>>2]|0;
        $838 = $837 & 96;
        $839 = ($838|0)==(0);
        $storemerge$v$i$i$i = $839 ? 8 : 1024;
        $storemerge$i$i$i = $storemerge$v$i$i$i | $837;
        $$0$i$i$i = $839 ? 1 : 2;
        HEAP32[34180920>>2] = $storemerge$i$i$i;
        $$0 = $$0$i$i$i;
        STACKTOP = sp;return ($$0|0);
       }
      } while(0);
      $792 = HEAP32[296>>2]|0;
      HEAP32[220526664>>2] = $792;
      $$0 = -2;
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    $774 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $774;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $764 = HEAP32[296>>2]|0;
  HEAP32[220526664>>2] = $764;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $840 = (_strcmp($185,221112240)|0);
 $841 = ($840|0)==(0);
 if (!($841)) {
  $913 = (_strcmp($185,221112248)|0);
  $914 = ($913|0)==(0);
  if (!($914)) {
   $930 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $930;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $915 = HEAP32[120>>2]|0;
  $916 = (_strtok_r(0,$915,$last$i7)|0);
  $917 = ($916|0)==(0|0);
  if ($917) {
   $918 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $918;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $919 = HEAP32[160>>2]|0;
  $920 = (_strcmp($916,$919)|0);
  $921 = ($920|0)==(0);
  do {
   if ($921) {
    $922 = HEAP32[34180920>>2]|0;
    $923 = $922 & -524289;
    $storemerge$i68$i = $923;
   } else {
    $924 = HEAP32[176>>2]|0;
    $925 = (_strcmp($916,$924)|0);
    $926 = ($925|0)==(0);
    if ($926) {
     $927 = HEAP32[34180920>>2]|0;
     $928 = $927 | 524288;
     $storemerge$i68$i = $928;
     break;
    }
    $929 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $929;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  HEAP32[34180920>>2] = $storemerge$i68$i;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $842 = HEAP32[120>>2]|0;
 $843 = (_strtok_r(0,$842,$last$i7)|0);
 $844 = ($843|0)==(0|0);
 if ($844) {
  $845 = HEAP32[296>>2]|0;
  HEAP32[220526664>>2] = $845;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $846 = (_strcmp($843,221112104)|0);
 $847 = ($846|0)==(0);
 if ($847) {
  $848 = HEAP32[120>>2]|0;
  $849 = (_strtok_r(0,$848,$last$i7)|0);
  $850 = ($849|0)==(0|0);
  if ($850) {
   $851 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $851;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $852 = (_strtol($849,$ptr$i61$i,0)|0);
  $853 = HEAP32[$ptr$i61$i>>2]|0;
  $854 = ($853|0)==($849|0);
  do {
   if (!($854)) {
    $855 = ($852|0)==(2147483647);
    $856 = ($852|0)<(1);
    $or$cond$i62$i = $855 | $856;
    if ($or$cond$i62$i) {
     break;
    }
    $858 = HEAP32[34180920>>2]|0;
    $859 = $858 & 128;
    $860 = ($859|0)==(0);
    if (!($860)) {
     $861 = HEAP32[336>>2]|0;
     HEAP32[220526664>>2] = $861;
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    $862 = $858 & 96;
    $863 = ($862|0)==(0);
    if ($863) {
     HEAP32[220526672>>2] = $852;
     $865 = (_dfpn_ini_hash()|0);
     $$0 = $865;
     STACKTOP = sp;return ($$0|0);
    } else {
     $864 = $858 | 1024;
     HEAP32[34180920>>2] = $864;
     $$0 = 2;
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $857 = HEAP32[296>>2]|0;
  HEAP32[220526664>>2] = $857;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $866 = (_strcmp($843,221112256)|0);
 $867 = ($866|0)==(0);
 if ($867) {
  $868 = HEAP32[34180920>>2]|0;
  $869 = $868 & 128;
  $870 = ($869|0)==(0);
  if (!($870)) {
   $871 = HEAP32[336>>2]|0;
   HEAP32[220526664>>2] = $871;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $872 = $868 & 96;
  $873 = ($872|0)==(0);
  if ($873) {
   $875 = HEAP32[34184024>>2]|0;
   $876 = (_dfpn($ptree,$875,1)|0);
   $$0 = $876;
   STACKTOP = sp;return ($$0|0);
  } else {
   $874 = $868 | 1024;
   HEAP32[34180920>>2] = $874;
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $877 = (_strcmp($843,221112216)|0);
 $878 = ($877|0)==(0);
 if (!($878)) {
  $912 = HEAP32[296>>2]|0;
  HEAP32[220526664>>2] = $912;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $879 = HEAP32[120>>2]|0;
 $880 = (_strtok_r(0,$879,$last$i7)|0);
 $881 = ($880|0)==(0|0);
 if ($881) {
  label = 432;
 } else {
  $882 = (_strcmp($880,221112264)|0);
  $883 = ($882|0)==(0);
  if ($883) {
   label = 432;
  } else {
   $str$0$i63$i = $880;
  }
 }
 if ((label|0) == 432) {
  $str$0$i63$i = 221112272;
 }
 (_strncpy(($buffer$i$i|0),($str$0$i63$i|0),255)|0);
 $884 = (($buffer$i$i) + 255|0);
 HEAP8[$884>>0] = 0;
 $885 = HEAP32[120>>2]|0;
 $886 = (_strtok_r(0,$885,$last$i7)|0);
 $887 = ($886|0)==(0|0);
 if ($887) {
  label = 435;
 } else {
  $888 = (_strcmp($886,221112264)|0);
  $889 = ($888|0)==(0);
  if ($889) {
   label = 435;
  } else {
   $str$1$i64$i = $886;
  }
 }
 if ((label|0) == 435) {
  $str$1$i64$i = 221112288;
 }
 $890 = (_strtol($str$1$i64$i,$ptr1$i$i,0)|0);
 $891 = HEAP32[$ptr1$i$i>>2]|0;
 $892 = ($891|0)==($str$1$i64$i|0);
 do {
  if (!($892)) {
   $893 = ($890|0)==(2147483647);
   $894 = ($890|0)<(0);
   $or$cond3$i65$i = $893 | $894;
   $895 = ($890|0)>(65535);
   $or$cond5$i66$i = $or$cond3$i65$i | $895;
   if ($or$cond5$i66$i) {
    break;
   }
   $897 = HEAP32[120>>2]|0;
   $898 = (_strtok_r(0,$897,$last$i7)|0);
   $899 = ($898|0)==(0|0);
   if ($899) {
    label = 441;
   } else {
    $900 = (_strcmp($898,221112264)|0);
    $901 = ($900|0)==(0);
    if ($901) {
     label = 441;
    } else {
     $str$2$i67$i = $898;
    }
   }
   if ((label|0) == 441) {
    $str$2$i67$i = 221112296;
   }
   (_strncpy(($client_str_id$i$i|0),($str$2$i67$i|0),255)|0);
   $902 = (($client_str_id$i$i) + 255|0);
   HEAP8[$902>>0] = 0;
   $903 = HEAP32[34180920>>2]|0;
   $904 = $903 & 128;
   $905 = ($904|0)==(0);
   if (!($905)) {
    $906 = HEAP32[336>>2]|0;
    HEAP32[220526664>>2] = $906;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $907 = $903 & 96;
   $908 = ($907|0)==(0);
   if (!($908)) {
    $909 = $903 | 1024;
    HEAP32[34180920>>2] = $909;
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   }
   $910 = (_sckt_connect($buffer$i$i,$890)|0);
   HEAP32[220526680>>2] = $910;
   $911 = ($910|0)==(-1);
   if ($911) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP8[220526152>>0] = 0;
   HEAP32[$vararg_buffer36>>2] = $client_str_id$i$i;
   (_sckt_out($910,221112312,$vararg_buffer36)|0);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $896 = HEAP32[296>>2]|0;
 HEAP32[220526664>>2] = $896;
 $$0 = -2;
 STACKTOP = sp;return ($$0|0);
}
function _cmd_new($ptree,$lasts) {
 $ptree = $ptree|0;
 $lasts = $lasts|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $min_posi = 0, $pmp$0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $min_posi = sp;
 $0 = HEAP32[120>>2]|0;
 $1 = (_strtok_r(0,$0,$lasts)|0);
 $2 = HEAP32[120>>2]|0;
 $3 = (_strtok_r(0,$2,$lasts)|0);
 $4 = HEAP32[34180920>>2]|0;
 $5 = $4 & 128;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = HEAP32[336>>2]|0;
  HEAP32[220526664>>2] = $7;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = $4 & 96;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = $4 | 1024;
  HEAP32[34180920>>2] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($1|0)==(0|0);
 do {
  if ($11) {
   $pmp$0 = 1424;
  } else {
   $12 = (($min_posi) + 9|0);
   dest=$12+0|0; stop=dest+81|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   $13 = (($min_posi) + 4|0);
   HEAP32[$13>>2] = 0;
   HEAP32[$min_posi>>2] = 0;
   $14 = (_read_board_rep1($1,$min_posi)|0);
   $15 = ($14|0)<(0);
   if ($15) {
    $$0 = $14;
    STACKTOP = sp;return ($$0|0);
   }
   $16 = ($3|0)==(0|0);
   if ($16) {
    $24 = (($min_posi) + 8|0);
    HEAP8[$24>>0] = 0;
    $pmp$0 = $min_posi;
    break;
   }
   $17 = (_strcmp($3,221111880)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $19 = (($min_posi) + 8|0);
    HEAP8[$19>>0] = 1;
    $pmp$0 = $min_posi;
    break;
   }
   $20 = (_strcmp($3,221111888)|0);
   $21 = ($20|0)==(0);
   if ($21) {
    $22 = (($min_posi) + 8|0);
    HEAP8[$22>>0] = 0;
    $pmp$0 = $min_posi;
    break;
   }
   $23 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $23;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $25 = (_ini_game($ptree,$pmp$0,2,0,0)|0);
 $26 = ($25|0)<(0);
 if ($26) {
  $$0 = $25;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (_get_elapsed(34181048)|0);
 $$0 = $27;
 STACKTOP = sp;return ($$0|0);
}
function _cmd_mnjmove($ptree,$lasts,$num_alter) {
 $ptree = $ptree|0;
 $lasts = $lasts|0;
 $num_alter = $num_alter|0;
 var $$0 = 0, $$025 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $move = 0, $or$cond = 0, $or$cond3 = 0, $or$cond4 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ptr = sp + 4|0;
 $move = sp;
 $0 = HEAP32[120>>2]|0;
 $1 = (_strtok_r(0,$0,$lasts)|0);
 $2 = HEAP32[120>>2]|0;
 $3 = (_strtok_r(0,$2,$lasts)|0);
 $4 = HEAP32[221102520>>2]|0;
 $5 = ($4|0)==(-1);
 $6 = ($1|0)==(0|0);
 $or$cond3 = $5 | $6;
 $7 = ($3|0)==(0|0);
 $or$cond4 = $or$cond3 | $7;
 L1: do {
  if ($or$cond4) {
   $8 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $8;
   $$0 = -1;
  } else {
   $9 = (_strtol($3,$ptr,0)|0);
   $10 = HEAP32[$ptr>>2]|0;
   $11 = ($10|0)==($3|0);
   if (!($11)) {
    $12 = ($9|0)==(2147483647);
    $13 = ($9|0)<(1);
    $or$cond = $12 | $13;
    if (!($or$cond)) {
     $15 = HEAP32[34180920>>2]|0;
     $16 = $15 & 128;
     $17 = ($16|0)==(0);
     if (!($17)) {
      $18 = HEAP32[336>>2]|0;
      HEAP32[220526664>>2] = $18;
      $$0 = -2;
      break;
     }
     $19 = $15 & 96;
     $20 = ($19|0)==(0);
     if (!($20)) {
      $22 = $15 | 1024;
      HEAP32[34180920>>2] = $22;
      $$0 = 2;
      break;
     }
     $21 = ($num_alter|0)==(0);
     if (!($21)) {
      $$025 = $num_alter;
      while(1) {
       $25 = (_unmake_move_root($ptree)|0);
       $26 = ($25|0)<(0);
       $24 = (($$025) + -1)|0;
       if ($26) {
        $$0 = $25;
        break L1;
       }
       $23 = ($24|0)==(0);
       if ($23) {
        break;
       } else {
        $$025 = $24;
       }
      }
     }
     $27 = (_interpret_CSA_move($ptree,$move,$1)|0);
     $28 = ($27|0)<(0);
     if ($28) {
      $$0 = $27;
      break;
     }
     $29 = (_get_elapsed(34181048)|0);
     $30 = ($29|0)<(0);
     if ($30) {
      $$0 = $29;
      break;
     }
     HEAP32[221102528>>2] = $9;
     $31 = HEAP32[$move>>2]|0;
     $32 = (_make_move_root($ptree,$31,13)|0);
     $33 = ($32|0)<(0);
     if ($33) {
      $$0 = $32;
      break;
     }
     $34 = HEAP32[_stdout>>2]|0;
     $35 = (_out_board($ptree,$34,0,0)|0);
     $36 = ($35|0)<(0);
     if ($36) {
      $$0 = $35;
      break;
     }
     HEAP32[221099720>>2] = 0;
     $37 = (_analyze($ptree)|0);
     $$0 = $37;
     break;
    }
   }
   $14 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $14;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _cmd_usrmove($ptree,$str_move,$lasts) {
 $ptree = $ptree|0;
 $str_move = $str_move|0;
 $lasts = $lasts|0;
 var $$0 = 0, $$0$i = 0, $$pre = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0$lcssa = 0;
 var $i$02 = 0, $lelapsed$0 = 0, $move = 0, $or$cond = 0, $ptr = 0, $storemerge$i = 0, $storemerge$v$i = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer15 = sp;
 $vararg_buffer11 = sp + 24|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer3 = sp + 40|0;
 $vararg_buffer = sp + 8|0;
 $ptr = sp + 52|0;
 $move = sp + 48|0;
 $0 = HEAP32[34180920>>2]|0;
 $1 = $0 & 15;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = HEAP32[592>>2]|0;
  HEAP32[220526664>>2] = $3;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = $0 & 128;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = HEAP32[336>>2]|0;
  HEAP32[220526664>>2] = $6;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[120>>2]|0;
 $8 = (_strtok_r(0,$7,$lasts)|0);
 $9 = ($8|0)==(0|0);
 do {
  if ($9) {
   $lelapsed$0 = 0;
  } else {
   $10 = HEAP8[$8>>0]|0;
   $11 = ($10<<24>>24)==(84);
   if (!($11)) {
    $12 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $12;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $13 = (($8) + 1|0);
   $14 = (_strtol($13,$ptr,0)|0);
   $15 = HEAP32[$ptr>>2]|0;
   $16 = ($15|0)==($13|0);
   if (!($16)) {
    $17 = ($14|0)==(2147483647);
    $18 = ($14|0)<(1);
    $or$cond = $17 | $18;
    if (!($or$cond)) {
     $lelapsed$0 = $14;
     break;
    }
   }
   $19 = HEAP32[296>>2]|0;
   HEAP32[220526664>>2] = $19;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $20 = HEAP32[34180920>>2]|0;
 $21 = $20 & 96;
 $22 = ($21|0)==(0);
 if ($22) {
  $71 = (_interpret_CSA_move($ptree,$move,$str_move)|0);
  $72 = ($71|0)<(0);
  if ($72) {
   $$0 = $71;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[34180936>>2] = 0;
  $73 = HEAP32[$move>>2]|0;
  $74 = (_make_move_root($ptree,$73,15)|0);
  $75 = ($74|0)<(0);
  if ($75) {
   $76 = HEAP32[221099712>>2]|0;
   $77 = ($76|0)==(-1);
   $78 = HEAP32[34180936>>2]|0;
   $79 = ($78|0)!=(0);
   if ($77) {
    if (!($79)) {
     $$0 = $74;
     STACKTOP = sp;return ($$0|0);
    }
    $92 = (_str_CSA_move($78)|0);
    $93 = HEAP32[34184024>>2]|0;
    $94 = $93 ^ 1;
    $95 = (984 + ($94)|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96 << 24 >> 24;
    HEAP32[$vararg_buffer7>>2] = $97;
    $vararg_ptr10 = (($vararg_buffer7) + 4|0);
    HEAP32[$vararg_ptr10>>2] = $92;
    (_snprintf(220525640,512,221112032,$vararg_buffer7)|0);
    HEAP32[220526664>>2] = 220525640;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   if ($79) {
    $80 = (_str_CSA_move($78)|0);
    $81 = HEAP32[221099712>>2]|0;
    $82 = HEAP32[34184024>>2]|0;
    $83 = $82 ^ 1;
    $84 = (984 + ($83)|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = $85 << 24 >> 24;
    HEAP32[$vararg_buffer3>>2] = $86;
    $vararg_ptr6 = (($vararg_buffer3) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $80;
    $87 = (_sckt_out($81,221112024,$vararg_buffer3)|0);
    $88 = ($87|0)<(0);
    if ($88) {
     $$0 = $87;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $89 = HEAP32[34180920>>2]|0;
   $90 = $89 & 96;
   $91 = ($90|0)==(0);
   $storemerge$v$i = $91 ? 8 : 1024;
   $storemerge$i = $storemerge$v$i | $89;
   $$0$i = $91 ? 1 : 2;
   HEAP32[34180920>>2] = $storemerge$i;
   $$0 = $$0$i;
   STACKTOP = sp;return ($$0|0);
  }
  $98 = ($lelapsed$0|0)==(0);
  if (!($98)) {
   $99 = HEAP32[34184024>>2]|0;
   $100 = $99 ^ 1;
   _adjust_time($lelapsed$0,$100);
  }
  $101 = HEAP32[34180984>>2]|0;
  $102 = HEAP32[34180992>>2]|0;
  HEAP32[$vararg_buffer11>>2] = $101;
  $vararg_ptr14 = (($vararg_buffer11) + 4|0);
  HEAP32[$vararg_ptr14>>2] = $102;
  _out(221111896,$vararg_buffer11);
  $103 = HEAP32[221099712>>2]|0;
  $104 = ($103|0)==(-1);
  if (!($104)) {
   $105 = HEAP32[34180920>>2]|0;
   $106 = $105 & 1;
   $107 = ($106|0)==(0);
   if (!($107)) {
    $108 = (_sckt_out($103,221112056,$vararg_buffer15)|0);
    $109 = ($108|0)<(0);
    if ($109) {
     $$0 = $108;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
  $110 = HEAP32[34180920>>2]|0;
  $111 = $110 & 15;
  $112 = ($111|0)==(0);
  if ($112) {
   $113 = (_com_turn_start($ptree,0)|0);
   $114 = ($113|0)<(0);
   if ($114) {
    $$0 = $113;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $23 = HEAP32[34183976>>2]|0;
  $24 = ($23|0)>(0);
  L22: do {
   if ($24) {
    $i$02 = 0;
    while(1) {
     $27 = (34181176 + ($i$02<<2)|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (_str_CSA_move($28)|0);
     $30 = (_strcmp($str_move,$29)|0);
     $31 = ($30|0)==(0);
     $26 = (($i$02) + 1)|0;
     $$pre = HEAP32[34183976>>2]|0;
     if ($31) {
      $33 = $$pre;$i$0$lcssa = $i$02;
      break L22;
     }
     $25 = ($26|0)<($$pre|0);
     if ($25) {
      $i$02 = $26;
     } else {
      $33 = $$pre;$i$0$lcssa = $26;
      break;
     }
    }
   } else {
    $33 = $23;$i$0$lcssa = 0;
   }
  } while(0);
  $32 = ($i$0$lcssa|0)==($33|0);
  if ($32) {
   $34 = HEAP32[221099712>>2]|0;
   $35 = ($34|0)==(-1);
   if (!($35)) {
    $36 = HEAP32[34180920>>2]|0;
    $37 = $36 & 128;
    $38 = ($37|0)==(0);
    if (!($38)) {
     $39 = HEAP32[336>>2]|0;
     HEAP32[220526664>>2] = $39;
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    $40 = $36 & 96;
    $41 = ($40|0)==(0);
    if (!($41)) {
     $42 = $36 | 1024;
     HEAP32[34180920>>2] = $42;
     $$0 = 2;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $43 = HEAP32[432>>2]|0;
   HEAP32[220526664>>2] = $43;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $44 = HEAP32[34180920>>2]|0;
  $45 = $44 & 32;
  $46 = ($45|0)==(0);
  do {
   if ($46) {
    $47 = HEAP32[34181088>>2]|0;
    $48 = (_str_CSA_move($47)|0);
    $49 = (_strcmp($str_move,$48)|0);
    $50 = ($49|0)==(0);
    if (!($50)) {
     $$pre9 = HEAP32[34180920>>2]|0;
     $52 = $$pre9;
     break;
    }
    $53 = HEAP32[34184024>>2]|0;
    $54 = $53 ^ 1;
    $55 = (_update_time($54)|0);
    $56 = ($55|0)<(0);
    if ($56) {
     $$0 = $55;
     STACKTOP = sp;return ($$0|0);
    }
    $57 = ($lelapsed$0|0)==(0);
    if (!($57)) {
     $58 = HEAP32[34184024>>2]|0;
     $59 = $58 ^ 1;
     _adjust_time($lelapsed$0,$59);
    }
    $60 = HEAP32[34181088>>2]|0;
    _out_CSA($ptree,33556568,$60);
    $61 = HEAP32[34180920>>2]|0;
    $62 = $61 & -193;
    $63 = $62 | 128;
    HEAP32[34180920>>2] = $63;
    $64 = HEAP32[34184024>>2]|0;
    _set_search_limit_time($64);
    $65 = HEAP32[34181048>>2]|0;
    $66 = HEAP32[34181040>>2]|0;
    $67 = (($65) - ($66))|0;
    $68 = (_str_time_symple($67)|0);
    $69 = HEAP32[34180984>>2]|0;
    $70 = HEAP32[34180992>>2]|0;
    HEAP32[$vararg_buffer>>2] = $68;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $69;
    $vararg_ptr2 = (($vararg_buffer) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $70;
    _out(221111960,$vararg_buffer);
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $52 = $44;
   }
  } while(0);
  HEAP32[34181088>>2] = -33554432;
  $51 = $52 | 1024;
  HEAP32[34180920>>2] = $51;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _cmd_resign($ptree,$lasts) {
 $ptree = $ptree|0;
 $lasts = $lasts|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ptr = sp;
 $0 = HEAP32[120>>2]|0;
 $1 = (_strtok_r(0,$0,$lasts)|0);
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   label = 3;
  } else {
   $3 = HEAP8[$1>>0]|0;
   $4 = ($3<<24>>24)==(84);
   if ($4) {
    label = 3;
   } else {
    $16 = (_strtol($1,$ptr,0)|0);
    $17 = HEAP32[$ptr>>2]|0;
    $18 = ($17|0)==($1|0);
    if (!($18)) {
     $19 = ($16|0)==(2147483647);
     $20 = ($16|0)<(174);
     $or$cond = $19 | $20;
     if (!($or$cond)) {
      HEAP32[34184160>>2] = $16;
      $$0 = 1;
      break;
     }
    }
    $21 = HEAP32[296>>2]|0;
    HEAP32[220526664>>2] = $21;
    $$0 = -2;
   }
  }
 } while(0);
 do {
  if ((label|0) == 3) {
   $5 = HEAP32[34180920>>2]|0;
   $6 = $5 & 128;
   $7 = ($6|0)==(0);
   if (!($7)) {
    $8 = HEAP32[336>>2]|0;
    HEAP32[220526664>>2] = $8;
    $$0 = -2;
    break;
   }
   $9 = $5 & 96;
   $10 = ($9|0)==(0);
   if (!($10)) {
    $11 = $5 | 1024;
    HEAP32[34180920>>2] = $11;
    $$0 = 2;
    break;
   }
   $12 = $5 & 15;
   $13 = ($12|0)==(0);
   if ($13) {
    $14 = $5 | 2;
    HEAP32[34180920>>2] = $14;
    $15 = HEAP32[34184024>>2]|0;
    (_update_time($15)|0);
    _out_CSA($ptree,33556568,-16777216);
    $$0 = 1;
   } else {
    $$0 = 1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ini_game($ptree,$pmin_posi,$flag,$str_name1,$str_name2) {
 $ptree = $ptree|0;
 $pmin_posi = $pmin_posi|0;
 $flag = $flag|0;
 $str_name1 = $str_name1|0;
 $str_name2 = $str_name2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $sq$01 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[221111344>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  HEAP32[221111344>>2] = 0;
  _ehash_clear();
  $2 = (_ini_trans_table()|0);
  $3 = ($2|0)<(0);
  if ($3) {
   $$0 = $2;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $4 = $flag & 2;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = (_open_history($str_name1,$str_name2)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = $flag & 64;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[34181128>>2] = 396;
  HEAP32[34181136>>2] = 396;
  HEAP32[34181144>>2] = 396;
  HEAP32[34181152>>2] = 396;
  HEAP32[34181160>>2] = 396;
  HEAP32[34181168>>2] = 396;
 }
 $10 = (($ptree) + 512|0);
 $11 = (($pmin_posi) + 9|0);
 dest=$10+0|0; src=$11+0|0; stop=dest+81|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $12 = (($ptree) + 76980|0);
 $13 = (($ptree) + 2656|0);
 HEAP32[$13>>2] = $12;
 $14 = (($ptree) + 572072|0);
 HEAP8[$14>>0] = 0;
 $15 = (($ptree) + 572073|0);
 HEAP8[$15>>0] = 0;
 $16 = (($ptree) + 572204|0);
 HEAP32[$16>>2] = 0;
 $17 = (($pmin_posi) + 8|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 << 24 >> 24;
 HEAP32[34184024>>2] = $19;
 $20 = HEAP32[$pmin_posi>>2]|0;
 $21 = (($ptree) + 500|0);
 HEAP32[$21>>2] = $20;
 $22 = (($pmin_posi) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($ptree) + 504|0);
 HEAP32[$24>>2] = $23;
 $25 = (($ptree) + 508|0);
 HEAP32[$25>>2] = 0;
 $26 = (($ptree) + 16|0);
 $27 = (($ptree) + 12|0);
 $28 = (($ptree) + 8|0);
 $29 = (($ptree) + 364|0);
 $30 = (($ptree) + 360|0);
 $31 = (($ptree) + 356|0);
 $32 = (($ptree) + 196|0);
 $33 = (($ptree) + 192|0);
 $34 = (($ptree) + 188|0);
 $35 = (($ptree) + 220|0);
 $36 = (($ptree) + 216|0);
 $37 = (($ptree) + 212|0);
 $38 = (($ptree) + 244|0);
 $39 = (($ptree) + 240|0);
 $40 = (($ptree) + 236|0);
 $41 = (($ptree) + 388|0);
 $42 = (($ptree) + 384|0);
 $43 = (($ptree) + 380|0);
 $44 = (($ptree) + 268|0);
 $45 = (($ptree) + 264|0);
 $46 = (($ptree) + 260|0);
 $47 = (($ptree) + 292|0);
 $48 = (($ptree) + 288|0);
 $49 = (($ptree) + 284|0);
 $50 = (($ptree) + 412|0);
 $51 = (($ptree) + 408|0);
 $52 = (($ptree) + 404|0);
 $53 = (($ptree) + 436|0);
 $54 = (($ptree) + 432|0);
 $55 = (($ptree) + 428|0);
 $56 = (($ptree) + 460|0);
 $57 = (($ptree) + 456|0);
 $58 = (($ptree) + 452|0);
 $59 = (($ptree) + 484|0);
 $60 = (($ptree) + 480|0);
 $61 = (($ptree) + 476|0);
 $62 = (($ptree) + 316|0);
 $63 = (($ptree) + 312|0);
 $64 = (($ptree) + 308|0);
 $65 = (($ptree) + 340|0);
 $66 = (($ptree) + 336|0);
 $67 = (($ptree) + 332|0);
 $68 = (($ptree) + 100|0);
 $69 = (($ptree) + 96|0);
 $70 = (($ptree) + 92|0);
 $71 = (($ptree) + 28|0);
 $72 = (($ptree) + 24|0);
 $73 = (($ptree) + 20|0);
 $74 = (($ptree) + 376|0);
 $75 = (($ptree) + 372|0);
 $76 = (($ptree) + 368|0);
 $77 = (($ptree) + 208|0);
 $78 = (($ptree) + 204|0);
 $79 = (($ptree) + 200|0);
 $80 = (($ptree) + 232|0);
 $81 = (($ptree) + 228|0);
 $82 = (($ptree) + 224|0);
 $83 = (($ptree) + 256|0);
 $84 = (($ptree) + 252|0);
 $85 = (($ptree) + 248|0);
 $86 = (($ptree) + 400|0);
 $87 = (($ptree) + 396|0);
 $88 = (($ptree) + 392|0);
 $89 = (($ptree) + 280|0);
 $90 = (($ptree) + 276|0);
 $91 = (($ptree) + 272|0);
 $92 = (($ptree) + 304|0);
 $93 = (($ptree) + 300|0);
 $94 = (($ptree) + 296|0);
 $95 = (($ptree) + 424|0);
 $96 = (($ptree) + 420|0);
 $97 = (($ptree) + 416|0);
 $98 = (($ptree) + 448|0);
 $99 = (($ptree) + 444|0);
 $100 = (($ptree) + 440|0);
 $101 = (($ptree) + 472|0);
 $102 = (($ptree) + 468|0);
 $103 = (($ptree) + 464|0);
 $104 = (($ptree) + 496|0);
 $105 = (($ptree) + 492|0);
 $106 = (($ptree) + 488|0);
 $107 = (($ptree) + 328|0);
 $108 = (($ptree) + 324|0);
 $109 = (($ptree) + 320|0);
 $110 = (($ptree) + 352|0);
 $111 = (($ptree) + 348|0);
 $112 = (($ptree) + 344|0);
 $113 = (($ptree) + 112|0);
 $114 = (($ptree) + 108|0);
 $115 = (($ptree) + 104|0);
 $116 = (($ptree) + 40|0);
 $117 = (($ptree) + 36|0);
 $118 = (($ptree) + 32|0);
 $119 = (($ptree) + 64|0);
 $120 = (($ptree) + 60|0);
 $121 = (($ptree) + 56|0);
 $122 = (($ptree) + 52|0);
 $123 = (($ptree) + 48|0);
 $124 = (($ptree) + 44|0);
 $125 = (($ptree) + 593|0);
 $126 = (($ptree) + 594|0);
 dest=$28+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 ;HEAP32[$70+0>>2]=0|0;HEAP32[$70+4>>2]=0|0;HEAP32[$70+8>>2]=0|0;HEAP32[$70+12>>2]=0|0;HEAP32[$70+16>>2]=0|0;HEAP32[$70+20>>2]=0|0;
 _memset(($34|0),0,312)|0;
 $146 = 0;$150 = 0;$154 = 0;$158 = 0;$162 = 0;$166 = 0;$170 = 0;$174 = 0;$178 = 0;$306 = 0;$308 = 0;$310 = 0;$312 = 0;$314 = 0;$316 = 0;$318 = 0;$320 = 0;$322 = 0;$324 = 0;$326 = 0;$328 = 0;$330 = 0;$332 = 0;$334 = 0;$337 = 0;$339 = 0;$341 = 0;$343 = 0;$345 = 0;$347 = 0;$349 = 0;$351 = 0;$353 = 0;$355 = 0;$357 = 0;$359 = 0;$361 = 0;$363 = 0;$365 = 0;$367 = 0;$369 = 0;$371 = 0;$373 = 0;$375 = 0;$377 = 0;$sq$01 = 0;
 while(1) {
  $127 = ((($ptree) + ($sq$01)|0) + 512|0);
  $128 = HEAP8[$127>>0]|0;
  $129 = $128 << 24 >> 24;
  $130 = ($128<<24>>24)>(0);
  L14: do {
   if ($130) {
    $131 = (34156304 + (($sq$01*12)|0)|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = HEAP32[$28>>2]|0;
    $134 = $133 ^ $132;
    HEAP32[$28>>2] = $134;
    $135 = ((34156304 + (($sq$01*12)|0)|0) + 4|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = HEAP32[$27>>2]|0;
    $138 = $137 ^ $136;
    HEAP32[$27>>2] = $138;
    $139 = ((34156304 + (($sq$01*12)|0)|0) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = HEAP32[$26>>2]|0;
    $142 = $141 ^ $140;
    HEAP32[$26>>2] = $142;
    $143 = (34157280 + (($sq$01*12)|0)|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = $146 ^ $144;
    HEAP32[$118>>2] = $145;
    $147 = ((34157280 + (($sq$01*12)|0)|0) + 4|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = $150 ^ $148;
    HEAP32[$117>>2] = $149;
    $151 = ((34157280 + (($sq$01*12)|0)|0) + 8|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = $154 ^ $152;
    HEAP32[$116>>2] = $153;
    $155 = (34159232 + (($sq$01*12)|0)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = $158 ^ $156;
    HEAP32[$121>>2] = $157;
    $159 = ((34159232 + (($sq$01*12)|0)|0) + 4|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = $162 ^ $160;
    HEAP32[$120>>2] = $161;
    $163 = ((34159232 + (($sq$01*12)|0)|0) + 8|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = $166 ^ $164;
    HEAP32[$119>>2] = $165;
    $167 = (34158256 + (($sq$01*12)|0)|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = $170 ^ $168;
    HEAP32[$124>>2] = $169;
    $171 = ((34158256 + (($sq$01*12)|0)|0) + 4|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = $174 ^ $172;
    HEAP32[$123>>2] = $173;
    $175 = ((34158256 + (($sq$01*12)|0)|0) + 8|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = $178 ^ $176;
    HEAP32[$122>>2] = $177;
    do {
     switch ($129|0) {
     case 15:  {
      $216 = HEAP32[$67>>2]|0;
      $217 = $216 ^ $132;
      HEAP32[$67>>2] = $217;
      $218 = HEAP32[$66>>2]|0;
      $219 = $218 ^ $136;
      HEAP32[$66>>2] = $219;
      $220 = HEAP32[$65>>2]|0;
      $221 = $220 ^ $140;
      HEAP32[$65>>2] = $221;
      $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $177;$819 = $173;$820 = $169;$821 = $165;$822 = $161;$823 = $157;$824 = $153;$825 = $149;$826 = $145;
      break L14;
      break;
     }
     case 14:  {
      $222 = HEAP32[$64>>2]|0;
      $223 = $222 ^ $132;
      HEAP32[$64>>2] = $223;
      $224 = HEAP32[$63>>2]|0;
      $225 = $224 ^ $136;
      HEAP32[$63>>2] = $225;
      $226 = HEAP32[$62>>2]|0;
      $227 = $226 ^ $140;
      HEAP32[$62>>2] = $227;
      $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $177;$819 = $173;$820 = $169;$821 = $165;$822 = $161;$823 = $157;$824 = $153;$825 = $149;$826 = $145;
      break L14;
      break;
     }
     case 5:  {
      $228 = HEAP32[$43>>2]|0;
      $229 = $228 ^ $132;
      HEAP32[$43>>2] = $229;
      $230 = HEAP32[$42>>2]|0;
      $231 = $230 ^ $136;
      HEAP32[$42>>2] = $231;
      $232 = HEAP32[$41>>2]|0;
      $233 = $232 ^ $140;
      HEAP32[$41>>2] = $233;
      $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $177;$819 = $173;$820 = $169;$821 = $165;$822 = $161;$823 = $157;$824 = $153;$825 = $149;$826 = $145;
      break L14;
      break;
     }
     case 6:  {
      $209 = HEAP32[$46>>2]|0;
      $210 = $209 ^ $132;
      HEAP32[$46>>2] = $210;
      $211 = HEAP32[$45>>2]|0;
      $212 = $211 ^ $136;
      HEAP32[$45>>2] = $212;
      $213 = HEAP32[$44>>2]|0;
      $214 = $213 ^ $140;
      HEAP32[$44>>2] = $214;
      $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $177;$819 = $173;$820 = $169;$821 = $165;$822 = $161;$823 = $157;$824 = $153;$825 = $149;$826 = $145;
      break L14;
      break;
     }
     case 8:  {
      $215 = $sq$01&255;
      HEAP8[$125>>0] = $215;
      $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $177;$819 = $173;$820 = $169;$821 = $165;$822 = $161;$823 = $157;$824 = $153;$825 = $149;$826 = $145;
      break L14;
      break;
     }
     case 1:  {
      $179 = HEAP32[$31>>2]|0;
      $180 = $179 ^ $132;
      HEAP32[$31>>2] = $180;
      $181 = HEAP32[$30>>2]|0;
      $182 = $181 ^ $136;
      HEAP32[$30>>2] = $182;
      $183 = HEAP32[$29>>2]|0;
      $184 = $183 ^ $140;
      HEAP32[$29>>2] = $184;
      $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $177;$819 = $173;$820 = $169;$821 = $165;$822 = $161;$823 = $157;$824 = $153;$825 = $149;$826 = $145;
      break L14;
      break;
     }
     case 2:  {
      $185 = HEAP32[$34>>2]|0;
      $186 = $185 ^ $132;
      HEAP32[$34>>2] = $186;
      $187 = HEAP32[$33>>2]|0;
      $188 = $187 ^ $136;
      HEAP32[$33>>2] = $188;
      $189 = HEAP32[$32>>2]|0;
      $190 = $189 ^ $140;
      HEAP32[$32>>2] = $190;
      $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $177;$819 = $173;$820 = $169;$821 = $165;$822 = $161;$823 = $157;$824 = $153;$825 = $149;$826 = $145;
      break L14;
      break;
     }
     case 3:  {
      $191 = HEAP32[$37>>2]|0;
      $192 = $191 ^ $132;
      HEAP32[$37>>2] = $192;
      $193 = HEAP32[$36>>2]|0;
      $194 = $193 ^ $136;
      HEAP32[$36>>2] = $194;
      $195 = HEAP32[$35>>2]|0;
      $196 = $195 ^ $140;
      HEAP32[$35>>2] = $196;
      $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $177;$819 = $173;$820 = $169;$821 = $165;$822 = $161;$823 = $157;$824 = $153;$825 = $149;$826 = $145;
      break L14;
      break;
     }
     case 4:  {
      $197 = HEAP32[$40>>2]|0;
      $198 = $197 ^ $132;
      HEAP32[$40>>2] = $198;
      $199 = HEAP32[$39>>2]|0;
      $200 = $199 ^ $136;
      HEAP32[$39>>2] = $200;
      $201 = HEAP32[$38>>2]|0;
      $202 = $201 ^ $140;
      HEAP32[$38>>2] = $202;
      $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $177;$819 = $173;$820 = $169;$821 = $165;$822 = $161;$823 = $157;$824 = $153;$825 = $149;$826 = $145;
      break L14;
      break;
     }
     case 7:  {
      $203 = HEAP32[$49>>2]|0;
      $204 = $203 ^ $132;
      HEAP32[$49>>2] = $204;
      $205 = HEAP32[$48>>2]|0;
      $206 = $205 ^ $136;
      HEAP32[$48>>2] = $206;
      $207 = HEAP32[$47>>2]|0;
      $208 = $207 ^ $140;
      HEAP32[$47>>2] = $208;
      $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $177;$819 = $173;$820 = $169;$821 = $165;$822 = $161;$823 = $157;$824 = $153;$825 = $149;$826 = $145;
      break L14;
      break;
     }
     case 9:  {
      $234 = HEAP32[$52>>2]|0;
      $235 = $234 ^ $132;
      HEAP32[$52>>2] = $235;
      $236 = HEAP32[$51>>2]|0;
      $237 = $236 ^ $136;
      HEAP32[$51>>2] = $237;
      $238 = HEAP32[$50>>2]|0;
      $239 = $238 ^ $140;
      HEAP32[$50>>2] = $239;
      $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $177;$819 = $173;$820 = $169;$821 = $165;$822 = $161;$823 = $157;$824 = $153;$825 = $149;$826 = $145;
      break L14;
      break;
     }
     case 10:  {
      $240 = HEAP32[$55>>2]|0;
      $241 = $240 ^ $132;
      HEAP32[$55>>2] = $241;
      $242 = HEAP32[$54>>2]|0;
      $243 = $242 ^ $136;
      HEAP32[$54>>2] = $243;
      $244 = HEAP32[$53>>2]|0;
      $245 = $244 ^ $140;
      HEAP32[$53>>2] = $245;
      $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $177;$819 = $173;$820 = $169;$821 = $165;$822 = $161;$823 = $157;$824 = $153;$825 = $149;$826 = $145;
      break L14;
      break;
     }
     case 11:  {
      $246 = HEAP32[$58>>2]|0;
      $247 = $246 ^ $132;
      HEAP32[$58>>2] = $247;
      $248 = HEAP32[$57>>2]|0;
      $249 = $248 ^ $136;
      HEAP32[$57>>2] = $249;
      $250 = HEAP32[$56>>2]|0;
      $251 = $250 ^ $140;
      HEAP32[$56>>2] = $251;
      $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $177;$819 = $173;$820 = $169;$821 = $165;$822 = $161;$823 = $157;$824 = $153;$825 = $149;$826 = $145;
      break L14;
      break;
     }
     case 12:  {
      $252 = HEAP32[$61>>2]|0;
      $253 = $252 ^ $132;
      HEAP32[$61>>2] = $253;
      $254 = HEAP32[$60>>2]|0;
      $255 = $254 ^ $136;
      HEAP32[$60>>2] = $255;
      $256 = HEAP32[$59>>2]|0;
      $257 = $256 ^ $140;
      HEAP32[$59>>2] = $257;
      $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $177;$819 = $173;$820 = $169;$821 = $165;$822 = $161;$823 = $157;$824 = $153;$825 = $149;$826 = $145;
      break L14;
      break;
     }
     default: {
      $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $177;$819 = $173;$820 = $169;$821 = $165;$822 = $161;$823 = $157;$824 = $153;$825 = $149;$826 = $145;
      break L14;
     }
     }
    } while(0);
   } else {
    $258 = ($128<<24>>24)<(0);
    if ($258) {
     $259 = (34156304 + (($sq$01*12)|0)|0);
     $260 = HEAP32[$259>>2]|0;
     $261 = HEAP32[$73>>2]|0;
     $262 = $261 ^ $260;
     HEAP32[$73>>2] = $262;
     $263 = ((34156304 + (($sq$01*12)|0)|0) + 4|0);
     $264 = HEAP32[$263>>2]|0;
     $265 = HEAP32[$72>>2]|0;
     $266 = $265 ^ $264;
     HEAP32[$72>>2] = $266;
     $267 = ((34156304 + (($sq$01*12)|0)|0) + 8|0);
     $268 = HEAP32[$267>>2]|0;
     $269 = HEAP32[$71>>2]|0;
     $270 = $269 ^ $268;
     HEAP32[$71>>2] = $270;
     $271 = (34157280 + (($sq$01*12)|0)|0);
     $272 = HEAP32[$271>>2]|0;
     $273 = $146 ^ $272;
     HEAP32[$118>>2] = $273;
     $274 = ((34157280 + (($sq$01*12)|0)|0) + 4|0);
     $275 = HEAP32[$274>>2]|0;
     $276 = $150 ^ $275;
     HEAP32[$117>>2] = $276;
     $277 = ((34157280 + (($sq$01*12)|0)|0) + 8|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = $154 ^ $278;
     HEAP32[$116>>2] = $279;
     $280 = (34159232 + (($sq$01*12)|0)|0);
     $281 = HEAP32[$280>>2]|0;
     $282 = $158 ^ $281;
     HEAP32[$121>>2] = $282;
     $283 = ((34159232 + (($sq$01*12)|0)|0) + 4|0);
     $284 = HEAP32[$283>>2]|0;
     $285 = $162 ^ $284;
     HEAP32[$120>>2] = $285;
     $286 = ((34159232 + (($sq$01*12)|0)|0) + 8|0);
     $287 = HEAP32[$286>>2]|0;
     $288 = $166 ^ $287;
     HEAP32[$119>>2] = $288;
     $289 = (34158256 + (($sq$01*12)|0)|0);
     $290 = HEAP32[$289>>2]|0;
     $291 = $170 ^ $290;
     HEAP32[$124>>2] = $291;
     $292 = ((34158256 + (($sq$01*12)|0)|0) + 4|0);
     $293 = HEAP32[$292>>2]|0;
     $294 = $174 ^ $293;
     HEAP32[$123>>2] = $294;
     $295 = ((34158256 + (($sq$01*12)|0)|0) + 8|0);
     $296 = HEAP32[$295>>2]|0;
     $297 = $178 ^ $296;
     HEAP32[$122>>2] = $297;
     $298 = (0 - ($129))|0;
     do {
      switch ($298|0) {
      case 1:  {
       $299 = HEAP32[$76>>2]|0;
       $300 = $299 ^ $260;
       HEAP32[$76>>2] = $300;
       $301 = HEAP32[$75>>2]|0;
       $302 = $301 ^ $264;
       HEAP32[$75>>2] = $302;
       $303 = HEAP32[$74>>2]|0;
       $304 = $303 ^ $268;
       HEAP32[$74>>2] = $304;
       $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $297;$819 = $294;$820 = $291;$821 = $288;$822 = $285;$823 = $282;$824 = $279;$825 = $276;$826 = $273;
       break L14;
       break;
      }
      case 8:  {
       $335 = $sq$01&255;
       HEAP8[$126>>0] = $335;
       $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $297;$819 = $294;$820 = $291;$821 = $288;$822 = $285;$823 = $282;$824 = $279;$825 = $276;$826 = $273;
       break L14;
       break;
      }
      case 2:  {
       $305 = $306 ^ $260;
       HEAP32[$79>>2] = $305;
       $307 = $308 ^ $264;
       HEAP32[$78>>2] = $307;
       $309 = $310 ^ $268;
       HEAP32[$77>>2] = $309;
       $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $309;$816 = $307;$817 = $305;$818 = $297;$819 = $294;$820 = $291;$821 = $288;$822 = $285;$823 = $282;$824 = $279;$825 = $276;$826 = $273;
       break L14;
       break;
      }
      case 3:  {
       $311 = $312 ^ $260;
       HEAP32[$82>>2] = $311;
       $313 = $314 ^ $264;
       HEAP32[$81>>2] = $313;
       $315 = $316 ^ $268;
       HEAP32[$80>>2] = $315;
       $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $315;$813 = $313;$814 = $311;$815 = $310;$816 = $308;$817 = $306;$818 = $297;$819 = $294;$820 = $291;$821 = $288;$822 = $285;$823 = $282;$824 = $279;$825 = $276;$826 = $273;
       break L14;
       break;
      }
      case 4:  {
       $317 = $318 ^ $260;
       HEAP32[$85>>2] = $317;
       $319 = $320 ^ $264;
       HEAP32[$84>>2] = $319;
       $321 = $322 ^ $268;
       HEAP32[$83>>2] = $321;
       $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $321;$810 = $319;$811 = $317;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $297;$819 = $294;$820 = $291;$821 = $288;$822 = $285;$823 = $282;$824 = $279;$825 = $276;$826 = $273;
       break L14;
       break;
      }
      case 7:  {
       $323 = $324 ^ $260;
       HEAP32[$94>>2] = $323;
       $325 = $326 ^ $264;
       HEAP32[$93>>2] = $325;
       $327 = $328 ^ $268;
       HEAP32[$92>>2] = $327;
       $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $327;$807 = $325;$808 = $323;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $297;$819 = $294;$820 = $291;$821 = $288;$822 = $285;$823 = $282;$824 = $279;$825 = $276;$826 = $273;
       break L14;
       break;
      }
      case 6:  {
       $329 = $330 ^ $260;
       HEAP32[$91>>2] = $329;
       $331 = $332 ^ $264;
       HEAP32[$90>>2] = $331;
       $333 = $334 ^ $268;
       HEAP32[$89>>2] = $333;
       $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $333;$804 = $331;$805 = $329;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $297;$819 = $294;$820 = $291;$821 = $288;$822 = $285;$823 = $282;$824 = $279;$825 = $276;$826 = $273;
       break L14;
       break;
      }
      case 15:  {
       $336 = $337 ^ $260;
       HEAP32[$112>>2] = $336;
       $338 = $339 ^ $264;
       HEAP32[$111>>2] = $338;
       $340 = $341 ^ $268;
       HEAP32[$110>>2] = $340;
       $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $340;$801 = $338;$802 = $336;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $297;$819 = $294;$820 = $291;$821 = $288;$822 = $285;$823 = $282;$824 = $279;$825 = $276;$826 = $273;
       break L14;
       break;
      }
      case 14:  {
       $342 = $343 ^ $260;
       HEAP32[$109>>2] = $342;
       $344 = $345 ^ $264;
       HEAP32[$108>>2] = $344;
       $346 = $347 ^ $268;
       HEAP32[$107>>2] = $346;
       $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $346;$798 = $344;$799 = $342;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $297;$819 = $294;$820 = $291;$821 = $288;$822 = $285;$823 = $282;$824 = $279;$825 = $276;$826 = $273;
       break L14;
       break;
      }
      case 5:  {
       $348 = $349 ^ $260;
       HEAP32[$88>>2] = $348;
       $350 = $351 ^ $264;
       HEAP32[$87>>2] = $350;
       $352 = $353 ^ $268;
       HEAP32[$86>>2] = $352;
       $448 = $348;$449 = $355;$451 = $350;$452 = $357;$454 = $352;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $297;$819 = $294;$820 = $291;$821 = $288;$822 = $285;$823 = $282;$824 = $279;$825 = $276;$826 = $273;
       break L14;
       break;
      }
      case 9:  {
       $354 = $355 ^ $260;
       HEAP32[$97>>2] = $354;
       $356 = $357 ^ $264;
       HEAP32[$96>>2] = $356;
       $358 = $359 ^ $268;
       HEAP32[$95>>2] = $358;
       $448 = $349;$449 = $354;$451 = $351;$452 = $356;$454 = $353;$455 = $358;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $297;$819 = $294;$820 = $291;$821 = $288;$822 = $285;$823 = $282;$824 = $279;$825 = $276;$826 = $273;
       break L14;
       break;
      }
      case 10:  {
       $360 = $361 ^ $260;
       HEAP32[$100>>2] = $360;
       $362 = $363 ^ $264;
       HEAP32[$99>>2] = $362;
       $364 = $365 ^ $268;
       HEAP32[$98>>2] = $364;
       $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $360;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $364;$796 = $362;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $297;$819 = $294;$820 = $291;$821 = $288;$822 = $285;$823 = $282;$824 = $279;$825 = $276;$826 = $273;
       break L14;
       break;
      }
      case 11:  {
       $366 = $367 ^ $260;
       HEAP32[$103>>2] = $366;
       $368 = $369 ^ $264;
       HEAP32[$102>>2] = $368;
       $370 = $371 ^ $268;
       HEAP32[$101>>2] = $370;
       $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $370;$793 = $368;$794 = $366;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $297;$819 = $294;$820 = $291;$821 = $288;$822 = $285;$823 = $282;$824 = $279;$825 = $276;$826 = $273;
       break L14;
       break;
      }
      case 12:  {
       $372 = $373 ^ $260;
       HEAP32[$106>>2] = $372;
       $374 = $375 ^ $264;
       HEAP32[$105>>2] = $374;
       $376 = $377 ^ $268;
       HEAP32[$104>>2] = $376;
       $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $376;$790 = $374;$791 = $372;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $297;$819 = $294;$820 = $291;$821 = $288;$822 = $285;$823 = $282;$824 = $279;$825 = $276;$826 = $273;
       break L14;
       break;
      }
      default: {
       $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $297;$819 = $294;$820 = $291;$821 = $288;$822 = $285;$823 = $282;$824 = $279;$825 = $276;$826 = $273;
       break L14;
      }
      }
     } while(0);
    } else {
     $448 = $349;$449 = $355;$451 = $351;$452 = $357;$454 = $353;$455 = $359;$457 = $361;$789 = $377;$790 = $375;$791 = $373;$792 = $371;$793 = $369;$794 = $367;$795 = $365;$796 = $363;$797 = $347;$798 = $345;$799 = $343;$800 = $341;$801 = $339;$802 = $337;$803 = $334;$804 = $332;$805 = $330;$806 = $328;$807 = $326;$808 = $324;$809 = $322;$810 = $320;$811 = $318;$812 = $316;$813 = $314;$814 = $312;$815 = $310;$816 = $308;$817 = $306;$818 = $178;$819 = $174;$820 = $170;$821 = $166;$822 = $162;$823 = $158;$824 = $154;$825 = $150;$826 = $146;
    }
   }
  } while(0);
  $378 = (($sq$01) + 1)|0;
  $exitcond = ($378|0)==(81);
  if ($exitcond) {
   break;
  } else {
   $146 = $826;$150 = $825;$154 = $824;$158 = $823;$162 = $822;$166 = $821;$170 = $820;$174 = $819;$178 = $818;$306 = $817;$308 = $816;$310 = $815;$312 = $814;$314 = $813;$316 = $812;$318 = $811;$320 = $810;$322 = $809;$324 = $808;$326 = $807;$328 = $806;$330 = $805;$332 = $804;$334 = $803;$337 = $802;$339 = $801;$341 = $800;$343 = $799;$345 = $798;$347 = $797;$349 = $448;$351 = $451;$353 = $454;$355 = $449;$357 = $452;$359 = $455;$361 = $457;$363 = $796;$365 = $795;$367 = $794;$369 = $793;$371 = $792;$373 = $791;$375 = $790;$377 = $789;$sq$01 = $378;
  }
 }
 $379 = HEAP32[$52>>2]|0;
 $380 = HEAP32[$43>>2]|0;
 $381 = $380 | $379;
 $382 = HEAP32[$51>>2]|0;
 $383 = HEAP32[$42>>2]|0;
 $384 = $383 | $382;
 $385 = HEAP32[$50>>2]|0;
 $386 = HEAP32[$41>>2]|0;
 $387 = $386 | $385;
 $388 = HEAP32[$55>>2]|0;
 $389 = $381 | $388;
 $390 = HEAP32[$54>>2]|0;
 $391 = $384 | $390;
 $392 = HEAP32[$53>>2]|0;
 $393 = $387 | $392;
 $394 = HEAP32[$58>>2]|0;
 $395 = $389 | $394;
 $396 = HEAP32[$57>>2]|0;
 $397 = $391 | $396;
 $398 = HEAP32[$56>>2]|0;
 $399 = $393 | $398;
 $400 = HEAP32[$61>>2]|0;
 $401 = $395 | $400;
 HEAP32[$70>>2] = $401;
 $402 = HEAP32[$60>>2]|0;
 $403 = $397 | $402;
 HEAP32[$69>>2] = $403;
 $404 = HEAP32[$59>>2]|0;
 $405 = $399 | $404;
 HEAP32[$68>>2] = $405;
 $406 = HEAP32[$64>>2]|0;
 $407 = HEAP32[$67>>2]|0;
 $408 = $407 | $406;
 $409 = (($ptree) + 68|0);
 $410 = HEAP32[$63>>2]|0;
 $411 = HEAP32[$66>>2]|0;
 $412 = $411 | $410;
 $413 = (($ptree) + 72|0);
 $414 = HEAP32[$62>>2]|0;
 $415 = HEAP32[$65>>2]|0;
 $416 = $415 | $414;
 $417 = (($ptree) + 76|0);
 $418 = HEAP8[$125>>0]|0;
 $419 = $418&255;
 $420 = (34156304 + (($419*12)|0)|0);
 $421 = HEAP32[$420>>2]|0;
 $422 = $408 | $421;
 HEAP32[$409>>2] = $422;
 $423 = ((34156304 + (($419*12)|0)|0) + 4|0);
 $424 = HEAP32[$423>>2]|0;
 $425 = $412 | $424;
 HEAP32[$413>>2] = $425;
 $426 = ((34156304 + (($419*12)|0)|0) + 8|0);
 $427 = HEAP32[$426>>2]|0;
 $428 = $416 | $427;
 HEAP32[$417>>2] = $428;
 $429 = HEAP32[$46>>2]|0;
 $430 = $406 | $429;
 $431 = (($ptree) + 116|0);
 HEAP32[$431>>2] = $430;
 $432 = HEAP32[$45>>2]|0;
 $433 = $410 | $432;
 $434 = (($ptree) + 120|0);
 HEAP32[$434>>2] = $433;
 $435 = HEAP32[$44>>2]|0;
 $436 = $414 | $435;
 $437 = (($ptree) + 124|0);
 HEAP32[$437>>2] = $436;
 $438 = HEAP32[$49>>2]|0;
 $439 = $407 | $438;
 $440 = (($ptree) + 140|0);
 HEAP32[$440>>2] = $439;
 $441 = HEAP32[$48>>2]|0;
 $442 = $411 | $441;
 $443 = (($ptree) + 144|0);
 HEAP32[$443>>2] = $442;
 $444 = HEAP32[$47>>2]|0;
 $445 = $415 | $444;
 $446 = (($ptree) + 148|0);
 HEAP32[$446>>2] = $445;
 $447 = $448 | $449;
 $450 = $451 | $452;
 $453 = $454 | $455;
 $456 = $447 | $457;
 $458 = HEAP32[$99>>2]|0;
 $459 = $450 | $458;
 $460 = HEAP32[$98>>2]|0;
 $461 = $453 | $460;
 $462 = HEAP32[$103>>2]|0;
 $463 = $456 | $462;
 $464 = HEAP32[$102>>2]|0;
 $465 = $459 | $464;
 $466 = HEAP32[$101>>2]|0;
 $467 = $461 | $466;
 $468 = HEAP32[$106>>2]|0;
 $469 = $463 | $468;
 HEAP32[$115>>2] = $469;
 $470 = HEAP32[$105>>2]|0;
 $471 = $465 | $470;
 HEAP32[$114>>2] = $471;
 $472 = HEAP32[$104>>2]|0;
 $473 = $467 | $472;
 HEAP32[$113>>2] = $473;
 $474 = HEAP32[$109>>2]|0;
 $475 = HEAP32[$112>>2]|0;
 $476 = $475 | $474;
 $477 = (($ptree) + 80|0);
 $478 = HEAP32[$108>>2]|0;
 $479 = HEAP32[$111>>2]|0;
 $480 = $479 | $478;
 $481 = (($ptree) + 84|0);
 $482 = HEAP32[$107>>2]|0;
 $483 = HEAP32[$110>>2]|0;
 $484 = $483 | $482;
 $485 = (($ptree) + 88|0);
 $486 = HEAP8[$126>>0]|0;
 $487 = $486&255;
 $488 = (34156304 + (($487*12)|0)|0);
 $489 = HEAP32[$488>>2]|0;
 $490 = $476 | $489;
 HEAP32[$477>>2] = $490;
 $491 = ((34156304 + (($487*12)|0)|0) + 4|0);
 $492 = HEAP32[$491>>2]|0;
 $493 = $480 | $492;
 HEAP32[$481>>2] = $493;
 $494 = ((34156304 + (($487*12)|0)|0) + 8|0);
 $495 = HEAP32[$494>>2]|0;
 $496 = $484 | $495;
 HEAP32[$485>>2] = $496;
 $497 = HEAP32[$91>>2]|0;
 $498 = $474 | $497;
 $499 = (($ptree) + 128|0);
 HEAP32[$499>>2] = $498;
 $500 = HEAP32[$90>>2]|0;
 $501 = $478 | $500;
 $502 = (($ptree) + 132|0);
 HEAP32[$502>>2] = $501;
 $503 = HEAP32[$89>>2]|0;
 $504 = $482 | $503;
 $505 = (($ptree) + 136|0);
 HEAP32[$505>>2] = $504;
 $506 = HEAP32[$94>>2]|0;
 $507 = $475 | $506;
 $508 = (($ptree) + 152|0);
 HEAP32[$508>>2] = $507;
 $509 = HEAP32[$93>>2]|0;
 $510 = $479 | $509;
 $511 = (($ptree) + 156|0);
 HEAP32[$511>>2] = $510;
 $512 = HEAP32[$92>>2]|0;
 $513 = $483 | $512;
 $514 = (($ptree) + 160|0);
 HEAP32[$514>>2] = $513;
 $515 = HEAP32[$31>>2]|0;
 $516 = $515 << 9;
 $517 = $516 & 134217216;
 $518 = (($ptree) + 164|0);
 $519 = HEAP32[$30>>2]|0;
 $520 = $519 >>> 18;
 $521 = $520 & 511;
 $522 = $521 | $517;
 HEAP32[$518>>2] = $522;
 $523 = $519 << 9;
 $524 = $523 & 134217216;
 $525 = (($ptree) + 168|0);
 $526 = HEAP32[$29>>2]|0;
 $527 = $526 >>> 18;
 $528 = $527 & 511;
 $529 = $528 | $524;
 HEAP32[$525>>2] = $529;
 $530 = $526 << 9;
 $531 = $530 & 134217216;
 $532 = (($ptree) + 172|0);
 HEAP32[$532>>2] = $531;
 $533 = HEAP32[$74>>2]|0;
 $534 = $533 >>> 9;
 $535 = (($ptree) + 184|0);
 $536 = HEAP32[$75>>2]|0;
 $537 = $536 << 18;
 $538 = $537 & 133955584;
 $539 = $538 | $534;
 HEAP32[$535>>2] = $539;
 $540 = $536 >>> 9;
 $541 = (($ptree) + 180|0);
 $542 = HEAP32[$76>>2]|0;
 $543 = $542 << 18;
 $544 = $543 & 133955584;
 $545 = $544 | $540;
 HEAP32[$541>>2] = $545;
 $546 = $542 >>> 9;
 $547 = (($ptree) + 176|0);
 HEAP32[$547>>2] = $546;
 $548 = (_eval_material($ptree)|0);
 HEAP32[$25>>2] = $548;
 $549 = (_hash_func($ptree)|0);
 $550 = tempRet0;
 $551 = $ptree;
 $552 = $551;
 HEAP32[$552>>2] = $549;
 $553 = (($551) + 4)|0;
 $554 = $553;
 HEAP32[$554>>2] = $550;
 $555 = (($ptree) + 505764|0);
 _memset(($555|0),0,65536)|0;
 $556 = HEAP32[34180920>>2]|0;
 $557 = $556 & 16771072;
 HEAP32[34180920>>2] = $557;
 HEAP32[34180984>>2] = 0;
 HEAP32[34180992>>2] = 0;
 HEAP32[34180976>>2] = 0;
 HEAP32[34184072>>2] = 0;
 HEAP8[((33570872 + 514|0))>>0] = 0;
 HEAP8[((33570872 + 513|0))>>0] = 0;
 HEAP32[33570872>>2] = 0;
 HEAP32[((33570872 + 4|0))>>2] = 0;
 $558 = HEAP32[34184024>>2]|0;
 $559 = ($558|0)==(0);
 if ($559) {
  $564 = HEAP8[$125>>0]|0;
  $565 = $564&255;
  $566 = (_is_black_attacked($ptree,$565)|0);
  $567 = ($566|0)==(0);
  if (!($567)) {
   label = 44;
  }
 } else {
  $560 = HEAP8[$126>>0]|0;
  $561 = $560&255;
  $562 = (_is_white_attacked($ptree,$561)|0);
  $563 = ($562|0)==(0);
  if (!($563)) {
   label = 44;
  }
 }
 if ((label|0) == 44) {
  HEAP8[$15>>0] = 1;
  $568 = HEAP32[34184024>>2]|0;
  $569 = ($568|0)==(0);
  $570 = HEAP32[$13>>2]|0;
  if ($569) {
   $572 = (_b_gen_evasion($ptree,$570)|0);
   $574 = $572;
  } else {
   $571 = (_w_gen_evasion($ptree,$570)|0);
   $574 = $571;
  }
  $573 = (($ptree) + 2660|0);
  HEAP32[$573>>2] = $574;
  $575 = HEAP32[$13>>2]|0;
  $576 = ($574|0)==($575|0);
  if ($576) {
   $577 = HEAP32[34180920>>2]|0;
   $578 = $577 | 1;
   HEAP32[34180920>>2] = $578;
  }
 }
 $579 = HEAP32[$31>>2]|0;
 $580 = HEAP32[$76>>2]|0;
 $581 = $580 | $579;
 $582 = HEAP32[$30>>2]|0;
 $583 = HEAP32[$75>>2]|0;
 $584 = $583 | $582;
 $585 = HEAP32[$29>>2]|0;
 $586 = HEAP32[$74>>2]|0;
 $587 = $586 | $585;
 $588 = HEAP32[$52>>2]|0;
 $589 = $581 | $588;
 $590 = HEAP32[$51>>2]|0;
 $591 = $584 | $590;
 $592 = HEAP32[$50>>2]|0;
 $593 = $587 | $592;
 $594 = HEAP32[$97>>2]|0;
 $595 = $589 | $594;
 $596 = HEAP32[$96>>2]|0;
 $597 = $591 | $596;
 $598 = HEAP32[$95>>2]|0;
 $599 = $593 | $598;
 HEAP32[34184104>>2] = 18;
 $600 = (_popu_count012($595,$597,$599)|0);
 $601 = HEAP32[34184104>>2]|0;
 $602 = (($601) - ($600))|0;
 $603 = HEAP32[$21>>2]|0;
 $604 = $603 & 31;
 $605 = (($602) - ($604))|0;
 $606 = HEAP32[$24>>2]|0;
 $607 = $606 & 31;
 $608 = (($605) - ($607))|0;
 HEAP32[34184104>>2] = $608;
 $609 = HEAP32[$34>>2]|0;
 $610 = HEAP32[$79>>2]|0;
 $611 = $610 | $609;
 $612 = HEAP32[$33>>2]|0;
 $613 = HEAP32[$78>>2]|0;
 $614 = $613 | $612;
 $615 = HEAP32[$32>>2]|0;
 $616 = HEAP32[$77>>2]|0;
 $617 = $616 | $615;
 $618 = HEAP32[$55>>2]|0;
 $619 = $611 | $618;
 $620 = HEAP32[$54>>2]|0;
 $621 = $614 | $620;
 $622 = HEAP32[$53>>2]|0;
 $623 = $617 | $622;
 $624 = HEAP32[$100>>2]|0;
 $625 = $619 | $624;
 $626 = HEAP32[$99>>2]|0;
 $627 = $621 | $626;
 $628 = HEAP32[$98>>2]|0;
 $629 = $623 | $628;
 HEAP32[34184112>>2] = 4;
 $630 = (_popu_count012($625,$627,$629)|0);
 $631 = HEAP32[34184112>>2]|0;
 $632 = (($631) - ($630))|0;
 $633 = HEAP32[$21>>2]|0;
 $634 = $633 >>> 5;
 $635 = $634 & 7;
 $636 = (($632) - ($635))|0;
 $637 = HEAP32[$24>>2]|0;
 $638 = $637 >>> 5;
 $639 = $638 & 7;
 $640 = (($636) - ($639))|0;
 HEAP32[34184112>>2] = $640;
 $641 = HEAP32[$37>>2]|0;
 $642 = HEAP32[$82>>2]|0;
 $643 = $642 | $641;
 $644 = HEAP32[$36>>2]|0;
 $645 = HEAP32[$81>>2]|0;
 $646 = $645 | $644;
 $647 = HEAP32[$35>>2]|0;
 $648 = HEAP32[$80>>2]|0;
 $649 = $648 | $647;
 $650 = HEAP32[$58>>2]|0;
 $651 = $643 | $650;
 $652 = HEAP32[$57>>2]|0;
 $653 = $646 | $652;
 $654 = HEAP32[$56>>2]|0;
 $655 = $649 | $654;
 $656 = HEAP32[$103>>2]|0;
 $657 = $651 | $656;
 $658 = HEAP32[$102>>2]|0;
 $659 = $653 | $658;
 $660 = HEAP32[$101>>2]|0;
 $661 = $655 | $660;
 HEAP32[34184120>>2] = 4;
 $662 = (_popu_count012($657,$659,$661)|0);
 $663 = HEAP32[34184120>>2]|0;
 $664 = (($663) - ($662))|0;
 $665 = HEAP32[$21>>2]|0;
 $666 = $665 >>> 8;
 $667 = $666 & 7;
 $668 = (($664) - ($667))|0;
 $669 = HEAP32[$24>>2]|0;
 $670 = $669 >>> 8;
 $671 = $670 & 7;
 $672 = (($668) - ($671))|0;
 HEAP32[34184120>>2] = $672;
 $673 = HEAP32[$40>>2]|0;
 $674 = HEAP32[$85>>2]|0;
 $675 = $674 | $673;
 $676 = HEAP32[$39>>2]|0;
 $677 = HEAP32[$84>>2]|0;
 $678 = $677 | $676;
 $679 = HEAP32[$38>>2]|0;
 $680 = HEAP32[$83>>2]|0;
 $681 = $680 | $679;
 $682 = HEAP32[$61>>2]|0;
 $683 = $675 | $682;
 $684 = HEAP32[$60>>2]|0;
 $685 = $678 | $684;
 $686 = HEAP32[$59>>2]|0;
 $687 = $681 | $686;
 $688 = HEAP32[$106>>2]|0;
 $689 = $683 | $688;
 $690 = HEAP32[$105>>2]|0;
 $691 = $685 | $690;
 $692 = HEAP32[$104>>2]|0;
 $693 = $687 | $692;
 HEAP32[34184128>>2] = 4;
 $694 = (_popu_count012($689,$691,$693)|0);
 $695 = HEAP32[34184128>>2]|0;
 $696 = (($695) - ($694))|0;
 $697 = HEAP32[$21>>2]|0;
 $698 = $697 >>> 11;
 $699 = $698 & 7;
 $700 = (($696) - ($699))|0;
 $701 = HEAP32[$24>>2]|0;
 $702 = $701 >>> 11;
 $703 = $702 & 7;
 $704 = (($700) - ($703))|0;
 HEAP32[34184128>>2] = $704;
 $705 = HEAP32[$43>>2]|0;
 $706 = HEAP32[$88>>2]|0;
 $707 = $706 | $705;
 $708 = HEAP32[$42>>2]|0;
 $709 = HEAP32[$87>>2]|0;
 $710 = $709 | $708;
 $711 = HEAP32[$41>>2]|0;
 $712 = HEAP32[$86>>2]|0;
 $713 = $712 | $711;
 HEAP32[34184136>>2] = 4;
 $714 = (_popu_count012($707,$710,$713)|0);
 $715 = HEAP32[34184136>>2]|0;
 $716 = (($715) - ($714))|0;
 $717 = HEAP32[$21>>2]|0;
 $718 = $717 >>> 14;
 $719 = $718 & 7;
 $720 = (($716) - ($719))|0;
 $721 = HEAP32[$24>>2]|0;
 $722 = $721 >>> 14;
 $723 = $722 & 7;
 $724 = (($720) - ($723))|0;
 HEAP32[34184136>>2] = $724;
 $725 = HEAP32[$46>>2]|0;
 $726 = HEAP32[$91>>2]|0;
 $727 = $726 | $725;
 $728 = HEAP32[$45>>2]|0;
 $729 = HEAP32[$90>>2]|0;
 $730 = $729 | $728;
 $731 = HEAP32[$44>>2]|0;
 $732 = HEAP32[$89>>2]|0;
 $733 = $732 | $731;
 $734 = HEAP32[$64>>2]|0;
 $735 = $727 | $734;
 $736 = HEAP32[$63>>2]|0;
 $737 = $730 | $736;
 $738 = HEAP32[$62>>2]|0;
 $739 = $733 | $738;
 $740 = HEAP32[$109>>2]|0;
 $741 = $735 | $740;
 $742 = HEAP32[$108>>2]|0;
 $743 = $737 | $742;
 $744 = HEAP32[$107>>2]|0;
 $745 = $739 | $744;
 HEAP32[34184144>>2] = 2;
 $746 = (_popu_count012($741,$743,$745)|0);
 $747 = HEAP32[34184144>>2]|0;
 $748 = (($747) - ($746))|0;
 $749 = HEAP32[$21>>2]|0;
 $750 = $749 >>> 17;
 $751 = $750 & 3;
 $752 = (($748) - ($751))|0;
 $753 = HEAP32[$24>>2]|0;
 $754 = $753 >>> 17;
 $755 = $754 & 3;
 $756 = (($752) - ($755))|0;
 HEAP32[34184144>>2] = $756;
 $757 = HEAP32[$49>>2]|0;
 $758 = HEAP32[$94>>2]|0;
 $759 = $758 | $757;
 $760 = HEAP32[$48>>2]|0;
 $761 = HEAP32[$93>>2]|0;
 $762 = $761 | $760;
 $763 = HEAP32[$47>>2]|0;
 $764 = HEAP32[$92>>2]|0;
 $765 = $764 | $763;
 $766 = HEAP32[$67>>2]|0;
 $767 = $759 | $766;
 $768 = HEAP32[$66>>2]|0;
 $769 = $762 | $768;
 $770 = HEAP32[$65>>2]|0;
 $771 = $765 | $770;
 $772 = HEAP32[$112>>2]|0;
 $773 = $767 | $772;
 $774 = HEAP32[$111>>2]|0;
 $775 = $769 | $774;
 $776 = HEAP32[$110>>2]|0;
 $777 = $771 | $776;
 HEAP32[34184152>>2] = 2;
 $778 = (_popu_count012($773,$775,$777)|0);
 $779 = HEAP32[34184152>>2]|0;
 $780 = (($779) - ($778))|0;
 $781 = HEAP32[$21>>2]|0;
 $782 = $781 >>> 19;
 $783 = (($780) - ($782))|0;
 $784 = HEAP32[$24>>2]|0;
 $785 = $784 >>> 19;
 $786 = (($783) - ($785))|0;
 HEAP32[34184152>>2] = $786;
 $787 = (_exam_tree($ptree)|0);
 $788 = ($787|0)<(0);
 if ($788) {
  (_ini_game($ptree,1424,0,0,0)|0);
  STACKTOP = sp;return ($787|0);
 } else {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _is_mate($ptree,$ply) {
 $ptree = $ptree|0;
 $ply = $ply|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[34184024>>2]|0;
 $1 = ($0|0)==(0);
 $2 = (($ply) + -1)|0;
 $3 = ((($ptree) + ($2<<2)|0) + 2656|0);
 $4 = HEAP32[$3>>2]|0;
 if ($1) {
  $6 = (_b_gen_evasion($ptree,$4)|0);
  $8 = $6;
 } else {
  $5 = (_w_gen_evasion($ptree,$4)|0);
  $8 = $5;
 }
 $7 = ((($ptree) + ($ply<<2)|0) + 2656|0);
 HEAP32[$7>>2] = $8;
 $9 = HEAP32[$3>>2]|0;
 $10 = ($8|0)==($9|0);
 $$ = $10&1;
 STACKTOP = sp;return ($$|0);
}
function _gen_legal_moves($ptree,$p0,$flag) {
 $ptree = $ptree|0;
 $p0 = $p0|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $exitcond = 0, $i$07 = 0, $i$1$ph11 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $j$01 = 0, $n$0$lcssa = 0, $n$0$ph12 = 0, $p1$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[34184024>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $3 = (_b_gen_captures($ptree,$p0)|0);
  $6 = $3;
 } else {
  $2 = (_w_gen_captures($ptree,$p0)|0);
  $6 = $2;
 }
 $4 = HEAP32[34184024>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $8 = (_b_gen_nocaptures($ptree,$6)|0);
  $12 = $8;
 } else {
  $7 = (_w_gen_nocaptures($ptree,$6)|0);
  $12 = $7;
 }
 $9 = ($flag|0)==(0);
 do {
  if ($9) {
   $p1$0 = $12;
  } else {
   $10 = HEAP32[34184024>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $14 = (_b_gen_cap_nopro_ex2($ptree,$12)|0);
    $17 = $14;
   } else {
    $13 = (_w_gen_cap_nopro_ex2($ptree,$12)|0);
    $17 = $13;
   }
   $15 = HEAP32[34184024>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $19 = (_b_gen_nocap_nopro_ex2($ptree,$17)|0);
    $p1$0 = $19;
    break;
   } else {
    $18 = (_w_gen_nocap_nopro_ex2($ptree,$17)|0);
    $p1$0 = $18;
    break;
   }
  }
 } while(0);
 $20 = HEAP32[34184024>>2]|0;
 $21 = ($20|0)==(0);
 if ($21) {
  $23 = (_b_gen_drop($ptree,$p1$0)|0);
  $25 = $23;
 } else {
  $22 = (_w_gen_drop($ptree,$p1$0)|0);
  $25 = $22;
 }
 $24 = $25;
 $26 = $p0;
 $27 = (($24) - ($26))|0;
 $28 = $27 >> 2;
 $29 = ($27|0)>(0);
 if (!($29)) {
  $n$0$lcssa = $28;
  STACKTOP = sp;return ($n$0$lcssa|0);
 }
 $30 = (($ptree) + 593|0);
 $31 = (($ptree) + 572072|0);
 $32 = (($ptree) + 572074|0);
 $33 = (($ptree) + 594|0);
 $i$07 = 0;
 while(1) {
  $34 = HEAP32[34184024>>2]|0;
  $35 = ($34|0)==(0);
  $36 = (($p0) + ($i$07<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  if ($35) {
   _make_move_b($ptree,$37,1);
  } else {
   _make_move_w($ptree,$37,1);
  }
  $38 = HEAP32[34184024>>2]|0;
  $39 = ($38|0)==(0);
  if ($39) {
   $44 = HEAP8[$30>>0]|0;
   $45 = $44&255;
   $46 = (_is_black_attacked($ptree,$45)|0);
   $47 = ($46|0)==(0);
   if ($47) {
    label = 30;
   } else {
    label = 26;
   }
  } else {
   $40 = HEAP8[$33>>0]|0;
   $41 = $40&255;
   $42 = (_is_white_attacked($ptree,$41)|0);
   $43 = ($42|0)==(0);
   if ($43) {
    label = 30;
   } else {
    label = 26;
   }
  }
  do {
   if ((label|0) == 26) {
    label = 0;
    $48 = HEAP32[34184024>>2]|0;
    $49 = ($48|0)==(0);
    $50 = HEAP32[$36>>2]|0;
    if ($49) {
     _unmake_move_b($ptree,$50,1);
    } else {
     _unmake_move_w($ptree,$50,1);
    }
    HEAP32[$36>>2] = 0;
   }
   else if ((label|0) == 30) {
    label = 0;
    $51 = HEAP32[34184024>>2]|0;
    $52 = ($51|0)==(1);
    if ($52) {
     $57 = HEAP8[$30>>0]|0;
     $58 = $57&255;
     $59 = (_is_black_attacked($ptree,$58)|0);
     $60 = ($59|0)==(0);
     if (!($60)) {
      label = 33;
     }
    } else {
     $53 = HEAP8[$33>>0]|0;
     $54 = $53&255;
     $55 = (_is_white_attacked($ptree,$54)|0);
     $56 = ($55|0)==(0);
     if (!($56)) {
      label = 33;
     }
    }
    if ((label|0) == 33) {
     label = 0;
     $61 = HEAP8[$31>>0]|0;
     $62 = $61&255;
     $63 = (($62) + 1)|0;
     $64 = $63&255;
     HEAP8[$32>>0] = $64;
     $65 = $63 & 254;
     $66 = ($65>>>0)>(5);
     if ($66) {
      $67 = HEAP32[34184024>>2]|0;
      $68 = $67 ^ 1;
      $69 = (_detect_repetition($ptree,2,$68,3)|0);
      $70 = ($69|0)==(2);
      if ($70) {
       $71 = HEAP32[34184024>>2]|0;
       $72 = ($71|0)==(0);
       $73 = HEAP32[$36>>2]|0;
       if ($72) {
        _unmake_move_b($ptree,$73,1);
       } else {
        _unmake_move_w($ptree,$73,1);
       }
       HEAP32[$36>>2] = 0;
       break;
      }
     }
    }
    $74 = HEAP32[34184024>>2]|0;
    $75 = ($74|0)==(0);
    $76 = HEAP32[$36>>2]|0;
    if ($75) {
     _unmake_move_b($ptree,$76,1);
     break;
    } else {
     _unmake_move_w($ptree,$76,1);
     break;
    }
   }
  } while(0);
  $77 = (($i$07) + 1)|0;
  $78 = ($77|0)<($28|0);
  if ($78) {
   $i$07 = $77;
  } else {
   break;
  }
 }
 if ($29) {
  $i$1$ph11 = 0;$n$0$ph12 = $28;
 } else {
  $n$0$lcssa = $28;
  STACKTOP = sp;return ($n$0$lcssa|0);
 }
 L61: while(1) {
  $80 = (($p0) + ($i$1$ph11<<2)|0);
  $83 = (($i$1$ph11) + 1)|0;
  $indvars$iv = $n$0$ph12;
  while(1) {
   $79 = HEAP32[$80>>2]|0;
   $81 = ($79|0)==(0);
   $82 = ($83|0)<($indvars$iv|0);
   if (!($81)) {
    break;
   }
   if ($82) {
    $j$01 = $83;
    while(1) {
     $84 = (($p0) + ($j$01<<2)|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (($j$01) + -1)|0;
     $87 = (($p0) + ($86<<2)|0);
     HEAP32[$87>>2] = $85;
     $88 = (($j$01) + 1)|0;
     $exitcond = ($88|0)==($indvars$iv|0);
     if ($exitcond) {
      break;
     } else {
      $j$01 = $88;
     }
    }
   }
   $indvars$iv$next = (($indvars$iv) + -1)|0;
   $89 = ($i$1$ph11|0)<($indvars$iv$next|0);
   if ($89) {
    $indvars$iv = $indvars$iv$next;
   } else {
    $n$0$lcssa = $indvars$iv$next;
    label = 49;
    break L61;
   }
  }
  if ($82) {
   $i$1$ph11 = $83;$n$0$ph12 = $indvars$iv;
  } else {
   $n$0$lcssa = $indvars$iv;
   label = 49;
   break;
  }
 }
 if ((label|0) == 49) {
  STACKTOP = sp;return ($n$0$lcssa|0);
 }
 return 0|0;
}
function _detect_repetition($ptree,$ply,$turn,$nth) {
 $ptree = $ptree|0;
 $ply = $ply|0;
 $turn = $turn|0;
 $nth = $nth|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $counter$037 = 0, $counter$037$us = 0, $counter$1 = 0, $counter$1$us = 0, $counter$234 = 0, $counter$3 = 0, $i$036 = 0, $i$036$us = 0, $i$133 = 0, $irep$035 = 0, $irep$1 = 0, $p$0$lcssa40 = 0, $p$041 = 0, $p$041$us = 0, $p$041$us45 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ptree) + ($ply)|0) + 572072|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($ptree) + 572204|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($ply))|0;
 $6 = (($5) + -1)|0;
 $7 = $nth << 1;
 $8 = ($2|0)<($7|0);
 L1: do {
  if (!($8)) {
   $9 = $2 << 1;
   $10 = (($6) - ($9))|0;
   $11 = (($10) + 1)|0;
   $12 = ($11|0)<(0);
   $$ = $12 ? 0 : $11;
   $13 = ($turn|0)!=(0);
   $14 = (($ply) + -1)|0;
   $15 = ((($ptree) + ($14<<2)|0) + 2656|0);
   $16 = HEAP32[$15>>2]|0;
   if ($13) {
    $17 = (_w_gen_evasion($ptree,$16)|0);
    $20 = $17;
   } else {
    $18 = (_b_gen_evasion($ptree,$16)|0);
    $20 = $18;
   }
   $19 = ((($ptree) + ($ply<<2)|0) + 2656|0);
   HEAP32[$19>>2] = $20;
   $21 = HEAP32[$15>>2]|0;
   $22 = ($21>>>0)<($20>>>0);
   if ($22) {
    $23 = (($5) + -4)|0;
    $24 = ($23|0)<($$|0);
    $25 = (($ptree) + 500|0);
    L8: do {
     if ($13) {
      $p$041$us = $21;
      while(1) {
       $26 = HEAP32[$p$041$us>>2]|0;
       _make_move_w($ptree,$26,$ply);
       if (!($24)) {
        $51 = $ptree;
        $52 = $51;
        $35 = HEAP32[$52>>2]|0;
        $53 = (($51) + 4)|0;
        $54 = $53;
        $37 = HEAP32[$54>>2]|0;
        $counter$037$us = 0;$i$036$us = $23;
        while(1) {
         $27 = ((($ptree) + ($i$036$us<<3)|0) + 600|0);
         $28 = $27;
         $29 = $28;
         $30 = HEAP32[$29>>2]|0;
         $31 = (($28) + 4)|0;
         $32 = $31;
         $33 = HEAP32[$32>>2]|0;
         $34 = ($30|0)==($35|0);
         $36 = ($33|0)==($37|0);
         $38 = $34 & $36;
         if ($38) {
          $39 = ((($ptree) + ($i$036$us<<2)|0) + 75444|0);
          $40 = HEAP32[$39>>2]|0;
          $41 = HEAP32[$25>>2]|0;
          $42 = ($40|0)==($41|0);
          if ($42) {
           $43 = (($counter$037$us) + 1)|0;
           $44 = ($43|0)==($nth|0);
           if ($44) {
            $p$0$lcssa40 = $p$041$us;
            break L8;
           } else {
            $counter$1$us = $43;
           }
          } else {
           $counter$1$us = $counter$037$us;
          }
         } else {
          $counter$1$us = $counter$037$us;
         }
         $45 = (($i$036$us) + -2)|0;
         $46 = ($45|0)<($$|0);
         if ($46) {
          break;
         } else {
          $counter$037$us = $counter$1$us;$i$036$us = $45;
         }
        }
       }
       $47 = HEAP32[$p$041$us>>2]|0;
       _unmake_move_w($ptree,$47,$ply);
       $48 = (($p$041$us) + 4|0);
       $49 = HEAP32[$19>>2]|0;
       $50 = ($48>>>0)<($49>>>0);
       if ($50) {
        $p$041$us = $48;
       } else {
        break L1;
       }
      }
     } else {
      if ($24) {
       $p$041$us45 = $21;
       while(1) {
        $55 = HEAP32[$p$041$us45>>2]|0;
        _make_move_b($ptree,$55,$ply);
        $56 = HEAP32[$p$041$us45>>2]|0;
        _unmake_move_b($ptree,$56,$ply);
        $57 = (($p$041$us45) + 4|0);
        $58 = HEAP32[$19>>2]|0;
        $59 = ($57>>>0)<($58>>>0);
        if ($59) {
         $p$041$us45 = $57;
        } else {
         break L1;
        }
       }
      } else {
       $p$041 = $21;
      }
      while(1) {
       $60 = HEAP32[$p$041>>2]|0;
       _make_move_b($ptree,$60,$ply);
       $61 = $ptree;
       $62 = $61;
       $63 = HEAP32[$62>>2]|0;
       $64 = (($61) + 4)|0;
       $65 = $64;
       $66 = HEAP32[$65>>2]|0;
       $counter$037 = 0;$i$036 = $23;
       while(1) {
        $67 = ((($ptree) + ($i$036<<3)|0) + 600|0);
        $68 = $67;
        $69 = $68;
        $70 = HEAP32[$69>>2]|0;
        $71 = (($68) + 4)|0;
        $72 = $71;
        $73 = HEAP32[$72>>2]|0;
        $74 = ($70|0)==($63|0);
        $75 = ($73|0)==($66|0);
        $76 = $74 & $75;
        if ($76) {
         $77 = ((($ptree) + ($i$036<<2)|0) + 75444|0);
         $78 = HEAP32[$77>>2]|0;
         $79 = HEAP32[$25>>2]|0;
         $80 = ($78|0)==($79|0);
         if ($80) {
          $81 = (($counter$037) + 1)|0;
          $82 = ($81|0)==($nth|0);
          if ($82) {
           $p$0$lcssa40 = $p$041;
           break L8;
          } else {
           $counter$1 = $81;
          }
         } else {
          $counter$1 = $counter$037;
         }
        } else {
         $counter$1 = $counter$037;
        }
        $85 = (($i$036) + -2)|0;
        $86 = ($85|0)<($$|0);
        if ($86) {
         break;
        } else {
         $counter$037 = $counter$1;$i$036 = $85;
        }
       }
       $87 = HEAP32[$p$041>>2]|0;
       _unmake_move_b($ptree,$87,$ply);
       $88 = (($p$041) + 4|0);
       $89 = HEAP32[$19>>2]|0;
       $90 = ($88>>>0)<($89>>>0);
       if ($90) {
        $p$041 = $88;
       } else {
        break L1;
       }
      }
     }
    } while(0);
    $83 = HEAP32[$p$0$lcssa40>>2]|0;
    if ($13) {
     _unmake_move_w($ptree,$83,$ply);
    } else {
     _unmake_move_b($ptree,$83,$ply);
    }
    $84 = HEAP32[$p$0$lcssa40>>2]|0;
    HEAP32[34180936>>2] = $84;
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $91 = (($5) + -5)|0;
 $92 = ($91|0)>(-1);
 if (!($92)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $93 = $ptree;
 $94 = $93;
 $95 = HEAP32[$94>>2]|0;
 $96 = (($93) + 4)|0;
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = (($ptree) + 500|0);
 $100 = ($turn|0)==(0);
 $counter$234 = 0;$i$133 = $91;$irep$035 = 0;
 L43: while(1) {
  $101 = ((($ptree) + ($i$133<<3)|0) + 600|0);
  $102 = $101;
  $103 = $102;
  $104 = HEAP32[$103>>2]|0;
  $105 = (($102) + 4)|0;
  $106 = $105;
  $107 = HEAP32[$106>>2]|0;
  $108 = ($104|0)==($95|0);
  $109 = ($107|0)==($98|0);
  $110 = $108 & $109;
  do {
   if ($110) {
    $111 = HEAP32[$99>>2]|0;
    $112 = ((($ptree) + ($i$133<<2)|0) + 75444|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (($6) - ($i$133))|0;
    $115 = $114 & 1;
    $116 = ($115|0)==(0);
    if (!($116)) {
     $117 = ($irep$035|0)==(0);
     if (!($117)) {
      $counter$3 = $counter$234;$irep$1 = $irep$035;
      break;
     }
     if ($100) {
      $162 = $111 & 1792;
      $163 = $113 & 1792;
      $164 = ($162>>>0)<($163>>>0);
      if ($164) {
       $counter$3 = $counter$234;$irep$1 = 0;
       break;
      }
      $165 = $111 & 14336;
      $166 = $113 & 14336;
      $167 = ($165>>>0)<($166>>>0);
      if ($167) {
       $counter$3 = $counter$234;$irep$1 = 0;
       break;
      }
      $168 = $111 & 114688;
      $169 = $113 & 114688;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       $counter$3 = $counter$234;$irep$1 = 0;
       break;
      }
      $171 = $111 & 393216;
      $172 = $113 & 393216;
      $173 = ($171>>>0)<($172>>>0);
      if ($173) {
       $counter$3 = $counter$234;$irep$1 = 0;
       break;
      }
      $174 = $111 & 1572864;
      $175 = $113 & 1572864;
      $176 = ($174>>>0)<($175>>>0);
      if ($176) {
       $counter$3 = $counter$234;$irep$1 = 0;
       break;
      }
      $177 = $111 >>> 19;
      $178 = $113 >>> 19;
      $179 = (($177) - ($178))|0;
      $180 = $111 >>> 5;
      $181 = $180 & 7;
      $182 = $113 >>> 5;
      $183 = $182 & 7;
      $184 = (($181) - ($183))|0;
      $185 = (($184) + ($179))|0;
      $186 = ($185|0)<(0);
      if ($186) {
       $counter$3 = $counter$234;$irep$1 = 0;
       break;
      }
      $187 = $111 >>> 11;
      $188 = $187 & 7;
      $189 = $113 >>> 11;
      $190 = $189 & 7;
      $191 = $111 >>> 14;
      $192 = $191 & 7;
      $193 = $113 >>> 14;
      $194 = $193 & 7;
      $195 = $111 & 31;
      $196 = $113 & 31;
      $197 = (($188) + ($195))|0;
      $198 = (($197) + ($192))|0;
      $199 = (($198) - ($196))|0;
      $200 = (($199) - ($190))|0;
      $201 = (($200) - ($194))|0;
      $202 = (($201) + ($185))|0;
      $203 = $202 >> 31;
      $204 = (($203) + 4)|0;
      $205 = $204 & -4;
      $counter$3 = $counter$234;$irep$1 = $205;
      break;
     } else {
      $118 = $113 & 1792;
      $119 = $111 & 1792;
      $120 = ($118>>>0)<($119>>>0);
      if ($120) {
       $counter$3 = $counter$234;$irep$1 = 0;
       break;
      }
      $121 = $113 & 14336;
      $122 = $111 & 14336;
      $123 = ($121>>>0)<($122>>>0);
      if ($123) {
       $counter$3 = $counter$234;$irep$1 = 0;
       break;
      }
      $124 = $113 & 114688;
      $125 = $111 & 114688;
      $126 = ($124>>>0)<($125>>>0);
      if ($126) {
       $counter$3 = $counter$234;$irep$1 = 0;
       break;
      }
      $127 = $113 & 393216;
      $128 = $111 & 393216;
      $129 = ($127>>>0)<($128>>>0);
      if ($129) {
       $counter$3 = $counter$234;$irep$1 = 0;
       break;
      }
      $130 = $113 & 1572864;
      $131 = $111 & 1572864;
      $132 = ($130>>>0)<($131>>>0);
      if ($132) {
       $counter$3 = $counter$234;$irep$1 = 0;
       break;
      }
      $133 = $113 >>> 19;
      $134 = $111 >>> 19;
      $135 = (($133) - ($134))|0;
      $136 = $113 >>> 5;
      $137 = $136 & 7;
      $138 = $111 >>> 5;
      $139 = $138 & 7;
      $140 = (($137) - ($139))|0;
      $141 = (($140) + ($135))|0;
      $142 = ($141|0)<(0);
      if ($142) {
       $counter$3 = $counter$234;$irep$1 = 0;
       break;
      }
      $143 = $113 >>> 11;
      $144 = $143 & 7;
      $145 = $111 >>> 11;
      $146 = $145 & 7;
      $147 = $113 >>> 14;
      $148 = $147 & 7;
      $149 = $111 >>> 14;
      $150 = $149 & 7;
      $151 = $113 & 31;
      $152 = $111 & 31;
      $153 = (($151) - ($152))|0;
      $154 = (($153) - ($146))|0;
      $155 = (($154) - ($150))|0;
      $156 = (($155) + ($144))|0;
      $157 = (($156) + ($148))|0;
      $158 = (($157) + ($141))|0;
      $159 = $158 >> 31;
      $160 = $159 & -5;
      $161 = (($160) + 5)|0;
      $counter$3 = $counter$234;$irep$1 = $161;
      break;
     }
    }
    $206 = ($111|0)==($113|0);
    if ($206) {
     $207 = (($counter$234) + 1)|0;
     $208 = ($207|0)==($nth|0);
     if ($208) {
      break L43;
     } else {
      $counter$3 = $207;$irep$1 = $irep$035;
      break;
     }
    }
    $212 = ($irep$035|0)==(0);
    if ($212) {
     $213 = $111 & 1792;
     $214 = $113 & 1792;
     $215 = ($213>>>0)<($214>>>0);
     if (!($215)) {
      $216 = $111 & 14336;
      $217 = $113 & 14336;
      $218 = ($216>>>0)<($217>>>0);
      if (!($218)) {
       $219 = $111 & 114688;
       $220 = $113 & 114688;
       $221 = ($219>>>0)<($220>>>0);
       if (!($221)) {
        $222 = $111 & 393216;
        $223 = $113 & 393216;
        $224 = ($222>>>0)<($223>>>0);
        if (!($224)) {
         $225 = $111 & 1572864;
         $226 = $113 & 1572864;
         $227 = ($225>>>0)<($226>>>0);
         if (!($227)) {
          $228 = $111 >>> 19;
          $229 = $113 >>> 19;
          $230 = (($228) - ($229))|0;
          $231 = $111 >>> 5;
          $232 = $231 & 7;
          $233 = $113 >>> 5;
          $234 = $233 & 7;
          $235 = (($232) - ($234))|0;
          $236 = (($235) + ($230))|0;
          $237 = ($236|0)<(0);
          if (!($237)) {
           $238 = $111 >>> 11;
           $239 = $238 & 7;
           $240 = $113 >>> 11;
           $241 = $240 & 7;
           $242 = $111 >>> 14;
           $243 = $242 & 7;
           $244 = $113 >>> 14;
           $245 = $244 & 7;
           $246 = $111 & 31;
           $247 = $113 & 31;
           $248 = (($239) + ($246))|0;
           $249 = (($248) + ($243))|0;
           $250 = (($249) - ($247))|0;
           $251 = (($250) - ($241))|0;
           $252 = (($251) - ($245))|0;
           $253 = (($252) + ($236))|0;
           $254 = ($253|0)<(0);
           if (!($254)) {
            $counter$3 = $counter$234;$irep$1 = 4;
            break;
           }
          }
         }
        }
       }
      }
     }
     $255 = ($214>>>0)<($213>>>0);
     if ($255) {
      $counter$3 = $counter$234;$irep$1 = 0;
     } else {
      $256 = $113 & 14336;
      $257 = $111 & 14336;
      $258 = ($256>>>0)<($257>>>0);
      if ($258) {
       $counter$3 = $counter$234;$irep$1 = 0;
      } else {
       $259 = $113 & 114688;
       $260 = $111 & 114688;
       $261 = ($259>>>0)<($260>>>0);
       if ($261) {
        $counter$3 = $counter$234;$irep$1 = 0;
       } else {
        $262 = $113 & 393216;
        $263 = $111 & 393216;
        $264 = ($262>>>0)<($263>>>0);
        if ($264) {
         $counter$3 = $counter$234;$irep$1 = 0;
        } else {
         $265 = $113 & 1572864;
         $266 = $111 & 1572864;
         $267 = ($265>>>0)<($266>>>0);
         if ($267) {
          $counter$3 = $counter$234;$irep$1 = 0;
         } else {
          $268 = $113 >>> 19;
          $269 = $111 >>> 19;
          $270 = (($268) - ($269))|0;
          $271 = $113 >>> 5;
          $272 = $271 & 7;
          $273 = $111 >>> 5;
          $274 = $273 & 7;
          $275 = (($272) - ($274))|0;
          $276 = (($275) + ($270))|0;
          $277 = ($276|0)<(0);
          if ($277) {
           $counter$3 = $counter$234;$irep$1 = 0;
          } else {
           $278 = $113 >>> 11;
           $279 = $278 & 7;
           $280 = $111 >>> 11;
           $281 = $280 & 7;
           $282 = $113 >>> 14;
           $283 = $282 & 7;
           $284 = $111 >>> 14;
           $285 = $284 & 7;
           $286 = $113 & 31;
           $287 = $111 & 31;
           $288 = (($286) - ($287))|0;
           $289 = (($288) - ($281))|0;
           $290 = (($289) - ($285))|0;
           $291 = (($290) + ($279))|0;
           $292 = (($291) + ($283))|0;
           $293 = (($292) + ($276))|0;
           $294 = $293 >> 31;
           $295 = $294 & -5;
           $296 = (($295) + 5)|0;
           $counter$3 = $counter$234;$irep$1 = $296;
          }
         }
        }
       }
      }
     }
    } else {
     $counter$3 = $counter$234;$irep$1 = $irep$035;
    }
   } else {
    $counter$3 = $counter$234;$irep$1 = $irep$035;
   }
  } while(0);
  $297 = (($i$133) + -1)|0;
  $298 = ($i$133|0)>(0);
  if ($298) {
   $counter$234 = $counter$3;$i$133 = $297;$irep$035 = $irep$1;
  } else {
   $$0 = $irep$1;
   label = 65;
   break;
  }
 }
 if ((label|0) == 65) {
  STACKTOP = sp;return ($$0|0);
 }
 $209 = $2 << 1;
 $210 = (($209) + -2)|0;
 $211 = ($210|0)<($114|0);
 $$2 = $211 ? 1 : 2;
 $$0 = $$2;
 STACKTOP = sp;return ($$0|0);
}
function _is_hand_eq_supe($u,$uref) {
 $u = $u|0;
 $uref = $uref|0;
 var $$0 = 0, $$lobit = 0, $$lobit$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $u & 1792;
 $1 = $uref & 1792;
 $2 = ($0>>>0)<($1>>>0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = $u & 14336;
 $4 = $uref & 14336;
 $5 = ($3>>>0)<($4>>>0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = $u & 114688;
 $7 = $uref & 114688;
 $8 = ($6>>>0)<($7>>>0);
 if ($8) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = $u & 393216;
 $10 = $uref & 393216;
 $11 = ($9>>>0)<($10>>>0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = $u & 1572864;
 $13 = $uref & 1572864;
 $14 = ($12>>>0)<($13>>>0);
 if ($14) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = $u >>> 19;
 $16 = $uref >>> 19;
 $17 = (($15) - ($16))|0;
 $18 = $u >>> 5;
 $19 = $18 & 7;
 $20 = $uref >>> 5;
 $21 = $20 & 7;
 $22 = (($19) - ($21))|0;
 $23 = (($22) + ($17))|0;
 $24 = ($23|0)<(0);
 if ($24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = $u >>> 11;
 $26 = $25 & 7;
 $27 = $uref >>> 11;
 $28 = $27 & 7;
 $29 = $u >>> 14;
 $30 = $29 & 7;
 $31 = $uref >>> 14;
 $32 = $31 & 7;
 $33 = $u & 31;
 $34 = $uref & 31;
 $35 = (($26) + ($33))|0;
 $36 = (($35) + ($30))|0;
 $37 = (($36) - ($34))|0;
 $38 = (($37) - ($28))|0;
 $39 = (($38) - ($32))|0;
 $40 = (($39) + ($23))|0;
 $$lobit = $40 >>> 31;
 $$lobit$not = $$lobit ^ 1;
 $$0 = $$lobit$not;
 STACKTOP = sp;return ($$0|0);
}
function _com_turn_start($ptree,$flag) {
 $ptree = $ptree|0;
 $flag = $flag|0;
 var $$1 = 0, $$pre = 0, $$pre10 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $buf = 0, $byte$08 = 0, $i$06 = 0, $not$or$cond4 = 0, $notlhs = 0, $notrhs = 0;
 var $or$cond = 0, $sec_total$0 = 0, $str_move$0 = 0, $turn$07 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer16 = sp + 16|0;
 $vararg_buffer12 = sp + 64|0;
 $vararg_buffer9 = sp + 72|0;
 $vararg_buffer5 = sp + 80|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 56|0;
 $buf = sp + 88|0;
 $0 = $flag & 1;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[34181048>>2]|0;
  HEAP32[34181040>>2] = $2;
  $3 = HEAP32[34180920>>2]|0;
  $4 = $3 | 128;
  HEAP32[34180920>>2] = $4;
  $5 = (_iterate($ptree)|0);
  $6 = HEAP32[34180920>>2]|0;
  $7 = $6 & -129;
  HEAP32[34180920>>2] = $7;
  $8 = ($5|0)<(0);
  if ($8) {
   $$1 = $5;
   STACKTOP = sp;return ($$1|0);
  } else {
   $10 = $7;
  }
 } else {
  $$pre10 = HEAP32[34180920>>2]|0;
  $10 = $$pre10;
 }
 $9 = $10 & 8;
 $11 = ($9|0)==(0);
 if (!($11)) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $12 = HEAP32[((33570872 + 4|0))>>2]|0;
 $13 = HEAP32[34184024>>2]|0;
 $14 = ($13|0)!=(0);
 $15 = HEAP32[34184072>>2]|0;
 $16 = (0 - ($15))|0;
 $17 = $14 ? $16 : $15;
 $18 = HEAP32[34184160>>2]|0;
 $19 = (0 - ($18))|0;
 $20 = HEAP8[((33570872 + 512|0))>>0]|0;
 $notlhs = ($17|0)<($19|0);
 $notrhs = ($20<<24>>24)!=(9);
 $not$or$cond4 = $notrhs & $notlhs;
 $21 = HEAP32[221099712>>2]|0;
 $22 = ($21|0)!=(-1);
 do {
  if ($not$or$cond4) {
   if ($22) {
    $23 = (_sckt_out($21,221112720,$vararg_buffer)|0);
    $24 = ($23|0)<(0);
    if ($24) {
     $$1 = $23;
     STACKTOP = sp;return ($$1|0);
    }
   }
  } else {
   if ($22) {
    $25 = $10 & 8388608;
    $26 = ($25|0)==(0);
    if ($26) {
     $55 = (984 + ($13)|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     $58 = (_str_CSA_move($12)|0);
     HEAP32[$vararg_buffer12>>2] = $57;
     $vararg_ptr15 = (($vararg_buffer12) + 4|0);
     HEAP32[$vararg_ptr15>>2] = $58;
     $59 = (_sckt_out($21,221112768,$vararg_buffer12)|0);
     $60 = ($59|0)<(0);
     if ($60) {
      $$1 = $59;
     } else {
      break;
     }
     STACKTOP = sp;return ($$1|0);
    }
    $27 = (984 + ($13)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = (_str_CSA_move($12)|0);
    $31 = HEAP32[34184072>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $29;
    $vararg_ptr3 = (($vararg_buffer1) + 4|0);
    HEAP32[$vararg_ptr3>>2] = $30;
    $vararg_ptr4 = (($vararg_buffer1) + 8|0);
    HEAP32[$vararg_ptr4>>2] = $31;
    $32 = (_snprintf($buf,256,221112736,$vararg_buffer1)|0);
    $33 = HEAP8[((33570872 + 513|0))>>0]|0;
    $34 = ($33&255)>(1);
    if ($34) {
     $35 = HEAP32[34184024>>2]|0;
     $byte$08 = $32;$i$06 = 2;$turn$07 = $35;
     while(1) {
      $36 = $turn$07 ^ 1;
      $37 = (($buf) + ($byte$08)|0);
      $38 = (256 - ($byte$08))|0;
      $39 = (984 + ($36)|0);
      $40 = HEAP8[$39>>0]|0;
      $41 = $40 << 24 >> 24;
      $42 = (33570872 + ($i$06<<2)|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = (_str_CSA_move($43)|0);
      HEAP32[$vararg_buffer5>>2] = $41;
      $vararg_ptr8 = (($vararg_buffer5) + 4|0);
      HEAP32[$vararg_ptr8>>2] = $44;
      $45 = (_snprintf($37,$38,221112752,$vararg_buffer5)|0);
      $46 = (($45) + ($byte$08))|0;
      $47 = (($i$06) + 1)|0;
      $48 = HEAP8[((33570872 + 513|0))>>0]|0;
      $49 = $48&255;
      $50 = ($i$06|0)<($49|0);
      $51 = ($47|0)<(5);
      $or$cond = $50 & $51;
      if ($or$cond) {
       $byte$08 = $46;$i$06 = $47;$turn$07 = $36;
      } else {
       break;
      }
     }
    }
    $52 = HEAP32[221099712>>2]|0;
    HEAP32[$vararg_buffer9>>2] = $buf;
    $53 = (_sckt_out($52,221112760,$vararg_buffer9)|0);
    $54 = ($53|0)<(0);
    if ($54) {
     $$1 = $53;
     STACKTOP = sp;return ($$1|0);
    }
   }
  }
 } while(0);
 _out_beep();
 _show_prompt();
 do {
  if ($not$or$cond4) {
   $61 = HEAP32[34180920>>2]|0;
   $62 = $61 | 2;
   HEAP32[34180920>>2] = $62;
   $63 = HEAP32[34184024>>2]|0;
   (_update_time($63)|0);
   _out_CSA($ptree,33556568,-16777216);
   $64 = HEAP32[34184024>>2]|0;
   $65 = ($64|0)!=(0);
   $66 = HEAP32[34180992>>2]|0;
   $67 = HEAP32[34180984>>2]|0;
   $68 = $65 ? $66 : $67;
   $85 = $67;$86 = $66;$sec_total$0 = $68;$str_move$0 = 221112776;
  } else {
   $69 = (_make_move_root($ptree,$12,7)|0);
   $70 = ($69|0)<(0);
   if ($70) {
    $$1 = $69;
    STACKTOP = sp;return ($$1|0);
   } else {
    $71 = HEAP32[34184024>>2]|0;
    $72 = ($71|0)!=(0);
    $73 = HEAP32[34180984>>2]|0;
    $74 = HEAP32[34180992>>2]|0;
    $75 = $72 ? $73 : $74;
    $76 = (_str_CSA_move($12)|0);
    $$pre = HEAP32[34180984>>2]|0;
    $$pre9 = HEAP32[34180992>>2]|0;
    $85 = $$pre;$86 = $$pre9;$sec_total$0 = $75;$str_move$0 = $76;
    break;
   }
  }
 } while(0);
 $77 = HEAP8[((33570872 + 512|0))>>0]|0;
 $78 = ($77<<24>>24)==(9);
 $79 = $78 ? 221112840 : 221112848;
 $80 = HEAP32[34180976>>2]|0;
 $81 = (($80>>>0) / 60)&-1;
 $82 = (($80>>>0) % 60)&-1;
 $83 = (($sec_total$0>>>0) / 60)&-1;
 $84 = (($sec_total$0>>>0) % 60)&-1;
 HEAP32[$vararg_buffer16>>2] = $str_move$0;
 $vararg_ptr19 = (($vararg_buffer16) + 4|0);
 HEAP32[$vararg_ptr19>>2] = $17;
 $vararg_ptr20 = (($vararg_buffer16) + 8|0);
 HEAP32[$vararg_ptr20>>2] = $79;
 $vararg_ptr21 = (($vararg_buffer16) + 12|0);
 HEAP32[$vararg_ptr21>>2] = $81;
 $vararg_ptr22 = (($vararg_buffer16) + 16|0);
 HEAP32[$vararg_ptr22>>2] = $82;
 $vararg_ptr23 = (($vararg_buffer16) + 20|0);
 HEAP32[$vararg_ptr23>>2] = $83;
 $vararg_ptr24 = (($vararg_buffer16) + 24|0);
 HEAP32[$vararg_ptr24>>2] = $84;
 $vararg_ptr25 = (($vararg_buffer16) + 28|0);
 HEAP32[$vararg_ptr25>>2] = $85;
 $vararg_ptr26 = (($vararg_buffer16) + 32|0);
 HEAP32[$vararg_ptr26>>2] = $86;
 _out(221112784,$vararg_buffer16);
 if (!($not$or$cond4)) {
  $87 = HEAP32[_stdout>>2]|0;
  $88 = (_out_board($ptree,$87,$12,0)|0);
  $89 = ($88|0)<(0);
  if ($89) {
   $$1 = $88;
   STACKTOP = sp;return ($$1|0);
  }
 }
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function _mnj_reset_tbl($sd,$seed) {
 $sd = $sd|0;
 $seed = $seed|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0;
 var $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $14 = 0, $15 = 0.0;
 var $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0;
 var $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0;
 var $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0;
 var $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0;
 var $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, $average$010 = 0.0, $average$14 = 0.0, $deviation$011 = 0.0, $deviation$15 = 0.0, $exitcond = 0, $exitcond18 = 0, $i$012 = 0, $i$16 = 0;
 var $u = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $u = sp + 28|0;
 $0 = ($sd|0)<(1);
 $1 = (_load_fv()|0);
 if ($0) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($1|0)<(0);
 if ($2) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (_clear_trans_table()|0);
 $4 = ($3|0)<(0);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 _ehash_clear();
 _ini_rand($seed);
 $5 = (+($sd|0));
 $average$010 = 0.0;$deviation$011 = 0.0;$i$012 = 0;
 while(1) {
  $6 = (_rand32()|0);
  $7 = (+($6>>>0));
  $8 = $7 / 4294967295.0;
  $9 = $8 + -6.0;
  $10 = (_rand32()|0);
  $11 = (+($10>>>0));
  $12 = $11 / 4294967295.0;
  $13 = $9 + $12;
  $14 = (_rand32()|0);
  $15 = (+($14>>>0));
  $16 = $15 / 4294967295.0;
  $17 = $13 + $16;
  $18 = (_rand32()|0);
  $19 = (+($18>>>0));
  $20 = $19 / 4294967295.0;
  $21 = $17 + $20;
  $22 = (_rand32()|0);
  $23 = (+($22>>>0));
  $24 = $23 / 4294967295.0;
  $25 = $21 + $24;
  $26 = (_rand32()|0);
  $27 = (+($26>>>0));
  $28 = $27 / 4294967295.0;
  $29 = $25 + $28;
  $30 = (_rand32()|0);
  $31 = (+($30>>>0));
  $32 = $31 / 4294967295.0;
  $33 = $29 + $32;
  $34 = (_rand32()|0);
  $35 = (+($34>>>0));
  $36 = $35 / 4294967295.0;
  $37 = $33 + $36;
  $38 = (_rand32()|0);
  $39 = (+($38>>>0));
  $40 = $39 / 4294967295.0;
  $41 = $37 + $40;
  $42 = (_rand32()|0);
  $43 = (+($42>>>0));
  $44 = $43 / 4294967295.0;
  $45 = $41 + $44;
  $46 = (_rand32()|0);
  $47 = (+($46>>>0));
  $48 = $47 / 4294967295.0;
  $49 = $45 + $48;
  $50 = (_rand32()|0);
  $51 = (+($50>>>0));
  $52 = $51 / 4294967295.0;
  $53 = $49 + $52;
  $54 = $5 * $53;
  $55 = $average$010 + $54;
  $56 = $54 * $54;
  $57 = $deviation$011 + $56;
  $58 = (34184504 + ($i$012<<1)|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59&65535;
  $61 = (~~(($54)));
  $62 = (($60) + ($61))|0;
  $63 = $62&65535;
  HEAP16[$58>>1] = $63;
  $64 = (($i$012) + 1)|0;
  $exitcond18 = ($64|0)==(88292106);
  if ($exitcond18) {
   $average$14 = $55;$deviation$15 = $57;$i$16 = 0;
   break;
  } else {
   $average$010 = $55;$deviation$011 = $57;$i$012 = $64;
  }
 }
 while(1) {
  $65 = (_rand32()|0);
  $66 = (+($65>>>0));
  $67 = $66 / 4294967295.0;
  $68 = $67 + -6.0;
  $69 = (_rand32()|0);
  $70 = (+($69>>>0));
  $71 = $70 / 4294967295.0;
  $72 = $68 + $71;
  $73 = (_rand32()|0);
  $74 = (+($73>>>0));
  $75 = $74 / 4294967295.0;
  $76 = $72 + $75;
  $77 = (_rand32()|0);
  $78 = (+($77>>>0));
  $79 = $78 / 4294967295.0;
  $80 = $76 + $79;
  $81 = (_rand32()|0);
  $82 = (+($81>>>0));
  $83 = $82 / 4294967295.0;
  $84 = $80 + $83;
  $85 = (_rand32()|0);
  $86 = (+($85>>>0));
  $87 = $86 / 4294967295.0;
  $88 = $84 + $87;
  $89 = (_rand32()|0);
  $90 = (+($89>>>0));
  $91 = $90 / 4294967295.0;
  $92 = $88 + $91;
  $93 = (_rand32()|0);
  $94 = (+($93>>>0));
  $95 = $94 / 4294967295.0;
  $96 = $92 + $95;
  $97 = (_rand32()|0);
  $98 = (+($97>>>0));
  $99 = $98 / 4294967295.0;
  $100 = $96 + $99;
  $101 = (_rand32()|0);
  $102 = (+($101>>>0));
  $103 = $102 / 4294967295.0;
  $104 = $100 + $103;
  $105 = (_rand32()|0);
  $106 = (+($105>>>0));
  $107 = $106 / 4294967295.0;
  $108 = $104 + $107;
  $109 = (_rand32()|0);
  $110 = (+($109>>>0));
  $111 = $110 / 4294967295.0;
  $112 = $108 + $111;
  $113 = $5 * $112;
  $114 = $average$14 + $113;
  $115 = $113 * $113;
  $116 = $deviation$15 + $115;
  $117 = (210768720 + ($i$16<<1)|0);
  $118 = HEAP16[$117>>1]|0;
  $119 = $118&65535;
  $120 = (~~(($113)));
  $121 = (($119) + ($120))|0;
  $122 = $121&65535;
  HEAP16[$117>>1] = $122;
  $123 = (($i$16) + 1)|0;
  $exitcond = ($123|0)==(4842018);
  if ($exitcond) {
   break;
  } else {
   $average$14 = $114;$deviation$15 = $116;$i$16 = $123;
  }
 }
 $124 = (_get_elapsed($u)|0);
 $125 = ($124|0)<(0);
 if ($125) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $126 = $116 / 93134124.0;
 $127 = (+Math_sqrt((+$126)));
 $128 = $114 / 93134124.0;
 $129 = HEAP32[$u>>2]|0;
 _ini_rand($129);
 _out(221112856,$vararg_buffer);
 HEAPF64[tempDoublePtr>>3]=$128;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
 _out(221112912,$vararg_buffer1);
 HEAPF64[tempDoublePtr>>3]=$127;HEAP32[$vararg_buffer3>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer3+4>>2]=HEAP32[tempDoublePtr+4>>2];
 _out(221112952,$vararg_buffer3);
 $130 = HEAP32[$u>>2]|0;
 HEAP32[$vararg_buffer6>>2] = $130;
 _out(221112992,$vararg_buffer6);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _memory_alloc($nbytes) {
 $nbytes = $nbytes|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc($nbytes)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[220526664>>2] = 221113008;
 }
 STACKTOP = sp;return ($0|0);
}
function _memory_free($p) {
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($p);
 STACKTOP = sp;return 1;
}
function _load_fv() {
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[216>>2]|0;
 $1 = (_file_open($0,221113024)|0);
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $$0 = -2;
  } else {
   $3 = (_fread((34184504|0),2,88292106,($1|0))|0);
   $4 = ($3|0)==(88292106);
   if (!($4)) {
    $5 = HEAP32[240>>2]|0;
    HEAP32[220526664>>2] = $5;
    $$0 = -2;
    break;
   }
   $6 = (_fread((210768720|0),2,4842018,($1|0))|0);
   $7 = ($6|0)==(4842018);
   if ($7) {
    $9 = (_file_close($1)|0);
    $10 = ($9|0)<(0);
    $$ = $10 ? $9 : 1;
    $$0 = $$;
    break;
   } else {
    $8 = HEAP32[240>>2]|0;
    HEAP32[220526664>>2] = $8;
    $$0 = -2;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ini($ptree) {
 $ptree = $ptree|0;
 var $$0 = 0, $$ph$i = 0, $$ph106$i = 0, $$ph107$i = 0, $$ph108$i = 0, $$ph127$i = 0, $$ph128$i = 0, $$ph129$i = 0, $$ph146$i = 0, $$ph147$i = 0, $$ph148$i = 0, $$ph165$i = 0, $$ph166$i = 0, $$ph167$i = 0, $$ph184$i = 0, $$ph185$i = 0, $$ph186$i = 0, $$ph91$i = 0, $$ph92$i = 0, $$pre$i = 0;
 var $$pre85$i = 0, $$pre86$i = 0, $$pre87$i = 0, $$pre88$i = 0, $$pre89$i = 0, $$pre90$i = 0, $$pre91$i = 0, $$pre92$i = 0, $$pre93$i = 0, $$pre94$i = 0, $$pre95$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0;
 var $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0;
 var $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0;
 var $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0;
 var $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0;
 var $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0;
 var $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0;
 var $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0;
 var $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0;
 var $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0;
 var $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0;
 var $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0;
 var $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0;
 var $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0;
 var $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0;
 var $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0;
 var $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0;
 var $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0;
 var $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0;
 var $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0;
 var $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0;
 var $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0;
 var $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0;
 var $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0;
 var $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0;
 var $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0;
 var $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0;
 var $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0;
 var $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0;
 var $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0;
 var $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0;
 var $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0;
 var $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0;
 var $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0;
 var $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0;
 var $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0;
 var $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0;
 var $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0;
 var $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0;
 var $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0;
 var $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0;
 var $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0;
 var $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0;
 var $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0;
 var $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0;
 var $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0;
 var $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0;
 var $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0;
 var $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0;
 var $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0;
 var $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0;
 var $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0;
 var $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0;
 var $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0;
 var $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0;
 var $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0;
 var $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0;
 var $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0;
 var $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0;
 var $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0;
 var $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0;
 var $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0;
 var $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0;
 var $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0;
 var $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0;
 var $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0;
 var $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0;
 var $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0;
 var $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0;
 var $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0;
 var $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0;
 var $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0;
 var $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0;
 var $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0;
 var $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0;
 var $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0;
 var $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0;
 var $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0;
 var $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0;
 var $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0;
 var $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0;
 var $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0;
 var $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0;
 var $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0;
 var $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0;
 var $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0;
 var $999 = 0, $abb_minus10dir$i = 0, $abb_minus1dir$i = 0, $abb_minus8dir$i = 0, $abb_minus9dir$i = 0, $abb_plus10dir$i = 0, $abb_plus1dir$i = 0, $abb_plus8dir$i = 0, $abb_plus9dir$i = 0, $bb$sroa$0$0$i$i = 0, $bb$sroa$0$0$i17$i = 0, $bb$sroa$0$0$i21$i = 0, $bb$sroa$0$0$i25$i = 0, $bb$sroa$0$041$i = 0, $bb$sroa$0$144$i = 0, $bb$sroa$0$250$i = 0, $bb$sroa$0$356$i = 0, $bb$sroa$1$0$i$i = 0, $bb$sroa$1$0$i16$i = 0, $bb$sroa$1$0$i20$i = 0;
 var $bb$sroa$1$0$i24$i = 0, $bb$sroa$1$042$i = 0, $bb$sroa$1$145$i = 0, $bb$sroa$1$251$i = 0, $bb$sroa$1$357$i = 0, $bb$sroa$2$0$i$i = 0, $bb$sroa$2$0$i15$i = 0, $bb$sroa$2$0$i19$i = 0, $bb$sroa$2$0$i23$i = 0, $bb$sroa$2$043$i = 0, $bb$sroa$2$146$i = 0, $bb$sroa$2$252$i = 0, $bb$sroa$2$358$i = 0, $bb_check$sroa$0$029$i = 0, $bb_check$sroa$0$132$i = 0, $bb_check$sroa$0$236$i = 0, $bb_check$sroa$0$346$i = 0, $bb_check$sroa$0$450$i = 0, $bb_check$sroa$0$556$i = 0, $bb_check$sroa$0$661$i = 0;
 var $bb_check$sroa$0$775$i = 0, $bb_check$sroa$1$028$i = 0, $bb_check$sroa$1$131$i = 0, $bb_check$sroa$1$240$i = 0, $bb_check$sroa$1$345$i = 0, $bb_check$sroa$1$455$i = 0, $bb_check$sroa$1$560$i = 0, $bb_check$sroa$1$669$i = 0, $bb_check$sroa$1$774$i = 0, $bb_check$sroa$2$027$i = 0, $bb_check$sroa$2$130$i = 0, $bb_check$sroa$2$244$i = 0, $bb_check$sroa$2$354$i = 0, $bb_check$sroa$2$459$i = 0, $bb_check$sroa$2$565$i = 0, $bb_check$sroa$2$673$i = 0, $bb_check$sroa$2$779$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i12 = 0;
 var $exitcond$i4 = 0, $exitcond$i7 = 0, $exitcond$i8 = 0, $exitcond280$i = 0, $exitcond281$i = 0, $exitcond282$i = 0, $exitcond4$i = 0, $exitcond7$i = 0, $exitcond74$i = 0, $exitcond76$i = 0, $exitcond77$i = 0, $exitcond79$i = 0, $exitcond80$i = 0, $exitcond81$i = 0, $exitcond82$i = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i2 = 0, $i$01$i = 0, $i$01$i1 = 0, $i$0208$i = 0;
 var $i$06$i = 0, $i$067$us$i = 0, $i$10196$i = 0, $i$11168$i = 0, $i$12$i = 0, $i$12177$i = 0, $i$15$i = 0, $i$193$i = 0, $i$296$i = 0, $i$3109$i = 0, $i$4115$i = 0, $i$470 = 0, $i$5130$i = 0, $i$6139$i = 0, $i$7149$i = 0, $i$8158$i = 0, $i$9187$i = 0, $ifile$0$neg$i = 0, $ifile$0$neg204$i = 0, $ifile$0203$i = 0;
 var $ifile$069$i = 0, $ifrom$063$i = 0, $ifrom$138$i = 0, $iking$083$i = 0, $irank$0$neg$i = 0, $irank$0$neg207$i = 0, $irank$0206$i = 0, $irank$072$i = 0, $isquare$073$i = 0, $isquare$166$i = 0, $ito$136$i = 0, $j$01$i = 0, $or$cond$i$i = 0, $or$cond$i1$i = 0, $or$cond$i11$i = 0, $or$cond$i11$us$i = 0, $or$cond$i13$i = 0, $or$cond$i15$i = 0, $or$cond$i25$i = 0, $or$cond$i27$i = 0;
 var $or$cond$i29$i = 0, $or$cond$i3$i = 0, $or$cond$i3$us$i = 0, $or$cond$i31$i = 0, $or$cond$i5$i = 0, $or$cond$i7$i = 0, $or$cond$i85$i = 0, $or$cond$i87$i = 0, $or$cond$i89$i = 0, $or$cond$i9$i = 0, $p$i = 0, $pcs$0201$i = 0, $scevgep$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 7872|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 8|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 24|0;
 $abb_plus1dir$i = sp + 1972|0;
 $abb_plus8dir$i = sp + 1000|0;
 $abb_plus9dir$i = sp + 28|0;
 $abb_plus10dir$i = sp + 2944|0;
 $abb_minus1dir$i = sp + 3916|0;
 $abb_minus8dir$i = sp + 4888|0;
 $abb_minus9dir$i = sp + 5860|0;
 $abb_minus10dir$i = sp + 6832|0;
 $p$i = sp + 7808|0;
 $0 = HEAP32[216>>2]|0;
 $1 = (_file_open($0,221113024)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (_fread((34184504|0),2,88292106,($1|0))|0);
 $4 = ($3|0)==(88292106);
 if (!($4)) {
  $5 = HEAP32[240>>2]|0;
  HEAP32[220526664>>2] = $5;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (_fread((210768720|0),2,4842018,($1|0))|0);
 $7 = ($6|0)==(4842018);
 if (!($7)) {
  $8 = HEAP32[240>>2]|0;
  HEAP32[220526664>>2] = $8;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (_file_close($1)|0);
 $10 = ($9|0)<(0);
 if ($10) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 dest=34184376+0|0; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=34184184+0|0; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=34184312+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[((34184376 + 64|0))>>2] = 87;
 HEAP32[((34184376 + 68|0))>>2] = 232;
 HEAP32[((34184376 + 72|0))>>2] = 257;
 HEAP32[((34184376 + 76|0))>>2] = 369;
 HEAP32[((34184376 + 80|0))>>2] = 444;
 HEAP32[((34184376 + 84|0))>>2] = 569;
 HEAP32[((34184376 + 88|0))>>2] = 642;
 HEAP32[((34184376 + 92|0))>>2] = 15000;
 HEAP32[((34184376 + 96|0))>>2] = 534;
 HEAP32[((34184376 + 100|0))>>2] = 489;
 HEAP32[((34184376 + 104|0))>>2] = 510;
 HEAP32[((34184376 + 108|0))>>2] = 495;
 HEAP32[((34184376 + 116|0))>>2] = 827;
 HEAP32[((34184376 + 120|0))>>2] = 945;
 HEAP32[34180920>>2] = 0;
 HEAP8[220526152>>0] = 0;
 HEAP32[33555960>>2] = 0;
 HEAP32[((33556568 + 576|0))>>2] = 0;
 HEAP32[34180944>>2] = 10000;
 HEAP32[34184160>>2] = 991;
 $11 = 34180912;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = -1;
 HEAP32[34181080>>2] = 200;
 HEAP32[34181000>>2] = 0;
 HEAP32[34181008>>2] = 10;
 HEAP32[34181016>>2] = -1;
 HEAP32[34184088>>2] = 128;
 HEAP32[34184064>>2] = 20;
 HEAP32[34184096>>2] = -1;
 HEAP32[1520>>2] = 0;
 $15 = 34180928;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = 34184168;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = 0;
 HEAP8[220452760>>0]=0&255;HEAP8[220452760+1>>0]=0>>8;
 $23 = 34184176;
 $24 = $23;
 HEAP32[$24>>2] = 0;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = 0;
 HEAP32[33571392>>2] = 0;
 HEAP32[((33571392 + 4|0))>>2] = 0;
 HEAP8[((33571392 + 514|0))>>0] = 0;
 HEAP8[((33571392 + 513|0))>>0] = 0;
 HEAP8[((33571392 + 512|0))>>0] = 0;
 HEAP32[((33571392 + 516|0))>>2] = 0;
 HEAP32[((33571392 + 520|0))>>2] = 0;
 HEAP8[((33571392 + 1030|0))>>0] = 0;
 HEAP8[((33571392 + 1029|0))>>0] = 0;
 HEAP8[((33571392 + 1028|0))>>0] = 0;
 HEAP32[221099712>>2] = -1;
 HEAP32[221099720>>2] = 0;
 HEAP32[221102520>>2] = -1;
 HEAP32[221102528>>2] = 0;
 HEAP32[221098904>>2] = 0;
 $27 = (_sysconf(2)|0);
 HEAP32[221098896>>2] = $27;
 $i$470 = 0;
 while(1) {
  $i$01$i = 0;
  while(1) {
   $30 = (8 - ($i$01$i))|0;
   $31 = 1 << $30;
   $32 = $31 & $i$470;
   $33 = ($32|0)==(0);
   $29 = (($i$01$i) + 1)|0;
   if (!($33)) {
    $i$0$lcssa$i = $i$01$i;
    break;
   }
   $28 = ($29|0)<(9);
   if ($28) {
    $i$01$i = $29;
   } else {
    $i$0$lcssa$i = $29;
    break;
   }
  }
  $34 = $i$0$lcssa$i&255;
  $35 = (221110320 + ($i$470)|0);
  HEAP8[$35>>0] = $34;
  $i$01$i1 = 8;
  while(1) {
   $37 = (8 - ($i$01$i1))|0;
   $38 = 1 << $37;
   $39 = $38 & $i$470;
   $40 = ($39|0)==(0);
   $41 = (($i$01$i1) + -1)|0;
   if (!($40)) {
    $i$0$lcssa$i2 = $i$01$i1;
    break;
   }
   $36 = ($i$01$i1|0)>(0);
   if ($36) {
    $i$01$i1 = $41;
   } else {
    $i$0$lcssa$i2 = $41;
    break;
   }
  }
  $42 = $i$0$lcssa$i2&255;
  $43 = (221110832 + ($i$470)|0);
  HEAP8[$43>>0] = $42;
  $44 = (($i$470) + 1)|0;
  $exitcond = ($44|0)==(512);
  if ($exitcond) {
   break;
  } else {
   $i$470 = $44;
  }
 }
 _ini_rand(5489);
 dest=$p$i+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $45 = (($p$i) + 4|0);
 HEAP32[$45>>2] = 1;
 $46 = (($p$i) + 8|0);
 HEAP32[$46>>2] = 3;
 $47 = (($p$i) + 36|0);
 HEAP32[$47>>2] = 3;
 $48 = (($p$i) + 12|0);
 HEAP32[$48>>2] = 3;
 $49 = (($p$i) + 40|0);
 HEAP32[$49>>2] = 3;
 $50 = (($p$i) + 44|0);
 HEAP32[$50>>2] = 3;
 $51 = (($p$i) + 16|0);
 HEAP32[$51>>2] = 4;
 $52 = (($p$i) + 48|0);
 HEAP32[$52>>2] = 4;
 $53 = (($p$i) + 20|0);
 HEAP32[$53>>2] = 5;
 $54 = (($p$i) + 24|0);
 HEAP32[$54>>2] = 6;
 $55 = (($p$i) + 56|0);
 HEAP32[$55>>2] = 7;
 $56 = (($p$i) + 28|0);
 HEAP32[$56>>2] = 7;
 $57 = (($p$i) + 60|0);
 HEAP32[$57>>2] = 8;
 $58 = (($p$i) + 32|0);
 HEAP32[$58>>2] = 99;
 $i$12$i = 0;
 while(1) {
  $59 = (($p$i) + ($i$12$i<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $j$01$i = 0;
  while(1) {
   $61 = (($p$i) + ($j$01$i<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($62) + -1)|0;
   $64 = ($60|0)<($63|0);
   do {
    if ($64) {
     $65 = ((220524872 + ($i$12$i<<4)|0) + ($j$01$i)|0);
     HEAP8[$65>>0] = 2;
    } else {
     $66 = (($62) + 1)|0;
     $67 = ($60|0)>($66|0);
     $68 = ((220524872 + ($i$12$i<<4)|0) + ($j$01$i)|0);
     if ($67) {
      HEAP8[$68>>0] = 1;
      break;
     } else {
      HEAP8[$68>>0] = 0;
      break;
     }
    }
   } while(0);
   $69 = (($j$01$i) + 1)|0;
   $exitcond$i = ($69|0)==(16);
   if ($exitcond$i) {
    break;
   } else {
    $j$01$i = $69;
   }
  }
  $70 = (($i$12$i) + 1)|0;
  $exitcond4$i = ($70|0)==(16);
  if ($exitcond4$i) {
   break;
  } else {
   $i$12$i = $70;
  }
 }
 $isquare$073$i = 0;
 while(1) {
  $71 = (221113080 + ($isquare$073$i)|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = (221113168 + ($isquare$073$i)|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = (221113256 + ($isquare$073$i)|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = ($isquare$073$i|0)>(53);
  do {
   if ($80) {
    $81 = (80 - ($isquare$073$i))|0;
    $82 = 1 << $81;
    $bb$sroa$0$0$i$i = 0;$bb$sroa$1$0$i$i = 0;$bb$sroa$2$0$i$i = $82;
   } else {
    $83 = ($isquare$073$i|0)>(26);
    if ($83) {
     $84 = (53 - ($isquare$073$i))|0;
     $85 = 1 << $84;
     $bb$sroa$0$0$i$i = 0;$bb$sroa$1$0$i$i = $85;$bb$sroa$2$0$i$i = 0;
     break;
    } else {
     $86 = (26 - ($isquare$073$i))|0;
     $87 = 1 << $86;
     $bb$sroa$0$0$i$i = $87;$bb$sroa$1$0$i$i = 0;$bb$sroa$2$0$i$i = 0;
     break;
    }
   }
  } while(0);
  $88 = (34156304 + (($isquare$073$i*12)|0)|0);
  HEAP32[$88>>2] = $bb$sroa$0$0$i$i;
  $89 = ((34156304 + (($isquare$073$i*12)|0)|0) + 4|0);
  HEAP32[$89>>2] = $bb$sroa$1$0$i$i;
  $90 = ((34156304 + (($isquare$073$i*12)|0)|0) + 8|0);
  HEAP32[$90>>2] = $bb$sroa$2$0$i$i;
  $91 = ($72&255)>(53);
  do {
   if ($91) {
    $92 = (80 - ($73))|0;
    $93 = 1 << $92;
    $bb$sroa$0$0$i25$i = 0;$bb$sroa$1$0$i24$i = 0;$bb$sroa$2$0$i23$i = $93;
   } else {
    $94 = ($72&255)>(26);
    if ($94) {
     $95 = (53 - ($73))|0;
     $96 = 1 << $95;
     $bb$sroa$0$0$i25$i = 0;$bb$sroa$1$0$i24$i = $96;$bb$sroa$2$0$i23$i = 0;
     break;
    } else {
     $97 = (26 - ($73))|0;
     $98 = 1 << $97;
     $bb$sroa$0$0$i25$i = $98;$bb$sroa$1$0$i24$i = 0;$bb$sroa$2$0$i23$i = 0;
     break;
    }
   }
  } while(0);
  $99 = (34157280 + (($isquare$073$i*12)|0)|0);
  HEAP32[$99>>2] = $bb$sroa$0$0$i25$i;
  $100 = ((34157280 + (($isquare$073$i*12)|0)|0) + 4|0);
  HEAP32[$100>>2] = $bb$sroa$1$0$i24$i;
  $101 = ((34157280 + (($isquare$073$i*12)|0)|0) + 8|0);
  HEAP32[$101>>2] = $bb$sroa$2$0$i23$i;
  $102 = ($75&255)>(53);
  do {
   if ($102) {
    $103 = (80 - ($76))|0;
    $104 = 1 << $103;
    $bb$sroa$0$0$i21$i = 0;$bb$sroa$1$0$i20$i = 0;$bb$sroa$2$0$i19$i = $104;
   } else {
    $105 = ($75&255)>(26);
    if ($105) {
     $106 = (53 - ($76))|0;
     $107 = 1 << $106;
     $bb$sroa$0$0$i21$i = 0;$bb$sroa$1$0$i20$i = $107;$bb$sroa$2$0$i19$i = 0;
     break;
    } else {
     $108 = (26 - ($76))|0;
     $109 = 1 << $108;
     $bb$sroa$0$0$i21$i = $109;$bb$sroa$1$0$i20$i = 0;$bb$sroa$2$0$i19$i = 0;
     break;
    }
   }
  } while(0);
  $110 = (34158256 + (($isquare$073$i*12)|0)|0);
  HEAP32[$110>>2] = $bb$sroa$0$0$i21$i;
  $111 = ((34158256 + (($isquare$073$i*12)|0)|0) + 4|0);
  HEAP32[$111>>2] = $bb$sroa$1$0$i20$i;
  $112 = ((34158256 + (($isquare$073$i*12)|0)|0) + 8|0);
  HEAP32[$112>>2] = $bb$sroa$2$0$i19$i;
  $113 = ($78&255)>(53);
  do {
   if ($113) {
    $114 = (80 - ($79))|0;
    $115 = 1 << $114;
    $bb$sroa$0$0$i17$i = 0;$bb$sroa$1$0$i16$i = 0;$bb$sroa$2$0$i15$i = $115;
   } else {
    $116 = ($78&255)>(26);
    if ($116) {
     $117 = (53 - ($79))|0;
     $118 = 1 << $117;
     $bb$sroa$0$0$i17$i = 0;$bb$sroa$1$0$i16$i = $118;$bb$sroa$2$0$i15$i = 0;
     break;
    } else {
     $119 = (26 - ($79))|0;
     $120 = 1 << $119;
     $bb$sroa$0$0$i17$i = $120;$bb$sroa$1$0$i16$i = 0;$bb$sroa$2$0$i15$i = 0;
     break;
    }
   }
  } while(0);
  $121 = (34159232 + (($isquare$073$i*12)|0)|0);
  HEAP32[$121>>2] = $bb$sroa$0$0$i17$i;
  $122 = ((34159232 + (($isquare$073$i*12)|0)|0) + 4|0);
  HEAP32[$122>>2] = $bb$sroa$1$0$i16$i;
  $123 = ((34159232 + (($isquare$073$i*12)|0)|0) + 8|0);
  HEAP32[$123>>2] = $bb$sroa$2$0$i15$i;
  $124 = (($isquare$073$i) + 1)|0;
  $exitcond82$i = ($124|0)==(81);
  if ($exitcond82$i) {
   $irank$072$i = 0;
   break;
  } else {
   $isquare$073$i = $124;
  }
 }
 while(1) {
  $125 = ($irank$072$i*9)|0;
  $ifile$069$i = 0;
  while(1) {
   $126 = (($ifile$069$i) + ($125))|0;
   $127 = ((($abb_plus1dir$i) + (($126*12)|0)|0) + 8|0);
   HEAP32[$127>>2] = 0;
   $128 = ((($abb_plus1dir$i) + (($126*12)|0)|0) + 4|0);
   HEAP32[$128>>2] = 0;
   $129 = (($abb_plus1dir$i) + (($126*12)|0)|0);
   HEAP32[$129>>2] = 0;
   $130 = ((($abb_plus8dir$i) + (($126*12)|0)|0) + 8|0);
   HEAP32[$130>>2] = 0;
   $131 = ((($abb_plus8dir$i) + (($126*12)|0)|0) + 4|0);
   HEAP32[$131>>2] = 0;
   $132 = (($abb_plus8dir$i) + (($126*12)|0)|0);
   HEAP32[$132>>2] = 0;
   $133 = ((($abb_plus9dir$i) + (($126*12)|0)|0) + 8|0);
   HEAP32[$133>>2] = 0;
   $134 = ((($abb_plus9dir$i) + (($126*12)|0)|0) + 4|0);
   HEAP32[$134>>2] = 0;
   $135 = (($abb_plus9dir$i) + (($126*12)|0)|0);
   HEAP32[$135>>2] = 0;
   $136 = ((($abb_plus10dir$i) + (($126*12)|0)|0) + 8|0);
   HEAP32[$136>>2] = 0;
   $137 = ((($abb_plus10dir$i) + (($126*12)|0)|0) + 4|0);
   HEAP32[$137>>2] = 0;
   $138 = (($abb_plus10dir$i) + (($126*12)|0)|0);
   HEAP32[$138>>2] = 0;
   $139 = ((($abb_minus1dir$i) + (($126*12)|0)|0) + 8|0);
   HEAP32[$139>>2] = 0;
   $140 = ((($abb_minus1dir$i) + (($126*12)|0)|0) + 4|0);
   HEAP32[$140>>2] = 0;
   $141 = (($abb_minus1dir$i) + (($126*12)|0)|0);
   HEAP32[$141>>2] = 0;
   $142 = ((($abb_minus8dir$i) + (($126*12)|0)|0) + 8|0);
   HEAP32[$142>>2] = 0;
   $143 = ((($abb_minus8dir$i) + (($126*12)|0)|0) + 4|0);
   HEAP32[$143>>2] = 0;
   $144 = (($abb_minus8dir$i) + (($126*12)|0)|0);
   HEAP32[$144>>2] = 0;
   $145 = ((($abb_minus9dir$i) + (($126*12)|0)|0) + 8|0);
   HEAP32[$145>>2] = 0;
   $146 = ((($abb_minus9dir$i) + (($126*12)|0)|0) + 4|0);
   HEAP32[$146>>2] = 0;
   $147 = (($abb_minus9dir$i) + (($126*12)|0)|0);
   HEAP32[$147>>2] = 0;
   $148 = ((($abb_minus10dir$i) + (($126*12)|0)|0) + 8|0);
   HEAP32[$148>>2] = 0;
   $149 = ((($abb_minus10dir$i) + (($126*12)|0)|0) + 4|0);
   HEAP32[$149>>2] = 0;
   $150 = (($abb_minus10dir$i) + (($126*12)|0)|0);
   HEAP32[$150>>2] = 0;
   $157 = 0;$161 = 0;$165 = 0;$175 = 0;$179 = 0;$183 = 0;$189 = 0;$193 = 0;$197 = 0;$202 = 0;$206 = 0;$210 = 0;$215 = 0;$219 = 0;$223 = 0;$231 = 0;$235 = 0;$239 = 0;$245 = 0;$249 = 0;$253 = 0;$258 = 0;$262 = 0;$266 = 0;$i$067$us$i = 1;
   while(1) {
    $151 = (($i$067$us$i) + ($ifile$069$i))|0;
    $152 = ($151>>>0)<(9);
    if ($152) {
     $153 = (($151) + ($125))|0;
     $154 = (34156304 + (($153*12)|0)|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = $155 ^ $157;
     HEAP32[$129>>2] = $156;
     $158 = ((34156304 + (($153*12)|0)|0) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $159 ^ $161;
     HEAP32[$128>>2] = $160;
     $162 = ((34156304 + (($153*12)|0)|0) + 8|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = $163 ^ $165;
     HEAP32[$127>>2] = $164;
     $2458 = $164;$2459 = $160;$2460 = $156;
    } else {
     $2458 = $165;$2459 = $161;$2460 = $157;
    }
    $166 = (($i$067$us$i) + ($irank$072$i))|0;
    $167 = (($ifile$069$i) - ($i$067$us$i))|0;
    $168 = ($166>>>0)<(9);
    $169 = ($167>>>0)<(9);
    $or$cond$i11$us$i = $168 & $169;
    if ($or$cond$i11$us$i) {
     $170 = ($166*9)|0;
     $171 = (($170) + ($167))|0;
     $172 = (34156304 + (($171*12)|0)|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = $173 ^ $175;
     HEAP32[$132>>2] = $174;
     $176 = ((34156304 + (($171*12)|0)|0) + 4|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = $177 ^ $179;
     HEAP32[$131>>2] = $178;
     $180 = ((34156304 + (($171*12)|0)|0) + 8|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = $181 ^ $183;
     HEAP32[$130>>2] = $182;
     $2461 = $182;$2462 = $178;$2463 = $174;
    } else {
     $2461 = $183;$2462 = $179;$2463 = $175;
    }
    if ($168) {
     $184 = ($166*9)|0;
     $185 = (($184) + ($ifile$069$i))|0;
     $186 = (34156304 + (($185*12)|0)|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = $187 ^ $189;
     HEAP32[$135>>2] = $188;
     $190 = ((34156304 + (($185*12)|0)|0) + 4|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = $191 ^ $193;
     HEAP32[$134>>2] = $192;
     $194 = ((34156304 + (($185*12)|0)|0) + 8|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = $195 ^ $197;
     HEAP32[$133>>2] = $196;
     if ($152) {
      $198 = (($184) + ($151))|0;
      $199 = (34156304 + (($198*12)|0)|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = $200 ^ $202;
      HEAP32[$138>>2] = $201;
      $203 = ((34156304 + (($198*12)|0)|0) + 4|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = $204 ^ $206;
      HEAP32[$137>>2] = $205;
      $207 = ((34156304 + (($198*12)|0)|0) + 8|0);
      $208 = HEAP32[$207>>2]|0;
      $209 = $208 ^ $210;
      HEAP32[$136>>2] = $209;
      $2464 = $188;$2465 = $192;$2466 = $196;$2467 = $209;$2468 = $205;$2469 = $201;
     } else {
      $2464 = $188;$2465 = $192;$2466 = $196;$2467 = $210;$2468 = $206;$2469 = $202;
     }
    } else {
     $2464 = $189;$2465 = $193;$2466 = $197;$2467 = $210;$2468 = $206;$2469 = $202;
    }
    if ($169) {
     $211 = (($167) + ($125))|0;
     $212 = (34156304 + (($211*12)|0)|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = $213 ^ $215;
     HEAP32[$141>>2] = $214;
     $216 = ((34156304 + (($211*12)|0)|0) + 4|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = $217 ^ $219;
     HEAP32[$140>>2] = $218;
     $220 = ((34156304 + (($211*12)|0)|0) + 8|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = $221 ^ $223;
     HEAP32[$139>>2] = $222;
     $2470 = $222;$2471 = $218;$2472 = $214;
    } else {
     $2470 = $223;$2471 = $219;$2472 = $215;
    }
    $224 = (($irank$072$i) - ($i$067$us$i))|0;
    $225 = ($224>>>0)<(9);
    $or$cond$i3$us$i = $225 & $152;
    if ($or$cond$i3$us$i) {
     $226 = ($224*9)|0;
     $227 = (($226) + ($151))|0;
     $228 = (34156304 + (($227*12)|0)|0);
     $229 = HEAP32[$228>>2]|0;
     $230 = $229 ^ $231;
     HEAP32[$144>>2] = $230;
     $232 = ((34156304 + (($227*12)|0)|0) + 4|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = $233 ^ $235;
     HEAP32[$143>>2] = $234;
     $236 = ((34156304 + (($227*12)|0)|0) + 8|0);
     $237 = HEAP32[$236>>2]|0;
     $238 = $237 ^ $239;
     HEAP32[$142>>2] = $238;
     $2473 = $238;$2474 = $234;$2475 = $230;
    } else {
     $2473 = $239;$2474 = $235;$2475 = $231;
    }
    if ($225) {
     $240 = ($224*9)|0;
     $241 = (($240) + ($ifile$069$i))|0;
     $242 = (34156304 + (($241*12)|0)|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = $243 ^ $245;
     HEAP32[$147>>2] = $244;
     $246 = ((34156304 + (($241*12)|0)|0) + 4|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = $247 ^ $249;
     HEAP32[$146>>2] = $248;
     $250 = ((34156304 + (($241*12)|0)|0) + 8|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = $251 ^ $253;
     HEAP32[$145>>2] = $252;
     if ($169) {
      $254 = (($240) + ($167))|0;
      $255 = (34156304 + (($254*12)|0)|0);
      $256 = HEAP32[$255>>2]|0;
      $257 = $256 ^ $258;
      HEAP32[$150>>2] = $257;
      $259 = ((34156304 + (($254*12)|0)|0) + 4|0);
      $260 = HEAP32[$259>>2]|0;
      $261 = $260 ^ $262;
      HEAP32[$149>>2] = $261;
      $263 = ((34156304 + (($254*12)|0)|0) + 8|0);
      $264 = HEAP32[$263>>2]|0;
      $265 = $264 ^ $266;
      HEAP32[$148>>2] = $265;
      $2476 = $244;$2477 = $248;$2478 = $252;$2479 = $265;$2480 = $261;$2481 = $257;
     } else {
      $2476 = $244;$2477 = $248;$2478 = $252;$2479 = $266;$2480 = $262;$2481 = $258;
     }
    } else {
     $2476 = $245;$2477 = $249;$2478 = $253;$2479 = $266;$2480 = $262;$2481 = $258;
    }
    $267 = (($i$067$us$i) + 1)|0;
    $exitcond79$i = ($267|0)==(9);
    if ($exitcond79$i) {
     break;
    } else {
     $157 = $2460;$161 = $2459;$165 = $2458;$175 = $2463;$179 = $2462;$183 = $2461;$189 = $2464;$193 = $2465;$197 = $2466;$202 = $2469;$206 = $2468;$210 = $2467;$215 = $2472;$219 = $2471;$223 = $2470;$231 = $2475;$235 = $2474;$239 = $2473;$245 = $2476;$249 = $2477;$253 = $2478;$258 = $2481;$262 = $2480;$266 = $2479;$i$067$us$i = $267;
    }
   }
   $268 = (($ifile$069$i) + 1)|0;
   $exitcond80$i = ($268|0)==(9);
   if ($exitcond80$i) {
    break;
   } else {
    $ifile$069$i = $268;
   }
  }
  $269 = (($irank$072$i) + 1)|0;
  $exitcond81$i = ($269|0)==(9);
  if ($exitcond81$i) {
   $isquare$166$i = 0;
   break;
  } else {
   $irank$072$i = $269;
  }
 }
 while(1) {
  $270 = (($abb_plus1dir$i) + (($isquare$166$i*12)|0)|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = (($abb_plus8dir$i) + (($isquare$166$i*12)|0)|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = $273 | $271;
  $275 = (34160208 + (($isquare$166$i*12)|0)|0);
  $276 = ((($abb_plus1dir$i) + (($isquare$166$i*12)|0)|0) + 4|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = ((($abb_plus8dir$i) + (($isquare$166$i*12)|0)|0) + 4|0);
  $279 = HEAP32[$278>>2]|0;
  $280 = $279 | $277;
  $281 = ((34160208 + (($isquare$166$i*12)|0)|0) + 4|0);
  $282 = ((($abb_plus1dir$i) + (($isquare$166$i*12)|0)|0) + 8|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = ((($abb_plus8dir$i) + (($isquare$166$i*12)|0)|0) + 8|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = $285 | $283;
  $287 = ((34160208 + (($isquare$166$i*12)|0)|0) + 8|0);
  $288 = (($abb_plus9dir$i) + (($isquare$166$i*12)|0)|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = $274 | $289;
  $291 = ((($abb_plus9dir$i) + (($isquare$166$i*12)|0)|0) + 4|0);
  $292 = HEAP32[$291>>2]|0;
  $293 = $280 | $292;
  $294 = ((($abb_plus9dir$i) + (($isquare$166$i*12)|0)|0) + 8|0);
  $295 = HEAP32[$294>>2]|0;
  $296 = $286 | $295;
  $297 = (($abb_plus10dir$i) + (($isquare$166$i*12)|0)|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = $290 | $298;
  HEAP32[$275>>2] = $299;
  $300 = ((($abb_plus10dir$i) + (($isquare$166$i*12)|0)|0) + 4|0);
  $301 = HEAP32[$300>>2]|0;
  $302 = $293 | $301;
  HEAP32[$281>>2] = $302;
  $303 = ((($abb_plus10dir$i) + (($isquare$166$i*12)|0)|0) + 8|0);
  $304 = HEAP32[$303>>2]|0;
  $305 = $296 | $304;
  HEAP32[$287>>2] = $305;
  $306 = (($abb_minus1dir$i) + (($isquare$166$i*12)|0)|0);
  $307 = HEAP32[$306>>2]|0;
  $308 = (($abb_minus8dir$i) + (($isquare$166$i*12)|0)|0);
  $309 = HEAP32[$308>>2]|0;
  $310 = $309 | $307;
  $311 = (34161184 + (($isquare$166$i*12)|0)|0);
  $312 = ((($abb_minus1dir$i) + (($isquare$166$i*12)|0)|0) + 4|0);
  $313 = HEAP32[$312>>2]|0;
  $314 = ((($abb_minus8dir$i) + (($isquare$166$i*12)|0)|0) + 4|0);
  $315 = HEAP32[$314>>2]|0;
  $316 = $315 | $313;
  $317 = ((34161184 + (($isquare$166$i*12)|0)|0) + 4|0);
  $318 = ((($abb_minus1dir$i) + (($isquare$166$i*12)|0)|0) + 8|0);
  $319 = HEAP32[$318>>2]|0;
  $320 = ((($abb_minus8dir$i) + (($isquare$166$i*12)|0)|0) + 8|0);
  $321 = HEAP32[$320>>2]|0;
  $322 = $321 | $319;
  $323 = ((34161184 + (($isquare$166$i*12)|0)|0) + 8|0);
  $324 = (($abb_minus9dir$i) + (($isquare$166$i*12)|0)|0);
  $325 = HEAP32[$324>>2]|0;
  $326 = $310 | $325;
  $327 = ((($abb_minus9dir$i) + (($isquare$166$i*12)|0)|0) + 4|0);
  $328 = HEAP32[$327>>2]|0;
  $329 = $316 | $328;
  $330 = ((($abb_minus9dir$i) + (($isquare$166$i*12)|0)|0) + 8|0);
  $331 = HEAP32[$330>>2]|0;
  $332 = $322 | $331;
  $333 = (($abb_minus10dir$i) + (($isquare$166$i*12)|0)|0);
  $334 = HEAP32[$333>>2]|0;
  $335 = $326 | $334;
  HEAP32[$311>>2] = $335;
  $336 = ((($abb_minus10dir$i) + (($isquare$166$i*12)|0)|0) + 4|0);
  $337 = HEAP32[$336>>2]|0;
  $338 = $329 | $337;
  HEAP32[$317>>2] = $338;
  $339 = ((($abb_minus10dir$i) + (($isquare$166$i*12)|0)|0) + 8|0);
  $340 = HEAP32[$339>>2]|0;
  $341 = $332 | $340;
  HEAP32[$323>>2] = $341;
  $342 = (($isquare$166$i) + 1)|0;
  $exitcond77$i = ($342|0)==(81);
  if ($exitcond77$i) {
   $ifrom$063$i = 0;
   break;
  } else {
   $isquare$166$i = $342;
  }
 }
 while(1) {
  $scevgep$i = (220518304 + (($ifrom$063$i*81)|0)|0);
  dest=$scevgep$i+0|0; stop=dest+81|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  $343 = (($abb_plus1dir$i) + (($ifrom$063$i*12)|0)|0);
  $344 = HEAP32[$343>>2]|0;
  $345 = (($abb_minus1dir$i) + (($ifrom$063$i*12)|0)|0);
  $346 = HEAP32[$345>>2]|0;
  $347 = $346 | $344;
  $348 = ((($abb_plus1dir$i) + (($ifrom$063$i*12)|0)|0) + 4|0);
  $349 = HEAP32[$348>>2]|0;
  $350 = ((($abb_minus1dir$i) + (($ifrom$063$i*12)|0)|0) + 4|0);
  $351 = HEAP32[$350>>2]|0;
  $352 = $351 | $349;
  $353 = ((($abb_plus1dir$i) + (($ifrom$063$i*12)|0)|0) + 8|0);
  $354 = HEAP32[$353>>2]|0;
  $355 = ((($abb_minus1dir$i) + (($ifrom$063$i*12)|0)|0) + 8|0);
  $356 = HEAP32[$355>>2]|0;
  $357 = $356 | $354;
  $358 = $352 | $347;
  $359 = $358 | $357;
  $360 = ($359|0)==(0);
  if (!($360)) {
   $bb$sroa$0$041$i = $347;$bb$sroa$1$042$i = $352;$bb$sroa$2$043$i = $357;
   while(1) {
    $361 = (_first_one012($bb$sroa$0$041$i,$bb$sroa$1$042$i,$bb$sroa$2$043$i)|0);
    $362 = ((220518304 + (($ifrom$063$i*81)|0)|0) + ($361)|0);
    HEAP8[$362>>0] = 3;
    $363 = (34156304 + (($361*12)|0)|0);
    $364 = HEAP32[$363>>2]|0;
    $365 = $364 ^ $bb$sroa$0$041$i;
    $366 = ((34156304 + (($361*12)|0)|0) + 4|0);
    $367 = HEAP32[$366>>2]|0;
    $368 = $367 ^ $bb$sroa$1$042$i;
    $369 = ((34156304 + (($361*12)|0)|0) + 8|0);
    $370 = HEAP32[$369>>2]|0;
    $371 = $370 ^ $bb$sroa$2$043$i;
    $372 = $368 | $365;
    $373 = $372 | $371;
    $374 = ($373|0)==(0);
    if ($374) {
     break;
    } else {
     $bb$sroa$0$041$i = $365;$bb$sroa$1$042$i = $368;$bb$sroa$2$043$i = $371;
    }
   }
  }
  $375 = (($abb_plus8dir$i) + (($ifrom$063$i*12)|0)|0);
  $376 = HEAP32[$375>>2]|0;
  $377 = (($abb_minus8dir$i) + (($ifrom$063$i*12)|0)|0);
  $378 = HEAP32[$377>>2]|0;
  $379 = $378 | $376;
  $380 = ((($abb_plus8dir$i) + (($ifrom$063$i*12)|0)|0) + 4|0);
  $381 = HEAP32[$380>>2]|0;
  $382 = ((($abb_minus8dir$i) + (($ifrom$063$i*12)|0)|0) + 4|0);
  $383 = HEAP32[$382>>2]|0;
  $384 = $383 | $381;
  $385 = ((($abb_plus8dir$i) + (($ifrom$063$i*12)|0)|0) + 8|0);
  $386 = HEAP32[$385>>2]|0;
  $387 = ((($abb_minus8dir$i) + (($ifrom$063$i*12)|0)|0) + 8|0);
  $388 = HEAP32[$387>>2]|0;
  $389 = $388 | $386;
  $390 = $384 | $379;
  $391 = $390 | $389;
  $392 = ($391|0)==(0);
  if (!($392)) {
   $bb$sroa$0$144$i = $379;$bb$sroa$1$145$i = $384;$bb$sroa$2$146$i = $389;
   while(1) {
    $393 = (_first_one012($bb$sroa$0$144$i,$bb$sroa$1$145$i,$bb$sroa$2$146$i)|0);
    $394 = ((220518304 + (($ifrom$063$i*81)|0)|0) + ($393)|0);
    HEAP8[$394>>0] = 4;
    $395 = (34156304 + (($393*12)|0)|0);
    $396 = HEAP32[$395>>2]|0;
    $397 = $396 ^ $bb$sroa$0$144$i;
    $398 = ((34156304 + (($393*12)|0)|0) + 4|0);
    $399 = HEAP32[$398>>2]|0;
    $400 = $399 ^ $bb$sroa$1$145$i;
    $401 = ((34156304 + (($393*12)|0)|0) + 8|0);
    $402 = HEAP32[$401>>2]|0;
    $403 = $402 ^ $bb$sroa$2$146$i;
    $404 = $400 | $397;
    $405 = $404 | $403;
    $406 = ($405|0)==(0);
    if ($406) {
     break;
    } else {
     $bb$sroa$0$144$i = $397;$bb$sroa$1$145$i = $400;$bb$sroa$2$146$i = $403;
    }
   }
  }
  $407 = (($abb_plus9dir$i) + (($ifrom$063$i*12)|0)|0);
  $408 = HEAP32[$407>>2]|0;
  $409 = (($abb_minus9dir$i) + (($ifrom$063$i*12)|0)|0);
  $410 = HEAP32[$409>>2]|0;
  $411 = $410 | $408;
  $412 = ((($abb_plus9dir$i) + (($ifrom$063$i*12)|0)|0) + 4|0);
  $413 = HEAP32[$412>>2]|0;
  $414 = ((($abb_minus9dir$i) + (($ifrom$063$i*12)|0)|0) + 4|0);
  $415 = HEAP32[$414>>2]|0;
  $416 = $415 | $413;
  $417 = ((($abb_plus9dir$i) + (($ifrom$063$i*12)|0)|0) + 8|0);
  $418 = HEAP32[$417>>2]|0;
  $419 = ((($abb_minus9dir$i) + (($ifrom$063$i*12)|0)|0) + 8|0);
  $420 = HEAP32[$419>>2]|0;
  $421 = $420 | $418;
  $422 = $416 | $411;
  $423 = $422 | $421;
  $424 = ($423|0)==(0);
  if (!($424)) {
   $bb$sroa$0$250$i = $411;$bb$sroa$1$251$i = $416;$bb$sroa$2$252$i = $421;
   while(1) {
    $425 = (_first_one012($bb$sroa$0$250$i,$bb$sroa$1$251$i,$bb$sroa$2$252$i)|0);
    $426 = ((220518304 + (($ifrom$063$i*81)|0)|0) + ($425)|0);
    HEAP8[$426>>0] = 2;
    $427 = (34156304 + (($425*12)|0)|0);
    $428 = HEAP32[$427>>2]|0;
    $429 = $428 ^ $bb$sroa$0$250$i;
    $430 = ((34156304 + (($425*12)|0)|0) + 4|0);
    $431 = HEAP32[$430>>2]|0;
    $432 = $431 ^ $bb$sroa$1$251$i;
    $433 = ((34156304 + (($425*12)|0)|0) + 8|0);
    $434 = HEAP32[$433>>2]|0;
    $435 = $434 ^ $bb$sroa$2$252$i;
    $436 = $432 | $429;
    $437 = $436 | $435;
    $438 = ($437|0)==(0);
    if ($438) {
     break;
    } else {
     $bb$sroa$0$250$i = $429;$bb$sroa$1$251$i = $432;$bb$sroa$2$252$i = $435;
    }
   }
  }
  $439 = (($abb_plus10dir$i) + (($ifrom$063$i*12)|0)|0);
  $440 = HEAP32[$439>>2]|0;
  $441 = (($abb_minus10dir$i) + (($ifrom$063$i*12)|0)|0);
  $442 = HEAP32[$441>>2]|0;
  $443 = $442 | $440;
  $444 = ((($abb_plus10dir$i) + (($ifrom$063$i*12)|0)|0) + 4|0);
  $445 = HEAP32[$444>>2]|0;
  $446 = ((($abb_minus10dir$i) + (($ifrom$063$i*12)|0)|0) + 4|0);
  $447 = HEAP32[$446>>2]|0;
  $448 = $447 | $445;
  $449 = ((($abb_plus10dir$i) + (($ifrom$063$i*12)|0)|0) + 8|0);
  $450 = HEAP32[$449>>2]|0;
  $451 = ((($abb_minus10dir$i) + (($ifrom$063$i*12)|0)|0) + 8|0);
  $452 = HEAP32[$451>>2]|0;
  $453 = $452 | $450;
  $454 = $448 | $443;
  $455 = $454 | $453;
  $456 = ($455|0)==(0);
  if (!($456)) {
   $bb$sroa$0$356$i = $443;$bb$sroa$1$357$i = $448;$bb$sroa$2$358$i = $453;
   while(1) {
    $457 = (_first_one012($bb$sroa$0$356$i,$bb$sroa$1$357$i,$bb$sroa$2$358$i)|0);
    $458 = ((220518304 + (($ifrom$063$i*81)|0)|0) + ($457)|0);
    HEAP8[$458>>0] = 5;
    $459 = (34156304 + (($457*12)|0)|0);
    $460 = HEAP32[$459>>2]|0;
    $461 = $460 ^ $bb$sroa$0$356$i;
    $462 = ((34156304 + (($457*12)|0)|0) + 4|0);
    $463 = HEAP32[$462>>2]|0;
    $464 = $463 ^ $bb$sroa$1$357$i;
    $465 = ((34156304 + (($457*12)|0)|0) + 8|0);
    $466 = HEAP32[$465>>2]|0;
    $467 = $466 ^ $bb$sroa$2$358$i;
    $468 = $464 | $461;
    $469 = $468 | $467;
    $470 = ($469|0)==(0);
    if ($470) {
     break;
    } else {
     $bb$sroa$0$356$i = $461;$bb$sroa$1$357$i = $464;$bb$sroa$2$358$i = $467;
    }
   }
  }
  $471 = (($ifrom$063$i) + 1)|0;
  $exitcond76$i = ($471|0)==(81);
  if ($exitcond76$i) {
   $ifrom$138$i = 0;
   break;
  } else {
   $ifrom$063$i = $471;
  }
 }
 while(1) {
  $472 = (($abb_minus1dir$i) + (($ifrom$138$i*12)|0)|0);
  $473 = ((($abb_minus1dir$i) + (($ifrom$138$i*12)|0)|0) + 4|0);
  $474 = ((($abb_minus1dir$i) + (($ifrom$138$i*12)|0)|0) + 8|0);
  $475 = (($abb_minus9dir$i) + (($ifrom$138$i*12)|0)|0);
  $476 = ((($abb_minus9dir$i) + (($ifrom$138$i*12)|0)|0) + 4|0);
  $477 = ((($abb_minus9dir$i) + (($ifrom$138$i*12)|0)|0) + 8|0);
  $478 = (($abb_minus8dir$i) + (($ifrom$138$i*12)|0)|0);
  $479 = ((($abb_minus8dir$i) + (($ifrom$138$i*12)|0)|0) + 4|0);
  $480 = ((($abb_minus8dir$i) + (($ifrom$138$i*12)|0)|0) + 8|0);
  $481 = (($abb_minus10dir$i) + (($ifrom$138$i*12)|0)|0);
  $482 = ((($abb_minus10dir$i) + (($ifrom$138$i*12)|0)|0) + 4|0);
  $483 = ((($abb_minus10dir$i) + (($ifrom$138$i*12)|0)|0) + 8|0);
  $484 = (($abb_plus1dir$i) + (($ifrom$138$i*12)|0)|0);
  $485 = ((($abb_plus1dir$i) + (($ifrom$138$i*12)|0)|0) + 4|0);
  $486 = ((($abb_plus1dir$i) + (($ifrom$138$i*12)|0)|0) + 8|0);
  $487 = (($abb_plus9dir$i) + (($ifrom$138$i*12)|0)|0);
  $488 = ((($abb_plus9dir$i) + (($ifrom$138$i*12)|0)|0) + 4|0);
  $489 = ((($abb_plus9dir$i) + (($ifrom$138$i*12)|0)|0) + 8|0);
  $490 = (($abb_plus8dir$i) + (($ifrom$138$i*12)|0)|0);
  $491 = ((($abb_plus8dir$i) + (($ifrom$138$i*12)|0)|0) + 4|0);
  $492 = ((($abb_plus8dir$i) + (($ifrom$138$i*12)|0)|0) + 8|0);
  $493 = (($abb_plus10dir$i) + (($ifrom$138$i*12)|0)|0);
  $494 = ((($abb_plus10dir$i) + (($ifrom$138$i*12)|0)|0) + 4|0);
  $495 = ((($abb_plus10dir$i) + (($ifrom$138$i*12)|0)|0) + 8|0);
  $ito$136$i = 0;
  while(1) {
   $496 = (((34077568 + (($ifrom$138$i*972)|0)|0) + (($ito$136$i*12)|0)|0) + 8|0);
   HEAP32[$496>>2] = 0;
   $497 = (((34077568 + (($ifrom$138$i*972)|0)|0) + (($ito$136$i*12)|0)|0) + 4|0);
   HEAP32[$497>>2] = 0;
   $498 = ((34077568 + (($ifrom$138$i*972)|0)|0) + (($ito$136$i*12)|0)|0);
   HEAP32[$498>>2] = 0;
   $499 = (($ifrom$138$i) - ($ito$136$i))|0;
   $500 = ($499|0)>(0);
   $501 = ((220518304 + (($ifrom$138$i*81)|0)|0) + ($ito$136$i)|0);
   $502 = HEAP8[$501>>0]|0;
   $503 = $502&255;
   do {
    if ($500) {
     if ((($503|0) == 4)) {
      $530 = (($ito$136$i) + 8)|0;
      $531 = (($abb_minus8dir$i) + (($530*12)|0)|0);
      $532 = HEAP32[$531>>2]|0;
      $533 = HEAP32[$478>>2]|0;
      $534 = $533 ^ $532;
      HEAP32[$498>>2] = $534;
      $535 = ((($abb_minus8dir$i) + (($530*12)|0)|0) + 4|0);
      $536 = HEAP32[$535>>2]|0;
      $537 = HEAP32[$479>>2]|0;
      $538 = $537 ^ $536;
      HEAP32[$497>>2] = $538;
      $539 = ((($abb_minus8dir$i) + (($530*12)|0)|0) + 8|0);
      $540 = HEAP32[$539>>2]|0;
      $541 = HEAP32[$480>>2]|0;
      $542 = $541 ^ $540;
      HEAP32[$496>>2] = $542;
      break;
     } else if ((($503|0) == 5)) {
      $543 = (($ito$136$i) + 10)|0;
      $544 = (($abb_minus10dir$i) + (($543*12)|0)|0);
      $545 = HEAP32[$544>>2]|0;
      $546 = HEAP32[$481>>2]|0;
      $547 = $546 ^ $545;
      HEAP32[$498>>2] = $547;
      $548 = ((($abb_minus10dir$i) + (($543*12)|0)|0) + 4|0);
      $549 = HEAP32[$548>>2]|0;
      $550 = HEAP32[$482>>2]|0;
      $551 = $550 ^ $549;
      HEAP32[$497>>2] = $551;
      $552 = ((($abb_minus10dir$i) + (($543*12)|0)|0) + 8|0);
      $553 = HEAP32[$552>>2]|0;
      $554 = HEAP32[$483>>2]|0;
      $555 = $554 ^ $553;
      HEAP32[$496>>2] = $555;
      break;
     } else if ((($503|0) == 3)) {
      $504 = (($ito$136$i) + 1)|0;
      $505 = (($abb_minus1dir$i) + (($504*12)|0)|0);
      $506 = HEAP32[$505>>2]|0;
      $507 = HEAP32[$472>>2]|0;
      $508 = $507 ^ $506;
      HEAP32[$498>>2] = $508;
      $509 = ((($abb_minus1dir$i) + (($504*12)|0)|0) + 4|0);
      $510 = HEAP32[$509>>2]|0;
      $511 = HEAP32[$473>>2]|0;
      $512 = $511 ^ $510;
      HEAP32[$497>>2] = $512;
      $513 = ((($abb_minus1dir$i) + (($504*12)|0)|0) + 8|0);
      $514 = HEAP32[$513>>2]|0;
      $515 = HEAP32[$474>>2]|0;
      $516 = $515 ^ $514;
      HEAP32[$496>>2] = $516;
      break;
     } else if ((($503|0) == 2)) {
      $517 = (($ito$136$i) + 9)|0;
      $518 = (($abb_minus9dir$i) + (($517*12)|0)|0);
      $519 = HEAP32[$518>>2]|0;
      $520 = HEAP32[$475>>2]|0;
      $521 = $520 ^ $519;
      HEAP32[$498>>2] = $521;
      $522 = ((($abb_minus9dir$i) + (($517*12)|0)|0) + 4|0);
      $523 = HEAP32[$522>>2]|0;
      $524 = HEAP32[$476>>2]|0;
      $525 = $524 ^ $523;
      HEAP32[$497>>2] = $525;
      $526 = ((($abb_minus9dir$i) + (($517*12)|0)|0) + 8|0);
      $527 = HEAP32[$526>>2]|0;
      $528 = HEAP32[$477>>2]|0;
      $529 = $528 ^ $527;
      HEAP32[$496>>2] = $529;
      break;
     } else {
      break;
     }
    } else {
     if ((($503|0) == 5)) {
      $595 = (($ito$136$i) + -10)|0;
      $596 = (($abb_plus10dir$i) + (($595*12)|0)|0);
      $597 = HEAP32[$596>>2]|0;
      $598 = HEAP32[$493>>2]|0;
      $599 = $598 ^ $597;
      HEAP32[$498>>2] = $599;
      $600 = ((($abb_plus10dir$i) + (($595*12)|0)|0) + 4|0);
      $601 = HEAP32[$600>>2]|0;
      $602 = HEAP32[$494>>2]|0;
      $603 = $602 ^ $601;
      HEAP32[$497>>2] = $603;
      $604 = ((($abb_plus10dir$i) + (($595*12)|0)|0) + 8|0);
      $605 = HEAP32[$604>>2]|0;
      $606 = HEAP32[$495>>2]|0;
      $607 = $606 ^ $605;
      HEAP32[$496>>2] = $607;
      break;
     } else if ((($503|0) == 2)) {
      $569 = (($ito$136$i) + -9)|0;
      $570 = (($abb_plus9dir$i) + (($569*12)|0)|0);
      $571 = HEAP32[$570>>2]|0;
      $572 = HEAP32[$487>>2]|0;
      $573 = $572 ^ $571;
      HEAP32[$498>>2] = $573;
      $574 = ((($abb_plus9dir$i) + (($569*12)|0)|0) + 4|0);
      $575 = HEAP32[$574>>2]|0;
      $576 = HEAP32[$488>>2]|0;
      $577 = $576 ^ $575;
      HEAP32[$497>>2] = $577;
      $578 = ((($abb_plus9dir$i) + (($569*12)|0)|0) + 8|0);
      $579 = HEAP32[$578>>2]|0;
      $580 = HEAP32[$489>>2]|0;
      $581 = $580 ^ $579;
      HEAP32[$496>>2] = $581;
      break;
     } else if ((($503|0) == 4)) {
      $582 = (($ito$136$i) + -8)|0;
      $583 = (($abb_plus8dir$i) + (($582*12)|0)|0);
      $584 = HEAP32[$583>>2]|0;
      $585 = HEAP32[$490>>2]|0;
      $586 = $585 ^ $584;
      HEAP32[$498>>2] = $586;
      $587 = ((($abb_plus8dir$i) + (($582*12)|0)|0) + 4|0);
      $588 = HEAP32[$587>>2]|0;
      $589 = HEAP32[$491>>2]|0;
      $590 = $589 ^ $588;
      HEAP32[$497>>2] = $590;
      $591 = ((($abb_plus8dir$i) + (($582*12)|0)|0) + 8|0);
      $592 = HEAP32[$591>>2]|0;
      $593 = HEAP32[$492>>2]|0;
      $594 = $593 ^ $592;
      HEAP32[$496>>2] = $594;
      break;
     } else if ((($503|0) == 3)) {
      $556 = (($ito$136$i) + -1)|0;
      $557 = (($abb_plus1dir$i) + (($556*12)|0)|0);
      $558 = HEAP32[$557>>2]|0;
      $559 = HEAP32[$484>>2]|0;
      $560 = $559 ^ $558;
      HEAP32[$498>>2] = $560;
      $561 = ((($abb_plus1dir$i) + (($556*12)|0)|0) + 4|0);
      $562 = HEAP32[$561>>2]|0;
      $563 = HEAP32[$485>>2]|0;
      $564 = $563 ^ $562;
      HEAP32[$497>>2] = $564;
      $565 = ((($abb_plus1dir$i) + (($556*12)|0)|0) + 8|0);
      $566 = HEAP32[$565>>2]|0;
      $567 = HEAP32[$486>>2]|0;
      $568 = $567 ^ $566;
      HEAP32[$496>>2] = $568;
      break;
     } else {
      break;
     }
    }
   } while(0);
   $608 = (($ito$136$i) + 1)|0;
   $exitcond$i4 = ($608|0)==(81);
   if ($exitcond$i4) {
    break;
   } else {
    $ito$136$i = $608;
   }
  }
  $609 = (($ifrom$138$i) + 1)|0;
  $exitcond74$i = ($609|0)==(81);
  if ($exitcond74$i) {
   $i$0208$i = 0;
   break;
  } else {
   $ifrom$138$i = $609;
  }
 }
 while(1) {
  $610 = (($i$0208$i|0) / 27)&-1;
  $611 = $610&255;
  $612 = (33572424 + ($i$0208$i<<3)|0);
  HEAP8[$612>>0] = $611;
  $613 = (($i$0208$i|0) / 9)&-1;
  $614 = (($613|0) % 3)&-1;
  $615 = (2 - ($614))|0;
  $616 = ($615*9)|0;
  $617 = (($616) + 1)|0;
  $618 = $617&255;
  $619 = ((33572424 + ($i$0208$i<<3)|0) + 1|0);
  HEAP8[$619>>0] = $618;
  $620 = (($i$0208$i|0) % 9)&-1;
  $621 = (($620|0) / 3)&-1;
  $622 = (2 - ($621))|0;
  $623 = $622&255;
  $624 = ((33572424 + ($i$0208$i<<3)|0) + 2|0);
  HEAP8[$624>>0] = $623;
  $625 = (($620|0) % 3)&-1;
  $626 = ($625*9)|0;
  $627 = (($626) + 1)|0;
  $628 = $627&255;
  $629 = ((33572424 + ($i$0208$i<<3)|0) + 3|0);
  HEAP8[$629>>0] = $628;
  $630 = (($i$0208$i) + 1)|0;
  $exitcond282$i = ($630|0)==(81);
  if ($exitcond282$i) {
   $irank$0$neg207$i = 0;$irank$0206$i = 0;
   break;
  } else {
   $i$0208$i = $630;
  }
 }
 while(1) {
  $631 = (($irank$0206$i) + -1)|0;
  $632 = ($631>>>0)<(9);
  $633 = ($631*9)|0;
  $634 = (($irank$0206$i) + 1)|0;
  $635 = ($634>>>0)<(9);
  $636 = ($634*9)|0;
  $637 = ($irank$0206$i*9)|0;
  $638 = (($irank$0206$i) + -2)|0;
  $639 = ($638>>>0)<(9);
  $640 = ($638*9)|0;
  $641 = (($irank$0206$i) + 2)|0;
  $642 = ($641>>>0)<(9);
  $643 = ($641*9)|0;
  $644 = ($irank$0206$i|0)>(0);
  $645 = ($634|0)<(9);
  $646 = (($irank$0$neg207$i) + 8)|0;
  $647 = (($irank$0206$i) + 9)|0;
  $ifile$0$neg204$i = 0;$ifile$0203$i = 0;
  while(1) {
   $648 = (($ifile$0203$i) + -1)|0;
   $649 = ($648>>>0)<(9);
   $or$cond$i$i = $632 & $649;
   if ($or$cond$i$i) {
    $650 = (($648) + ($633))|0;
    $651 = (34156304 + (($650*12)|0)|0);
    $652 = HEAP32[$651>>2]|0;
    $653 = ((34156304 + (($650*12)|0)|0) + 4|0);
    $654 = HEAP32[$653>>2]|0;
    $655 = ((34156304 + (($650*12)|0)|0) + 8|0);
    $656 = HEAP32[$655>>2]|0;
    $663 = $652;$667 = $654;$671 = $656;
   } else {
    $663 = 0;$667 = 0;$671 = 0;
   }
   $657 = (($ifile$0203$i) + 1)|0;
   $658 = ($657>>>0)<(9);
   $or$cond$i89$i = $632 & $658;
   if ($or$cond$i89$i) {
    $659 = (($657) + ($633))|0;
    $660 = (34156304 + (($659*12)|0)|0);
    $661 = HEAP32[$660>>2]|0;
    $662 = $661 ^ $663;
    $664 = ((34156304 + (($659*12)|0)|0) + 4|0);
    $665 = HEAP32[$664>>2]|0;
    $666 = $665 ^ $667;
    $668 = ((34156304 + (($659*12)|0)|0) + 8|0);
    $669 = HEAP32[$668>>2]|0;
    $670 = $669 ^ $671;
    $676 = $662;$680 = $666;$684 = $670;
   } else {
    $676 = $663;$680 = $667;$684 = $671;
   }
   $or$cond$i87$i = $635 & $649;
   if ($or$cond$i87$i) {
    $672 = (($648) + ($636))|0;
    $673 = (34156304 + (($672*12)|0)|0);
    $674 = HEAP32[$673>>2]|0;
    $675 = $674 ^ $676;
    $677 = ((34156304 + (($672*12)|0)|0) + 4|0);
    $678 = HEAP32[$677>>2]|0;
    $679 = $678 ^ $680;
    $681 = ((34156304 + (($672*12)|0)|0) + 8|0);
    $682 = HEAP32[$681>>2]|0;
    $683 = $682 ^ $684;
    $689 = $675;$693 = $679;$697 = $683;
   } else {
    $689 = $676;$693 = $680;$697 = $684;
   }
   $or$cond$i85$i = $635 & $658;
   if ($or$cond$i85$i) {
    $685 = (($657) + ($636))|0;
    $686 = (34156304 + (($685*12)|0)|0);
    $687 = HEAP32[$686>>2]|0;
    $688 = $687 ^ $689;
    $690 = ((34156304 + (($685*12)|0)|0) + 4|0);
    $691 = HEAP32[$690>>2]|0;
    $692 = $691 ^ $693;
    $694 = ((34156304 + (($685*12)|0)|0) + 8|0);
    $695 = HEAP32[$694>>2]|0;
    $696 = $695 ^ $697;
    $702 = $688;$706 = $692;$710 = $696;
   } else {
    $702 = $689;$706 = $693;$710 = $697;
   }
   if ($632) {
    $698 = (($ifile$0203$i) + ($633))|0;
    $699 = (34156304 + (($698*12)|0)|0);
    $700 = HEAP32[$699>>2]|0;
    $701 = $700 ^ $702;
    $703 = ((34156304 + (($698*12)|0)|0) + 4|0);
    $704 = HEAP32[$703>>2]|0;
    $705 = $704 ^ $706;
    $707 = ((34156304 + (($698*12)|0)|0) + 8|0);
    $708 = HEAP32[$707>>2]|0;
    $709 = $708 ^ $710;
    $713 = $701;$715 = $705;$717 = $709;
   } else {
    $713 = $702;$715 = $706;$717 = $710;
   }
   $711 = (($ifile$0203$i) + ($637))|0;
   $712 = (33574048 + (($711*12)|0)|0);
   HEAP32[$712>>2] = $713;
   $714 = ((33574048 + (($711*12)|0)|0) + 4|0);
   HEAP32[$714>>2] = $715;
   $716 = ((33574048 + (($711*12)|0)|0) + 8|0);
   HEAP32[$716>>2] = $717;
   if ($or$cond$i$i) {
    $718 = (($648) + ($633))|0;
    $719 = (34156304 + (($718*12)|0)|0);
    $720 = HEAP32[$719>>2]|0;
    $721 = ((34156304 + (($718*12)|0)|0) + 4|0);
    $722 = HEAP32[$721>>2]|0;
    $723 = ((34156304 + (($718*12)|0)|0) + 8|0);
    $724 = HEAP32[$723>>2]|0;
    $729 = $720;$733 = $722;$737 = $724;
   } else {
    $729 = 0;$733 = 0;$737 = 0;
   }
   if ($or$cond$i89$i) {
    $725 = (($657) + ($633))|0;
    $726 = (34156304 + (($725*12)|0)|0);
    $727 = HEAP32[$726>>2]|0;
    $728 = $727 ^ $729;
    $730 = ((34156304 + (($725*12)|0)|0) + 4|0);
    $731 = HEAP32[$730>>2]|0;
    $732 = $731 ^ $733;
    $734 = ((34156304 + (($725*12)|0)|0) + 8|0);
    $735 = HEAP32[$734>>2]|0;
    $736 = $735 ^ $737;
    $742 = $728;$746 = $732;$750 = $736;
   } else {
    $742 = $729;$746 = $733;$750 = $737;
   }
   if ($or$cond$i87$i) {
    $738 = (($648) + ($636))|0;
    $739 = (34156304 + (($738*12)|0)|0);
    $740 = HEAP32[$739>>2]|0;
    $741 = $740 ^ $742;
    $743 = ((34156304 + (($738*12)|0)|0) + 4|0);
    $744 = HEAP32[$743>>2]|0;
    $745 = $744 ^ $746;
    $747 = ((34156304 + (($738*12)|0)|0) + 8|0);
    $748 = HEAP32[$747>>2]|0;
    $749 = $748 ^ $750;
    $755 = $741;$759 = $745;$763 = $749;
   } else {
    $755 = $742;$759 = $746;$763 = $750;
   }
   if ($or$cond$i85$i) {
    $751 = (($657) + ($636))|0;
    $752 = (34156304 + (($751*12)|0)|0);
    $753 = HEAP32[$752>>2]|0;
    $754 = $753 ^ $755;
    $756 = ((34156304 + (($751*12)|0)|0) + 4|0);
    $757 = HEAP32[$756>>2]|0;
    $758 = $757 ^ $759;
    $760 = ((34156304 + (($751*12)|0)|0) + 8|0);
    $761 = HEAP32[$760>>2]|0;
    $762 = $761 ^ $763;
    $768 = $754;$772 = $758;$776 = $762;
   } else {
    $768 = $755;$772 = $759;$776 = $763;
   }
   if ($635) {
    $764 = (($ifile$0203$i) + ($636))|0;
    $765 = (34156304 + (($764*12)|0)|0);
    $766 = HEAP32[$765>>2]|0;
    $767 = $766 ^ $768;
    $769 = ((34156304 + (($764*12)|0)|0) + 4|0);
    $770 = HEAP32[$769>>2]|0;
    $771 = $770 ^ $772;
    $773 = ((34156304 + (($764*12)|0)|0) + 8|0);
    $774 = HEAP32[$773>>2]|0;
    $775 = $774 ^ $776;
    $778 = $767;$780 = $771;$782 = $775;
   } else {
    $778 = $768;$780 = $772;$782 = $776;
   }
   $777 = (33576976 + (($711*12)|0)|0);
   HEAP32[$777>>2] = $778;
   $779 = ((33576976 + (($711*12)|0)|0) + 4|0);
   HEAP32[$779>>2] = $780;
   $781 = ((33576976 + (($711*12)|0)|0) + 8|0);
   HEAP32[$781>>2] = $782;
   if ($or$cond$i$i) {
    $783 = (($648) + ($633))|0;
    $784 = (34156304 + (($783*12)|0)|0);
    $785 = HEAP32[$784>>2]|0;
    $786 = ((34156304 + (($783*12)|0)|0) + 4|0);
    $787 = HEAP32[$786>>2]|0;
    $788 = ((34156304 + (($783*12)|0)|0) + 8|0);
    $789 = HEAP32[$788>>2]|0;
    $794 = $785;$798 = $787;$802 = $789;
   } else {
    $794 = 0;$798 = 0;$802 = 0;
   }
   if ($or$cond$i89$i) {
    $790 = (($657) + ($633))|0;
    $791 = (34156304 + (($790*12)|0)|0);
    $792 = HEAP32[$791>>2]|0;
    $793 = $792 ^ $794;
    $795 = ((34156304 + (($790*12)|0)|0) + 4|0);
    $796 = HEAP32[$795>>2]|0;
    $797 = $796 ^ $798;
    $799 = ((34156304 + (($790*12)|0)|0) + 8|0);
    $800 = HEAP32[$799>>2]|0;
    $801 = $800 ^ $802;
    $807 = $793;$811 = $797;$815 = $801;
   } else {
    $807 = $794;$811 = $798;$815 = $802;
   }
   if ($632) {
    $803 = (($ifile$0203$i) + ($633))|0;
    $804 = (34156304 + (($803*12)|0)|0);
    $805 = HEAP32[$804>>2]|0;
    $806 = $805 ^ $807;
    $808 = ((34156304 + (($803*12)|0)|0) + 4|0);
    $809 = HEAP32[$808>>2]|0;
    $810 = $809 ^ $811;
    $812 = ((34156304 + (($803*12)|0)|0) + 8|0);
    $813 = HEAP32[$812>>2]|0;
    $814 = $813 ^ $815;
    $820 = $806;$824 = $810;$828 = $814;
   } else {
    $820 = $807;$824 = $811;$828 = $815;
   }
   if ($635) {
    $816 = (($ifile$0203$i) + ($636))|0;
    $817 = (34156304 + (($816*12)|0)|0);
    $818 = HEAP32[$817>>2]|0;
    $819 = $818 ^ $820;
    $821 = ((34156304 + (($816*12)|0)|0) + 4|0);
    $822 = HEAP32[$821>>2]|0;
    $823 = $822 ^ $824;
    $825 = ((34156304 + (($816*12)|0)|0) + 8|0);
    $826 = HEAP32[$825>>2]|0;
    $827 = $826 ^ $828;
    $833 = $819;$837 = $823;$841 = $827;
   } else {
    $833 = $820;$837 = $824;$841 = $828;
   }
   if ($649) {
    $829 = (($648) + ($637))|0;
    $830 = (34156304 + (($829*12)|0)|0);
    $831 = HEAP32[$830>>2]|0;
    $832 = $831 ^ $833;
    $834 = ((34156304 + (($829*12)|0)|0) + 4|0);
    $835 = HEAP32[$834>>2]|0;
    $836 = $835 ^ $837;
    $838 = ((34156304 + (($829*12)|0)|0) + 8|0);
    $839 = HEAP32[$838>>2]|0;
    $840 = $839 ^ $841;
    $846 = $832;$850 = $836;$854 = $840;
   } else {
    $846 = $833;$850 = $837;$854 = $841;
   }
   if ($658) {
    $842 = (($657) + ($637))|0;
    $843 = (34156304 + (($842*12)|0)|0);
    $844 = HEAP32[$843>>2]|0;
    $845 = $844 ^ $846;
    $847 = ((34156304 + (($842*12)|0)|0) + 4|0);
    $848 = HEAP32[$847>>2]|0;
    $849 = $848 ^ $850;
    $851 = ((34156304 + (($842*12)|0)|0) + 8|0);
    $852 = HEAP32[$851>>2]|0;
    $853 = $852 ^ $854;
    $856 = $845;$858 = $849;$860 = $853;
   } else {
    $856 = $846;$858 = $850;$860 = $854;
   }
   $855 = (33575024 + (($711*12)|0)|0);
   HEAP32[$855>>2] = $856;
   $857 = ((33575024 + (($711*12)|0)|0) + 4|0);
   HEAP32[$857>>2] = $858;
   $859 = ((33575024 + (($711*12)|0)|0) + 8|0);
   HEAP32[$859>>2] = $860;
   if ($or$cond$i87$i) {
    $861 = (($648) + ($636))|0;
    $862 = (34156304 + (($861*12)|0)|0);
    $863 = HEAP32[$862>>2]|0;
    $864 = ((34156304 + (($861*12)|0)|0) + 4|0);
    $865 = HEAP32[$864>>2]|0;
    $866 = ((34156304 + (($861*12)|0)|0) + 8|0);
    $867 = HEAP32[$866>>2]|0;
    $872 = $863;$876 = $865;$880 = $867;
   } else {
    $872 = 0;$876 = 0;$880 = 0;
   }
   if ($or$cond$i85$i) {
    $868 = (($657) + ($636))|0;
    $869 = (34156304 + (($868*12)|0)|0);
    $870 = HEAP32[$869>>2]|0;
    $871 = $870 ^ $872;
    $873 = ((34156304 + (($868*12)|0)|0) + 4|0);
    $874 = HEAP32[$873>>2]|0;
    $875 = $874 ^ $876;
    $877 = ((34156304 + (($868*12)|0)|0) + 8|0);
    $878 = HEAP32[$877>>2]|0;
    $879 = $878 ^ $880;
    $885 = $871;$889 = $875;$893 = $879;
   } else {
    $885 = $872;$889 = $876;$893 = $880;
   }
   if ($635) {
    $881 = (($ifile$0203$i) + ($636))|0;
    $882 = (34156304 + (($881*12)|0)|0);
    $883 = HEAP32[$882>>2]|0;
    $884 = $883 ^ $885;
    $886 = ((34156304 + (($881*12)|0)|0) + 4|0);
    $887 = HEAP32[$886>>2]|0;
    $888 = $887 ^ $889;
    $890 = ((34156304 + (($881*12)|0)|0) + 8|0);
    $891 = HEAP32[$890>>2]|0;
    $892 = $891 ^ $893;
    $898 = $884;$902 = $888;$906 = $892;
   } else {
    $898 = $885;$902 = $889;$906 = $893;
   }
   if ($632) {
    $894 = (($ifile$0203$i) + ($633))|0;
    $895 = (34156304 + (($894*12)|0)|0);
    $896 = HEAP32[$895>>2]|0;
    $897 = $896 ^ $898;
    $899 = ((34156304 + (($894*12)|0)|0) + 4|0);
    $900 = HEAP32[$899>>2]|0;
    $901 = $900 ^ $902;
    $903 = ((34156304 + (($894*12)|0)|0) + 8|0);
    $904 = HEAP32[$903>>2]|0;
    $905 = $904 ^ $906;
    $911 = $897;$915 = $901;$919 = $905;
   } else {
    $911 = $898;$915 = $902;$919 = $906;
   }
   if ($649) {
    $907 = (($648) + ($637))|0;
    $908 = (34156304 + (($907*12)|0)|0);
    $909 = HEAP32[$908>>2]|0;
    $910 = $909 ^ $911;
    $912 = ((34156304 + (($907*12)|0)|0) + 4|0);
    $913 = HEAP32[$912>>2]|0;
    $914 = $913 ^ $915;
    $916 = ((34156304 + (($907*12)|0)|0) + 8|0);
    $917 = HEAP32[$916>>2]|0;
    $918 = $917 ^ $919;
    $924 = $910;$928 = $914;$932 = $918;
   } else {
    $924 = $911;$928 = $915;$932 = $919;
   }
   if ($658) {
    $920 = (($657) + ($637))|0;
    $921 = (34156304 + (($920*12)|0)|0);
    $922 = HEAP32[$921>>2]|0;
    $923 = $922 ^ $924;
    $925 = ((34156304 + (($920*12)|0)|0) + 4|0);
    $926 = HEAP32[$925>>2]|0;
    $927 = $926 ^ $928;
    $929 = ((34156304 + (($920*12)|0)|0) + 8|0);
    $930 = HEAP32[$929>>2]|0;
    $931 = $930 ^ $932;
    $934 = $923;$936 = $927;$938 = $931;
   } else {
    $934 = $924;$936 = $928;$938 = $932;
   }
   $933 = (33577952 + (($711*12)|0)|0);
   HEAP32[$933>>2] = $934;
   $935 = ((33577952 + (($711*12)|0)|0) + 4|0);
   HEAP32[$935>>2] = $936;
   $937 = ((33577952 + (($711*12)|0)|0) + 8|0);
   HEAP32[$937>>2] = $938;
   if ($or$cond$i87$i) {
    $939 = (($648) + ($636))|0;
    $940 = (34156304 + (($939*12)|0)|0);
    $941 = HEAP32[$940>>2]|0;
    $942 = ((34156304 + (($939*12)|0)|0) + 4|0);
    $943 = HEAP32[$942>>2]|0;
    $944 = ((34156304 + (($939*12)|0)|0) + 8|0);
    $945 = HEAP32[$944>>2]|0;
    $950 = $941;$954 = $943;$958 = $945;
   } else {
    $950 = 0;$954 = 0;$958 = 0;
   }
   if ($or$cond$i85$i) {
    $946 = (($657) + ($636))|0;
    $947 = (34156304 + (($946*12)|0)|0);
    $948 = HEAP32[$947>>2]|0;
    $949 = $948 ^ $950;
    $951 = ((34156304 + (($946*12)|0)|0) + 4|0);
    $952 = HEAP32[$951>>2]|0;
    $953 = $952 ^ $954;
    $955 = ((34156304 + (($946*12)|0)|0) + 8|0);
    $956 = HEAP32[$955>>2]|0;
    $957 = $956 ^ $958;
    $963 = $949;$967 = $953;$971 = $957;
   } else {
    $963 = $950;$967 = $954;$971 = $958;
   }
   if ($635) {
    $959 = (($ifile$0203$i) + ($636))|0;
    $960 = (34156304 + (($959*12)|0)|0);
    $961 = HEAP32[$960>>2]|0;
    $962 = $961 ^ $963;
    $964 = ((34156304 + (($959*12)|0)|0) + 4|0);
    $965 = HEAP32[$964>>2]|0;
    $966 = $965 ^ $967;
    $968 = ((34156304 + (($959*12)|0)|0) + 8|0);
    $969 = HEAP32[$968>>2]|0;
    $970 = $969 ^ $971;
    $976 = $962;$980 = $966;$984 = $970;
   } else {
    $976 = $963;$980 = $967;$984 = $971;
   }
   if ($or$cond$i$i) {
    $972 = (($648) + ($633))|0;
    $973 = (34156304 + (($972*12)|0)|0);
    $974 = HEAP32[$973>>2]|0;
    $975 = $974 ^ $976;
    $977 = ((34156304 + (($972*12)|0)|0) + 4|0);
    $978 = HEAP32[$977>>2]|0;
    $979 = $978 ^ $980;
    $981 = ((34156304 + (($972*12)|0)|0) + 8|0);
    $982 = HEAP32[$981>>2]|0;
    $983 = $982 ^ $984;
    $989 = $975;$993 = $979;$997 = $983;
   } else {
    $989 = $976;$993 = $980;$997 = $984;
   }
   if ($or$cond$i89$i) {
    $985 = (($657) + ($633))|0;
    $986 = (34156304 + (($985*12)|0)|0);
    $987 = HEAP32[$986>>2]|0;
    $988 = $987 ^ $989;
    $990 = ((34156304 + (($985*12)|0)|0) + 4|0);
    $991 = HEAP32[$990>>2]|0;
    $992 = $991 ^ $993;
    $994 = ((34156304 + (($985*12)|0)|0) + 8|0);
    $995 = HEAP32[$994>>2]|0;
    $996 = $995 ^ $997;
    $1002 = $988;$1006 = $992;$1010 = $996;
   } else {
    $1002 = $989;$1006 = $993;$1010 = $997;
   }
   if ($632) {
    $998 = (($ifile$0203$i) + ($633))|0;
    $999 = (34156304 + (($998*12)|0)|0);
    $1000 = HEAP32[$999>>2]|0;
    $1001 = $1000 ^ $1002;
    $1003 = ((34156304 + (($998*12)|0)|0) + 4|0);
    $1004 = HEAP32[$1003>>2]|0;
    $1005 = $1004 ^ $1006;
    $1007 = ((34156304 + (($998*12)|0)|0) + 8|0);
    $1008 = HEAP32[$1007>>2]|0;
    $1009 = $1008 ^ $1010;
    $1015 = $1001;$1019 = $1005;$1023 = $1009;
   } else {
    $1015 = $1002;$1019 = $1006;$1023 = $1010;
   }
   if ($649) {
    $1011 = (($648) + ($637))|0;
    $1012 = (34156304 + (($1011*12)|0)|0);
    $1013 = HEAP32[$1012>>2]|0;
    $1014 = $1013 ^ $1015;
    $1016 = ((34156304 + (($1011*12)|0)|0) + 4|0);
    $1017 = HEAP32[$1016>>2]|0;
    $1018 = $1017 ^ $1019;
    $1020 = ((34156304 + (($1011*12)|0)|0) + 8|0);
    $1021 = HEAP32[$1020>>2]|0;
    $1022 = $1021 ^ $1023;
    $1028 = $1014;$1032 = $1018;$1036 = $1022;
   } else {
    $1028 = $1015;$1032 = $1019;$1036 = $1023;
   }
   if ($658) {
    $1024 = (($657) + ($637))|0;
    $1025 = (34156304 + (($1024*12)|0)|0);
    $1026 = HEAP32[$1025>>2]|0;
    $1027 = $1026 ^ $1028;
    $1029 = ((34156304 + (($1024*12)|0)|0) + 4|0);
    $1030 = HEAP32[$1029>>2]|0;
    $1031 = $1030 ^ $1032;
    $1033 = ((34156304 + (($1024*12)|0)|0) + 8|0);
    $1034 = HEAP32[$1033>>2]|0;
    $1035 = $1034 ^ $1036;
    $1038 = $1027;$1040 = $1031;$1042 = $1035;
   } else {
    $1038 = $1028;$1040 = $1032;$1042 = $1036;
   }
   $1037 = (33578928 + (($711*12)|0)|0);
   HEAP32[$1037>>2] = $1038;
   $1039 = ((33578928 + (($711*12)|0)|0) + 4|0);
   HEAP32[$1039>>2] = $1040;
   $1041 = ((33578928 + (($711*12)|0)|0) + 8|0);
   HEAP32[$1041>>2] = $1042;
   $or$cond$i31$i = $639 & $649;
   if ($or$cond$i31$i) {
    $1043 = (($648) + ($640))|0;
    $1044 = (34156304 + (($1043*12)|0)|0);
    $1045 = HEAP32[$1044>>2]|0;
    $1046 = ((34156304 + (($1043*12)|0)|0) + 4|0);
    $1047 = HEAP32[$1046>>2]|0;
    $1048 = ((34156304 + (($1043*12)|0)|0) + 8|0);
    $1049 = HEAP32[$1048>>2]|0;
    $1054 = $1045;$1058 = $1047;$1062 = $1049;
   } else {
    $1054 = 0;$1058 = 0;$1062 = 0;
   }
   $or$cond$i29$i = $639 & $658;
   if ($or$cond$i29$i) {
    $1050 = (($657) + ($640))|0;
    $1051 = (34156304 + (($1050*12)|0)|0);
    $1052 = HEAP32[$1051>>2]|0;
    $1053 = $1052 ^ $1054;
    $1055 = ((34156304 + (($1050*12)|0)|0) + 4|0);
    $1056 = HEAP32[$1055>>2]|0;
    $1057 = $1056 ^ $1058;
    $1059 = ((34156304 + (($1050*12)|0)|0) + 8|0);
    $1060 = HEAP32[$1059>>2]|0;
    $1061 = $1060 ^ $1062;
    $1064 = $1053;$1066 = $1057;$1068 = $1061;
   } else {
    $1064 = $1054;$1066 = $1058;$1068 = $1062;
   }
   $1063 = (33573072 + (($711*12)|0)|0);
   HEAP32[$1063>>2] = $1064;
   $1065 = ((33573072 + (($711*12)|0)|0) + 4|0);
   HEAP32[$1065>>2] = $1066;
   $1067 = ((33573072 + (($711*12)|0)|0) + 8|0);
   HEAP32[$1067>>2] = $1068;
   $or$cond$i27$i = $642 & $649;
   if ($or$cond$i27$i) {
    $1069 = (($648) + ($643))|0;
    $1070 = (34156304 + (($1069*12)|0)|0);
    $1071 = HEAP32[$1070>>2]|0;
    $1072 = ((34156304 + (($1069*12)|0)|0) + 4|0);
    $1073 = HEAP32[$1072>>2]|0;
    $1074 = ((34156304 + (($1069*12)|0)|0) + 8|0);
    $1075 = HEAP32[$1074>>2]|0;
    $1080 = $1071;$1084 = $1073;$1088 = $1075;
   } else {
    $1080 = 0;$1084 = 0;$1088 = 0;
   }
   $or$cond$i25$i = $642 & $658;
   if ($or$cond$i25$i) {
    $1076 = (($657) + ($643))|0;
    $1077 = (34156304 + (($1076*12)|0)|0);
    $1078 = HEAP32[$1077>>2]|0;
    $1079 = $1078 ^ $1080;
    $1081 = ((34156304 + (($1076*12)|0)|0) + 4|0);
    $1082 = HEAP32[$1081>>2]|0;
    $1083 = $1082 ^ $1084;
    $1085 = ((34156304 + (($1076*12)|0)|0) + 8|0);
    $1086 = HEAP32[$1085>>2]|0;
    $1087 = $1086 ^ $1088;
    $1090 = $1079;$1092 = $1083;$1094 = $1087;
   } else {
    $1090 = $1080;$1092 = $1084;$1094 = $1088;
   }
   $1089 = (33576000 + (($711*12)|0)|0);
   HEAP32[$1089>>2] = $1090;
   $1091 = ((33576000 + (($711*12)|0)|0) + 4|0);
   HEAP32[$1091>>2] = $1092;
   $1093 = ((33576000 + (($711*12)|0)|0) + 8|0);
   HEAP32[$1093>>2] = $1094;
   $1095 = ($ifile$0203$i|0)>(0);
   $1096 = ($657|0)<(9);
   $1097 = ($ifile$0203$i|0)>($irank$0206$i|0);
   $1098 = (($ifile$0203$i) + ($irank$0206$i))|0;
   $1099 = ($1098|0)>(7);
   $1100 = (($ifile$0$neg204$i) + 8)|0;
   $pcs$0201$i = 0;
   while(1) {
    L246: do {
     if ($644) {
      $1101 = $pcs$0201$i << 1;
      $1106 = $631;$1112 = 0;$1116 = 0;$1120 = 0;$i$193$i = -1;
      while(1) {
       $1105 = ($1106>>>0)<(9);
       if ($1105) {
        $1107 = ($1106*9)|0;
        $1108 = (($1107) + ($ifile$0203$i))|0;
        $1109 = (34156304 + (($1108*12)|0)|0);
        $1110 = HEAP32[$1109>>2]|0;
        $1111 = $1110 ^ $1112;
        $1113 = ((34156304 + (($1108*12)|0)|0) + 4|0);
        $1114 = HEAP32[$1113>>2]|0;
        $1115 = $1114 ^ $1116;
        $1117 = ((34156304 + (($1108*12)|0)|0) + 8|0);
        $1118 = HEAP32[$1117>>2]|0;
        $1119 = $1118 ^ $1120;
        $2482 = $1111;$2483 = $1115;$2484 = $1119;
       } else {
        $2482 = $1112;$2483 = $1116;$2484 = $1120;
       }
       $1121 = (($646) - ($i$193$i))|0;
       $1122 = 1 << $1121;
       $1123 = $1122 & $1101;
       $1124 = ($1123|0)==(0);
       $1103 = (($i$193$i) + -1)|0;
       if (!($1124)) {
        $$ph$i = $2484;$$ph91$i = $2483;$$ph92$i = $2482;
        break L246;
       }
       $1102 = (($1103) + ($irank$0206$i))|0;
       $1104 = ($1102|0)>(-1);
       if ($1104) {
        $1106 = $1102;$1112 = $2482;$1116 = $2483;$1120 = $2484;$i$193$i = $1103;
       } else {
        $$ph$i = $2484;$$ph91$i = $2483;$$ph92$i = $2482;
        break;
       }
      }
     } else {
      $$ph$i = 0;$$ph91$i = 0;$$ph92$i = 0;
     }
    } while(0);
    L255: do {
     if ($645) {
      $1125 = $pcs$0201$i << 1;
      $1130 = $634;$1136 = $$ph92$i;$1140 = $$ph91$i;$1144 = $$ph$i;$i$296$i = 1;
      while(1) {
       $1129 = ($1130>>>0)<(9);
       if ($1129) {
        $1131 = ($1130*9)|0;
        $1132 = (($1131) + ($ifile$0203$i))|0;
        $1133 = (34156304 + (($1132*12)|0)|0);
        $1134 = HEAP32[$1133>>2]|0;
        $1135 = $1134 ^ $1136;
        $1137 = ((34156304 + (($1132*12)|0)|0) + 4|0);
        $1138 = HEAP32[$1137>>2]|0;
        $1139 = $1138 ^ $1140;
        $1141 = ((34156304 + (($1132*12)|0)|0) + 8|0);
        $1142 = HEAP32[$1141>>2]|0;
        $1143 = $1142 ^ $1144;
        $2485 = $1135;$2486 = $1139;$2487 = $1143;
       } else {
        $2485 = $1136;$2486 = $1140;$2487 = $1144;
       }
       $1145 = (($646) - ($i$296$i))|0;
       $1146 = 1 << $1145;
       $1147 = $1146 & $1125;
       $1148 = ($1147|0)==(0);
       $1127 = (($i$296$i) + 1)|0;
       if (!($1148)) {
        $1150 = $2485;$1152 = $2486;$1154 = $2487;
        break L255;
       }
       $1126 = (($1127) + ($irank$0206$i))|0;
       $1128 = ($1126|0)<(9);
       if ($1128) {
        $1130 = $1126;$1136 = $2485;$1140 = $2486;$1144 = $2487;$i$296$i = $1127;
       } else {
        $1150 = $2485;$1152 = $2486;$1154 = $2487;
        break;
       }
      }
     } else {
      $1150 = $$ph92$i;$1152 = $$ph91$i;$1154 = $$ph$i;
     }
    } while(0);
    $1149 = ((33953152 + (($711*1536)|0)|0) + (($pcs$0201$i*12)|0)|0);
    HEAP32[$1149>>2] = $1150;
    $1151 = (((33953152 + (($711*1536)|0)|0) + (($pcs$0201$i*12)|0)|0) + 4|0);
    HEAP32[$1151>>2] = $1152;
    $1153 = (((33953152 + (($711*1536)|0)|0) + (($pcs$0201$i*12)|0)|0) + 8|0);
    HEAP32[$1153>>2] = $1154;
    L264: do {
     if ($1095) {
      $1155 = $pcs$0201$i << 1;
      $1160 = $648;$1165 = 0;$1169 = 0;$1173 = 0;$i$3109$i = -1;
      while(1) {
       $1159 = ($1160>>>0)<(9);
       if ($1159) {
        $1161 = (($1160) + ($637))|0;
        $1162 = (34156304 + (($1161*12)|0)|0);
        $1163 = HEAP32[$1162>>2]|0;
        $1164 = $1163 ^ $1165;
        $1166 = ((34156304 + (($1161*12)|0)|0) + 4|0);
        $1167 = HEAP32[$1166>>2]|0;
        $1168 = $1167 ^ $1169;
        $1170 = ((34156304 + (($1161*12)|0)|0) + 8|0);
        $1171 = HEAP32[$1170>>2]|0;
        $1172 = $1171 ^ $1173;
        $2488 = $1164;$2489 = $1168;$2490 = $1172;
       } else {
        $2488 = $1165;$2489 = $1169;$2490 = $1173;
       }
       $1174 = (($1100) - ($i$3109$i))|0;
       $1175 = 1 << $1174;
       $1176 = $1175 & $1155;
       $1177 = ($1176|0)==(0);
       $1157 = (($i$3109$i) + -1)|0;
       if (!($1177)) {
        $$ph106$i = $2490;$$ph107$i = $2489;$$ph108$i = $2488;
        break L264;
       }
       $1156 = (($1157) + ($ifile$0203$i))|0;
       $1158 = ($1156|0)>(-1);
       if ($1158) {
        $1160 = $1156;$1165 = $2488;$1169 = $2489;$1173 = $2490;$i$3109$i = $1157;
       } else {
        $$ph106$i = $2490;$$ph107$i = $2489;$$ph108$i = $2488;
        break;
       }
      }
     } else {
      $$ph106$i = 0;$$ph107$i = 0;$$ph108$i = 0;
     }
    } while(0);
    L273: do {
     if ($1096) {
      $1178 = $pcs$0201$i << 1;
      $1183 = $657;$1188 = $$ph108$i;$1192 = $$ph107$i;$1196 = $$ph106$i;$i$4115$i = 1;
      while(1) {
       $1182 = ($1183>>>0)<(9);
       if ($1182) {
        $1184 = (($1183) + ($637))|0;
        $1185 = (34156304 + (($1184*12)|0)|0);
        $1186 = HEAP32[$1185>>2]|0;
        $1187 = $1186 ^ $1188;
        $1189 = ((34156304 + (($1184*12)|0)|0) + 4|0);
        $1190 = HEAP32[$1189>>2]|0;
        $1191 = $1190 ^ $1192;
        $1193 = ((34156304 + (($1184*12)|0)|0) + 8|0);
        $1194 = HEAP32[$1193>>2]|0;
        $1195 = $1194 ^ $1196;
        $2491 = $1187;$2492 = $1191;$2493 = $1195;
       } else {
        $2491 = $1188;$2492 = $1192;$2493 = $1196;
       }
       $1197 = (($1100) - ($i$4115$i))|0;
       $1198 = 1 << $1197;
       $1199 = $1198 & $1178;
       $1200 = ($1199|0)==(0);
       $1180 = (($i$4115$i) + 1)|0;
       if (!($1200)) {
        $1202 = $2491;$1204 = $2492;$1206 = $2493;
        break L273;
       }
       $1179 = (($1180) + ($ifile$0203$i))|0;
       $1181 = ($1179|0)<(9);
       if ($1181) {
        $1183 = $1179;$1188 = $2491;$1192 = $2492;$1196 = $2493;$i$4115$i = $1180;
       } else {
        $1202 = $2491;$1204 = $2492;$1206 = $2493;
        break;
       }
      }
     } else {
      $1202 = $$ph108$i;$1204 = $$ph107$i;$1206 = $$ph106$i;
     }
    } while(0);
    $1201 = ((33828736 + (($711*1536)|0)|0) + (($pcs$0201$i*12)|0)|0);
    HEAP32[$1201>>2] = $1202;
    $1203 = (((33828736 + (($711*1536)|0)|0) + (($pcs$0201$i*12)|0)|0) + 4|0);
    HEAP32[$1203>>2] = $1204;
    $1205 = (((33828736 + (($711*1536)|0)|0) + (($pcs$0201$i*12)|0)|0) + 8|0);
    HEAP32[$1205>>2] = $1206;
    L282: do {
     if ($1097) {
      L284: do {
       if ($644) {
        $1207 = $pcs$0201$i << 1;
        $1265 = $631;$1272 = 0;$1276 = 0;$1280 = 0;$i$7149$i = -1;
        while(1) {
         $1263 = (($i$7149$i) + ($ifile$0203$i))|0;
         $1264 = ($1265>>>0)<(9);
         $1266 = ($1263>>>0)<(9);
         $or$cond$i11$i = $1264 & $1266;
         if ($or$cond$i11$i) {
          $1267 = ($1265*9)|0;
          $1268 = (($1263) + ($1267))|0;
          $1269 = (34156304 + (($1268*12)|0)|0);
          $1270 = HEAP32[$1269>>2]|0;
          $1271 = $1270 ^ $1272;
          $1273 = ((34156304 + (($1268*12)|0)|0) + 4|0);
          $1274 = HEAP32[$1273>>2]|0;
          $1275 = $1274 ^ $1276;
          $1277 = ((34156304 + (($1268*12)|0)|0) + 8|0);
          $1278 = HEAP32[$1277>>2]|0;
          $1279 = $1278 ^ $1280;
          $2500 = $1271;$2501 = $1275;$2502 = $1279;
         } else {
          $2500 = $1272;$2501 = $1276;$2502 = $1280;
         }
         $1281 = (($1100) - ($i$7149$i))|0;
         $1282 = 1 << $1281;
         $1283 = $1282 & $1207;
         $1284 = ($1283|0)==(0);
         $1261 = (($i$7149$i) + -1)|0;
         if (!($1284)) {
          $$ph146$i = $2502;$$ph147$i = $2501;$$ph148$i = $2500;
          break L284;
         }
         $1260 = (($1261) + ($irank$0206$i))|0;
         $1262 = ($1260|0)>(-1);
         if ($1262) {
          $1265 = $1260;$1272 = $2500;$1276 = $2501;$1280 = $2502;$i$7149$i = $1261;
         } else {
          $$ph146$i = $2502;$$ph147$i = $2501;$$ph148$i = $2500;
          break;
         }
        }
       } else {
        $$ph146$i = 0;$$ph147$i = 0;$$ph148$i = 0;
       }
      } while(0);
      if (!($1096)) {
       $1312 = $$ph148$i;$1314 = $$ph147$i;$1316 = $$ph146$i;
       break;
      }
      $1285 = $pcs$0201$i << 1;
      $1292 = $657;$1298 = $$ph148$i;$1302 = $$ph147$i;$1306 = $$ph146$i;$i$8158$i = 1;
      while(1) {
       $1289 = (($i$8158$i) + ($irank$0206$i))|0;
       $1290 = ($1289>>>0)<(9);
       $1291 = ($1292>>>0)<(9);
       $or$cond$i9$i = $1290 & $1291;
       if ($or$cond$i9$i) {
        $1293 = ($1289*9)|0;
        $1294 = (($1293) + ($1292))|0;
        $1295 = (34156304 + (($1294*12)|0)|0);
        $1296 = HEAP32[$1295>>2]|0;
        $1297 = $1296 ^ $1298;
        $1299 = ((34156304 + (($1294*12)|0)|0) + 4|0);
        $1300 = HEAP32[$1299>>2]|0;
        $1301 = $1300 ^ $1302;
        $1303 = ((34156304 + (($1294*12)|0)|0) + 8|0);
        $1304 = HEAP32[$1303>>2]|0;
        $1305 = $1304 ^ $1306;
        $2503 = $1297;$2504 = $1301;$2505 = $1305;
       } else {
        $2503 = $1298;$2504 = $1302;$2505 = $1306;
       }
       $1307 = (($1100) - ($i$8158$i))|0;
       $1308 = 1 << $1307;
       $1309 = $1308 & $1285;
       $1310 = ($1309|0)==(0);
       $1287 = (($i$8158$i) + 1)|0;
       if (!($1310)) {
        $1312 = $2503;$1314 = $2504;$1316 = $2505;
        break L282;
       }
       $1286 = (($1287) + ($ifile$0203$i))|0;
       $1288 = ($1286|0)<(9);
       if ($1288) {
        $1292 = $1286;$1298 = $2503;$1302 = $2504;$1306 = $2505;$i$8158$i = $1287;
       } else {
        $1312 = $2503;$1314 = $2504;$1316 = $2505;
        break;
       }
      }
     } else {
      L301: do {
       if ($1095) {
        $1208 = $pcs$0201$i << 1;
        $1215 = $648;$1221 = 0;$1225 = 0;$1229 = 0;$i$5130$i = -1;
        while(1) {
         $1212 = (($i$5130$i) + ($irank$0206$i))|0;
         $1213 = ($1212>>>0)<(9);
         $1214 = ($1215>>>0)<(9);
         $or$cond$i15$i = $1213 & $1214;
         if ($or$cond$i15$i) {
          $1216 = ($1212*9)|0;
          $1217 = (($1216) + ($1215))|0;
          $1218 = (34156304 + (($1217*12)|0)|0);
          $1219 = HEAP32[$1218>>2]|0;
          $1220 = $1219 ^ $1221;
          $1222 = ((34156304 + (($1217*12)|0)|0) + 4|0);
          $1223 = HEAP32[$1222>>2]|0;
          $1224 = $1223 ^ $1225;
          $1226 = ((34156304 + (($1217*12)|0)|0) + 8|0);
          $1227 = HEAP32[$1226>>2]|0;
          $1228 = $1227 ^ $1229;
          $2494 = $1220;$2495 = $1224;$2496 = $1228;
         } else {
          $2494 = $1221;$2495 = $1225;$2496 = $1229;
         }
         $1230 = (($1100) - ($i$5130$i))|0;
         $1231 = 1 << $1230;
         $1232 = $1231 & $1208;
         $1233 = ($1232|0)==(0);
         $1210 = (($i$5130$i) + -1)|0;
         if (!($1233)) {
          $$ph127$i = $2496;$$ph128$i = $2495;$$ph129$i = $2494;
          break L301;
         }
         $1209 = (($1210) + ($ifile$0203$i))|0;
         $1211 = ($1209|0)>(-1);
         if ($1211) {
          $1215 = $1209;$1221 = $2494;$1225 = $2495;$1229 = $2496;$i$5130$i = $1210;
         } else {
          $$ph127$i = $2496;$$ph128$i = $2495;$$ph129$i = $2494;
          break;
         }
        }
       } else {
        $$ph127$i = 0;$$ph128$i = 0;$$ph129$i = 0;
       }
      } while(0);
      if (!($645)) {
       $1312 = $$ph129$i;$1314 = $$ph128$i;$1316 = $$ph127$i;
       break;
      }
      $1234 = $pcs$0201$i << 1;
      $1240 = $634;$1247 = $$ph129$i;$1251 = $$ph128$i;$1255 = $$ph127$i;$i$6139$i = 1;
      while(1) {
       $1238 = (($i$6139$i) + ($ifile$0203$i))|0;
       $1239 = ($1240>>>0)<(9);
       $1241 = ($1238>>>0)<(9);
       $or$cond$i13$i = $1239 & $1241;
       if ($or$cond$i13$i) {
        $1242 = ($1240*9)|0;
        $1243 = (($1238) + ($1242))|0;
        $1244 = (34156304 + (($1243*12)|0)|0);
        $1245 = HEAP32[$1244>>2]|0;
        $1246 = $1245 ^ $1247;
        $1248 = ((34156304 + (($1243*12)|0)|0) + 4|0);
        $1249 = HEAP32[$1248>>2]|0;
        $1250 = $1249 ^ $1251;
        $1252 = ((34156304 + (($1243*12)|0)|0) + 8|0);
        $1253 = HEAP32[$1252>>2]|0;
        $1254 = $1253 ^ $1255;
        $2497 = $1246;$2498 = $1250;$2499 = $1254;
       } else {
        $2497 = $1247;$2498 = $1251;$2499 = $1255;
       }
       $1256 = (($1100) - ($i$6139$i))|0;
       $1257 = 1 << $1256;
       $1258 = $1257 & $1234;
       $1259 = ($1258|0)==(0);
       $1236 = (($i$6139$i) + 1)|0;
       if (!($1259)) {
        $1312 = $2497;$1314 = $2498;$1316 = $2499;
        break L282;
       }
       $1235 = (($1236) + ($irank$0206$i))|0;
       $1237 = ($1235|0)<(9);
       if ($1237) {
        $1240 = $1235;$1247 = $2497;$1251 = $2498;$1255 = $2499;$i$6139$i = $1236;
       } else {
        $1312 = $2497;$1314 = $2498;$1316 = $2499;
        break;
       }
      }
     }
    } while(0);
    $1311 = ((33579904 + (($711*1536)|0)|0) + (($pcs$0201$i*12)|0)|0);
    HEAP32[$1311>>2] = $1312;
    $1313 = (((33579904 + (($711*1536)|0)|0) + (($pcs$0201$i*12)|0)|0) + 4|0);
    HEAP32[$1313>>2] = $1314;
    $1315 = (((33579904 + (($711*1536)|0)|0) + (($pcs$0201$i*12)|0)|0) + 8|0);
    HEAP32[$1315>>2] = $1316;
    L318: do {
     if ($1099) {
      L337: do {
       if ($645) {
        $1317 = $pcs$0201$i << 1;
        $1324 = $634;$1331 = 0;$1335 = 0;$1339 = 0;$i$9187$i = -1;
        while(1) {
         $1322 = (($i$9187$i) + ($ifile$0203$i))|0;
         $1323 = ($1324>>>0)<(9);
         $1325 = ($1322>>>0)<(9);
         $or$cond$i7$i = $1323 & $1325;
         if ($or$cond$i7$i) {
          $1326 = ($1324*9)|0;
          $1327 = (($1322) + ($1326))|0;
          $1328 = (34156304 + (($1327*12)|0)|0);
          $1329 = HEAP32[$1328>>2]|0;
          $1330 = $1329 ^ $1331;
          $1332 = ((34156304 + (($1327*12)|0)|0) + 4|0);
          $1333 = HEAP32[$1332>>2]|0;
          $1334 = $1333 ^ $1335;
          $1336 = ((34156304 + (($1327*12)|0)|0) + 8|0);
          $1337 = HEAP32[$1336>>2]|0;
          $1338 = $1337 ^ $1339;
          $2506 = $1330;$2507 = $1334;$2508 = $1338;
         } else {
          $2506 = $1331;$2507 = $1335;$2508 = $1339;
         }
         $1340 = 1 << $1324;
         $1341 = $1340 & $1317;
         $1342 = ($1341|0)==(0);
         $1320 = (($i$9187$i) + -1)|0;
         if (!($1342)) {
          $$ph184$i = $2508;$$ph185$i = $2507;$$ph186$i = $2506;
          break L337;
         }
         $1319 = (($irank$0206$i) - ($1320))|0;
         $1321 = ($1319|0)<(9);
         if ($1321) {
          $1324 = $1319;$1331 = $2506;$1335 = $2507;$1339 = $2508;$i$9187$i = $1320;
         } else {
          $$ph184$i = $2508;$$ph185$i = $2507;$$ph186$i = $2506;
          break;
         }
        }
       } else {
        $$ph184$i = 0;$$ph185$i = 0;$$ph186$i = 0;
       }
      } while(0);
      if (!($1096)) {
       $1418 = $$ph186$i;$1420 = $$ph185$i;$1422 = $$ph184$i;
       break;
      }
      $1343 = $pcs$0201$i << 1;
      $1350 = $657;$1356 = $$ph186$i;$1360 = $$ph185$i;$1364 = $$ph184$i;$i$10196$i = 1;
      while(1) {
       $1347 = (($irank$0206$i) - ($i$10196$i))|0;
       $1348 = ($1347>>>0)<(9);
       $1349 = ($1350>>>0)<(9);
       $or$cond$i5$i = $1348 & $1349;
       if ($or$cond$i5$i) {
        $1351 = ($1347*9)|0;
        $1352 = (($1351) + ($1350))|0;
        $1353 = (34156304 + (($1352*12)|0)|0);
        $1354 = HEAP32[$1353>>2]|0;
        $1355 = $1354 ^ $1356;
        $1357 = ((34156304 + (($1352*12)|0)|0) + 4|0);
        $1358 = HEAP32[$1357>>2]|0;
        $1359 = $1358 ^ $1360;
        $1361 = ((34156304 + (($1352*12)|0)|0) + 8|0);
        $1362 = HEAP32[$1361>>2]|0;
        $1363 = $1362 ^ $1364;
        $2509 = $1355;$2510 = $1359;$2511 = $1363;
       } else {
        $2509 = $1356;$2510 = $1360;$2511 = $1364;
       }
       $1365 = 1 << $1347;
       $1366 = $1365 & $1343;
       $1367 = ($1366|0)==(0);
       $1345 = (($i$10196$i) + 1)|0;
       if (!($1367)) {
        $1418 = $2509;$1420 = $2510;$1422 = $2511;
        break L318;
       }
       $1344 = (($1345) + ($ifile$0203$i))|0;
       $1346 = ($1344|0)<(9);
       if ($1346) {
        $1350 = $1344;$1356 = $2509;$1360 = $2510;$1364 = $2511;$i$10196$i = $1345;
       } else {
        $1418 = $2509;$1420 = $2510;$1422 = $2511;
        break;
       }
      }
     } else {
      L320: do {
       if ($1095) {
        $1318 = $pcs$0201$i << 1;
        $1374 = $648;$1380 = 0;$1384 = 0;$1388 = 0;$i$11168$i = -1;
        while(1) {
         $1371 = (($irank$0206$i) - ($i$11168$i))|0;
         $1372 = ($1371>>>0)<(9);
         $1373 = ($1374>>>0)<(9);
         $or$cond$i3$i = $1372 & $1373;
         if ($or$cond$i3$i) {
          $1375 = ($1371*9)|0;
          $1376 = (($1375) + ($1374))|0;
          $1377 = (34156304 + (($1376*12)|0)|0);
          $1378 = HEAP32[$1377>>2]|0;
          $1379 = $1378 ^ $1380;
          $1381 = ((34156304 + (($1376*12)|0)|0) + 4|0);
          $1382 = HEAP32[$1381>>2]|0;
          $1383 = $1382 ^ $1384;
          $1385 = ((34156304 + (($1376*12)|0)|0) + 8|0);
          $1386 = HEAP32[$1385>>2]|0;
          $1387 = $1386 ^ $1388;
          $2512 = $1379;$2513 = $1383;$2514 = $1387;
         } else {
          $2512 = $1380;$2513 = $1384;$2514 = $1388;
         }
         $1389 = 1 << $1371;
         $1390 = $1389 & $1318;
         $1391 = ($1390|0)==(0);
         $1369 = (($i$11168$i) + -1)|0;
         if (!($1391)) {
          $$ph165$i = $2514;$$ph166$i = $2513;$$ph167$i = $2512;
          break L320;
         }
         $1368 = (($1369) + ($ifile$0203$i))|0;
         $1370 = ($1368|0)>(-1);
         if ($1370) {
          $1374 = $1368;$1380 = $2512;$1384 = $2513;$1388 = $2514;$i$11168$i = $1369;
         } else {
          $$ph165$i = $2514;$$ph166$i = $2513;$$ph167$i = $2512;
          break;
         }
        }
       } else {
        $$ph165$i = 0;$$ph166$i = 0;$$ph167$i = 0;
       }
      } while(0);
      if (!($644)) {
       $1418 = $$ph167$i;$1420 = $$ph166$i;$1422 = $$ph165$i;
       break;
      }
      $1392 = $pcs$0201$i << 1;
      $1398 = $631;$1405 = $$ph167$i;$1409 = $$ph166$i;$1413 = $$ph165$i;$i$12177$i = 1;
      while(1) {
       $1396 = (($i$12177$i) + ($ifile$0203$i))|0;
       $1397 = ($1398>>>0)<(9);
       $1399 = ($1396>>>0)<(9);
       $or$cond$i1$i = $1397 & $1399;
       if ($or$cond$i1$i) {
        $1400 = ($1398*9)|0;
        $1401 = (($1396) + ($1400))|0;
        $1402 = (34156304 + (($1401*12)|0)|0);
        $1403 = HEAP32[$1402>>2]|0;
        $1404 = $1403 ^ $1405;
        $1406 = ((34156304 + (($1401*12)|0)|0) + 4|0);
        $1407 = HEAP32[$1406>>2]|0;
        $1408 = $1407 ^ $1409;
        $1410 = ((34156304 + (($1401*12)|0)|0) + 8|0);
        $1411 = HEAP32[$1410>>2]|0;
        $1412 = $1411 ^ $1413;
        $2515 = $1404;$2516 = $1408;$2517 = $1412;
       } else {
        $2515 = $1405;$2516 = $1409;$2517 = $1413;
       }
       $1414 = 1 << $1398;
       $1415 = $1414 & $1392;
       $1416 = ($1415|0)==(0);
       $1394 = (($i$12177$i) + 1)|0;
       if (!($1416)) {
        $1418 = $2515;$1420 = $2516;$1422 = $2517;
        break L318;
       }
       $1393 = (($irank$0206$i) - ($1394))|0;
       $1395 = ($1393|0)>(-1);
       if ($1395) {
        $1398 = $1393;$1405 = $2515;$1409 = $2516;$1413 = $2517;$i$12177$i = $1394;
       } else {
        $1418 = $2515;$1420 = $2516;$1422 = $2517;
        break;
       }
      }
     }
    } while(0);
    $1417 = ((33704320 + (($711*1536)|0)|0) + (($pcs$0201$i*12)|0)|0);
    HEAP32[$1417>>2] = $1418;
    $1419 = (((33704320 + (($711*1536)|0)|0) + (($pcs$0201$i*12)|0)|0) + 4|0);
    HEAP32[$1419>>2] = $1420;
    $1421 = (((33704320 + (($711*1536)|0)|0) + (($pcs$0201$i*12)|0)|0) + 8|0);
    HEAP32[$1421>>2] = $1422;
    $1423 = (($pcs$0201$i) + 1)|0;
    $exitcond$i7 = ($1423|0)==(128);
    if ($exitcond$i7) {
     break;
    } else {
     $pcs$0201$i = $1423;
    }
   }
   if ($1097) {
    $1434 = (($647) + ($ifile$0$neg204$i))|0;
    $1435 = (($1434|0) / 3)&-1;
    $1436 = $1435&255;
    $1437 = ((33572424 + ($711<<3)|0) + 4|0);
    HEAP8[$1437>>0] = $1436;
    $1438 = (($1434|0) % 3)&-1;
    $1439 = (2 - ($1438))|0;
    $1440 = ($1439*9)|0;
    $1441 = (($1440) + 1)|0;
    $1442 = $1441&255;
    $1443 = ((33572424 + ($711<<3)|0) + 5|0);
    HEAP8[$1443>>0] = $1442;
   } else {
    $1424 = (($irank$0206$i) - ($ifile$0203$i))|0;
    $1425 = (($1424|0) / 3)&-1;
    $1426 = $1425&255;
    $1427 = ((33572424 + ($711<<3)|0) + 4|0);
    HEAP8[$1427>>0] = $1426;
    $1428 = (($1424|0) % 3)&-1;
    $1429 = (2 - ($1428))|0;
    $1430 = ($1429*9)|0;
    $1431 = (($1430) + 1)|0;
    $1432 = $1431&255;
    $1433 = ((33572424 + ($711<<3)|0) + 5|0);
    HEAP8[$1433>>0] = $1432;
   }
   if ($1099) {
    $1444 = (($1098) + -8)|0;
    $1445 = (($1444|0) / 3)&-1;
    $1446 = $1445&255;
    $1447 = ((33572424 + ($711<<3)|0) + 6|0);
    HEAP8[$1447>>0] = $1446;
    $1448 = (($1444|0) % 3)&-1;
    $1449 = (2 - ($1448))|0;
    $1450 = ($1449*9)|0;
    $1451 = (($1450) + 1)|0;
    $1452 = $1451&255;
    $1453 = ((33572424 + ($711<<3)|0) + 7|0);
    HEAP8[$1453>>0] = $1452;
   } else {
    $1454 = (($1098) + 1)|0;
    $1455 = (($1454|0) / 3)&-1;
    $1456 = $1455&255;
    $1457 = ((33572424 + ($711<<3)|0) + 6|0);
    HEAP8[$1457>>0] = $1456;
    $1458 = (($1454|0) % 3)&-1;
    $1459 = (2 - ($1458))|0;
    $1460 = ($1459*9)|0;
    $1461 = (($1460) + 1)|0;
    $1462 = $1461&255;
    $1463 = ((33572424 + ($711<<3)|0) + 7|0);
    HEAP8[$1463>>0] = $1462;
   }
   $ifile$0$neg$i = $ifile$0203$i ^ -1;
   $exitcond280$i = ($657|0)==(9);
   if ($exitcond280$i) {
    break;
   } else {
    $ifile$0$neg204$i = $ifile$0$neg$i;$ifile$0203$i = $657;
   }
  }
  $irank$0$neg$i = $irank$0206$i ^ -1;
  $exitcond281$i = ($634|0)==(9);
  if ($exitcond281$i) {
   $i$06$i = 0;
   break;
  } else {
   $irank$0$neg207$i = $irank$0$neg$i;$irank$0206$i = $634;
  }
 }
 while(1) {
  $1464 = (_rand64()|0);
  $1465 = tempRet0;
  $1466 = (34162160 + ($i$06$i<<3)|0);
  $1467 = $1466;
  $1468 = $1467;
  HEAP32[$1468>>2] = $1464;
  $1469 = (($1467) + 4)|0;
  $1470 = $1469;
  HEAP32[$1470>>2] = $1465;
  $1471 = (_rand64()|0);
  $1472 = tempRet0;
  $1473 = (34162808 + ($i$06$i<<3)|0);
  $1474 = $1473;
  $1475 = $1474;
  HEAP32[$1475>>2] = $1471;
  $1476 = (($1474) + 4)|0;
  $1477 = $1476;
  HEAP32[$1477>>2] = $1472;
  $1478 = (_rand64()|0);
  $1479 = tempRet0;
  $1480 = (34163456 + ($i$06$i<<3)|0);
  $1481 = $1480;
  $1482 = $1481;
  HEAP32[$1482>>2] = $1478;
  $1483 = (($1481) + 4)|0;
  $1484 = $1483;
  HEAP32[$1484>>2] = $1479;
  $1485 = (_rand64()|0);
  $1486 = tempRet0;
  $1487 = (34164104 + ($i$06$i<<3)|0);
  $1488 = $1487;
  $1489 = $1488;
  HEAP32[$1489>>2] = $1485;
  $1490 = (($1488) + 4)|0;
  $1491 = $1490;
  HEAP32[$1491>>2] = $1486;
  $1492 = (_rand64()|0);
  $1493 = tempRet0;
  $1494 = (34164752 + ($i$06$i<<3)|0);
  $1495 = $1494;
  $1496 = $1495;
  HEAP32[$1496>>2] = $1492;
  $1497 = (($1495) + 4)|0;
  $1498 = $1497;
  HEAP32[$1498>>2] = $1493;
  $1499 = (_rand64()|0);
  $1500 = tempRet0;
  $1501 = (34165400 + ($i$06$i<<3)|0);
  $1502 = $1501;
  $1503 = $1502;
  HEAP32[$1503>>2] = $1499;
  $1504 = (($1502) + 4)|0;
  $1505 = $1504;
  HEAP32[$1505>>2] = $1500;
  $1506 = (_rand64()|0);
  $1507 = tempRet0;
  $1508 = (34166048 + ($i$06$i<<3)|0);
  $1509 = $1508;
  $1510 = $1509;
  HEAP32[$1510>>2] = $1506;
  $1511 = (($1509) + 4)|0;
  $1512 = $1511;
  HEAP32[$1512>>2] = $1507;
  $1513 = (_rand64()|0);
  $1514 = tempRet0;
  $1515 = (34166696 + ($i$06$i<<3)|0);
  $1516 = $1515;
  $1517 = $1516;
  HEAP32[$1517>>2] = $1513;
  $1518 = (($1516) + 4)|0;
  $1519 = $1518;
  HEAP32[$1519>>2] = $1514;
  $1520 = (_rand64()|0);
  $1521 = tempRet0;
  $1522 = (34167344 + ($i$06$i<<3)|0);
  $1523 = $1522;
  $1524 = $1523;
  HEAP32[$1524>>2] = $1520;
  $1525 = (($1523) + 4)|0;
  $1526 = $1525;
  HEAP32[$1526>>2] = $1521;
  $1527 = (_rand64()|0);
  $1528 = tempRet0;
  $1529 = (34167992 + ($i$06$i<<3)|0);
  $1530 = $1529;
  $1531 = $1530;
  HEAP32[$1531>>2] = $1527;
  $1532 = (($1530) + 4)|0;
  $1533 = $1532;
  HEAP32[$1533>>2] = $1528;
  $1534 = (_rand64()|0);
  $1535 = tempRet0;
  $1536 = (34168640 + ($i$06$i<<3)|0);
  $1537 = $1536;
  $1538 = $1537;
  HEAP32[$1538>>2] = $1534;
  $1539 = (($1537) + 4)|0;
  $1540 = $1539;
  HEAP32[$1540>>2] = $1535;
  $1541 = (_rand64()|0);
  $1542 = tempRet0;
  $1543 = (34169288 + ($i$06$i<<3)|0);
  $1544 = $1543;
  $1545 = $1544;
  HEAP32[$1545>>2] = $1541;
  $1546 = (($1544) + 4)|0;
  $1547 = $1546;
  HEAP32[$1547>>2] = $1542;
  $1548 = (_rand64()|0);
  $1549 = tempRet0;
  $1550 = (34169936 + ($i$06$i<<3)|0);
  $1551 = $1550;
  $1552 = $1551;
  HEAP32[$1552>>2] = $1548;
  $1553 = (($1551) + 4)|0;
  $1554 = $1553;
  HEAP32[$1554>>2] = $1549;
  $1555 = (_rand64()|0);
  $1556 = tempRet0;
  $1557 = (34170584 + ($i$06$i<<3)|0);
  $1558 = $1557;
  $1559 = $1558;
  HEAP32[$1559>>2] = $1555;
  $1560 = (($1558) + 4)|0;
  $1561 = $1560;
  HEAP32[$1561>>2] = $1556;
  $1562 = (_rand64()|0);
  $1563 = tempRet0;
  $1564 = (34171536 + ($i$06$i<<3)|0);
  $1565 = $1564;
  $1566 = $1565;
  HEAP32[$1566>>2] = $1562;
  $1567 = (($1565) + 4)|0;
  $1568 = $1567;
  HEAP32[$1568>>2] = $1563;
  $1569 = (_rand64()|0);
  $1570 = tempRet0;
  $1571 = (34172184 + ($i$06$i<<3)|0);
  $1572 = $1571;
  $1573 = $1572;
  HEAP32[$1573>>2] = $1569;
  $1574 = (($1572) + 4)|0;
  $1575 = $1574;
  HEAP32[$1575>>2] = $1570;
  $1576 = (_rand64()|0);
  $1577 = tempRet0;
  $1578 = (34172832 + ($i$06$i<<3)|0);
  $1579 = $1578;
  $1580 = $1579;
  HEAP32[$1580>>2] = $1576;
  $1581 = (($1579) + 4)|0;
  $1582 = $1581;
  HEAP32[$1582>>2] = $1577;
  $1583 = (_rand64()|0);
  $1584 = tempRet0;
  $1585 = (34173480 + ($i$06$i<<3)|0);
  $1586 = $1585;
  $1587 = $1586;
  HEAP32[$1587>>2] = $1583;
  $1588 = (($1586) + 4)|0;
  $1589 = $1588;
  HEAP32[$1589>>2] = $1584;
  $1590 = (_rand64()|0);
  $1591 = tempRet0;
  $1592 = (34174128 + ($i$06$i<<3)|0);
  $1593 = $1592;
  $1594 = $1593;
  HEAP32[$1594>>2] = $1590;
  $1595 = (($1593) + 4)|0;
  $1596 = $1595;
  HEAP32[$1596>>2] = $1591;
  $1597 = (_rand64()|0);
  $1598 = tempRet0;
  $1599 = (34174776 + ($i$06$i<<3)|0);
  $1600 = $1599;
  $1601 = $1600;
  HEAP32[$1601>>2] = $1597;
  $1602 = (($1600) + 4)|0;
  $1603 = $1602;
  HEAP32[$1603>>2] = $1598;
  $1604 = (_rand64()|0);
  $1605 = tempRet0;
  $1606 = (34175424 + ($i$06$i<<3)|0);
  $1607 = $1606;
  $1608 = $1607;
  HEAP32[$1608>>2] = $1604;
  $1609 = (($1607) + 4)|0;
  $1610 = $1609;
  HEAP32[$1610>>2] = $1605;
  $1611 = (_rand64()|0);
  $1612 = tempRet0;
  $1613 = (34176072 + ($i$06$i<<3)|0);
  $1614 = $1613;
  $1615 = $1614;
  HEAP32[$1615>>2] = $1611;
  $1616 = (($1614) + 4)|0;
  $1617 = $1616;
  HEAP32[$1617>>2] = $1612;
  $1618 = (_rand64()|0);
  $1619 = tempRet0;
  $1620 = (34176720 + ($i$06$i<<3)|0);
  $1621 = $1620;
  $1622 = $1621;
  HEAP32[$1622>>2] = $1618;
  $1623 = (($1621) + 4)|0;
  $1624 = $1623;
  HEAP32[$1624>>2] = $1619;
  $1625 = (_rand64()|0);
  $1626 = tempRet0;
  $1627 = (34177368 + ($i$06$i<<3)|0);
  $1628 = $1627;
  $1629 = $1628;
  HEAP32[$1629>>2] = $1625;
  $1630 = (($1628) + 4)|0;
  $1631 = $1630;
  HEAP32[$1631>>2] = $1626;
  $1632 = (_rand64()|0);
  $1633 = tempRet0;
  $1634 = (34178016 + ($i$06$i<<3)|0);
  $1635 = $1634;
  $1636 = $1635;
  HEAP32[$1636>>2] = $1632;
  $1637 = (($1635) + 4)|0;
  $1638 = $1637;
  HEAP32[$1638>>2] = $1633;
  $1639 = (_rand64()|0);
  $1640 = tempRet0;
  $1641 = (34178664 + ($i$06$i<<3)|0);
  $1642 = $1641;
  $1643 = $1642;
  HEAP32[$1643>>2] = $1639;
  $1644 = (($1642) + 4)|0;
  $1645 = $1644;
  HEAP32[$1645>>2] = $1640;
  $1646 = (_rand64()|0);
  $1647 = tempRet0;
  $1648 = (34179312 + ($i$06$i<<3)|0);
  $1649 = $1648;
  $1650 = $1649;
  HEAP32[$1650>>2] = $1646;
  $1651 = (($1649) + 4)|0;
  $1652 = $1651;
  HEAP32[$1652>>2] = $1647;
  $1653 = (_rand64()|0);
  $1654 = tempRet0;
  $1655 = (34179960 + ($i$06$i<<3)|0);
  $1656 = $1655;
  $1657 = $1656;
  HEAP32[$1657>>2] = $1653;
  $1658 = (($1656) + 4)|0;
  $1659 = $1658;
  HEAP32[$1659>>2] = $1654;
  $1660 = (($i$06$i) + 1)|0;
  $exitcond7$i = ($1660|0)==(81);
  if ($exitcond7$i) {
   $i$15$i = 0;
   break;
  } else {
   $i$06$i = $1660;
  }
 }
 while(1) {
  $1661 = (_rand64()|0);
  $1662 = tempRet0;
  $1663 = (34171232 + ($i$15$i<<3)|0);
  $1664 = $1663;
  $1665 = $1664;
  HEAP32[$1665>>2] = $1661;
  $1666 = (($1664) + 4)|0;
  $1667 = $1666;
  HEAP32[$1667>>2] = $1662;
  $1668 = (_rand64()|0);
  $1669 = tempRet0;
  $1670 = (34180608 + ($i$15$i<<3)|0);
  $1671 = $1670;
  $1672 = $1671;
  HEAP32[$1672>>2] = $1668;
  $1673 = (($1671) + 4)|0;
  $1674 = $1673;
  HEAP32[$1674>>2] = $1669;
  $1675 = (($i$15$i) + 1)|0;
  $exitcond$i8 = ($1675|0)==(18);
  if ($exitcond$i8) {
   break;
  } else {
   $i$15$i = $1675;
  }
 }
 $1676 = (_rand64()|0);
 $1677 = tempRet0;
 $1678 = 34171376;
 $1679 = $1678;
 HEAP32[$1679>>2] = $1676;
 $1680 = (($1678) + 4)|0;
 $1681 = $1680;
 HEAP32[$1681>>2] = $1677;
 $1682 = (_rand64()|0);
 $1683 = tempRet0;
 $1684 = 34171408;
 $1685 = $1684;
 HEAP32[$1685>>2] = $1682;
 $1686 = (($1684) + 4)|0;
 $1687 = $1686;
 HEAP32[$1687>>2] = $1683;
 $1688 = (_rand64()|0);
 $1689 = tempRet0;
 $1690 = 34171440;
 $1691 = $1690;
 HEAP32[$1691>>2] = $1688;
 $1692 = (($1690) + 4)|0;
 $1693 = $1692;
 HEAP32[$1693>>2] = $1689;
 $1694 = (_rand64()|0);
 $1695 = tempRet0;
 $1696 = 34171472;
 $1697 = $1696;
 HEAP32[$1697>>2] = $1694;
 $1698 = (($1696) + 4)|0;
 $1699 = $1698;
 HEAP32[$1699>>2] = $1695;
 $1700 = (_rand64()|0);
 $1701 = tempRet0;
 $1702 = 34180752;
 $1703 = $1702;
 HEAP32[$1703>>2] = $1700;
 $1704 = (($1702) + 4)|0;
 $1705 = $1704;
 HEAP32[$1705>>2] = $1701;
 $1706 = (_rand64()|0);
 $1707 = tempRet0;
 $1708 = 34180784;
 $1709 = $1708;
 HEAP32[$1709>>2] = $1706;
 $1710 = (($1708) + 4)|0;
 $1711 = $1710;
 HEAP32[$1711>>2] = $1707;
 $1712 = (_rand64()|0);
 $1713 = tempRet0;
 $1714 = 34180816;
 $1715 = $1714;
 HEAP32[$1715>>2] = $1712;
 $1716 = (($1714) + 4)|0;
 $1717 = $1716;
 HEAP32[$1717>>2] = $1713;
 $1718 = (_rand64()|0);
 $1719 = tempRet0;
 $1720 = 34180848;
 $1721 = $1720;
 HEAP32[$1721>>2] = $1718;
 $1722 = (($1720) + 4)|0;
 $1723 = $1722;
 HEAP32[$1723>>2] = $1719;
 $1724 = (_rand64()|0);
 $1725 = tempRet0;
 $1726 = ((34171376 + 8|0));
 $1727 = $1726;
 HEAP32[$1727>>2] = $1724;
 $1728 = (($1726) + 4)|0;
 $1729 = $1728;
 HEAP32[$1729>>2] = $1725;
 $1730 = (_rand64()|0);
 $1731 = tempRet0;
 $1732 = ((34171408 + 8|0));
 $1733 = $1732;
 HEAP32[$1733>>2] = $1730;
 $1734 = (($1732) + 4)|0;
 $1735 = $1734;
 HEAP32[$1735>>2] = $1731;
 $1736 = (_rand64()|0);
 $1737 = tempRet0;
 $1738 = ((34171440 + 8|0));
 $1739 = $1738;
 HEAP32[$1739>>2] = $1736;
 $1740 = (($1738) + 4)|0;
 $1741 = $1740;
 HEAP32[$1741>>2] = $1737;
 $1742 = (_rand64()|0);
 $1743 = tempRet0;
 $1744 = ((34171472 + 8|0));
 $1745 = $1744;
 HEAP32[$1745>>2] = $1742;
 $1746 = (($1744) + 4)|0;
 $1747 = $1746;
 HEAP32[$1747>>2] = $1743;
 $1748 = (_rand64()|0);
 $1749 = tempRet0;
 $1750 = ((34180752 + 8|0));
 $1751 = $1750;
 HEAP32[$1751>>2] = $1748;
 $1752 = (($1750) + 4)|0;
 $1753 = $1752;
 HEAP32[$1753>>2] = $1749;
 $1754 = (_rand64()|0);
 $1755 = tempRet0;
 $1756 = ((34180784 + 8|0));
 $1757 = $1756;
 HEAP32[$1757>>2] = $1754;
 $1758 = (($1756) + 4)|0;
 $1759 = $1758;
 HEAP32[$1759>>2] = $1755;
 $1760 = (_rand64()|0);
 $1761 = tempRet0;
 $1762 = ((34180816 + 8|0));
 $1763 = $1762;
 HEAP32[$1763>>2] = $1760;
 $1764 = (($1762) + 4)|0;
 $1765 = $1764;
 HEAP32[$1765>>2] = $1761;
 $1766 = (_rand64()|0);
 $1767 = tempRet0;
 $1768 = ((34180848 + 8|0));
 $1769 = $1768;
 HEAP32[$1769>>2] = $1766;
 $1770 = (($1768) + 4)|0;
 $1771 = $1770;
 HEAP32[$1771>>2] = $1767;
 $1772 = (_rand64()|0);
 $1773 = tempRet0;
 $1774 = ((34171376 + 16|0));
 $1775 = $1774;
 HEAP32[$1775>>2] = $1772;
 $1776 = (($1774) + 4)|0;
 $1777 = $1776;
 HEAP32[$1777>>2] = $1773;
 $1778 = (_rand64()|0);
 $1779 = tempRet0;
 $1780 = ((34171408 + 16|0));
 $1781 = $1780;
 HEAP32[$1781>>2] = $1778;
 $1782 = (($1780) + 4)|0;
 $1783 = $1782;
 HEAP32[$1783>>2] = $1779;
 $1784 = (_rand64()|0);
 $1785 = tempRet0;
 $1786 = ((34171440 + 16|0));
 $1787 = $1786;
 HEAP32[$1787>>2] = $1784;
 $1788 = (($1786) + 4)|0;
 $1789 = $1788;
 HEAP32[$1789>>2] = $1785;
 $1790 = (_rand64()|0);
 $1791 = tempRet0;
 $1792 = ((34171472 + 16|0));
 $1793 = $1792;
 HEAP32[$1793>>2] = $1790;
 $1794 = (($1792) + 4)|0;
 $1795 = $1794;
 HEAP32[$1795>>2] = $1791;
 $1796 = (_rand64()|0);
 $1797 = tempRet0;
 $1798 = ((34180752 + 16|0));
 $1799 = $1798;
 HEAP32[$1799>>2] = $1796;
 $1800 = (($1798) + 4)|0;
 $1801 = $1800;
 HEAP32[$1801>>2] = $1797;
 $1802 = (_rand64()|0);
 $1803 = tempRet0;
 $1804 = ((34180784 + 16|0));
 $1805 = $1804;
 HEAP32[$1805>>2] = $1802;
 $1806 = (($1804) + 4)|0;
 $1807 = $1806;
 HEAP32[$1807>>2] = $1803;
 $1808 = (_rand64()|0);
 $1809 = tempRet0;
 $1810 = ((34180816 + 16|0));
 $1811 = $1810;
 HEAP32[$1811>>2] = $1808;
 $1812 = (($1810) + 4)|0;
 $1813 = $1812;
 HEAP32[$1813>>2] = $1809;
 $1814 = (_rand64()|0);
 $1815 = tempRet0;
 $1816 = ((34180848 + 16|0));
 $1817 = $1816;
 HEAP32[$1817>>2] = $1814;
 $1818 = (($1816) + 4)|0;
 $1819 = $1818;
 HEAP32[$1819>>2] = $1815;
 $1820 = (_rand64()|0);
 $1821 = tempRet0;
 $1822 = ((34171376 + 24|0));
 $1823 = $1822;
 HEAP32[$1823>>2] = $1820;
 $1824 = (($1822) + 4)|0;
 $1825 = $1824;
 HEAP32[$1825>>2] = $1821;
 $1826 = (_rand64()|0);
 $1827 = tempRet0;
 $1828 = ((34171408 + 24|0));
 $1829 = $1828;
 HEAP32[$1829>>2] = $1826;
 $1830 = (($1828) + 4)|0;
 $1831 = $1830;
 HEAP32[$1831>>2] = $1827;
 $1832 = (_rand64()|0);
 $1833 = tempRet0;
 $1834 = ((34171440 + 24|0));
 $1835 = $1834;
 HEAP32[$1835>>2] = $1832;
 $1836 = (($1834) + 4)|0;
 $1837 = $1836;
 HEAP32[$1837>>2] = $1833;
 $1838 = (_rand64()|0);
 $1839 = tempRet0;
 $1840 = ((34171472 + 24|0));
 $1841 = $1840;
 HEAP32[$1841>>2] = $1838;
 $1842 = (($1840) + 4)|0;
 $1843 = $1842;
 HEAP32[$1843>>2] = $1839;
 $1844 = (_rand64()|0);
 $1845 = tempRet0;
 $1846 = ((34180752 + 24|0));
 $1847 = $1846;
 HEAP32[$1847>>2] = $1844;
 $1848 = (($1846) + 4)|0;
 $1849 = $1848;
 HEAP32[$1849>>2] = $1845;
 $1850 = (_rand64()|0);
 $1851 = tempRet0;
 $1852 = ((34180784 + 24|0));
 $1853 = $1852;
 HEAP32[$1853>>2] = $1850;
 $1854 = (($1852) + 4)|0;
 $1855 = $1854;
 HEAP32[$1855>>2] = $1851;
 $1856 = (_rand64()|0);
 $1857 = tempRet0;
 $1858 = ((34180816 + 24|0));
 $1859 = $1858;
 HEAP32[$1859>>2] = $1856;
 $1860 = (($1858) + 4)|0;
 $1861 = $1860;
 HEAP32[$1861>>2] = $1857;
 $1862 = (_rand64()|0);
 $1863 = tempRet0;
 $1864 = ((34180848 + 24|0));
 $1865 = $1864;
 HEAP32[$1865>>2] = $1862;
 $1866 = (($1864) + 4)|0;
 $1867 = $1866;
 HEAP32[$1867>>2] = $1863;
 $1868 = (_rand64()|0);
 $1869 = tempRet0;
 $1870 = 34171504;
 $1871 = $1870;
 HEAP32[$1871>>2] = $1868;
 $1872 = (($1870) + 4)|0;
 $1873 = $1872;
 HEAP32[$1873>>2] = $1869;
 $1874 = (_rand64()|0);
 $1875 = tempRet0;
 $1876 = 34171520;
 $1877 = $1876;
 HEAP32[$1877>>2] = $1874;
 $1878 = (($1876) + 4)|0;
 $1879 = $1878;
 HEAP32[$1879>>2] = $1875;
 $1880 = (_rand64()|0);
 $1881 = tempRet0;
 $1882 = 34180880;
 $1883 = $1882;
 HEAP32[$1883>>2] = $1880;
 $1884 = (($1882) + 4)|0;
 $1885 = $1884;
 HEAP32[$1885>>2] = $1881;
 $1886 = (_rand64()|0);
 $1887 = tempRet0;
 $1888 = 34180896;
 $1889 = $1888;
 HEAP32[$1889>>2] = $1886;
 $1890 = (($1888) + 4)|0;
 $1891 = $1890;
 HEAP32[$1891>>2] = $1887;
 $1892 = (_rand64()|0);
 $1893 = tempRet0;
 $1894 = ((34171504 + 8|0));
 $1895 = $1894;
 HEAP32[$1895>>2] = $1892;
 $1896 = (($1894) + 4)|0;
 $1897 = $1896;
 HEAP32[$1897>>2] = $1893;
 $1898 = (_rand64()|0);
 $1899 = tempRet0;
 $1900 = ((34171520 + 8|0));
 $1901 = $1900;
 HEAP32[$1901>>2] = $1898;
 $1902 = (($1900) + 4)|0;
 $1903 = $1902;
 HEAP32[$1903>>2] = $1899;
 $1904 = (_rand64()|0);
 $1905 = tempRet0;
 $1906 = ((34180880 + 8|0));
 $1907 = $1906;
 HEAP32[$1907>>2] = $1904;
 $1908 = (($1906) + 4)|0;
 $1909 = $1908;
 HEAP32[$1909>>2] = $1905;
 $1910 = (_rand64()|0);
 $1911 = tempRet0;
 $1912 = ((34180896 + 8|0));
 $1913 = $1912;
 HEAP32[$1913>>2] = $1910;
 $1914 = (($1912) + 4)|0;
 $1915 = $1914;
 HEAP32[$1915>>2] = $1911;
 $iking$083$i = 0;
 while(1) {
  $1916 = ((221102544 + (($iking$083$i*48)|0)|0) + 8|0);
  HEAP32[$1916>>2] = 0;
  $1917 = ((221102544 + (($iking$083$i*48)|0)|0) + 4|0);
  HEAP32[$1917>>2] = 0;
  $1918 = (221102544 + (($iking$083$i*48)|0)|0);
  HEAP32[$1918>>2] = 0;
  $1919 = (33577952 + (($iking$083$i*12)|0)|0);
  $1920 = HEAP32[$1919>>2]|0;
  $1921 = ((33577952 + (($iking$083$i*12)|0)|0) + 4|0);
  $1922 = HEAP32[$1921>>2]|0;
  $1923 = ((33577952 + (($iking$083$i*12)|0)|0) + 8|0);
  $1924 = HEAP32[$1923>>2]|0;
  $1925 = $1922 | $1920;
  $1926 = $1925 | $1924;
  $1927 = ($1926|0)==(0);
  if ($1927) {
   $1956 = $1920;$1960 = $1922;$1964 = $1924;$1967 = 0;$1970 = 0;$1973 = 0;
  } else {
   $bb_check$sroa$0$029$i = $1920;$bb_check$sroa$1$028$i = $1922;$bb_check$sroa$2$027$i = $1924;
   while(1) {
    $1928 = (_last_one210($bb_check$sroa$2$027$i,$bb_check$sroa$1$028$i,$bb_check$sroa$0$029$i)|0);
    $1929 = HEAP32[$1918>>2]|0;
    $1930 = (33577952 + (($1928*12)|0)|0);
    $1931 = HEAP32[$1930>>2]|0;
    $1932 = $1931 | $1929;
    HEAP32[$1918>>2] = $1932;
    $1933 = HEAP32[$1917>>2]|0;
    $1934 = ((33577952 + (($1928*12)|0)|0) + 4|0);
    $1935 = HEAP32[$1934>>2]|0;
    $1936 = $1935 | $1933;
    HEAP32[$1917>>2] = $1936;
    $1937 = HEAP32[$1916>>2]|0;
    $1938 = ((33577952 + (($1928*12)|0)|0) + 8|0);
    $1939 = HEAP32[$1938>>2]|0;
    $1940 = $1939 | $1937;
    HEAP32[$1916>>2] = $1940;
    $1941 = (34156304 + (($1928*12)|0)|0);
    $1942 = HEAP32[$1941>>2]|0;
    $1943 = $1942 ^ $bb_check$sroa$0$029$i;
    $1944 = ((34156304 + (($1928*12)|0)|0) + 4|0);
    $1945 = HEAP32[$1944>>2]|0;
    $1946 = $1945 ^ $bb_check$sroa$1$028$i;
    $1947 = ((34156304 + (($1928*12)|0)|0) + 8|0);
    $1948 = HEAP32[$1947>>2]|0;
    $1949 = $1948 ^ $bb_check$sroa$2$027$i;
    $1950 = $1946 | $1943;
    $1951 = $1950 | $1949;
    $1952 = ($1951|0)==(0);
    if ($1952) {
     break;
    } else {
     $bb_check$sroa$0$029$i = $1943;$bb_check$sroa$1$028$i = $1946;$bb_check$sroa$2$027$i = $1949;
    }
   }
   $$pre$i = HEAP32[$1919>>2]|0;
   $$pre85$i = HEAP32[$1921>>2]|0;
   $$pre86$i = HEAP32[$1923>>2]|0;
   $1956 = $$pre$i;$1960 = $$pre85$i;$1964 = $$pre86$i;$1967 = $1932;$1970 = $1936;$1973 = $1940;
  }
  $1953 = (34156304 + (($iking$083$i*12)|0)|0);
  $1954 = HEAP32[$1953>>2]|0;
  $1955 = $1954 | $1956;
  $1957 = ((34156304 + (($iking$083$i*12)|0)|0) + 4|0);
  $1958 = HEAP32[$1957>>2]|0;
  $1959 = $1958 | $1960;
  $1961 = ((34156304 + (($iking$083$i*12)|0)|0) + 8|0);
  $1962 = HEAP32[$1961>>2]|0;
  $1963 = $1962 | $1964;
  $1965 = $1955 ^ -1;
  $1966 = $1967 & $1965;
  HEAP32[$1918>>2] = $1966;
  $1968 = $1959 ^ -1;
  $1969 = $1970 & $1968;
  HEAP32[$1917>>2] = $1969;
  $1971 = $1963 ^ -1;
  $1972 = $1973 & $1971;
  HEAP32[$1916>>2] = $1972;
  $1974 = ((221102544 + (($iking$083$i*48)|0)|0) + 20|0);
  HEAP32[$1974>>2] = 0;
  $1975 = ((221102544 + (($iking$083$i*48)|0)|0) + 16|0);
  HEAP32[$1975>>2] = 0;
  $1976 = ((221102544 + (($iking$083$i*48)|0)|0) + 12|0);
  HEAP32[$1976>>2] = 0;
  $1977 = (33576976 + (($iking$083$i*12)|0)|0);
  $1978 = HEAP32[$1977>>2]|0;
  $1979 = ((33576976 + (($iking$083$i*12)|0)|0) + 4|0);
  $1980 = HEAP32[$1979>>2]|0;
  $1981 = ((33576976 + (($iking$083$i*12)|0)|0) + 8|0);
  $1982 = HEAP32[$1981>>2]|0;
  $1983 = $1980 | $1978;
  $1984 = $1983 | $1982;
  $1985 = ($1984|0)==(0);
  if ($1985) {
   $2012 = $1956;$2518 = 0;$2519 = 0;$2520 = 0;
  } else {
   $bb_check$sroa$0$132$i = $1978;$bb_check$sroa$1$131$i = $1980;$bb_check$sroa$2$130$i = $1982;
   while(1) {
    $1986 = (_last_one210($bb_check$sroa$2$130$i,$bb_check$sroa$1$131$i,$bb_check$sroa$0$132$i)|0);
    $1987 = HEAP32[$1976>>2]|0;
    $1988 = (33576976 + (($1986*12)|0)|0);
    $1989 = HEAP32[$1988>>2]|0;
    $1990 = $1989 | $1987;
    HEAP32[$1976>>2] = $1990;
    $1991 = HEAP32[$1975>>2]|0;
    $1992 = ((33576976 + (($1986*12)|0)|0) + 4|0);
    $1993 = HEAP32[$1992>>2]|0;
    $1994 = $1993 | $1991;
    HEAP32[$1975>>2] = $1994;
    $1995 = HEAP32[$1974>>2]|0;
    $1996 = ((33576976 + (($1986*12)|0)|0) + 8|0);
    $1997 = HEAP32[$1996>>2]|0;
    $1998 = $1997 | $1995;
    HEAP32[$1974>>2] = $1998;
    $1999 = (34156304 + (($1986*12)|0)|0);
    $2000 = HEAP32[$1999>>2]|0;
    $2001 = $2000 ^ $bb_check$sroa$0$132$i;
    $2002 = ((34156304 + (($1986*12)|0)|0) + 4|0);
    $2003 = HEAP32[$2002>>2]|0;
    $2004 = $2003 ^ $bb_check$sroa$1$131$i;
    $2005 = ((34156304 + (($1986*12)|0)|0) + 8|0);
    $2006 = HEAP32[$2005>>2]|0;
    $2007 = $2006 ^ $bb_check$sroa$2$130$i;
    $2008 = $2004 | $2001;
    $2009 = $2008 | $2007;
    $2010 = ($2009|0)==(0);
    if ($2010) {
     break;
    } else {
     $bb_check$sroa$0$132$i = $2001;$bb_check$sroa$1$131$i = $2004;$bb_check$sroa$2$130$i = $2007;
    }
   }
   $$pre87$i = HEAP32[$1919>>2]|0;
   $2012 = $$pre87$i;$2518 = $1998;$2519 = $1994;$2520 = $1990;
  }
  $2011 = ($2012|0)==(0);
  if ($2011) {
   $2521 = $2518;$2522 = $2519;$2523 = $2520;
  } else {
   $bb_check$sroa$0$236$i = $2012;
   while(1) {
    $2013 = (_last_one0($bb_check$sroa$0$236$i)|0);
    $2014 = HEAP32[$1976>>2]|0;
    $2015 = (33576976 + (($2013*12)|0)|0);
    $2016 = HEAP32[$2015>>2]|0;
    $2017 = $2016 | $2014;
    HEAP32[$1976>>2] = $2017;
    $2018 = HEAP32[$1975>>2]|0;
    $2019 = ((33576976 + (($2013*12)|0)|0) + 4|0);
    $2020 = HEAP32[$2019>>2]|0;
    $2021 = $2020 | $2018;
    HEAP32[$1975>>2] = $2021;
    $2022 = HEAP32[$1974>>2]|0;
    $2023 = ((33576976 + (($2013*12)|0)|0) + 8|0);
    $2024 = HEAP32[$2023>>2]|0;
    $2025 = $2024 | $2022;
    HEAP32[$1974>>2] = $2025;
    $2026 = (34156304 + (($2013*12)|0)|0);
    $2027 = HEAP32[$2026>>2]|0;
    $2028 = $2027 ^ $bb_check$sroa$0$236$i;
    $2029 = ($2027|0)==($bb_check$sroa$0$236$i|0);
    if ($2029) {
     $2521 = $2025;$2522 = $2021;$2523 = $2017;
     break;
    } else {
     $bb_check$sroa$0$236$i = $2028;
    }
   }
  }
  $2030 = HEAP32[$1921>>2]|0;
  $2031 = ($2030|0)==(0);
  if ($2031) {
   $2052 = $2523;$2055 = $2522;$2058 = $2521;
  } else {
   $bb_check$sroa$1$240$i = $2030;
   while(1) {
    $2032 = (_last_one1($bb_check$sroa$1$240$i)|0);
    $2033 = (33576976 + (($2032*12)|0)|0);
    $2034 = HEAP32[$2033>>2]|0;
    $2035 = HEAP32[$1976>>2]|0;
    $2036 = $2035 | $2034;
    HEAP32[$1976>>2] = $2036;
    $2037 = ((34156304 + (($2032*12)|0)|0) + 4|0);
    $2038 = HEAP32[$2037>>2]|0;
    $2039 = $2038 ^ $bb_check$sroa$1$240$i;
    $2040 = ($2038|0)==($bb_check$sroa$1$240$i|0);
    if ($2040) {
     break;
    } else {
     $bb_check$sroa$1$240$i = $2039;
    }
   }
   $$pre88$i = HEAP32[$1975>>2]|0;
   $$pre89$i = HEAP32[$1974>>2]|0;
   $2052 = $2036;$2055 = $$pre88$i;$2058 = $$pre89$i;
  }
  $2041 = HEAP32[$1953>>2]|0;
  $2042 = HEAP32[$1977>>2]|0;
  $2043 = $2042 | $2041;
  $2044 = HEAP32[$1957>>2]|0;
  $2045 = HEAP32[$1979>>2]|0;
  $2046 = $2045 | $2044;
  $2047 = HEAP32[$1961>>2]|0;
  $2048 = HEAP32[$1981>>2]|0;
  $2049 = $2048 | $2047;
  $2050 = $2043 ^ -1;
  $2051 = $2052 & $2050;
  HEAP32[$1976>>2] = $2051;
  $2053 = $2046 ^ -1;
  $2054 = $2055 & $2053;
  HEAP32[$1975>>2] = $2054;
  $2056 = $2049 ^ -1;
  $2057 = $2058 & $2056;
  HEAP32[$1974>>2] = $2057;
  $2059 = ((221102544 + (($iking$083$i*48)|0)|0) + 32|0);
  HEAP32[$2059>>2] = 0;
  $2060 = ((221102544 + (($iking$083$i*48)|0)|0) + 28|0);
  HEAP32[$2060>>2] = 0;
  $2061 = ((221102544 + (($iking$083$i*48)|0)|0) + 24|0);
  HEAP32[$2061>>2] = 0;
  $2062 = (33576000 + (($iking$083$i*12)|0)|0);
  $2063 = HEAP32[$2062>>2]|0;
  $2064 = ((33576000 + (($iking$083$i*12)|0)|0) + 4|0);
  $2065 = HEAP32[$2064>>2]|0;
  $2066 = ((33576000 + (($iking$083$i*12)|0)|0) + 8|0);
  $2067 = HEAP32[$2066>>2]|0;
  $2068 = $2065 | $2063;
  $2069 = $2068 | $2067;
  $2070 = ($2069|0)==(0);
  if (!($2070)) {
   $bb_check$sroa$0$346$i = $2063;$bb_check$sroa$1$345$i = $2065;$bb_check$sroa$2$244$i = $2067;
   while(1) {
    $2071 = (_last_one210($bb_check$sroa$2$244$i,$bb_check$sroa$1$345$i,$bb_check$sroa$0$346$i)|0);
    $2072 = HEAP32[$2061>>2]|0;
    $2073 = (33576000 + (($2071*12)|0)|0);
    $2074 = HEAP32[$2073>>2]|0;
    $2075 = $2074 | $2072;
    HEAP32[$2061>>2] = $2075;
    $2076 = HEAP32[$2060>>2]|0;
    $2077 = ((33576000 + (($2071*12)|0)|0) + 4|0);
    $2078 = HEAP32[$2077>>2]|0;
    $2079 = $2078 | $2076;
    HEAP32[$2060>>2] = $2079;
    $2080 = HEAP32[$2059>>2]|0;
    $2081 = ((33576000 + (($2071*12)|0)|0) + 8|0);
    $2082 = HEAP32[$2081>>2]|0;
    $2083 = $2082 | $2080;
    HEAP32[$2059>>2] = $2083;
    $2084 = (34156304 + (($2071*12)|0)|0);
    $2085 = HEAP32[$2084>>2]|0;
    $2086 = $2085 ^ $bb_check$sroa$0$346$i;
    $2087 = ((34156304 + (($2071*12)|0)|0) + 4|0);
    $2088 = HEAP32[$2087>>2]|0;
    $2089 = $2088 ^ $bb_check$sroa$1$345$i;
    $2090 = ((34156304 + (($2071*12)|0)|0) + 8|0);
    $2091 = HEAP32[$2090>>2]|0;
    $2092 = $2091 ^ $bb_check$sroa$2$244$i;
    $2093 = $2089 | $2086;
    $2094 = $2093 | $2092;
    $2095 = ($2094|0)==(0);
    if ($2095) {
     break;
    } else {
     $bb_check$sroa$0$346$i = $2086;$bb_check$sroa$1$345$i = $2089;$bb_check$sroa$2$244$i = $2092;
    }
   }
  }
  $2096 = HEAP32[$1919>>2]|0;
  $2097 = ($2096|0)==(0);
  if (!($2097)) {
   $bb_check$sroa$0$450$i = $2096;
   while(1) {
    $2098 = (_last_one0($bb_check$sroa$0$450$i)|0);
    $2099 = HEAP32[$2061>>2]|0;
    $2100 = (33576000 + (($2098*12)|0)|0);
    $2101 = HEAP32[$2100>>2]|0;
    $2102 = $2101 | $2099;
    HEAP32[$2061>>2] = $2102;
    $2103 = HEAP32[$2060>>2]|0;
    $2104 = ((33576000 + (($2098*12)|0)|0) + 4|0);
    $2105 = HEAP32[$2104>>2]|0;
    $2106 = $2105 | $2103;
    HEAP32[$2060>>2] = $2106;
    $2107 = HEAP32[$2059>>2]|0;
    $2108 = ((33576000 + (($2098*12)|0)|0) + 8|0);
    $2109 = HEAP32[$2108>>2]|0;
    $2110 = $2109 | $2107;
    HEAP32[$2059>>2] = $2110;
    $2111 = (34156304 + (($2098*12)|0)|0);
    $2112 = HEAP32[$2111>>2]|0;
    $2113 = $2112 ^ $bb_check$sroa$0$450$i;
    $2114 = ($2112|0)==($bb_check$sroa$0$450$i|0);
    if ($2114) {
     break;
    } else {
     $bb_check$sroa$0$450$i = $2113;
    }
   }
  }
  $2115 = ($iking$083$i|0)<(63);
  do {
   if ($2115) {
    $2116 = (($iking$083$i) + 9)|0;
    $2117 = (34160208 + (($2116*12)|0)|0);
    $2118 = HEAP32[$2117>>2]|0;
    $2119 = (33953152 + (($iking$083$i*1536)|0)|0);
    $2120 = HEAP32[$2119>>2]|0;
    $2121 = $2120 & $2118;
    $2122 = ((221102544 + (($iking$083$i*48)|0)|0) + 36|0);
    HEAP32[$2122>>2] = $2121;
    $2123 = ((34160208 + (($2116*12)|0)|0) + 4|0);
    $2124 = HEAP32[$2123>>2]|0;
    $2125 = ((33953152 + (($iking$083$i*1536)|0)|0) + 4|0);
    $2126 = HEAP32[$2125>>2]|0;
    $2127 = $2126 & $2124;
    $2128 = ((221102544 + (($iking$083$i*48)|0)|0) + 40|0);
    HEAP32[$2128>>2] = $2127;
    $2129 = ((34160208 + (($2116*12)|0)|0) + 8|0);
    $2130 = HEAP32[$2129>>2]|0;
    $2131 = ((33953152 + (($iking$083$i*1536)|0)|0) + 8|0);
    $2132 = HEAP32[$2131>>2]|0;
    $2133 = $2132 & $2130;
    $2134 = ((221102544 + (($iking$083$i*48)|0)|0) + 44|0);
    HEAP32[$2134>>2] = $2133;
    $2135 = ($iking$083$i|0)<(27);
    if ($2135) {
     if ((($iking$083$i|0) == 18) | (($iking$083$i|0) == 9) | (($iking$083$i|0) == 0)) {
      $2172 = $2121;$2174 = $2127;$2176 = $2133;
     } else {
      $2136 = (($iking$083$i) + -1)|0;
      $2137 = (34160208 + (($2136*12)|0)|0);
      $2138 = HEAP32[$2137>>2]|0;
      $2139 = (33953152 + (($2136*1536)|0)|0);
      $2140 = HEAP32[$2139>>2]|0;
      $2141 = $2140 & $2138;
      $2142 = ((34160208 + (($2136*12)|0)|0) + 4|0);
      $2143 = HEAP32[$2142>>2]|0;
      $2144 = ((33953152 + (($2136*1536)|0)|0) + 4|0);
      $2145 = HEAP32[$2144>>2]|0;
      $2146 = $2145 & $2143;
      $2147 = ((34160208 + (($2136*12)|0)|0) + 8|0);
      $2148 = HEAP32[$2147>>2]|0;
      $2149 = ((33953152 + (($2136*1536)|0)|0) + 8|0);
      $2150 = HEAP32[$2149>>2]|0;
      $2151 = $2150 & $2148;
      $2152 = $2141 | $2121;
      HEAP32[$2122>>2] = $2152;
      $2153 = $2146 | $2127;
      HEAP32[$2128>>2] = $2153;
      $2154 = $2151 | $2133;
      HEAP32[$2134>>2] = $2154;
      if ((($iking$083$i|0) == 8) | (($iking$083$i|0) == 17) | (($iking$083$i|0) == 26)) {
       break;
      } else {
       $2172 = $2152;$2174 = $2153;$2176 = $2154;
      }
     }
     $2155 = (($iking$083$i) + 1)|0;
     $2156 = (34160208 + (($2155*12)|0)|0);
     $2157 = HEAP32[$2156>>2]|0;
     $2158 = (33953152 + (($2155*1536)|0)|0);
     $2159 = HEAP32[$2158>>2]|0;
     $2160 = $2159 & $2157;
     $2161 = ((34160208 + (($2155*12)|0)|0) + 4|0);
     $2162 = HEAP32[$2161>>2]|0;
     $2163 = ((33953152 + (($2155*1536)|0)|0) + 4|0);
     $2164 = HEAP32[$2163>>2]|0;
     $2165 = $2164 & $2162;
     $2166 = ((34160208 + (($2155*12)|0)|0) + 8|0);
     $2167 = HEAP32[$2166>>2]|0;
     $2168 = ((33953152 + (($2155*1536)|0)|0) + 8|0);
     $2169 = HEAP32[$2168>>2]|0;
     $2170 = $2169 & $2167;
     $2171 = $2160 | $2172;
     HEAP32[$2122>>2] = $2171;
     $2173 = $2165 | $2174;
     HEAP32[$2128>>2] = $2173;
     $2175 = $2170 | $2176;
     HEAP32[$2134>>2] = $2175;
    }
   } else {
    $2177 = ((221102544 + (($iking$083$i*48)|0)|0) + 44|0);
    HEAP32[$2177>>2] = 0;
    $2178 = ((221102544 + (($iking$083$i*48)|0)|0) + 40|0);
    HEAP32[$2178>>2] = 0;
    $2179 = ((221102544 + (($iking$083$i*48)|0)|0) + 36|0);
    HEAP32[$2179>>2] = 0;
   }
  } while(0);
  $2180 = ((221106432 + (($iking$083$i*48)|0)|0) + 8|0);
  HEAP32[$2180>>2] = 0;
  $2181 = ((221106432 + (($iking$083$i*48)|0)|0) + 4|0);
  HEAP32[$2181>>2] = 0;
  $2182 = (221106432 + (($iking$083$i*48)|0)|0);
  HEAP32[$2182>>2] = 0;
  $2183 = (33575024 + (($iking$083$i*12)|0)|0);
  $2184 = HEAP32[$2183>>2]|0;
  $2185 = ((33575024 + (($iking$083$i*12)|0)|0) + 4|0);
  $2186 = HEAP32[$2185>>2]|0;
  $2187 = ((33575024 + (($iking$083$i*12)|0)|0) + 8|0);
  $2188 = HEAP32[$2187>>2]|0;
  $2189 = $2186 | $2184;
  $2190 = $2189 | $2188;
  $2191 = ($2190|0)==(0);
  if ($2191) {
   $2219 = $2184;$2222 = $2186;$2225 = $2188;$2228 = 0;$2231 = 0;$2234 = 0;
  } else {
   $bb_check$sroa$0$556$i = $2184;$bb_check$sroa$1$455$i = $2186;$bb_check$sroa$2$354$i = $2188;
   while(1) {
    $2192 = (_last_one210($bb_check$sroa$2$354$i,$bb_check$sroa$1$455$i,$bb_check$sroa$0$556$i)|0);
    $2193 = HEAP32[$2182>>2]|0;
    $2194 = (33575024 + (($2192*12)|0)|0);
    $2195 = HEAP32[$2194>>2]|0;
    $2196 = $2195 | $2193;
    HEAP32[$2182>>2] = $2196;
    $2197 = HEAP32[$2181>>2]|0;
    $2198 = ((33575024 + (($2192*12)|0)|0) + 4|0);
    $2199 = HEAP32[$2198>>2]|0;
    $2200 = $2199 | $2197;
    HEAP32[$2181>>2] = $2200;
    $2201 = HEAP32[$2180>>2]|0;
    $2202 = ((33575024 + (($2192*12)|0)|0) + 8|0);
    $2203 = HEAP32[$2202>>2]|0;
    $2204 = $2203 | $2201;
    HEAP32[$2180>>2] = $2204;
    $2205 = (34156304 + (($2192*12)|0)|0);
    $2206 = HEAP32[$2205>>2]|0;
    $2207 = $2206 ^ $bb_check$sroa$0$556$i;
    $2208 = ((34156304 + (($2192*12)|0)|0) + 4|0);
    $2209 = HEAP32[$2208>>2]|0;
    $2210 = $2209 ^ $bb_check$sroa$1$455$i;
    $2211 = ((34156304 + (($2192*12)|0)|0) + 8|0);
    $2212 = HEAP32[$2211>>2]|0;
    $2213 = $2212 ^ $bb_check$sroa$2$354$i;
    $2214 = $2210 | $2207;
    $2215 = $2214 | $2213;
    $2216 = ($2215|0)==(0);
    if ($2216) {
     break;
    } else {
     $bb_check$sroa$0$556$i = $2207;$bb_check$sroa$1$455$i = $2210;$bb_check$sroa$2$354$i = $2213;
    }
   }
   $$pre90$i = HEAP32[$2183>>2]|0;
   $$pre91$i = HEAP32[$2185>>2]|0;
   $$pre92$i = HEAP32[$2187>>2]|0;
   $2219 = $$pre90$i;$2222 = $$pre91$i;$2225 = $$pre92$i;$2228 = $2196;$2231 = $2200;$2234 = $2204;
  }
  $2217 = HEAP32[$1953>>2]|0;
  $2218 = $2217 | $2219;
  $2220 = HEAP32[$1957>>2]|0;
  $2221 = $2220 | $2222;
  $2223 = HEAP32[$1961>>2]|0;
  $2224 = $2223 | $2225;
  $2226 = $2218 ^ -1;
  $2227 = $2228 & $2226;
  HEAP32[$2182>>2] = $2227;
  $2229 = $2221 ^ -1;
  $2230 = $2231 & $2229;
  HEAP32[$2181>>2] = $2230;
  $2232 = $2224 ^ -1;
  $2233 = $2234 & $2232;
  HEAP32[$2180>>2] = $2233;
  $2235 = ((221106432 + (($iking$083$i*48)|0)|0) + 20|0);
  HEAP32[$2235>>2] = 0;
  $2236 = ((221106432 + (($iking$083$i*48)|0)|0) + 16|0);
  HEAP32[$2236>>2] = 0;
  $2237 = ((221106432 + (($iking$083$i*48)|0)|0) + 12|0);
  HEAP32[$2237>>2] = 0;
  $2238 = (33574048 + (($iking$083$i*12)|0)|0);
  $2239 = HEAP32[$2238>>2]|0;
  $2240 = ((33574048 + (($iking$083$i*12)|0)|0) + 4|0);
  $2241 = HEAP32[$2240>>2]|0;
  $2242 = ((33574048 + (($iking$083$i*12)|0)|0) + 8|0);
  $2243 = HEAP32[$2242>>2]|0;
  $2244 = $2241 | $2239;
  $2245 = $2244 | $2243;
  $2246 = ($2245|0)==(0);
  if ($2246) {
   $2273 = $2225;$2524 = 0;$2525 = 0;$2526 = 0;
  } else {
   $bb_check$sroa$0$661$i = $2239;$bb_check$sroa$1$560$i = $2241;$bb_check$sroa$2$459$i = $2243;
   while(1) {
    $2247 = (_last_one210($bb_check$sroa$2$459$i,$bb_check$sroa$1$560$i,$bb_check$sroa$0$661$i)|0);
    $2248 = HEAP32[$2237>>2]|0;
    $2249 = (33574048 + (($2247*12)|0)|0);
    $2250 = HEAP32[$2249>>2]|0;
    $2251 = $2250 | $2248;
    HEAP32[$2237>>2] = $2251;
    $2252 = HEAP32[$2236>>2]|0;
    $2253 = ((33574048 + (($2247*12)|0)|0) + 4|0);
    $2254 = HEAP32[$2253>>2]|0;
    $2255 = $2254 | $2252;
    HEAP32[$2236>>2] = $2255;
    $2256 = HEAP32[$2235>>2]|0;
    $2257 = ((33574048 + (($2247*12)|0)|0) + 8|0);
    $2258 = HEAP32[$2257>>2]|0;
    $2259 = $2258 | $2256;
    HEAP32[$2235>>2] = $2259;
    $2260 = (34156304 + (($2247*12)|0)|0);
    $2261 = HEAP32[$2260>>2]|0;
    $2262 = $2261 ^ $bb_check$sroa$0$661$i;
    $2263 = ((34156304 + (($2247*12)|0)|0) + 4|0);
    $2264 = HEAP32[$2263>>2]|0;
    $2265 = $2264 ^ $bb_check$sroa$1$560$i;
    $2266 = ((34156304 + (($2247*12)|0)|0) + 8|0);
    $2267 = HEAP32[$2266>>2]|0;
    $2268 = $2267 ^ $bb_check$sroa$2$459$i;
    $2269 = $2265 | $2262;
    $2270 = $2269 | $2268;
    $2271 = ($2270|0)==(0);
    if ($2271) {
     break;
    } else {
     $bb_check$sroa$0$661$i = $2262;$bb_check$sroa$1$560$i = $2265;$bb_check$sroa$2$459$i = $2268;
    }
   }
   $$pre93$i = HEAP32[$2187>>2]|0;
   $2273 = $$pre93$i;$2524 = $2259;$2525 = $2255;$2526 = $2251;
  }
  $2272 = ($2273|0)==(0);
  if ($2272) {
   $2527 = $2524;$2528 = $2525;$2529 = $2526;
  } else {
   $bb_check$sroa$2$565$i = $2273;
   while(1) {
    $2274 = (_first_one2($bb_check$sroa$2$565$i)|0);
    $2275 = HEAP32[$2237>>2]|0;
    $2276 = (33574048 + (($2274*12)|0)|0);
    $2277 = HEAP32[$2276>>2]|0;
    $2278 = $2277 | $2275;
    HEAP32[$2237>>2] = $2278;
    $2279 = HEAP32[$2236>>2]|0;
    $2280 = ((33574048 + (($2274*12)|0)|0) + 4|0);
    $2281 = HEAP32[$2280>>2]|0;
    $2282 = $2281 | $2279;
    HEAP32[$2236>>2] = $2282;
    $2283 = HEAP32[$2235>>2]|0;
    $2284 = ((33574048 + (($2274*12)|0)|0) + 8|0);
    $2285 = HEAP32[$2284>>2]|0;
    $2286 = $2285 | $2283;
    HEAP32[$2235>>2] = $2286;
    $2287 = ((34156304 + (($2274*12)|0)|0) + 8|0);
    $2288 = HEAP32[$2287>>2]|0;
    $2289 = $2288 ^ $bb_check$sroa$2$565$i;
    $2290 = ($2288|0)==($bb_check$sroa$2$565$i|0);
    if ($2290) {
     $2527 = $2286;$2528 = $2282;$2529 = $2278;
     break;
    } else {
     $bb_check$sroa$2$565$i = $2289;
    }
   }
  }
  $2291 = HEAP32[$2185>>2]|0;
  $2292 = ($2291|0)==(0);
  if ($2292) {
   $2313 = $2529;$2316 = $2528;$2319 = $2527;
  } else {
   $bb_check$sroa$1$669$i = $2291;
   while(1) {
    $2293 = (_first_one1($bb_check$sroa$1$669$i)|0);
    $2294 = ((33574048 + (($2293*12)|0)|0) + 8|0);
    $2295 = HEAP32[$2294>>2]|0;
    $2296 = HEAP32[$2235>>2]|0;
    $2297 = $2296 | $2295;
    HEAP32[$2235>>2] = $2297;
    $2298 = ((34156304 + (($2293*12)|0)|0) + 4|0);
    $2299 = HEAP32[$2298>>2]|0;
    $2300 = $2299 ^ $bb_check$sroa$1$669$i;
    $2301 = ($2299|0)==($bb_check$sroa$1$669$i|0);
    if ($2301) {
     break;
    } else {
     $bb_check$sroa$1$669$i = $2300;
    }
   }
   $$pre94$i = HEAP32[$2237>>2]|0;
   $$pre95$i = HEAP32[$2236>>2]|0;
   $2313 = $$pre94$i;$2316 = $$pre95$i;$2319 = $2297;
  }
  $2302 = HEAP32[$1953>>2]|0;
  $2303 = HEAP32[$2238>>2]|0;
  $2304 = $2303 | $2302;
  $2305 = HEAP32[$1957>>2]|0;
  $2306 = HEAP32[$2240>>2]|0;
  $2307 = $2306 | $2305;
  $2308 = HEAP32[$1961>>2]|0;
  $2309 = HEAP32[$2242>>2]|0;
  $2310 = $2309 | $2308;
  $2311 = $2304 ^ -1;
  $2312 = $2313 & $2311;
  HEAP32[$2237>>2] = $2312;
  $2314 = $2307 ^ -1;
  $2315 = $2316 & $2314;
  HEAP32[$2236>>2] = $2315;
  $2317 = $2310 ^ -1;
  $2318 = $2319 & $2317;
  HEAP32[$2235>>2] = $2318;
  $2320 = ((221106432 + (($iking$083$i*48)|0)|0) + 32|0);
  HEAP32[$2320>>2] = 0;
  $2321 = ((221106432 + (($iking$083$i*48)|0)|0) + 28|0);
  HEAP32[$2321>>2] = 0;
  $2322 = ((221106432 + (($iking$083$i*48)|0)|0) + 24|0);
  HEAP32[$2322>>2] = 0;
  $2323 = (33573072 + (($iking$083$i*12)|0)|0);
  $2324 = HEAP32[$2323>>2]|0;
  $2325 = ((33573072 + (($iking$083$i*12)|0)|0) + 4|0);
  $2326 = HEAP32[$2325>>2]|0;
  $2327 = ((33573072 + (($iking$083$i*12)|0)|0) + 8|0);
  $2328 = HEAP32[$2327>>2]|0;
  $2329 = $2326 | $2324;
  $2330 = $2329 | $2328;
  $2331 = ($2330|0)==(0);
  if (!($2331)) {
   $bb_check$sroa$0$775$i = $2324;$bb_check$sroa$1$774$i = $2326;$bb_check$sroa$2$673$i = $2328;
   while(1) {
    $2332 = (_last_one210($bb_check$sroa$2$673$i,$bb_check$sroa$1$774$i,$bb_check$sroa$0$775$i)|0);
    $2333 = HEAP32[$2322>>2]|0;
    $2334 = (33573072 + (($2332*12)|0)|0);
    $2335 = HEAP32[$2334>>2]|0;
    $2336 = $2335 | $2333;
    HEAP32[$2322>>2] = $2336;
    $2337 = HEAP32[$2321>>2]|0;
    $2338 = ((33573072 + (($2332*12)|0)|0) + 4|0);
    $2339 = HEAP32[$2338>>2]|0;
    $2340 = $2339 | $2337;
    HEAP32[$2321>>2] = $2340;
    $2341 = HEAP32[$2320>>2]|0;
    $2342 = ((33573072 + (($2332*12)|0)|0) + 8|0);
    $2343 = HEAP32[$2342>>2]|0;
    $2344 = $2343 | $2341;
    HEAP32[$2320>>2] = $2344;
    $2345 = (34156304 + (($2332*12)|0)|0);
    $2346 = HEAP32[$2345>>2]|0;
    $2347 = $2346 ^ $bb_check$sroa$0$775$i;
    $2348 = ((34156304 + (($2332*12)|0)|0) + 4|0);
    $2349 = HEAP32[$2348>>2]|0;
    $2350 = $2349 ^ $bb_check$sroa$1$774$i;
    $2351 = ((34156304 + (($2332*12)|0)|0) + 8|0);
    $2352 = HEAP32[$2351>>2]|0;
    $2353 = $2352 ^ $bb_check$sroa$2$673$i;
    $2354 = $2350 | $2347;
    $2355 = $2354 | $2353;
    $2356 = ($2355|0)==(0);
    if ($2356) {
     break;
    } else {
     $bb_check$sroa$0$775$i = $2347;$bb_check$sroa$1$774$i = $2350;$bb_check$sroa$2$673$i = $2353;
    }
   }
  }
  $2357 = HEAP32[$2187>>2]|0;
  $2358 = ($2357|0)==(0);
  if (!($2358)) {
   $bb_check$sroa$2$779$i = $2357;
   while(1) {
    $2359 = (_first_one2($bb_check$sroa$2$779$i)|0);
    $2360 = HEAP32[$2322>>2]|0;
    $2361 = (33573072 + (($2359*12)|0)|0);
    $2362 = HEAP32[$2361>>2]|0;
    $2363 = $2362 | $2360;
    HEAP32[$2322>>2] = $2363;
    $2364 = HEAP32[$2321>>2]|0;
    $2365 = ((33573072 + (($2359*12)|0)|0) + 4|0);
    $2366 = HEAP32[$2365>>2]|0;
    $2367 = $2366 | $2364;
    HEAP32[$2321>>2] = $2367;
    $2368 = HEAP32[$2320>>2]|0;
    $2369 = ((33573072 + (($2359*12)|0)|0) + 8|0);
    $2370 = HEAP32[$2369>>2]|0;
    $2371 = $2370 | $2368;
    HEAP32[$2320>>2] = $2371;
    $2372 = ((34156304 + (($2359*12)|0)|0) + 8|0);
    $2373 = HEAP32[$2372>>2]|0;
    $2374 = $2373 ^ $bb_check$sroa$2$779$i;
    $2375 = ($2373|0)==($bb_check$sroa$2$779$i|0);
    if ($2375) {
     break;
    } else {
     $bb_check$sroa$2$779$i = $2374;
    }
   }
  }
  $2376 = ($iking$083$i|0)>(17);
  do {
   if ($2376) {
    $2377 = (($iking$083$i) + -9)|0;
    $2378 = (34161184 + (($2377*12)|0)|0);
    $2379 = HEAP32[$2378>>2]|0;
    $2380 = (33953152 + (($iking$083$i*1536)|0)|0);
    $2381 = HEAP32[$2380>>2]|0;
    $2382 = $2381 & $2379;
    $2383 = ((221106432 + (($iking$083$i*48)|0)|0) + 36|0);
    HEAP32[$2383>>2] = $2382;
    $2384 = ((34161184 + (($2377*12)|0)|0) + 4|0);
    $2385 = HEAP32[$2384>>2]|0;
    $2386 = ((33953152 + (($iking$083$i*1536)|0)|0) + 4|0);
    $2387 = HEAP32[$2386>>2]|0;
    $2388 = $2387 & $2385;
    $2389 = ((221106432 + (($iking$083$i*48)|0)|0) + 40|0);
    HEAP32[$2389>>2] = $2388;
    $2390 = ((34161184 + (($2377*12)|0)|0) + 8|0);
    $2391 = HEAP32[$2390>>2]|0;
    $2392 = ((33953152 + (($iking$083$i*1536)|0)|0) + 8|0);
    $2393 = HEAP32[$2392>>2]|0;
    $2394 = $2393 & $2391;
    $2395 = ((221106432 + (($iking$083$i*48)|0)|0) + 44|0);
    HEAP32[$2395>>2] = $2394;
    $2396 = ($iking$083$i|0)>(53);
    $2397 = ($iking$083$i|0)>(54);
    do {
     if ($2397) {
      if ((($iking$083$i|0) == 63) | (($iking$083$i|0) == 72)) {
       $2434 = $2382;$2436 = $2388;$2438 = $2394;
       break;
      }
      $2398 = (($iking$083$i) + -1)|0;
      $2399 = (34161184 + (($2398*12)|0)|0);
      $2400 = HEAP32[$2399>>2]|0;
      $2401 = (33953152 + (($2398*1536)|0)|0);
      $2402 = HEAP32[$2401>>2]|0;
      $2403 = $2402 & $2400;
      $2404 = ((34161184 + (($2398*12)|0)|0) + 4|0);
      $2405 = HEAP32[$2404>>2]|0;
      $2406 = ((33953152 + (($2398*1536)|0)|0) + 4|0);
      $2407 = HEAP32[$2406>>2]|0;
      $2408 = $2407 & $2405;
      $2409 = ((34161184 + (($2398*12)|0)|0) + 8|0);
      $2410 = HEAP32[$2409>>2]|0;
      $2411 = ((33953152 + (($2398*1536)|0)|0) + 8|0);
      $2412 = HEAP32[$2411>>2]|0;
      $2413 = $2412 & $2410;
      $2414 = $2403 | $2382;
      HEAP32[$2383>>2] = $2414;
      $2415 = $2408 | $2388;
      HEAP32[$2389>>2] = $2415;
      $2416 = $2413 | $2394;
      HEAP32[$2395>>2] = $2416;
      $2434 = $2414;$2436 = $2415;$2438 = $2416;
     } else {
      $2434 = $2382;$2436 = $2388;$2438 = $2394;
     }
    } while(0);
    if (!($2396)) {
     break;
    }
    if ((($iking$083$i|0) == 62) | (($iking$083$i|0) == 71) | (($iking$083$i|0) == 80)) {
     break;
    }
    $2417 = (($iking$083$i) + 1)|0;
    $2418 = (34161184 + (($2417*12)|0)|0);
    $2419 = HEAP32[$2418>>2]|0;
    $2420 = (33953152 + (($2417*1536)|0)|0);
    $2421 = HEAP32[$2420>>2]|0;
    $2422 = $2421 & $2419;
    $2423 = ((34161184 + (($2417*12)|0)|0) + 4|0);
    $2424 = HEAP32[$2423>>2]|0;
    $2425 = ((33953152 + (($2417*1536)|0)|0) + 4|0);
    $2426 = HEAP32[$2425>>2]|0;
    $2427 = $2426 & $2424;
    $2428 = ((34161184 + (($2417*12)|0)|0) + 8|0);
    $2429 = HEAP32[$2428>>2]|0;
    $2430 = ((33953152 + (($2417*1536)|0)|0) + 8|0);
    $2431 = HEAP32[$2430>>2]|0;
    $2432 = $2431 & $2429;
    $2433 = $2422 | $2434;
    HEAP32[$2383>>2] = $2433;
    $2435 = $2427 | $2436;
    HEAP32[$2389>>2] = $2435;
    $2437 = $2432 | $2438;
    HEAP32[$2395>>2] = $2437;
   } else {
    $2439 = ((221106432 + (($iking$083$i*48)|0)|0) + 44|0);
    HEAP32[$2439>>2] = 0;
    $2440 = ((221106432 + (($iking$083$i*48)|0)|0) + 40|0);
    HEAP32[$2440>>2] = 0;
    $2441 = ((221106432 + (($iking$083$i*48)|0)|0) + 36|0);
    HEAP32[$2441>>2] = 0;
   }
  } while(0);
  $2442 = (($iking$083$i) + 1)|0;
  $exitcond$i12 = ($2442|0)==(81);
  if ($exitcond$i12) {
   break;
  } else {
   $iking$083$i = $2442;
  }
 }
 _set_derivative_param();
 $2443 = (_ini_game($ptree,1424,2,0,0)|0);
 $2444 = ($2443|0)<(0);
 if ($2444) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2445 = HEAP32[24>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2445;
 _out(221113032,$vararg_buffer);
 $2446 = (_ini_trans_table()|0);
 $2447 = ($2446|0)<(0);
 if ($2447) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[220526680>>2] = -1;
 HEAP32[220526672>>2] = 20;
 $2448 = (_dfpn_ini_hash()|0);
 $2449 = ($2448|0)<(0);
 if ($2449) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2450 = (_book_on()|0);
 $2451 = ($2450|0)<(0);
 if ($2451) {
  $2452 = HEAP32[220526664>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $2452;
  _out_warning(221113040,$vararg_buffer1);
 } else {
  $2453 = HEAP32[200>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $2453;
  _out(221113048,$vararg_buffer4);
 }
 $2454 = (_get_elapsed(34181048)|0);
 $2455 = ($2454|0)<(0);
 if ($2455) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2456 = HEAP32[34181048>>2]|0;
 _ini_rand($2456);
 $2457 = HEAP32[34181048>>2]|0;
 HEAP32[$vararg_buffer7>>2] = $2457;
 _out(221113064,$vararg_buffer7);
 HEAP32[221111344>>2] = 0;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _set_derivative_param() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((34184376 + 64|0))>>2]|0;
 $1 = $0 << 1;
 HEAP32[((34184184 + 64|0))>>2] = $1;
 $2 = HEAP32[((34184376 + 68|0))>>2]|0;
 $3 = $2 << 1;
 HEAP32[((34184184 + 68|0))>>2] = $3;
 $4 = HEAP32[((34184376 + 72|0))>>2]|0;
 $5 = $4 << 1;
 HEAP32[((34184184 + 72|0))>>2] = $5;
 $6 = HEAP32[((34184376 + 76|0))>>2]|0;
 $7 = $6 << 1;
 HEAP32[((34184184 + 76|0))>>2] = $7;
 $8 = HEAP32[((34184376 + 80|0))>>2]|0;
 $9 = $8 << 1;
 HEAP32[((34184184 + 80|0))>>2] = $9;
 $10 = HEAP32[((34184376 + 84|0))>>2]|0;
 $11 = $10 << 1;
 HEAP32[((34184184 + 84|0))>>2] = $11;
 $12 = HEAP32[((34184376 + 88|0))>>2]|0;
 $13 = $12 << 1;
 HEAP32[((34184184 + 88|0))>>2] = $13;
 $14 = HEAP32[((34184376 + 92|0))>>2]|0;
 $15 = $14 << 1;
 HEAP32[((34184184 + 92|0))>>2] = $15;
 $16 = HEAP32[((34184376 + 96|0))>>2]|0;
 $17 = (($0) + ($16))|0;
 HEAP32[((34184184 + 96|0))>>2] = $17;
 $18 = HEAP32[((34184376 + 100|0))>>2]|0;
 $19 = (($2) + ($18))|0;
 HEAP32[((34184184 + 100|0))>>2] = $19;
 $20 = HEAP32[((34184376 + 104|0))>>2]|0;
 $21 = (($4) + ($20))|0;
 HEAP32[((34184184 + 104|0))>>2] = $21;
 $22 = HEAP32[((34184376 + 108|0))>>2]|0;
 $23 = (($6) + ($22))|0;
 HEAP32[((34184184 + 108|0))>>2] = $23;
 $24 = HEAP32[((34184376 + 116|0))>>2]|0;
 $25 = (($10) + ($24))|0;
 HEAP32[((34184184 + 116|0))>>2] = $25;
 $26 = HEAP32[((34184376 + 120|0))>>2]|0;
 $27 = (($12) + ($26))|0;
 HEAP32[((34184184 + 120|0))>>2] = $27;
 $28 = (($16) - ($0))|0;
 HEAP32[((34184312 + 32|0))>>2] = $28;
 $29 = (($18) - ($2))|0;
 HEAP32[((34184312 + 36|0))>>2] = $29;
 $30 = (($20) - ($4))|0;
 HEAP32[((34184312 + 40|0))>>2] = $30;
 $31 = (($22) - ($6))|0;
 HEAP32[((34184312 + 44|0))>>2] = $31;
 $32 = (($24) - ($10))|0;
 HEAP32[((34184312 + 52|0))>>2] = $32;
 $33 = (($26) - ($12))|0;
 HEAP32[((34184312 + 56|0))>>2] = $33;
 HEAP32[((34184376 + 56|0))>>2] = $0;
 HEAP32[((34184376 + 52|0))>>2] = $2;
 HEAP32[((34184376 + 48|0))>>2] = $4;
 HEAP32[((34184376 + 44|0))>>2] = $6;
 HEAP32[((34184376 + 40|0))>>2] = $8;
 HEAP32[((34184376 + 36|0))>>2] = $10;
 HEAP32[((34184376 + 32|0))>>2] = $12;
 HEAP32[((34184376 + 28|0))>>2] = $14;
 HEAP32[((34184376 + 24|0))>>2] = $16;
 HEAP32[((34184376 + 20|0))>>2] = $18;
 HEAP32[((34184376 + 16|0))>>2] = $20;
 HEAP32[((34184376 + 12|0))>>2] = $22;
 HEAP32[((34184376 + 4|0))>>2] = $24;
 HEAP32[34184376>>2] = $26;
 HEAP32[((34184184 + 56|0))>>2] = $1;
 HEAP32[((34184184 + 52|0))>>2] = $3;
 HEAP32[((34184184 + 48|0))>>2] = $5;
 HEAP32[((34184184 + 44|0))>>2] = $7;
 HEAP32[((34184184 + 40|0))>>2] = $9;
 HEAP32[((34184184 + 36|0))>>2] = $11;
 HEAP32[((34184184 + 32|0))>>2] = $13;
 HEAP32[((34184184 + 28|0))>>2] = $15;
 HEAP32[((34184184 + 24|0))>>2] = $17;
 HEAP32[((34184184 + 20|0))>>2] = $19;
 HEAP32[((34184184 + 16|0))>>2] = $21;
 HEAP32[((34184184 + 12|0))>>2] = $23;
 HEAP32[((34184184 + 4|0))>>2] = $25;
 HEAP32[34184184>>2] = $27;
 HEAP32[((34184312 + 24|0))>>2] = $28;
 HEAP32[((34184312 + 20|0))>>2] = $29;
 HEAP32[((34184312 + 16|0))>>2] = $30;
 HEAP32[((34184312 + 12|0))>>2] = $31;
 HEAP32[((34184312 + 4|0))>>2] = $32;
 HEAP32[34184312>>2] = $33;
 STACKTOP = sp;return;
}
function _fin() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[33555960>>2]|0;
 (_memory_free($0)|0);
 $1 = (_book_off()|0);
 $2 = ($1|0)<(0);
 if ($2) {
  $$0 = -1;
 } else {
  $3 = (_record_close(33556568)|0);
  $4 = ($3|0)<(0);
  if ($4) {
   $$0 = -1;
  } else {
   _shutdown_all();
   $$0 = 1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _is_pinned_on_white_king($ptree,$isquare,$idirec) {
 $ptree = $ptree|0;
 $isquare = $isquare|0;
 $idirec = $idirec|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($idirec|0) == 3)) {
  $0 = (33572424 + ($isquare<<3)|0);
  $1 = HEAP8[$0>>0]|0;
  $2 = $1&255;
  $3 = ((($ptree) + ($2<<2)|0) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($ptree) + ($2<<2)|0) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 | $4;
  $8 = ((33572424 + ($isquare<<3)|0) + 1|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $7 >>> $10;
  $12 = $11 & 127;
  $13 = ((33828736 + (($isquare*1536)|0)|0) + (($12*12)|0)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (((33828736 + (($isquare*1536)|0)|0) + (($12*12)|0)|0) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (((33828736 + (($isquare*1536)|0)|0) + (($12*12)|0)|0) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($ptree) + 594|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = (34156304 + (($21*12)|0)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & $14;
  $25 = ((34156304 + (($21*12)|0)|0) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & $16;
  $28 = $27 | $24;
  $29 = ((34156304 + (($21*12)|0)|0) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 & $18;
  $32 = $28 | $31;
  $33 = ($32|0)==(0);
  if ($33) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $34 = (($ptree) + 140|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 & $14;
  $37 = (($ptree) + 144|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $38 & $16;
  $40 = $39 | $36;
  $41 = (($ptree) + 148|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $42 & $18;
  $44 = $40 | $43;
  $$0 = $44;
  STACKTOP = sp;return ($$0|0);
 } else if ((($idirec|0) == 2)) {
  $45 = ((33572424 + ($isquare<<3)|0) + 2|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = ((($ptree) + ($47<<2)|0) + 32|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((33572424 + ($isquare<<3)|0) + 3|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = $49 >>> $52;
  $54 = $53 & 127;
  $55 = ((33953152 + (($isquare*1536)|0)|0) + (($54*12)|0)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (((33953152 + (($isquare*1536)|0)|0) + (($54*12)|0)|0) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (((33953152 + (($isquare*1536)|0)|0) + (($54*12)|0)|0) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($ptree) + 594|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = (34156304 + (($63*12)|0)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $65 & $56;
  $67 = ((34156304 + (($63*12)|0)|0) + 4|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $68 & $58;
  $70 = $69 | $66;
  $71 = ((34156304 + (($63*12)|0)|0) + 8|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $72 & $60;
  $74 = $70 | $73;
  $75 = ($74|0)==(0);
  if ($75) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $76 = (($ptree) + 188|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (34160208 + (($isquare*12)|0)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $79 & $77;
  $81 = (($ptree) + 192|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ((34160208 + (($isquare*12)|0)|0) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $84 & $82;
  $86 = (($ptree) + 196|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ((34160208 + (($isquare*12)|0)|0) + 8|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $89 & $87;
  $91 = (($ptree) + 140|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $92 | $80;
  $94 = (($ptree) + 144|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $95 | $85;
  $97 = (($ptree) + 148|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $98 | $90;
  $100 = $93 & $56;
  $101 = $96 & $58;
  $102 = $101 | $100;
  $103 = $99 & $60;
  $104 = $102 | $103;
  $$0 = $104;
  STACKTOP = sp;return ($$0|0);
 } else if ((($idirec|0) == 4)) {
  $105 = ((33572424 + ($isquare<<3)|0) + 6|0);
  $106 = HEAP8[$105>>0]|0;
  $107 = $106&255;
  $108 = ((($ptree) + ($107<<2)|0) + 56|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ((33572424 + ($isquare<<3)|0) + 7|0);
  $111 = HEAP8[$110>>0]|0;
  $112 = $111&255;
  $113 = $109 >>> $112;
  $114 = $113 & 127;
  $115 = ((33704320 + (($isquare*1536)|0)|0) + (($114*12)|0)|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (((33704320 + (($isquare*1536)|0)|0) + (($114*12)|0)|0) + 4|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (((33704320 + (($isquare*1536)|0)|0) + (($114*12)|0)|0) + 8|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($ptree) + 594|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = $122&255;
  $124 = (34156304 + (($123*12)|0)|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = $125 & $116;
  $127 = ((34156304 + (($123*12)|0)|0) + 4|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = $128 & $118;
  $130 = $129 | $126;
  $131 = ((34156304 + (($123*12)|0)|0) + 8|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $132 & $120;
  $134 = $130 | $133;
  $135 = ($134|0)==(0);
  if ($135) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $136 = (($ptree) + 116|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 & $116;
  $139 = (($ptree) + 120|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = $140 & $118;
  $142 = $141 | $138;
  $143 = (($ptree) + 124|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = $144 & $120;
  $146 = $142 | $145;
  $$0 = $146;
  STACKTOP = sp;return ($$0|0);
 } else {
  $147 = ((33572424 + ($isquare<<3)|0) + 4|0);
  $148 = HEAP8[$147>>0]|0;
  $149 = $148&255;
  $150 = ((($ptree) + ($149<<2)|0) + 44|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ((33572424 + ($isquare<<3)|0) + 5|0);
  $153 = HEAP8[$152>>0]|0;
  $154 = $153&255;
  $155 = $151 >>> $154;
  $156 = $155 & 127;
  $157 = ((33579904 + (($isquare*1536)|0)|0) + (($156*12)|0)|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = (((33579904 + (($isquare*1536)|0)|0) + (($156*12)|0)|0) + 4|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (((33579904 + (($isquare*1536)|0)|0) + (($156*12)|0)|0) + 8|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($ptree) + 594|0);
  $164 = HEAP8[$163>>0]|0;
  $165 = $164&255;
  $166 = (34156304 + (($165*12)|0)|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = $167 & $158;
  $169 = ((34156304 + (($165*12)|0)|0) + 4|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = $170 & $160;
  $172 = $171 | $168;
  $173 = ((34156304 + (($165*12)|0)|0) + 8|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 & $162;
  $176 = $172 | $175;
  $177 = ($176|0)==(0);
  if ($177) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $178 = (($ptree) + 116|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = $179 & $158;
  $181 = (($ptree) + 120|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = $182 & $160;
  $184 = $183 | $180;
  $185 = (($ptree) + 124|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = $186 & $162;
  $188 = $184 | $187;
  $$0 = $188;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _is_pinned_on_black_king($ptree,$isquare,$idirec) {
 $ptree = $ptree|0;
 $isquare = $isquare|0;
 $idirec = $idirec|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($idirec|0) == 3)) {
  $0 = (33572424 + ($isquare<<3)|0);
  $1 = HEAP8[$0>>0]|0;
  $2 = $1&255;
  $3 = ((($ptree) + ($2<<2)|0) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($ptree) + ($2<<2)|0) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 | $4;
  $8 = ((33572424 + ($isquare<<3)|0) + 1|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $7 >>> $10;
  $12 = $11 & 127;
  $13 = ((33828736 + (($isquare*1536)|0)|0) + (($12*12)|0)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (((33828736 + (($isquare*1536)|0)|0) + (($12*12)|0)|0) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (((33828736 + (($isquare*1536)|0)|0) + (($12*12)|0)|0) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($ptree) + 593|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = (34156304 + (($21*12)|0)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & $14;
  $25 = ((34156304 + (($21*12)|0)|0) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & $16;
  $28 = $27 | $24;
  $29 = ((34156304 + (($21*12)|0)|0) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 & $18;
  $32 = $28 | $31;
  $33 = ($32|0)==(0);
  if ($33) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $34 = (($ptree) + 152|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 & $14;
  $37 = (($ptree) + 156|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $38 & $16;
  $40 = $39 | $36;
  $41 = (($ptree) + 160|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $42 & $18;
  $44 = $40 | $43;
  $$0 = $44;
  STACKTOP = sp;return ($$0|0);
 } else if ((($idirec|0) == 2)) {
  $45 = ((33572424 + ($isquare<<3)|0) + 2|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = ((($ptree) + ($47<<2)|0) + 32|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((33572424 + ($isquare<<3)|0) + 3|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = $49 >>> $52;
  $54 = $53 & 127;
  $55 = ((33953152 + (($isquare*1536)|0)|0) + (($54*12)|0)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (((33953152 + (($isquare*1536)|0)|0) + (($54*12)|0)|0) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (((33953152 + (($isquare*1536)|0)|0) + (($54*12)|0)|0) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($ptree) + 593|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = (34156304 + (($63*12)|0)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $65 & $56;
  $67 = ((34156304 + (($63*12)|0)|0) + 4|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $68 & $58;
  $70 = $69 | $66;
  $71 = ((34156304 + (($63*12)|0)|0) + 8|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $72 & $60;
  $74 = $70 | $73;
  $75 = ($74|0)==(0);
  if ($75) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $76 = (($ptree) + 200|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (34161184 + (($isquare*12)|0)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $79 & $77;
  $81 = (($ptree) + 204|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ((34161184 + (($isquare*12)|0)|0) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $84 & $82;
  $86 = (($ptree) + 208|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ((34161184 + (($isquare*12)|0)|0) + 8|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $89 & $87;
  $91 = (($ptree) + 152|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $92 | $80;
  $94 = (($ptree) + 156|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $95 | $85;
  $97 = (($ptree) + 160|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $98 | $90;
  $100 = $93 & $56;
  $101 = $96 & $58;
  $102 = $101 | $100;
  $103 = $99 & $60;
  $104 = $102 | $103;
  $$0 = $104;
  STACKTOP = sp;return ($$0|0);
 } else if ((($idirec|0) == 4)) {
  $105 = ((33572424 + ($isquare<<3)|0) + 6|0);
  $106 = HEAP8[$105>>0]|0;
  $107 = $106&255;
  $108 = ((($ptree) + ($107<<2)|0) + 56|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ((33572424 + ($isquare<<3)|0) + 7|0);
  $111 = HEAP8[$110>>0]|0;
  $112 = $111&255;
  $113 = $109 >>> $112;
  $114 = $113 & 127;
  $115 = ((33704320 + (($isquare*1536)|0)|0) + (($114*12)|0)|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (((33704320 + (($isquare*1536)|0)|0) + (($114*12)|0)|0) + 4|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (((33704320 + (($isquare*1536)|0)|0) + (($114*12)|0)|0) + 8|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($ptree) + 593|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = $122&255;
  $124 = (34156304 + (($123*12)|0)|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = $125 & $116;
  $127 = ((34156304 + (($123*12)|0)|0) + 4|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = $128 & $118;
  $130 = $129 | $126;
  $131 = ((34156304 + (($123*12)|0)|0) + 8|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $132 & $120;
  $134 = $130 | $133;
  $135 = ($134|0)==(0);
  if ($135) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $136 = (($ptree) + 128|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 & $116;
  $139 = (($ptree) + 132|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = $140 & $118;
  $142 = $141 | $138;
  $143 = (($ptree) + 136|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = $144 & $120;
  $146 = $142 | $145;
  $$0 = $146;
  STACKTOP = sp;return ($$0|0);
 } else {
  $147 = ((33572424 + ($isquare<<3)|0) + 4|0);
  $148 = HEAP8[$147>>0]|0;
  $149 = $148&255;
  $150 = ((($ptree) + ($149<<2)|0) + 44|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ((33572424 + ($isquare<<3)|0) + 5|0);
  $153 = HEAP8[$152>>0]|0;
  $154 = $153&255;
  $155 = $151 >>> $154;
  $156 = $155 & 127;
  $157 = ((33579904 + (($isquare*1536)|0)|0) + (($156*12)|0)|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = (((33579904 + (($isquare*1536)|0)|0) + (($156*12)|0)|0) + 4|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (((33579904 + (($isquare*1536)|0)|0) + (($156*12)|0)|0) + 8|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($ptree) + 593|0);
  $164 = HEAP8[$163>>0]|0;
  $165 = $164&255;
  $166 = (34156304 + (($165*12)|0)|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = $167 & $158;
  $169 = ((34156304 + (($165*12)|0)|0) + 4|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = $170 & $160;
  $172 = $171 | $168;
  $173 = ((34156304 + (($165*12)|0)|0) + 8|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 & $162;
  $176 = $172 | $175;
  $177 = ($176|0)==(0);
  if ($177) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $178 = (($ptree) + 128|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = $179 & $158;
  $181 = (($ptree) + 132|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = $182 & $160;
  $184 = $183 | $180;
  $185 = (($ptree) + 136|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = $186 & $162;
  $188 = $184 | $187;
  $$0 = $188;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _is_mate_b_pawn_drop($ptree,$sq_drop) {
 $ptree = $ptree|0;
 $sq_drop = $sq_drop|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bb_move$sroa$0$04 = 0, $bb_move$sroa$1$03 = 0, $bb_move$sroa$2$02 = 0, $bb_sum$sroa$0$0 = 0, $bb_sum$sroa$1$0 = 0;
 var $bb_sum$sroa$2$0 = 0, $iret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ptree) + 224|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (33573072 + (($sq_drop*12)|0)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & $1;
 $5 = (($ptree) + 228|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((33573072 + (($sq_drop*12)|0)|0) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & $6;
 $10 = (($ptree) + 232|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((33573072 + (($sq_drop*12)|0)|0) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & $11;
 $15 = (($ptree) + 248|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (33574048 + (($sq_drop*12)|0)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & $16;
 $20 = $19 | $4;
 $21 = (($ptree) + 252|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((33574048 + (($sq_drop*12)|0)|0) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 & $22;
 $26 = $25 | $9;
 $27 = (($ptree) + 256|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((33574048 + (($sq_drop*12)|0)|0) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & $28;
 $32 = $31 | $14;
 $33 = (($ptree) + 104|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (33575024 + (($sq_drop*12)|0)|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & $34;
 $38 = $20 | $37;
 $39 = (($ptree) + 108|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((33575024 + (($sq_drop*12)|0)|0) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 & $40;
 $44 = $26 | $43;
 $45 = (($ptree) + 112|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((33575024 + (($sq_drop*12)|0)|0) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $48 & $46;
 $50 = $32 | $49;
 $51 = ((33572424 + ($sq_drop<<3)|0) + 6|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52&255;
 $54 = ((($ptree) + ($53<<2)|0) + 56|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((33572424 + ($sq_drop<<3)|0) + 7|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57&255;
 $59 = $55 >>> $58;
 $60 = $59 & 127;
 $61 = ((33704320 + (($sq_drop*1536)|0)|0) + (($60*12)|0)|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ((33572424 + ($sq_drop<<3)|0) + 4|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = ((($ptree) + ($65<<2)|0) + 44|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((33572424 + ($sq_drop<<3)|0) + 5|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&255;
 $71 = $67 >>> $70;
 $72 = $71 & 127;
 $73 = ((33579904 + (($sq_drop*1536)|0)|0) + (($72*12)|0)|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $74 | $62;
 $76 = (((33704320 + (($sq_drop*1536)|0)|0) + (($60*12)|0)|0) + 4|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (((33579904 + (($sq_drop*1536)|0)|0) + (($72*12)|0)|0) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 | $77;
 $81 = (((33704320 + (($sq_drop*1536)|0)|0) + (($60*12)|0)|0) + 8|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (((33579904 + (($sq_drop*1536)|0)|0) + (($72*12)|0)|0) + 8|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $84 | $82;
 $86 = (($ptree) + 128|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $87 & $75;
 $89 = $38 | $88;
 $90 = (($ptree) + 132|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $91 & $80;
 $93 = $44 | $92;
 $94 = (($ptree) + 136|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $95 & $85;
 $97 = $50 | $96;
 $98 = ((33572424 + ($sq_drop<<3)|0) + 2|0);
 $99 = HEAP8[$98>>0]|0;
 $100 = $99&255;
 $101 = ((($ptree) + ($100<<2)|0) + 32|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ((33572424 + ($sq_drop<<3)|0) + 3|0);
 $104 = HEAP8[$103>>0]|0;
 $105 = $104&255;
 $106 = $102 >>> $105;
 $107 = $106 & 127;
 $108 = ((33953152 + (($sq_drop*1536)|0)|0) + (($107*12)|0)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = (33572424 + ($sq_drop<<3)|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = $111&255;
 $113 = ((($ptree) + ($112<<2)|0) + 8|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ((($ptree) + ($112<<2)|0) + 20|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $116 | $114;
 $118 = ((33572424 + ($sq_drop<<3)|0) + 1|0);
 $119 = HEAP8[$118>>0]|0;
 $120 = $119&255;
 $121 = $117 >>> $120;
 $122 = $121 & 127;
 $123 = ((33828736 + (($sq_drop*1536)|0)|0) + (($122*12)|0)|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = $124 | $109;
 $126 = (((33953152 + (($sq_drop*1536)|0)|0) + (($107*12)|0)|0) + 4|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = (((33828736 + (($sq_drop*1536)|0)|0) + (($122*12)|0)|0) + 4|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = $129 | $127;
 $131 = (((33953152 + (($sq_drop*1536)|0)|0) + (($107*12)|0)|0) + 8|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (((33828736 + (($sq_drop*1536)|0)|0) + (($122*12)|0)|0) + 8|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = $134 | $132;
 $136 = (($ptree) + 152|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = $137 & $125;
 $139 = $89 | $138;
 $140 = (($ptree) + 156|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = $141 & $130;
 $143 = $93 | $142;
 $144 = (($ptree) + 160|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = $145 & $135;
 $147 = $97 | $146;
 $148 = (($ptree) + 320|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = (($ptree) + 344|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $151 | $149;
 $153 = (($ptree) + 324|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = (($ptree) + 348|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $156 | $154;
 $158 = (($ptree) + 328|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = (($ptree) + 352|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = $161 | $159;
 $163 = (33578928 + (($sq_drop*12)|0)|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = $164 & $152;
 $166 = $139 | $165;
 $167 = ((33578928 + (($sq_drop*12)|0)|0) + 4|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = $168 & $157;
 $170 = $143 | $169;
 $171 = ((33578928 + (($sq_drop*12)|0)|0) + 8|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = $172 & $162;
 $174 = $147 | $173;
 $175 = (($ptree) + 594|0);
 $bb_sum$sroa$0$0 = $166;$bb_sum$sroa$1$0 = $170;$bb_sum$sroa$2$0 = $174;
 while(1) {
  $176 = $bb_sum$sroa$1$0 | $bb_sum$sroa$0$0;
  $177 = $176 | $bb_sum$sroa$2$0;
  $178 = ($177|0)==(0);
  if ($178) {
   label = 6;
   break;
  }
  $179 = (_first_one012($bb_sum$sroa$0$0,$bb_sum$sroa$1$0,$bb_sum$sroa$2$0)|0);
  $180 = (34156304 + (($179*12)|0)|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = $181 ^ $bb_sum$sroa$0$0;
  $183 = ((34156304 + (($179*12)|0)|0) + 4|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = $184 ^ $bb_sum$sroa$1$0;
  $186 = ((34156304 + (($179*12)|0)|0) + 8|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = $187 ^ $bb_sum$sroa$2$0;
  $189 = HEAP8[$175>>0]|0;
  $190 = $189&255;
  $191 = ((220518304 + (($190*81)|0)|0) + ($179)|0);
  $192 = HEAP8[$191>>0]|0;
  $193 = $192&255;
  $194 = ($192<<24>>24)==(0);
  if ($194) {
   $$0 = 0;
   label = 10;
   break;
  }
  $195 = ((220518304 + (($190*81)|0)|0) + ($sq_drop)|0);
  $196 = HEAP8[$195>>0]|0;
  $197 = ($192<<24>>24)==($196<<24>>24);
  if ($197) {
   $$0 = 0;
   label = 10;
   break;
  }
  $198 = (_is_pinned_on_white_king($ptree,$179,$193)|0);
  $199 = ($198|0)==(0);
  if ($199) {
   $$0 = 0;
   label = 10;
   break;
  } else {
   $bb_sum$sroa$0$0 = $182;$bb_sum$sroa$1$0 = $185;$bb_sum$sroa$2$0 = $188;
  }
 }
 if ((label|0) == 6) {
  $200 = HEAP8[$175>>0]|0;
  $201 = $200&255;
  $202 = (34156304 + (($sq_drop*12)|0)|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = (($ptree) + 8|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = $205 ^ $203;
  HEAP32[$204>>2] = $206;
  $207 = ((34156304 + (($sq_drop*12)|0)|0) + 4|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = (($ptree) + 12|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = $210 ^ $208;
  HEAP32[$209>>2] = $211;
  $212 = ((34156304 + (($sq_drop*12)|0)|0) + 8|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = (($ptree) + 16|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = $215 ^ $213;
  HEAP32[$214>>2] = $216;
  $217 = (34157280 + (($sq_drop*12)|0)|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = (($ptree) + 32|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = $220 ^ $218;
  HEAP32[$219>>2] = $221;
  $222 = ((34157280 + (($sq_drop*12)|0)|0) + 4|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = (($ptree) + 36|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = $225 ^ $223;
  HEAP32[$224>>2] = $226;
  $227 = ((34157280 + (($sq_drop*12)|0)|0) + 8|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = (($ptree) + 40|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = $230 ^ $228;
  HEAP32[$229>>2] = $231;
  $232 = (34158256 + (($sq_drop*12)|0)|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = (($ptree) + 44|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = $235 ^ $233;
  HEAP32[$234>>2] = $236;
  $237 = ((34158256 + (($sq_drop*12)|0)|0) + 4|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = (($ptree) + 48|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $240 ^ $238;
  HEAP32[$239>>2] = $241;
  $242 = ((34158256 + (($sq_drop*12)|0)|0) + 8|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = (($ptree) + 52|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = $245 ^ $243;
  HEAP32[$244>>2] = $246;
  $247 = (34159232 + (($sq_drop*12)|0)|0);
  $248 = HEAP32[$247>>2]|0;
  $249 = (($ptree) + 56|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = $250 ^ $248;
  HEAP32[$249>>2] = $251;
  $252 = ((34159232 + (($sq_drop*12)|0)|0) + 4|0);
  $253 = HEAP32[$252>>2]|0;
  $254 = (($ptree) + 60|0);
  $255 = HEAP32[$254>>2]|0;
  $256 = $255 ^ $253;
  HEAP32[$254>>2] = $256;
  $257 = ((34159232 + (($sq_drop*12)|0)|0) + 8|0);
  $258 = HEAP32[$257>>2]|0;
  $259 = (($ptree) + 64|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = $260 ^ $258;
  HEAP32[$259>>2] = $261;
  $262 = (33578928 + (($201*12)|0)|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = (($ptree) + 20|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = $265 ^ -1;
  $267 = $263 & $266;
  $268 = ((33578928 + (($201*12)|0)|0) + 4|0);
  $269 = HEAP32[$268>>2]|0;
  $270 = (($ptree) + 24|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = $271 ^ -1;
  $273 = $269 & $272;
  $274 = ((33578928 + (($201*12)|0)|0) + 8|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = (($ptree) + 28|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = $277 ^ -1;
  $279 = $275 & $278;
  $280 = $273 | $279;
  $281 = $280 | $267;
  $282 = ($281|0)==(0);
  L11: do {
   if ($282) {
    $iret$0 = 1;
   } else {
    $bb_move$sroa$0$04 = $267;$bb_move$sroa$1$03 = $273;$bb_move$sroa$2$02 = $279;
    while(1) {
     $283 = (_first_one012($bb_move$sroa$0$04,$bb_move$sroa$1$03,$bb_move$sroa$2$02)|0);
     $284 = (_is_white_attacked($ptree,$283)|0);
     $285 = ($284|0)==(0);
     if ($285) {
      $iret$0 = 0;
      break L11;
     }
     $286 = (34156304 + (($283*12)|0)|0);
     $287 = HEAP32[$286>>2]|0;
     $288 = $287 ^ $bb_move$sroa$0$04;
     $289 = ((34156304 + (($283*12)|0)|0) + 4|0);
     $290 = HEAP32[$289>>2]|0;
     $291 = $290 ^ $bb_move$sroa$1$03;
     $292 = ((34156304 + (($283*12)|0)|0) + 8|0);
     $293 = HEAP32[$292>>2]|0;
     $294 = $293 ^ $bb_move$sroa$2$02;
     $295 = $291 | $294;
     $296 = $295 | $288;
     $297 = ($296|0)==(0);
     if ($297) {
      $iret$0 = 1;
      break;
     } else {
      $bb_move$sroa$0$04 = $288;$bb_move$sroa$1$03 = $291;$bb_move$sroa$2$02 = $294;
     }
    }
   }
  } while(0);
  $298 = HEAP32[$202>>2]|0;
  $299 = HEAP32[$204>>2]|0;
  $300 = $299 ^ $298;
  HEAP32[$204>>2] = $300;
  $301 = HEAP32[$207>>2]|0;
  $302 = HEAP32[$209>>2]|0;
  $303 = $302 ^ $301;
  HEAP32[$209>>2] = $303;
  $304 = HEAP32[$212>>2]|0;
  $305 = HEAP32[$214>>2]|0;
  $306 = $305 ^ $304;
  HEAP32[$214>>2] = $306;
  $307 = HEAP32[$217>>2]|0;
  $308 = HEAP32[$219>>2]|0;
  $309 = $308 ^ $307;
  HEAP32[$219>>2] = $309;
  $310 = HEAP32[$222>>2]|0;
  $311 = HEAP32[$224>>2]|0;
  $312 = $311 ^ $310;
  HEAP32[$224>>2] = $312;
  $313 = HEAP32[$227>>2]|0;
  $314 = HEAP32[$229>>2]|0;
  $315 = $314 ^ $313;
  HEAP32[$229>>2] = $315;
  $316 = HEAP32[$232>>2]|0;
  $317 = HEAP32[$234>>2]|0;
  $318 = $317 ^ $316;
  HEAP32[$234>>2] = $318;
  $319 = HEAP32[$237>>2]|0;
  $320 = HEAP32[$239>>2]|0;
  $321 = $320 ^ $319;
  HEAP32[$239>>2] = $321;
  $322 = HEAP32[$242>>2]|0;
  $323 = HEAP32[$244>>2]|0;
  $324 = $323 ^ $322;
  HEAP32[$244>>2] = $324;
  $325 = HEAP32[$247>>2]|0;
  $326 = HEAP32[$249>>2]|0;
  $327 = $326 ^ $325;
  HEAP32[$249>>2] = $327;
  $328 = HEAP32[$252>>2]|0;
  $329 = HEAP32[$254>>2]|0;
  $330 = $329 ^ $328;
  HEAP32[$254>>2] = $330;
  $331 = HEAP32[$257>>2]|0;
  $332 = HEAP32[$259>>2]|0;
  $333 = $332 ^ $331;
  HEAP32[$259>>2] = $333;
  $$0 = $iret$0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 10) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _is_white_attacked($ptree,$sq) {
 $ptree = $ptree|0;
 $sq = $sq|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ptree) + 164|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (34156304 + (($sq*12)|0)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & $1;
 $5 = (($ptree) + 168|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((34156304 + (($sq*12)|0)|0) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & $6;
 $10 = (($ptree) + 172|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((34156304 + (($sq*12)|0)|0) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & $11;
 $15 = (($ptree) + 212|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (33576000 + (($sq*12)|0)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & $16;
 $20 = (($ptree) + 216|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((33576000 + (($sq*12)|0)|0) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 & $21;
 $25 = (($ptree) + 220|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((33576000 + (($sq*12)|0)|0) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 & $26;
 $30 = (($ptree) + 236|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (33576976 + (($sq*12)|0)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 & $31;
 $35 = (($ptree) + 240|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((33576976 + (($sq*12)|0)|0) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 & $36;
 $40 = (($ptree) + 244|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((33576976 + (($sq*12)|0)|0) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 & $41;
 $45 = (($ptree) + 92|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (33577952 + (($sq*12)|0)|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $48 & $46;
 $50 = (($ptree) + 96|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((33577952 + (($sq*12)|0)|0) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53 & $51;
 $55 = (($ptree) + 100|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((33577952 + (($sq*12)|0)|0) + 8|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $58 & $56;
 $60 = (($ptree) + 68|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (33578928 + (($sq*12)|0)|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $63 & $61;
 $65 = (($ptree) + 72|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ((33578928 + (($sq*12)|0)|0) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $68 & $66;
 $70 = (($ptree) + 76|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ((33578928 + (($sq*12)|0)|0) + 8|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $73 & $71;
 $75 = ((33572424 + ($sq<<3)|0) + 6|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = ((($ptree) + ($77<<2)|0) + 56|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ((33572424 + ($sq<<3)|0) + 7|0);
 $81 = HEAP8[$80>>0]|0;
 $82 = $81&255;
 $83 = $79 >>> $82;
 $84 = $83 & 127;
 $85 = ((33704320 + (($sq*1536)|0)|0) + (($84*12)|0)|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ((33572424 + ($sq<<3)|0) + 4|0);
 $88 = HEAP8[$87>>0]|0;
 $89 = $88&255;
 $90 = ((($ptree) + ($89<<2)|0) + 44|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ((33572424 + ($sq<<3)|0) + 5|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&255;
 $95 = $91 >>> $94;
 $96 = $95 & 127;
 $97 = ((33579904 + (($sq*1536)|0)|0) + (($96*12)|0)|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $98 | $86;
 $100 = (((33704320 + (($sq*1536)|0)|0) + (($84*12)|0)|0) + 4|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (((33579904 + (($sq*1536)|0)|0) + (($96*12)|0)|0) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $103 | $101;
 $105 = (((33704320 + (($sq*1536)|0)|0) + (($84*12)|0)|0) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (((33579904 + (($sq*1536)|0)|0) + (($96*12)|0)|0) + 8|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = $108 | $106;
 $110 = (($ptree) + 116|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & $99;
 $113 = (($ptree) + 120|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & $104;
 $116 = (($ptree) + 124|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = $117 & $109;
 $119 = (($ptree) + 140|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = (($ptree) + 144|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (($ptree) + 148|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = (($ptree) + 188|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = (34160208 + (($sq*12)|0)|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = $128 & $126;
 $130 = $129 | $120;
 $131 = (($ptree) + 192|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ((34160208 + (($sq*12)|0)|0) + 4|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = $134 & $132;
 $136 = $135 | $122;
 $137 = (($ptree) + 196|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = ((34160208 + (($sq*12)|0)|0) + 8|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = $140 & $138;
 $142 = $141 | $124;
 $143 = ((33572424 + ($sq<<3)|0) + 2|0);
 $144 = HEAP8[$143>>0]|0;
 $145 = $144&255;
 $146 = ((($ptree) + ($145<<2)|0) + 32|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = ((33572424 + ($sq<<3)|0) + 3|0);
 $149 = HEAP8[$148>>0]|0;
 $150 = $149&255;
 $151 = $147 >>> $150;
 $152 = $151 & 127;
 $153 = ((33953152 + (($sq*1536)|0)|0) + (($152*12)|0)|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = $154 & $130;
 $156 = (((33953152 + (($sq*1536)|0)|0) + (($152*12)|0)|0) + 4|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = $157 & $136;
 $159 = (((33953152 + (($sq*1536)|0)|0) + (($152*12)|0)|0) + 8|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = $160 & $142;
 $162 = (33572424 + ($sq<<3)|0);
 $163 = HEAP8[$162>>0]|0;
 $164 = $163&255;
 $165 = ((($ptree) + ($164<<2)|0) + 8|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = ((($ptree) + ($164<<2)|0) + 20|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = $168 | $166;
 $170 = ((33572424 + ($sq<<3)|0) + 1|0);
 $171 = HEAP8[$170>>0]|0;
 $172 = $171&255;
 $173 = $169 >>> $172;
 $174 = $173 & 127;
 $175 = ((33828736 + (($sq*1536)|0)|0) + (($174*12)|0)|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = $176 & $120;
 $178 = (((33828736 + (($sq*1536)|0)|0) + (($174*12)|0)|0) + 4|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = $179 & $122;
 $181 = (((33828736 + (($sq*1536)|0)|0) + (($174*12)|0)|0) + 8|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = $182 & $124;
 $184 = $9 | $4;
 $185 = $184 | $14;
 $186 = $185 | $19;
 $187 = $186 | $24;
 $188 = $187 | $29;
 $189 = $188 | $34;
 $190 = $189 | $39;
 $191 = $190 | $44;
 $192 = $191 | $49;
 $193 = $192 | $54;
 $194 = $193 | $59;
 $195 = $194 | $64;
 $196 = $195 | $69;
 $197 = $196 | $74;
 $198 = $197 | $112;
 $199 = $198 | $115;
 $200 = $199 | $118;
 $201 = $200 | $155;
 $202 = $201 | $158;
 $203 = $202 | $161;
 $204 = $203 | $177;
 $205 = $204 | $180;
 $206 = $205 | $183;
 STACKTOP = sp;return ($206|0);
}
function _is_mate_w_pawn_drop($ptree,$sq_drop) {
 $ptree = $ptree|0;
 $sq_drop = $sq_drop|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bb_move$sroa$0$04 = 0, $bb_move$sroa$1$03 = 0, $bb_move$sroa$2$02 = 0, $bb_sum$sroa$0$0 = 0, $bb_sum$sroa$1$0 = 0;
 var $bb_sum$sroa$2$0 = 0, $iret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ptree) + 212|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (33576000 + (($sq_drop*12)|0)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & $1;
 $5 = (($ptree) + 216|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((33576000 + (($sq_drop*12)|0)|0) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & $6;
 $10 = (($ptree) + 220|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((33576000 + (($sq_drop*12)|0)|0) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & $11;
 $15 = (($ptree) + 236|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (33576976 + (($sq_drop*12)|0)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & $16;
 $20 = $19 | $4;
 $21 = (($ptree) + 240|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((33576976 + (($sq_drop*12)|0)|0) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 & $22;
 $26 = $25 | $9;
 $27 = (($ptree) + 244|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((33576976 + (($sq_drop*12)|0)|0) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & $28;
 $32 = $31 | $14;
 $33 = (($ptree) + 92|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (33577952 + (($sq_drop*12)|0)|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & $34;
 $38 = $20 | $37;
 $39 = (($ptree) + 96|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((33577952 + (($sq_drop*12)|0)|0) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 & $40;
 $44 = $26 | $43;
 $45 = (($ptree) + 100|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((33577952 + (($sq_drop*12)|0)|0) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $48 & $46;
 $50 = $32 | $49;
 $51 = ((33572424 + ($sq_drop<<3)|0) + 6|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52&255;
 $54 = ((($ptree) + ($53<<2)|0) + 56|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((33572424 + ($sq_drop<<3)|0) + 7|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57&255;
 $59 = $55 >>> $58;
 $60 = $59 & 127;
 $61 = ((33704320 + (($sq_drop*1536)|0)|0) + (($60*12)|0)|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ((33572424 + ($sq_drop<<3)|0) + 4|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = ((($ptree) + ($65<<2)|0) + 44|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((33572424 + ($sq_drop<<3)|0) + 5|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&255;
 $71 = $67 >>> $70;
 $72 = $71 & 127;
 $73 = ((33579904 + (($sq_drop*1536)|0)|0) + (($72*12)|0)|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $74 | $62;
 $76 = (((33704320 + (($sq_drop*1536)|0)|0) + (($60*12)|0)|0) + 4|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (((33579904 + (($sq_drop*1536)|0)|0) + (($72*12)|0)|0) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 | $77;
 $81 = (((33704320 + (($sq_drop*1536)|0)|0) + (($60*12)|0)|0) + 8|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (((33579904 + (($sq_drop*1536)|0)|0) + (($72*12)|0)|0) + 8|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $84 | $82;
 $86 = (($ptree) + 116|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $87 & $75;
 $89 = $38 | $88;
 $90 = (($ptree) + 120|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $91 & $80;
 $93 = $44 | $92;
 $94 = (($ptree) + 124|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $95 & $85;
 $97 = $50 | $96;
 $98 = ((33572424 + ($sq_drop<<3)|0) + 2|0);
 $99 = HEAP8[$98>>0]|0;
 $100 = $99&255;
 $101 = ((($ptree) + ($100<<2)|0) + 32|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ((33572424 + ($sq_drop<<3)|0) + 3|0);
 $104 = HEAP8[$103>>0]|0;
 $105 = $104&255;
 $106 = $102 >>> $105;
 $107 = $106 & 127;
 $108 = ((33953152 + (($sq_drop*1536)|0)|0) + (($107*12)|0)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = (33572424 + ($sq_drop<<3)|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = $111&255;
 $113 = ((($ptree) + ($112<<2)|0) + 8|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ((($ptree) + ($112<<2)|0) + 20|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $116 | $114;
 $118 = ((33572424 + ($sq_drop<<3)|0) + 1|0);
 $119 = HEAP8[$118>>0]|0;
 $120 = $119&255;
 $121 = $117 >>> $120;
 $122 = $121 & 127;
 $123 = ((33828736 + (($sq_drop*1536)|0)|0) + (($122*12)|0)|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = $124 | $109;
 $126 = (((33953152 + (($sq_drop*1536)|0)|0) + (($107*12)|0)|0) + 4|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = (((33828736 + (($sq_drop*1536)|0)|0) + (($122*12)|0)|0) + 4|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = $129 | $127;
 $131 = (((33953152 + (($sq_drop*1536)|0)|0) + (($107*12)|0)|0) + 8|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (((33828736 + (($sq_drop*1536)|0)|0) + (($122*12)|0)|0) + 8|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = $134 | $132;
 $136 = (($ptree) + 140|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = $137 & $125;
 $139 = $89 | $138;
 $140 = (($ptree) + 144|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = $141 & $130;
 $143 = $93 | $142;
 $144 = (($ptree) + 148|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = $145 & $135;
 $147 = $97 | $146;
 $148 = (($ptree) + 308|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = (($ptree) + 332|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $151 | $149;
 $153 = (($ptree) + 312|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = (($ptree) + 336|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $156 | $154;
 $158 = (($ptree) + 316|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = (($ptree) + 340|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = $161 | $159;
 $163 = (33578928 + (($sq_drop*12)|0)|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = $164 & $152;
 $166 = $139 | $165;
 $167 = ((33578928 + (($sq_drop*12)|0)|0) + 4|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = $168 & $157;
 $170 = $143 | $169;
 $171 = ((33578928 + (($sq_drop*12)|0)|0) + 8|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = $172 & $162;
 $174 = $147 | $173;
 $175 = (($ptree) + 593|0);
 $bb_sum$sroa$0$0 = $166;$bb_sum$sroa$1$0 = $170;$bb_sum$sroa$2$0 = $174;
 while(1) {
  $176 = $bb_sum$sroa$1$0 | $bb_sum$sroa$0$0;
  $177 = $176 | $bb_sum$sroa$2$0;
  $178 = ($177|0)==(0);
  if ($178) {
   label = 6;
   break;
  }
  $179 = (_first_one012($bb_sum$sroa$0$0,$bb_sum$sroa$1$0,$bb_sum$sroa$2$0)|0);
  $180 = (34156304 + (($179*12)|0)|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = $181 ^ $bb_sum$sroa$0$0;
  $183 = ((34156304 + (($179*12)|0)|0) + 4|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = $184 ^ $bb_sum$sroa$1$0;
  $186 = ((34156304 + (($179*12)|0)|0) + 8|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = $187 ^ $bb_sum$sroa$2$0;
  $189 = HEAP8[$175>>0]|0;
  $190 = $189&255;
  $191 = ((220518304 + (($190*81)|0)|0) + ($179)|0);
  $192 = HEAP8[$191>>0]|0;
  $193 = $192&255;
  $194 = ($192<<24>>24)==(0);
  if ($194) {
   $$0 = 0;
   label = 10;
   break;
  }
  $195 = ((220518304 + (($190*81)|0)|0) + ($sq_drop)|0);
  $196 = HEAP8[$195>>0]|0;
  $197 = ($192<<24>>24)==($196<<24>>24);
  if ($197) {
   $$0 = 0;
   label = 10;
   break;
  }
  $198 = (_is_pinned_on_black_king($ptree,$179,$193)|0);
  $199 = ($198|0)==(0);
  if ($199) {
   $$0 = 0;
   label = 10;
   break;
  } else {
   $bb_sum$sroa$0$0 = $182;$bb_sum$sroa$1$0 = $185;$bb_sum$sroa$2$0 = $188;
  }
 }
 if ((label|0) == 6) {
  $200 = HEAP8[$175>>0]|0;
  $201 = $200&255;
  $202 = (34156304 + (($sq_drop*12)|0)|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = (($ptree) + 20|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = $205 ^ $203;
  HEAP32[$204>>2] = $206;
  $207 = ((34156304 + (($sq_drop*12)|0)|0) + 4|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = (($ptree) + 24|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = $210 ^ $208;
  HEAP32[$209>>2] = $211;
  $212 = ((34156304 + (($sq_drop*12)|0)|0) + 8|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = (($ptree) + 28|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = $215 ^ $213;
  HEAP32[$214>>2] = $216;
  $217 = (34157280 + (($sq_drop*12)|0)|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = (($ptree) + 32|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = $220 ^ $218;
  HEAP32[$219>>2] = $221;
  $222 = ((34157280 + (($sq_drop*12)|0)|0) + 4|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = (($ptree) + 36|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = $225 ^ $223;
  HEAP32[$224>>2] = $226;
  $227 = ((34157280 + (($sq_drop*12)|0)|0) + 8|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = (($ptree) + 40|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = $230 ^ $228;
  HEAP32[$229>>2] = $231;
  $232 = (34158256 + (($sq_drop*12)|0)|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = (($ptree) + 44|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = $235 ^ $233;
  HEAP32[$234>>2] = $236;
  $237 = ((34158256 + (($sq_drop*12)|0)|0) + 4|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = (($ptree) + 48|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $240 ^ $238;
  HEAP32[$239>>2] = $241;
  $242 = ((34158256 + (($sq_drop*12)|0)|0) + 8|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = (($ptree) + 52|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = $245 ^ $243;
  HEAP32[$244>>2] = $246;
  $247 = (34159232 + (($sq_drop*12)|0)|0);
  $248 = HEAP32[$247>>2]|0;
  $249 = (($ptree) + 56|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = $250 ^ $248;
  HEAP32[$249>>2] = $251;
  $252 = ((34159232 + (($sq_drop*12)|0)|0) + 4|0);
  $253 = HEAP32[$252>>2]|0;
  $254 = (($ptree) + 60|0);
  $255 = HEAP32[$254>>2]|0;
  $256 = $255 ^ $253;
  HEAP32[$254>>2] = $256;
  $257 = ((34159232 + (($sq_drop*12)|0)|0) + 8|0);
  $258 = HEAP32[$257>>2]|0;
  $259 = (($ptree) + 64|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = $260 ^ $258;
  HEAP32[$259>>2] = $261;
  $262 = (33578928 + (($201*12)|0)|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = (($ptree) + 8|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = $265 ^ -1;
  $267 = $263 & $266;
  $268 = ((33578928 + (($201*12)|0)|0) + 4|0);
  $269 = HEAP32[$268>>2]|0;
  $270 = (($ptree) + 12|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = $271 ^ -1;
  $273 = $269 & $272;
  $274 = ((33578928 + (($201*12)|0)|0) + 8|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = (($ptree) + 16|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = $277 ^ -1;
  $279 = $275 & $278;
  $280 = $273 | $279;
  $281 = $280 | $267;
  $282 = ($281|0)==(0);
  L8: do {
   if ($282) {
    $iret$0 = 1;
   } else {
    $bb_move$sroa$0$04 = $267;$bb_move$sroa$1$03 = $273;$bb_move$sroa$2$02 = $279;
    while(1) {
     $283 = (_first_one012($bb_move$sroa$0$04,$bb_move$sroa$1$03,$bb_move$sroa$2$02)|0);
     $284 = (_is_black_attacked($ptree,$283)|0);
     $285 = ($284|0)==(0);
     if ($285) {
      $iret$0 = 0;
      break L8;
     }
     $286 = (34156304 + (($283*12)|0)|0);
     $287 = HEAP32[$286>>2]|0;
     $288 = $287 ^ $bb_move$sroa$0$04;
     $289 = ((34156304 + (($283*12)|0)|0) + 4|0);
     $290 = HEAP32[$289>>2]|0;
     $291 = $290 ^ $bb_move$sroa$1$03;
     $292 = ((34156304 + (($283*12)|0)|0) + 8|0);
     $293 = HEAP32[$292>>2]|0;
     $294 = $293 ^ $bb_move$sroa$2$02;
     $295 = $291 | $294;
     $296 = $295 | $288;
     $297 = ($296|0)==(0);
     if ($297) {
      $iret$0 = 1;
      break;
     } else {
      $bb_move$sroa$0$04 = $288;$bb_move$sroa$1$03 = $291;$bb_move$sroa$2$02 = $294;
     }
    }
   }
  } while(0);
  $298 = HEAP32[$202>>2]|0;
  $299 = HEAP32[$204>>2]|0;
  $300 = $299 ^ $298;
  HEAP32[$204>>2] = $300;
  $301 = HEAP32[$207>>2]|0;
  $302 = HEAP32[$209>>2]|0;
  $303 = $302 ^ $301;
  HEAP32[$209>>2] = $303;
  $304 = HEAP32[$212>>2]|0;
  $305 = HEAP32[$214>>2]|0;
  $306 = $305 ^ $304;
  HEAP32[$214>>2] = $306;
  $307 = HEAP32[$217>>2]|0;
  $308 = HEAP32[$219>>2]|0;
  $309 = $308 ^ $307;
  HEAP32[$219>>2] = $309;
  $310 = HEAP32[$222>>2]|0;
  $311 = HEAP32[$224>>2]|0;
  $312 = $311 ^ $310;
  HEAP32[$224>>2] = $312;
  $313 = HEAP32[$227>>2]|0;
  $314 = HEAP32[$229>>2]|0;
  $315 = $314 ^ $313;
  HEAP32[$229>>2] = $315;
  $316 = HEAP32[$232>>2]|0;
  $317 = HEAP32[$234>>2]|0;
  $318 = $317 ^ $316;
  HEAP32[$234>>2] = $318;
  $319 = HEAP32[$237>>2]|0;
  $320 = HEAP32[$239>>2]|0;
  $321 = $320 ^ $319;
  HEAP32[$239>>2] = $321;
  $322 = HEAP32[$242>>2]|0;
  $323 = HEAP32[$244>>2]|0;
  $324 = $323 ^ $322;
  HEAP32[$244>>2] = $324;
  $325 = HEAP32[$247>>2]|0;
  $326 = HEAP32[$249>>2]|0;
  $327 = $326 ^ $325;
  HEAP32[$249>>2] = $327;
  $328 = HEAP32[$252>>2]|0;
  $329 = HEAP32[$254>>2]|0;
  $330 = $329 ^ $328;
  HEAP32[$254>>2] = $330;
  $331 = HEAP32[$257>>2]|0;
  $332 = HEAP32[$259>>2]|0;
  $333 = $332 ^ $331;
  HEAP32[$259>>2] = $333;
  $$0 = $iret$0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 10) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _is_black_attacked($ptree,$sq) {
 $ptree = $ptree|0;
 $sq = $sq|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ptree) + 176|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (34156304 + (($sq*12)|0)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & $1;
 $5 = (($ptree) + 180|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((34156304 + (($sq*12)|0)|0) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & $6;
 $10 = (($ptree) + 184|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((34156304 + (($sq*12)|0)|0) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & $11;
 $15 = (($ptree) + 224|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (33573072 + (($sq*12)|0)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & $16;
 $20 = (($ptree) + 228|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((33573072 + (($sq*12)|0)|0) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 & $21;
 $25 = (($ptree) + 232|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((33573072 + (($sq*12)|0)|0) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 & $26;
 $30 = (($ptree) + 248|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (33574048 + (($sq*12)|0)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 & $31;
 $35 = (($ptree) + 252|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((33574048 + (($sq*12)|0)|0) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 & $36;
 $40 = (($ptree) + 256|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((33574048 + (($sq*12)|0)|0) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 & $41;
 $45 = (($ptree) + 104|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (33575024 + (($sq*12)|0)|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $48 & $46;
 $50 = (($ptree) + 108|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((33575024 + (($sq*12)|0)|0) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53 & $51;
 $55 = (($ptree) + 112|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((33575024 + (($sq*12)|0)|0) + 8|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $58 & $56;
 $60 = (($ptree) + 80|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (33578928 + (($sq*12)|0)|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $63 & $61;
 $65 = (($ptree) + 84|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ((33578928 + (($sq*12)|0)|0) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $68 & $66;
 $70 = (($ptree) + 88|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ((33578928 + (($sq*12)|0)|0) + 8|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $73 & $71;
 $75 = ((33572424 + ($sq<<3)|0) + 6|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = ((($ptree) + ($77<<2)|0) + 56|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ((33572424 + ($sq<<3)|0) + 7|0);
 $81 = HEAP8[$80>>0]|0;
 $82 = $81&255;
 $83 = $79 >>> $82;
 $84 = $83 & 127;
 $85 = ((33704320 + (($sq*1536)|0)|0) + (($84*12)|0)|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ((33572424 + ($sq<<3)|0) + 4|0);
 $88 = HEAP8[$87>>0]|0;
 $89 = $88&255;
 $90 = ((($ptree) + ($89<<2)|0) + 44|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ((33572424 + ($sq<<3)|0) + 5|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&255;
 $95 = $91 >>> $94;
 $96 = $95 & 127;
 $97 = ((33579904 + (($sq*1536)|0)|0) + (($96*12)|0)|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $98 | $86;
 $100 = (((33704320 + (($sq*1536)|0)|0) + (($84*12)|0)|0) + 4|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (((33579904 + (($sq*1536)|0)|0) + (($96*12)|0)|0) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $103 | $101;
 $105 = (((33704320 + (($sq*1536)|0)|0) + (($84*12)|0)|0) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (((33579904 + (($sq*1536)|0)|0) + (($96*12)|0)|0) + 8|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = $108 | $106;
 $110 = (($ptree) + 128|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & $99;
 $113 = (($ptree) + 132|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & $104;
 $116 = (($ptree) + 136|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = $117 & $109;
 $119 = (($ptree) + 152|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = (($ptree) + 156|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (($ptree) + 160|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = (($ptree) + 200|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = (34161184 + (($sq*12)|0)|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = $128 & $126;
 $130 = $129 | $120;
 $131 = (($ptree) + 204|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ((34161184 + (($sq*12)|0)|0) + 4|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = $134 & $132;
 $136 = $135 | $122;
 $137 = (($ptree) + 208|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = ((34161184 + (($sq*12)|0)|0) + 8|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = $140 & $138;
 $142 = $141 | $124;
 $143 = ((33572424 + ($sq<<3)|0) + 2|0);
 $144 = HEAP8[$143>>0]|0;
 $145 = $144&255;
 $146 = ((($ptree) + ($145<<2)|0) + 32|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = ((33572424 + ($sq<<3)|0) + 3|0);
 $149 = HEAP8[$148>>0]|0;
 $150 = $149&255;
 $151 = $147 >>> $150;
 $152 = $151 & 127;
 $153 = ((33953152 + (($sq*1536)|0)|0) + (($152*12)|0)|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = $154 & $130;
 $156 = (((33953152 + (($sq*1536)|0)|0) + (($152*12)|0)|0) + 4|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = $157 & $136;
 $159 = (((33953152 + (($sq*1536)|0)|0) + (($152*12)|0)|0) + 8|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = $160 & $142;
 $162 = (33572424 + ($sq<<3)|0);
 $163 = HEAP8[$162>>0]|0;
 $164 = $163&255;
 $165 = ((($ptree) + ($164<<2)|0) + 8|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = ((($ptree) + ($164<<2)|0) + 20|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = $168 | $166;
 $170 = ((33572424 + ($sq<<3)|0) + 1|0);
 $171 = HEAP8[$170>>0]|0;
 $172 = $171&255;
 $173 = $169 >>> $172;
 $174 = $173 & 127;
 $175 = ((33828736 + (($sq*1536)|0)|0) + (($174*12)|0)|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = $176 & $120;
 $178 = (((33828736 + (($sq*1536)|0)|0) + (($174*12)|0)|0) + 4|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = $179 & $122;
 $181 = (((33828736 + (($sq*1536)|0)|0) + (($174*12)|0)|0) + 8|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = $182 & $124;
 $184 = $9 | $4;
 $185 = $184 | $14;
 $186 = $185 | $19;
 $187 = $186 | $24;
 $188 = $187 | $29;
 $189 = $188 | $34;
 $190 = $189 | $39;
 $191 = $190 | $44;
 $192 = $191 | $49;
 $193 = $192 | $54;
 $194 = $193 | $59;
 $195 = $194 | $64;
 $196 = $195 | $69;
 $197 = $196 | $74;
 $198 = $197 | $112;
 $199 = $198 | $115;
 $200 = $199 | $118;
 $201 = $200 | $155;
 $202 = $201 | $158;
 $203 = $202 | $161;
 $204 = $203 | $177;
 $205 = $204 | $180;
 $206 = $205 | $183;
 STACKTOP = sp;return ($206|0);
}
function _is_move_check_b($ptree,$move) {
 $ptree = $ptree|0;
 $move = $move|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ipiece_move$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $move >>> 7;
 $1 = $0 & 127;
 $2 = $move & 127;
 $3 = ($1>>>0)>(80);
 if ($3) {
  $4 = (($1) + -80)|0;
  $ipiece_move$1 = $4;
 } else {
  $5 = $move >>> 15;
  $6 = $5 & 15;
  $7 = $move & 16384;
  $8 = ($7|0)==(0);
  $9 = (($6) + 8)|0;
  $$ = $8 ? $6 : $9;
  $10 = (($ptree) + 594|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ((220518304 + (($12*81)|0)|0) + ($1)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($14<<24>>24)==(0);
  if ($16) {
   $ipiece_move$1 = $$;
  } else {
   $17 = ((220518304 + (($12*81)|0)|0) + ($2)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ($14<<24>>24)==($18<<24>>24);
   if ($19) {
    $ipiece_move$1 = $$;
   } else {
    $20 = (_is_pinned_on_white_king($ptree,$1,$15)|0);
    $21 = ($20|0)==(0);
    if ($21) {
     $ipiece_move$1 = $$;
    } else {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 }
 do {
  switch ($ipiece_move$1|0) {
  case 8:  {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 2:  {
   $27 = (34161184 + (($2*12)|0)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((33572424 + ($2<<3)|0) + 2|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = ((($ptree) + ($31<<2)|0) + 32|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((33572424 + ($2<<3)|0) + 3|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = $33 >>> $36;
   $38 = $37 & 127;
   $39 = ((33953152 + (($2*1536)|0)|0) + (($38*12)|0)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 & $28;
   $42 = ((34161184 + (($2*12)|0)|0) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (((33953152 + (($2*1536)|0)|0) + (($38*12)|0)|0) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $45 & $43;
   $47 = ((34161184 + (($2*12)|0)|0) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (((33953152 + (($2*1536)|0)|0) + (($38*12)|0)|0) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $50 & $48;
   $52 = (($ptree) + 594|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $55 = (34156304 + (($54*12)|0)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $41 & $56;
   $58 = ((34156304 + (($54*12)|0)|0) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $46 & $59;
   $61 = $60 | $57;
   $62 = ((34156304 + (($54*12)|0)|0) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $51 & $63;
   $65 = $61 | $64;
   $$0 = $65;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 3:  {
   $66 = (33573072 + (($2*12)|0)|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($ptree) + 594|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = $69&255;
   $71 = (34156304 + (($70*12)|0)|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $72 & $67;
   $74 = ((33573072 + (($2*12)|0)|0) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ((34156304 + (($70*12)|0)|0) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $77 & $75;
   $79 = $78 | $73;
   $80 = ((33573072 + (($2*12)|0)|0) + 8|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ((34156304 + (($70*12)|0)|0) + 8|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $83 & $81;
   $85 = $79 | $84;
   $$0 = $85;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 6:  {
   $106 = ((33572424 + ($2<<3)|0) + 6|0);
   $107 = HEAP8[$106>>0]|0;
   $108 = $107&255;
   $109 = ((($ptree) + ($108<<2)|0) + 56|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ((33572424 + ($2<<3)|0) + 7|0);
   $112 = HEAP8[$111>>0]|0;
   $113 = $112&255;
   $114 = $110 >>> $113;
   $115 = $114 & 127;
   $116 = ((33704320 + (($2*1536)|0)|0) + (($115*12)|0)|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ((33572424 + ($2<<3)|0) + 4|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = ((($ptree) + ($120<<2)|0) + 44|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ((33572424 + ($2<<3)|0) + 5|0);
   $124 = HEAP8[$123>>0]|0;
   $125 = $124&255;
   $126 = $122 >>> $125;
   $127 = $126 & 127;
   $128 = ((33579904 + (($2*1536)|0)|0) + (($127*12)|0)|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = $129 | $117;
   $131 = (((33704320 + (($2*1536)|0)|0) + (($115*12)|0)|0) + 4|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = (((33579904 + (($2*1536)|0)|0) + (($127*12)|0)|0) + 4|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $134 | $132;
   $136 = (((33704320 + (($2*1536)|0)|0) + (($115*12)|0)|0) + 8|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = (((33579904 + (($2*1536)|0)|0) + (($127*12)|0)|0) + 8|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $139 | $137;
   $141 = (($ptree) + 594|0);
   $142 = HEAP8[$141>>0]|0;
   $143 = $142&255;
   $144 = (34156304 + (($143*12)|0)|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = $145 & $130;
   $147 = ((34156304 + (($143*12)|0)|0) + 4|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = $148 & $135;
   $150 = $149 | $146;
   $151 = ((34156304 + (($143*12)|0)|0) + 8|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = $152 & $140;
   $154 = $150 | $153;
   $$0 = $154;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 1:  {
   $22 = (($2) + -9)|0;
   $23 = ((($ptree) + ($22)|0) + 512|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = ($24<<24>>24)==(-8);
   $26 = $25&1;
   $$0 = $26;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 14:  {
   $207 = ((33572424 + ($2<<3)|0) + 6|0);
   $208 = HEAP8[$207>>0]|0;
   $209 = $208&255;
   $210 = ((($ptree) + ($209<<2)|0) + 56|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = ((33572424 + ($2<<3)|0) + 7|0);
   $213 = HEAP8[$212>>0]|0;
   $214 = $213&255;
   $215 = $211 >>> $214;
   $216 = $215 & 127;
   $217 = ((33704320 + (($2*1536)|0)|0) + (($216*12)|0)|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = ((33572424 + ($2<<3)|0) + 4|0);
   $220 = HEAP8[$219>>0]|0;
   $221 = $220&255;
   $222 = ((($ptree) + ($221<<2)|0) + 44|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = ((33572424 + ($2<<3)|0) + 5|0);
   $225 = HEAP8[$224>>0]|0;
   $226 = $225&255;
   $227 = $223 >>> $226;
   $228 = $227 & 127;
   $229 = ((33579904 + (($2*1536)|0)|0) + (($228*12)|0)|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = $230 | $218;
   $232 = (((33704320 + (($2*1536)|0)|0) + (($216*12)|0)|0) + 4|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = (((33579904 + (($2*1536)|0)|0) + (($228*12)|0)|0) + 4|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = $235 | $233;
   $237 = (((33704320 + (($2*1536)|0)|0) + (($216*12)|0)|0) + 8|0);
   $238 = HEAP32[$237>>2]|0;
   $239 = (((33579904 + (($2*1536)|0)|0) + (($228*12)|0)|0) + 8|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = $240 | $238;
   $242 = (33578928 + (($2*12)|0)|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = $231 | $243;
   $245 = ((33578928 + (($2*12)|0)|0) + 4|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = $236 | $246;
   $248 = ((33578928 + (($2*12)|0)|0) + 8|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = $241 | $249;
   $251 = (($ptree) + 594|0);
   $252 = HEAP8[$251>>0]|0;
   $253 = $252&255;
   $254 = (34156304 + (($253*12)|0)|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = $255 & $244;
   $257 = ((34156304 + (($253*12)|0)|0) + 4|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = $258 & $247;
   $260 = $259 | $256;
   $261 = ((34156304 + (($253*12)|0)|0) + 8|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = $262 & $250;
   $264 = $260 | $263;
   $$0 = $264;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 7:  {
   $155 = ((33572424 + ($2<<3)|0) + 2|0);
   $156 = HEAP8[$155>>0]|0;
   $157 = $156&255;
   $158 = ((($ptree) + ($157<<2)|0) + 32|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = ((33572424 + ($2<<3)|0) + 3|0);
   $161 = HEAP8[$160>>0]|0;
   $162 = $161&255;
   $163 = $159 >>> $162;
   $164 = $163 & 127;
   $165 = ((33953152 + (($2*1536)|0)|0) + (($164*12)|0)|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = (33572424 + ($2<<3)|0);
   $168 = HEAP8[$167>>0]|0;
   $169 = $168&255;
   $170 = ((($ptree) + ($169<<2)|0) + 8|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ((($ptree) + ($169<<2)|0) + 20|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $173 | $171;
   $175 = ((33572424 + ($2<<3)|0) + 1|0);
   $176 = HEAP8[$175>>0]|0;
   $177 = $176&255;
   $178 = $174 >>> $177;
   $179 = $178 & 127;
   $180 = ((33828736 + (($2*1536)|0)|0) + (($179*12)|0)|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $181 | $166;
   $183 = (((33953152 + (($2*1536)|0)|0) + (($164*12)|0)|0) + 4|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (((33828736 + (($2*1536)|0)|0) + (($179*12)|0)|0) + 4|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = $186 | $184;
   $188 = (((33953152 + (($2*1536)|0)|0) + (($164*12)|0)|0) + 8|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = (((33828736 + (($2*1536)|0)|0) + (($179*12)|0)|0) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = $191 | $189;
   $193 = (($ptree) + 594|0);
   $194 = HEAP8[$193>>0]|0;
   $195 = $194&255;
   $196 = (34156304 + (($195*12)|0)|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $197 & $182;
   $199 = ((34156304 + (($195*12)|0)|0) + 4|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = $200 & $187;
   $202 = $201 | $198;
   $203 = ((34156304 + (($195*12)|0)|0) + 8|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = $204 & $192;
   $206 = $202 | $205;
   $$0 = $206;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 4:  {
   $86 = (33574048 + (($2*12)|0)|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (($ptree) + 594|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = $89&255;
   $91 = (34156304 + (($90*12)|0)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $92 & $87;
   $94 = ((33574048 + (($2*12)|0)|0) + 4|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ((34156304 + (($90*12)|0)|0) + 4|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $97 & $95;
   $99 = $98 | $93;
   $100 = ((33574048 + (($2*12)|0)|0) + 8|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((34156304 + (($90*12)|0)|0) + 8|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = $103 & $101;
   $105 = $99 | $104;
   $$0 = $105;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 15:  {
   $265 = ((33572424 + ($2<<3)|0) + 2|0);
   $266 = HEAP8[$265>>0]|0;
   $267 = $266&255;
   $268 = ((($ptree) + ($267<<2)|0) + 32|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = ((33572424 + ($2<<3)|0) + 3|0);
   $271 = HEAP8[$270>>0]|0;
   $272 = $271&255;
   $273 = $269 >>> $272;
   $274 = $273 & 127;
   $275 = ((33953152 + (($2*1536)|0)|0) + (($274*12)|0)|0);
   $276 = HEAP32[$275>>2]|0;
   $277 = (33572424 + ($2<<3)|0);
   $278 = HEAP8[$277>>0]|0;
   $279 = $278&255;
   $280 = ((($ptree) + ($279<<2)|0) + 8|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = ((($ptree) + ($279<<2)|0) + 20|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = $283 | $281;
   $285 = ((33572424 + ($2<<3)|0) + 1|0);
   $286 = HEAP8[$285>>0]|0;
   $287 = $286&255;
   $288 = $284 >>> $287;
   $289 = $288 & 127;
   $290 = ((33828736 + (($2*1536)|0)|0) + (($289*12)|0)|0);
   $291 = HEAP32[$290>>2]|0;
   $292 = $291 | $276;
   $293 = (((33953152 + (($2*1536)|0)|0) + (($274*12)|0)|0) + 4|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = (((33828736 + (($2*1536)|0)|0) + (($289*12)|0)|0) + 4|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = $296 | $294;
   $298 = (((33953152 + (($2*1536)|0)|0) + (($274*12)|0)|0) + 8|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = (((33828736 + (($2*1536)|0)|0) + (($289*12)|0)|0) + 8|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = $301 | $299;
   $303 = (33578928 + (($2*12)|0)|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = $292 | $304;
   $306 = ((33578928 + (($2*12)|0)|0) + 4|0);
   $307 = HEAP32[$306>>2]|0;
   $308 = $297 | $307;
   $309 = ((33578928 + (($2*12)|0)|0) + 8|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = $302 | $310;
   $312 = (($ptree) + 594|0);
   $313 = HEAP8[$312>>0]|0;
   $314 = $313&255;
   $315 = (34156304 + (($314*12)|0)|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = $316 & $305;
   $318 = ((34156304 + (($314*12)|0)|0) + 4|0);
   $319 = HEAP32[$318>>2]|0;
   $320 = $319 & $308;
   $321 = $320 | $317;
   $322 = ((34156304 + (($314*12)|0)|0) + 8|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = $323 & $311;
   $325 = $321 | $324;
   $$0 = $325;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  default: {
   $326 = (33575024 + (($2*12)|0)|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = (($ptree) + 594|0);
   $329 = HEAP8[$328>>0]|0;
   $330 = $329&255;
   $331 = (34156304 + (($330*12)|0)|0);
   $332 = HEAP32[$331>>2]|0;
   $333 = $332 & $327;
   $334 = ((33575024 + (($2*12)|0)|0) + 4|0);
   $335 = HEAP32[$334>>2]|0;
   $336 = ((34156304 + (($330*12)|0)|0) + 4|0);
   $337 = HEAP32[$336>>2]|0;
   $338 = $337 & $335;
   $339 = $338 | $333;
   $340 = ((33575024 + (($2*12)|0)|0) + 8|0);
   $341 = HEAP32[$340>>2]|0;
   $342 = ((34156304 + (($330*12)|0)|0) + 8|0);
   $343 = HEAP32[$342>>2]|0;
   $344 = $343 & $341;
   $345 = $339 | $344;
   $$0 = $345;
   STACKTOP = sp;return ($$0|0);
  }
  }
 } while(0);
 return 0|0;
}
function _is_move_check_w($ptree,$move) {
 $ptree = $ptree|0;
 $move = $move|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ipiece_move$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $move >>> 7;
 $1 = $0 & 127;
 $2 = $move & 127;
 $3 = ($1>>>0)>(80);
 if ($3) {
  $4 = (($1) + -80)|0;
  $ipiece_move$1 = $4;
 } else {
  $5 = $move >>> 15;
  $6 = $5 & 15;
  $7 = $move & 16384;
  $8 = ($7|0)==(0);
  $9 = (($6) + 8)|0;
  $$ = $8 ? $6 : $9;
  $10 = (($ptree) + 593|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ((220518304 + (($12*81)|0)|0) + ($1)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($14<<24>>24)==(0);
  if ($16) {
   $ipiece_move$1 = $$;
  } else {
   $17 = ((220518304 + (($12*81)|0)|0) + ($2)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ($14<<24>>24)==($18<<24>>24);
   if ($19) {
    $ipiece_move$1 = $$;
   } else {
    $20 = (_is_pinned_on_black_king($ptree,$1,$15)|0);
    $21 = ($20|0)==(0);
    if ($21) {
     $ipiece_move$1 = $$;
    } else {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 }
 do {
  switch ($ipiece_move$1|0) {
  case 1:  {
   $22 = (($2) + 9)|0;
   $23 = ((($ptree) + ($22)|0) + 512|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = ($24<<24>>24)==(8);
   $26 = $25&1;
   $$0 = $26;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 2:  {
   $27 = (34160208 + (($2*12)|0)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((33572424 + ($2<<3)|0) + 2|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = ((($ptree) + ($31<<2)|0) + 32|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((33572424 + ($2<<3)|0) + 3|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = $33 >>> $36;
   $38 = $37 & 127;
   $39 = ((33953152 + (($2*1536)|0)|0) + (($38*12)|0)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 & $28;
   $42 = ((34160208 + (($2*12)|0)|0) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (((33953152 + (($2*1536)|0)|0) + (($38*12)|0)|0) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $45 & $43;
   $47 = ((34160208 + (($2*12)|0)|0) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (((33953152 + (($2*1536)|0)|0) + (($38*12)|0)|0) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $50 & $48;
   $52 = (($ptree) + 593|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $55 = (34156304 + (($54*12)|0)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $41 & $56;
   $58 = ((34156304 + (($54*12)|0)|0) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $46 & $59;
   $61 = $60 | $57;
   $62 = ((34156304 + (($54*12)|0)|0) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $51 & $63;
   $65 = $61 | $64;
   $$0 = $65;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 3:  {
   $66 = (33576000 + (($2*12)|0)|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($ptree) + 593|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = $69&255;
   $71 = (34156304 + (($70*12)|0)|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $72 & $67;
   $74 = ((33576000 + (($2*12)|0)|0) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ((34156304 + (($70*12)|0)|0) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $77 & $75;
   $79 = $78 | $73;
   $80 = ((33576000 + (($2*12)|0)|0) + 8|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ((34156304 + (($70*12)|0)|0) + 8|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $83 & $81;
   $85 = $79 | $84;
   $$0 = $85;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 4:  {
   $86 = (33576976 + (($2*12)|0)|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (($ptree) + 593|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = $89&255;
   $91 = (34156304 + (($90*12)|0)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $92 & $87;
   $94 = ((33576976 + (($2*12)|0)|0) + 4|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ((34156304 + (($90*12)|0)|0) + 4|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $97 & $95;
   $99 = $98 | $93;
   $100 = ((33576976 + (($2*12)|0)|0) + 8|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((34156304 + (($90*12)|0)|0) + 8|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = $103 & $101;
   $105 = $99 | $104;
   $$0 = $105;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 6:  {
   $106 = ((33572424 + ($2<<3)|0) + 6|0);
   $107 = HEAP8[$106>>0]|0;
   $108 = $107&255;
   $109 = ((($ptree) + ($108<<2)|0) + 56|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ((33572424 + ($2<<3)|0) + 7|0);
   $112 = HEAP8[$111>>0]|0;
   $113 = $112&255;
   $114 = $110 >>> $113;
   $115 = $114 & 127;
   $116 = ((33704320 + (($2*1536)|0)|0) + (($115*12)|0)|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ((33572424 + ($2<<3)|0) + 4|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = ((($ptree) + ($120<<2)|0) + 44|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ((33572424 + ($2<<3)|0) + 5|0);
   $124 = HEAP8[$123>>0]|0;
   $125 = $124&255;
   $126 = $122 >>> $125;
   $127 = $126 & 127;
   $128 = ((33579904 + (($2*1536)|0)|0) + (($127*12)|0)|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = $129 | $117;
   $131 = (((33704320 + (($2*1536)|0)|0) + (($115*12)|0)|0) + 4|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = (((33579904 + (($2*1536)|0)|0) + (($127*12)|0)|0) + 4|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $134 | $132;
   $136 = (((33704320 + (($2*1536)|0)|0) + (($115*12)|0)|0) + 8|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = (((33579904 + (($2*1536)|0)|0) + (($127*12)|0)|0) + 8|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $139 | $137;
   $141 = (($ptree) + 593|0);
   $142 = HEAP8[$141>>0]|0;
   $143 = $142&255;
   $144 = (34156304 + (($143*12)|0)|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = $145 & $130;
   $147 = ((34156304 + (($143*12)|0)|0) + 4|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = $148 & $135;
   $150 = $149 | $146;
   $151 = ((34156304 + (($143*12)|0)|0) + 8|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = $152 & $140;
   $154 = $150 | $153;
   $$0 = $154;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 7:  {
   $155 = ((33572424 + ($2<<3)|0) + 2|0);
   $156 = HEAP8[$155>>0]|0;
   $157 = $156&255;
   $158 = ((($ptree) + ($157<<2)|0) + 32|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = ((33572424 + ($2<<3)|0) + 3|0);
   $161 = HEAP8[$160>>0]|0;
   $162 = $161&255;
   $163 = $159 >>> $162;
   $164 = $163 & 127;
   $165 = ((33953152 + (($2*1536)|0)|0) + (($164*12)|0)|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = (33572424 + ($2<<3)|0);
   $168 = HEAP8[$167>>0]|0;
   $169 = $168&255;
   $170 = ((($ptree) + ($169<<2)|0) + 8|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ((($ptree) + ($169<<2)|0) + 20|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $173 | $171;
   $175 = ((33572424 + ($2<<3)|0) + 1|0);
   $176 = HEAP8[$175>>0]|0;
   $177 = $176&255;
   $178 = $174 >>> $177;
   $179 = $178 & 127;
   $180 = ((33828736 + (($2*1536)|0)|0) + (($179*12)|0)|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $181 | $166;
   $183 = (((33953152 + (($2*1536)|0)|0) + (($164*12)|0)|0) + 4|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (((33828736 + (($2*1536)|0)|0) + (($179*12)|0)|0) + 4|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = $186 | $184;
   $188 = (((33953152 + (($2*1536)|0)|0) + (($164*12)|0)|0) + 8|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = (((33828736 + (($2*1536)|0)|0) + (($179*12)|0)|0) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = $191 | $189;
   $193 = (($ptree) + 593|0);
   $194 = HEAP8[$193>>0]|0;
   $195 = $194&255;
   $196 = (34156304 + (($195*12)|0)|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $197 & $182;
   $199 = ((34156304 + (($195*12)|0)|0) + 4|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = $200 & $187;
   $202 = $201 | $198;
   $203 = ((34156304 + (($195*12)|0)|0) + 8|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = $204 & $192;
   $206 = $202 | $205;
   $$0 = $206;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 14:  {
   $207 = ((33572424 + ($2<<3)|0) + 6|0);
   $208 = HEAP8[$207>>0]|0;
   $209 = $208&255;
   $210 = ((($ptree) + ($209<<2)|0) + 56|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = ((33572424 + ($2<<3)|0) + 7|0);
   $213 = HEAP8[$212>>0]|0;
   $214 = $213&255;
   $215 = $211 >>> $214;
   $216 = $215 & 127;
   $217 = ((33704320 + (($2*1536)|0)|0) + (($216*12)|0)|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = ((33572424 + ($2<<3)|0) + 4|0);
   $220 = HEAP8[$219>>0]|0;
   $221 = $220&255;
   $222 = ((($ptree) + ($221<<2)|0) + 44|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = ((33572424 + ($2<<3)|0) + 5|0);
   $225 = HEAP8[$224>>0]|0;
   $226 = $225&255;
   $227 = $223 >>> $226;
   $228 = $227 & 127;
   $229 = ((33579904 + (($2*1536)|0)|0) + (($228*12)|0)|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = $230 | $218;
   $232 = (((33704320 + (($2*1536)|0)|0) + (($216*12)|0)|0) + 4|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = (((33579904 + (($2*1536)|0)|0) + (($228*12)|0)|0) + 4|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = $235 | $233;
   $237 = (((33704320 + (($2*1536)|0)|0) + (($216*12)|0)|0) + 8|0);
   $238 = HEAP32[$237>>2]|0;
   $239 = (((33579904 + (($2*1536)|0)|0) + (($228*12)|0)|0) + 8|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = $240 | $238;
   $242 = (33578928 + (($2*12)|0)|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = $231 | $243;
   $245 = ((33578928 + (($2*12)|0)|0) + 4|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = $236 | $246;
   $248 = ((33578928 + (($2*12)|0)|0) + 8|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = $241 | $249;
   $251 = (($ptree) + 593|0);
   $252 = HEAP8[$251>>0]|0;
   $253 = $252&255;
   $254 = (34156304 + (($253*12)|0)|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = $255 & $244;
   $257 = ((34156304 + (($253*12)|0)|0) + 4|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = $258 & $247;
   $260 = $259 | $256;
   $261 = ((34156304 + (($253*12)|0)|0) + 8|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = $262 & $250;
   $264 = $260 | $263;
   $$0 = $264;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 8:  {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 15:  {
   $265 = ((33572424 + ($2<<3)|0) + 2|0);
   $266 = HEAP8[$265>>0]|0;
   $267 = $266&255;
   $268 = ((($ptree) + ($267<<2)|0) + 32|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = ((33572424 + ($2<<3)|0) + 3|0);
   $271 = HEAP8[$270>>0]|0;
   $272 = $271&255;
   $273 = $269 >>> $272;
   $274 = $273 & 127;
   $275 = ((33953152 + (($2*1536)|0)|0) + (($274*12)|0)|0);
   $276 = HEAP32[$275>>2]|0;
   $277 = (33572424 + ($2<<3)|0);
   $278 = HEAP8[$277>>0]|0;
   $279 = $278&255;
   $280 = ((($ptree) + ($279<<2)|0) + 8|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = ((($ptree) + ($279<<2)|0) + 20|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = $283 | $281;
   $285 = ((33572424 + ($2<<3)|0) + 1|0);
   $286 = HEAP8[$285>>0]|0;
   $287 = $286&255;
   $288 = $284 >>> $287;
   $289 = $288 & 127;
   $290 = ((33828736 + (($2*1536)|0)|0) + (($289*12)|0)|0);
   $291 = HEAP32[$290>>2]|0;
   $292 = $291 | $276;
   $293 = (((33953152 + (($2*1536)|0)|0) + (($274*12)|0)|0) + 4|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = (((33828736 + (($2*1536)|0)|0) + (($289*12)|0)|0) + 4|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = $296 | $294;
   $298 = (((33953152 + (($2*1536)|0)|0) + (($274*12)|0)|0) + 8|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = (((33828736 + (($2*1536)|0)|0) + (($289*12)|0)|0) + 8|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = $301 | $299;
   $303 = (33578928 + (($2*12)|0)|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = $292 | $304;
   $306 = ((33578928 + (($2*12)|0)|0) + 4|0);
   $307 = HEAP32[$306>>2]|0;
   $308 = $297 | $307;
   $309 = ((33578928 + (($2*12)|0)|0) + 8|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = $302 | $310;
   $312 = (($ptree) + 593|0);
   $313 = HEAP8[$312>>0]|0;
   $314 = $313&255;
   $315 = (34156304 + (($314*12)|0)|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = $316 & $305;
   $318 = ((34156304 + (($314*12)|0)|0) + 4|0);
   $319 = HEAP32[$318>>2]|0;
   $320 = $319 & $308;
   $321 = $320 | $317;
   $322 = ((34156304 + (($314*12)|0)|0) + 8|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = $323 & $311;
   $325 = $321 | $324;
   $$0 = $325;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  default: {
   $326 = (33577952 + (($2*12)|0)|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = (($ptree) + 593|0);
   $329 = HEAP8[$328>>0]|0;
   $330 = $329&255;
   $331 = (34156304 + (($330*12)|0)|0);
   $332 = HEAP32[$331>>2]|0;
   $333 = $332 & $327;
   $334 = ((33577952 + (($2*12)|0)|0) + 4|0);
   $335 = HEAP32[$334>>2]|0;
   $336 = ((34156304 + (($330*12)|0)|0) + 4|0);
   $337 = HEAP32[$336>>2]|0;
   $338 = $337 & $335;
   $339 = $338 | $333;
   $340 = ((33577952 + (($2*12)|0)|0) + 8|0);
   $341 = HEAP32[$340>>2]|0;
   $342 = ((34156304 + (($330*12)|0)|0) + 8|0);
   $343 = HEAP32[$342>>2]|0;
   $344 = $343 & $341;
   $345 = $339 | $344;
   $$0 = $345;
   STACKTOP = sp;return ($$0|0);
  }
  }
 } while(0);
 return 0|0;
}
function _attacks_to_piece($agg$result,$ptree,$sq) {
 $agg$result = $agg$result|0;
 $ptree = $ptree|0;
 $sq = $sq|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bb_ret$sroa$0$0 = 0, $bb_ret$sroa$0$01 = 0, $bb_ret$sroa$0$1 = 0, $bb_ret$sroa$1$0 = 0;
 var $bb_ret$sroa$1$02 = 0, $bb_ret$sroa$1$1 = 0, $bb_ret$sroa$2$0 = 0, $bb_ret$sroa$2$03 = 0, $bb_ret$sroa$2$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($sq|0)<(72);
 if ($0) {
  $1 = (($sq) + 9)|0;
  $2 = ((($ptree) + ($1)|0) + 512|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(1);
  if ($4) {
   $5 = (34156304 + (($1*12)|0)|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((34156304 + (($1*12)|0)|0) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((34156304 + (($1*12)|0)|0) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $bb_ret$sroa$0$0 = $6;$bb_ret$sroa$1$0 = $8;$bb_ret$sroa$2$0 = $10;
  } else {
   $bb_ret$sroa$0$0 = 0;$bb_ret$sroa$1$0 = 0;$bb_ret$sroa$2$0 = 0;
  }
  $11 = ($sq|0)>(8);
  if ($11) {
   $bb_ret$sroa$0$01 = $bb_ret$sroa$0$0;$bb_ret$sroa$1$02 = $bb_ret$sroa$1$0;$bb_ret$sroa$2$03 = $bb_ret$sroa$2$0;
   label = 5;
  } else {
   $bb_ret$sroa$0$1 = $bb_ret$sroa$0$0;$bb_ret$sroa$1$1 = $bb_ret$sroa$1$0;$bb_ret$sroa$2$1 = $bb_ret$sroa$2$0;
  }
 } else {
  $bb_ret$sroa$0$01 = 0;$bb_ret$sroa$1$02 = 0;$bb_ret$sroa$2$03 = 0;
  label = 5;
 }
 if ((label|0) == 5) {
  $12 = (($sq) + -9)|0;
  $13 = ((($ptree) + ($12)|0) + 512|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(-1);
  if ($15) {
   $16 = (34156304 + (($12*12)|0)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $17 | $bb_ret$sroa$0$01;
   $19 = ((34156304 + (($12*12)|0)|0) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $20 | $bb_ret$sroa$1$02;
   $22 = ((34156304 + (($12*12)|0)|0) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $23 | $bb_ret$sroa$2$03;
   $bb_ret$sroa$0$1 = $18;$bb_ret$sroa$1$1 = $21;$bb_ret$sroa$2$1 = $24;
  } else {
   $bb_ret$sroa$0$1 = $bb_ret$sroa$0$01;$bb_ret$sroa$1$1 = $bb_ret$sroa$1$02;$bb_ret$sroa$2$1 = $bb_ret$sroa$2$03;
  }
 }
 $25 = (($ptree) + 212|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (33576000 + (($sq*12)|0)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 & $26;
 $30 = $29 | $bb_ret$sroa$0$1;
 $31 = (($ptree) + 216|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((33576000 + (($sq*12)|0)|0) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 & $32;
 $36 = $35 | $bb_ret$sroa$1$1;
 $37 = (($ptree) + 220|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((33576000 + (($sq*12)|0)|0) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $40 & $38;
 $42 = $41 | $bb_ret$sroa$2$1;
 $43 = (($ptree) + 224|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (33573072 + (($sq*12)|0)|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 & $44;
 $48 = $30 | $47;
 $49 = (($ptree) + 228|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((33573072 + (($sq*12)|0)|0) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $52 & $50;
 $54 = $36 | $53;
 $55 = (($ptree) + 232|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((33573072 + (($sq*12)|0)|0) + 8|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $58 & $56;
 $60 = $42 | $59;
 $61 = (($ptree) + 236|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (33576976 + (($sq*12)|0)|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & $62;
 $66 = $48 | $65;
 $67 = (($ptree) + 240|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ((33576976 + (($sq*12)|0)|0) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $70 & $68;
 $72 = $54 | $71;
 $73 = (($ptree) + 244|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ((33576976 + (($sq*12)|0)|0) + 8|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $76 & $74;
 $78 = $60 | $77;
 $79 = (($ptree) + 248|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (33574048 + (($sq*12)|0)|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $82 & $80;
 $84 = $66 | $83;
 $85 = (($ptree) + 252|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ((33574048 + (($sq*12)|0)|0) + 4|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $88 & $86;
 $90 = $72 | $89;
 $91 = (($ptree) + 256|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ((33574048 + (($sq*12)|0)|0) + 8|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $94 & $92;
 $96 = $78 | $95;
 $97 = (($ptree) + 92|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (33577952 + (($sq*12)|0)|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = $100 & $98;
 $102 = $84 | $101;
 $103 = (($ptree) + 96|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ((33577952 + (($sq*12)|0)|0) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $106 & $104;
 $108 = $90 | $107;
 $109 = (($ptree) + 100|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ((33577952 + (($sq*12)|0)|0) + 8|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & $110;
 $114 = $96 | $113;
 $115 = (($ptree) + 104|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = (33575024 + (($sq*12)|0)|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = $118 & $116;
 $120 = $102 | $119;
 $121 = (($ptree) + 108|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ((33575024 + (($sq*12)|0)|0) + 4|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = $124 & $122;
 $126 = $108 | $125;
 $127 = (($ptree) + 112|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = ((33575024 + (($sq*12)|0)|0) + 8|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = $130 & $128;
 $132 = $114 | $131;
 $133 = (($ptree) + 68|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = (($ptree) + 80|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = $136 | $134;
 $138 = (($ptree) + 72|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = (($ptree) + 84|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = $141 | $139;
 $143 = (($ptree) + 76|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = (($ptree) + 88|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = $146 | $144;
 $148 = (33578928 + (($sq*12)|0)|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = $149 & $137;
 $151 = $120 | $150;
 $152 = ((33578928 + (($sq*12)|0)|0) + 4|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = $153 & $142;
 $155 = $126 | $154;
 $156 = ((33578928 + (($sq*12)|0)|0) + 8|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = $157 & $147;
 $159 = $132 | $158;
 $160 = (($ptree) + 116|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = (($ptree) + 128|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = $163 | $161;
 $165 = (($ptree) + 120|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = (($ptree) + 132|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = $168 | $166;
 $170 = (($ptree) + 124|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = (($ptree) + 136|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = $173 | $171;
 $175 = ((33572424 + ($sq<<3)|0) + 6|0);
 $176 = HEAP8[$175>>0]|0;
 $177 = $176&255;
 $178 = ((($ptree) + ($177<<2)|0) + 56|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = ((33572424 + ($sq<<3)|0) + 7|0);
 $181 = HEAP8[$180>>0]|0;
 $182 = $181&255;
 $183 = $179 >>> $182;
 $184 = $183 & 127;
 $185 = ((33704320 + (($sq*1536)|0)|0) + (($184*12)|0)|0);
 $186 = HEAP32[$185>>2]|0;
 $187 = ((33572424 + ($sq<<3)|0) + 4|0);
 $188 = HEAP8[$187>>0]|0;
 $189 = $188&255;
 $190 = ((($ptree) + ($189<<2)|0) + 44|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = ((33572424 + ($sq<<3)|0) + 5|0);
 $193 = HEAP8[$192>>0]|0;
 $194 = $193&255;
 $195 = $191 >>> $194;
 $196 = $195 & 127;
 $197 = ((33579904 + (($sq*1536)|0)|0) + (($196*12)|0)|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = $198 | $186;
 $200 = (((33704320 + (($sq*1536)|0)|0) + (($184*12)|0)|0) + 4|0);
 $201 = HEAP32[$200>>2]|0;
 $202 = (((33579904 + (($sq*1536)|0)|0) + (($196*12)|0)|0) + 4|0);
 $203 = HEAP32[$202>>2]|0;
 $204 = $203 | $201;
 $205 = (((33704320 + (($sq*1536)|0)|0) + (($184*12)|0)|0) + 8|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = (((33579904 + (($sq*1536)|0)|0) + (($196*12)|0)|0) + 8|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = $208 | $206;
 $210 = $199 & $164;
 $211 = $151 | $210;
 $212 = $204 & $169;
 $213 = $155 | $212;
 $214 = $209 & $174;
 $215 = $159 | $214;
 $216 = (($ptree) + 140|0);
 $217 = HEAP32[$216>>2]|0;
 $218 = (($ptree) + 152|0);
 $219 = HEAP32[$218>>2]|0;
 $220 = $219 | $217;
 $221 = (($ptree) + 144|0);
 $222 = HEAP32[$221>>2]|0;
 $223 = (($ptree) + 156|0);
 $224 = HEAP32[$223>>2]|0;
 $225 = $224 | $222;
 $226 = (($ptree) + 148|0);
 $227 = HEAP32[$226>>2]|0;
 $228 = (($ptree) + 160|0);
 $229 = HEAP32[$228>>2]|0;
 $230 = $229 | $227;
 $231 = (33572424 + ($sq<<3)|0);
 $232 = HEAP8[$231>>0]|0;
 $233 = $232&255;
 $234 = ((($ptree) + ($233<<2)|0) + 8|0);
 $235 = HEAP32[$234>>2]|0;
 $236 = ((($ptree) + ($233<<2)|0) + 20|0);
 $237 = HEAP32[$236>>2]|0;
 $238 = $237 | $235;
 $239 = ((33572424 + ($sq<<3)|0) + 1|0);
 $240 = HEAP8[$239>>0]|0;
 $241 = $240&255;
 $242 = $238 >>> $241;
 $243 = $242 & 127;
 $244 = ((33828736 + (($sq*1536)|0)|0) + (($243*12)|0)|0);
 $245 = HEAP32[$244>>2]|0;
 $246 = $245 & $220;
 $247 = $211 | $246;
 $248 = (((33828736 + (($sq*1536)|0)|0) + (($243*12)|0)|0) + 4|0);
 $249 = HEAP32[$248>>2]|0;
 $250 = $249 & $225;
 $251 = $213 | $250;
 $252 = (((33828736 + (($sq*1536)|0)|0) + (($243*12)|0)|0) + 8|0);
 $253 = HEAP32[$252>>2]|0;
 $254 = $253 & $230;
 $255 = $215 | $254;
 $256 = (($ptree) + 188|0);
 $257 = HEAP32[$256>>2]|0;
 $258 = (34160208 + (($sq*12)|0)|0);
 $259 = HEAP32[$258>>2]|0;
 $260 = $259 & $257;
 $261 = $260 | $220;
 $262 = (($ptree) + 192|0);
 $263 = HEAP32[$262>>2]|0;
 $264 = ((34160208 + (($sq*12)|0)|0) + 4|0);
 $265 = HEAP32[$264>>2]|0;
 $266 = $265 & $263;
 $267 = $266 | $225;
 $268 = (($ptree) + 196|0);
 $269 = HEAP32[$268>>2]|0;
 $270 = ((34160208 + (($sq*12)|0)|0) + 8|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = $271 & $269;
 $273 = $272 | $230;
 $274 = (($ptree) + 200|0);
 $275 = HEAP32[$274>>2]|0;
 $276 = (34161184 + (($sq*12)|0)|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & $275;
 $279 = $261 | $278;
 $280 = (($ptree) + 204|0);
 $281 = HEAP32[$280>>2]|0;
 $282 = ((34161184 + (($sq*12)|0)|0) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & $281;
 $285 = $267 | $284;
 $286 = (($ptree) + 208|0);
 $287 = HEAP32[$286>>2]|0;
 $288 = ((34161184 + (($sq*12)|0)|0) + 8|0);
 $289 = HEAP32[$288>>2]|0;
 $290 = $289 & $287;
 $291 = $273 | $290;
 $292 = ((33572424 + ($sq<<3)|0) + 2|0);
 $293 = HEAP8[$292>>0]|0;
 $294 = $293&255;
 $295 = ((($ptree) + ($294<<2)|0) + 32|0);
 $296 = HEAP32[$295>>2]|0;
 $297 = ((33572424 + ($sq<<3)|0) + 3|0);
 $298 = HEAP8[$297>>0]|0;
 $299 = $298&255;
 $300 = $296 >>> $299;
 $301 = $300 & 127;
 $302 = ((33953152 + (($sq*1536)|0)|0) + (($301*12)|0)|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = $303 & $279;
 $305 = $247 | $304;
 $306 = (((33953152 + (($sq*1536)|0)|0) + (($301*12)|0)|0) + 4|0);
 $307 = HEAP32[$306>>2]|0;
 $308 = $307 & $285;
 $309 = $251 | $308;
 $310 = (((33953152 + (($sq*1536)|0)|0) + (($301*12)|0)|0) + 8|0);
 $311 = HEAP32[$310>>2]|0;
 $312 = $311 & $291;
 $313 = $255 | $312;
 HEAP32[$agg$result>>2] = $305;
 $314 = (($agg$result) + 4|0);
 HEAP32[$314>>2] = $309;
 $315 = (($agg$result) + 8|0);
 HEAP32[$315>>2] = $313;
 STACKTOP = sp;return;
}
function _b_attacks_to_piece($agg$result,$ptree,$sq) {
 $agg$result = $agg$result|0;
 $ptree = $ptree|0;
 $sq = $sq|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $bb_ret$sroa$0$0 = 0, $bb_ret$sroa$1$0 = 0, $bb_ret$sroa$2$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($sq|0)<(72);
 if ($0) {
  $1 = (($sq) + 9)|0;
  $2 = ((($ptree) + ($1)|0) + 512|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(1);
  if ($4) {
   $5 = (34156304 + (($1*12)|0)|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((34156304 + (($1*12)|0)|0) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((34156304 + (($1*12)|0)|0) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $bb_ret$sroa$0$0 = $6;$bb_ret$sroa$1$0 = $8;$bb_ret$sroa$2$0 = $10;
  } else {
   $bb_ret$sroa$0$0 = 0;$bb_ret$sroa$1$0 = 0;$bb_ret$sroa$2$0 = 0;
  }
 } else {
  $bb_ret$sroa$0$0 = 0;$bb_ret$sroa$1$0 = 0;$bb_ret$sroa$2$0 = 0;
 }
 $11 = (($ptree) + 212|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (33576000 + (($sq*12)|0)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & $12;
 $16 = $15 | $bb_ret$sroa$0$0;
 $17 = (($ptree) + 216|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((33576000 + (($sq*12)|0)|0) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 & $18;
 $22 = $21 | $bb_ret$sroa$1$0;
 $23 = (($ptree) + 220|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((33576000 + (($sq*12)|0)|0) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 & $24;
 $28 = $27 | $bb_ret$sroa$2$0;
 $29 = (($ptree) + 236|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (33576976 + (($sq*12)|0)|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 & $30;
 $34 = $16 | $33;
 $35 = (($ptree) + 240|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((33576976 + (($sq*12)|0)|0) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 & $36;
 $40 = $22 | $39;
 $41 = (($ptree) + 244|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((33576976 + (($sq*12)|0)|0) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $44 & $42;
 $46 = $28 | $45;
 $47 = (($ptree) + 92|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (33577952 + (($sq*12)|0)|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $50 & $48;
 $52 = $34 | $51;
 $53 = (($ptree) + 96|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((33577952 + (($sq*12)|0)|0) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $56 & $54;
 $58 = $40 | $57;
 $59 = (($ptree) + 100|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((33577952 + (($sq*12)|0)|0) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62 & $60;
 $64 = $46 | $63;
 $65 = (($ptree) + 68|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (33578928 + (($sq*12)|0)|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $68 & $66;
 $70 = $52 | $69;
 $71 = (($ptree) + 72|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ((33578928 + (($sq*12)|0)|0) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $74 & $72;
 $76 = $58 | $75;
 $77 = (($ptree) + 76|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ((33578928 + (($sq*12)|0)|0) + 8|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $80 & $78;
 $82 = $64 | $81;
 $83 = ((33572424 + ($sq<<3)|0) + 6|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = $84&255;
 $86 = ((($ptree) + ($85<<2)|0) + 56|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ((33572424 + ($sq<<3)|0) + 7|0);
 $89 = HEAP8[$88>>0]|0;
 $90 = $89&255;
 $91 = $87 >>> $90;
 $92 = $91 & 127;
 $93 = ((33704320 + (($sq*1536)|0)|0) + (($92*12)|0)|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ((33572424 + ($sq<<3)|0) + 4|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = $96&255;
 $98 = ((($ptree) + ($97<<2)|0) + 44|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ((33572424 + ($sq<<3)|0) + 5|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = $99 >>> $102;
 $104 = $103 & 127;
 $105 = ((33579904 + (($sq*1536)|0)|0) + (($104*12)|0)|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $106 | $94;
 $108 = (((33704320 + (($sq*1536)|0)|0) + (($92*12)|0)|0) + 4|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = (((33579904 + (($sq*1536)|0)|0) + (($104*12)|0)|0) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 | $109;
 $113 = (((33704320 + (($sq*1536)|0)|0) + (($92*12)|0)|0) + 8|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (((33579904 + (($sq*1536)|0)|0) + (($104*12)|0)|0) + 8|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $116 | $114;
 $118 = (($ptree) + 116|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = $119 & $107;
 $121 = $70 | $120;
 $122 = (($ptree) + 120|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = $123 & $112;
 $125 = $76 | $124;
 $126 = (($ptree) + 124|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = $127 & $117;
 $129 = $82 | $128;
 $130 = (($ptree) + 140|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (($ptree) + 144|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = (($ptree) + 148|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = (33572424 + ($sq<<3)|0);
 $137 = HEAP8[$136>>0]|0;
 $138 = $137&255;
 $139 = ((($ptree) + ($138<<2)|0) + 8|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ((($ptree) + ($138<<2)|0) + 20|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = $142 | $140;
 $144 = ((33572424 + ($sq<<3)|0) + 1|0);
 $145 = HEAP8[$144>>0]|0;
 $146 = $145&255;
 $147 = $143 >>> $146;
 $148 = $147 & 127;
 $149 = ((33828736 + (($sq*1536)|0)|0) + (($148*12)|0)|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = $150 & $131;
 $152 = $121 | $151;
 $153 = (((33828736 + (($sq*1536)|0)|0) + (($148*12)|0)|0) + 4|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = $154 & $133;
 $156 = $125 | $155;
 $157 = (((33828736 + (($sq*1536)|0)|0) + (($148*12)|0)|0) + 8|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = $158 & $135;
 $160 = $129 | $159;
 $161 = (($ptree) + 188|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = (34160208 + (($sq*12)|0)|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = $164 & $162;
 $166 = $165 | $131;
 $167 = (($ptree) + 192|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = ((34160208 + (($sq*12)|0)|0) + 4|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = $170 & $168;
 $172 = $171 | $133;
 $173 = (($ptree) + 196|0);
 $174 = HEAP32[$173>>2]|0;
 $175 = ((34160208 + (($sq*12)|0)|0) + 8|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = $176 & $174;
 $178 = $177 | $135;
 $179 = ((33572424 + ($sq<<3)|0) + 2|0);
 $180 = HEAP8[$179>>0]|0;
 $181 = $180&255;
 $182 = ((($ptree) + ($181<<2)|0) + 32|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = ((33572424 + ($sq<<3)|0) + 3|0);
 $185 = HEAP8[$184>>0]|0;
 $186 = $185&255;
 $187 = $183 >>> $186;
 $188 = $187 & 127;
 $189 = ((33953152 + (($sq*1536)|0)|0) + (($188*12)|0)|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = $190 & $166;
 $192 = $152 | $191;
 $193 = (((33953152 + (($sq*1536)|0)|0) + (($188*12)|0)|0) + 4|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = $194 & $172;
 $196 = $156 | $195;
 $197 = (((33953152 + (($sq*1536)|0)|0) + (($188*12)|0)|0) + 8|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = $198 & $178;
 $200 = $160 | $199;
 HEAP32[$agg$result>>2] = $192;
 $201 = (($agg$result) + 4|0);
 HEAP32[$201>>2] = $196;
 $202 = (($agg$result) + 8|0);
 HEAP32[$202>>2] = $200;
 STACKTOP = sp;return;
}
function _w_attacks_to_piece($agg$result,$ptree,$sq) {
 $agg$result = $agg$result|0;
 $ptree = $ptree|0;
 $sq = $sq|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $bb_ret$sroa$0$0 = 0, $bb_ret$sroa$1$0 = 0, $bb_ret$sroa$2$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($sq|0)>(8);
 if ($0) {
  $1 = (($sq) + -9)|0;
  $2 = ((($ptree) + ($1)|0) + 512|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(-1);
  if ($4) {
   $5 = (34156304 + (($1*12)|0)|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((34156304 + (($1*12)|0)|0) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((34156304 + (($1*12)|0)|0) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $bb_ret$sroa$0$0 = $6;$bb_ret$sroa$1$0 = $8;$bb_ret$sroa$2$0 = $10;
  } else {
   $bb_ret$sroa$0$0 = 0;$bb_ret$sroa$1$0 = 0;$bb_ret$sroa$2$0 = 0;
  }
 } else {
  $bb_ret$sroa$0$0 = 0;$bb_ret$sroa$1$0 = 0;$bb_ret$sroa$2$0 = 0;
 }
 $11 = (($ptree) + 224|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (33573072 + (($sq*12)|0)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & $12;
 $16 = $15 | $bb_ret$sroa$0$0;
 $17 = (($ptree) + 228|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((33573072 + (($sq*12)|0)|0) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 & $18;
 $22 = $21 | $bb_ret$sroa$1$0;
 $23 = (($ptree) + 232|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((33573072 + (($sq*12)|0)|0) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 & $24;
 $28 = $27 | $bb_ret$sroa$2$0;
 $29 = (($ptree) + 248|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (33574048 + (($sq*12)|0)|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 & $30;
 $34 = $16 | $33;
 $35 = (($ptree) + 252|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((33574048 + (($sq*12)|0)|0) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 & $36;
 $40 = $22 | $39;
 $41 = (($ptree) + 256|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((33574048 + (($sq*12)|0)|0) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $44 & $42;
 $46 = $28 | $45;
 $47 = (($ptree) + 104|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (33575024 + (($sq*12)|0)|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $50 & $48;
 $52 = $34 | $51;
 $53 = (($ptree) + 108|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((33575024 + (($sq*12)|0)|0) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $56 & $54;
 $58 = $40 | $57;
 $59 = (($ptree) + 112|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((33575024 + (($sq*12)|0)|0) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62 & $60;
 $64 = $46 | $63;
 $65 = (($ptree) + 80|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (33578928 + (($sq*12)|0)|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $68 & $66;
 $70 = $52 | $69;
 $71 = (($ptree) + 84|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ((33578928 + (($sq*12)|0)|0) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $74 & $72;
 $76 = $58 | $75;
 $77 = (($ptree) + 88|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ((33578928 + (($sq*12)|0)|0) + 8|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $80 & $78;
 $82 = $64 | $81;
 $83 = ((33572424 + ($sq<<3)|0) + 6|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = $84&255;
 $86 = ((($ptree) + ($85<<2)|0) + 56|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ((33572424 + ($sq<<3)|0) + 7|0);
 $89 = HEAP8[$88>>0]|0;
 $90 = $89&255;
 $91 = $87 >>> $90;
 $92 = $91 & 127;
 $93 = ((33704320 + (($sq*1536)|0)|0) + (($92*12)|0)|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ((33572424 + ($sq<<3)|0) + 4|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = $96&255;
 $98 = ((($ptree) + ($97<<2)|0) + 44|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ((33572424 + ($sq<<3)|0) + 5|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = $99 >>> $102;
 $104 = $103 & 127;
 $105 = ((33579904 + (($sq*1536)|0)|0) + (($104*12)|0)|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $106 | $94;
 $108 = (((33704320 + (($sq*1536)|0)|0) + (($92*12)|0)|0) + 4|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = (((33579904 + (($sq*1536)|0)|0) + (($104*12)|0)|0) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 | $109;
 $113 = (((33704320 + (($sq*1536)|0)|0) + (($92*12)|0)|0) + 8|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (((33579904 + (($sq*1536)|0)|0) + (($104*12)|0)|0) + 8|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $116 | $114;
 $118 = (($ptree) + 128|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = $119 & $107;
 $121 = $70 | $120;
 $122 = (($ptree) + 132|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = $123 & $112;
 $125 = $76 | $124;
 $126 = (($ptree) + 136|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = $127 & $117;
 $129 = $82 | $128;
 $130 = (($ptree) + 152|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (($ptree) + 156|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = (($ptree) + 160|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = (33572424 + ($sq<<3)|0);
 $137 = HEAP8[$136>>0]|0;
 $138 = $137&255;
 $139 = ((($ptree) + ($138<<2)|0) + 8|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ((($ptree) + ($138<<2)|0) + 20|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = $142 | $140;
 $144 = ((33572424 + ($sq<<3)|0) + 1|0);
 $145 = HEAP8[$144>>0]|0;
 $146 = $145&255;
 $147 = $143 >>> $146;
 $148 = $147 & 127;
 $149 = ((33828736 + (($sq*1536)|0)|0) + (($148*12)|0)|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = $150 & $131;
 $152 = $121 | $151;
 $153 = (((33828736 + (($sq*1536)|0)|0) + (($148*12)|0)|0) + 4|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = $154 & $133;
 $156 = $125 | $155;
 $157 = (((33828736 + (($sq*1536)|0)|0) + (($148*12)|0)|0) + 8|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = $158 & $135;
 $160 = $129 | $159;
 $161 = (($ptree) + 200|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = (34161184 + (($sq*12)|0)|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = $164 & $162;
 $166 = $165 | $131;
 $167 = (($ptree) + 204|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = ((34161184 + (($sq*12)|0)|0) + 4|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = $170 & $168;
 $172 = $171 | $133;
 $173 = (($ptree) + 208|0);
 $174 = HEAP32[$173>>2]|0;
 $175 = ((34161184 + (($sq*12)|0)|0) + 8|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = $176 & $174;
 $178 = $177 | $135;
 $179 = ((33572424 + ($sq<<3)|0) + 2|0);
 $180 = HEAP8[$179>>0]|0;
 $181 = $180&255;
 $182 = ((($ptree) + ($181<<2)|0) + 32|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = ((33572424 + ($sq<<3)|0) + 3|0);
 $185 = HEAP8[$184>>0]|0;
 $186 = $185&255;
 $187 = $183 >>> $186;
 $188 = $187 & 127;
 $189 = ((33953152 + (($sq*1536)|0)|0) + (($188*12)|0)|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = $190 & $166;
 $192 = $152 | $191;
 $193 = (((33953152 + (($sq*1536)|0)|0) + (($188*12)|0)|0) + 4|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = $194 & $172;
 $196 = $156 | $195;
 $197 = (((33953152 + (($sq*1536)|0)|0) + (($188*12)|0)|0) + 8|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = $198 & $178;
 $200 = $160 | $199;
 HEAP32[$agg$result>>2] = $192;
 $201 = (($agg$result) + 4|0);
 HEAP32[$201>>2] = $196;
 $202 = (($agg$result) + 8|0);
 HEAP32[$202>>2] = $200;
 STACKTOP = sp;return;
}
function _book_on() {
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1520>>2]|0;
 $1 = (_file_close($0)|0);
 $2 = ($1|0)<(0);
 if ($2) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[200>>2]|0;
 $4 = (_file_open($3,221113344)|0);
 HEAP32[1520>>2] = $4;
 $5 = ($4|0)==(0|0);
 $$ = $5 ? -2 : 1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _book_off() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1520>>2]|0;
 $1 = (_file_close($0)|0);
 $2 = ($1|0)<(0);
 if ($2) {
  $$0 = $1;
 } else {
  HEAP32[1520>>2] = 0;
  $$0 = 1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _book_probe($ptree) {
 $ptree = $ptree|0;
 var $$$$i = 0, $$$i = 0, $$$i2 = 0, $$0 = 0, $$in$i = 0, $$in1$i = 0, $$j$0 = 0, $$lcssa$i = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0.0, $804 = 0.0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0.0, $845 = 0, $846 = 0;
 var $847 = 0.0, $848 = 0.0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0.0, $869 = 0.0, $87 = 0, $870 = 0, $871 = 0.0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0.0;
 var $883 = 0.0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0.0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $abook_move = 0, $drand$06 = 0.0, $exitcond = 0, $exitcond$i = 0, $exitcond$i3 = 0, $exitcond10$i = 0;
 var $exitcond19$i = 0, $i$0$i = 0, $i$0$lcssa = 0, $i$0$lcssa3839 = 0, $i$0$lcssa3841 = 0, $i$012 = 0, $i$014$i = 0, $i$14 = 0, $i$14$i = 0, $i$22$i = 0, $ifile$0$neg$i = 0, $ifile$0$neg5$i = 0, $ifile$04$i = 0, $iflip$0$i = 0, $irank$09$i = 0, $j$0 = 0, $j$0$i = 0, $j$0$lcssa = 0, $j$05 = 0, $j$07 = 0;
 var $j$08$i = 0, $j$09$i = 0, $j$1 = 0, $moves$0 = 0, $moves$04$i = 0, $moves$1 = 0, $norm$03$i = 0, $norm$1$lcssa21$i = 0, $norm$11$i = 0, $p$08$i = 0, $phitmp$i = 0.0, $piece$0$i = 0, $position$i = 0, $s$i = 0, $u$03$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $position$i = sp + 28|0;
 $s$i = sp + 164|0;
 $abook_move = sp + 32|0;
 $0 = HEAP32[34184024>>2]|0;
 $1 = ($0|0)==(0);
 $2 = (($ptree) + 504|0);
 $3 = (($ptree) + 500|0);
 $$in$i = $1 ? $3 : $2;
 $4 = HEAP32[$$in$i>>2]|0;
 $5 = $4 & 31;
 $6 = ($5|0)==(0);
 if ($6) {
  $27 = 0;$29 = 0;
 } else {
  $7 = (($5) + -1)|0;
  $8 = (34171232 + ($7<<3)|0);
  $9 = $8;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) + 4)|0;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $27 = $11;$29 = $14;
 }
 $15 = $4 >>> 5;
 $16 = $15 & 7;
 $17 = ($16|0)==(0);
 if ($17) {
  $42 = $27;$44 = $29;
 } else {
  $18 = (($16) + -1)|0;
  $19 = (34171376 + ($18<<3)|0);
  $20 = $19;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = $22 ^ $27;
  $28 = $25 ^ $29;
  $42 = $26;$44 = $28;
 }
 $30 = $4 >>> 8;
 $31 = $30 & 7;
 $32 = ($31|0)==(0);
 if ($32) {
  $57 = $42;$59 = $44;
 } else {
  $33 = (($31) + -1)|0;
  $34 = (34171408 + ($33<<3)|0);
  $35 = $34;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + 4)|0;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $41 = $37 ^ $42;
  $43 = $40 ^ $44;
  $57 = $41;$59 = $43;
 }
 $45 = $4 >>> 11;
 $46 = $45 & 7;
 $47 = ($46|0)==(0);
 if ($47) {
  $72 = $57;$74 = $59;
 } else {
  $48 = (($46) + -1)|0;
  $49 = (34171440 + ($48<<3)|0);
  $50 = $49;
  $51 = $50;
  $52 = HEAP32[$51>>2]|0;
  $53 = (($50) + 4)|0;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = $52 ^ $57;
  $58 = $55 ^ $59;
  $72 = $56;$74 = $58;
 }
 $60 = $4 >>> 14;
 $61 = $60 & 7;
 $62 = ($61|0)==(0);
 if ($62) {
  $87 = $72;$89 = $74;
 } else {
  $63 = (($61) + -1)|0;
  $64 = (34171472 + ($63<<3)|0);
  $65 = $64;
  $66 = $65;
  $67 = HEAP32[$66>>2]|0;
  $68 = (($65) + 4)|0;
  $69 = $68;
  $70 = HEAP32[$69>>2]|0;
  $71 = $67 ^ $72;
  $73 = $70 ^ $74;
  $87 = $71;$89 = $73;
 }
 $75 = $4 >>> 17;
 $76 = $75 & 3;
 $77 = ($76|0)==(0);
 if ($77) {
  $101 = $87;$103 = $89;
 } else {
  $78 = (($76) + -1)|0;
  $79 = (34171504 + ($78<<3)|0);
  $80 = $79;
  $81 = $80;
  $82 = HEAP32[$81>>2]|0;
  $83 = (($80) + 4)|0;
  $84 = $83;
  $85 = HEAP32[$84>>2]|0;
  $86 = $82 ^ $87;
  $88 = $85 ^ $89;
  $101 = $86;$103 = $88;
 }
 $90 = $4 >>> 19;
 $91 = ($90|0)==(0);
 if ($91) {
  $116 = $101;$118 = $103;
 } else {
  $92 = (($90) + -1)|0;
  $93 = (34171520 + ($92<<3)|0);
  $94 = $93;
  $95 = $94;
  $96 = HEAP32[$95>>2]|0;
  $97 = (($94) + 4)|0;
  $98 = $97;
  $99 = HEAP32[$98>>2]|0;
  $100 = $96 ^ $101;
  $102 = $99 ^ $103;
  $116 = $100;$118 = $102;
 }
 $$in1$i = $1 ? $2 : $3;
 $104 = HEAP32[$$in1$i>>2]|0;
 $105 = $104 & 31;
 $106 = ($105|0)==(0);
 if ($106) {
  $131 = $116;$133 = $118;
 } else {
  $107 = (($105) + -1)|0;
  $108 = (34180608 + ($107<<3)|0);
  $109 = $108;
  $110 = $109;
  $111 = HEAP32[$110>>2]|0;
  $112 = (($109) + 4)|0;
  $113 = $112;
  $114 = HEAP32[$113>>2]|0;
  $115 = $111 ^ $116;
  $117 = $114 ^ $118;
  $131 = $115;$133 = $117;
 }
 $119 = $104 >>> 5;
 $120 = $119 & 7;
 $121 = ($120|0)==(0);
 if ($121) {
  $146 = $131;$148 = $133;
 } else {
  $122 = (($120) + -1)|0;
  $123 = (34180752 + ($122<<3)|0);
  $124 = $123;
  $125 = $124;
  $126 = HEAP32[$125>>2]|0;
  $127 = (($124) + 4)|0;
  $128 = $127;
  $129 = HEAP32[$128>>2]|0;
  $130 = $126 ^ $131;
  $132 = $129 ^ $133;
  $146 = $130;$148 = $132;
 }
 $134 = $104 >>> 8;
 $135 = $134 & 7;
 $136 = ($135|0)==(0);
 if ($136) {
  $161 = $146;$163 = $148;
 } else {
  $137 = (($135) + -1)|0;
  $138 = (34180784 + ($137<<3)|0);
  $139 = $138;
  $140 = $139;
  $141 = HEAP32[$140>>2]|0;
  $142 = (($139) + 4)|0;
  $143 = $142;
  $144 = HEAP32[$143>>2]|0;
  $145 = $141 ^ $146;
  $147 = $144 ^ $148;
  $161 = $145;$163 = $147;
 }
 $149 = $104 >>> 11;
 $150 = $149 & 7;
 $151 = ($150|0)==(0);
 if ($151) {
  $176 = $161;$178 = $163;
 } else {
  $152 = (($150) + -1)|0;
  $153 = (34180816 + ($152<<3)|0);
  $154 = $153;
  $155 = $154;
  $156 = HEAP32[$155>>2]|0;
  $157 = (($154) + 4)|0;
  $158 = $157;
  $159 = HEAP32[$158>>2]|0;
  $160 = $156 ^ $161;
  $162 = $159 ^ $163;
  $176 = $160;$178 = $162;
 }
 $164 = $104 >>> 14;
 $165 = $164 & 7;
 $166 = ($165|0)==(0);
 if ($166) {
  $191 = $176;$193 = $178;
 } else {
  $167 = (($165) + -1)|0;
  $168 = (34180848 + ($167<<3)|0);
  $169 = $168;
  $170 = $169;
  $171 = HEAP32[$170>>2]|0;
  $172 = (($169) + 4)|0;
  $173 = $172;
  $174 = HEAP32[$173>>2]|0;
  $175 = $171 ^ $176;
  $177 = $174 ^ $178;
  $191 = $175;$193 = $177;
 }
 $179 = $104 >>> 17;
 $180 = $179 & 3;
 $181 = ($180|0)==(0);
 if ($181) {
  $205 = $191;$207 = $193;
 } else {
  $182 = (($180) + -1)|0;
  $183 = (34180880 + ($182<<3)|0);
  $184 = $183;
  $185 = $184;
  $186 = HEAP32[$185>>2]|0;
  $187 = (($184) + 4)|0;
  $188 = $187;
  $189 = HEAP32[$188>>2]|0;
  $190 = $186 ^ $191;
  $192 = $189 ^ $193;
  $205 = $190;$207 = $192;
 }
 $194 = $104 >>> 19;
 $195 = ($194|0)==(0);
 if ($195) {
  $901 = $205;$902 = $207;$903 = $205;$904 = $207;$irank$09$i = 0;
 } else {
  $196 = (($194) + -1)|0;
  $197 = (34180896 + ($196<<3)|0);
  $198 = $197;
  $199 = $198;
  $200 = HEAP32[$199>>2]|0;
  $201 = (($198) + 4)|0;
  $202 = $201;
  $203 = HEAP32[$202>>2]|0;
  $204 = $200 ^ $205;
  $206 = $203 ^ $207;
  $901 = $204;$902 = $206;$903 = $204;$904 = $206;$irank$09$i = 0;
 }
 while(1) {
  $208 = ($irank$09$i*9)|0;
  $209 = (($208) + 8)|0;
  $210 = (8 - ($irank$09$i))|0;
  $211 = ($210*9)|0;
  $212 = (($211) + 8)|0;
  $233 = $903;$235 = $904;$244 = $901;$246 = $902;$ifile$0$neg5$i = 0;$ifile$04$i = 0;
  while(1) {
   if ($1) {
    $220 = (($ifile$04$i) + ($208))|0;
    $221 = (($209) + ($ifile$0$neg5$i))|0;
    $222 = ((($ptree) + ($220)|0) + 512|0);
    $223 = HEAP8[$222>>0]|0;
    $224 = $223 << 24 >> 24;
    $i$0$i = $220;$iflip$0$i = $221;$piece$0$i = $224;
   } else {
    $213 = (($212) + ($ifile$0$neg5$i))|0;
    $214 = (($ifile$04$i) + ($211))|0;
    $215 = (80 - ($213))|0;
    $216 = ((($ptree) + ($215)|0) + 512|0);
    $217 = HEAP8[$216>>0]|0;
    $218 = $217 << 24 >> 24;
    $219 = (0 - ($218))|0;
    $i$0$i = $213;$iflip$0$i = $214;$piece$0$i = $219;
   }
   do {
    switch ($piece$0$i|0) {
    case 11:  {
     $409 = (34168640 + ($i$0$i<<3)|0);
     $410 = $409;
     $411 = $410;
     $412 = HEAP32[$411>>2]|0;
     $413 = (($410) + 4)|0;
     $414 = $413;
     $415 = HEAP32[$414>>2]|0;
     $416 = $412 ^ $233;
     $417 = $415 ^ $235;
     $418 = (34168640 + ($iflip$0$i<<3)|0);
     $419 = $418;
     $420 = $419;
     $421 = HEAP32[$420>>2]|0;
     $422 = (($419) + 4)|0;
     $423 = $422;
     $424 = HEAP32[$423>>2]|0;
     $425 = $421 ^ $244;
     $426 = $424 ^ $246;
     $736 = $417;$737 = $426;$740 = $416;$741 = $425;
     break;
    }
    case 12:  {
     $427 = (34169288 + ($i$0$i<<3)|0);
     $428 = $427;
     $429 = $428;
     $430 = HEAP32[$429>>2]|0;
     $431 = (($428) + 4)|0;
     $432 = $431;
     $433 = HEAP32[$432>>2]|0;
     $434 = $430 ^ $233;
     $435 = $433 ^ $235;
     $436 = (34169288 + ($iflip$0$i<<3)|0);
     $437 = $436;
     $438 = $437;
     $439 = HEAP32[$438>>2]|0;
     $440 = (($437) + 4)|0;
     $441 = $440;
     $442 = HEAP32[$441>>2]|0;
     $443 = $439 ^ $244;
     $444 = $442 ^ $246;
     $736 = $435;$737 = $444;$740 = $434;$741 = $443;
     break;
    }
    case 14:  {
     $445 = (34169936 + ($i$0$i<<3)|0);
     $446 = $445;
     $447 = $446;
     $448 = HEAP32[$447>>2]|0;
     $449 = (($446) + 4)|0;
     $450 = $449;
     $451 = HEAP32[$450>>2]|0;
     $452 = $448 ^ $233;
     $453 = $451 ^ $235;
     $454 = (34169936 + ($iflip$0$i<<3)|0);
     $455 = $454;
     $456 = $455;
     $457 = HEAP32[$456>>2]|0;
     $458 = (($455) + 4)|0;
     $459 = $458;
     $460 = HEAP32[$459>>2]|0;
     $461 = $457 ^ $244;
     $462 = $460 ^ $246;
     $736 = $453;$737 = $462;$740 = $452;$741 = $461;
     break;
    }
    case 15:  {
     $463 = (34170584 + ($i$0$i<<3)|0);
     $464 = $463;
     $465 = $464;
     $466 = HEAP32[$465>>2]|0;
     $467 = (($464) + 4)|0;
     $468 = $467;
     $469 = HEAP32[$468>>2]|0;
     $470 = $466 ^ $233;
     $471 = $469 ^ $235;
     $472 = (34170584 + ($iflip$0$i<<3)|0);
     $473 = $472;
     $474 = $473;
     $475 = HEAP32[$474>>2]|0;
     $476 = (($473) + 4)|0;
     $477 = $476;
     $478 = HEAP32[$477>>2]|0;
     $479 = $475 ^ $244;
     $480 = $478 ^ $246;
     $736 = $471;$737 = $480;$740 = $470;$741 = $479;
     break;
    }
    case -1:  {
     $481 = (34171536 + ($i$0$i<<3)|0);
     $482 = $481;
     $483 = $482;
     $484 = HEAP32[$483>>2]|0;
     $485 = (($482) + 4)|0;
     $486 = $485;
     $487 = HEAP32[$486>>2]|0;
     $488 = $484 ^ $233;
     $489 = $487 ^ $235;
     $490 = (34171536 + ($iflip$0$i<<3)|0);
     $491 = $490;
     $492 = $491;
     $493 = HEAP32[$492>>2]|0;
     $494 = (($491) + 4)|0;
     $495 = $494;
     $496 = HEAP32[$495>>2]|0;
     $497 = $493 ^ $244;
     $498 = $496 ^ $246;
     $736 = $489;$737 = $498;$740 = $488;$741 = $497;
     break;
    }
    case -2:  {
     $499 = (34172184 + ($i$0$i<<3)|0);
     $500 = $499;
     $501 = $500;
     $502 = HEAP32[$501>>2]|0;
     $503 = (($500) + 4)|0;
     $504 = $503;
     $505 = HEAP32[$504>>2]|0;
     $506 = $502 ^ $233;
     $507 = $505 ^ $235;
     $508 = (34172184 + ($iflip$0$i<<3)|0);
     $509 = $508;
     $510 = $509;
     $511 = HEAP32[$510>>2]|0;
     $512 = (($509) + 4)|0;
     $513 = $512;
     $514 = HEAP32[$513>>2]|0;
     $515 = $511 ^ $244;
     $516 = $514 ^ $246;
     $736 = $507;$737 = $516;$740 = $506;$741 = $515;
     break;
    }
    case -3:  {
     $517 = (34172832 + ($i$0$i<<3)|0);
     $518 = $517;
     $519 = $518;
     $520 = HEAP32[$519>>2]|0;
     $521 = (($518) + 4)|0;
     $522 = $521;
     $523 = HEAP32[$522>>2]|0;
     $524 = $520 ^ $233;
     $525 = $523 ^ $235;
     $526 = (34172832 + ($iflip$0$i<<3)|0);
     $527 = $526;
     $528 = $527;
     $529 = HEAP32[$528>>2]|0;
     $530 = (($527) + 4)|0;
     $531 = $530;
     $532 = HEAP32[$531>>2]|0;
     $533 = $529 ^ $244;
     $534 = $532 ^ $246;
     $736 = $525;$737 = $534;$740 = $524;$741 = $533;
     break;
    }
    case -4:  {
     $535 = (34173480 + ($i$0$i<<3)|0);
     $536 = $535;
     $537 = $536;
     $538 = HEAP32[$537>>2]|0;
     $539 = (($536) + 4)|0;
     $540 = $539;
     $541 = HEAP32[$540>>2]|0;
     $542 = $538 ^ $233;
     $543 = $541 ^ $235;
     $544 = (34173480 + ($iflip$0$i<<3)|0);
     $545 = $544;
     $546 = $545;
     $547 = HEAP32[$546>>2]|0;
     $548 = (($545) + 4)|0;
     $549 = $548;
     $550 = HEAP32[$549>>2]|0;
     $551 = $547 ^ $244;
     $552 = $550 ^ $246;
     $736 = $543;$737 = $552;$740 = $542;$741 = $551;
     break;
    }
    case -5:  {
     $553 = (34174128 + ($i$0$i<<3)|0);
     $554 = $553;
     $555 = $554;
     $556 = HEAP32[$555>>2]|0;
     $557 = (($554) + 4)|0;
     $558 = $557;
     $559 = HEAP32[$558>>2]|0;
     $560 = $556 ^ $233;
     $561 = $559 ^ $235;
     $562 = (34174128 + ($iflip$0$i<<3)|0);
     $563 = $562;
     $564 = $563;
     $565 = HEAP32[$564>>2]|0;
     $566 = (($563) + 4)|0;
     $567 = $566;
     $568 = HEAP32[$567>>2]|0;
     $569 = $565 ^ $244;
     $570 = $568 ^ $246;
     $736 = $561;$737 = $570;$740 = $560;$741 = $569;
     break;
    }
    case -6:  {
     $571 = (34174776 + ($i$0$i<<3)|0);
     $572 = $571;
     $573 = $572;
     $574 = HEAP32[$573>>2]|0;
     $575 = (($572) + 4)|0;
     $576 = $575;
     $577 = HEAP32[$576>>2]|0;
     $578 = $574 ^ $233;
     $579 = $577 ^ $235;
     $580 = (34174776 + ($iflip$0$i<<3)|0);
     $581 = $580;
     $582 = $581;
     $583 = HEAP32[$582>>2]|0;
     $584 = (($581) + 4)|0;
     $585 = $584;
     $586 = HEAP32[$585>>2]|0;
     $587 = $583 ^ $244;
     $588 = $586 ^ $246;
     $736 = $579;$737 = $588;$740 = $578;$741 = $587;
     break;
    }
    case -7:  {
     $589 = (34175424 + ($i$0$i<<3)|0);
     $590 = $589;
     $591 = $590;
     $592 = HEAP32[$591>>2]|0;
     $593 = (($590) + 4)|0;
     $594 = $593;
     $595 = HEAP32[$594>>2]|0;
     $596 = $592 ^ $233;
     $597 = $595 ^ $235;
     $598 = (34175424 + ($iflip$0$i<<3)|0);
     $599 = $598;
     $600 = $599;
     $601 = HEAP32[$600>>2]|0;
     $602 = (($599) + 4)|0;
     $603 = $602;
     $604 = HEAP32[$603>>2]|0;
     $605 = $601 ^ $244;
     $606 = $604 ^ $246;
     $736 = $597;$737 = $606;$740 = $596;$741 = $605;
     break;
    }
    case -8:  {
     $607 = (34176072 + ($i$0$i<<3)|0);
     $608 = $607;
     $609 = $608;
     $610 = HEAP32[$609>>2]|0;
     $611 = (($608) + 4)|0;
     $612 = $611;
     $613 = HEAP32[$612>>2]|0;
     $614 = $610 ^ $233;
     $615 = $613 ^ $235;
     $616 = (34176072 + ($iflip$0$i<<3)|0);
     $617 = $616;
     $618 = $617;
     $619 = HEAP32[$618>>2]|0;
     $620 = (($617) + 4)|0;
     $621 = $620;
     $622 = HEAP32[$621>>2]|0;
     $623 = $619 ^ $244;
     $624 = $622 ^ $246;
     $736 = $615;$737 = $624;$740 = $614;$741 = $623;
     break;
    }
    case -9:  {
     $625 = (34176720 + ($i$0$i<<3)|0);
     $626 = $625;
     $627 = $626;
     $628 = HEAP32[$627>>2]|0;
     $629 = (($626) + 4)|0;
     $630 = $629;
     $631 = HEAP32[$630>>2]|0;
     $632 = $628 ^ $233;
     $633 = $631 ^ $235;
     $634 = (34176720 + ($iflip$0$i<<3)|0);
     $635 = $634;
     $636 = $635;
     $637 = HEAP32[$636>>2]|0;
     $638 = (($635) + 4)|0;
     $639 = $638;
     $640 = HEAP32[$639>>2]|0;
     $641 = $637 ^ $244;
     $642 = $640 ^ $246;
     $736 = $633;$737 = $642;$740 = $632;$741 = $641;
     break;
    }
    case -10:  {
     $643 = (34177368 + ($i$0$i<<3)|0);
     $644 = $643;
     $645 = $644;
     $646 = HEAP32[$645>>2]|0;
     $647 = (($644) + 4)|0;
     $648 = $647;
     $649 = HEAP32[$648>>2]|0;
     $650 = $646 ^ $233;
     $651 = $649 ^ $235;
     $652 = (34177368 + ($iflip$0$i<<3)|0);
     $653 = $652;
     $654 = $653;
     $655 = HEAP32[$654>>2]|0;
     $656 = (($653) + 4)|0;
     $657 = $656;
     $658 = HEAP32[$657>>2]|0;
     $659 = $655 ^ $244;
     $660 = $658 ^ $246;
     $736 = $651;$737 = $660;$740 = $650;$741 = $659;
     break;
    }
    case -11:  {
     $661 = (34178016 + ($i$0$i<<3)|0);
     $662 = $661;
     $663 = $662;
     $664 = HEAP32[$663>>2]|0;
     $665 = (($662) + 4)|0;
     $666 = $665;
     $667 = HEAP32[$666>>2]|0;
     $668 = $664 ^ $233;
     $669 = $667 ^ $235;
     $670 = (34178016 + ($iflip$0$i<<3)|0);
     $671 = $670;
     $672 = $671;
     $673 = HEAP32[$672>>2]|0;
     $674 = (($671) + 4)|0;
     $675 = $674;
     $676 = HEAP32[$675>>2]|0;
     $677 = $673 ^ $244;
     $678 = $676 ^ $246;
     $736 = $669;$737 = $678;$740 = $668;$741 = $677;
     break;
    }
    case -12:  {
     $679 = (34178664 + ($i$0$i<<3)|0);
     $680 = $679;
     $681 = $680;
     $682 = HEAP32[$681>>2]|0;
     $683 = (($680) + 4)|0;
     $684 = $683;
     $685 = HEAP32[$684>>2]|0;
     $686 = $682 ^ $233;
     $687 = $685 ^ $235;
     $688 = (34178664 + ($iflip$0$i<<3)|0);
     $689 = $688;
     $690 = $689;
     $691 = HEAP32[$690>>2]|0;
     $692 = (($689) + 4)|0;
     $693 = $692;
     $694 = HEAP32[$693>>2]|0;
     $695 = $691 ^ $244;
     $696 = $694 ^ $246;
     $736 = $687;$737 = $696;$740 = $686;$741 = $695;
     break;
    }
    case -14:  {
     $697 = (34179312 + ($i$0$i<<3)|0);
     $698 = $697;
     $699 = $698;
     $700 = HEAP32[$699>>2]|0;
     $701 = (($698) + 4)|0;
     $702 = $701;
     $703 = HEAP32[$702>>2]|0;
     $704 = $700 ^ $233;
     $705 = $703 ^ $235;
     $706 = (34179312 + ($iflip$0$i<<3)|0);
     $707 = $706;
     $708 = $707;
     $709 = HEAP32[$708>>2]|0;
     $710 = (($707) + 4)|0;
     $711 = $710;
     $712 = HEAP32[$711>>2]|0;
     $713 = $709 ^ $244;
     $714 = $712 ^ $246;
     $736 = $705;$737 = $714;$740 = $704;$741 = $713;
     break;
    }
    case -15:  {
     $715 = (34179960 + ($i$0$i<<3)|0);
     $716 = $715;
     $717 = $716;
     $718 = HEAP32[$717>>2]|0;
     $719 = (($716) + 4)|0;
     $720 = $719;
     $721 = HEAP32[$720>>2]|0;
     $722 = $718 ^ $233;
     $723 = $721 ^ $235;
     $724 = (34179960 + ($iflip$0$i<<3)|0);
     $725 = $724;
     $726 = $725;
     $727 = HEAP32[$726>>2]|0;
     $728 = (($725) + 4)|0;
     $729 = $728;
     $730 = HEAP32[$729>>2]|0;
     $731 = $727 ^ $244;
     $732 = $730 ^ $246;
     $736 = $723;$737 = $732;$740 = $722;$741 = $731;
     break;
    }
    case 8:  {
     $355 = (34166696 + ($i$0$i<<3)|0);
     $356 = $355;
     $357 = $356;
     $358 = HEAP32[$357>>2]|0;
     $359 = (($356) + 4)|0;
     $360 = $359;
     $361 = HEAP32[$360>>2]|0;
     $362 = $358 ^ $233;
     $363 = $361 ^ $235;
     $364 = (34166696 + ($iflip$0$i<<3)|0);
     $365 = $364;
     $366 = $365;
     $367 = HEAP32[$366>>2]|0;
     $368 = (($365) + 4)|0;
     $369 = $368;
     $370 = HEAP32[$369>>2]|0;
     $371 = $367 ^ $244;
     $372 = $370 ^ $246;
     $736 = $363;$737 = $372;$740 = $362;$741 = $371;
     break;
    }
    case 9:  {
     $373 = (34167344 + ($i$0$i<<3)|0);
     $374 = $373;
     $375 = $374;
     $376 = HEAP32[$375>>2]|0;
     $377 = (($374) + 4)|0;
     $378 = $377;
     $379 = HEAP32[$378>>2]|0;
     $380 = $376 ^ $233;
     $381 = $379 ^ $235;
     $382 = (34167344 + ($iflip$0$i<<3)|0);
     $383 = $382;
     $384 = $383;
     $385 = HEAP32[$384>>2]|0;
     $386 = (($383) + 4)|0;
     $387 = $386;
     $388 = HEAP32[$387>>2]|0;
     $389 = $385 ^ $244;
     $390 = $388 ^ $246;
     $736 = $381;$737 = $390;$740 = $380;$741 = $389;
     break;
    }
    case 10:  {
     $391 = (34167992 + ($i$0$i<<3)|0);
     $392 = $391;
     $393 = $392;
     $394 = HEAP32[$393>>2]|0;
     $395 = (($392) + 4)|0;
     $396 = $395;
     $397 = HEAP32[$396>>2]|0;
     $398 = $394 ^ $233;
     $399 = $397 ^ $235;
     $400 = (34167992 + ($iflip$0$i<<3)|0);
     $401 = $400;
     $402 = $401;
     $403 = HEAP32[$402>>2]|0;
     $404 = (($401) + 4)|0;
     $405 = $404;
     $406 = HEAP32[$405>>2]|0;
     $407 = $403 ^ $244;
     $408 = $406 ^ $246;
     $736 = $399;$737 = $408;$740 = $398;$741 = $407;
     break;
    }
    case 6:  {
     $319 = (34165400 + ($i$0$i<<3)|0);
     $320 = $319;
     $321 = $320;
     $322 = HEAP32[$321>>2]|0;
     $323 = (($320) + 4)|0;
     $324 = $323;
     $325 = HEAP32[$324>>2]|0;
     $326 = $322 ^ $233;
     $327 = $325 ^ $235;
     $328 = (34165400 + ($iflip$0$i<<3)|0);
     $329 = $328;
     $330 = $329;
     $331 = HEAP32[$330>>2]|0;
     $332 = (($329) + 4)|0;
     $333 = $332;
     $334 = HEAP32[$333>>2]|0;
     $335 = $331 ^ $244;
     $336 = $334 ^ $246;
     $736 = $327;$737 = $336;$740 = $326;$741 = $335;
     break;
    }
    case 7:  {
     $337 = (34166048 + ($i$0$i<<3)|0);
     $338 = $337;
     $339 = $338;
     $340 = HEAP32[$339>>2]|0;
     $341 = (($338) + 4)|0;
     $342 = $341;
     $343 = HEAP32[$342>>2]|0;
     $344 = $340 ^ $233;
     $345 = $343 ^ $235;
     $346 = (34166048 + ($iflip$0$i<<3)|0);
     $347 = $346;
     $348 = $347;
     $349 = HEAP32[$348>>2]|0;
     $350 = (($347) + 4)|0;
     $351 = $350;
     $352 = HEAP32[$351>>2]|0;
     $353 = $349 ^ $244;
     $354 = $352 ^ $246;
     $736 = $345;$737 = $354;$740 = $344;$741 = $353;
     break;
    }
    case 3:  {
     $265 = (34163456 + ($i$0$i<<3)|0);
     $266 = $265;
     $267 = $266;
     $268 = HEAP32[$267>>2]|0;
     $269 = (($266) + 4)|0;
     $270 = $269;
     $271 = HEAP32[$270>>2]|0;
     $272 = $268 ^ $233;
     $273 = $271 ^ $235;
     $274 = (34163456 + ($iflip$0$i<<3)|0);
     $275 = $274;
     $276 = $275;
     $277 = HEAP32[$276>>2]|0;
     $278 = (($275) + 4)|0;
     $279 = $278;
     $280 = HEAP32[$279>>2]|0;
     $281 = $277 ^ $244;
     $282 = $280 ^ $246;
     $736 = $273;$737 = $282;$740 = $272;$741 = $281;
     break;
    }
    case 4:  {
     $283 = (34164104 + ($i$0$i<<3)|0);
     $284 = $283;
     $285 = $284;
     $286 = HEAP32[$285>>2]|0;
     $287 = (($284) + 4)|0;
     $288 = $287;
     $289 = HEAP32[$288>>2]|0;
     $290 = $286 ^ $233;
     $291 = $289 ^ $235;
     $292 = (34164104 + ($iflip$0$i<<3)|0);
     $293 = $292;
     $294 = $293;
     $295 = HEAP32[$294>>2]|0;
     $296 = (($293) + 4)|0;
     $297 = $296;
     $298 = HEAP32[$297>>2]|0;
     $299 = $295 ^ $244;
     $300 = $298 ^ $246;
     $736 = $291;$737 = $300;$740 = $290;$741 = $299;
     break;
    }
    case 5:  {
     $301 = (34164752 + ($i$0$i<<3)|0);
     $302 = $301;
     $303 = $302;
     $304 = HEAP32[$303>>2]|0;
     $305 = (($302) + 4)|0;
     $306 = $305;
     $307 = HEAP32[$306>>2]|0;
     $308 = $304 ^ $233;
     $309 = $307 ^ $235;
     $310 = (34164752 + ($iflip$0$i<<3)|0);
     $311 = $310;
     $312 = $311;
     $313 = HEAP32[$312>>2]|0;
     $314 = (($311) + 4)|0;
     $315 = $314;
     $316 = HEAP32[$315>>2]|0;
     $317 = $313 ^ $244;
     $318 = $316 ^ $246;
     $736 = $309;$737 = $318;$740 = $308;$741 = $317;
     break;
    }
    case 1:  {
     $225 = (34162160 + ($i$0$i<<3)|0);
     $226 = $225;
     $227 = $226;
     $228 = HEAP32[$227>>2]|0;
     $229 = (($226) + 4)|0;
     $230 = $229;
     $231 = HEAP32[$230>>2]|0;
     $232 = $228 ^ $233;
     $234 = $231 ^ $235;
     $236 = (34162160 + ($iflip$0$i<<3)|0);
     $237 = $236;
     $238 = $237;
     $239 = HEAP32[$238>>2]|0;
     $240 = (($237) + 4)|0;
     $241 = $240;
     $242 = HEAP32[$241>>2]|0;
     $243 = $239 ^ $244;
     $245 = $242 ^ $246;
     $736 = $234;$737 = $245;$740 = $232;$741 = $243;
     break;
    }
    case 2:  {
     $247 = (34162808 + ($i$0$i<<3)|0);
     $248 = $247;
     $249 = $248;
     $250 = HEAP32[$249>>2]|0;
     $251 = (($248) + 4)|0;
     $252 = $251;
     $253 = HEAP32[$252>>2]|0;
     $254 = $250 ^ $233;
     $255 = $253 ^ $235;
     $256 = (34162808 + ($iflip$0$i<<3)|0);
     $257 = $256;
     $258 = $257;
     $259 = HEAP32[$258>>2]|0;
     $260 = (($257) + 4)|0;
     $261 = $260;
     $262 = HEAP32[$261>>2]|0;
     $263 = $259 ^ $244;
     $264 = $262 ^ $246;
     $736 = $255;$737 = $264;$740 = $254;$741 = $263;
     break;
    }
    default: {
     $736 = $235;$737 = $246;$740 = $233;$741 = $244;
    }
    }
   } while(0);
   $733 = (($ifile$04$i) + 1)|0;
   $ifile$0$neg$i = $ifile$04$i ^ -1;
   $exitcond$i = ($733|0)==(9);
   if ($exitcond$i) {
    break;
   } else {
    $233 = $740;$235 = $736;$244 = $741;$246 = $737;$ifile$0$neg5$i = $ifile$0$neg$i;$ifile$04$i = $733;
   }
  }
  $734 = (($irank$09$i) + 1)|0;
  $exitcond10$i = ($734|0)==(9);
  if ($exitcond10$i) {
   break;
  } else {
   $901 = $741;$902 = $737;$903 = $740;$904 = $736;$irank$09$i = $734;
  }
 }
 $735 = ($736>>>0)>($737>>>0);
 $738 = ($736|0)==($737|0);
 $739 = ($740>>>0)>($741>>>0);
 $742 = $738 & $739;
 $743 = $735 | $742;
 $$$i = $743&1;
 $744 = $743 ? $741 : $740;
 $745 = $743 ? $737 : $736;
 $746 = $744 & 16383;
 $747 = HEAP32[1520>>2]|0;
 $748 = ($746*6)|0;
 $749 = (_fseek(($747|0),($748|0),0)|0);
 $750 = ($749|0)==(-1);
 if ($750) {
  $751 = HEAP32[240>>2]|0;
  HEAP32[220526664>>2] = $751;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $752 = HEAP32[1520>>2]|0;
 $753 = (_fread(($position$i|0),4,1,($752|0))|0);
 $754 = ($753|0)==(1);
 if (!($754)) {
  $755 = HEAP32[240>>2]|0;
  HEAP32[220526664>>2] = $755;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $756 = HEAP32[1520>>2]|0;
 $757 = (_fread(($s$i|0),2,1,($756|0))|0);
 $758 = ($757|0)==(1);
 if (!($758)) {
  $759 = HEAP32[240>>2]|0;
  HEAP32[220526664>>2] = $759;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $760 = HEAP16[$s$i>>1]|0;
 $761 = $760&65535;
 $762 = HEAP32[1520>>2]|0;
 $763 = HEAP32[$position$i>>2]|0;
 $764 = (_fseek(($762|0),($763|0),0)|0);
 $765 = ($764|0)==(-1);
 if ($765) {
  $766 = HEAP32[240>>2]|0;
  HEAP32[220526664>>2] = $766;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $767 = HEAP32[1520>>2]|0;
 $768 = (_fread((220452768|0),1,($761|0),($767|0))|0);
 $769 = ($768|0)==($761|0);
 if (!($769)) {
  $770 = HEAP32[240>>2]|0;
  HEAP32[220526664>>2] = $770;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $771 = (220452768 + ($761)|0);
 $772 = ($760<<16>>16)==(0);
 if ($772) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $p$08$i = 220452768;
 }
 while(1) {
  $773 = HEAP8[$p$08$i>>0]|0;
  $774 = $773&255;
  $775 = (($p$08$i) + 1|0);
  $776 = $775;
  $777 = $776;
  $778 = HEAP32[$777>>2]|0;
  $779 = (($776) + 4)|0;
  $780 = $779;
  $781 = HEAP32[$780>>2]|0;
  $782 = ($778|0)==($744|0);
  $783 = ($781|0)==($745|0);
  $784 = $782 & $783;
  if ($784) {
   break;
  }
  $786 = (($p$08$i) + ($774)|0);
  $787 = ($771>>>0)>($786>>>0);
  if ($787) {
   $p$08$i = $786;
  } else {
   $$0 = 0;
   label = 109;
   break;
  }
 }
 if ((label|0) == 109) {
  STACKTOP = sp;return ($$0|0);
 }
 $785 = ($773&255)>(9);
 if ($785) {
  $moves$04$i = 0;$u$03$i = 9;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $788 = (($p$08$i) + ($u$03$i)|0);
  $789 = HEAP16[$788>>1]|0;
  $790 = (($abook_move) + ($moves$04$i<<2)|0);
  HEAP16[$790>>1] = $789;
  $$sum$i = (($u$03$i) + 2)|0;
  $791 = (($p$08$i) + ($$sum$i)|0);
  $792 = HEAP16[$791>>1]|0;
  $793 = ((($abook_move) + ($moves$04$i<<2)|0) + 2|0);
  HEAP16[$793>>1] = $792;
  $794 = (($moves$04$i) + 1)|0;
  $795 = (($u$03$i) + 4)|0;
  $796 = ($795>>>0)<($774>>>0);
  if ($796) {
   $moves$04$i = $794;$u$03$i = $795;
  } else {
   break;
  }
 }
 $797 = ($moves$04$i|0)<(0);
 if ($797) {
  $$0 = $794;
  STACKTOP = sp;return ($$0|0);
 }
 $798 = HEAP32[34180920>>2]|0;
 $799 = $798 & 32;
 $800 = ($799|0)==(0);
 if ($800) {
  $801 = (_rand64()|0);
  $802 = tempRet0;
  $803 = (+($801>>>0)) + (4294967296.0*(+($802>>>0)));
  $804 = $803 * 5.4210108624275222E-20;
  $805 = HEAP32[34180920>>2]|0;
  $806 = $805 & 32768;
  $807 = ($806|0)==(0);
  L120: do {
   if ($807) {
    $moves$0 = $794;
   } else {
    $808 = (($abook_move) + 2|0);
    $809 = HEAP16[$808>>1]|0;
    $810 = $809&65535;
    $811 = $810 >>> 1;
    $812 = ($moves$04$i|0)>(0);
    do {
     if ($812) {
      $i$012 = 1;
      while(1) {
       $816 = ((($abook_move) + ($i$012<<2)|0) + 2|0);
       $817 = HEAP16[$816>>1]|0;
       $818 = $817&65535;
       $819 = ($818>>>0)<($811>>>0);
       $815 = (($i$012) + 1)|0;
       if ($819) {
        $i$0$lcssa = $i$012;
        break;
       }
       $814 = ($815|0)<($794|0);
       if ($814) {
        $i$012 = $815;
       } else {
        $i$0$lcssa = $815;
        break;
       }
      }
      $820 = ((($abook_move) + ($i$0$lcssa<<2)|0) + 2|0);
      HEAP16[$820>>1] = 0;
      $821 = (($i$0$lcssa) + -2)|0;
      $822 = ($821|0)>(-1);
      if ($822) {
       $i$014$i = $821;
       while(1) {
        $824 = (($abook_move) + ($i$014$i<<2)|0);
        $825 = ((($abook_move) + ($i$014$i<<2)|0) + 2|0);
        $826 = HEAP16[$825>>1]|0;
        $827 = HEAPU16[$824>>1]|(HEAPU16[$824+2>>1]<<16);
        $j$08$i = (($i$014$i) + 1)|0;
        $828 = ((($abook_move) + ($j$08$i<<2)|0) + 2|0);
        $829 = HEAP16[$828>>1]|0;
        $830 = ($829&65535)>($826&65535);
        if ($830) {
         $833 = $824;$j$09$i = $j$08$i;
         while(1) {
          $831 = (($abook_move) + ($j$09$i<<2)|0);
          $832 = HEAPU16[$831>>1]|(HEAPU16[$831+2>>1]<<16);
          HEAP16[$833>>1]=$832&65535;HEAP16[$833+2>>1]=$832>>>16;
          $j$0$i = (($j$09$i) + 1)|0;
          $834 = ((($abook_move) + ($j$0$i<<2)|0) + 2|0);
          $835 = HEAP16[$834>>1]|0;
          $836 = ($835&65535)>($826&65535);
          if ($836) {
           $833 = $831;$j$09$i = $j$0$i;
          } else {
           $$lcssa$i = $831;
           break;
          }
         }
        } else {
         $$lcssa$i = $824;
        }
        HEAP16[$$lcssa$i>>1]=$827&65535;HEAP16[$$lcssa$i+2>>1]=$827>>>16;
        $837 = (($i$014$i) + -1)|0;
        $838 = ($i$014$i|0)>(0);
        if ($838) {
         $i$014$i = $837;
        } else {
         break;
        }
       }
      }
      $823 = ($i$0$lcssa|0)>(0);
      if ($823) {
       $i$0$lcssa3841 = $i$0$lcssa;
       label = 88;
       break;
      }
      $855 = HEAP16[$808>>1]|0;
      $856 = $855&65535;
      $862 = $856;$i$0$lcssa3839 = $i$0$lcssa;$norm$1$lcssa21$i = 0;
     } else {
      $813 = (($abook_move) + 6|0);
      HEAP16[$813>>1] = 0;
      $i$0$lcssa3841 = 1;
      label = 88;
     }
    } while(0);
    do {
     if ((label|0) == 88) {
      $i$14$i = 0;$norm$03$i = 0;
      while(1) {
       $839 = ((($abook_move) + ($i$14$i<<2)|0) + 2|0);
       $840 = HEAP16[$839>>1]|0;
       $841 = $840&65535;
       $842 = (($841) + ($norm$03$i))|0;
       $843 = (($i$14$i) + 1)|0;
       $exitcond19$i = ($843|0)==($i$0$lcssa3841|0);
       if ($exitcond19$i) {
        break;
       } else {
        $i$14$i = $843;$norm$03$i = $842;
       }
      }
      $phitmp$i = (+($842>>>0));
      $844 = 65535.0 / $phitmp$i;
      $i$22$i = 0;$norm$11$i = 0;
      while(1) {
       $845 = ((($abook_move) + ($i$22$i<<2)|0) + 2|0);
       $846 = HEAP16[$845>>1]|0;
       $847 = (+($846&65535));
       $848 = $844 * $847;
       $849 = (~~(($848))>>>0);
       $850 = ($849|0)!=(0);
       $$$i2 = $850 ? $849 : 1;
       $851 = ($$$i2>>>0)>(65535);
       $$$$i = $851 ? 65535 : $$$i2;
       $852 = $$$$i&65535;
       HEAP16[$845>>1] = $852;
       $853 = (($$$$i) + ($norm$11$i))|0;
       $854 = (($i$22$i) + 1)|0;
       $exitcond$i3 = ($854|0)==($i$0$lcssa3841|0);
       if ($exitcond$i3) {
        break;
       } else {
        $i$22$i = $854;$norm$11$i = $853;
       }
      }
      $857 = HEAP16[$808>>1]|0;
      $858 = $857&65535;
      $859 = (($858) + 65535)|0;
      $860 = ($853>>>0)>($859>>>0);
      if (!($860)) {
       $862 = $858;$i$0$lcssa3839 = $i$0$lcssa3841;$norm$1$lcssa21$i = $853;
       break;
      }
      HEAP32[220526664>>2] = 221113416;
      $moves$0 = $i$0$lcssa3841;
      break L120;
     }
    } while(0);
    $861 = (($862) + 65535)|0;
    $863 = (($861) - ($norm$1$lcssa21$i))|0;
    $864 = $863&65535;
    HEAP16[$808>>1] = $864;
    $moves$0 = $i$0$lcssa3839;
   }
  } while(0);
  $j$05 = (($moves$0) + -1)|0;
  $865 = ($j$05|0)>(0);
  L148: do {
   if ($865) {
    $drand$06 = $804;$j$07 = $j$05;
    while(1) {
     $866 = ((($abook_move) + ($j$07<<2)|0) + 2|0);
     $867 = HEAP16[$866>>1]|0;
     $868 = (+($867&65535));
     $869 = $868 / 65535.0;
     $870 = !($drand$06 <= $869);
     if (!($870)) {
      $j$0$lcssa = $j$07;
      break L148;
     }
     $871 = $drand$06 - $869;
     $j$0 = (($j$07) + -1)|0;
     $872 = ($j$0|0)>(0);
     if ($872) {
      $drand$06 = $871;$j$07 = $j$0;
     } else {
      $j$0$lcssa = $j$0;
      break;
     }
    }
   } else {
    $j$0$lcssa = $j$05;
   }
  } while(0);
  $873 = ((($abook_move) + ($j$0$lcssa<<2)|0) + 2|0);
  $874 = HEAP16[$873>>1]|0;
  $875 = ($874<<16>>16)==(0);
  $$j$0 = $875 ? 0 : $j$0$lcssa;
  $877 = $805;$j$1 = $$j$0;$moves$1 = $moves$0;
 } else {
  $877 = $798;$j$1 = 0;$moves$1 = $794;
 }
 $876 = $877 & 96;
 $878 = ($876|0)==(0);
 do {
  if ($878) {
   _out(221113352,$vararg_buffer);
   $879 = ($moves$1|0)>(0);
   if ($879) {
    $i$14 = 0;
   } else {
    break;
   }
   while(1) {
    $880 = ((($abook_move) + ($i$14<<2)|0) + 2|0);
    $881 = HEAP16[$880>>1]|0;
    $882 = (+($881&65535));
    $883 = $882 / 65535.0;
    $884 = (($abook_move) + ($i$14<<2)|0);
    $885 = HEAP16[$884>>1]|0;
    $886 = $885&65535;
    $887 = (_bm2move($ptree,$886,$$$i)|0);
    $888 = (_str_CSA_move($887)|0);
    $889 = ($i$14|0)==($j$1|0);
    $890 = $889 ? 42 : 32;
    $891 = $883 * 100.0;
    HEAP32[$vararg_buffer1>>2] = $890;
    $vararg_ptr3 = (($vararg_buffer1) + 4|0);
    HEAP32[$vararg_ptr3>>2] = $888;
    $vararg_ptr4 = (($vararg_buffer1) + 8|0);
    HEAPF64[tempDoublePtr>>3]=$891;HEAP32[$vararg_ptr4>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr4+4>>2]=HEAP32[tempDoublePtr+4>>2];
    _out(221113376,$vararg_buffer1);
    $892 = (($i$14) + 1)|0;
    $exitcond = ($892|0)==($moves$1|0);
    if ($exitcond) {
     break;
    } else {
     $i$14 = $892;
    }
   }
  }
 } while(0);
 $893 = (($abook_move) + ($j$1<<2)|0);
 $894 = HEAP16[$893>>1]|0;
 $895 = $894&65535;
 $896 = (_bm2move($ptree,$895,$$$i)|0);
 $897 = HEAP32[34184024>>2]|0;
 $898 = (_is_move_valid($ptree,$896,$897)|0);
 $899 = ($898|0)==(0);
 if ($899) {
  _out_warning(221113392,$vararg_buffer5);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $900 = (($ptree) + 142520|0);
  HEAP32[$900>>2] = $896;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _bm2move($ptree,$bmove,$is_flip) {
 $ptree = $ptree|0;
 $bmove = $bmove|0;
 $is_flip = $is_flip|0;
 var $$0 = 0, $$ifrom_file$1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ifrom_file$0$i = 0, $ifrom_file$1$i = 0, $ifrom_file$2$i = 0, $ifrom_rank$0$i = 0;
 var $ifrom_rank$1$i = 0, $ito_file$0$i = 0, $ito_file$1$i = 0, $ito_rank$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $bmove & 127;
 $1 = $bmove >>> 7;
 $2 = $1 & 127;
 $3 = HEAP32[34184024>>2]|0;
 $4 = (1336 + ($0)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (1248 + ($0)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($2>>>0)<(81);
 if ($10) {
  $11 = (1336 + ($2)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = (1248 + ($2)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $ifrom_file$0$i = $16;$ifrom_rank$0$i = $13;
 } else {
  $ifrom_file$0$i = 0;$ifrom_rank$0$i = 0;
 }
 $17 = ($3|0)==(0);
 if ($17) {
  $ifrom_file$1$i = $ifrom_file$0$i;$ifrom_rank$1$i = $ifrom_rank$0$i;$ito_file$0$i = $9;$ito_rank$0$i = $6;
 } else {
  $18 = (8 - ($6))|0;
  $19 = (8 - ($9))|0;
  if ($10) {
   $20 = (8 - ($ifrom_rank$0$i))|0;
   $21 = (8 - ($ifrom_file$0$i))|0;
   $ifrom_file$1$i = $21;$ifrom_rank$1$i = $20;$ito_file$0$i = $19;$ito_rank$0$i = $18;
  } else {
   $ifrom_file$1$i = $ifrom_file$0$i;$ifrom_rank$1$i = $ifrom_rank$0$i;$ito_file$0$i = $19;$ito_rank$0$i = $18;
  }
 }
 $22 = ($is_flip|0)==(0);
 if ($22) {
  $ifrom_file$2$i = $ifrom_file$1$i;$ito_file$1$i = $ito_file$0$i;
 } else {
  $23 = (8 - ($ito_file$0$i))|0;
  $24 = (8 - ($ifrom_file$1$i))|0;
  $$ifrom_file$1$i = $10 ? $24 : $ifrom_file$1$i;
  $ifrom_file$2$i = $$ifrom_file$1$i;$ito_file$1$i = $23;
 }
 $25 = ($ito_rank$0$i*9)|0;
 $26 = (($ito_file$1$i) + ($25))|0;
 if ($10) {
  $27 = ($ifrom_rank$1$i*9)|0;
  $28 = (($ifrom_file$2$i) + ($27))|0;
  $31 = $28;
 } else {
  $31 = $2;
 }
 $29 = $bmove & 16384;
 $30 = $31 << 7;
 $32 = $26 | $29;
 $33 = $32 | $30;
 $34 = ($31|0)>(80);
 if ($34) {
  $$0 = $33;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = ((($ptree) + ($26)|0) + 512|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36 << 24 >> 24;
 if ($17) {
  $46 = (0 - ($37))|0;
  $47 = $46 << 19;
  $48 = $47 | $33;
  $49 = ((($ptree) + ($31)|0) + 512|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50 << 24 >> 24;
  $52 = $51 << 15;
  $53 = $48 | $52;
  $$0 = $53;
  STACKTOP = sp;return ($$0|0);
 } else {
  $38 = $37 << 19;
  $39 = $38 | $33;
  $40 = ((($ptree) + ($31)|0) + 512|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 << 24 >> 24;
  $43 = (0 - ($42))|0;
  $44 = $43 << 15;
  $45 = $39 | $44;
  $$0 = $45;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _make_move_b($ptree,$move,$ply) {
 $ptree = $ptree|0;
 $move = $move|0;
 $ply = $ply|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
 var $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
 var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
 var $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $move >>> 7;
 $1 = $0 & 127;
 $2 = $move & 127;
 $3 = (($ptree) + 572204|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($ply) + -1)|0;
 $6 = (($5) + ($4))|0;
 $7 = $ptree;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($ptree) + ($6<<3)|0) + 600|0);
 $14 = $13;
 $15 = $14;
 HEAP32[$15>>2] = $9;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($ptree) + 500|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($ptree) + ($6<<2)|0) + 75444|0);
 HEAP32[$20>>2] = $19;
 $21 = (($ptree) + 508|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22&65535;
 $24 = ((($ptree) + ($ply<<1)|0) + 571300|0);
 HEAP16[$24>>1] = $23;
 $25 = (($ply) + 1)|0;
 $26 = ((($ptree) + ($25<<2)|0) + 571556|0);
 HEAP32[$26>>2] = 2147483647;
 $27 = ($1>>>0)>(80);
 if ($27) {
  switch ($1|0) {
  case 86:  {
   $238 = (34156304 + (($2*12)|0)|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = (($ptree) + 260|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = $241 ^ $239;
   HEAP32[$240>>2] = $242;
   $243 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = (($ptree) + 264|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = $246 ^ $244;
   HEAP32[$245>>2] = $247;
   $248 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = (($ptree) + 268|0);
   $251 = HEAP32[$250>>2]|0;
   $252 = $251 ^ $249;
   HEAP32[$250>>2] = $252;
   $253 = (34165400 + ($2<<3)|0);
   $254 = $253;
   $255 = $254;
   $256 = HEAP32[$255>>2]|0;
   $257 = (($254) + 4)|0;
   $258 = $257;
   $259 = HEAP32[$258>>2]|0;
   $260 = $ptree;
   $261 = $260;
   $262 = HEAP32[$261>>2]|0;
   $263 = (($260) + 4)|0;
   $264 = $263;
   $265 = HEAP32[$264>>2]|0;
   $266 = $262 ^ $256;
   $267 = $265 ^ $259;
   $268 = $ptree;
   $269 = $268;
   HEAP32[$269>>2] = $266;
   $270 = (($268) + 4)|0;
   $271 = $270;
   HEAP32[$271>>2] = $267;
   $272 = HEAP32[$18>>2]|0;
   $273 = (($272) + -131072)|0;
   HEAP32[$18>>2] = $273;
   $274 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$274>>0] = 6;
   $275 = (($ptree) + 116|0);
   $276 = HEAP32[$275>>2]|0;
   $277 = $276 ^ $239;
   HEAP32[$275>>2] = $277;
   $278 = (($ptree) + 120|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = $279 ^ $244;
   HEAP32[$278>>2] = $280;
   $281 = (($ptree) + 124|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = $282 ^ $249;
   HEAP32[$281>>2] = $283;
   $333 = $239;$337 = $244;$341 = $249;
   break;
  }
  case 85:  {
   $192 = (34156304 + (($2*12)|0)|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = (($ptree) + 380|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = $195 ^ $193;
   HEAP32[$194>>2] = $196;
   $197 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = (($ptree) + 384|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = $200 ^ $198;
   HEAP32[$199>>2] = $201;
   $202 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = (($ptree) + 388|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = $205 ^ $203;
   HEAP32[$204>>2] = $206;
   $207 = (34164752 + ($2<<3)|0);
   $208 = $207;
   $209 = $208;
   $210 = HEAP32[$209>>2]|0;
   $211 = (($208) + 4)|0;
   $212 = $211;
   $213 = HEAP32[$212>>2]|0;
   $214 = $ptree;
   $215 = $214;
   $216 = HEAP32[$215>>2]|0;
   $217 = (($214) + 4)|0;
   $218 = $217;
   $219 = HEAP32[$218>>2]|0;
   $220 = $216 ^ $210;
   $221 = $219 ^ $213;
   $222 = $ptree;
   $223 = $222;
   HEAP32[$223>>2] = $220;
   $224 = (($222) + 4)|0;
   $225 = $224;
   HEAP32[$225>>2] = $221;
   $226 = HEAP32[$18>>2]|0;
   $227 = (($226) + -16384)|0;
   HEAP32[$18>>2] = $227;
   $228 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$228>>0] = 5;
   $229 = (($ptree) + 92|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = $230 ^ $193;
   HEAP32[$229>>2] = $231;
   $232 = (($ptree) + 96|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = $233 ^ $198;
   HEAP32[$232>>2] = $234;
   $235 = (($ptree) + 100|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = $236 ^ $203;
   HEAP32[$235>>2] = $237;
   $333 = $193;$337 = $198;$341 = $203;
   break;
  }
  case 83:  {
   $118 = (34156304 + (($2*12)|0)|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (($ptree) + 212|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $121 ^ $119;
   HEAP32[$120>>2] = $122;
   $123 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($ptree) + 216|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $126 ^ $124;
   HEAP32[$125>>2] = $127;
   $128 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($ptree) + 220|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $131 ^ $129;
   HEAP32[$130>>2] = $132;
   $133 = (34163456 + ($2<<3)|0);
   $134 = $133;
   $135 = $134;
   $136 = HEAP32[$135>>2]|0;
   $137 = (($134) + 4)|0;
   $138 = $137;
   $139 = HEAP32[$138>>2]|0;
   $140 = $ptree;
   $141 = $140;
   $142 = HEAP32[$141>>2]|0;
   $143 = (($140) + 4)|0;
   $144 = $143;
   $145 = HEAP32[$144>>2]|0;
   $146 = $142 ^ $136;
   $147 = $145 ^ $139;
   $148 = $ptree;
   $149 = $148;
   HEAP32[$149>>2] = $146;
   $150 = (($148) + 4)|0;
   $151 = $150;
   HEAP32[$151>>2] = $147;
   $152 = HEAP32[$18>>2]|0;
   $153 = (($152) + -256)|0;
   HEAP32[$18>>2] = $153;
   $154 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$154>>0] = 3;
   $333 = $119;$337 = $124;$341 = $129;
   break;
  }
  case 81:  {
   $28 = (($2) + -9)|0;
   $29 = (34156304 + (($28*12)|0)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($ptree) + 164|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $32 ^ $30;
   HEAP32[$31>>2] = $33;
   $34 = ((34156304 + (($28*12)|0)|0) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($ptree) + 168|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $37 ^ $35;
   HEAP32[$36>>2] = $38;
   $39 = ((34156304 + (($28*12)|0)|0) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($ptree) + 172|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42 ^ $40;
   HEAP32[$41>>2] = $43;
   $44 = (34156304 + (($2*12)|0)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($ptree) + 356|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $47 ^ $45;
   HEAP32[$46>>2] = $48;
   $49 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($ptree) + 360|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52 ^ $50;
   HEAP32[$51>>2] = $53;
   $54 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($ptree) + 364|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 ^ $55;
   HEAP32[$56>>2] = $58;
   $59 = (34162160 + ($2<<3)|0);
   $60 = $59;
   $61 = $60;
   $62 = HEAP32[$61>>2]|0;
   $63 = (($60) + 4)|0;
   $64 = $63;
   $65 = HEAP32[$64>>2]|0;
   $66 = $ptree;
   $67 = $66;
   $68 = HEAP32[$67>>2]|0;
   $69 = (($66) + 4)|0;
   $70 = $69;
   $71 = HEAP32[$70>>2]|0;
   $72 = $68 ^ $62;
   $73 = $71 ^ $65;
   $74 = $ptree;
   $75 = $74;
   HEAP32[$75>>2] = $72;
   $76 = (($74) + 4)|0;
   $77 = $76;
   HEAP32[$77>>2] = $73;
   $78 = HEAP32[$18>>2]|0;
   $79 = (($78) + -1)|0;
   HEAP32[$18>>2] = $79;
   $80 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$80>>0] = 1;
   $333 = $45;$337 = $50;$341 = $55;
   break;
  }
  case 82:  {
   $81 = (34156304 + (($2*12)|0)|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($ptree) + 188|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $84 ^ $82;
   HEAP32[$83>>2] = $85;
   $86 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (($ptree) + 192|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $89 ^ $87;
   HEAP32[$88>>2] = $90;
   $91 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = (($ptree) + 196|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = $94 ^ $92;
   HEAP32[$93>>2] = $95;
   $96 = (34162808 + ($2<<3)|0);
   $97 = $96;
   $98 = $97;
   $99 = HEAP32[$98>>2]|0;
   $100 = (($97) + 4)|0;
   $101 = $100;
   $102 = HEAP32[$101>>2]|0;
   $103 = $ptree;
   $104 = $103;
   $105 = HEAP32[$104>>2]|0;
   $106 = (($103) + 4)|0;
   $107 = $106;
   $108 = HEAP32[$107>>2]|0;
   $109 = $105 ^ $99;
   $110 = $108 ^ $102;
   $111 = $ptree;
   $112 = $111;
   HEAP32[$112>>2] = $109;
   $113 = (($111) + 4)|0;
   $114 = $113;
   HEAP32[$114>>2] = $110;
   $115 = HEAP32[$18>>2]|0;
   $116 = (($115) + -32)|0;
   HEAP32[$18>>2] = $116;
   $117 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$117>>0] = 2;
   $333 = $82;$337 = $87;$341 = $92;
   break;
  }
  case 84:  {
   $155 = (34156304 + (($2*12)|0)|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = (($ptree) + 236|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = $158 ^ $156;
   HEAP32[$157>>2] = $159;
   $160 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = (($ptree) + 240|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $163 ^ $161;
   HEAP32[$162>>2] = $164;
   $165 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = (($ptree) + 244|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = $168 ^ $166;
   HEAP32[$167>>2] = $169;
   $170 = (34164104 + ($2<<3)|0);
   $171 = $170;
   $172 = $171;
   $173 = HEAP32[$172>>2]|0;
   $174 = (($171) + 4)|0;
   $175 = $174;
   $176 = HEAP32[$175>>2]|0;
   $177 = $ptree;
   $178 = $177;
   $179 = HEAP32[$178>>2]|0;
   $180 = (($177) + 4)|0;
   $181 = $180;
   $182 = HEAP32[$181>>2]|0;
   $183 = $179 ^ $173;
   $184 = $182 ^ $176;
   $185 = $ptree;
   $186 = $185;
   HEAP32[$186>>2] = $183;
   $187 = (($185) + 4)|0;
   $188 = $187;
   HEAP32[$188>>2] = $184;
   $189 = HEAP32[$18>>2]|0;
   $190 = (($189) + -2048)|0;
   HEAP32[$18>>2] = $190;
   $191 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$191>>0] = 4;
   $333 = $156;$337 = $161;$341 = $166;
   break;
  }
  default: {
   $284 = (34156304 + (($2*12)|0)|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = (($ptree) + 284|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = $287 ^ $285;
   HEAP32[$286>>2] = $288;
   $289 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = (($ptree) + 288|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 ^ $290;
   HEAP32[$291>>2] = $293;
   $294 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = (($ptree) + 292|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = $297 ^ $295;
   HEAP32[$296>>2] = $298;
   $299 = (34166048 + ($2<<3)|0);
   $300 = $299;
   $301 = $300;
   $302 = HEAP32[$301>>2]|0;
   $303 = (($300) + 4)|0;
   $304 = $303;
   $305 = HEAP32[$304>>2]|0;
   $306 = $ptree;
   $307 = $306;
   $308 = HEAP32[$307>>2]|0;
   $309 = (($306) + 4)|0;
   $310 = $309;
   $311 = HEAP32[$310>>2]|0;
   $312 = $308 ^ $302;
   $313 = $311 ^ $305;
   $314 = $ptree;
   $315 = $314;
   HEAP32[$315>>2] = $312;
   $316 = (($314) + 4)|0;
   $317 = $316;
   HEAP32[$317>>2] = $313;
   $318 = HEAP32[$18>>2]|0;
   $319 = (($318) + -524288)|0;
   HEAP32[$18>>2] = $319;
   $320 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$320>>0] = 7;
   $321 = (($ptree) + 140|0);
   $322 = HEAP32[$321>>2]|0;
   $323 = $322 ^ $285;
   HEAP32[$321>>2] = $323;
   $324 = (($ptree) + 144|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = $325 ^ $290;
   HEAP32[$324>>2] = $326;
   $327 = (($ptree) + 148|0);
   $328 = HEAP32[$327>>2]|0;
   $329 = $328 ^ $295;
   HEAP32[$327>>2] = $329;
   $333 = $285;$337 = $290;$341 = $295;
  }
  }
  $330 = (($ptree) + 8|0);
  $331 = HEAP32[$330>>2]|0;
  $332 = $331 ^ $333;
  HEAP32[$330>>2] = $332;
  $334 = (($ptree) + 12|0);
  $335 = HEAP32[$334>>2]|0;
  $336 = $335 ^ $337;
  HEAP32[$334>>2] = $336;
  $338 = (($ptree) + 16|0);
  $339 = HEAP32[$338>>2]|0;
  $340 = $339 ^ $341;
  HEAP32[$338>>2] = $340;
  $342 = (34157280 + (($2*12)|0)|0);
  $343 = HEAP32[$342>>2]|0;
  $344 = (($ptree) + 32|0);
  $345 = HEAP32[$344>>2]|0;
  $346 = $345 ^ $343;
  HEAP32[$344>>2] = $346;
  $347 = ((34157280 + (($2*12)|0)|0) + 4|0);
  $348 = HEAP32[$347>>2]|0;
  $349 = (($ptree) + 36|0);
  $350 = HEAP32[$349>>2]|0;
  $351 = $350 ^ $348;
  HEAP32[$349>>2] = $351;
  $352 = ((34157280 + (($2*12)|0)|0) + 8|0);
  $353 = HEAP32[$352>>2]|0;
  $354 = (($ptree) + 40|0);
  $355 = HEAP32[$354>>2]|0;
  $356 = $355 ^ $353;
  HEAP32[$354>>2] = $356;
  $357 = (34158256 + (($2*12)|0)|0);
  $358 = HEAP32[$357>>2]|0;
  $359 = (($ptree) + 44|0);
  $360 = HEAP32[$359>>2]|0;
  $361 = $360 ^ $358;
  HEAP32[$359>>2] = $361;
  $362 = ((34158256 + (($2*12)|0)|0) + 4|0);
  $363 = HEAP32[$362>>2]|0;
  $364 = (($ptree) + 48|0);
  $365 = HEAP32[$364>>2]|0;
  $366 = $365 ^ $363;
  HEAP32[$364>>2] = $366;
  $367 = ((34158256 + (($2*12)|0)|0) + 8|0);
  $368 = HEAP32[$367>>2]|0;
  $369 = (($ptree) + 52|0);
  $370 = HEAP32[$369>>2]|0;
  $371 = $370 ^ $368;
  HEAP32[$369>>2] = $371;
  $372 = (34159232 + (($2*12)|0)|0);
  $373 = HEAP32[$372>>2]|0;
  $374 = (($ptree) + 56|0);
  $375 = HEAP32[$374>>2]|0;
  $376 = $375 ^ $373;
  HEAP32[$374>>2] = $376;
  $377 = ((34159232 + (($2*12)|0)|0) + 4|0);
  $378 = HEAP32[$377>>2]|0;
  $379 = (($ptree) + 60|0);
  $380 = HEAP32[$379>>2]|0;
  $381 = $380 ^ $378;
  HEAP32[$379>>2] = $381;
  $382 = ((34159232 + (($2*12)|0)|0) + 8|0);
  $383 = HEAP32[$382>>2]|0;
  $384 = (($ptree) + 64|0);
  $385 = HEAP32[$384>>2]|0;
  $386 = $385 ^ $383;
  HEAP32[$384>>2] = $386;
  STACKTOP = sp;return;
 }
 $387 = $move >>> 15;
 $388 = $387 & 15;
 $389 = $move >>> 19;
 $390 = $389 & 15;
 $391 = $move & 16384;
 $392 = (34156304 + (($1*12)|0)|0);
 $393 = HEAP32[$392>>2]|0;
 $394 = (34156304 + (($2*12)|0)|0);
 $395 = HEAP32[$394>>2]|0;
 $396 = $395 | $393;
 $397 = ((34156304 + (($1*12)|0)|0) + 4|0);
 $398 = HEAP32[$397>>2]|0;
 $399 = ((34156304 + (($2*12)|0)|0) + 4|0);
 $400 = HEAP32[$399>>2]|0;
 $401 = $400 | $398;
 $402 = ((34156304 + (($1*12)|0)|0) + 8|0);
 $403 = HEAP32[$402>>2]|0;
 $404 = ((34156304 + (($2*12)|0)|0) + 8|0);
 $405 = HEAP32[$404>>2]|0;
 $406 = $405 | $403;
 $407 = (($ptree) + 8|0);
 $408 = HEAP32[$407>>2]|0;
 $409 = $408 ^ $396;
 HEAP32[$407>>2] = $409;
 $410 = (($ptree) + 12|0);
 $411 = HEAP32[$410>>2]|0;
 $412 = $411 ^ $401;
 HEAP32[$410>>2] = $412;
 $413 = (($ptree) + 16|0);
 $414 = HEAP32[$413>>2]|0;
 $415 = $414 ^ $406;
 HEAP32[$413>>2] = $415;
 $416 = ((($ptree) + ($1)|0) + 512|0);
 HEAP8[$416>>0] = 0;
 $417 = ($391|0)==(0);
 L14: do {
  if ($417) {
   do {
    switch ($388|0) {
    case 1:  {
     $793 = (($2) + -9)|0;
     $794 = (34156304 + (($793*12)|0)|0);
     $795 = HEAP32[$794>>2]|0;
     $796 = (($ptree) + 164|0);
     $797 = HEAP32[$796>>2]|0;
     $798 = $797 ^ $795;
     $799 = ((34156304 + (($793*12)|0)|0) + 4|0);
     $800 = HEAP32[$799>>2]|0;
     $801 = (($ptree) + 168|0);
     $802 = HEAP32[$801>>2]|0;
     $803 = $802 ^ $800;
     $804 = ((34156304 + (($793*12)|0)|0) + 8|0);
     $805 = HEAP32[$804>>2]|0;
     $806 = (($ptree) + 172|0);
     $807 = HEAP32[$806>>2]|0;
     $808 = $807 ^ $805;
     $809 = $798 ^ $395;
     HEAP32[$796>>2] = $809;
     $810 = $803 ^ $400;
     HEAP32[$801>>2] = $810;
     $811 = $808 ^ $405;
     HEAP32[$806>>2] = $811;
     $812 = (($ptree) + 356|0);
     $813 = HEAP32[$812>>2]|0;
     $814 = $813 ^ $396;
     HEAP32[$812>>2] = $814;
     $815 = (($ptree) + 360|0);
     $816 = HEAP32[$815>>2]|0;
     $817 = $816 ^ $401;
     HEAP32[$815>>2] = $817;
     $818 = (($ptree) + 364|0);
     $819 = HEAP32[$818>>2]|0;
     $820 = $819 ^ $406;
     HEAP32[$818>>2] = $820;
     $821 = (34162160 + ($2<<3)|0);
     $822 = $821;
     $823 = $822;
     $824 = HEAP32[$823>>2]|0;
     $825 = (($822) + 4)|0;
     $826 = $825;
     $827 = HEAP32[$826>>2]|0;
     $828 = (34162160 + ($1<<3)|0);
     $829 = $828;
     $830 = $829;
     $831 = HEAP32[$830>>2]|0;
     $832 = (($829) + 4)|0;
     $833 = $832;
     $834 = HEAP32[$833>>2]|0;
     $835 = $831 ^ $824;
     $836 = $834 ^ $827;
     $837 = $ptree;
     $838 = $837;
     $839 = HEAP32[$838>>2]|0;
     $840 = (($837) + 4)|0;
     $841 = $840;
     $842 = HEAP32[$841>>2]|0;
     $843 = $835 ^ $839;
     $844 = $836 ^ $842;
     $845 = $ptree;
     $846 = $845;
     HEAP32[$846>>2] = $843;
     $847 = (($845) + 4)|0;
     $848 = $847;
     HEAP32[$848>>2] = $844;
     $849 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$849>>0] = 1;
     break L14;
     break;
    }
    case 2:  {
     $850 = (($ptree) + 188|0);
     $851 = HEAP32[$850>>2]|0;
     $852 = $851 ^ $396;
     HEAP32[$850>>2] = $852;
     $853 = (($ptree) + 192|0);
     $854 = HEAP32[$853>>2]|0;
     $855 = $854 ^ $401;
     HEAP32[$853>>2] = $855;
     $856 = (($ptree) + 196|0);
     $857 = HEAP32[$856>>2]|0;
     $858 = $857 ^ $406;
     HEAP32[$856>>2] = $858;
     $859 = (34162808 + ($2<<3)|0);
     $860 = $859;
     $861 = $860;
     $862 = HEAP32[$861>>2]|0;
     $863 = (($860) + 4)|0;
     $864 = $863;
     $865 = HEAP32[$864>>2]|0;
     $866 = (34162808 + ($1<<3)|0);
     $867 = $866;
     $868 = $867;
     $869 = HEAP32[$868>>2]|0;
     $870 = (($867) + 4)|0;
     $871 = $870;
     $872 = HEAP32[$871>>2]|0;
     $873 = $869 ^ $862;
     $874 = $872 ^ $865;
     $875 = $ptree;
     $876 = $875;
     $877 = HEAP32[$876>>2]|0;
     $878 = (($875) + 4)|0;
     $879 = $878;
     $880 = HEAP32[$879>>2]|0;
     $881 = $873 ^ $877;
     $882 = $874 ^ $880;
     $883 = $ptree;
     $884 = $883;
     HEAP32[$884>>2] = $881;
     $885 = (($883) + 4)|0;
     $886 = $885;
     HEAP32[$886>>2] = $882;
     $887 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$887>>0] = 2;
     break L14;
     break;
    }
    case 3:  {
     $888 = (($ptree) + 212|0);
     $889 = HEAP32[$888>>2]|0;
     $890 = $889 ^ $396;
     HEAP32[$888>>2] = $890;
     $891 = (($ptree) + 216|0);
     $892 = HEAP32[$891>>2]|0;
     $893 = $892 ^ $401;
     HEAP32[$891>>2] = $893;
     $894 = (($ptree) + 220|0);
     $895 = HEAP32[$894>>2]|0;
     $896 = $895 ^ $406;
     HEAP32[$894>>2] = $896;
     $897 = (34163456 + ($2<<3)|0);
     $898 = $897;
     $899 = $898;
     $900 = HEAP32[$899>>2]|0;
     $901 = (($898) + 4)|0;
     $902 = $901;
     $903 = HEAP32[$902>>2]|0;
     $904 = (34163456 + ($1<<3)|0);
     $905 = $904;
     $906 = $905;
     $907 = HEAP32[$906>>2]|0;
     $908 = (($905) + 4)|0;
     $909 = $908;
     $910 = HEAP32[$909>>2]|0;
     $911 = $907 ^ $900;
     $912 = $910 ^ $903;
     $913 = $ptree;
     $914 = $913;
     $915 = HEAP32[$914>>2]|0;
     $916 = (($913) + 4)|0;
     $917 = $916;
     $918 = HEAP32[$917>>2]|0;
     $919 = $911 ^ $915;
     $920 = $912 ^ $918;
     $921 = $ptree;
     $922 = $921;
     HEAP32[$922>>2] = $919;
     $923 = (($921) + 4)|0;
     $924 = $923;
     HEAP32[$924>>2] = $920;
     $925 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$925>>0] = 3;
     break L14;
     break;
    }
    case 4:  {
     $926 = (($ptree) + 236|0);
     $927 = HEAP32[$926>>2]|0;
     $928 = $927 ^ $396;
     HEAP32[$926>>2] = $928;
     $929 = (($ptree) + 240|0);
     $930 = HEAP32[$929>>2]|0;
     $931 = $930 ^ $401;
     HEAP32[$929>>2] = $931;
     $932 = (($ptree) + 244|0);
     $933 = HEAP32[$932>>2]|0;
     $934 = $933 ^ $406;
     HEAP32[$932>>2] = $934;
     $935 = (34164104 + ($2<<3)|0);
     $936 = $935;
     $937 = $936;
     $938 = HEAP32[$937>>2]|0;
     $939 = (($936) + 4)|0;
     $940 = $939;
     $941 = HEAP32[$940>>2]|0;
     $942 = (34164104 + ($1<<3)|0);
     $943 = $942;
     $944 = $943;
     $945 = HEAP32[$944>>2]|0;
     $946 = (($943) + 4)|0;
     $947 = $946;
     $948 = HEAP32[$947>>2]|0;
     $949 = $945 ^ $938;
     $950 = $948 ^ $941;
     $951 = $ptree;
     $952 = $951;
     $953 = HEAP32[$952>>2]|0;
     $954 = (($951) + 4)|0;
     $955 = $954;
     $956 = HEAP32[$955>>2]|0;
     $957 = $949 ^ $953;
     $958 = $950 ^ $956;
     $959 = $ptree;
     $960 = $959;
     HEAP32[$960>>2] = $957;
     $961 = (($959) + 4)|0;
     $962 = $961;
     HEAP32[$962>>2] = $958;
     $963 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$963>>0] = 4;
     break L14;
     break;
    }
    case 5:  {
     $964 = (($ptree) + 380|0);
     $965 = HEAP32[$964>>2]|0;
     $966 = $965 ^ $396;
     HEAP32[$964>>2] = $966;
     $967 = (($ptree) + 384|0);
     $968 = HEAP32[$967>>2]|0;
     $969 = $968 ^ $401;
     HEAP32[$967>>2] = $969;
     $970 = (($ptree) + 388|0);
     $971 = HEAP32[$970>>2]|0;
     $972 = $971 ^ $406;
     HEAP32[$970>>2] = $972;
     $973 = (34164752 + ($2<<3)|0);
     $974 = $973;
     $975 = $974;
     $976 = HEAP32[$975>>2]|0;
     $977 = (($974) + 4)|0;
     $978 = $977;
     $979 = HEAP32[$978>>2]|0;
     $980 = (34164752 + ($1<<3)|0);
     $981 = $980;
     $982 = $981;
     $983 = HEAP32[$982>>2]|0;
     $984 = (($981) + 4)|0;
     $985 = $984;
     $986 = HEAP32[$985>>2]|0;
     $987 = $983 ^ $976;
     $988 = $986 ^ $979;
     $989 = $ptree;
     $990 = $989;
     $991 = HEAP32[$990>>2]|0;
     $992 = (($989) + 4)|0;
     $993 = $992;
     $994 = HEAP32[$993>>2]|0;
     $995 = $987 ^ $991;
     $996 = $988 ^ $994;
     $997 = $ptree;
     $998 = $997;
     HEAP32[$998>>2] = $995;
     $999 = (($997) + 4)|0;
     $1000 = $999;
     HEAP32[$1000>>2] = $996;
     $1001 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$1001>>0] = 5;
     $1002 = (($ptree) + 92|0);
     $1003 = HEAP32[$1002>>2]|0;
     $1004 = $1003 ^ $396;
     HEAP32[$1002>>2] = $1004;
     $1005 = (($ptree) + 96|0);
     $1006 = HEAP32[$1005>>2]|0;
     $1007 = $1006 ^ $401;
     HEAP32[$1005>>2] = $1007;
     $1008 = (($ptree) + 100|0);
     $1009 = HEAP32[$1008>>2]|0;
     $1010 = $1009 ^ $406;
     HEAP32[$1008>>2] = $1010;
     break L14;
     break;
    }
    case 6:  {
     $1011 = (($ptree) + 116|0);
     $1012 = HEAP32[$1011>>2]|0;
     $1013 = $1012 ^ $396;
     HEAP32[$1011>>2] = $1013;
     $1014 = (($ptree) + 120|0);
     $1015 = HEAP32[$1014>>2]|0;
     $1016 = $1015 ^ $401;
     HEAP32[$1014>>2] = $1016;
     $1017 = (($ptree) + 124|0);
     $1018 = HEAP32[$1017>>2]|0;
     $1019 = $1018 ^ $406;
     HEAP32[$1017>>2] = $1019;
     $1020 = (($ptree) + 260|0);
     $1021 = HEAP32[$1020>>2]|0;
     $1022 = $1021 ^ $396;
     HEAP32[$1020>>2] = $1022;
     $1023 = (($ptree) + 264|0);
     $1024 = HEAP32[$1023>>2]|0;
     $1025 = $1024 ^ $401;
     HEAP32[$1023>>2] = $1025;
     $1026 = (($ptree) + 268|0);
     $1027 = HEAP32[$1026>>2]|0;
     $1028 = $1027 ^ $406;
     HEAP32[$1026>>2] = $1028;
     $1029 = (34165400 + ($2<<3)|0);
     $1030 = $1029;
     $1031 = $1030;
     $1032 = HEAP32[$1031>>2]|0;
     $1033 = (($1030) + 4)|0;
     $1034 = $1033;
     $1035 = HEAP32[$1034>>2]|0;
     $1036 = (34165400 + ($1<<3)|0);
     $1037 = $1036;
     $1038 = $1037;
     $1039 = HEAP32[$1038>>2]|0;
     $1040 = (($1037) + 4)|0;
     $1041 = $1040;
     $1042 = HEAP32[$1041>>2]|0;
     $1043 = $1039 ^ $1032;
     $1044 = $1042 ^ $1035;
     $1045 = $ptree;
     $1046 = $1045;
     $1047 = HEAP32[$1046>>2]|0;
     $1048 = (($1045) + 4)|0;
     $1049 = $1048;
     $1050 = HEAP32[$1049>>2]|0;
     $1051 = $1043 ^ $1047;
     $1052 = $1044 ^ $1050;
     $1053 = $ptree;
     $1054 = $1053;
     HEAP32[$1054>>2] = $1051;
     $1055 = (($1053) + 4)|0;
     $1056 = $1055;
     HEAP32[$1056>>2] = $1052;
     $1057 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$1057>>0] = 6;
     break L14;
     break;
    }
    case 7:  {
     $1058 = (($ptree) + 284|0);
     $1059 = HEAP32[$1058>>2]|0;
     $1060 = $1059 ^ $396;
     HEAP32[$1058>>2] = $1060;
     $1061 = (($ptree) + 288|0);
     $1062 = HEAP32[$1061>>2]|0;
     $1063 = $1062 ^ $401;
     HEAP32[$1061>>2] = $1063;
     $1064 = (($ptree) + 292|0);
     $1065 = HEAP32[$1064>>2]|0;
     $1066 = $1065 ^ $406;
     HEAP32[$1064>>2] = $1066;
     $1067 = (34166048 + ($2<<3)|0);
     $1068 = $1067;
     $1069 = $1068;
     $1070 = HEAP32[$1069>>2]|0;
     $1071 = (($1068) + 4)|0;
     $1072 = $1071;
     $1073 = HEAP32[$1072>>2]|0;
     $1074 = (34166048 + ($1<<3)|0);
     $1075 = $1074;
     $1076 = $1075;
     $1077 = HEAP32[$1076>>2]|0;
     $1078 = (($1075) + 4)|0;
     $1079 = $1078;
     $1080 = HEAP32[$1079>>2]|0;
     $1081 = $1077 ^ $1070;
     $1082 = $1080 ^ $1073;
     $1083 = $ptree;
     $1084 = $1083;
     $1085 = HEAP32[$1084>>2]|0;
     $1086 = (($1083) + 4)|0;
     $1087 = $1086;
     $1088 = HEAP32[$1087>>2]|0;
     $1089 = $1081 ^ $1085;
     $1090 = $1082 ^ $1088;
     $1091 = $ptree;
     $1092 = $1091;
     HEAP32[$1092>>2] = $1089;
     $1093 = (($1091) + 4)|0;
     $1094 = $1093;
     HEAP32[$1094>>2] = $1090;
     $1095 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$1095>>0] = 7;
     $1096 = (($ptree) + 140|0);
     $1097 = HEAP32[$1096>>2]|0;
     $1098 = $1097 ^ $396;
     HEAP32[$1096>>2] = $1098;
     $1099 = (($ptree) + 144|0);
     $1100 = HEAP32[$1099>>2]|0;
     $1101 = $1100 ^ $401;
     HEAP32[$1099>>2] = $1101;
     $1102 = (($ptree) + 148|0);
     $1103 = HEAP32[$1102>>2]|0;
     $1104 = $1103 ^ $406;
     HEAP32[$1102>>2] = $1104;
     break L14;
     break;
    }
    case 8:  {
     $1105 = (34166696 + ($2<<3)|0);
     $1106 = $1105;
     $1107 = $1106;
     $1108 = HEAP32[$1107>>2]|0;
     $1109 = (($1106) + 4)|0;
     $1110 = $1109;
     $1111 = HEAP32[$1110>>2]|0;
     $1112 = (34166696 + ($1<<3)|0);
     $1113 = $1112;
     $1114 = $1113;
     $1115 = HEAP32[$1114>>2]|0;
     $1116 = (($1113) + 4)|0;
     $1117 = $1116;
     $1118 = HEAP32[$1117>>2]|0;
     $1119 = $1115 ^ $1108;
     $1120 = $1118 ^ $1111;
     $1121 = $ptree;
     $1122 = $1121;
     $1123 = HEAP32[$1122>>2]|0;
     $1124 = (($1121) + 4)|0;
     $1125 = $1124;
     $1126 = HEAP32[$1125>>2]|0;
     $1127 = $1119 ^ $1123;
     $1128 = $1120 ^ $1126;
     $1129 = $ptree;
     $1130 = $1129;
     HEAP32[$1130>>2] = $1127;
     $1131 = (($1129) + 4)|0;
     $1132 = $1131;
     HEAP32[$1132>>2] = $1128;
     $1133 = (($ptree) + 68|0);
     $1134 = HEAP32[$1133>>2]|0;
     $1135 = $1134 ^ $396;
     HEAP32[$1133>>2] = $1135;
     $1136 = (($ptree) + 72|0);
     $1137 = HEAP32[$1136>>2]|0;
     $1138 = $1137 ^ $401;
     HEAP32[$1136>>2] = $1138;
     $1139 = (($ptree) + 76|0);
     $1140 = HEAP32[$1139>>2]|0;
     $1141 = $1140 ^ $406;
     HEAP32[$1139>>2] = $1141;
     $1142 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$1142>>0] = 8;
     $1143 = $2&255;
     $1144 = (($ptree) + 593|0);
     HEAP8[$1144>>0] = $1143;
     break L14;
     break;
    }
    case 9:  {
     $1145 = (($ptree) + 404|0);
     $1146 = HEAP32[$1145>>2]|0;
     $1147 = $1146 ^ $396;
     HEAP32[$1145>>2] = $1147;
     $1148 = (($ptree) + 408|0);
     $1149 = HEAP32[$1148>>2]|0;
     $1150 = $1149 ^ $401;
     HEAP32[$1148>>2] = $1150;
     $1151 = (($ptree) + 412|0);
     $1152 = HEAP32[$1151>>2]|0;
     $1153 = $1152 ^ $406;
     HEAP32[$1151>>2] = $1153;
     $1154 = (34167344 + ($2<<3)|0);
     $1155 = $1154;
     $1156 = $1155;
     $1157 = HEAP32[$1156>>2]|0;
     $1158 = (($1155) + 4)|0;
     $1159 = $1158;
     $1160 = HEAP32[$1159>>2]|0;
     $1161 = (34167344 + ($1<<3)|0);
     $1162 = $1161;
     $1163 = $1162;
     $1164 = HEAP32[$1163>>2]|0;
     $1165 = (($1162) + 4)|0;
     $1166 = $1165;
     $1167 = HEAP32[$1166>>2]|0;
     $1168 = $1164 ^ $1157;
     $1169 = $1167 ^ $1160;
     $1170 = $ptree;
     $1171 = $1170;
     $1172 = HEAP32[$1171>>2]|0;
     $1173 = (($1170) + 4)|0;
     $1174 = $1173;
     $1175 = HEAP32[$1174>>2]|0;
     $1176 = $1168 ^ $1172;
     $1177 = $1169 ^ $1175;
     $1178 = $ptree;
     $1179 = $1178;
     HEAP32[$1179>>2] = $1176;
     $1180 = (($1178) + 4)|0;
     $1181 = $1180;
     HEAP32[$1181>>2] = $1177;
     $1182 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$1182>>0] = 9;
     $1183 = (($ptree) + 92|0);
     $1184 = HEAP32[$1183>>2]|0;
     $1185 = $1184 ^ $396;
     HEAP32[$1183>>2] = $1185;
     $1186 = (($ptree) + 96|0);
     $1187 = HEAP32[$1186>>2]|0;
     $1188 = $1187 ^ $401;
     HEAP32[$1186>>2] = $1188;
     $1189 = (($ptree) + 100|0);
     $1190 = HEAP32[$1189>>2]|0;
     $1191 = $1190 ^ $406;
     HEAP32[$1189>>2] = $1191;
     break L14;
     break;
    }
    case 10:  {
     $1192 = (($ptree) + 428|0);
     $1193 = HEAP32[$1192>>2]|0;
     $1194 = $1193 ^ $396;
     HEAP32[$1192>>2] = $1194;
     $1195 = (($ptree) + 432|0);
     $1196 = HEAP32[$1195>>2]|0;
     $1197 = $1196 ^ $401;
     HEAP32[$1195>>2] = $1197;
     $1198 = (($ptree) + 436|0);
     $1199 = HEAP32[$1198>>2]|0;
     $1200 = $1199 ^ $406;
     HEAP32[$1198>>2] = $1200;
     $1201 = (34167992 + ($2<<3)|0);
     $1202 = $1201;
     $1203 = $1202;
     $1204 = HEAP32[$1203>>2]|0;
     $1205 = (($1202) + 4)|0;
     $1206 = $1205;
     $1207 = HEAP32[$1206>>2]|0;
     $1208 = (34167992 + ($1<<3)|0);
     $1209 = $1208;
     $1210 = $1209;
     $1211 = HEAP32[$1210>>2]|0;
     $1212 = (($1209) + 4)|0;
     $1213 = $1212;
     $1214 = HEAP32[$1213>>2]|0;
     $1215 = $1211 ^ $1204;
     $1216 = $1214 ^ $1207;
     $1217 = $ptree;
     $1218 = $1217;
     $1219 = HEAP32[$1218>>2]|0;
     $1220 = (($1217) + 4)|0;
     $1221 = $1220;
     $1222 = HEAP32[$1221>>2]|0;
     $1223 = $1215 ^ $1219;
     $1224 = $1216 ^ $1222;
     $1225 = $ptree;
     $1226 = $1225;
     HEAP32[$1226>>2] = $1223;
     $1227 = (($1225) + 4)|0;
     $1228 = $1227;
     HEAP32[$1228>>2] = $1224;
     $1229 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$1229>>0] = 10;
     $1230 = (($ptree) + 92|0);
     $1231 = HEAP32[$1230>>2]|0;
     $1232 = $1231 ^ $396;
     HEAP32[$1230>>2] = $1232;
     $1233 = (($ptree) + 96|0);
     $1234 = HEAP32[$1233>>2]|0;
     $1235 = $1234 ^ $401;
     HEAP32[$1233>>2] = $1235;
     $1236 = (($ptree) + 100|0);
     $1237 = HEAP32[$1236>>2]|0;
     $1238 = $1237 ^ $406;
     HEAP32[$1236>>2] = $1238;
     break L14;
     break;
    }
    case 11:  {
     $1239 = (($ptree) + 452|0);
     $1240 = HEAP32[$1239>>2]|0;
     $1241 = $1240 ^ $396;
     HEAP32[$1239>>2] = $1241;
     $1242 = (($ptree) + 456|0);
     $1243 = HEAP32[$1242>>2]|0;
     $1244 = $1243 ^ $401;
     HEAP32[$1242>>2] = $1244;
     $1245 = (($ptree) + 460|0);
     $1246 = HEAP32[$1245>>2]|0;
     $1247 = $1246 ^ $406;
     HEAP32[$1245>>2] = $1247;
     $1248 = (34168640 + ($2<<3)|0);
     $1249 = $1248;
     $1250 = $1249;
     $1251 = HEAP32[$1250>>2]|0;
     $1252 = (($1249) + 4)|0;
     $1253 = $1252;
     $1254 = HEAP32[$1253>>2]|0;
     $1255 = (34168640 + ($1<<3)|0);
     $1256 = $1255;
     $1257 = $1256;
     $1258 = HEAP32[$1257>>2]|0;
     $1259 = (($1256) + 4)|0;
     $1260 = $1259;
     $1261 = HEAP32[$1260>>2]|0;
     $1262 = $1258 ^ $1251;
     $1263 = $1261 ^ $1254;
     $1264 = $ptree;
     $1265 = $1264;
     $1266 = HEAP32[$1265>>2]|0;
     $1267 = (($1264) + 4)|0;
     $1268 = $1267;
     $1269 = HEAP32[$1268>>2]|0;
     $1270 = $1262 ^ $1266;
     $1271 = $1263 ^ $1269;
     $1272 = $ptree;
     $1273 = $1272;
     HEAP32[$1273>>2] = $1270;
     $1274 = (($1272) + 4)|0;
     $1275 = $1274;
     HEAP32[$1275>>2] = $1271;
     $1276 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$1276>>0] = 11;
     $1277 = (($ptree) + 92|0);
     $1278 = HEAP32[$1277>>2]|0;
     $1279 = $1278 ^ $396;
     HEAP32[$1277>>2] = $1279;
     $1280 = (($ptree) + 96|0);
     $1281 = HEAP32[$1280>>2]|0;
     $1282 = $1281 ^ $401;
     HEAP32[$1280>>2] = $1282;
     $1283 = (($ptree) + 100|0);
     $1284 = HEAP32[$1283>>2]|0;
     $1285 = $1284 ^ $406;
     HEAP32[$1283>>2] = $1285;
     break L14;
     break;
    }
    case 12:  {
     $1286 = (($ptree) + 476|0);
     $1287 = HEAP32[$1286>>2]|0;
     $1288 = $1287 ^ $396;
     HEAP32[$1286>>2] = $1288;
     $1289 = (($ptree) + 480|0);
     $1290 = HEAP32[$1289>>2]|0;
     $1291 = $1290 ^ $401;
     HEAP32[$1289>>2] = $1291;
     $1292 = (($ptree) + 484|0);
     $1293 = HEAP32[$1292>>2]|0;
     $1294 = $1293 ^ $406;
     HEAP32[$1292>>2] = $1294;
     $1295 = (34169288 + ($2<<3)|0);
     $1296 = $1295;
     $1297 = $1296;
     $1298 = HEAP32[$1297>>2]|0;
     $1299 = (($1296) + 4)|0;
     $1300 = $1299;
     $1301 = HEAP32[$1300>>2]|0;
     $1302 = (34169288 + ($1<<3)|0);
     $1303 = $1302;
     $1304 = $1303;
     $1305 = HEAP32[$1304>>2]|0;
     $1306 = (($1303) + 4)|0;
     $1307 = $1306;
     $1308 = HEAP32[$1307>>2]|0;
     $1309 = $1305 ^ $1298;
     $1310 = $1308 ^ $1301;
     $1311 = $ptree;
     $1312 = $1311;
     $1313 = HEAP32[$1312>>2]|0;
     $1314 = (($1311) + 4)|0;
     $1315 = $1314;
     $1316 = HEAP32[$1315>>2]|0;
     $1317 = $1309 ^ $1313;
     $1318 = $1310 ^ $1316;
     $1319 = $ptree;
     $1320 = $1319;
     HEAP32[$1320>>2] = $1317;
     $1321 = (($1319) + 4)|0;
     $1322 = $1321;
     HEAP32[$1322>>2] = $1318;
     $1323 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$1323>>0] = 12;
     $1324 = (($ptree) + 92|0);
     $1325 = HEAP32[$1324>>2]|0;
     $1326 = $1325 ^ $396;
     HEAP32[$1324>>2] = $1326;
     $1327 = (($ptree) + 96|0);
     $1328 = HEAP32[$1327>>2]|0;
     $1329 = $1328 ^ $401;
     HEAP32[$1327>>2] = $1329;
     $1330 = (($ptree) + 100|0);
     $1331 = HEAP32[$1330>>2]|0;
     $1332 = $1331 ^ $406;
     HEAP32[$1330>>2] = $1332;
     break L14;
     break;
    }
    case 14:  {
     $1333 = (($ptree) + 308|0);
     $1334 = HEAP32[$1333>>2]|0;
     $1335 = $1334 ^ $396;
     HEAP32[$1333>>2] = $1335;
     $1336 = (($ptree) + 312|0);
     $1337 = HEAP32[$1336>>2]|0;
     $1338 = $1337 ^ $401;
     HEAP32[$1336>>2] = $1338;
     $1339 = (($ptree) + 316|0);
     $1340 = HEAP32[$1339>>2]|0;
     $1341 = $1340 ^ $406;
     HEAP32[$1339>>2] = $1341;
     $1342 = (34169936 + ($2<<3)|0);
     $1343 = $1342;
     $1344 = $1343;
     $1345 = HEAP32[$1344>>2]|0;
     $1346 = (($1343) + 4)|0;
     $1347 = $1346;
     $1348 = HEAP32[$1347>>2]|0;
     $1349 = (34169936 + ($1<<3)|0);
     $1350 = $1349;
     $1351 = $1350;
     $1352 = HEAP32[$1351>>2]|0;
     $1353 = (($1350) + 4)|0;
     $1354 = $1353;
     $1355 = HEAP32[$1354>>2]|0;
     $1356 = $1352 ^ $1345;
     $1357 = $1355 ^ $1348;
     $1358 = $ptree;
     $1359 = $1358;
     $1360 = HEAP32[$1359>>2]|0;
     $1361 = (($1358) + 4)|0;
     $1362 = $1361;
     $1363 = HEAP32[$1362>>2]|0;
     $1364 = $1356 ^ $1360;
     $1365 = $1357 ^ $1363;
     $1366 = $ptree;
     $1367 = $1366;
     HEAP32[$1367>>2] = $1364;
     $1368 = (($1366) + 4)|0;
     $1369 = $1368;
     HEAP32[$1369>>2] = $1365;
     $1370 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$1370>>0] = 14;
     $1371 = (($ptree) + 68|0);
     $1372 = HEAP32[$1371>>2]|0;
     $1373 = $1372 ^ $396;
     HEAP32[$1371>>2] = $1373;
     $1374 = (($ptree) + 72|0);
     $1375 = HEAP32[$1374>>2]|0;
     $1376 = $1375 ^ $401;
     HEAP32[$1374>>2] = $1376;
     $1377 = (($ptree) + 76|0);
     $1378 = HEAP32[$1377>>2]|0;
     $1379 = $1378 ^ $406;
     HEAP32[$1377>>2] = $1379;
     $1380 = (($ptree) + 116|0);
     $1381 = HEAP32[$1380>>2]|0;
     $1382 = $1381 ^ $396;
     HEAP32[$1380>>2] = $1382;
     $1383 = (($ptree) + 120|0);
     $1384 = HEAP32[$1383>>2]|0;
     $1385 = $1384 ^ $401;
     HEAP32[$1383>>2] = $1385;
     $1386 = (($ptree) + 124|0);
     $1387 = HEAP32[$1386>>2]|0;
     $1388 = $1387 ^ $406;
     HEAP32[$1386>>2] = $1388;
     break L14;
     break;
    }
    default: {
     $1389 = (($ptree) + 332|0);
     $1390 = HEAP32[$1389>>2]|0;
     $1391 = $1390 ^ $396;
     HEAP32[$1389>>2] = $1391;
     $1392 = (($ptree) + 336|0);
     $1393 = HEAP32[$1392>>2]|0;
     $1394 = $1393 ^ $401;
     HEAP32[$1392>>2] = $1394;
     $1395 = (($ptree) + 340|0);
     $1396 = HEAP32[$1395>>2]|0;
     $1397 = $1396 ^ $406;
     HEAP32[$1395>>2] = $1397;
     $1398 = (34170584 + ($2<<3)|0);
     $1399 = $1398;
     $1400 = $1399;
     $1401 = HEAP32[$1400>>2]|0;
     $1402 = (($1399) + 4)|0;
     $1403 = $1402;
     $1404 = HEAP32[$1403>>2]|0;
     $1405 = (34170584 + ($1<<3)|0);
     $1406 = $1405;
     $1407 = $1406;
     $1408 = HEAP32[$1407>>2]|0;
     $1409 = (($1406) + 4)|0;
     $1410 = $1409;
     $1411 = HEAP32[$1410>>2]|0;
     $1412 = $1408 ^ $1401;
     $1413 = $1411 ^ $1404;
     $1414 = $ptree;
     $1415 = $1414;
     $1416 = HEAP32[$1415>>2]|0;
     $1417 = (($1414) + 4)|0;
     $1418 = $1417;
     $1419 = HEAP32[$1418>>2]|0;
     $1420 = $1412 ^ $1416;
     $1421 = $1413 ^ $1419;
     $1422 = $ptree;
     $1423 = $1422;
     HEAP32[$1423>>2] = $1420;
     $1424 = (($1422) + 4)|0;
     $1425 = $1424;
     HEAP32[$1425>>2] = $1421;
     $1426 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$1426>>0] = 15;
     $1427 = (($ptree) + 68|0);
     $1428 = HEAP32[$1427>>2]|0;
     $1429 = $1428 ^ $396;
     HEAP32[$1427>>2] = $1429;
     $1430 = (($ptree) + 72|0);
     $1431 = HEAP32[$1430>>2]|0;
     $1432 = $1431 ^ $401;
     HEAP32[$1430>>2] = $1432;
     $1433 = (($ptree) + 76|0);
     $1434 = HEAP32[$1433>>2]|0;
     $1435 = $1434 ^ $406;
     HEAP32[$1433>>2] = $1435;
     $1436 = (($ptree) + 140|0);
     $1437 = HEAP32[$1436>>2]|0;
     $1438 = $1437 ^ $396;
     HEAP32[$1436>>2] = $1438;
     $1439 = (($ptree) + 144|0);
     $1440 = HEAP32[$1439>>2]|0;
     $1441 = $1440 ^ $401;
     HEAP32[$1439>>2] = $1441;
     $1442 = (($ptree) + 148|0);
     $1443 = HEAP32[$1442>>2]|0;
     $1444 = $1443 ^ $406;
     HEAP32[$1442>>2] = $1444;
     break L14;
    }
    }
   } while(0);
  } else {
   switch ($388|0) {
   case 1:  {
    $418 = (($ptree) + 164|0);
    $419 = HEAP32[$418>>2]|0;
    $420 = $419 ^ $395;
    HEAP32[$418>>2] = $420;
    $421 = (($ptree) + 168|0);
    $422 = HEAP32[$421>>2]|0;
    $423 = $422 ^ $400;
    HEAP32[$421>>2] = $423;
    $424 = (($ptree) + 172|0);
    $425 = HEAP32[$424>>2]|0;
    $426 = $425 ^ $405;
    HEAP32[$424>>2] = $426;
    $427 = (($ptree) + 92|0);
    $428 = HEAP32[$427>>2]|0;
    $429 = $428 ^ $395;
    HEAP32[$427>>2] = $429;
    $430 = (($ptree) + 96|0);
    $431 = HEAP32[$430>>2]|0;
    $432 = $431 ^ $400;
    HEAP32[$430>>2] = $432;
    $433 = (($ptree) + 100|0);
    $434 = HEAP32[$433>>2]|0;
    $435 = $434 ^ $405;
    HEAP32[$433>>2] = $435;
    $436 = (($ptree) + 356|0);
    $437 = HEAP32[$436>>2]|0;
    $438 = $437 ^ $393;
    HEAP32[$436>>2] = $438;
    $439 = (($ptree) + 360|0);
    $440 = HEAP32[$439>>2]|0;
    $441 = $440 ^ $398;
    HEAP32[$439>>2] = $441;
    $442 = (($ptree) + 364|0);
    $443 = HEAP32[$442>>2]|0;
    $444 = $443 ^ $403;
    HEAP32[$442>>2] = $444;
    $445 = (($ptree) + 404|0);
    $446 = HEAP32[$445>>2]|0;
    $447 = $446 ^ $395;
    HEAP32[$445>>2] = $447;
    $448 = (($ptree) + 408|0);
    $449 = HEAP32[$448>>2]|0;
    $450 = $449 ^ $400;
    HEAP32[$448>>2] = $450;
    $451 = (($ptree) + 412|0);
    $452 = HEAP32[$451>>2]|0;
    $453 = $452 ^ $405;
    HEAP32[$451>>2] = $453;
    $454 = (34167344 + ($2<<3)|0);
    $455 = $454;
    $456 = $455;
    $457 = HEAP32[$456>>2]|0;
    $458 = (($455) + 4)|0;
    $459 = $458;
    $460 = HEAP32[$459>>2]|0;
    $461 = (34162160 + ($1<<3)|0);
    $462 = $461;
    $463 = $462;
    $464 = HEAP32[$463>>2]|0;
    $465 = (($462) + 4)|0;
    $466 = $465;
    $467 = HEAP32[$466>>2]|0;
    $468 = $464 ^ $457;
    $469 = $467 ^ $460;
    $470 = $ptree;
    $471 = $470;
    $472 = HEAP32[$471>>2]|0;
    $473 = (($470) + 4)|0;
    $474 = $473;
    $475 = HEAP32[$474>>2]|0;
    $476 = $468 ^ $472;
    $477 = $469 ^ $475;
    $478 = $ptree;
    $479 = $478;
    HEAP32[$479>>2] = $476;
    $480 = (($478) + 4)|0;
    $481 = $480;
    HEAP32[$481>>2] = $477;
    $482 = HEAP32[$21>>2]|0;
    $483 = (($482) + 447)|0;
    HEAP32[$21>>2] = $483;
    $484 = ((($ptree) + ($2)|0) + 512|0);
    HEAP8[$484>>0] = 9;
    break L14;
    break;
   }
   case 2:  {
    $485 = (($ptree) + 92|0);
    $486 = HEAP32[$485>>2]|0;
    $487 = $486 ^ $395;
    HEAP32[$485>>2] = $487;
    $488 = (($ptree) + 96|0);
    $489 = HEAP32[$488>>2]|0;
    $490 = $489 ^ $400;
    HEAP32[$488>>2] = $490;
    $491 = (($ptree) + 100|0);
    $492 = HEAP32[$491>>2]|0;
    $493 = $492 ^ $405;
    HEAP32[$491>>2] = $493;
    $494 = (($ptree) + 188|0);
    $495 = HEAP32[$494>>2]|0;
    $496 = $495 ^ $393;
    HEAP32[$494>>2] = $496;
    $497 = (($ptree) + 192|0);
    $498 = HEAP32[$497>>2]|0;
    $499 = $498 ^ $398;
    HEAP32[$497>>2] = $499;
    $500 = (($ptree) + 196|0);
    $501 = HEAP32[$500>>2]|0;
    $502 = $501 ^ $403;
    HEAP32[$500>>2] = $502;
    $503 = (($ptree) + 428|0);
    $504 = HEAP32[$503>>2]|0;
    $505 = $504 ^ $395;
    HEAP32[$503>>2] = $505;
    $506 = (($ptree) + 432|0);
    $507 = HEAP32[$506>>2]|0;
    $508 = $507 ^ $400;
    HEAP32[$506>>2] = $508;
    $509 = (($ptree) + 436|0);
    $510 = HEAP32[$509>>2]|0;
    $511 = $510 ^ $405;
    HEAP32[$509>>2] = $511;
    $512 = (34167992 + ($2<<3)|0);
    $513 = $512;
    $514 = $513;
    $515 = HEAP32[$514>>2]|0;
    $516 = (($513) + 4)|0;
    $517 = $516;
    $518 = HEAP32[$517>>2]|0;
    $519 = (34162808 + ($1<<3)|0);
    $520 = $519;
    $521 = $520;
    $522 = HEAP32[$521>>2]|0;
    $523 = (($520) + 4)|0;
    $524 = $523;
    $525 = HEAP32[$524>>2]|0;
    $526 = $522 ^ $515;
    $527 = $525 ^ $518;
    $528 = $ptree;
    $529 = $528;
    $530 = HEAP32[$529>>2]|0;
    $531 = (($528) + 4)|0;
    $532 = $531;
    $533 = HEAP32[$532>>2]|0;
    $534 = $526 ^ $530;
    $535 = $527 ^ $533;
    $536 = $ptree;
    $537 = $536;
    HEAP32[$537>>2] = $534;
    $538 = (($536) + 4)|0;
    $539 = $538;
    HEAP32[$539>>2] = $535;
    $540 = HEAP32[$21>>2]|0;
    $541 = (($540) + 257)|0;
    HEAP32[$21>>2] = $541;
    $542 = ((($ptree) + ($2)|0) + 512|0);
    HEAP8[$542>>0] = 10;
    break L14;
    break;
   }
   case 3:  {
    $543 = (($ptree) + 92|0);
    $544 = HEAP32[$543>>2]|0;
    $545 = $544 ^ $395;
    HEAP32[$543>>2] = $545;
    $546 = (($ptree) + 96|0);
    $547 = HEAP32[$546>>2]|0;
    $548 = $547 ^ $400;
    HEAP32[$546>>2] = $548;
    $549 = (($ptree) + 100|0);
    $550 = HEAP32[$549>>2]|0;
    $551 = $550 ^ $405;
    HEAP32[$549>>2] = $551;
    $552 = (($ptree) + 212|0);
    $553 = HEAP32[$552>>2]|0;
    $554 = $553 ^ $393;
    HEAP32[$552>>2] = $554;
    $555 = (($ptree) + 216|0);
    $556 = HEAP32[$555>>2]|0;
    $557 = $556 ^ $398;
    HEAP32[$555>>2] = $557;
    $558 = (($ptree) + 220|0);
    $559 = HEAP32[$558>>2]|0;
    $560 = $559 ^ $403;
    HEAP32[$558>>2] = $560;
    $561 = (($ptree) + 452|0);
    $562 = HEAP32[$561>>2]|0;
    $563 = $562 ^ $395;
    HEAP32[$561>>2] = $563;
    $564 = (($ptree) + 456|0);
    $565 = HEAP32[$564>>2]|0;
    $566 = $565 ^ $400;
    HEAP32[$564>>2] = $566;
    $567 = (($ptree) + 460|0);
    $568 = HEAP32[$567>>2]|0;
    $569 = $568 ^ $405;
    HEAP32[$567>>2] = $569;
    $570 = (34168640 + ($2<<3)|0);
    $571 = $570;
    $572 = $571;
    $573 = HEAP32[$572>>2]|0;
    $574 = (($571) + 4)|0;
    $575 = $574;
    $576 = HEAP32[$575>>2]|0;
    $577 = (34163456 + ($1<<3)|0);
    $578 = $577;
    $579 = $578;
    $580 = HEAP32[$579>>2]|0;
    $581 = (($578) + 4)|0;
    $582 = $581;
    $583 = HEAP32[$582>>2]|0;
    $584 = $580 ^ $573;
    $585 = $583 ^ $576;
    $586 = $ptree;
    $587 = $586;
    $588 = HEAP32[$587>>2]|0;
    $589 = (($586) + 4)|0;
    $590 = $589;
    $591 = HEAP32[$590>>2]|0;
    $592 = $584 ^ $588;
    $593 = $585 ^ $591;
    $594 = $ptree;
    $595 = $594;
    HEAP32[$595>>2] = $592;
    $596 = (($594) + 4)|0;
    $597 = $596;
    HEAP32[$597>>2] = $593;
    $598 = HEAP32[$21>>2]|0;
    $599 = (($598) + 253)|0;
    HEAP32[$21>>2] = $599;
    $600 = ((($ptree) + ($2)|0) + 512|0);
    HEAP8[$600>>0] = 11;
    break L14;
    break;
   }
   case 4:  {
    $601 = (($ptree) + 92|0);
    $602 = HEAP32[$601>>2]|0;
    $603 = $602 ^ $395;
    HEAP32[$601>>2] = $603;
    $604 = (($ptree) + 96|0);
    $605 = HEAP32[$604>>2]|0;
    $606 = $605 ^ $400;
    HEAP32[$604>>2] = $606;
    $607 = (($ptree) + 100|0);
    $608 = HEAP32[$607>>2]|0;
    $609 = $608 ^ $405;
    HEAP32[$607>>2] = $609;
    $610 = (($ptree) + 236|0);
    $611 = HEAP32[$610>>2]|0;
    $612 = $611 ^ $393;
    HEAP32[$610>>2] = $612;
    $613 = (($ptree) + 240|0);
    $614 = HEAP32[$613>>2]|0;
    $615 = $614 ^ $398;
    HEAP32[$613>>2] = $615;
    $616 = (($ptree) + 244|0);
    $617 = HEAP32[$616>>2]|0;
    $618 = $617 ^ $403;
    HEAP32[$616>>2] = $618;
    $619 = (($ptree) + 476|0);
    $620 = HEAP32[$619>>2]|0;
    $621 = $620 ^ $395;
    HEAP32[$619>>2] = $621;
    $622 = (($ptree) + 480|0);
    $623 = HEAP32[$622>>2]|0;
    $624 = $623 ^ $400;
    HEAP32[$622>>2] = $624;
    $625 = (($ptree) + 484|0);
    $626 = HEAP32[$625>>2]|0;
    $627 = $626 ^ $405;
    HEAP32[$625>>2] = $627;
    $628 = (34169288 + ($2<<3)|0);
    $629 = $628;
    $630 = $629;
    $631 = HEAP32[$630>>2]|0;
    $632 = (($629) + 4)|0;
    $633 = $632;
    $634 = HEAP32[$633>>2]|0;
    $635 = (34164104 + ($1<<3)|0);
    $636 = $635;
    $637 = $636;
    $638 = HEAP32[$637>>2]|0;
    $639 = (($636) + 4)|0;
    $640 = $639;
    $641 = HEAP32[$640>>2]|0;
    $642 = $638 ^ $631;
    $643 = $641 ^ $634;
    $644 = $ptree;
    $645 = $644;
    $646 = HEAP32[$645>>2]|0;
    $647 = (($644) + 4)|0;
    $648 = $647;
    $649 = HEAP32[$648>>2]|0;
    $650 = $642 ^ $646;
    $651 = $643 ^ $649;
    $652 = $ptree;
    $653 = $652;
    HEAP32[$653>>2] = $650;
    $654 = (($652) + 4)|0;
    $655 = $654;
    HEAP32[$655>>2] = $651;
    $656 = HEAP32[$21>>2]|0;
    $657 = (($656) + 126)|0;
    HEAP32[$21>>2] = $657;
    $658 = ((($ptree) + ($2)|0) + 512|0);
    HEAP8[$658>>0] = 12;
    break L14;
    break;
   }
   case 6:  {
    $659 = (($ptree) + 68|0);
    $660 = HEAP32[$659>>2]|0;
    $661 = $660 ^ $395;
    HEAP32[$659>>2] = $661;
    $662 = (($ptree) + 72|0);
    $663 = HEAP32[$662>>2]|0;
    $664 = $663 ^ $400;
    HEAP32[$662>>2] = $664;
    $665 = (($ptree) + 76|0);
    $666 = HEAP32[$665>>2]|0;
    $667 = $666 ^ $405;
    HEAP32[$665>>2] = $667;
    $668 = (($ptree) + 116|0);
    $669 = HEAP32[$668>>2]|0;
    $670 = $669 ^ $396;
    HEAP32[$668>>2] = $670;
    $671 = (($ptree) + 120|0);
    $672 = HEAP32[$671>>2]|0;
    $673 = $672 ^ $401;
    HEAP32[$671>>2] = $673;
    $674 = (($ptree) + 124|0);
    $675 = HEAP32[$674>>2]|0;
    $676 = $675 ^ $406;
    HEAP32[$674>>2] = $676;
    $677 = (($ptree) + 260|0);
    $678 = HEAP32[$677>>2]|0;
    $679 = $678 ^ $393;
    HEAP32[$677>>2] = $679;
    $680 = (($ptree) + 264|0);
    $681 = HEAP32[$680>>2]|0;
    $682 = $681 ^ $398;
    HEAP32[$680>>2] = $682;
    $683 = (($ptree) + 268|0);
    $684 = HEAP32[$683>>2]|0;
    $685 = $684 ^ $403;
    HEAP32[$683>>2] = $685;
    $686 = (($ptree) + 308|0);
    $687 = HEAP32[$686>>2]|0;
    $688 = $687 ^ $395;
    HEAP32[$686>>2] = $688;
    $689 = (($ptree) + 312|0);
    $690 = HEAP32[$689>>2]|0;
    $691 = $690 ^ $400;
    HEAP32[$689>>2] = $691;
    $692 = (($ptree) + 316|0);
    $693 = HEAP32[$692>>2]|0;
    $694 = $693 ^ $405;
    HEAP32[$692>>2] = $694;
    $695 = (34169936 + ($2<<3)|0);
    $696 = $695;
    $697 = $696;
    $698 = HEAP32[$697>>2]|0;
    $699 = (($696) + 4)|0;
    $700 = $699;
    $701 = HEAP32[$700>>2]|0;
    $702 = (34165400 + ($1<<3)|0);
    $703 = $702;
    $704 = $703;
    $705 = HEAP32[$704>>2]|0;
    $706 = (($703) + 4)|0;
    $707 = $706;
    $708 = HEAP32[$707>>2]|0;
    $709 = $705 ^ $698;
    $710 = $708 ^ $701;
    $711 = $ptree;
    $712 = $711;
    $713 = HEAP32[$712>>2]|0;
    $714 = (($711) + 4)|0;
    $715 = $714;
    $716 = HEAP32[$715>>2]|0;
    $717 = $709 ^ $713;
    $718 = $710 ^ $716;
    $719 = $ptree;
    $720 = $719;
    HEAP32[$720>>2] = $717;
    $721 = (($719) + 4)|0;
    $722 = $721;
    HEAP32[$722>>2] = $718;
    $723 = HEAP32[$21>>2]|0;
    $724 = (($723) + 258)|0;
    HEAP32[$21>>2] = $724;
    $725 = ((($ptree) + ($2)|0) + 512|0);
    HEAP8[$725>>0] = 14;
    break L14;
    break;
   }
   default: {
    $726 = (($ptree) + 68|0);
    $727 = HEAP32[$726>>2]|0;
    $728 = $727 ^ $395;
    HEAP32[$726>>2] = $728;
    $729 = (($ptree) + 72|0);
    $730 = HEAP32[$729>>2]|0;
    $731 = $730 ^ $400;
    HEAP32[$729>>2] = $731;
    $732 = (($ptree) + 76|0);
    $733 = HEAP32[$732>>2]|0;
    $734 = $733 ^ $405;
    HEAP32[$732>>2] = $734;
    $735 = (($ptree) + 140|0);
    $736 = HEAP32[$735>>2]|0;
    $737 = $736 ^ $396;
    HEAP32[$735>>2] = $737;
    $738 = (($ptree) + 144|0);
    $739 = HEAP32[$738>>2]|0;
    $740 = $739 ^ $401;
    HEAP32[$738>>2] = $740;
    $741 = (($ptree) + 148|0);
    $742 = HEAP32[$741>>2]|0;
    $743 = $742 ^ $406;
    HEAP32[$741>>2] = $743;
    $744 = (($ptree) + 284|0);
    $745 = HEAP32[$744>>2]|0;
    $746 = $745 ^ $393;
    HEAP32[$744>>2] = $746;
    $747 = (($ptree) + 288|0);
    $748 = HEAP32[$747>>2]|0;
    $749 = $748 ^ $398;
    HEAP32[$747>>2] = $749;
    $750 = (($ptree) + 292|0);
    $751 = HEAP32[$750>>2]|0;
    $752 = $751 ^ $403;
    HEAP32[$750>>2] = $752;
    $753 = (($ptree) + 332|0);
    $754 = HEAP32[$753>>2]|0;
    $755 = $754 ^ $395;
    HEAP32[$753>>2] = $755;
    $756 = (($ptree) + 336|0);
    $757 = HEAP32[$756>>2]|0;
    $758 = $757 ^ $400;
    HEAP32[$756>>2] = $758;
    $759 = (($ptree) + 340|0);
    $760 = HEAP32[$759>>2]|0;
    $761 = $760 ^ $405;
    HEAP32[$759>>2] = $761;
    $762 = (34170584 + ($2<<3)|0);
    $763 = $762;
    $764 = $763;
    $765 = HEAP32[$764>>2]|0;
    $766 = (($763) + 4)|0;
    $767 = $766;
    $768 = HEAP32[$767>>2]|0;
    $769 = (34166048 + ($1<<3)|0);
    $770 = $769;
    $771 = $770;
    $772 = HEAP32[$771>>2]|0;
    $773 = (($770) + 4)|0;
    $774 = $773;
    $775 = HEAP32[$774>>2]|0;
    $776 = $772 ^ $765;
    $777 = $775 ^ $768;
    $778 = $ptree;
    $779 = $778;
    $780 = HEAP32[$779>>2]|0;
    $781 = (($778) + 4)|0;
    $782 = $781;
    $783 = HEAP32[$782>>2]|0;
    $784 = $776 ^ $780;
    $785 = $777 ^ $783;
    $786 = $ptree;
    $787 = $786;
    HEAP32[$787>>2] = $784;
    $788 = (($786) + 4)|0;
    $789 = $788;
    HEAP32[$789>>2] = $785;
    $790 = HEAP32[$21>>2]|0;
    $791 = (($790) + 303)|0;
    HEAP32[$21>>2] = $791;
    $792 = ((($ptree) + ($2)|0) + 512|0);
    HEAP8[$792>>0] = 15;
    break L14;
   }
   }
  }
 } while(0);
 do {
  switch ($390|0) {
  case 4:  {
   $1557 = (($ptree) + 248|0);
   $1558 = HEAP32[$1557>>2]|0;
   $1559 = $1558 ^ $395;
   HEAP32[$1557>>2] = $1559;
   $1560 = (($ptree) + 252|0);
   $1561 = HEAP32[$1560>>2]|0;
   $1562 = $1561 ^ $400;
   HEAP32[$1560>>2] = $1562;
   $1563 = (($ptree) + 256|0);
   $1564 = HEAP32[$1563>>2]|0;
   $1565 = $1564 ^ $405;
   HEAP32[$1563>>2] = $1565;
   $1566 = (34173480 + ($2<<3)|0);
   $1567 = $1566;
   $1568 = $1567;
   $1569 = HEAP32[$1568>>2]|0;
   $1570 = (($1567) + 4)|0;
   $1571 = $1570;
   $1572 = HEAP32[$1571>>2]|0;
   $1573 = $ptree;
   $1574 = $1573;
   $1575 = HEAP32[$1574>>2]|0;
   $1576 = (($1573) + 4)|0;
   $1577 = $1576;
   $1578 = HEAP32[$1577>>2]|0;
   $1579 = $1575 ^ $1569;
   $1580 = $1578 ^ $1572;
   $1581 = $ptree;
   $1582 = $1581;
   HEAP32[$1582>>2] = $1579;
   $1583 = (($1581) + 4)|0;
   $1584 = $1583;
   HEAP32[$1584>>2] = $1580;
   $1585 = HEAP32[$18>>2]|0;
   $1586 = (($1585) + 2048)|0;
   HEAP32[$18>>2] = $1586;
   $1587 = HEAP32[$21>>2]|0;
   $1588 = (($1587) + 738)|0;
   HEAP32[$21>>2] = $1588;
   break;
  }
  case 5:  {
   $1589 = (($ptree) + 392|0);
   $1590 = HEAP32[$1589>>2]|0;
   $1591 = $1590 ^ $395;
   HEAP32[$1589>>2] = $1591;
   $1592 = (($ptree) + 396|0);
   $1593 = HEAP32[$1592>>2]|0;
   $1594 = $1593 ^ $400;
   HEAP32[$1592>>2] = $1594;
   $1595 = (($ptree) + 400|0);
   $1596 = HEAP32[$1595>>2]|0;
   $1597 = $1596 ^ $405;
   HEAP32[$1595>>2] = $1597;
   $1598 = (34174128 + ($2<<3)|0);
   $1599 = $1598;
   $1600 = $1599;
   $1601 = HEAP32[$1600>>2]|0;
   $1602 = (($1599) + 4)|0;
   $1603 = $1602;
   $1604 = HEAP32[$1603>>2]|0;
   $1605 = $ptree;
   $1606 = $1605;
   $1607 = HEAP32[$1606>>2]|0;
   $1608 = (($1605) + 4)|0;
   $1609 = $1608;
   $1610 = HEAP32[$1609>>2]|0;
   $1611 = $1607 ^ $1601;
   $1612 = $1610 ^ $1604;
   $1613 = $ptree;
   $1614 = $1613;
   HEAP32[$1614>>2] = $1611;
   $1615 = (($1613) + 4)|0;
   $1616 = $1615;
   HEAP32[$1616>>2] = $1612;
   $1617 = HEAP32[$18>>2]|0;
   $1618 = (($1617) + 16384)|0;
   HEAP32[$18>>2] = $1618;
   $1619 = HEAP32[$21>>2]|0;
   $1620 = (($1619) + 888)|0;
   HEAP32[$21>>2] = $1620;
   $1621 = (($ptree) + 104|0);
   $1622 = HEAP32[$1621>>2]|0;
   $1623 = $1622 ^ $395;
   HEAP32[$1621>>2] = $1623;
   $1624 = (($ptree) + 108|0);
   $1625 = HEAP32[$1624>>2]|0;
   $1626 = $1625 ^ $400;
   HEAP32[$1624>>2] = $1626;
   $1627 = (($ptree) + 112|0);
   $1628 = HEAP32[$1627>>2]|0;
   $1629 = $1628 ^ $405;
   HEAP32[$1627>>2] = $1629;
   break;
  }
  case 6:  {
   $1630 = (($ptree) + 272|0);
   $1631 = HEAP32[$1630>>2]|0;
   $1632 = $1631 ^ $395;
   HEAP32[$1630>>2] = $1632;
   $1633 = (($ptree) + 276|0);
   $1634 = HEAP32[$1633>>2]|0;
   $1635 = $1634 ^ $400;
   HEAP32[$1633>>2] = $1635;
   $1636 = (($ptree) + 280|0);
   $1637 = HEAP32[$1636>>2]|0;
   $1638 = $1637 ^ $405;
   HEAP32[$1636>>2] = $1638;
   $1639 = (34174776 + ($2<<3)|0);
   $1640 = $1639;
   $1641 = $1640;
   $1642 = HEAP32[$1641>>2]|0;
   $1643 = (($1640) + 4)|0;
   $1644 = $1643;
   $1645 = HEAP32[$1644>>2]|0;
   $1646 = $ptree;
   $1647 = $1646;
   $1648 = HEAP32[$1647>>2]|0;
   $1649 = (($1646) + 4)|0;
   $1650 = $1649;
   $1651 = HEAP32[$1650>>2]|0;
   $1652 = $1648 ^ $1642;
   $1653 = $1651 ^ $1645;
   $1654 = $ptree;
   $1655 = $1654;
   HEAP32[$1655>>2] = $1652;
   $1656 = (($1654) + 4)|0;
   $1657 = $1656;
   HEAP32[$1657>>2] = $1653;
   $1658 = HEAP32[$18>>2]|0;
   $1659 = (($1658) + 131072)|0;
   HEAP32[$18>>2] = $1659;
   $1660 = HEAP32[$21>>2]|0;
   $1661 = (($1660) + 1138)|0;
   HEAP32[$21>>2] = $1661;
   $1662 = (($ptree) + 128|0);
   $1663 = HEAP32[$1662>>2]|0;
   $1664 = $1663 ^ $395;
   HEAP32[$1662>>2] = $1664;
   $1665 = (($ptree) + 132|0);
   $1666 = HEAP32[$1665>>2]|0;
   $1667 = $1666 ^ $400;
   HEAP32[$1665>>2] = $1667;
   $1668 = (($ptree) + 136|0);
   $1669 = HEAP32[$1668>>2]|0;
   $1670 = $1669 ^ $405;
   HEAP32[$1668>>2] = $1670;
   break;
  }
  case 7:  {
   $1671 = (($ptree) + 296|0);
   $1672 = HEAP32[$1671>>2]|0;
   $1673 = $1672 ^ $395;
   HEAP32[$1671>>2] = $1673;
   $1674 = (($ptree) + 300|0);
   $1675 = HEAP32[$1674>>2]|0;
   $1676 = $1675 ^ $400;
   HEAP32[$1674>>2] = $1676;
   $1677 = (($ptree) + 304|0);
   $1678 = HEAP32[$1677>>2]|0;
   $1679 = $1678 ^ $405;
   HEAP32[$1677>>2] = $1679;
   $1680 = (34175424 + ($2<<3)|0);
   $1681 = $1680;
   $1682 = $1681;
   $1683 = HEAP32[$1682>>2]|0;
   $1684 = (($1681) + 4)|0;
   $1685 = $1684;
   $1686 = HEAP32[$1685>>2]|0;
   $1687 = $ptree;
   $1688 = $1687;
   $1689 = HEAP32[$1688>>2]|0;
   $1690 = (($1687) + 4)|0;
   $1691 = $1690;
   $1692 = HEAP32[$1691>>2]|0;
   $1693 = $1689 ^ $1683;
   $1694 = $1692 ^ $1686;
   $1695 = $ptree;
   $1696 = $1695;
   HEAP32[$1696>>2] = $1693;
   $1697 = (($1695) + 4)|0;
   $1698 = $1697;
   HEAP32[$1698>>2] = $1694;
   $1699 = HEAP32[$18>>2]|0;
   $1700 = (($1699) + 524288)|0;
   HEAP32[$18>>2] = $1700;
   $1701 = HEAP32[$21>>2]|0;
   $1702 = (($1701) + 1284)|0;
   HEAP32[$21>>2] = $1702;
   $1703 = (($ptree) + 152|0);
   $1704 = HEAP32[$1703>>2]|0;
   $1705 = $1704 ^ $395;
   HEAP32[$1703>>2] = $1705;
   $1706 = (($ptree) + 156|0);
   $1707 = HEAP32[$1706>>2]|0;
   $1708 = $1707 ^ $400;
   HEAP32[$1706>>2] = $1708;
   $1709 = (($ptree) + 160|0);
   $1710 = HEAP32[$1709>>2]|0;
   $1711 = $1710 ^ $405;
   HEAP32[$1709>>2] = $1711;
   break;
  }
  case 9:  {
   $1712 = (($ptree) + 416|0);
   $1713 = HEAP32[$1712>>2]|0;
   $1714 = $1713 ^ $395;
   HEAP32[$1712>>2] = $1714;
   $1715 = (($ptree) + 420|0);
   $1716 = HEAP32[$1715>>2]|0;
   $1717 = $1716 ^ $400;
   HEAP32[$1715>>2] = $1717;
   $1718 = (($ptree) + 424|0);
   $1719 = HEAP32[$1718>>2]|0;
   $1720 = $1719 ^ $405;
   HEAP32[$1718>>2] = $1720;
   $1721 = (34176720 + ($2<<3)|0);
   $1722 = $1721;
   $1723 = $1722;
   $1724 = HEAP32[$1723>>2]|0;
   $1725 = (($1722) + 4)|0;
   $1726 = $1725;
   $1727 = HEAP32[$1726>>2]|0;
   $1728 = $ptree;
   $1729 = $1728;
   $1730 = HEAP32[$1729>>2]|0;
   $1731 = (($1728) + 4)|0;
   $1732 = $1731;
   $1733 = HEAP32[$1732>>2]|0;
   $1734 = $1730 ^ $1724;
   $1735 = $1733 ^ $1727;
   $1736 = $ptree;
   $1737 = $1736;
   HEAP32[$1737>>2] = $1734;
   $1738 = (($1736) + 4)|0;
   $1739 = $1738;
   HEAP32[$1739>>2] = $1735;
   $1740 = HEAP32[$18>>2]|0;
   $1741 = (($1740) + 1)|0;
   HEAP32[$18>>2] = $1741;
   $1742 = HEAP32[$21>>2]|0;
   $1743 = (($1742) + 621)|0;
   HEAP32[$21>>2] = $1743;
   $1744 = (($ptree) + 104|0);
   $1745 = HEAP32[$1744>>2]|0;
   $1746 = $1745 ^ $395;
   HEAP32[$1744>>2] = $1746;
   $1747 = (($ptree) + 108|0);
   $1748 = HEAP32[$1747>>2]|0;
   $1749 = $1748 ^ $400;
   HEAP32[$1747>>2] = $1749;
   $1750 = (($ptree) + 112|0);
   $1751 = HEAP32[$1750>>2]|0;
   $1752 = $1751 ^ $405;
   HEAP32[$1750>>2] = $1752;
   break;
  }
  case 1:  {
   $1445 = (($ptree) + 368|0);
   $1446 = HEAP32[$1445>>2]|0;
   $1447 = $1446 ^ $395;
   HEAP32[$1445>>2] = $1447;
   $1448 = (($ptree) + 372|0);
   $1449 = HEAP32[$1448>>2]|0;
   $1450 = $1449 ^ $400;
   HEAP32[$1448>>2] = $1450;
   $1451 = (($ptree) + 376|0);
   $1452 = HEAP32[$1451>>2]|0;
   $1453 = $1452 ^ $405;
   HEAP32[$1451>>2] = $1453;
   $1454 = (34171536 + ($2<<3)|0);
   $1455 = $1454;
   $1456 = $1455;
   $1457 = HEAP32[$1456>>2]|0;
   $1458 = (($1455) + 4)|0;
   $1459 = $1458;
   $1460 = HEAP32[$1459>>2]|0;
   $1461 = $ptree;
   $1462 = $1461;
   $1463 = HEAP32[$1462>>2]|0;
   $1464 = (($1461) + 4)|0;
   $1465 = $1464;
   $1466 = HEAP32[$1465>>2]|0;
   $1467 = $1463 ^ $1457;
   $1468 = $1466 ^ $1460;
   $1469 = $ptree;
   $1470 = $1469;
   HEAP32[$1470>>2] = $1467;
   $1471 = (($1469) + 4)|0;
   $1472 = $1471;
   HEAP32[$1472>>2] = $1468;
   $1473 = HEAP32[$18>>2]|0;
   $1474 = (($1473) + 1)|0;
   HEAP32[$18>>2] = $1474;
   $1475 = HEAP32[$21>>2]|0;
   $1476 = (($1475) + 174)|0;
   HEAP32[$21>>2] = $1476;
   $1477 = (($2) + 9)|0;
   $1478 = (34156304 + (($1477*12)|0)|0);
   $1479 = HEAP32[$1478>>2]|0;
   $1480 = (($ptree) + 176|0);
   $1481 = HEAP32[$1480>>2]|0;
   $1482 = $1481 ^ $1479;
   HEAP32[$1480>>2] = $1482;
   $1483 = ((34156304 + (($1477*12)|0)|0) + 4|0);
   $1484 = HEAP32[$1483>>2]|0;
   $1485 = (($ptree) + 180|0);
   $1486 = HEAP32[$1485>>2]|0;
   $1487 = $1486 ^ $1484;
   HEAP32[$1485>>2] = $1487;
   $1488 = ((34156304 + (($1477*12)|0)|0) + 8|0);
   $1489 = HEAP32[$1488>>2]|0;
   $1490 = (($ptree) + 184|0);
   $1491 = HEAP32[$1490>>2]|0;
   $1492 = $1491 ^ $1489;
   HEAP32[$1490>>2] = $1492;
   break;
  }
  case 2:  {
   $1493 = (($ptree) + 200|0);
   $1494 = HEAP32[$1493>>2]|0;
   $1495 = $1494 ^ $395;
   HEAP32[$1493>>2] = $1495;
   $1496 = (($ptree) + 204|0);
   $1497 = HEAP32[$1496>>2]|0;
   $1498 = $1497 ^ $400;
   HEAP32[$1496>>2] = $1498;
   $1499 = (($ptree) + 208|0);
   $1500 = HEAP32[$1499>>2]|0;
   $1501 = $1500 ^ $405;
   HEAP32[$1499>>2] = $1501;
   $1502 = (34172184 + ($2<<3)|0);
   $1503 = $1502;
   $1504 = $1503;
   $1505 = HEAP32[$1504>>2]|0;
   $1506 = (($1503) + 4)|0;
   $1507 = $1506;
   $1508 = HEAP32[$1507>>2]|0;
   $1509 = $ptree;
   $1510 = $1509;
   $1511 = HEAP32[$1510>>2]|0;
   $1512 = (($1509) + 4)|0;
   $1513 = $1512;
   $1514 = HEAP32[$1513>>2]|0;
   $1515 = $1511 ^ $1505;
   $1516 = $1514 ^ $1508;
   $1517 = $ptree;
   $1518 = $1517;
   HEAP32[$1518>>2] = $1515;
   $1519 = (($1517) + 4)|0;
   $1520 = $1519;
   HEAP32[$1520>>2] = $1516;
   $1521 = HEAP32[$18>>2]|0;
   $1522 = (($1521) + 32)|0;
   HEAP32[$18>>2] = $1522;
   $1523 = HEAP32[$21>>2]|0;
   $1524 = (($1523) + 464)|0;
   HEAP32[$21>>2] = $1524;
   break;
  }
  case 3:  {
   $1525 = (($ptree) + 224|0);
   $1526 = HEAP32[$1525>>2]|0;
   $1527 = $1526 ^ $395;
   HEAP32[$1525>>2] = $1527;
   $1528 = (($ptree) + 228|0);
   $1529 = HEAP32[$1528>>2]|0;
   $1530 = $1529 ^ $400;
   HEAP32[$1528>>2] = $1530;
   $1531 = (($ptree) + 232|0);
   $1532 = HEAP32[$1531>>2]|0;
   $1533 = $1532 ^ $405;
   HEAP32[$1531>>2] = $1533;
   $1534 = (34172832 + ($2<<3)|0);
   $1535 = $1534;
   $1536 = $1535;
   $1537 = HEAP32[$1536>>2]|0;
   $1538 = (($1535) + 4)|0;
   $1539 = $1538;
   $1540 = HEAP32[$1539>>2]|0;
   $1541 = $ptree;
   $1542 = $1541;
   $1543 = HEAP32[$1542>>2]|0;
   $1544 = (($1541) + 4)|0;
   $1545 = $1544;
   $1546 = HEAP32[$1545>>2]|0;
   $1547 = $1543 ^ $1537;
   $1548 = $1546 ^ $1540;
   $1549 = $ptree;
   $1550 = $1549;
   HEAP32[$1550>>2] = $1547;
   $1551 = (($1549) + 4)|0;
   $1552 = $1551;
   HEAP32[$1552>>2] = $1548;
   $1553 = HEAP32[$18>>2]|0;
   $1554 = (($1553) + 256)|0;
   HEAP32[$18>>2] = $1554;
   $1555 = HEAP32[$21>>2]|0;
   $1556 = (($1555) + 514)|0;
   HEAP32[$21>>2] = $1556;
   break;
  }
  case 10:  {
   $1753 = (($ptree) + 440|0);
   $1754 = HEAP32[$1753>>2]|0;
   $1755 = $1754 ^ $395;
   HEAP32[$1753>>2] = $1755;
   $1756 = (($ptree) + 444|0);
   $1757 = HEAP32[$1756>>2]|0;
   $1758 = $1757 ^ $400;
   HEAP32[$1756>>2] = $1758;
   $1759 = (($ptree) + 448|0);
   $1760 = HEAP32[$1759>>2]|0;
   $1761 = $1760 ^ $405;
   HEAP32[$1759>>2] = $1761;
   $1762 = (34177368 + ($2<<3)|0);
   $1763 = $1762;
   $1764 = $1763;
   $1765 = HEAP32[$1764>>2]|0;
   $1766 = (($1763) + 4)|0;
   $1767 = $1766;
   $1768 = HEAP32[$1767>>2]|0;
   $1769 = $ptree;
   $1770 = $1769;
   $1771 = HEAP32[$1770>>2]|0;
   $1772 = (($1769) + 4)|0;
   $1773 = $1772;
   $1774 = HEAP32[$1773>>2]|0;
   $1775 = $1771 ^ $1765;
   $1776 = $1774 ^ $1768;
   $1777 = $ptree;
   $1778 = $1777;
   HEAP32[$1778>>2] = $1775;
   $1779 = (($1777) + 4)|0;
   $1780 = $1779;
   HEAP32[$1780>>2] = $1776;
   $1781 = HEAP32[$18>>2]|0;
   $1782 = (($1781) + 32)|0;
   HEAP32[$18>>2] = $1782;
   $1783 = HEAP32[$21>>2]|0;
   $1784 = (($1783) + 721)|0;
   HEAP32[$21>>2] = $1784;
   $1785 = (($ptree) + 104|0);
   $1786 = HEAP32[$1785>>2]|0;
   $1787 = $1786 ^ $395;
   HEAP32[$1785>>2] = $1787;
   $1788 = (($ptree) + 108|0);
   $1789 = HEAP32[$1788>>2]|0;
   $1790 = $1789 ^ $400;
   HEAP32[$1788>>2] = $1790;
   $1791 = (($ptree) + 112|0);
   $1792 = HEAP32[$1791>>2]|0;
   $1793 = $1792 ^ $405;
   HEAP32[$1791>>2] = $1793;
   break;
  }
  case 11:  {
   $1794 = (($ptree) + 464|0);
   $1795 = HEAP32[$1794>>2]|0;
   $1796 = $1795 ^ $395;
   HEAP32[$1794>>2] = $1796;
   $1797 = (($ptree) + 468|0);
   $1798 = HEAP32[$1797>>2]|0;
   $1799 = $1798 ^ $400;
   HEAP32[$1797>>2] = $1799;
   $1800 = (($ptree) + 472|0);
   $1801 = HEAP32[$1800>>2]|0;
   $1802 = $1801 ^ $405;
   HEAP32[$1800>>2] = $1802;
   $1803 = (34178016 + ($2<<3)|0);
   $1804 = $1803;
   $1805 = $1804;
   $1806 = HEAP32[$1805>>2]|0;
   $1807 = (($1804) + 4)|0;
   $1808 = $1807;
   $1809 = HEAP32[$1808>>2]|0;
   $1810 = $ptree;
   $1811 = $1810;
   $1812 = HEAP32[$1811>>2]|0;
   $1813 = (($1810) + 4)|0;
   $1814 = $1813;
   $1815 = HEAP32[$1814>>2]|0;
   $1816 = $1812 ^ $1806;
   $1817 = $1815 ^ $1809;
   $1818 = $ptree;
   $1819 = $1818;
   HEAP32[$1819>>2] = $1816;
   $1820 = (($1818) + 4)|0;
   $1821 = $1820;
   HEAP32[$1821>>2] = $1817;
   $1822 = HEAP32[$18>>2]|0;
   $1823 = (($1822) + 256)|0;
   HEAP32[$18>>2] = $1823;
   $1824 = HEAP32[$21>>2]|0;
   $1825 = (($1824) + 767)|0;
   HEAP32[$21>>2] = $1825;
   $1826 = (($ptree) + 104|0);
   $1827 = HEAP32[$1826>>2]|0;
   $1828 = $1827 ^ $395;
   HEAP32[$1826>>2] = $1828;
   $1829 = (($ptree) + 108|0);
   $1830 = HEAP32[$1829>>2]|0;
   $1831 = $1830 ^ $400;
   HEAP32[$1829>>2] = $1831;
   $1832 = (($ptree) + 112|0);
   $1833 = HEAP32[$1832>>2]|0;
   $1834 = $1833 ^ $405;
   HEAP32[$1832>>2] = $1834;
   break;
  }
  case 14:  {
   $1876 = (($ptree) + 320|0);
   $1877 = HEAP32[$1876>>2]|0;
   $1878 = $1877 ^ $395;
   HEAP32[$1876>>2] = $1878;
   $1879 = (($ptree) + 324|0);
   $1880 = HEAP32[$1879>>2]|0;
   $1881 = $1880 ^ $400;
   HEAP32[$1879>>2] = $1881;
   $1882 = (($ptree) + 328|0);
   $1883 = HEAP32[$1882>>2]|0;
   $1884 = $1883 ^ $405;
   HEAP32[$1882>>2] = $1884;
   $1885 = (34179312 + ($2<<3)|0);
   $1886 = $1885;
   $1887 = $1886;
   $1888 = HEAP32[$1887>>2]|0;
   $1889 = (($1886) + 4)|0;
   $1890 = $1889;
   $1891 = HEAP32[$1890>>2]|0;
   $1892 = $ptree;
   $1893 = $1892;
   $1894 = HEAP32[$1893>>2]|0;
   $1895 = (($1892) + 4)|0;
   $1896 = $1895;
   $1897 = HEAP32[$1896>>2]|0;
   $1898 = $1894 ^ $1888;
   $1899 = $1897 ^ $1891;
   $1900 = $ptree;
   $1901 = $1900;
   HEAP32[$1901>>2] = $1898;
   $1902 = (($1900) + 4)|0;
   $1903 = $1902;
   HEAP32[$1903>>2] = $1899;
   $1904 = HEAP32[$18>>2]|0;
   $1905 = (($1904) + 131072)|0;
   HEAP32[$18>>2] = $1905;
   $1906 = HEAP32[$21>>2]|0;
   $1907 = (($1906) + 1396)|0;
   HEAP32[$21>>2] = $1907;
   $1908 = (($ptree) + 80|0);
   $1909 = HEAP32[$1908>>2]|0;
   $1910 = $1909 ^ $395;
   HEAP32[$1908>>2] = $1910;
   $1911 = (($ptree) + 84|0);
   $1912 = HEAP32[$1911>>2]|0;
   $1913 = $1912 ^ $400;
   HEAP32[$1911>>2] = $1913;
   $1914 = (($ptree) + 88|0);
   $1915 = HEAP32[$1914>>2]|0;
   $1916 = $1915 ^ $405;
   HEAP32[$1914>>2] = $1916;
   $1917 = (($ptree) + 128|0);
   $1918 = HEAP32[$1917>>2]|0;
   $1919 = $1918 ^ $395;
   HEAP32[$1917>>2] = $1919;
   $1920 = (($ptree) + 132|0);
   $1921 = HEAP32[$1920>>2]|0;
   $1922 = $1921 ^ $400;
   HEAP32[$1920>>2] = $1922;
   $1923 = (($ptree) + 136|0);
   $1924 = HEAP32[$1923>>2]|0;
   $1925 = $1924 ^ $405;
   HEAP32[$1923>>2] = $1925;
   break;
  }
  case 0:  {
   $2030 = (34157280 + (($1*12)|0)|0);
   $2031 = HEAP32[$2030>>2]|0;
   $2032 = (34157280 + (($2*12)|0)|0);
   $2033 = HEAP32[$2032>>2]|0;
   $2034 = $2033 | $2031;
   $2035 = (($ptree) + 32|0);
   $2036 = HEAP32[$2035>>2]|0;
   $2037 = $2036 ^ $2034;
   HEAP32[$2035>>2] = $2037;
   $2038 = ((34157280 + (($1*12)|0)|0) + 4|0);
   $2039 = HEAP32[$2038>>2]|0;
   $2040 = ((34157280 + (($2*12)|0)|0) + 4|0);
   $2041 = HEAP32[$2040>>2]|0;
   $2042 = $2041 | $2039;
   $2043 = (($ptree) + 36|0);
   $2044 = HEAP32[$2043>>2]|0;
   $2045 = $2044 ^ $2042;
   HEAP32[$2043>>2] = $2045;
   $2046 = ((34157280 + (($1*12)|0)|0) + 8|0);
   $2047 = HEAP32[$2046>>2]|0;
   $2048 = ((34157280 + (($2*12)|0)|0) + 8|0);
   $2049 = HEAP32[$2048>>2]|0;
   $2050 = $2049 | $2047;
   $2051 = (($ptree) + 40|0);
   $2052 = HEAP32[$2051>>2]|0;
   $2053 = $2052 ^ $2050;
   HEAP32[$2051>>2] = $2053;
   $2054 = (34159232 + (($1*12)|0)|0);
   $2055 = HEAP32[$2054>>2]|0;
   $2056 = (34159232 + (($2*12)|0)|0);
   $2057 = HEAP32[$2056>>2]|0;
   $2058 = $2057 | $2055;
   $2059 = (($ptree) + 56|0);
   $2060 = HEAP32[$2059>>2]|0;
   $2061 = $2060 ^ $2058;
   HEAP32[$2059>>2] = $2061;
   $2062 = ((34159232 + (($1*12)|0)|0) + 4|0);
   $2063 = HEAP32[$2062>>2]|0;
   $2064 = ((34159232 + (($2*12)|0)|0) + 4|0);
   $2065 = HEAP32[$2064>>2]|0;
   $2066 = $2065 | $2063;
   $2067 = (($ptree) + 60|0);
   $2068 = HEAP32[$2067>>2]|0;
   $2069 = $2068 ^ $2066;
   HEAP32[$2067>>2] = $2069;
   $2070 = ((34159232 + (($1*12)|0)|0) + 8|0);
   $2071 = HEAP32[$2070>>2]|0;
   $2072 = ((34159232 + (($2*12)|0)|0) + 8|0);
   $2073 = HEAP32[$2072>>2]|0;
   $2074 = $2073 | $2071;
   $2075 = (($ptree) + 64|0);
   $2076 = HEAP32[$2075>>2]|0;
   $2077 = $2076 ^ $2074;
   HEAP32[$2075>>2] = $2077;
   $2078 = (34158256 + (($1*12)|0)|0);
   $2079 = HEAP32[$2078>>2]|0;
   $2080 = (34158256 + (($2*12)|0)|0);
   $2081 = HEAP32[$2080>>2]|0;
   $2082 = $2081 | $2079;
   $2083 = (($ptree) + 44|0);
   $2084 = HEAP32[$2083>>2]|0;
   $2085 = $2084 ^ $2082;
   HEAP32[$2083>>2] = $2085;
   $2086 = ((34158256 + (($1*12)|0)|0) + 4|0);
   $2087 = HEAP32[$2086>>2]|0;
   $2088 = ((34158256 + (($2*12)|0)|0) + 4|0);
   $2089 = HEAP32[$2088>>2]|0;
   $2090 = $2089 | $2087;
   $2091 = (($ptree) + 48|0);
   $2092 = HEAP32[$2091>>2]|0;
   $2093 = $2092 ^ $2090;
   HEAP32[$2091>>2] = $2093;
   $2094 = ((34158256 + (($1*12)|0)|0) + 8|0);
   $2095 = HEAP32[$2094>>2]|0;
   $2096 = ((34158256 + (($2*12)|0)|0) + 8|0);
   $2097 = HEAP32[$2096>>2]|0;
   $2098 = $2097 | $2095;
   $2099 = (($ptree) + 52|0);
   $2100 = HEAP32[$2099>>2]|0;
   $2101 = $2100 ^ $2098;
   HEAP32[$2099>>2] = $2101;
   STACKTOP = sp;return;
   break;
  }
  case 12:  {
   $1835 = (($ptree) + 488|0);
   $1836 = HEAP32[$1835>>2]|0;
   $1837 = $1836 ^ $395;
   HEAP32[$1835>>2] = $1837;
   $1838 = (($ptree) + 492|0);
   $1839 = HEAP32[$1838>>2]|0;
   $1840 = $1839 ^ $400;
   HEAP32[$1838>>2] = $1840;
   $1841 = (($ptree) + 496|0);
   $1842 = HEAP32[$1841>>2]|0;
   $1843 = $1842 ^ $405;
   HEAP32[$1841>>2] = $1843;
   $1844 = (34178664 + ($2<<3)|0);
   $1845 = $1844;
   $1846 = $1845;
   $1847 = HEAP32[$1846>>2]|0;
   $1848 = (($1845) + 4)|0;
   $1849 = $1848;
   $1850 = HEAP32[$1849>>2]|0;
   $1851 = $ptree;
   $1852 = $1851;
   $1853 = HEAP32[$1852>>2]|0;
   $1854 = (($1851) + 4)|0;
   $1855 = $1854;
   $1856 = HEAP32[$1855>>2]|0;
   $1857 = $1853 ^ $1847;
   $1858 = $1856 ^ $1850;
   $1859 = $ptree;
   $1860 = $1859;
   HEAP32[$1860>>2] = $1857;
   $1861 = (($1859) + 4)|0;
   $1862 = $1861;
   HEAP32[$1862>>2] = $1858;
   $1863 = HEAP32[$18>>2]|0;
   $1864 = (($1863) + 2048)|0;
   HEAP32[$18>>2] = $1864;
   $1865 = HEAP32[$21>>2]|0;
   $1866 = (($1865) + 864)|0;
   HEAP32[$21>>2] = $1866;
   $1867 = (($ptree) + 104|0);
   $1868 = HEAP32[$1867>>2]|0;
   $1869 = $1868 ^ $395;
   HEAP32[$1867>>2] = $1869;
   $1870 = (($ptree) + 108|0);
   $1871 = HEAP32[$1870>>2]|0;
   $1872 = $1871 ^ $400;
   HEAP32[$1870>>2] = $1872;
   $1873 = (($ptree) + 112|0);
   $1874 = HEAP32[$1873>>2]|0;
   $1875 = $1874 ^ $405;
   HEAP32[$1873>>2] = $1875;
   break;
  }
  default: {
   $1926 = (($ptree) + 344|0);
   $1927 = HEAP32[$1926>>2]|0;
   $1928 = $1927 ^ $395;
   HEAP32[$1926>>2] = $1928;
   $1929 = (($ptree) + 348|0);
   $1930 = HEAP32[$1929>>2]|0;
   $1931 = $1930 ^ $400;
   HEAP32[$1929>>2] = $1931;
   $1932 = (($ptree) + 352|0);
   $1933 = HEAP32[$1932>>2]|0;
   $1934 = $1933 ^ $405;
   HEAP32[$1932>>2] = $1934;
   $1935 = (34179960 + ($2<<3)|0);
   $1936 = $1935;
   $1937 = $1936;
   $1938 = HEAP32[$1937>>2]|0;
   $1939 = (($1936) + 4)|0;
   $1940 = $1939;
   $1941 = HEAP32[$1940>>2]|0;
   $1942 = $ptree;
   $1943 = $1942;
   $1944 = HEAP32[$1943>>2]|0;
   $1945 = (($1942) + 4)|0;
   $1946 = $1945;
   $1947 = HEAP32[$1946>>2]|0;
   $1948 = $1944 ^ $1938;
   $1949 = $1947 ^ $1941;
   $1950 = $ptree;
   $1951 = $1950;
   HEAP32[$1951>>2] = $1948;
   $1952 = (($1950) + 4)|0;
   $1953 = $1952;
   HEAP32[$1953>>2] = $1949;
   $1954 = HEAP32[$18>>2]|0;
   $1955 = (($1954) + 524288)|0;
   HEAP32[$18>>2] = $1955;
   $1956 = HEAP32[$21>>2]|0;
   $1957 = (($1956) + 1587)|0;
   HEAP32[$21>>2] = $1957;
   $1958 = (($ptree) + 80|0);
   $1959 = HEAP32[$1958>>2]|0;
   $1960 = $1959 ^ $395;
   HEAP32[$1958>>2] = $1960;
   $1961 = (($ptree) + 84|0);
   $1962 = HEAP32[$1961>>2]|0;
   $1963 = $1962 ^ $400;
   HEAP32[$1961>>2] = $1963;
   $1964 = (($ptree) + 88|0);
   $1965 = HEAP32[$1964>>2]|0;
   $1966 = $1965 ^ $405;
   HEAP32[$1964>>2] = $1966;
   $1967 = (($ptree) + 152|0);
   $1968 = HEAP32[$1967>>2]|0;
   $1969 = $1968 ^ $395;
   HEAP32[$1967>>2] = $1969;
   $1970 = (($ptree) + 156|0);
   $1971 = HEAP32[$1970>>2]|0;
   $1972 = $1971 ^ $400;
   HEAP32[$1970>>2] = $1972;
   $1973 = (($ptree) + 160|0);
   $1974 = HEAP32[$1973>>2]|0;
   $1975 = $1974 ^ $405;
   HEAP32[$1973>>2] = $1975;
  }
  }
 } while(0);
 $1976 = (($ptree) + 20|0);
 $1977 = HEAP32[$1976>>2]|0;
 $1978 = $1977 ^ $395;
 HEAP32[$1976>>2] = $1978;
 $1979 = (($ptree) + 24|0);
 $1980 = HEAP32[$1979>>2]|0;
 $1981 = $1980 ^ $400;
 HEAP32[$1979>>2] = $1981;
 $1982 = (($ptree) + 28|0);
 $1983 = HEAP32[$1982>>2]|0;
 $1984 = $1983 ^ $405;
 HEAP32[$1982>>2] = $1984;
 $1985 = (34157280 + (($1*12)|0)|0);
 $1986 = HEAP32[$1985>>2]|0;
 $1987 = (($ptree) + 32|0);
 $1988 = HEAP32[$1987>>2]|0;
 $1989 = $1988 ^ $1986;
 HEAP32[$1987>>2] = $1989;
 $1990 = ((34157280 + (($1*12)|0)|0) + 4|0);
 $1991 = HEAP32[$1990>>2]|0;
 $1992 = (($ptree) + 36|0);
 $1993 = HEAP32[$1992>>2]|0;
 $1994 = $1993 ^ $1991;
 HEAP32[$1992>>2] = $1994;
 $1995 = ((34157280 + (($1*12)|0)|0) + 8|0);
 $1996 = HEAP32[$1995>>2]|0;
 $1997 = (($ptree) + 40|0);
 $1998 = HEAP32[$1997>>2]|0;
 $1999 = $1998 ^ $1996;
 HEAP32[$1997>>2] = $1999;
 $2000 = (34158256 + (($1*12)|0)|0);
 $2001 = HEAP32[$2000>>2]|0;
 $2002 = (($ptree) + 44|0);
 $2003 = HEAP32[$2002>>2]|0;
 $2004 = $2003 ^ $2001;
 HEAP32[$2002>>2] = $2004;
 $2005 = ((34158256 + (($1*12)|0)|0) + 4|0);
 $2006 = HEAP32[$2005>>2]|0;
 $2007 = (($ptree) + 48|0);
 $2008 = HEAP32[$2007>>2]|0;
 $2009 = $2008 ^ $2006;
 HEAP32[$2007>>2] = $2009;
 $2010 = ((34158256 + (($1*12)|0)|0) + 8|0);
 $2011 = HEAP32[$2010>>2]|0;
 $2012 = (($ptree) + 52|0);
 $2013 = HEAP32[$2012>>2]|0;
 $2014 = $2013 ^ $2011;
 HEAP32[$2012>>2] = $2014;
 $2015 = (34159232 + (($1*12)|0)|0);
 $2016 = HEAP32[$2015>>2]|0;
 $2017 = (($ptree) + 56|0);
 $2018 = HEAP32[$2017>>2]|0;
 $2019 = $2018 ^ $2016;
 HEAP32[$2017>>2] = $2019;
 $2020 = ((34159232 + (($1*12)|0)|0) + 4|0);
 $2021 = HEAP32[$2020>>2]|0;
 $2022 = (($ptree) + 60|0);
 $2023 = HEAP32[$2022>>2]|0;
 $2024 = $2023 ^ $2021;
 HEAP32[$2022>>2] = $2024;
 $2025 = ((34159232 + (($1*12)|0)|0) + 8|0);
 $2026 = HEAP32[$2025>>2]|0;
 $2027 = (($ptree) + 64|0);
 $2028 = HEAP32[$2027>>2]|0;
 $2029 = $2028 ^ $2026;
 HEAP32[$2027>>2] = $2029;
 STACKTOP = sp;return;
}
function _make_move_w($ptree,$move,$ply) {
 $ptree = $ptree|0;
 $move = $move|0;
 $ply = $ply|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
 var $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
 var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
 var $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $move >>> 7;
 $1 = $0 & 127;
 $2 = $move & 127;
 $3 = (($ptree) + 572204|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($ply) + -1)|0;
 $6 = (($5) + ($4))|0;
 $7 = $ptree;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($ptree) + ($6<<3)|0) + 600|0);
 $14 = $13;
 $15 = $14;
 HEAP32[$15>>2] = $9;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($ptree) + 500|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($ptree) + ($6<<2)|0) + 75444|0);
 HEAP32[$20>>2] = $19;
 $21 = (($ptree) + 508|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22&65535;
 $24 = ((($ptree) + ($ply<<1)|0) + 571300|0);
 HEAP16[$24>>1] = $23;
 $25 = (($ply) + 1)|0;
 $26 = ((($ptree) + ($25<<2)|0) + 571556|0);
 HEAP32[$26>>2] = 2147483647;
 $27 = ($1>>>0)>(80);
 if ($27) {
  switch ($1|0) {
  case 81:  {
   $28 = (($2) + 9)|0;
   $29 = (34156304 + (($28*12)|0)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($ptree) + 176|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $32 ^ $30;
   HEAP32[$31>>2] = $33;
   $34 = ((34156304 + (($28*12)|0)|0) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($ptree) + 180|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $37 ^ $35;
   HEAP32[$36>>2] = $38;
   $39 = ((34156304 + (($28*12)|0)|0) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($ptree) + 184|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42 ^ $40;
   HEAP32[$41>>2] = $43;
   $44 = (34156304 + (($2*12)|0)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($ptree) + 368|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $47 ^ $45;
   HEAP32[$46>>2] = $48;
   $49 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($ptree) + 372|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52 ^ $50;
   HEAP32[$51>>2] = $53;
   $54 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($ptree) + 376|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 ^ $55;
   HEAP32[$56>>2] = $58;
   $59 = (34171536 + ($2<<3)|0);
   $60 = $59;
   $61 = $60;
   $62 = HEAP32[$61>>2]|0;
   $63 = (($60) + 4)|0;
   $64 = $63;
   $65 = HEAP32[$64>>2]|0;
   $66 = $ptree;
   $67 = $66;
   $68 = HEAP32[$67>>2]|0;
   $69 = (($66) + 4)|0;
   $70 = $69;
   $71 = HEAP32[$70>>2]|0;
   $72 = $68 ^ $62;
   $73 = $71 ^ $65;
   $74 = $ptree;
   $75 = $74;
   HEAP32[$75>>2] = $72;
   $76 = (($74) + 4)|0;
   $77 = $76;
   HEAP32[$77>>2] = $73;
   $78 = (($ptree) + 504|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (($79) + -1)|0;
   HEAP32[$78>>2] = $80;
   $81 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$81>>0] = -1;
   $340 = $45;$344 = $50;$348 = $55;
   break;
  }
  case 82:  {
   $82 = (34156304 + (($2*12)|0)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($ptree) + 200|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = $85 ^ $83;
   HEAP32[$84>>2] = $86;
   $87 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (($ptree) + 204|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $90 ^ $88;
   HEAP32[$89>>2] = $91;
   $92 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($ptree) + 208|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $95 ^ $93;
   HEAP32[$94>>2] = $96;
   $97 = (34172184 + ($2<<3)|0);
   $98 = $97;
   $99 = $98;
   $100 = HEAP32[$99>>2]|0;
   $101 = (($98) + 4)|0;
   $102 = $101;
   $103 = HEAP32[$102>>2]|0;
   $104 = $ptree;
   $105 = $104;
   $106 = HEAP32[$105>>2]|0;
   $107 = (($104) + 4)|0;
   $108 = $107;
   $109 = HEAP32[$108>>2]|0;
   $110 = $106 ^ $100;
   $111 = $109 ^ $103;
   $112 = $ptree;
   $113 = $112;
   HEAP32[$113>>2] = $110;
   $114 = (($112) + 4)|0;
   $115 = $114;
   HEAP32[$115>>2] = $111;
   $116 = (($ptree) + 504|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($117) + -32)|0;
   HEAP32[$116>>2] = $118;
   $119 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$119>>0] = -2;
   $340 = $83;$344 = $88;$348 = $93;
   break;
  }
  case 83:  {
   $120 = (34156304 + (($2*12)|0)|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (($ptree) + 224|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = $123 ^ $121;
   HEAP32[$122>>2] = $124;
   $125 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (($ptree) + 228|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = $128 ^ $126;
   HEAP32[$127>>2] = $129;
   $130 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (($ptree) + 232|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $133 ^ $131;
   HEAP32[$132>>2] = $134;
   $135 = (34172832 + ($2<<3)|0);
   $136 = $135;
   $137 = $136;
   $138 = HEAP32[$137>>2]|0;
   $139 = (($136) + 4)|0;
   $140 = $139;
   $141 = HEAP32[$140>>2]|0;
   $142 = $ptree;
   $143 = $142;
   $144 = HEAP32[$143>>2]|0;
   $145 = (($142) + 4)|0;
   $146 = $145;
   $147 = HEAP32[$146>>2]|0;
   $148 = $144 ^ $138;
   $149 = $147 ^ $141;
   $150 = $ptree;
   $151 = $150;
   HEAP32[$151>>2] = $148;
   $152 = (($150) + 4)|0;
   $153 = $152;
   HEAP32[$153>>2] = $149;
   $154 = (($ptree) + 504|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = (($155) + -256)|0;
   HEAP32[$154>>2] = $156;
   $157 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$157>>0] = -3;
   $340 = $121;$344 = $126;$348 = $131;
   break;
  }
  case 84:  {
   $158 = (34156304 + (($2*12)|0)|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = (($ptree) + 248|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = $161 ^ $159;
   HEAP32[$160>>2] = $162;
   $163 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = (($ptree) + 252|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $166 ^ $164;
   HEAP32[$165>>2] = $167;
   $168 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = (($ptree) + 256|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = $171 ^ $169;
   HEAP32[$170>>2] = $172;
   $173 = (34173480 + ($2<<3)|0);
   $174 = $173;
   $175 = $174;
   $176 = HEAP32[$175>>2]|0;
   $177 = (($174) + 4)|0;
   $178 = $177;
   $179 = HEAP32[$178>>2]|0;
   $180 = $ptree;
   $181 = $180;
   $182 = HEAP32[$181>>2]|0;
   $183 = (($180) + 4)|0;
   $184 = $183;
   $185 = HEAP32[$184>>2]|0;
   $186 = $182 ^ $176;
   $187 = $185 ^ $179;
   $188 = $ptree;
   $189 = $188;
   HEAP32[$189>>2] = $186;
   $190 = (($188) + 4)|0;
   $191 = $190;
   HEAP32[$191>>2] = $187;
   $192 = (($ptree) + 504|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = (($193) + -2048)|0;
   HEAP32[$192>>2] = $194;
   $195 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$195>>0] = -4;
   $340 = $159;$344 = $164;$348 = $169;
   break;
  }
  case 85:  {
   $196 = (34156304 + (($2*12)|0)|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = (($ptree) + 392|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = $199 ^ $197;
   HEAP32[$198>>2] = $200;
   $201 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = (($ptree) + 396|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = $204 ^ $202;
   HEAP32[$203>>2] = $205;
   $206 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = (($ptree) + 400|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = $209 ^ $207;
   HEAP32[$208>>2] = $210;
   $211 = (34174128 + ($2<<3)|0);
   $212 = $211;
   $213 = $212;
   $214 = HEAP32[$213>>2]|0;
   $215 = (($212) + 4)|0;
   $216 = $215;
   $217 = HEAP32[$216>>2]|0;
   $218 = $ptree;
   $219 = $218;
   $220 = HEAP32[$219>>2]|0;
   $221 = (($218) + 4)|0;
   $222 = $221;
   $223 = HEAP32[$222>>2]|0;
   $224 = $220 ^ $214;
   $225 = $223 ^ $217;
   $226 = $ptree;
   $227 = $226;
   HEAP32[$227>>2] = $224;
   $228 = (($226) + 4)|0;
   $229 = $228;
   HEAP32[$229>>2] = $225;
   $230 = (($ptree) + 504|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = (($231) + -16384)|0;
   HEAP32[$230>>2] = $232;
   $233 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$233>>0] = -5;
   $234 = (($ptree) + 104|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = $235 ^ $197;
   HEAP32[$234>>2] = $236;
   $237 = (($ptree) + 108|0);
   $238 = HEAP32[$237>>2]|0;
   $239 = $238 ^ $202;
   HEAP32[$237>>2] = $239;
   $240 = (($ptree) + 112|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = $241 ^ $207;
   HEAP32[$240>>2] = $242;
   $340 = $197;$344 = $202;$348 = $207;
   break;
  }
  case 86:  {
   $243 = (34156304 + (($2*12)|0)|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = (($ptree) + 272|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = $246 ^ $244;
   HEAP32[$245>>2] = $247;
   $248 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = (($ptree) + 276|0);
   $251 = HEAP32[$250>>2]|0;
   $252 = $251 ^ $249;
   HEAP32[$250>>2] = $252;
   $253 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = (($ptree) + 280|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = $256 ^ $254;
   HEAP32[$255>>2] = $257;
   $258 = (34174776 + ($2<<3)|0);
   $259 = $258;
   $260 = $259;
   $261 = HEAP32[$260>>2]|0;
   $262 = (($259) + 4)|0;
   $263 = $262;
   $264 = HEAP32[$263>>2]|0;
   $265 = $ptree;
   $266 = $265;
   $267 = HEAP32[$266>>2]|0;
   $268 = (($265) + 4)|0;
   $269 = $268;
   $270 = HEAP32[$269>>2]|0;
   $271 = $267 ^ $261;
   $272 = $270 ^ $264;
   $273 = $ptree;
   $274 = $273;
   HEAP32[$274>>2] = $271;
   $275 = (($273) + 4)|0;
   $276 = $275;
   HEAP32[$276>>2] = $272;
   $277 = (($ptree) + 504|0);
   $278 = HEAP32[$277>>2]|0;
   $279 = (($278) + -131072)|0;
   HEAP32[$277>>2] = $279;
   $280 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$280>>0] = -6;
   $281 = (($ptree) + 128|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = $282 ^ $244;
   HEAP32[$281>>2] = $283;
   $284 = (($ptree) + 132|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = $285 ^ $249;
   HEAP32[$284>>2] = $286;
   $287 = (($ptree) + 136|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = $288 ^ $254;
   HEAP32[$287>>2] = $289;
   $340 = $244;$344 = $249;$348 = $254;
   break;
  }
  default: {
   $290 = (34156304 + (($2*12)|0)|0);
   $291 = HEAP32[$290>>2]|0;
   $292 = (($ptree) + 296|0);
   $293 = HEAP32[$292>>2]|0;
   $294 = $293 ^ $291;
   HEAP32[$292>>2] = $294;
   $295 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = (($ptree) + 300|0);
   $298 = HEAP32[$297>>2]|0;
   $299 = $298 ^ $296;
   HEAP32[$297>>2] = $299;
   $300 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = (($ptree) + 304|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = $303 ^ $301;
   HEAP32[$302>>2] = $304;
   $305 = (34175424 + ($2<<3)|0);
   $306 = $305;
   $307 = $306;
   $308 = HEAP32[$307>>2]|0;
   $309 = (($306) + 4)|0;
   $310 = $309;
   $311 = HEAP32[$310>>2]|0;
   $312 = $ptree;
   $313 = $312;
   $314 = HEAP32[$313>>2]|0;
   $315 = (($312) + 4)|0;
   $316 = $315;
   $317 = HEAP32[$316>>2]|0;
   $318 = $314 ^ $308;
   $319 = $317 ^ $311;
   $320 = $ptree;
   $321 = $320;
   HEAP32[$321>>2] = $318;
   $322 = (($320) + 4)|0;
   $323 = $322;
   HEAP32[$323>>2] = $319;
   $324 = (($ptree) + 504|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = (($325) + -524288)|0;
   HEAP32[$324>>2] = $326;
   $327 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$327>>0] = -7;
   $328 = (($ptree) + 152|0);
   $329 = HEAP32[$328>>2]|0;
   $330 = $329 ^ $291;
   HEAP32[$328>>2] = $330;
   $331 = (($ptree) + 156|0);
   $332 = HEAP32[$331>>2]|0;
   $333 = $332 ^ $296;
   HEAP32[$331>>2] = $333;
   $334 = (($ptree) + 160|0);
   $335 = HEAP32[$334>>2]|0;
   $336 = $335 ^ $301;
   HEAP32[$334>>2] = $336;
   $340 = $291;$344 = $296;$348 = $301;
  }
  }
  $337 = (($ptree) + 20|0);
  $338 = HEAP32[$337>>2]|0;
  $339 = $338 ^ $340;
  HEAP32[$337>>2] = $339;
  $341 = (($ptree) + 24|0);
  $342 = HEAP32[$341>>2]|0;
  $343 = $342 ^ $344;
  HEAP32[$341>>2] = $343;
  $345 = (($ptree) + 28|0);
  $346 = HEAP32[$345>>2]|0;
  $347 = $346 ^ $348;
  HEAP32[$345>>2] = $347;
  $349 = (34157280 + (($2*12)|0)|0);
  $350 = HEAP32[$349>>2]|0;
  $351 = (($ptree) + 32|0);
  $352 = HEAP32[$351>>2]|0;
  $353 = $352 ^ $350;
  HEAP32[$351>>2] = $353;
  $354 = ((34157280 + (($2*12)|0)|0) + 4|0);
  $355 = HEAP32[$354>>2]|0;
  $356 = (($ptree) + 36|0);
  $357 = HEAP32[$356>>2]|0;
  $358 = $357 ^ $355;
  HEAP32[$356>>2] = $358;
  $359 = ((34157280 + (($2*12)|0)|0) + 8|0);
  $360 = HEAP32[$359>>2]|0;
  $361 = (($ptree) + 40|0);
  $362 = HEAP32[$361>>2]|0;
  $363 = $362 ^ $360;
  HEAP32[$361>>2] = $363;
  $364 = (34158256 + (($2*12)|0)|0);
  $365 = HEAP32[$364>>2]|0;
  $366 = (($ptree) + 44|0);
  $367 = HEAP32[$366>>2]|0;
  $368 = $367 ^ $365;
  HEAP32[$366>>2] = $368;
  $369 = ((34158256 + (($2*12)|0)|0) + 4|0);
  $370 = HEAP32[$369>>2]|0;
  $371 = (($ptree) + 48|0);
  $372 = HEAP32[$371>>2]|0;
  $373 = $372 ^ $370;
  HEAP32[$371>>2] = $373;
  $374 = ((34158256 + (($2*12)|0)|0) + 8|0);
  $375 = HEAP32[$374>>2]|0;
  $376 = (($ptree) + 52|0);
  $377 = HEAP32[$376>>2]|0;
  $378 = $377 ^ $375;
  HEAP32[$376>>2] = $378;
  $379 = (34159232 + (($2*12)|0)|0);
  $380 = HEAP32[$379>>2]|0;
  $381 = (($ptree) + 56|0);
  $382 = HEAP32[$381>>2]|0;
  $383 = $382 ^ $380;
  HEAP32[$381>>2] = $383;
  $384 = ((34159232 + (($2*12)|0)|0) + 4|0);
  $385 = HEAP32[$384>>2]|0;
  $386 = (($ptree) + 60|0);
  $387 = HEAP32[$386>>2]|0;
  $388 = $387 ^ $385;
  HEAP32[$386>>2] = $388;
  $389 = ((34159232 + (($2*12)|0)|0) + 8|0);
  $390 = HEAP32[$389>>2]|0;
  $391 = (($ptree) + 64|0);
  $392 = HEAP32[$391>>2]|0;
  $393 = $392 ^ $390;
  HEAP32[$391>>2] = $393;
  STACKTOP = sp;return;
 }
 $394 = $move >>> 15;
 $395 = $394 & 15;
 $396 = $move >>> 19;
 $397 = $396 & 15;
 $398 = $move & 16384;
 $399 = (34156304 + (($1*12)|0)|0);
 $400 = HEAP32[$399>>2]|0;
 $401 = (34156304 + (($2*12)|0)|0);
 $402 = HEAP32[$401>>2]|0;
 $403 = $402 | $400;
 $404 = ((34156304 + (($1*12)|0)|0) + 4|0);
 $405 = HEAP32[$404>>2]|0;
 $406 = ((34156304 + (($2*12)|0)|0) + 4|0);
 $407 = HEAP32[$406>>2]|0;
 $408 = $407 | $405;
 $409 = ((34156304 + (($1*12)|0)|0) + 8|0);
 $410 = HEAP32[$409>>2]|0;
 $411 = ((34156304 + (($2*12)|0)|0) + 8|0);
 $412 = HEAP32[$411>>2]|0;
 $413 = $412 | $410;
 $414 = (($ptree) + 20|0);
 $415 = HEAP32[$414>>2]|0;
 $416 = $415 ^ $403;
 HEAP32[$414>>2] = $416;
 $417 = (($ptree) + 24|0);
 $418 = HEAP32[$417>>2]|0;
 $419 = $418 ^ $408;
 HEAP32[$417>>2] = $419;
 $420 = (($ptree) + 28|0);
 $421 = HEAP32[$420>>2]|0;
 $422 = $421 ^ $413;
 HEAP32[$420>>2] = $422;
 $423 = ((($ptree) + ($1)|0) + 512|0);
 HEAP8[$423>>0] = 0;
 $424 = ($398|0)==(0);
 L14: do {
  if ($424) {
   do {
    switch ($395|0) {
    case 14:  {
     $1340 = (($ptree) + 320|0);
     $1341 = HEAP32[$1340>>2]|0;
     $1342 = $1341 ^ $403;
     HEAP32[$1340>>2] = $1342;
     $1343 = (($ptree) + 324|0);
     $1344 = HEAP32[$1343>>2]|0;
     $1345 = $1344 ^ $408;
     HEAP32[$1343>>2] = $1345;
     $1346 = (($ptree) + 328|0);
     $1347 = HEAP32[$1346>>2]|0;
     $1348 = $1347 ^ $413;
     HEAP32[$1346>>2] = $1348;
     $1349 = (34179312 + ($2<<3)|0);
     $1350 = $1349;
     $1351 = $1350;
     $1352 = HEAP32[$1351>>2]|0;
     $1353 = (($1350) + 4)|0;
     $1354 = $1353;
     $1355 = HEAP32[$1354>>2]|0;
     $1356 = (34179312 + ($1<<3)|0);
     $1357 = $1356;
     $1358 = $1357;
     $1359 = HEAP32[$1358>>2]|0;
     $1360 = (($1357) + 4)|0;
     $1361 = $1360;
     $1362 = HEAP32[$1361>>2]|0;
     $1363 = $1359 ^ $1352;
     $1364 = $1362 ^ $1355;
     $1365 = $ptree;
     $1366 = $1365;
     $1367 = HEAP32[$1366>>2]|0;
     $1368 = (($1365) + 4)|0;
     $1369 = $1368;
     $1370 = HEAP32[$1369>>2]|0;
     $1371 = $1363 ^ $1367;
     $1372 = $1364 ^ $1370;
     $1373 = $ptree;
     $1374 = $1373;
     HEAP32[$1374>>2] = $1371;
     $1375 = (($1373) + 4)|0;
     $1376 = $1375;
     HEAP32[$1376>>2] = $1372;
     $1377 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$1377>>0] = -14;
     $1378 = (($ptree) + 80|0);
     $1379 = HEAP32[$1378>>2]|0;
     $1380 = $1379 ^ $403;
     HEAP32[$1378>>2] = $1380;
     $1381 = (($ptree) + 84|0);
     $1382 = HEAP32[$1381>>2]|0;
     $1383 = $1382 ^ $408;
     HEAP32[$1381>>2] = $1383;
     $1384 = (($ptree) + 88|0);
     $1385 = HEAP32[$1384>>2]|0;
     $1386 = $1385 ^ $413;
     HEAP32[$1384>>2] = $1386;
     $1387 = (($ptree) + 128|0);
     $1388 = HEAP32[$1387>>2]|0;
     $1389 = $1388 ^ $403;
     HEAP32[$1387>>2] = $1389;
     $1390 = (($ptree) + 132|0);
     $1391 = HEAP32[$1390>>2]|0;
     $1392 = $1391 ^ $408;
     HEAP32[$1390>>2] = $1392;
     $1393 = (($ptree) + 136|0);
     $1394 = HEAP32[$1393>>2]|0;
     $1395 = $1394 ^ $413;
     HEAP32[$1393>>2] = $1395;
     break L14;
     break;
    }
    case 12:  {
     $1293 = (($ptree) + 488|0);
     $1294 = HEAP32[$1293>>2]|0;
     $1295 = $1294 ^ $403;
     HEAP32[$1293>>2] = $1295;
     $1296 = (($ptree) + 492|0);
     $1297 = HEAP32[$1296>>2]|0;
     $1298 = $1297 ^ $408;
     HEAP32[$1296>>2] = $1298;
     $1299 = (($ptree) + 496|0);
     $1300 = HEAP32[$1299>>2]|0;
     $1301 = $1300 ^ $413;
     HEAP32[$1299>>2] = $1301;
     $1302 = (34178664 + ($2<<3)|0);
     $1303 = $1302;
     $1304 = $1303;
     $1305 = HEAP32[$1304>>2]|0;
     $1306 = (($1303) + 4)|0;
     $1307 = $1306;
     $1308 = HEAP32[$1307>>2]|0;
     $1309 = (34178664 + ($1<<3)|0);
     $1310 = $1309;
     $1311 = $1310;
     $1312 = HEAP32[$1311>>2]|0;
     $1313 = (($1310) + 4)|0;
     $1314 = $1313;
     $1315 = HEAP32[$1314>>2]|0;
     $1316 = $1312 ^ $1305;
     $1317 = $1315 ^ $1308;
     $1318 = $ptree;
     $1319 = $1318;
     $1320 = HEAP32[$1319>>2]|0;
     $1321 = (($1318) + 4)|0;
     $1322 = $1321;
     $1323 = HEAP32[$1322>>2]|0;
     $1324 = $1316 ^ $1320;
     $1325 = $1317 ^ $1323;
     $1326 = $ptree;
     $1327 = $1326;
     HEAP32[$1327>>2] = $1324;
     $1328 = (($1326) + 4)|0;
     $1329 = $1328;
     HEAP32[$1329>>2] = $1325;
     $1330 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$1330>>0] = -12;
     $1331 = (($ptree) + 104|0);
     $1332 = HEAP32[$1331>>2]|0;
     $1333 = $1332 ^ $403;
     HEAP32[$1331>>2] = $1333;
     $1334 = (($ptree) + 108|0);
     $1335 = HEAP32[$1334>>2]|0;
     $1336 = $1335 ^ $408;
     HEAP32[$1334>>2] = $1336;
     $1337 = (($ptree) + 112|0);
     $1338 = HEAP32[$1337>>2]|0;
     $1339 = $1338 ^ $413;
     HEAP32[$1337>>2] = $1339;
     break L14;
     break;
    }
    case 1:  {
     $800 = (($ptree) + 368|0);
     $801 = HEAP32[$800>>2]|0;
     $802 = $801 ^ $403;
     HEAP32[$800>>2] = $802;
     $803 = (($ptree) + 372|0);
     $804 = HEAP32[$803>>2]|0;
     $805 = $804 ^ $408;
     HEAP32[$803>>2] = $805;
     $806 = (($ptree) + 376|0);
     $807 = HEAP32[$806>>2]|0;
     $808 = $807 ^ $413;
     HEAP32[$806>>2] = $808;
     $809 = (34171536 + ($2<<3)|0);
     $810 = $809;
     $811 = $810;
     $812 = HEAP32[$811>>2]|0;
     $813 = (($810) + 4)|0;
     $814 = $813;
     $815 = HEAP32[$814>>2]|0;
     $816 = (34171536 + ($1<<3)|0);
     $817 = $816;
     $818 = $817;
     $819 = HEAP32[$818>>2]|0;
     $820 = (($817) + 4)|0;
     $821 = $820;
     $822 = HEAP32[$821>>2]|0;
     $823 = $819 ^ $812;
     $824 = $822 ^ $815;
     $825 = $ptree;
     $826 = $825;
     $827 = HEAP32[$826>>2]|0;
     $828 = (($825) + 4)|0;
     $829 = $828;
     $830 = HEAP32[$829>>2]|0;
     $831 = $823 ^ $827;
     $832 = $824 ^ $830;
     $833 = $ptree;
     $834 = $833;
     HEAP32[$834>>2] = $831;
     $835 = (($833) + 4)|0;
     $836 = $835;
     HEAP32[$836>>2] = $832;
     $837 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$837>>0] = -1;
     $838 = (($2) + 9)|0;
     $839 = (34156304 + (($838*12)|0)|0);
     $840 = HEAP32[$839>>2]|0;
     $841 = (($ptree) + 176|0);
     $842 = HEAP32[$841>>2]|0;
     $843 = $842 ^ $840;
     $844 = ((34156304 + (($838*12)|0)|0) + 4|0);
     $845 = HEAP32[$844>>2]|0;
     $846 = (($ptree) + 180|0);
     $847 = HEAP32[$846>>2]|0;
     $848 = $847 ^ $845;
     $849 = ((34156304 + (($838*12)|0)|0) + 8|0);
     $850 = HEAP32[$849>>2]|0;
     $851 = (($ptree) + 184|0);
     $852 = HEAP32[$851>>2]|0;
     $853 = $852 ^ $850;
     $854 = $843 ^ $402;
     HEAP32[$841>>2] = $854;
     $855 = $848 ^ $407;
     HEAP32[$846>>2] = $855;
     $856 = $853 ^ $412;
     HEAP32[$851>>2] = $856;
     break L14;
     break;
    }
    case 2:  {
     $857 = (($ptree) + 200|0);
     $858 = HEAP32[$857>>2]|0;
     $859 = $858 ^ $403;
     HEAP32[$857>>2] = $859;
     $860 = (($ptree) + 204|0);
     $861 = HEAP32[$860>>2]|0;
     $862 = $861 ^ $408;
     HEAP32[$860>>2] = $862;
     $863 = (($ptree) + 208|0);
     $864 = HEAP32[$863>>2]|0;
     $865 = $864 ^ $413;
     HEAP32[$863>>2] = $865;
     $866 = (34172184 + ($2<<3)|0);
     $867 = $866;
     $868 = $867;
     $869 = HEAP32[$868>>2]|0;
     $870 = (($867) + 4)|0;
     $871 = $870;
     $872 = HEAP32[$871>>2]|0;
     $873 = (34172184 + ($1<<3)|0);
     $874 = $873;
     $875 = $874;
     $876 = HEAP32[$875>>2]|0;
     $877 = (($874) + 4)|0;
     $878 = $877;
     $879 = HEAP32[$878>>2]|0;
     $880 = $876 ^ $869;
     $881 = $879 ^ $872;
     $882 = $ptree;
     $883 = $882;
     $884 = HEAP32[$883>>2]|0;
     $885 = (($882) + 4)|0;
     $886 = $885;
     $887 = HEAP32[$886>>2]|0;
     $888 = $880 ^ $884;
     $889 = $881 ^ $887;
     $890 = $ptree;
     $891 = $890;
     HEAP32[$891>>2] = $888;
     $892 = (($890) + 4)|0;
     $893 = $892;
     HEAP32[$893>>2] = $889;
     $894 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$894>>0] = -2;
     break L14;
     break;
    }
    case 3:  {
     $895 = (($ptree) + 224|0);
     $896 = HEAP32[$895>>2]|0;
     $897 = $896 ^ $403;
     HEAP32[$895>>2] = $897;
     $898 = (($ptree) + 228|0);
     $899 = HEAP32[$898>>2]|0;
     $900 = $899 ^ $408;
     HEAP32[$898>>2] = $900;
     $901 = (($ptree) + 232|0);
     $902 = HEAP32[$901>>2]|0;
     $903 = $902 ^ $413;
     HEAP32[$901>>2] = $903;
     $904 = (34172832 + ($2<<3)|0);
     $905 = $904;
     $906 = $905;
     $907 = HEAP32[$906>>2]|0;
     $908 = (($905) + 4)|0;
     $909 = $908;
     $910 = HEAP32[$909>>2]|0;
     $911 = (34172832 + ($1<<3)|0);
     $912 = $911;
     $913 = $912;
     $914 = HEAP32[$913>>2]|0;
     $915 = (($912) + 4)|0;
     $916 = $915;
     $917 = HEAP32[$916>>2]|0;
     $918 = $914 ^ $907;
     $919 = $917 ^ $910;
     $920 = $ptree;
     $921 = $920;
     $922 = HEAP32[$921>>2]|0;
     $923 = (($920) + 4)|0;
     $924 = $923;
     $925 = HEAP32[$924>>2]|0;
     $926 = $918 ^ $922;
     $927 = $919 ^ $925;
     $928 = $ptree;
     $929 = $928;
     HEAP32[$929>>2] = $926;
     $930 = (($928) + 4)|0;
     $931 = $930;
     HEAP32[$931>>2] = $927;
     $932 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$932>>0] = -3;
     break L14;
     break;
    }
    case 4:  {
     $933 = (($ptree) + 248|0);
     $934 = HEAP32[$933>>2]|0;
     $935 = $934 ^ $403;
     HEAP32[$933>>2] = $935;
     $936 = (($ptree) + 252|0);
     $937 = HEAP32[$936>>2]|0;
     $938 = $937 ^ $408;
     HEAP32[$936>>2] = $938;
     $939 = (($ptree) + 256|0);
     $940 = HEAP32[$939>>2]|0;
     $941 = $940 ^ $413;
     HEAP32[$939>>2] = $941;
     $942 = (34173480 + ($2<<3)|0);
     $943 = $942;
     $944 = $943;
     $945 = HEAP32[$944>>2]|0;
     $946 = (($943) + 4)|0;
     $947 = $946;
     $948 = HEAP32[$947>>2]|0;
     $949 = (34173480 + ($1<<3)|0);
     $950 = $949;
     $951 = $950;
     $952 = HEAP32[$951>>2]|0;
     $953 = (($950) + 4)|0;
     $954 = $953;
     $955 = HEAP32[$954>>2]|0;
     $956 = $952 ^ $945;
     $957 = $955 ^ $948;
     $958 = $ptree;
     $959 = $958;
     $960 = HEAP32[$959>>2]|0;
     $961 = (($958) + 4)|0;
     $962 = $961;
     $963 = HEAP32[$962>>2]|0;
     $964 = $956 ^ $960;
     $965 = $957 ^ $963;
     $966 = $ptree;
     $967 = $966;
     HEAP32[$967>>2] = $964;
     $968 = (($966) + 4)|0;
     $969 = $968;
     HEAP32[$969>>2] = $965;
     $970 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$970>>0] = -4;
     break L14;
     break;
    }
    case 5:  {
     $971 = (($ptree) + 392|0);
     $972 = HEAP32[$971>>2]|0;
     $973 = $972 ^ $403;
     HEAP32[$971>>2] = $973;
     $974 = (($ptree) + 396|0);
     $975 = HEAP32[$974>>2]|0;
     $976 = $975 ^ $408;
     HEAP32[$974>>2] = $976;
     $977 = (($ptree) + 400|0);
     $978 = HEAP32[$977>>2]|0;
     $979 = $978 ^ $413;
     HEAP32[$977>>2] = $979;
     $980 = (34174128 + ($2<<3)|0);
     $981 = $980;
     $982 = $981;
     $983 = HEAP32[$982>>2]|0;
     $984 = (($981) + 4)|0;
     $985 = $984;
     $986 = HEAP32[$985>>2]|0;
     $987 = (34174128 + ($1<<3)|0);
     $988 = $987;
     $989 = $988;
     $990 = HEAP32[$989>>2]|0;
     $991 = (($988) + 4)|0;
     $992 = $991;
     $993 = HEAP32[$992>>2]|0;
     $994 = $990 ^ $983;
     $995 = $993 ^ $986;
     $996 = $ptree;
     $997 = $996;
     $998 = HEAP32[$997>>2]|0;
     $999 = (($996) + 4)|0;
     $1000 = $999;
     $1001 = HEAP32[$1000>>2]|0;
     $1002 = $994 ^ $998;
     $1003 = $995 ^ $1001;
     $1004 = $ptree;
     $1005 = $1004;
     HEAP32[$1005>>2] = $1002;
     $1006 = (($1004) + 4)|0;
     $1007 = $1006;
     HEAP32[$1007>>2] = $1003;
     $1008 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$1008>>0] = -5;
     $1009 = (($ptree) + 104|0);
     $1010 = HEAP32[$1009>>2]|0;
     $1011 = $1010 ^ $403;
     HEAP32[$1009>>2] = $1011;
     $1012 = (($ptree) + 108|0);
     $1013 = HEAP32[$1012>>2]|0;
     $1014 = $1013 ^ $408;
     HEAP32[$1012>>2] = $1014;
     $1015 = (($ptree) + 112|0);
     $1016 = HEAP32[$1015>>2]|0;
     $1017 = $1016 ^ $413;
     HEAP32[$1015>>2] = $1017;
     break L14;
     break;
    }
    case 6:  {
     $1018 = (($ptree) + 272|0);
     $1019 = HEAP32[$1018>>2]|0;
     $1020 = $1019 ^ $403;
     HEAP32[$1018>>2] = $1020;
     $1021 = (($ptree) + 276|0);
     $1022 = HEAP32[$1021>>2]|0;
     $1023 = $1022 ^ $408;
     HEAP32[$1021>>2] = $1023;
     $1024 = (($ptree) + 280|0);
     $1025 = HEAP32[$1024>>2]|0;
     $1026 = $1025 ^ $413;
     HEAP32[$1024>>2] = $1026;
     $1027 = (34174776 + ($2<<3)|0);
     $1028 = $1027;
     $1029 = $1028;
     $1030 = HEAP32[$1029>>2]|0;
     $1031 = (($1028) + 4)|0;
     $1032 = $1031;
     $1033 = HEAP32[$1032>>2]|0;
     $1034 = (34174776 + ($1<<3)|0);
     $1035 = $1034;
     $1036 = $1035;
     $1037 = HEAP32[$1036>>2]|0;
     $1038 = (($1035) + 4)|0;
     $1039 = $1038;
     $1040 = HEAP32[$1039>>2]|0;
     $1041 = $1037 ^ $1030;
     $1042 = $1040 ^ $1033;
     $1043 = $ptree;
     $1044 = $1043;
     $1045 = HEAP32[$1044>>2]|0;
     $1046 = (($1043) + 4)|0;
     $1047 = $1046;
     $1048 = HEAP32[$1047>>2]|0;
     $1049 = $1041 ^ $1045;
     $1050 = $1042 ^ $1048;
     $1051 = $ptree;
     $1052 = $1051;
     HEAP32[$1052>>2] = $1049;
     $1053 = (($1051) + 4)|0;
     $1054 = $1053;
     HEAP32[$1054>>2] = $1050;
     $1055 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$1055>>0] = -6;
     $1056 = (($ptree) + 128|0);
     $1057 = HEAP32[$1056>>2]|0;
     $1058 = $1057 ^ $403;
     HEAP32[$1056>>2] = $1058;
     $1059 = (($ptree) + 132|0);
     $1060 = HEAP32[$1059>>2]|0;
     $1061 = $1060 ^ $408;
     HEAP32[$1059>>2] = $1061;
     $1062 = (($ptree) + 136|0);
     $1063 = HEAP32[$1062>>2]|0;
     $1064 = $1063 ^ $413;
     HEAP32[$1062>>2] = $1064;
     break L14;
     break;
    }
    case 7:  {
     $1065 = (($ptree) + 296|0);
     $1066 = HEAP32[$1065>>2]|0;
     $1067 = $1066 ^ $403;
     HEAP32[$1065>>2] = $1067;
     $1068 = (($ptree) + 300|0);
     $1069 = HEAP32[$1068>>2]|0;
     $1070 = $1069 ^ $408;
     HEAP32[$1068>>2] = $1070;
     $1071 = (($ptree) + 304|0);
     $1072 = HEAP32[$1071>>2]|0;
     $1073 = $1072 ^ $413;
     HEAP32[$1071>>2] = $1073;
     $1074 = (34175424 + ($2<<3)|0);
     $1075 = $1074;
     $1076 = $1075;
     $1077 = HEAP32[$1076>>2]|0;
     $1078 = (($1075) + 4)|0;
     $1079 = $1078;
     $1080 = HEAP32[$1079>>2]|0;
     $1081 = (34175424 + ($1<<3)|0);
     $1082 = $1081;
     $1083 = $1082;
     $1084 = HEAP32[$1083>>2]|0;
     $1085 = (($1082) + 4)|0;
     $1086 = $1085;
     $1087 = HEAP32[$1086>>2]|0;
     $1088 = $1084 ^ $1077;
     $1089 = $1087 ^ $1080;
     $1090 = $ptree;
     $1091 = $1090;
     $1092 = HEAP32[$1091>>2]|0;
     $1093 = (($1090) + 4)|0;
     $1094 = $1093;
     $1095 = HEAP32[$1094>>2]|0;
     $1096 = $1088 ^ $1092;
     $1097 = $1089 ^ $1095;
     $1098 = $ptree;
     $1099 = $1098;
     HEAP32[$1099>>2] = $1096;
     $1100 = (($1098) + 4)|0;
     $1101 = $1100;
     HEAP32[$1101>>2] = $1097;
     $1102 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$1102>>0] = -7;
     $1103 = (($ptree) + 152|0);
     $1104 = HEAP32[$1103>>2]|0;
     $1105 = $1104 ^ $403;
     HEAP32[$1103>>2] = $1105;
     $1106 = (($ptree) + 156|0);
     $1107 = HEAP32[$1106>>2]|0;
     $1108 = $1107 ^ $408;
     HEAP32[$1106>>2] = $1108;
     $1109 = (($ptree) + 160|0);
     $1110 = HEAP32[$1109>>2]|0;
     $1111 = $1110 ^ $413;
     HEAP32[$1109>>2] = $1111;
     break L14;
     break;
    }
    case 8:  {
     $1112 = (34176072 + ($2<<3)|0);
     $1113 = $1112;
     $1114 = $1113;
     $1115 = HEAP32[$1114>>2]|0;
     $1116 = (($1113) + 4)|0;
     $1117 = $1116;
     $1118 = HEAP32[$1117>>2]|0;
     $1119 = (34176072 + ($1<<3)|0);
     $1120 = $1119;
     $1121 = $1120;
     $1122 = HEAP32[$1121>>2]|0;
     $1123 = (($1120) + 4)|0;
     $1124 = $1123;
     $1125 = HEAP32[$1124>>2]|0;
     $1126 = $1122 ^ $1115;
     $1127 = $1125 ^ $1118;
     $1128 = $ptree;
     $1129 = $1128;
     $1130 = HEAP32[$1129>>2]|0;
     $1131 = (($1128) + 4)|0;
     $1132 = $1131;
     $1133 = HEAP32[$1132>>2]|0;
     $1134 = $1126 ^ $1130;
     $1135 = $1127 ^ $1133;
     $1136 = $ptree;
     $1137 = $1136;
     HEAP32[$1137>>2] = $1134;
     $1138 = (($1136) + 4)|0;
     $1139 = $1138;
     HEAP32[$1139>>2] = $1135;
     $1140 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$1140>>0] = -8;
     $1141 = $2&255;
     $1142 = (($ptree) + 594|0);
     HEAP8[$1142>>0] = $1141;
     $1143 = (($ptree) + 80|0);
     $1144 = HEAP32[$1143>>2]|0;
     $1145 = $1144 ^ $403;
     HEAP32[$1143>>2] = $1145;
     $1146 = (($ptree) + 84|0);
     $1147 = HEAP32[$1146>>2]|0;
     $1148 = $1147 ^ $408;
     HEAP32[$1146>>2] = $1148;
     $1149 = (($ptree) + 88|0);
     $1150 = HEAP32[$1149>>2]|0;
     $1151 = $1150 ^ $413;
     HEAP32[$1149>>2] = $1151;
     break L14;
     break;
    }
    case 9:  {
     $1152 = (($ptree) + 416|0);
     $1153 = HEAP32[$1152>>2]|0;
     $1154 = $1153 ^ $403;
     HEAP32[$1152>>2] = $1154;
     $1155 = (($ptree) + 420|0);
     $1156 = HEAP32[$1155>>2]|0;
     $1157 = $1156 ^ $408;
     HEAP32[$1155>>2] = $1157;
     $1158 = (($ptree) + 424|0);
     $1159 = HEAP32[$1158>>2]|0;
     $1160 = $1159 ^ $413;
     HEAP32[$1158>>2] = $1160;
     $1161 = (34176720 + ($2<<3)|0);
     $1162 = $1161;
     $1163 = $1162;
     $1164 = HEAP32[$1163>>2]|0;
     $1165 = (($1162) + 4)|0;
     $1166 = $1165;
     $1167 = HEAP32[$1166>>2]|0;
     $1168 = (34176720 + ($1<<3)|0);
     $1169 = $1168;
     $1170 = $1169;
     $1171 = HEAP32[$1170>>2]|0;
     $1172 = (($1169) + 4)|0;
     $1173 = $1172;
     $1174 = HEAP32[$1173>>2]|0;
     $1175 = $1171 ^ $1164;
     $1176 = $1174 ^ $1167;
     $1177 = $ptree;
     $1178 = $1177;
     $1179 = HEAP32[$1178>>2]|0;
     $1180 = (($1177) + 4)|0;
     $1181 = $1180;
     $1182 = HEAP32[$1181>>2]|0;
     $1183 = $1175 ^ $1179;
     $1184 = $1176 ^ $1182;
     $1185 = $ptree;
     $1186 = $1185;
     HEAP32[$1186>>2] = $1183;
     $1187 = (($1185) + 4)|0;
     $1188 = $1187;
     HEAP32[$1188>>2] = $1184;
     $1189 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$1189>>0] = -9;
     $1190 = (($ptree) + 104|0);
     $1191 = HEAP32[$1190>>2]|0;
     $1192 = $1191 ^ $403;
     HEAP32[$1190>>2] = $1192;
     $1193 = (($ptree) + 108|0);
     $1194 = HEAP32[$1193>>2]|0;
     $1195 = $1194 ^ $408;
     HEAP32[$1193>>2] = $1195;
     $1196 = (($ptree) + 112|0);
     $1197 = HEAP32[$1196>>2]|0;
     $1198 = $1197 ^ $413;
     HEAP32[$1196>>2] = $1198;
     break L14;
     break;
    }
    case 10:  {
     $1199 = (($ptree) + 440|0);
     $1200 = HEAP32[$1199>>2]|0;
     $1201 = $1200 ^ $403;
     HEAP32[$1199>>2] = $1201;
     $1202 = (($ptree) + 444|0);
     $1203 = HEAP32[$1202>>2]|0;
     $1204 = $1203 ^ $408;
     HEAP32[$1202>>2] = $1204;
     $1205 = (($ptree) + 448|0);
     $1206 = HEAP32[$1205>>2]|0;
     $1207 = $1206 ^ $413;
     HEAP32[$1205>>2] = $1207;
     $1208 = (34177368 + ($2<<3)|0);
     $1209 = $1208;
     $1210 = $1209;
     $1211 = HEAP32[$1210>>2]|0;
     $1212 = (($1209) + 4)|0;
     $1213 = $1212;
     $1214 = HEAP32[$1213>>2]|0;
     $1215 = (34177368 + ($1<<3)|0);
     $1216 = $1215;
     $1217 = $1216;
     $1218 = HEAP32[$1217>>2]|0;
     $1219 = (($1216) + 4)|0;
     $1220 = $1219;
     $1221 = HEAP32[$1220>>2]|0;
     $1222 = $1218 ^ $1211;
     $1223 = $1221 ^ $1214;
     $1224 = $ptree;
     $1225 = $1224;
     $1226 = HEAP32[$1225>>2]|0;
     $1227 = (($1224) + 4)|0;
     $1228 = $1227;
     $1229 = HEAP32[$1228>>2]|0;
     $1230 = $1222 ^ $1226;
     $1231 = $1223 ^ $1229;
     $1232 = $ptree;
     $1233 = $1232;
     HEAP32[$1233>>2] = $1230;
     $1234 = (($1232) + 4)|0;
     $1235 = $1234;
     HEAP32[$1235>>2] = $1231;
     $1236 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$1236>>0] = -10;
     $1237 = (($ptree) + 104|0);
     $1238 = HEAP32[$1237>>2]|0;
     $1239 = $1238 ^ $403;
     HEAP32[$1237>>2] = $1239;
     $1240 = (($ptree) + 108|0);
     $1241 = HEAP32[$1240>>2]|0;
     $1242 = $1241 ^ $408;
     HEAP32[$1240>>2] = $1242;
     $1243 = (($ptree) + 112|0);
     $1244 = HEAP32[$1243>>2]|0;
     $1245 = $1244 ^ $413;
     HEAP32[$1243>>2] = $1245;
     break L14;
     break;
    }
    case 11:  {
     $1246 = (($ptree) + 464|0);
     $1247 = HEAP32[$1246>>2]|0;
     $1248 = $1247 ^ $403;
     HEAP32[$1246>>2] = $1248;
     $1249 = (($ptree) + 468|0);
     $1250 = HEAP32[$1249>>2]|0;
     $1251 = $1250 ^ $408;
     HEAP32[$1249>>2] = $1251;
     $1252 = (($ptree) + 472|0);
     $1253 = HEAP32[$1252>>2]|0;
     $1254 = $1253 ^ $413;
     HEAP32[$1252>>2] = $1254;
     $1255 = (34178016 + ($2<<3)|0);
     $1256 = $1255;
     $1257 = $1256;
     $1258 = HEAP32[$1257>>2]|0;
     $1259 = (($1256) + 4)|0;
     $1260 = $1259;
     $1261 = HEAP32[$1260>>2]|0;
     $1262 = (34178016 + ($1<<3)|0);
     $1263 = $1262;
     $1264 = $1263;
     $1265 = HEAP32[$1264>>2]|0;
     $1266 = (($1263) + 4)|0;
     $1267 = $1266;
     $1268 = HEAP32[$1267>>2]|0;
     $1269 = $1265 ^ $1258;
     $1270 = $1268 ^ $1261;
     $1271 = $ptree;
     $1272 = $1271;
     $1273 = HEAP32[$1272>>2]|0;
     $1274 = (($1271) + 4)|0;
     $1275 = $1274;
     $1276 = HEAP32[$1275>>2]|0;
     $1277 = $1269 ^ $1273;
     $1278 = $1270 ^ $1276;
     $1279 = $ptree;
     $1280 = $1279;
     HEAP32[$1280>>2] = $1277;
     $1281 = (($1279) + 4)|0;
     $1282 = $1281;
     HEAP32[$1282>>2] = $1278;
     $1283 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$1283>>0] = -11;
     $1284 = (($ptree) + 104|0);
     $1285 = HEAP32[$1284>>2]|0;
     $1286 = $1285 ^ $403;
     HEAP32[$1284>>2] = $1286;
     $1287 = (($ptree) + 108|0);
     $1288 = HEAP32[$1287>>2]|0;
     $1289 = $1288 ^ $408;
     HEAP32[$1287>>2] = $1289;
     $1290 = (($ptree) + 112|0);
     $1291 = HEAP32[$1290>>2]|0;
     $1292 = $1291 ^ $413;
     HEAP32[$1290>>2] = $1292;
     break L14;
     break;
    }
    default: {
     $1396 = (($ptree) + 344|0);
     $1397 = HEAP32[$1396>>2]|0;
     $1398 = $1397 ^ $403;
     HEAP32[$1396>>2] = $1398;
     $1399 = (($ptree) + 348|0);
     $1400 = HEAP32[$1399>>2]|0;
     $1401 = $1400 ^ $408;
     HEAP32[$1399>>2] = $1401;
     $1402 = (($ptree) + 352|0);
     $1403 = HEAP32[$1402>>2]|0;
     $1404 = $1403 ^ $413;
     HEAP32[$1402>>2] = $1404;
     $1405 = (34179960 + ($2<<3)|0);
     $1406 = $1405;
     $1407 = $1406;
     $1408 = HEAP32[$1407>>2]|0;
     $1409 = (($1406) + 4)|0;
     $1410 = $1409;
     $1411 = HEAP32[$1410>>2]|0;
     $1412 = (34179960 + ($1<<3)|0);
     $1413 = $1412;
     $1414 = $1413;
     $1415 = HEAP32[$1414>>2]|0;
     $1416 = (($1413) + 4)|0;
     $1417 = $1416;
     $1418 = HEAP32[$1417>>2]|0;
     $1419 = $1415 ^ $1408;
     $1420 = $1418 ^ $1411;
     $1421 = $ptree;
     $1422 = $1421;
     $1423 = HEAP32[$1422>>2]|0;
     $1424 = (($1421) + 4)|0;
     $1425 = $1424;
     $1426 = HEAP32[$1425>>2]|0;
     $1427 = $1419 ^ $1423;
     $1428 = $1420 ^ $1426;
     $1429 = $ptree;
     $1430 = $1429;
     HEAP32[$1430>>2] = $1427;
     $1431 = (($1429) + 4)|0;
     $1432 = $1431;
     HEAP32[$1432>>2] = $1428;
     $1433 = ((($ptree) + ($2)|0) + 512|0);
     HEAP8[$1433>>0] = -15;
     $1434 = (($ptree) + 80|0);
     $1435 = HEAP32[$1434>>2]|0;
     $1436 = $1435 ^ $403;
     HEAP32[$1434>>2] = $1436;
     $1437 = (($ptree) + 84|0);
     $1438 = HEAP32[$1437>>2]|0;
     $1439 = $1438 ^ $408;
     HEAP32[$1437>>2] = $1439;
     $1440 = (($ptree) + 88|0);
     $1441 = HEAP32[$1440>>2]|0;
     $1442 = $1441 ^ $413;
     HEAP32[$1440>>2] = $1442;
     $1443 = (($ptree) + 152|0);
     $1444 = HEAP32[$1443>>2]|0;
     $1445 = $1444 ^ $403;
     HEAP32[$1443>>2] = $1445;
     $1446 = (($ptree) + 156|0);
     $1447 = HEAP32[$1446>>2]|0;
     $1448 = $1447 ^ $408;
     HEAP32[$1446>>2] = $1448;
     $1449 = (($ptree) + 160|0);
     $1450 = HEAP32[$1449>>2]|0;
     $1451 = $1450 ^ $413;
     HEAP32[$1449>>2] = $1451;
     break L14;
    }
    }
   } while(0);
  } else {
   switch ($395|0) {
   case 6:  {
    $666 = (($ptree) + 272|0);
    $667 = HEAP32[$666>>2]|0;
    $668 = $667 ^ $400;
    HEAP32[$666>>2] = $668;
    $669 = (($ptree) + 276|0);
    $670 = HEAP32[$669>>2]|0;
    $671 = $670 ^ $405;
    HEAP32[$669>>2] = $671;
    $672 = (($ptree) + 280|0);
    $673 = HEAP32[$672>>2]|0;
    $674 = $673 ^ $410;
    HEAP32[$672>>2] = $674;
    $675 = (($ptree) + 320|0);
    $676 = HEAP32[$675>>2]|0;
    $677 = $676 ^ $402;
    HEAP32[$675>>2] = $677;
    $678 = (($ptree) + 324|0);
    $679 = HEAP32[$678>>2]|0;
    $680 = $679 ^ $407;
    HEAP32[$678>>2] = $680;
    $681 = (($ptree) + 328|0);
    $682 = HEAP32[$681>>2]|0;
    $683 = $682 ^ $412;
    HEAP32[$681>>2] = $683;
    $684 = (34179312 + ($2<<3)|0);
    $685 = $684;
    $686 = $685;
    $687 = HEAP32[$686>>2]|0;
    $688 = (($685) + 4)|0;
    $689 = $688;
    $690 = HEAP32[$689>>2]|0;
    $691 = (34174776 + ($1<<3)|0);
    $692 = $691;
    $693 = $692;
    $694 = HEAP32[$693>>2]|0;
    $695 = (($692) + 4)|0;
    $696 = $695;
    $697 = HEAP32[$696>>2]|0;
    $698 = $694 ^ $687;
    $699 = $697 ^ $690;
    $700 = $ptree;
    $701 = $700;
    $702 = HEAP32[$701>>2]|0;
    $703 = (($700) + 4)|0;
    $704 = $703;
    $705 = HEAP32[$704>>2]|0;
    $706 = $698 ^ $702;
    $707 = $699 ^ $705;
    $708 = $ptree;
    $709 = $708;
    HEAP32[$709>>2] = $706;
    $710 = (($708) + 4)|0;
    $711 = $710;
    HEAP32[$711>>2] = $707;
    $712 = HEAP32[$21>>2]|0;
    $713 = (($712) + -258)|0;
    HEAP32[$21>>2] = $713;
    $714 = ((($ptree) + ($2)|0) + 512|0);
    HEAP8[$714>>0] = -14;
    $715 = (($ptree) + 80|0);
    $716 = HEAP32[$715>>2]|0;
    $717 = $716 ^ $402;
    HEAP32[$715>>2] = $717;
    $718 = (($ptree) + 84|0);
    $719 = HEAP32[$718>>2]|0;
    $720 = $719 ^ $407;
    HEAP32[$718>>2] = $720;
    $721 = (($ptree) + 88|0);
    $722 = HEAP32[$721>>2]|0;
    $723 = $722 ^ $412;
    HEAP32[$721>>2] = $723;
    $724 = (($ptree) + 128|0);
    $725 = HEAP32[$724>>2]|0;
    $726 = $725 ^ $403;
    HEAP32[$724>>2] = $726;
    $727 = (($ptree) + 132|0);
    $728 = HEAP32[$727>>2]|0;
    $729 = $728 ^ $408;
    HEAP32[$727>>2] = $729;
    $730 = (($ptree) + 136|0);
    $731 = HEAP32[$730>>2]|0;
    $732 = $731 ^ $413;
    HEAP32[$730>>2] = $732;
    break L14;
    break;
   }
   case 3:  {
    $550 = (($ptree) + 224|0);
    $551 = HEAP32[$550>>2]|0;
    $552 = $551 ^ $400;
    HEAP32[$550>>2] = $552;
    $553 = (($ptree) + 228|0);
    $554 = HEAP32[$553>>2]|0;
    $555 = $554 ^ $405;
    HEAP32[$553>>2] = $555;
    $556 = (($ptree) + 232|0);
    $557 = HEAP32[$556>>2]|0;
    $558 = $557 ^ $410;
    HEAP32[$556>>2] = $558;
    $559 = (($ptree) + 464|0);
    $560 = HEAP32[$559>>2]|0;
    $561 = $560 ^ $402;
    HEAP32[$559>>2] = $561;
    $562 = (($ptree) + 468|0);
    $563 = HEAP32[$562>>2]|0;
    $564 = $563 ^ $407;
    HEAP32[$562>>2] = $564;
    $565 = (($ptree) + 472|0);
    $566 = HEAP32[$565>>2]|0;
    $567 = $566 ^ $412;
    HEAP32[$565>>2] = $567;
    $568 = (34178016 + ($2<<3)|0);
    $569 = $568;
    $570 = $569;
    $571 = HEAP32[$570>>2]|0;
    $572 = (($569) + 4)|0;
    $573 = $572;
    $574 = HEAP32[$573>>2]|0;
    $575 = (34172832 + ($1<<3)|0);
    $576 = $575;
    $577 = $576;
    $578 = HEAP32[$577>>2]|0;
    $579 = (($576) + 4)|0;
    $580 = $579;
    $581 = HEAP32[$580>>2]|0;
    $582 = $578 ^ $571;
    $583 = $581 ^ $574;
    $584 = $ptree;
    $585 = $584;
    $586 = HEAP32[$585>>2]|0;
    $587 = (($584) + 4)|0;
    $588 = $587;
    $589 = HEAP32[$588>>2]|0;
    $590 = $582 ^ $586;
    $591 = $583 ^ $589;
    $592 = $ptree;
    $593 = $592;
    HEAP32[$593>>2] = $590;
    $594 = (($592) + 4)|0;
    $595 = $594;
    HEAP32[$595>>2] = $591;
    $596 = HEAP32[$21>>2]|0;
    $597 = (($596) + -253)|0;
    HEAP32[$21>>2] = $597;
    $598 = ((($ptree) + ($2)|0) + 512|0);
    HEAP8[$598>>0] = -11;
    $599 = (($ptree) + 104|0);
    $600 = HEAP32[$599>>2]|0;
    $601 = $600 ^ $402;
    HEAP32[$599>>2] = $601;
    $602 = (($ptree) + 108|0);
    $603 = HEAP32[$602>>2]|0;
    $604 = $603 ^ $407;
    HEAP32[$602>>2] = $604;
    $605 = (($ptree) + 112|0);
    $606 = HEAP32[$605>>2]|0;
    $607 = $606 ^ $412;
    HEAP32[$605>>2] = $607;
    break L14;
    break;
   }
   case 4:  {
    $608 = (($ptree) + 248|0);
    $609 = HEAP32[$608>>2]|0;
    $610 = $609 ^ $400;
    HEAP32[$608>>2] = $610;
    $611 = (($ptree) + 252|0);
    $612 = HEAP32[$611>>2]|0;
    $613 = $612 ^ $405;
    HEAP32[$611>>2] = $613;
    $614 = (($ptree) + 256|0);
    $615 = HEAP32[$614>>2]|0;
    $616 = $615 ^ $410;
    HEAP32[$614>>2] = $616;
    $617 = (($ptree) + 488|0);
    $618 = HEAP32[$617>>2]|0;
    $619 = $618 ^ $402;
    HEAP32[$617>>2] = $619;
    $620 = (($ptree) + 492|0);
    $621 = HEAP32[$620>>2]|0;
    $622 = $621 ^ $407;
    HEAP32[$620>>2] = $622;
    $623 = (($ptree) + 496|0);
    $624 = HEAP32[$623>>2]|0;
    $625 = $624 ^ $412;
    HEAP32[$623>>2] = $625;
    $626 = (34178664 + ($2<<3)|0);
    $627 = $626;
    $628 = $627;
    $629 = HEAP32[$628>>2]|0;
    $630 = (($627) + 4)|0;
    $631 = $630;
    $632 = HEAP32[$631>>2]|0;
    $633 = (34173480 + ($1<<3)|0);
    $634 = $633;
    $635 = $634;
    $636 = HEAP32[$635>>2]|0;
    $637 = (($634) + 4)|0;
    $638 = $637;
    $639 = HEAP32[$638>>2]|0;
    $640 = $636 ^ $629;
    $641 = $639 ^ $632;
    $642 = $ptree;
    $643 = $642;
    $644 = HEAP32[$643>>2]|0;
    $645 = (($642) + 4)|0;
    $646 = $645;
    $647 = HEAP32[$646>>2]|0;
    $648 = $640 ^ $644;
    $649 = $641 ^ $647;
    $650 = $ptree;
    $651 = $650;
    HEAP32[$651>>2] = $648;
    $652 = (($650) + 4)|0;
    $653 = $652;
    HEAP32[$653>>2] = $649;
    $654 = HEAP32[$21>>2]|0;
    $655 = (($654) + -126)|0;
    HEAP32[$21>>2] = $655;
    $656 = ((($ptree) + ($2)|0) + 512|0);
    HEAP8[$656>>0] = -12;
    $657 = (($ptree) + 104|0);
    $658 = HEAP32[$657>>2]|0;
    $659 = $658 ^ $402;
    HEAP32[$657>>2] = $659;
    $660 = (($ptree) + 108|0);
    $661 = HEAP32[$660>>2]|0;
    $662 = $661 ^ $407;
    HEAP32[$660>>2] = $662;
    $663 = (($ptree) + 112|0);
    $664 = HEAP32[$663>>2]|0;
    $665 = $664 ^ $412;
    HEAP32[$663>>2] = $665;
    break L14;
    break;
   }
   case 2:  {
    $492 = (($ptree) + 200|0);
    $493 = HEAP32[$492>>2]|0;
    $494 = $493 ^ $400;
    HEAP32[$492>>2] = $494;
    $495 = (($ptree) + 204|0);
    $496 = HEAP32[$495>>2]|0;
    $497 = $496 ^ $405;
    HEAP32[$495>>2] = $497;
    $498 = (($ptree) + 208|0);
    $499 = HEAP32[$498>>2]|0;
    $500 = $499 ^ $410;
    HEAP32[$498>>2] = $500;
    $501 = (($ptree) + 440|0);
    $502 = HEAP32[$501>>2]|0;
    $503 = $502 ^ $402;
    HEAP32[$501>>2] = $503;
    $504 = (($ptree) + 444|0);
    $505 = HEAP32[$504>>2]|0;
    $506 = $505 ^ $407;
    HEAP32[$504>>2] = $506;
    $507 = (($ptree) + 448|0);
    $508 = HEAP32[$507>>2]|0;
    $509 = $508 ^ $412;
    HEAP32[$507>>2] = $509;
    $510 = (34177368 + ($2<<3)|0);
    $511 = $510;
    $512 = $511;
    $513 = HEAP32[$512>>2]|0;
    $514 = (($511) + 4)|0;
    $515 = $514;
    $516 = HEAP32[$515>>2]|0;
    $517 = (34172184 + ($1<<3)|0);
    $518 = $517;
    $519 = $518;
    $520 = HEAP32[$519>>2]|0;
    $521 = (($518) + 4)|0;
    $522 = $521;
    $523 = HEAP32[$522>>2]|0;
    $524 = $520 ^ $513;
    $525 = $523 ^ $516;
    $526 = $ptree;
    $527 = $526;
    $528 = HEAP32[$527>>2]|0;
    $529 = (($526) + 4)|0;
    $530 = $529;
    $531 = HEAP32[$530>>2]|0;
    $532 = $524 ^ $528;
    $533 = $525 ^ $531;
    $534 = $ptree;
    $535 = $534;
    HEAP32[$535>>2] = $532;
    $536 = (($534) + 4)|0;
    $537 = $536;
    HEAP32[$537>>2] = $533;
    $538 = HEAP32[$21>>2]|0;
    $539 = (($538) + -257)|0;
    HEAP32[$21>>2] = $539;
    $540 = ((($ptree) + ($2)|0) + 512|0);
    HEAP8[$540>>0] = -10;
    $541 = (($ptree) + 104|0);
    $542 = HEAP32[$541>>2]|0;
    $543 = $542 ^ $402;
    HEAP32[$541>>2] = $543;
    $544 = (($ptree) + 108|0);
    $545 = HEAP32[$544>>2]|0;
    $546 = $545 ^ $407;
    HEAP32[$544>>2] = $546;
    $547 = (($ptree) + 112|0);
    $548 = HEAP32[$547>>2]|0;
    $549 = $548 ^ $412;
    HEAP32[$547>>2] = $549;
    break L14;
    break;
   }
   case 1:  {
    $425 = (($ptree) + 368|0);
    $426 = HEAP32[$425>>2]|0;
    $427 = $426 ^ $400;
    HEAP32[$425>>2] = $427;
    $428 = (($ptree) + 372|0);
    $429 = HEAP32[$428>>2]|0;
    $430 = $429 ^ $405;
    HEAP32[$428>>2] = $430;
    $431 = (($ptree) + 376|0);
    $432 = HEAP32[$431>>2]|0;
    $433 = $432 ^ $410;
    HEAP32[$431>>2] = $433;
    $434 = (($ptree) + 416|0);
    $435 = HEAP32[$434>>2]|0;
    $436 = $435 ^ $402;
    HEAP32[$434>>2] = $436;
    $437 = (($ptree) + 420|0);
    $438 = HEAP32[$437>>2]|0;
    $439 = $438 ^ $407;
    HEAP32[$437>>2] = $439;
    $440 = (($ptree) + 424|0);
    $441 = HEAP32[$440>>2]|0;
    $442 = $441 ^ $412;
    HEAP32[$440>>2] = $442;
    $443 = (34176720 + ($2<<3)|0);
    $444 = $443;
    $445 = $444;
    $446 = HEAP32[$445>>2]|0;
    $447 = (($444) + 4)|0;
    $448 = $447;
    $449 = HEAP32[$448>>2]|0;
    $450 = (34171536 + ($1<<3)|0);
    $451 = $450;
    $452 = $451;
    $453 = HEAP32[$452>>2]|0;
    $454 = (($451) + 4)|0;
    $455 = $454;
    $456 = HEAP32[$455>>2]|0;
    $457 = $453 ^ $446;
    $458 = $456 ^ $449;
    $459 = $ptree;
    $460 = $459;
    $461 = HEAP32[$460>>2]|0;
    $462 = (($459) + 4)|0;
    $463 = $462;
    $464 = HEAP32[$463>>2]|0;
    $465 = $457 ^ $461;
    $466 = $458 ^ $464;
    $467 = $ptree;
    $468 = $467;
    HEAP32[$468>>2] = $465;
    $469 = (($467) + 4)|0;
    $470 = $469;
    HEAP32[$470>>2] = $466;
    $471 = HEAP32[$21>>2]|0;
    $472 = (($471) + -447)|0;
    HEAP32[$21>>2] = $472;
    $473 = ((($ptree) + ($2)|0) + 512|0);
    HEAP8[$473>>0] = -9;
    $474 = (($ptree) + 176|0);
    $475 = HEAP32[$474>>2]|0;
    $476 = $475 ^ $402;
    HEAP32[$474>>2] = $476;
    $477 = (($ptree) + 180|0);
    $478 = HEAP32[$477>>2]|0;
    $479 = $478 ^ $407;
    HEAP32[$477>>2] = $479;
    $480 = (($ptree) + 184|0);
    $481 = HEAP32[$480>>2]|0;
    $482 = $481 ^ $412;
    HEAP32[$480>>2] = $482;
    $483 = (($ptree) + 104|0);
    $484 = HEAP32[$483>>2]|0;
    $485 = $484 ^ $402;
    HEAP32[$483>>2] = $485;
    $486 = (($ptree) + 108|0);
    $487 = HEAP32[$486>>2]|0;
    $488 = $487 ^ $407;
    HEAP32[$486>>2] = $488;
    $489 = (($ptree) + 112|0);
    $490 = HEAP32[$489>>2]|0;
    $491 = $490 ^ $412;
    HEAP32[$489>>2] = $491;
    break L14;
    break;
   }
   default: {
    $733 = (($ptree) + 296|0);
    $734 = HEAP32[$733>>2]|0;
    $735 = $734 ^ $400;
    HEAP32[$733>>2] = $735;
    $736 = (($ptree) + 300|0);
    $737 = HEAP32[$736>>2]|0;
    $738 = $737 ^ $405;
    HEAP32[$736>>2] = $738;
    $739 = (($ptree) + 304|0);
    $740 = HEAP32[$739>>2]|0;
    $741 = $740 ^ $410;
    HEAP32[$739>>2] = $741;
    $742 = (($ptree) + 344|0);
    $743 = HEAP32[$742>>2]|0;
    $744 = $743 ^ $402;
    HEAP32[$742>>2] = $744;
    $745 = (($ptree) + 348|0);
    $746 = HEAP32[$745>>2]|0;
    $747 = $746 ^ $407;
    HEAP32[$745>>2] = $747;
    $748 = (($ptree) + 352|0);
    $749 = HEAP32[$748>>2]|0;
    $750 = $749 ^ $412;
    HEAP32[$748>>2] = $750;
    $751 = (34179960 + ($2<<3)|0);
    $752 = $751;
    $753 = $752;
    $754 = HEAP32[$753>>2]|0;
    $755 = (($752) + 4)|0;
    $756 = $755;
    $757 = HEAP32[$756>>2]|0;
    $758 = (34175424 + ($1<<3)|0);
    $759 = $758;
    $760 = $759;
    $761 = HEAP32[$760>>2]|0;
    $762 = (($759) + 4)|0;
    $763 = $762;
    $764 = HEAP32[$763>>2]|0;
    $765 = $761 ^ $754;
    $766 = $764 ^ $757;
    $767 = $ptree;
    $768 = $767;
    $769 = HEAP32[$768>>2]|0;
    $770 = (($767) + 4)|0;
    $771 = $770;
    $772 = HEAP32[$771>>2]|0;
    $773 = $765 ^ $769;
    $774 = $766 ^ $772;
    $775 = $ptree;
    $776 = $775;
    HEAP32[$776>>2] = $773;
    $777 = (($775) + 4)|0;
    $778 = $777;
    HEAP32[$778>>2] = $774;
    $779 = HEAP32[$21>>2]|0;
    $780 = (($779) + -303)|0;
    HEAP32[$21>>2] = $780;
    $781 = ((($ptree) + ($2)|0) + 512|0);
    HEAP8[$781>>0] = -15;
    $782 = (($ptree) + 80|0);
    $783 = HEAP32[$782>>2]|0;
    $784 = $783 ^ $402;
    HEAP32[$782>>2] = $784;
    $785 = (($ptree) + 84|0);
    $786 = HEAP32[$785>>2]|0;
    $787 = $786 ^ $407;
    HEAP32[$785>>2] = $787;
    $788 = (($ptree) + 88|0);
    $789 = HEAP32[$788>>2]|0;
    $790 = $789 ^ $412;
    HEAP32[$788>>2] = $790;
    $791 = (($ptree) + 152|0);
    $792 = HEAP32[$791>>2]|0;
    $793 = $792 ^ $403;
    HEAP32[$791>>2] = $793;
    $794 = (($ptree) + 156|0);
    $795 = HEAP32[$794>>2]|0;
    $796 = $795 ^ $408;
    HEAP32[$794>>2] = $796;
    $797 = (($ptree) + 160|0);
    $798 = HEAP32[$797>>2]|0;
    $799 = $798 ^ $413;
    HEAP32[$797>>2] = $799;
    break L14;
   }
   }
  }
 } while(0);
 do {
  switch ($397|0) {
  case 1:  {
   $1452 = (($ptree) + 356|0);
   $1453 = HEAP32[$1452>>2]|0;
   $1454 = $1453 ^ $402;
   HEAP32[$1452>>2] = $1454;
   $1455 = (($ptree) + 360|0);
   $1456 = HEAP32[$1455>>2]|0;
   $1457 = $1456 ^ $407;
   HEAP32[$1455>>2] = $1457;
   $1458 = (($ptree) + 364|0);
   $1459 = HEAP32[$1458>>2]|0;
   $1460 = $1459 ^ $412;
   HEAP32[$1458>>2] = $1460;
   $1461 = (34162160 + ($2<<3)|0);
   $1462 = $1461;
   $1463 = $1462;
   $1464 = HEAP32[$1463>>2]|0;
   $1465 = (($1462) + 4)|0;
   $1466 = $1465;
   $1467 = HEAP32[$1466>>2]|0;
   $1468 = $ptree;
   $1469 = $1468;
   $1470 = HEAP32[$1469>>2]|0;
   $1471 = (($1468) + 4)|0;
   $1472 = $1471;
   $1473 = HEAP32[$1472>>2]|0;
   $1474 = $1470 ^ $1464;
   $1475 = $1473 ^ $1467;
   $1476 = $ptree;
   $1477 = $1476;
   HEAP32[$1477>>2] = $1474;
   $1478 = (($1476) + 4)|0;
   $1479 = $1478;
   HEAP32[$1479>>2] = $1475;
   $1480 = (($ptree) + 504|0);
   $1481 = HEAP32[$1480>>2]|0;
   $1482 = (($1481) + 1)|0;
   HEAP32[$1480>>2] = $1482;
   $1483 = HEAP32[$21>>2]|0;
   $1484 = (($1483) + -174)|0;
   HEAP32[$21>>2] = $1484;
   $1485 = (($2) + -9)|0;
   $1486 = (34156304 + (($1485*12)|0)|0);
   $1487 = HEAP32[$1486>>2]|0;
   $1488 = (($ptree) + 164|0);
   $1489 = HEAP32[$1488>>2]|0;
   $1490 = $1489 ^ $1487;
   HEAP32[$1488>>2] = $1490;
   $1491 = ((34156304 + (($1485*12)|0)|0) + 4|0);
   $1492 = HEAP32[$1491>>2]|0;
   $1493 = (($ptree) + 168|0);
   $1494 = HEAP32[$1493>>2]|0;
   $1495 = $1494 ^ $1492;
   HEAP32[$1493>>2] = $1495;
   $1496 = ((34156304 + (($1485*12)|0)|0) + 8|0);
   $1497 = HEAP32[$1496>>2]|0;
   $1498 = (($ptree) + 172|0);
   $1499 = HEAP32[$1498>>2]|0;
   $1500 = $1499 ^ $1497;
   HEAP32[$1498>>2] = $1500;
   break;
  }
  case 2:  {
   $1501 = (($ptree) + 188|0);
   $1502 = HEAP32[$1501>>2]|0;
   $1503 = $1502 ^ $402;
   HEAP32[$1501>>2] = $1503;
   $1504 = (($ptree) + 192|0);
   $1505 = HEAP32[$1504>>2]|0;
   $1506 = $1505 ^ $407;
   HEAP32[$1504>>2] = $1506;
   $1507 = (($ptree) + 196|0);
   $1508 = HEAP32[$1507>>2]|0;
   $1509 = $1508 ^ $412;
   HEAP32[$1507>>2] = $1509;
   $1510 = (34162808 + ($2<<3)|0);
   $1511 = $1510;
   $1512 = $1511;
   $1513 = HEAP32[$1512>>2]|0;
   $1514 = (($1511) + 4)|0;
   $1515 = $1514;
   $1516 = HEAP32[$1515>>2]|0;
   $1517 = $ptree;
   $1518 = $1517;
   $1519 = HEAP32[$1518>>2]|0;
   $1520 = (($1517) + 4)|0;
   $1521 = $1520;
   $1522 = HEAP32[$1521>>2]|0;
   $1523 = $1519 ^ $1513;
   $1524 = $1522 ^ $1516;
   $1525 = $ptree;
   $1526 = $1525;
   HEAP32[$1526>>2] = $1523;
   $1527 = (($1525) + 4)|0;
   $1528 = $1527;
   HEAP32[$1528>>2] = $1524;
   $1529 = (($ptree) + 504|0);
   $1530 = HEAP32[$1529>>2]|0;
   $1531 = (($1530) + 32)|0;
   HEAP32[$1529>>2] = $1531;
   $1532 = HEAP32[$21>>2]|0;
   $1533 = (($1532) + -464)|0;
   HEAP32[$21>>2] = $1533;
   break;
  }
  case 3:  {
   $1534 = (($ptree) + 212|0);
   $1535 = HEAP32[$1534>>2]|0;
   $1536 = $1535 ^ $402;
   HEAP32[$1534>>2] = $1536;
   $1537 = (($ptree) + 216|0);
   $1538 = HEAP32[$1537>>2]|0;
   $1539 = $1538 ^ $407;
   HEAP32[$1537>>2] = $1539;
   $1540 = (($ptree) + 220|0);
   $1541 = HEAP32[$1540>>2]|0;
   $1542 = $1541 ^ $412;
   HEAP32[$1540>>2] = $1542;
   $1543 = (34163456 + ($2<<3)|0);
   $1544 = $1543;
   $1545 = $1544;
   $1546 = HEAP32[$1545>>2]|0;
   $1547 = (($1544) + 4)|0;
   $1548 = $1547;
   $1549 = HEAP32[$1548>>2]|0;
   $1550 = $ptree;
   $1551 = $1550;
   $1552 = HEAP32[$1551>>2]|0;
   $1553 = (($1550) + 4)|0;
   $1554 = $1553;
   $1555 = HEAP32[$1554>>2]|0;
   $1556 = $1552 ^ $1546;
   $1557 = $1555 ^ $1549;
   $1558 = $ptree;
   $1559 = $1558;
   HEAP32[$1559>>2] = $1556;
   $1560 = (($1558) + 4)|0;
   $1561 = $1560;
   HEAP32[$1561>>2] = $1557;
   $1562 = (($ptree) + 504|0);
   $1563 = HEAP32[$1562>>2]|0;
   $1564 = (($1563) + 256)|0;
   HEAP32[$1562>>2] = $1564;
   $1565 = HEAP32[$21>>2]|0;
   $1566 = (($1565) + -514)|0;
   HEAP32[$21>>2] = $1566;
   break;
  }
  case 4:  {
   $1567 = (($ptree) + 236|0);
   $1568 = HEAP32[$1567>>2]|0;
   $1569 = $1568 ^ $402;
   HEAP32[$1567>>2] = $1569;
   $1570 = (($ptree) + 240|0);
   $1571 = HEAP32[$1570>>2]|0;
   $1572 = $1571 ^ $407;
   HEAP32[$1570>>2] = $1572;
   $1573 = (($ptree) + 244|0);
   $1574 = HEAP32[$1573>>2]|0;
   $1575 = $1574 ^ $412;
   HEAP32[$1573>>2] = $1575;
   $1576 = (34164104 + ($2<<3)|0);
   $1577 = $1576;
   $1578 = $1577;
   $1579 = HEAP32[$1578>>2]|0;
   $1580 = (($1577) + 4)|0;
   $1581 = $1580;
   $1582 = HEAP32[$1581>>2]|0;
   $1583 = $ptree;
   $1584 = $1583;
   $1585 = HEAP32[$1584>>2]|0;
   $1586 = (($1583) + 4)|0;
   $1587 = $1586;
   $1588 = HEAP32[$1587>>2]|0;
   $1589 = $1585 ^ $1579;
   $1590 = $1588 ^ $1582;
   $1591 = $ptree;
   $1592 = $1591;
   HEAP32[$1592>>2] = $1589;
   $1593 = (($1591) + 4)|0;
   $1594 = $1593;
   HEAP32[$1594>>2] = $1590;
   $1595 = (($ptree) + 504|0);
   $1596 = HEAP32[$1595>>2]|0;
   $1597 = (($1596) + 2048)|0;
   HEAP32[$1595>>2] = $1597;
   $1598 = HEAP32[$21>>2]|0;
   $1599 = (($1598) + -738)|0;
   HEAP32[$21>>2] = $1599;
   break;
  }
  case 5:  {
   $1600 = (($ptree) + 380|0);
   $1601 = HEAP32[$1600>>2]|0;
   $1602 = $1601 ^ $402;
   HEAP32[$1600>>2] = $1602;
   $1603 = (($ptree) + 384|0);
   $1604 = HEAP32[$1603>>2]|0;
   $1605 = $1604 ^ $407;
   HEAP32[$1603>>2] = $1605;
   $1606 = (($ptree) + 388|0);
   $1607 = HEAP32[$1606>>2]|0;
   $1608 = $1607 ^ $412;
   HEAP32[$1606>>2] = $1608;
   $1609 = (34164752 + ($2<<3)|0);
   $1610 = $1609;
   $1611 = $1610;
   $1612 = HEAP32[$1611>>2]|0;
   $1613 = (($1610) + 4)|0;
   $1614 = $1613;
   $1615 = HEAP32[$1614>>2]|0;
   $1616 = $ptree;
   $1617 = $1616;
   $1618 = HEAP32[$1617>>2]|0;
   $1619 = (($1616) + 4)|0;
   $1620 = $1619;
   $1621 = HEAP32[$1620>>2]|0;
   $1622 = $1618 ^ $1612;
   $1623 = $1621 ^ $1615;
   $1624 = $ptree;
   $1625 = $1624;
   HEAP32[$1625>>2] = $1622;
   $1626 = (($1624) + 4)|0;
   $1627 = $1626;
   HEAP32[$1627>>2] = $1623;
   $1628 = (($ptree) + 504|0);
   $1629 = HEAP32[$1628>>2]|0;
   $1630 = (($1629) + 16384)|0;
   HEAP32[$1628>>2] = $1630;
   $1631 = HEAP32[$21>>2]|0;
   $1632 = (($1631) + -888)|0;
   HEAP32[$21>>2] = $1632;
   $1633 = (($ptree) + 92|0);
   $1634 = HEAP32[$1633>>2]|0;
   $1635 = $1634 ^ $402;
   HEAP32[$1633>>2] = $1635;
   $1636 = (($ptree) + 96|0);
   $1637 = HEAP32[$1636>>2]|0;
   $1638 = $1637 ^ $407;
   HEAP32[$1636>>2] = $1638;
   $1639 = (($ptree) + 100|0);
   $1640 = HEAP32[$1639>>2]|0;
   $1641 = $1640 ^ $412;
   HEAP32[$1639>>2] = $1641;
   break;
  }
  case 6:  {
   $1642 = (($ptree) + 260|0);
   $1643 = HEAP32[$1642>>2]|0;
   $1644 = $1643 ^ $402;
   HEAP32[$1642>>2] = $1644;
   $1645 = (($ptree) + 264|0);
   $1646 = HEAP32[$1645>>2]|0;
   $1647 = $1646 ^ $407;
   HEAP32[$1645>>2] = $1647;
   $1648 = (($ptree) + 268|0);
   $1649 = HEAP32[$1648>>2]|0;
   $1650 = $1649 ^ $412;
   HEAP32[$1648>>2] = $1650;
   $1651 = (34165400 + ($2<<3)|0);
   $1652 = $1651;
   $1653 = $1652;
   $1654 = HEAP32[$1653>>2]|0;
   $1655 = (($1652) + 4)|0;
   $1656 = $1655;
   $1657 = HEAP32[$1656>>2]|0;
   $1658 = $ptree;
   $1659 = $1658;
   $1660 = HEAP32[$1659>>2]|0;
   $1661 = (($1658) + 4)|0;
   $1662 = $1661;
   $1663 = HEAP32[$1662>>2]|0;
   $1664 = $1660 ^ $1654;
   $1665 = $1663 ^ $1657;
   $1666 = $ptree;
   $1667 = $1666;
   HEAP32[$1667>>2] = $1664;
   $1668 = (($1666) + 4)|0;
   $1669 = $1668;
   HEAP32[$1669>>2] = $1665;
   $1670 = (($ptree) + 504|0);
   $1671 = HEAP32[$1670>>2]|0;
   $1672 = (($1671) + 131072)|0;
   HEAP32[$1670>>2] = $1672;
   $1673 = HEAP32[$21>>2]|0;
   $1674 = (($1673) + -1138)|0;
   HEAP32[$21>>2] = $1674;
   $1675 = (($ptree) + 116|0);
   $1676 = HEAP32[$1675>>2]|0;
   $1677 = $1676 ^ $402;
   HEAP32[$1675>>2] = $1677;
   $1678 = (($ptree) + 120|0);
   $1679 = HEAP32[$1678>>2]|0;
   $1680 = $1679 ^ $407;
   HEAP32[$1678>>2] = $1680;
   $1681 = (($ptree) + 124|0);
   $1682 = HEAP32[$1681>>2]|0;
   $1683 = $1682 ^ $412;
   HEAP32[$1681>>2] = $1683;
   break;
  }
  case 7:  {
   $1684 = (($ptree) + 284|0);
   $1685 = HEAP32[$1684>>2]|0;
   $1686 = $1685 ^ $402;
   HEAP32[$1684>>2] = $1686;
   $1687 = (($ptree) + 288|0);
   $1688 = HEAP32[$1687>>2]|0;
   $1689 = $1688 ^ $407;
   HEAP32[$1687>>2] = $1689;
   $1690 = (($ptree) + 292|0);
   $1691 = HEAP32[$1690>>2]|0;
   $1692 = $1691 ^ $412;
   HEAP32[$1690>>2] = $1692;
   $1693 = (34166048 + ($2<<3)|0);
   $1694 = $1693;
   $1695 = $1694;
   $1696 = HEAP32[$1695>>2]|0;
   $1697 = (($1694) + 4)|0;
   $1698 = $1697;
   $1699 = HEAP32[$1698>>2]|0;
   $1700 = $ptree;
   $1701 = $1700;
   $1702 = HEAP32[$1701>>2]|0;
   $1703 = (($1700) + 4)|0;
   $1704 = $1703;
   $1705 = HEAP32[$1704>>2]|0;
   $1706 = $1702 ^ $1696;
   $1707 = $1705 ^ $1699;
   $1708 = $ptree;
   $1709 = $1708;
   HEAP32[$1709>>2] = $1706;
   $1710 = (($1708) + 4)|0;
   $1711 = $1710;
   HEAP32[$1711>>2] = $1707;
   $1712 = (($ptree) + 504|0);
   $1713 = HEAP32[$1712>>2]|0;
   $1714 = (($1713) + 524288)|0;
   HEAP32[$1712>>2] = $1714;
   $1715 = HEAP32[$21>>2]|0;
   $1716 = (($1715) + -1284)|0;
   HEAP32[$21>>2] = $1716;
   $1717 = (($ptree) + 140|0);
   $1718 = HEAP32[$1717>>2]|0;
   $1719 = $1718 ^ $402;
   HEAP32[$1717>>2] = $1719;
   $1720 = (($ptree) + 144|0);
   $1721 = HEAP32[$1720>>2]|0;
   $1722 = $1721 ^ $407;
   HEAP32[$1720>>2] = $1722;
   $1723 = (($ptree) + 148|0);
   $1724 = HEAP32[$1723>>2]|0;
   $1725 = $1724 ^ $412;
   HEAP32[$1723>>2] = $1725;
   break;
  }
  case 9:  {
   $1726 = (($ptree) + 404|0);
   $1727 = HEAP32[$1726>>2]|0;
   $1728 = $1727 ^ $402;
   HEAP32[$1726>>2] = $1728;
   $1729 = (($ptree) + 408|0);
   $1730 = HEAP32[$1729>>2]|0;
   $1731 = $1730 ^ $407;
   HEAP32[$1729>>2] = $1731;
   $1732 = (($ptree) + 412|0);
   $1733 = HEAP32[$1732>>2]|0;
   $1734 = $1733 ^ $412;
   HEAP32[$1732>>2] = $1734;
   $1735 = (34167344 + ($2<<3)|0);
   $1736 = $1735;
   $1737 = $1736;
   $1738 = HEAP32[$1737>>2]|0;
   $1739 = (($1736) + 4)|0;
   $1740 = $1739;
   $1741 = HEAP32[$1740>>2]|0;
   $1742 = $ptree;
   $1743 = $1742;
   $1744 = HEAP32[$1743>>2]|0;
   $1745 = (($1742) + 4)|0;
   $1746 = $1745;
   $1747 = HEAP32[$1746>>2]|0;
   $1748 = $1744 ^ $1738;
   $1749 = $1747 ^ $1741;
   $1750 = $ptree;
   $1751 = $1750;
   HEAP32[$1751>>2] = $1748;
   $1752 = (($1750) + 4)|0;
   $1753 = $1752;
   HEAP32[$1753>>2] = $1749;
   $1754 = (($ptree) + 504|0);
   $1755 = HEAP32[$1754>>2]|0;
   $1756 = (($1755) + 1)|0;
   HEAP32[$1754>>2] = $1756;
   $1757 = HEAP32[$21>>2]|0;
   $1758 = (($1757) + -621)|0;
   HEAP32[$21>>2] = $1758;
   $1759 = (($ptree) + 92|0);
   $1760 = HEAP32[$1759>>2]|0;
   $1761 = $1760 ^ $402;
   HEAP32[$1759>>2] = $1761;
   $1762 = (($ptree) + 96|0);
   $1763 = HEAP32[$1762>>2]|0;
   $1764 = $1763 ^ $407;
   HEAP32[$1762>>2] = $1764;
   $1765 = (($ptree) + 100|0);
   $1766 = HEAP32[$1765>>2]|0;
   $1767 = $1766 ^ $412;
   HEAP32[$1765>>2] = $1767;
   break;
  }
  case 10:  {
   $1768 = (($ptree) + 428|0);
   $1769 = HEAP32[$1768>>2]|0;
   $1770 = $1769 ^ $402;
   HEAP32[$1768>>2] = $1770;
   $1771 = (($ptree) + 432|0);
   $1772 = HEAP32[$1771>>2]|0;
   $1773 = $1772 ^ $407;
   HEAP32[$1771>>2] = $1773;
   $1774 = (($ptree) + 436|0);
   $1775 = HEAP32[$1774>>2]|0;
   $1776 = $1775 ^ $412;
   HEAP32[$1774>>2] = $1776;
   $1777 = (34167992 + ($2<<3)|0);
   $1778 = $1777;
   $1779 = $1778;
   $1780 = HEAP32[$1779>>2]|0;
   $1781 = (($1778) + 4)|0;
   $1782 = $1781;
   $1783 = HEAP32[$1782>>2]|0;
   $1784 = $ptree;
   $1785 = $1784;
   $1786 = HEAP32[$1785>>2]|0;
   $1787 = (($1784) + 4)|0;
   $1788 = $1787;
   $1789 = HEAP32[$1788>>2]|0;
   $1790 = $1786 ^ $1780;
   $1791 = $1789 ^ $1783;
   $1792 = $ptree;
   $1793 = $1792;
   HEAP32[$1793>>2] = $1790;
   $1794 = (($1792) + 4)|0;
   $1795 = $1794;
   HEAP32[$1795>>2] = $1791;
   $1796 = (($ptree) + 504|0);
   $1797 = HEAP32[$1796>>2]|0;
   $1798 = (($1797) + 32)|0;
   HEAP32[$1796>>2] = $1798;
   $1799 = HEAP32[$21>>2]|0;
   $1800 = (($1799) + -721)|0;
   HEAP32[$21>>2] = $1800;
   $1801 = (($ptree) + 92|0);
   $1802 = HEAP32[$1801>>2]|0;
   $1803 = $1802 ^ $402;
   HEAP32[$1801>>2] = $1803;
   $1804 = (($ptree) + 96|0);
   $1805 = HEAP32[$1804>>2]|0;
   $1806 = $1805 ^ $407;
   HEAP32[$1804>>2] = $1806;
   $1807 = (($ptree) + 100|0);
   $1808 = HEAP32[$1807>>2]|0;
   $1809 = $1808 ^ $412;
   HEAP32[$1807>>2] = $1809;
   break;
  }
  case 11:  {
   $1810 = (($ptree) + 452|0);
   $1811 = HEAP32[$1810>>2]|0;
   $1812 = $1811 ^ $402;
   HEAP32[$1810>>2] = $1812;
   $1813 = (($ptree) + 456|0);
   $1814 = HEAP32[$1813>>2]|0;
   $1815 = $1814 ^ $407;
   HEAP32[$1813>>2] = $1815;
   $1816 = (($ptree) + 460|0);
   $1817 = HEAP32[$1816>>2]|0;
   $1818 = $1817 ^ $412;
   HEAP32[$1816>>2] = $1818;
   $1819 = (34168640 + ($2<<3)|0);
   $1820 = $1819;
   $1821 = $1820;
   $1822 = HEAP32[$1821>>2]|0;
   $1823 = (($1820) + 4)|0;
   $1824 = $1823;
   $1825 = HEAP32[$1824>>2]|0;
   $1826 = $ptree;
   $1827 = $1826;
   $1828 = HEAP32[$1827>>2]|0;
   $1829 = (($1826) + 4)|0;
   $1830 = $1829;
   $1831 = HEAP32[$1830>>2]|0;
   $1832 = $1828 ^ $1822;
   $1833 = $1831 ^ $1825;
   $1834 = $ptree;
   $1835 = $1834;
   HEAP32[$1835>>2] = $1832;
   $1836 = (($1834) + 4)|0;
   $1837 = $1836;
   HEAP32[$1837>>2] = $1833;
   $1838 = (($ptree) + 504|0);
   $1839 = HEAP32[$1838>>2]|0;
   $1840 = (($1839) + 256)|0;
   HEAP32[$1838>>2] = $1840;
   $1841 = HEAP32[$21>>2]|0;
   $1842 = (($1841) + -767)|0;
   HEAP32[$21>>2] = $1842;
   $1843 = (($ptree) + 92|0);
   $1844 = HEAP32[$1843>>2]|0;
   $1845 = $1844 ^ $402;
   HEAP32[$1843>>2] = $1845;
   $1846 = (($ptree) + 96|0);
   $1847 = HEAP32[$1846>>2]|0;
   $1848 = $1847 ^ $407;
   HEAP32[$1846>>2] = $1848;
   $1849 = (($ptree) + 100|0);
   $1850 = HEAP32[$1849>>2]|0;
   $1851 = $1850 ^ $412;
   HEAP32[$1849>>2] = $1851;
   break;
  }
  case 12:  {
   $1852 = (($ptree) + 476|0);
   $1853 = HEAP32[$1852>>2]|0;
   $1854 = $1853 ^ $402;
   HEAP32[$1852>>2] = $1854;
   $1855 = (($ptree) + 480|0);
   $1856 = HEAP32[$1855>>2]|0;
   $1857 = $1856 ^ $407;
   HEAP32[$1855>>2] = $1857;
   $1858 = (($ptree) + 484|0);
   $1859 = HEAP32[$1858>>2]|0;
   $1860 = $1859 ^ $412;
   HEAP32[$1858>>2] = $1860;
   $1861 = (34169288 + ($2<<3)|0);
   $1862 = $1861;
   $1863 = $1862;
   $1864 = HEAP32[$1863>>2]|0;
   $1865 = (($1862) + 4)|0;
   $1866 = $1865;
   $1867 = HEAP32[$1866>>2]|0;
   $1868 = $ptree;
   $1869 = $1868;
   $1870 = HEAP32[$1869>>2]|0;
   $1871 = (($1868) + 4)|0;
   $1872 = $1871;
   $1873 = HEAP32[$1872>>2]|0;
   $1874 = $1870 ^ $1864;
   $1875 = $1873 ^ $1867;
   $1876 = $ptree;
   $1877 = $1876;
   HEAP32[$1877>>2] = $1874;
   $1878 = (($1876) + 4)|0;
   $1879 = $1878;
   HEAP32[$1879>>2] = $1875;
   $1880 = (($ptree) + 504|0);
   $1881 = HEAP32[$1880>>2]|0;
   $1882 = (($1881) + 2048)|0;
   HEAP32[$1880>>2] = $1882;
   $1883 = HEAP32[$21>>2]|0;
   $1884 = (($1883) + -864)|0;
   HEAP32[$21>>2] = $1884;
   $1885 = (($ptree) + 92|0);
   $1886 = HEAP32[$1885>>2]|0;
   $1887 = $1886 ^ $402;
   HEAP32[$1885>>2] = $1887;
   $1888 = (($ptree) + 96|0);
   $1889 = HEAP32[$1888>>2]|0;
   $1890 = $1889 ^ $407;
   HEAP32[$1888>>2] = $1890;
   $1891 = (($ptree) + 100|0);
   $1892 = HEAP32[$1891>>2]|0;
   $1893 = $1892 ^ $412;
   HEAP32[$1891>>2] = $1893;
   break;
  }
  case 14:  {
   $1894 = (($ptree) + 308|0);
   $1895 = HEAP32[$1894>>2]|0;
   $1896 = $1895 ^ $402;
   HEAP32[$1894>>2] = $1896;
   $1897 = (($ptree) + 312|0);
   $1898 = HEAP32[$1897>>2]|0;
   $1899 = $1898 ^ $407;
   HEAP32[$1897>>2] = $1899;
   $1900 = (($ptree) + 316|0);
   $1901 = HEAP32[$1900>>2]|0;
   $1902 = $1901 ^ $412;
   HEAP32[$1900>>2] = $1902;
   $1903 = (34169936 + ($2<<3)|0);
   $1904 = $1903;
   $1905 = $1904;
   $1906 = HEAP32[$1905>>2]|0;
   $1907 = (($1904) + 4)|0;
   $1908 = $1907;
   $1909 = HEAP32[$1908>>2]|0;
   $1910 = $ptree;
   $1911 = $1910;
   $1912 = HEAP32[$1911>>2]|0;
   $1913 = (($1910) + 4)|0;
   $1914 = $1913;
   $1915 = HEAP32[$1914>>2]|0;
   $1916 = $1912 ^ $1906;
   $1917 = $1915 ^ $1909;
   $1918 = $ptree;
   $1919 = $1918;
   HEAP32[$1919>>2] = $1916;
   $1920 = (($1918) + 4)|0;
   $1921 = $1920;
   HEAP32[$1921>>2] = $1917;
   $1922 = (($ptree) + 504|0);
   $1923 = HEAP32[$1922>>2]|0;
   $1924 = (($1923) + 131072)|0;
   HEAP32[$1922>>2] = $1924;
   $1925 = HEAP32[$21>>2]|0;
   $1926 = (($1925) + -1396)|0;
   HEAP32[$21>>2] = $1926;
   $1927 = (($ptree) + 68|0);
   $1928 = HEAP32[$1927>>2]|0;
   $1929 = $1928 ^ $402;
   HEAP32[$1927>>2] = $1929;
   $1930 = (($ptree) + 72|0);
   $1931 = HEAP32[$1930>>2]|0;
   $1932 = $1931 ^ $407;
   HEAP32[$1930>>2] = $1932;
   $1933 = (($ptree) + 76|0);
   $1934 = HEAP32[$1933>>2]|0;
   $1935 = $1934 ^ $412;
   HEAP32[$1933>>2] = $1935;
   $1936 = (($ptree) + 116|0);
   $1937 = HEAP32[$1936>>2]|0;
   $1938 = $1937 ^ $402;
   HEAP32[$1936>>2] = $1938;
   $1939 = (($ptree) + 120|0);
   $1940 = HEAP32[$1939>>2]|0;
   $1941 = $1940 ^ $407;
   HEAP32[$1939>>2] = $1941;
   $1942 = (($ptree) + 124|0);
   $1943 = HEAP32[$1942>>2]|0;
   $1944 = $1943 ^ $412;
   HEAP32[$1942>>2] = $1944;
   break;
  }
  case 0:  {
   $2050 = (34157280 + (($1*12)|0)|0);
   $2051 = HEAP32[$2050>>2]|0;
   $2052 = (34157280 + (($2*12)|0)|0);
   $2053 = HEAP32[$2052>>2]|0;
   $2054 = $2053 | $2051;
   $2055 = (($ptree) + 32|0);
   $2056 = HEAP32[$2055>>2]|0;
   $2057 = $2056 ^ $2054;
   HEAP32[$2055>>2] = $2057;
   $2058 = ((34157280 + (($1*12)|0)|0) + 4|0);
   $2059 = HEAP32[$2058>>2]|0;
   $2060 = ((34157280 + (($2*12)|0)|0) + 4|0);
   $2061 = HEAP32[$2060>>2]|0;
   $2062 = $2061 | $2059;
   $2063 = (($ptree) + 36|0);
   $2064 = HEAP32[$2063>>2]|0;
   $2065 = $2064 ^ $2062;
   HEAP32[$2063>>2] = $2065;
   $2066 = ((34157280 + (($1*12)|0)|0) + 8|0);
   $2067 = HEAP32[$2066>>2]|0;
   $2068 = ((34157280 + (($2*12)|0)|0) + 8|0);
   $2069 = HEAP32[$2068>>2]|0;
   $2070 = $2069 | $2067;
   $2071 = (($ptree) + 40|0);
   $2072 = HEAP32[$2071>>2]|0;
   $2073 = $2072 ^ $2070;
   HEAP32[$2071>>2] = $2073;
   $2074 = (34159232 + (($1*12)|0)|0);
   $2075 = HEAP32[$2074>>2]|0;
   $2076 = (34159232 + (($2*12)|0)|0);
   $2077 = HEAP32[$2076>>2]|0;
   $2078 = $2077 | $2075;
   $2079 = (($ptree) + 56|0);
   $2080 = HEAP32[$2079>>2]|0;
   $2081 = $2080 ^ $2078;
   HEAP32[$2079>>2] = $2081;
   $2082 = ((34159232 + (($1*12)|0)|0) + 4|0);
   $2083 = HEAP32[$2082>>2]|0;
   $2084 = ((34159232 + (($2*12)|0)|0) + 4|0);
   $2085 = HEAP32[$2084>>2]|0;
   $2086 = $2085 | $2083;
   $2087 = (($ptree) + 60|0);
   $2088 = HEAP32[$2087>>2]|0;
   $2089 = $2088 ^ $2086;
   HEAP32[$2087>>2] = $2089;
   $2090 = ((34159232 + (($1*12)|0)|0) + 8|0);
   $2091 = HEAP32[$2090>>2]|0;
   $2092 = ((34159232 + (($2*12)|0)|0) + 8|0);
   $2093 = HEAP32[$2092>>2]|0;
   $2094 = $2093 | $2091;
   $2095 = (($ptree) + 64|0);
   $2096 = HEAP32[$2095>>2]|0;
   $2097 = $2096 ^ $2094;
   HEAP32[$2095>>2] = $2097;
   $2098 = (34158256 + (($1*12)|0)|0);
   $2099 = HEAP32[$2098>>2]|0;
   $2100 = (34158256 + (($2*12)|0)|0);
   $2101 = HEAP32[$2100>>2]|0;
   $2102 = $2101 | $2099;
   $2103 = (($ptree) + 44|0);
   $2104 = HEAP32[$2103>>2]|0;
   $2105 = $2104 ^ $2102;
   HEAP32[$2103>>2] = $2105;
   $2106 = ((34158256 + (($1*12)|0)|0) + 4|0);
   $2107 = HEAP32[$2106>>2]|0;
   $2108 = ((34158256 + (($2*12)|0)|0) + 4|0);
   $2109 = HEAP32[$2108>>2]|0;
   $2110 = $2109 | $2107;
   $2111 = (($ptree) + 48|0);
   $2112 = HEAP32[$2111>>2]|0;
   $2113 = $2112 ^ $2110;
   HEAP32[$2111>>2] = $2113;
   $2114 = ((34158256 + (($1*12)|0)|0) + 8|0);
   $2115 = HEAP32[$2114>>2]|0;
   $2116 = ((34158256 + (($2*12)|0)|0) + 8|0);
   $2117 = HEAP32[$2116>>2]|0;
   $2118 = $2117 | $2115;
   $2119 = (($ptree) + 52|0);
   $2120 = HEAP32[$2119>>2]|0;
   $2121 = $2120 ^ $2118;
   HEAP32[$2119>>2] = $2121;
   STACKTOP = sp;return;
   break;
  }
  default: {
   $1945 = (($ptree) + 332|0);
   $1946 = HEAP32[$1945>>2]|0;
   $1947 = $1946 ^ $402;
   HEAP32[$1945>>2] = $1947;
   $1948 = (($ptree) + 336|0);
   $1949 = HEAP32[$1948>>2]|0;
   $1950 = $1949 ^ $407;
   HEAP32[$1948>>2] = $1950;
   $1951 = (($ptree) + 340|0);
   $1952 = HEAP32[$1951>>2]|0;
   $1953 = $1952 ^ $412;
   HEAP32[$1951>>2] = $1953;
   $1954 = (34170584 + ($2<<3)|0);
   $1955 = $1954;
   $1956 = $1955;
   $1957 = HEAP32[$1956>>2]|0;
   $1958 = (($1955) + 4)|0;
   $1959 = $1958;
   $1960 = HEAP32[$1959>>2]|0;
   $1961 = $ptree;
   $1962 = $1961;
   $1963 = HEAP32[$1962>>2]|0;
   $1964 = (($1961) + 4)|0;
   $1965 = $1964;
   $1966 = HEAP32[$1965>>2]|0;
   $1967 = $1963 ^ $1957;
   $1968 = $1966 ^ $1960;
   $1969 = $ptree;
   $1970 = $1969;
   HEAP32[$1970>>2] = $1967;
   $1971 = (($1969) + 4)|0;
   $1972 = $1971;
   HEAP32[$1972>>2] = $1968;
   $1973 = (($ptree) + 504|0);
   $1974 = HEAP32[$1973>>2]|0;
   $1975 = (($1974) + 524288)|0;
   HEAP32[$1973>>2] = $1975;
   $1976 = HEAP32[$21>>2]|0;
   $1977 = (($1976) + -1587)|0;
   HEAP32[$21>>2] = $1977;
   $1978 = (($ptree) + 68|0);
   $1979 = HEAP32[$1978>>2]|0;
   $1980 = $1979 ^ $402;
   HEAP32[$1978>>2] = $1980;
   $1981 = (($ptree) + 72|0);
   $1982 = HEAP32[$1981>>2]|0;
   $1983 = $1982 ^ $407;
   HEAP32[$1981>>2] = $1983;
   $1984 = (($ptree) + 76|0);
   $1985 = HEAP32[$1984>>2]|0;
   $1986 = $1985 ^ $412;
   HEAP32[$1984>>2] = $1986;
   $1987 = (($ptree) + 140|0);
   $1988 = HEAP32[$1987>>2]|0;
   $1989 = $1988 ^ $402;
   HEAP32[$1987>>2] = $1989;
   $1990 = (($ptree) + 144|0);
   $1991 = HEAP32[$1990>>2]|0;
   $1992 = $1991 ^ $407;
   HEAP32[$1990>>2] = $1992;
   $1993 = (($ptree) + 148|0);
   $1994 = HEAP32[$1993>>2]|0;
   $1995 = $1994 ^ $412;
   HEAP32[$1993>>2] = $1995;
  }
  }
 } while(0);
 $1996 = (($ptree) + 8|0);
 $1997 = HEAP32[$1996>>2]|0;
 $1998 = $1997 ^ $402;
 HEAP32[$1996>>2] = $1998;
 $1999 = (($ptree) + 12|0);
 $2000 = HEAP32[$1999>>2]|0;
 $2001 = $2000 ^ $407;
 HEAP32[$1999>>2] = $2001;
 $2002 = (($ptree) + 16|0);
 $2003 = HEAP32[$2002>>2]|0;
 $2004 = $2003 ^ $412;
 HEAP32[$2002>>2] = $2004;
 $2005 = (34157280 + (($1*12)|0)|0);
 $2006 = HEAP32[$2005>>2]|0;
 $2007 = (($ptree) + 32|0);
 $2008 = HEAP32[$2007>>2]|0;
 $2009 = $2008 ^ $2006;
 HEAP32[$2007>>2] = $2009;
 $2010 = ((34157280 + (($1*12)|0)|0) + 4|0);
 $2011 = HEAP32[$2010>>2]|0;
 $2012 = (($ptree) + 36|0);
 $2013 = HEAP32[$2012>>2]|0;
 $2014 = $2013 ^ $2011;
 HEAP32[$2012>>2] = $2014;
 $2015 = ((34157280 + (($1*12)|0)|0) + 8|0);
 $2016 = HEAP32[$2015>>2]|0;
 $2017 = (($ptree) + 40|0);
 $2018 = HEAP32[$2017>>2]|0;
 $2019 = $2018 ^ $2016;
 HEAP32[$2017>>2] = $2019;
 $2020 = (34159232 + (($1*12)|0)|0);
 $2021 = HEAP32[$2020>>2]|0;
 $2022 = (($ptree) + 56|0);
 $2023 = HEAP32[$2022>>2]|0;
 $2024 = $2023 ^ $2021;
 HEAP32[$2022>>2] = $2024;
 $2025 = ((34159232 + (($1*12)|0)|0) + 4|0);
 $2026 = HEAP32[$2025>>2]|0;
 $2027 = (($ptree) + 60|0);
 $2028 = HEAP32[$2027>>2]|0;
 $2029 = $2028 ^ $2026;
 HEAP32[$2027>>2] = $2029;
 $2030 = ((34159232 + (($1*12)|0)|0) + 8|0);
 $2031 = HEAP32[$2030>>2]|0;
 $2032 = (($ptree) + 64|0);
 $2033 = HEAP32[$2032>>2]|0;
 $2034 = $2033 ^ $2031;
 HEAP32[$2032>>2] = $2034;
 $2035 = (34158256 + (($1*12)|0)|0);
 $2036 = HEAP32[$2035>>2]|0;
 $2037 = (($ptree) + 44|0);
 $2038 = HEAP32[$2037>>2]|0;
 $2039 = $2038 ^ $2036;
 HEAP32[$2037>>2] = $2039;
 $2040 = ((34158256 + (($1*12)|0)|0) + 4|0);
 $2041 = HEAP32[$2040>>2]|0;
 $2042 = (($ptree) + 48|0);
 $2043 = HEAP32[$2042>>2]|0;
 $2044 = $2043 ^ $2041;
 HEAP32[$2042>>2] = $2044;
 $2045 = ((34158256 + (($1*12)|0)|0) + 8|0);
 $2046 = HEAP32[$2045>>2]|0;
 $2047 = (($ptree) + 52|0);
 $2048 = HEAP32[$2047>>2]|0;
 $2049 = $2048 ^ $2046;
 HEAP32[$2047>>2] = $2049;
 STACKTOP = sp;return;
}
function _make_move_root($ptree,$move,$flag) {
 $ptree = $ptree|0;
 $move = $move|0;
 $flag = $flag|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $drawn$0 = 0, $exitcond = 0, $i$04 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[34184024>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  _make_move_b($ptree,$move,1);
 } else {
  _make_move_w($ptree,$move,1);
 }
 $2 = $flag & 8;
 $3 = ($2|0)==(0);
 do {
  if (!($3)) {
   $4 = HEAP32[34184024>>2]|0;
   $5 = ($4|0)==(0);
   if ($5) {
    $11 = (($ptree) + 593|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12&255;
    $14 = (_is_black_attacked($ptree,$13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
   } else {
    $6 = (($ptree) + 594|0);
    $7 = HEAP8[$6>>0]|0;
    $8 = $7&255;
    $9 = (_is_white_attacked($ptree,$8)|0);
    $10 = ($9|0)==(0);
    if ($10) {
     break;
    }
   }
   $16 = HEAP32[552>>2]|0;
   HEAP32[220526664>>2] = $16;
   $17 = HEAP32[34184024>>2]|0;
   $18 = ($17|0)==(0);
   if ($18) {
    _unmake_move_b($ptree,$move,1);
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   } else {
    _unmake_move_w($ptree,$move,1);
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $19 = HEAP32[34184024>>2]|0;
 $20 = ($19|0)==(1);
 if ($20) {
  $25 = (($ptree) + 593|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = (_is_black_attacked($ptree,$27)|0);
  $33 = $28;
 } else {
  $21 = (($ptree) + 594|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = (_is_white_attacked($ptree,$23)|0);
  $33 = $24;
 }
 $29 = (($ptree) + 2656|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($ptree) + 2660|0);
 HEAP32[$31>>2] = $30;
 $32 = ($33|0)!=(0);
 $34 = (($ptree) + 572072|0);
 if ($32) {
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = (($36) + 1)|0;
  $38 = $37&255;
  $39 = (($ptree) + 572074|0);
  HEAP8[$39>>0] = $38;
 } else {
  $40 = (($ptree) + 572074|0);
  HEAP8[$40>>0] = 0;
 }
 $41 = $flag & 4;
 $42 = ($41|0)==(0);
 do {
  if ($42) {
   $drawn$0 = 0;
  } else {
   $43 = HEAP32[34184024>>2]|0;
   $44 = $43 ^ 1;
   $45 = (_detect_repetition($ptree,2,$44,3)|0);
   if ((($45|0) == 1)) {
    $drawn$0 = 1;
    break;
   } else if (!((($45|0) == 2))) {
    $drawn$0 = 0;
    break;
   }
   $46 = HEAP32[264>>2]|0;
   HEAP32[220526664>>2] = $46;
   $47 = HEAP32[34184024>>2]|0;
   $48 = ($47|0)==(0);
   if ($48) {
    _unmake_move_b($ptree,$move,1);
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   } else {
    _unmake_move_w($ptree,$move,1);
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $49 = $flag & 32;
 $50 = ($49|0)==(0);
 if (!($50)) {
  $51 = HEAP32[34184024>>2]|0;
  $52 = ($51|0)==(0);
  if ($52) {
   _unmake_move_b($ptree,$move,1);
  } else {
   _unmake_move_w($ptree,$move,1);
  }
  $53 = ($drawn$0|0)!=(0);
  $54 = $53 ? 2 : 1;
  $$0 = $54;
  STACKTOP = sp;return ($$0|0);
 }
 $55 = ($drawn$0|0)==(0);
 if (!($55)) {
  $56 = HEAP32[34180920>>2]|0;
  $57 = $56 | 4;
  HEAP32[34180920>>2] = $57;
 }
 $58 = $flag & 1;
 $59 = ($58|0)==(0);
 if (!($59)) {
  $60 = HEAP32[34184024>>2]|0;
  $61 = (_update_time($60)|0);
  $62 = ($61|0)<(0);
  if ($62) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $63 = HEAP32[34184024>>2]|0;
 $64 = $63 ^ 1;
 HEAP32[34184024>>2] = $64;
 if ($32) {
  $65 = (_is_mate($ptree,1)|0);
  $66 = ($65|0)==(0);
  if (!($66)) {
   $67 = HEAP32[34180920>>2]|0;
   $68 = $67 | 1;
   HEAP32[34180920>>2] = $68;
  }
 }
 $69 = $flag & 2;
 $70 = ($69|0)==(0);
 if (!($70)) {
  _out_CSA($ptree,33556568,$move);
 }
 $71 = (($ptree) + 572204|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)>(126);
 if ($73) {
  $i$04 = 0;
  while(1) {
   $74 = (($i$04) + 1)|0;
   $75 = ((($ptree) + ($74<<3)|0) + 600|0);
   $76 = $75;
   $77 = $76;
   $78 = HEAP32[$77>>2]|0;
   $79 = (($76) + 4)|0;
   $80 = $79;
   $81 = HEAP32[$80>>2]|0;
   $82 = ((($ptree) + ($i$04<<3)|0) + 600|0);
   $83 = $82;
   $84 = $83;
   HEAP32[$84>>2] = $78;
   $85 = (($83) + 4)|0;
   $86 = $85;
   HEAP32[$86>>2] = $81;
   $87 = ((($ptree) + ($74<<2)|0) + 75444|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ((($ptree) + ($i$04<<2)|0) + 75444|0);
   HEAP32[$89>>2] = $88;
   $exitcond = ($74|0)==($72|0);
   if ($exitcond) {
    break;
   } else {
    $i$04 = $74;
   }
  }
 } else {
  $90 = (($72) + 1)|0;
  HEAP32[$71>>2] = $90;
 }
 $91 = HEAP32[((34180928 + 4|0))>>2]|0;
 HEAP32[34180928>>2] = $91;
 $92 = HEAP32[((34184168 + 4|0))>>2]|0;
 HEAP32[34184168>>2] = $92;
 $93 = HEAP8[((220452760 + 1|0))>>0]|0;
 HEAP8[220452760>>0] = $93;
 $94 = HEAP32[((34184176 + 4|0))>>2]|0;
 HEAP32[34184176>>2] = $94;
 _memcpy((33571392|0),(((33571392 + 516|0))|0),516)|0;
 HEAP32[((34180928 + 4|0))>>2] = $move;
 $95 = (($ptree) + 571302|0);
 $96 = HEAP16[$95>>1]|0;
 $97 = $96 << 16 >> 16;
 HEAP32[((34184168 + 4|0))>>2] = $97;
 $98 = HEAP8[$34>>0]|0;
 HEAP8[((220452760 + 1|0))>>0] = $98;
 $99 = (($ptree) + 572073|0);
 $100 = HEAP8[$99>>0]|0;
 HEAP8[$34>>0] = $100;
 $101 = (($ptree) + 572074|0);
 $102 = HEAP8[$101>>0]|0;
 HEAP8[$99>>0] = $102;
 $103 = HEAP32[34184072>>2]|0;
 HEAP32[((34184176 + 4|0))>>2] = $103;
 _memcpy((((33571392 + 516|0))|0),(33570872|0),516)|0;
 $104 = HEAP32[((33570872 + 4|0))>>2]|0;
 $105 = ($104|0)==($move|0);
 $106 = HEAP8[((33570872 + 513|0))>>0]|0;
 $107 = ($106&255)>(1);
 $or$cond = $105 & $107;
 if (!($or$cond)) {
  HEAP32[33570872>>2] = 0;
  HEAP32[((33570872 + 4|0))>>2] = 0;
  HEAP8[((33570872 + 514|0))>>0] = 0;
  HEAP8[((33570872 + 513|0))>>0] = 0;
  HEAP32[34184072>>2] = 0;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $108 = HEAP8[((33570872 + 514|0))>>0]|0;
 $109 = ($108<<24>>24)==(0);
 $brmerge = $109 | $32;
 if (!($brmerge)) {
  $110 = (($108) + -1)<<24>>24;
  HEAP8[((33570872 + 514|0))>>0] = $110;
 }
 $111 = (($106) + -1)<<24>>24;
 HEAP8[((33570872 + 513|0))>>0] = $111;
 $112 = $111&255;
 $113 = $112 << 2;
 _memmove((((33570872 + 4|0))|0),(((33570872 + 8|0))|0),($113|0))|0;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _unmake_move_root($ptree) {
 $ptree = $ptree|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ptree) + 572204|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $3 = HEAP32[((34180928 + 4|0))>>2]|0;
 $4 = ($3|0)==(0);
 $or$cond = $2 | $4;
 if ($or$cond) {
  HEAP32[220526664>>2] = 221113440;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($ptree) + 572072|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (($ptree) + 572073|0);
 HEAP8[$7>>0] = $6;
 $8 = HEAP8[((220452760 + 1|0))>>0]|0;
 HEAP8[$5>>0] = $8;
 $9 = HEAP32[((34184168 + 4|0))>>2]|0;
 $10 = $9&65535;
 $11 = (($ptree) + 571302|0);
 HEAP16[$11>>1] = $10;
 $12 = HEAP32[((34184176 + 4|0))>>2]|0;
 HEAP32[34184072>>2] = $12;
 _memcpy((33570872|0),(((33571392 + 516|0))|0),516)|0;
 $13 = (($1) + -1)|0;
 HEAP32[$0>>2] = $13;
 $14 = HEAP32[34180920>>2]|0;
 $15 = $14 & -6;
 HEAP32[34180920>>2] = $15;
 $16 = HEAP32[34184024>>2]|0;
 $17 = $16 ^ 1;
 HEAP32[34184024>>2] = $17;
 $18 = HEAP32[34180928>>2]|0;
 HEAP32[((34180928 + 4|0))>>2] = $18;
 $19 = HEAP32[34184168>>2]|0;
 HEAP32[((34184168 + 4|0))>>2] = $19;
 $20 = HEAP8[220452760>>0]|0;
 HEAP8[((220452760 + 1|0))>>0] = $20;
 $21 = HEAP32[34184176>>2]|0;
 HEAP32[((34184176 + 4|0))>>2] = $21;
 _memcpy((((33571392 + 516|0))|0),(33571392|0),516)|0;
 HEAP32[34180928>>2] = 0;
 HEAP32[34184168>>2] = 0;
 HEAP8[220452760>>0] = 0;
 HEAP32[34184176>>2] = 0;
 HEAP32[33571392>>2] = 0;
 HEAP32[((33571392 + 4|0))>>2] = 0;
 HEAP8[((33571392 + 514|0))>>0] = 0;
 HEAP8[((33571392 + 513|0))>>0] = 0;
 $22 = ($16|0)==(1);
 if ($22) {
  _unmake_move_b($ptree,$3,1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  _unmake_move_w($ptree,$3,1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _unmake_move_b($ptree,$move,$ply) {
 $ptree = $ptree|0;
 $move = $move|0;
 $ply = $ply|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
 var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
 var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
 var $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0;
 var $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $move >>> 7;
 $1 = $0 & 127;
 $2 = $move & 127;
 $3 = (($ptree) + 572204|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($ply) + -1)|0;
 $6 = (($5) + ($4))|0;
 $7 = ((($ptree) + ($6<<3)|0) + 600|0);
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = $ptree;
 $15 = $14;
 HEAP32[$15>>2] = $10;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $13;
 $18 = ((($ptree) + ($ply<<1)|0) + 571300|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19 << 16 >> 16;
 $21 = (($ptree) + 508|0);
 HEAP32[$21>>2] = $20;
 $22 = ($1>>>0)>(80);
 if ($22) {
  switch ($1|0) {
  case 85:  {
   $111 = (34156304 + (($2*12)|0)|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (($ptree) + 380|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = $114 ^ $112;
   HEAP32[$113>>2] = $115;
   $116 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($ptree) + 384|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $119 ^ $117;
   HEAP32[$118>>2] = $120;
   $121 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($ptree) + 388|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $124 ^ $122;
   HEAP32[$123>>2] = $125;
   $126 = (($ptree) + 92|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $127 ^ $112;
   HEAP32[$126>>2] = $128;
   $129 = (($ptree) + 96|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = $130 ^ $117;
   HEAP32[$129>>2] = $131;
   $132 = (($ptree) + 100|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $133 ^ $122;
   HEAP32[$132>>2] = $134;
   $135 = (($ptree) + 500|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (($136) + 16384)|0;
   HEAP32[$135>>2] = $137;
   $196 = $112;$200 = $117;$204 = $122;
   break;
  }
  case 81:  {
   $23 = (34156304 + (($2*12)|0)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($ptree) + 356|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $26 ^ $24;
   HEAP32[$25>>2] = $27;
   $28 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($ptree) + 360|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $31 ^ $29;
   HEAP32[$30>>2] = $32;
   $33 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($ptree) + 364|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 ^ $34;
   HEAP32[$35>>2] = $37;
   $38 = (($2) + -9)|0;
   $39 = (34156304 + (($38*12)|0)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($ptree) + 164|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42 ^ $40;
   HEAP32[$41>>2] = $43;
   $44 = ((34156304 + (($38*12)|0)|0) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($ptree) + 168|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $47 ^ $45;
   HEAP32[$46>>2] = $48;
   $49 = ((34156304 + (($38*12)|0)|0) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($ptree) + 172|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52 ^ $50;
   HEAP32[$51>>2] = $53;
   $54 = (($ptree) + 500|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + 1)|0;
   HEAP32[$54>>2] = $56;
   $196 = $24;$200 = $29;$204 = $34;
   break;
  }
  case 83:  {
   $75 = (34156304 + (($2*12)|0)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (($ptree) + 212|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $78 ^ $76;
   HEAP32[$77>>2] = $79;
   $80 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (($ptree) + 216|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $83 ^ $81;
   HEAP32[$82>>2] = $84;
   $85 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($ptree) + 220|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $88 ^ $86;
   HEAP32[$87>>2] = $89;
   $90 = (($ptree) + 500|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($91) + 256)|0;
   HEAP32[$90>>2] = $92;
   $196 = $76;$200 = $81;$204 = $86;
   break;
  }
  case 82:  {
   $57 = (34156304 + (($2*12)|0)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($ptree) + 188|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $60 ^ $58;
   HEAP32[$59>>2] = $61;
   $62 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($ptree) + 192|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 ^ $63;
   HEAP32[$64>>2] = $66;
   $67 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (($ptree) + 196|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $70 ^ $68;
   HEAP32[$69>>2] = $71;
   $72 = (($ptree) + 500|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) + 32)|0;
   HEAP32[$72>>2] = $74;
   $196 = $58;$200 = $63;$204 = $68;
   break;
  }
  case 84:  {
   $93 = (34156304 + (($2*12)|0)|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (($ptree) + 236|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $96 ^ $94;
   HEAP32[$95>>2] = $97;
   $98 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (($ptree) + 240|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = $101 ^ $99;
   HEAP32[$100>>2] = $102;
   $103 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (($ptree) + 244|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = $106 ^ $104;
   HEAP32[$105>>2] = $107;
   $108 = (($ptree) + 500|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (($109) + 2048)|0;
   HEAP32[$108>>2] = $110;
   $196 = $94;$200 = $99;$204 = $104;
   break;
  }
  case 86:  {
   $138 = (34156304 + (($2*12)|0)|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = (($ptree) + 260|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = $141 ^ $139;
   HEAP32[$140>>2] = $142;
   $143 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = (($ptree) + 264|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $146 ^ $144;
   HEAP32[$145>>2] = $147;
   $148 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = (($ptree) + 268|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = $151 ^ $149;
   HEAP32[$150>>2] = $152;
   $153 = (($ptree) + 116|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = $154 ^ $139;
   HEAP32[$153>>2] = $155;
   $156 = (($ptree) + 120|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = $157 ^ $144;
   HEAP32[$156>>2] = $158;
   $159 = (($ptree) + 124|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = $160 ^ $149;
   HEAP32[$159>>2] = $161;
   $162 = (($ptree) + 500|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (($163) + 131072)|0;
   HEAP32[$162>>2] = $164;
   $196 = $139;$200 = $144;$204 = $149;
   break;
  }
  default: {
   $165 = (34156304 + (($2*12)|0)|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = (($ptree) + 284|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = $168 ^ $166;
   HEAP32[$167>>2] = $169;
   $170 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (($ptree) + 288|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $173 ^ $171;
   HEAP32[$172>>2] = $174;
   $175 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = (($ptree) + 292|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = $178 ^ $176;
   HEAP32[$177>>2] = $179;
   $180 = (($ptree) + 140|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $181 ^ $166;
   HEAP32[$180>>2] = $182;
   $183 = (($ptree) + 144|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = $184 ^ $171;
   HEAP32[$183>>2] = $185;
   $186 = (($ptree) + 148|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = $187 ^ $176;
   HEAP32[$186>>2] = $188;
   $189 = (($ptree) + 500|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = (($190) + 524288)|0;
   HEAP32[$189>>2] = $191;
   $196 = $166;$200 = $171;$204 = $176;
  }
  }
  $192 = ((($ptree) + ($2)|0) + 512|0);
  HEAP8[$192>>0] = 0;
  $193 = (($ptree) + 8|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = $194 ^ $196;
  HEAP32[$193>>2] = $195;
  $197 = (($ptree) + 12|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $198 ^ $200;
  HEAP32[$197>>2] = $199;
  $201 = (($ptree) + 16|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = $202 ^ $204;
  HEAP32[$201>>2] = $203;
  $205 = (34157280 + (($2*12)|0)|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = (($ptree) + 32|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = $208 ^ $206;
  HEAP32[$207>>2] = $209;
  $210 = ((34157280 + (($2*12)|0)|0) + 4|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = (($ptree) + 36|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = $213 ^ $211;
  HEAP32[$212>>2] = $214;
  $215 = ((34157280 + (($2*12)|0)|0) + 8|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = (($ptree) + 40|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = $218 ^ $216;
  HEAP32[$217>>2] = $219;
  $220 = (34158256 + (($2*12)|0)|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = (($ptree) + 44|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = $223 ^ $221;
  HEAP32[$222>>2] = $224;
  $225 = ((34158256 + (($2*12)|0)|0) + 4|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = (($ptree) + 48|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = $228 ^ $226;
  HEAP32[$227>>2] = $229;
  $230 = ((34158256 + (($2*12)|0)|0) + 8|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = (($ptree) + 52|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = $233 ^ $231;
  HEAP32[$232>>2] = $234;
  $235 = (34159232 + (($2*12)|0)|0);
  $236 = HEAP32[$235>>2]|0;
  $237 = (($ptree) + 56|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = $238 ^ $236;
  HEAP32[$237>>2] = $239;
  $240 = ((34159232 + (($2*12)|0)|0) + 4|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = (($ptree) + 60|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = $243 ^ $241;
  HEAP32[$242>>2] = $244;
  $245 = ((34159232 + (($2*12)|0)|0) + 8|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = (($ptree) + 64|0);
  $248 = HEAP32[$247>>2]|0;
  $249 = $248 ^ $246;
  HEAP32[$247>>2] = $249;
  STACKTOP = sp;return;
 }
 $250 = $move >>> 15;
 $251 = $250 & 15;
 $252 = $move >>> 19;
 $253 = $252 & 15;
 $254 = $move & 16384;
 $255 = (34156304 + (($1*12)|0)|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = (34156304 + (($2*12)|0)|0);
 $258 = HEAP32[$257>>2]|0;
 $259 = $258 | $256;
 $260 = ((34156304 + (($1*12)|0)|0) + 4|0);
 $261 = HEAP32[$260>>2]|0;
 $262 = ((34156304 + (($2*12)|0)|0) + 4|0);
 $263 = HEAP32[$262>>2]|0;
 $264 = $263 | $261;
 $265 = ((34156304 + (($1*12)|0)|0) + 8|0);
 $266 = HEAP32[$265>>2]|0;
 $267 = ((34156304 + (($2*12)|0)|0) + 8|0);
 $268 = HEAP32[$267>>2]|0;
 $269 = $268 | $266;
 $270 = (($ptree) + 8|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = $271 ^ $259;
 HEAP32[$270>>2] = $272;
 $273 = (($ptree) + 12|0);
 $274 = HEAP32[$273>>2]|0;
 $275 = $274 ^ $264;
 HEAP32[$273>>2] = $275;
 $276 = (($ptree) + 16|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 ^ $269;
 HEAP32[$276>>2] = $278;
 $279 = ($254|0)==(0);
 L14: do {
  if ($279) {
   do {
    switch ($251|0) {
    case 1:  {
     $475 = (($ptree) + 356|0);
     $476 = HEAP32[$475>>2]|0;
     $477 = $476 ^ $259;
     HEAP32[$475>>2] = $477;
     $478 = (($ptree) + 360|0);
     $479 = HEAP32[$478>>2]|0;
     $480 = $479 ^ $264;
     HEAP32[$478>>2] = $480;
     $481 = (($ptree) + 364|0);
     $482 = HEAP32[$481>>2]|0;
     $483 = $482 ^ $269;
     HEAP32[$481>>2] = $483;
     $484 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$484>>0] = 1;
     $485 = (($2) + -9)|0;
     $486 = (34156304 + (($485*12)|0)|0);
     $487 = HEAP32[$486>>2]|0;
     $488 = (($ptree) + 164|0);
     $489 = HEAP32[$488>>2]|0;
     $490 = $489 ^ $487;
     $491 = ((34156304 + (($485*12)|0)|0) + 4|0);
     $492 = HEAP32[$491>>2]|0;
     $493 = (($ptree) + 168|0);
     $494 = HEAP32[$493>>2]|0;
     $495 = $494 ^ $492;
     $496 = ((34156304 + (($485*12)|0)|0) + 8|0);
     $497 = HEAP32[$496>>2]|0;
     $498 = (($ptree) + 172|0);
     $499 = HEAP32[$498>>2]|0;
     $500 = $499 ^ $497;
     $501 = $490 ^ $258;
     HEAP32[$488>>2] = $501;
     $502 = $495 ^ $263;
     HEAP32[$493>>2] = $502;
     $503 = $500 ^ $268;
     HEAP32[$498>>2] = $503;
     break L14;
     break;
    }
    case 2:  {
     $504 = (($ptree) + 188|0);
     $505 = HEAP32[$504>>2]|0;
     $506 = $505 ^ $259;
     HEAP32[$504>>2] = $506;
     $507 = (($ptree) + 192|0);
     $508 = HEAP32[$507>>2]|0;
     $509 = $508 ^ $264;
     HEAP32[$507>>2] = $509;
     $510 = (($ptree) + 196|0);
     $511 = HEAP32[$510>>2]|0;
     $512 = $511 ^ $269;
     HEAP32[$510>>2] = $512;
     $513 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$513>>0] = 2;
     break L14;
     break;
    }
    case 3:  {
     $514 = (($ptree) + 212|0);
     $515 = HEAP32[$514>>2]|0;
     $516 = $515 ^ $259;
     HEAP32[$514>>2] = $516;
     $517 = (($ptree) + 216|0);
     $518 = HEAP32[$517>>2]|0;
     $519 = $518 ^ $264;
     HEAP32[$517>>2] = $519;
     $520 = (($ptree) + 220|0);
     $521 = HEAP32[$520>>2]|0;
     $522 = $521 ^ $269;
     HEAP32[$520>>2] = $522;
     $523 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$523>>0] = 3;
     break L14;
     break;
    }
    case 4:  {
     $524 = (($ptree) + 236|0);
     $525 = HEAP32[$524>>2]|0;
     $526 = $525 ^ $259;
     HEAP32[$524>>2] = $526;
     $527 = (($ptree) + 240|0);
     $528 = HEAP32[$527>>2]|0;
     $529 = $528 ^ $264;
     HEAP32[$527>>2] = $529;
     $530 = (($ptree) + 244|0);
     $531 = HEAP32[$530>>2]|0;
     $532 = $531 ^ $269;
     HEAP32[$530>>2] = $532;
     $533 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$533>>0] = 4;
     break L14;
     break;
    }
    case 5:  {
     $534 = (($ptree) + 380|0);
     $535 = HEAP32[$534>>2]|0;
     $536 = $535 ^ $259;
     HEAP32[$534>>2] = $536;
     $537 = (($ptree) + 384|0);
     $538 = HEAP32[$537>>2]|0;
     $539 = $538 ^ $264;
     HEAP32[$537>>2] = $539;
     $540 = (($ptree) + 388|0);
     $541 = HEAP32[$540>>2]|0;
     $542 = $541 ^ $269;
     HEAP32[$540>>2] = $542;
     $543 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$543>>0] = 5;
     $544 = (($ptree) + 92|0);
     $545 = HEAP32[$544>>2]|0;
     $546 = $545 ^ $259;
     HEAP32[$544>>2] = $546;
     $547 = (($ptree) + 96|0);
     $548 = HEAP32[$547>>2]|0;
     $549 = $548 ^ $264;
     HEAP32[$547>>2] = $549;
     $550 = (($ptree) + 100|0);
     $551 = HEAP32[$550>>2]|0;
     $552 = $551 ^ $269;
     HEAP32[$550>>2] = $552;
     break L14;
     break;
    }
    case 6:  {
     $553 = (($ptree) + 260|0);
     $554 = HEAP32[$553>>2]|0;
     $555 = $554 ^ $259;
     HEAP32[$553>>2] = $555;
     $556 = (($ptree) + 264|0);
     $557 = HEAP32[$556>>2]|0;
     $558 = $557 ^ $264;
     HEAP32[$556>>2] = $558;
     $559 = (($ptree) + 268|0);
     $560 = HEAP32[$559>>2]|0;
     $561 = $560 ^ $269;
     HEAP32[$559>>2] = $561;
     $562 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$562>>0] = 6;
     $563 = (($ptree) + 116|0);
     $564 = HEAP32[$563>>2]|0;
     $565 = $564 ^ $259;
     HEAP32[$563>>2] = $565;
     $566 = (($ptree) + 120|0);
     $567 = HEAP32[$566>>2]|0;
     $568 = $567 ^ $264;
     HEAP32[$566>>2] = $568;
     $569 = (($ptree) + 124|0);
     $570 = HEAP32[$569>>2]|0;
     $571 = $570 ^ $269;
     HEAP32[$569>>2] = $571;
     break L14;
     break;
    }
    case 7:  {
     $572 = (($ptree) + 284|0);
     $573 = HEAP32[$572>>2]|0;
     $574 = $573 ^ $259;
     HEAP32[$572>>2] = $574;
     $575 = (($ptree) + 288|0);
     $576 = HEAP32[$575>>2]|0;
     $577 = $576 ^ $264;
     HEAP32[$575>>2] = $577;
     $578 = (($ptree) + 292|0);
     $579 = HEAP32[$578>>2]|0;
     $580 = $579 ^ $269;
     HEAP32[$578>>2] = $580;
     $581 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$581>>0] = 7;
     $582 = (($ptree) + 140|0);
     $583 = HEAP32[$582>>2]|0;
     $584 = $583 ^ $259;
     HEAP32[$582>>2] = $584;
     $585 = (($ptree) + 144|0);
     $586 = HEAP32[$585>>2]|0;
     $587 = $586 ^ $264;
     HEAP32[$585>>2] = $587;
     $588 = (($ptree) + 148|0);
     $589 = HEAP32[$588>>2]|0;
     $590 = $589 ^ $269;
     HEAP32[$588>>2] = $590;
     break L14;
     break;
    }
    case 8:  {
     $591 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$591>>0] = 8;
     $592 = $1&255;
     $593 = (($ptree) + 593|0);
     HEAP8[$593>>0] = $592;
     $594 = (($ptree) + 68|0);
     $595 = HEAP32[$594>>2]|0;
     $596 = $595 ^ $259;
     HEAP32[$594>>2] = $596;
     $597 = (($ptree) + 72|0);
     $598 = HEAP32[$597>>2]|0;
     $599 = $598 ^ $264;
     HEAP32[$597>>2] = $599;
     $600 = (($ptree) + 76|0);
     $601 = HEAP32[$600>>2]|0;
     $602 = $601 ^ $269;
     HEAP32[$600>>2] = $602;
     break L14;
     break;
    }
    case 9:  {
     $603 = (($ptree) + 404|0);
     $604 = HEAP32[$603>>2]|0;
     $605 = $604 ^ $259;
     HEAP32[$603>>2] = $605;
     $606 = (($ptree) + 408|0);
     $607 = HEAP32[$606>>2]|0;
     $608 = $607 ^ $264;
     HEAP32[$606>>2] = $608;
     $609 = (($ptree) + 412|0);
     $610 = HEAP32[$609>>2]|0;
     $611 = $610 ^ $269;
     HEAP32[$609>>2] = $611;
     $612 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$612>>0] = 9;
     $613 = (($ptree) + 92|0);
     $614 = HEAP32[$613>>2]|0;
     $615 = $614 ^ $259;
     HEAP32[$613>>2] = $615;
     $616 = (($ptree) + 96|0);
     $617 = HEAP32[$616>>2]|0;
     $618 = $617 ^ $264;
     HEAP32[$616>>2] = $618;
     $619 = (($ptree) + 100|0);
     $620 = HEAP32[$619>>2]|0;
     $621 = $620 ^ $269;
     HEAP32[$619>>2] = $621;
     break L14;
     break;
    }
    case 10:  {
     $622 = (($ptree) + 428|0);
     $623 = HEAP32[$622>>2]|0;
     $624 = $623 ^ $259;
     HEAP32[$622>>2] = $624;
     $625 = (($ptree) + 432|0);
     $626 = HEAP32[$625>>2]|0;
     $627 = $626 ^ $264;
     HEAP32[$625>>2] = $627;
     $628 = (($ptree) + 436|0);
     $629 = HEAP32[$628>>2]|0;
     $630 = $629 ^ $269;
     HEAP32[$628>>2] = $630;
     $631 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$631>>0] = 10;
     $632 = (($ptree) + 92|0);
     $633 = HEAP32[$632>>2]|0;
     $634 = $633 ^ $259;
     HEAP32[$632>>2] = $634;
     $635 = (($ptree) + 96|0);
     $636 = HEAP32[$635>>2]|0;
     $637 = $636 ^ $264;
     HEAP32[$635>>2] = $637;
     $638 = (($ptree) + 100|0);
     $639 = HEAP32[$638>>2]|0;
     $640 = $639 ^ $269;
     HEAP32[$638>>2] = $640;
     break L14;
     break;
    }
    case 11:  {
     $641 = (($ptree) + 452|0);
     $642 = HEAP32[$641>>2]|0;
     $643 = $642 ^ $259;
     HEAP32[$641>>2] = $643;
     $644 = (($ptree) + 456|0);
     $645 = HEAP32[$644>>2]|0;
     $646 = $645 ^ $264;
     HEAP32[$644>>2] = $646;
     $647 = (($ptree) + 460|0);
     $648 = HEAP32[$647>>2]|0;
     $649 = $648 ^ $269;
     HEAP32[$647>>2] = $649;
     $650 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$650>>0] = 11;
     $651 = (($ptree) + 92|0);
     $652 = HEAP32[$651>>2]|0;
     $653 = $652 ^ $259;
     HEAP32[$651>>2] = $653;
     $654 = (($ptree) + 96|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = $655 ^ $264;
     HEAP32[$654>>2] = $656;
     $657 = (($ptree) + 100|0);
     $658 = HEAP32[$657>>2]|0;
     $659 = $658 ^ $269;
     HEAP32[$657>>2] = $659;
     break L14;
     break;
    }
    case 12:  {
     $660 = (($ptree) + 476|0);
     $661 = HEAP32[$660>>2]|0;
     $662 = $661 ^ $259;
     HEAP32[$660>>2] = $662;
     $663 = (($ptree) + 480|0);
     $664 = HEAP32[$663>>2]|0;
     $665 = $664 ^ $264;
     HEAP32[$663>>2] = $665;
     $666 = (($ptree) + 484|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = $667 ^ $269;
     HEAP32[$666>>2] = $668;
     $669 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$669>>0] = 12;
     $670 = (($ptree) + 92|0);
     $671 = HEAP32[$670>>2]|0;
     $672 = $671 ^ $259;
     HEAP32[$670>>2] = $672;
     $673 = (($ptree) + 96|0);
     $674 = HEAP32[$673>>2]|0;
     $675 = $674 ^ $264;
     HEAP32[$673>>2] = $675;
     $676 = (($ptree) + 100|0);
     $677 = HEAP32[$676>>2]|0;
     $678 = $677 ^ $269;
     HEAP32[$676>>2] = $678;
     break L14;
     break;
    }
    case 14:  {
     $679 = (($ptree) + 308|0);
     $680 = HEAP32[$679>>2]|0;
     $681 = $680 ^ $259;
     HEAP32[$679>>2] = $681;
     $682 = (($ptree) + 312|0);
     $683 = HEAP32[$682>>2]|0;
     $684 = $683 ^ $264;
     HEAP32[$682>>2] = $684;
     $685 = (($ptree) + 316|0);
     $686 = HEAP32[$685>>2]|0;
     $687 = $686 ^ $269;
     HEAP32[$685>>2] = $687;
     $688 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$688>>0] = 14;
     $689 = (($ptree) + 68|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = $690 ^ $259;
     HEAP32[$689>>2] = $691;
     $692 = (($ptree) + 72|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $693 ^ $264;
     HEAP32[$692>>2] = $694;
     $695 = (($ptree) + 76|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = $696 ^ $269;
     HEAP32[$695>>2] = $697;
     $698 = (($ptree) + 116|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 ^ $259;
     HEAP32[$698>>2] = $700;
     $701 = (($ptree) + 120|0);
     $702 = HEAP32[$701>>2]|0;
     $703 = $702 ^ $264;
     HEAP32[$701>>2] = $703;
     $704 = (($ptree) + 124|0);
     $705 = HEAP32[$704>>2]|0;
     $706 = $705 ^ $269;
     HEAP32[$704>>2] = $706;
     break L14;
     break;
    }
    default: {
     $707 = (($ptree) + 332|0);
     $708 = HEAP32[$707>>2]|0;
     $709 = $708 ^ $259;
     HEAP32[$707>>2] = $709;
     $710 = (($ptree) + 336|0);
     $711 = HEAP32[$710>>2]|0;
     $712 = $711 ^ $264;
     HEAP32[$710>>2] = $712;
     $713 = (($ptree) + 340|0);
     $714 = HEAP32[$713>>2]|0;
     $715 = $714 ^ $269;
     HEAP32[$713>>2] = $715;
     $716 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$716>>0] = 15;
     $717 = (($ptree) + 68|0);
     $718 = HEAP32[$717>>2]|0;
     $719 = $718 ^ $259;
     HEAP32[$717>>2] = $719;
     $720 = (($ptree) + 72|0);
     $721 = HEAP32[$720>>2]|0;
     $722 = $721 ^ $264;
     HEAP32[$720>>2] = $722;
     $723 = (($ptree) + 76|0);
     $724 = HEAP32[$723>>2]|0;
     $725 = $724 ^ $269;
     HEAP32[$723>>2] = $725;
     $726 = (($ptree) + 140|0);
     $727 = HEAP32[$726>>2]|0;
     $728 = $727 ^ $259;
     HEAP32[$726>>2] = $728;
     $729 = (($ptree) + 144|0);
     $730 = HEAP32[$729>>2]|0;
     $731 = $730 ^ $264;
     HEAP32[$729>>2] = $731;
     $732 = (($ptree) + 148|0);
     $733 = HEAP32[$732>>2]|0;
     $734 = $733 ^ $269;
     HEAP32[$732>>2] = $734;
     break L14;
    }
    }
   } while(0);
  } else {
   switch ($251|0) {
   case 6:  {
    $401 = (($ptree) + 260|0);
    $402 = HEAP32[$401>>2]|0;
    $403 = $402 ^ $256;
    HEAP32[$401>>2] = $403;
    $404 = (($ptree) + 264|0);
    $405 = HEAP32[$404>>2]|0;
    $406 = $405 ^ $261;
    HEAP32[$404>>2] = $406;
    $407 = (($ptree) + 268|0);
    $408 = HEAP32[$407>>2]|0;
    $409 = $408 ^ $266;
    HEAP32[$407>>2] = $409;
    $410 = (($ptree) + 308|0);
    $411 = HEAP32[$410>>2]|0;
    $412 = $411 ^ $258;
    HEAP32[$410>>2] = $412;
    $413 = (($ptree) + 312|0);
    $414 = HEAP32[$413>>2]|0;
    $415 = $414 ^ $263;
    HEAP32[$413>>2] = $415;
    $416 = (($ptree) + 316|0);
    $417 = HEAP32[$416>>2]|0;
    $418 = $417 ^ $268;
    HEAP32[$416>>2] = $418;
    $419 = ((($ptree) + ($1)|0) + 512|0);
    HEAP8[$419>>0] = 6;
    $420 = (($ptree) + 68|0);
    $421 = HEAP32[$420>>2]|0;
    $422 = $421 ^ $258;
    HEAP32[$420>>2] = $422;
    $423 = (($ptree) + 72|0);
    $424 = HEAP32[$423>>2]|0;
    $425 = $424 ^ $263;
    HEAP32[$423>>2] = $425;
    $426 = (($ptree) + 76|0);
    $427 = HEAP32[$426>>2]|0;
    $428 = $427 ^ $268;
    HEAP32[$426>>2] = $428;
    $429 = (($ptree) + 116|0);
    $430 = HEAP32[$429>>2]|0;
    $431 = $430 ^ $259;
    HEAP32[$429>>2] = $431;
    $432 = (($ptree) + 120|0);
    $433 = HEAP32[$432>>2]|0;
    $434 = $433 ^ $264;
    HEAP32[$432>>2] = $434;
    $435 = (($ptree) + 124|0);
    $436 = HEAP32[$435>>2]|0;
    $437 = $436 ^ $269;
    HEAP32[$435>>2] = $437;
    break L14;
    break;
   }
   case 1:  {
    $280 = (($ptree) + 356|0);
    $281 = HEAP32[$280>>2]|0;
    $282 = $281 ^ $256;
    HEAP32[$280>>2] = $282;
    $283 = (($ptree) + 360|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = $284 ^ $261;
    HEAP32[$283>>2] = $285;
    $286 = (($ptree) + 364|0);
    $287 = HEAP32[$286>>2]|0;
    $288 = $287 ^ $266;
    HEAP32[$286>>2] = $288;
    $289 = (($ptree) + 404|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = $290 ^ $258;
    HEAP32[$289>>2] = $291;
    $292 = (($ptree) + 408|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $293 ^ $263;
    HEAP32[$292>>2] = $294;
    $295 = (($ptree) + 412|0);
    $296 = HEAP32[$295>>2]|0;
    $297 = $296 ^ $268;
    HEAP32[$295>>2] = $297;
    $298 = ((($ptree) + ($1)|0) + 512|0);
    HEAP8[$298>>0] = 1;
    $299 = (($ptree) + 164|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = $300 ^ $258;
    HEAP32[$299>>2] = $301;
    $302 = (($ptree) + 168|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = $303 ^ $263;
    HEAP32[$302>>2] = $304;
    $305 = (($ptree) + 172|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = $306 ^ $268;
    HEAP32[$305>>2] = $307;
    $308 = (($ptree) + 92|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = $309 ^ $258;
    HEAP32[$308>>2] = $310;
    $311 = (($ptree) + 96|0);
    $312 = HEAP32[$311>>2]|0;
    $313 = $312 ^ $263;
    HEAP32[$311>>2] = $313;
    $314 = (($ptree) + 100|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = $315 ^ $268;
    HEAP32[$314>>2] = $316;
    break L14;
    break;
   }
   case 2:  {
    $317 = (($ptree) + 188|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = $318 ^ $256;
    HEAP32[$317>>2] = $319;
    $320 = (($ptree) + 192|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = $321 ^ $261;
    HEAP32[$320>>2] = $322;
    $323 = (($ptree) + 196|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = $324 ^ $266;
    HEAP32[$323>>2] = $325;
    $326 = (($ptree) + 428|0);
    $327 = HEAP32[$326>>2]|0;
    $328 = $327 ^ $258;
    HEAP32[$326>>2] = $328;
    $329 = (($ptree) + 432|0);
    $330 = HEAP32[$329>>2]|0;
    $331 = $330 ^ $263;
    HEAP32[$329>>2] = $331;
    $332 = (($ptree) + 436|0);
    $333 = HEAP32[$332>>2]|0;
    $334 = $333 ^ $268;
    HEAP32[$332>>2] = $334;
    $335 = ((($ptree) + ($1)|0) + 512|0);
    HEAP8[$335>>0] = 2;
    $336 = (($ptree) + 92|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = $337 ^ $258;
    HEAP32[$336>>2] = $338;
    $339 = (($ptree) + 96|0);
    $340 = HEAP32[$339>>2]|0;
    $341 = $340 ^ $263;
    HEAP32[$339>>2] = $341;
    $342 = (($ptree) + 100|0);
    $343 = HEAP32[$342>>2]|0;
    $344 = $343 ^ $268;
    HEAP32[$342>>2] = $344;
    break L14;
    break;
   }
   case 3:  {
    $345 = (($ptree) + 212|0);
    $346 = HEAP32[$345>>2]|0;
    $347 = $346 ^ $256;
    HEAP32[$345>>2] = $347;
    $348 = (($ptree) + 216|0);
    $349 = HEAP32[$348>>2]|0;
    $350 = $349 ^ $261;
    HEAP32[$348>>2] = $350;
    $351 = (($ptree) + 220|0);
    $352 = HEAP32[$351>>2]|0;
    $353 = $352 ^ $266;
    HEAP32[$351>>2] = $353;
    $354 = (($ptree) + 452|0);
    $355 = HEAP32[$354>>2]|0;
    $356 = $355 ^ $258;
    HEAP32[$354>>2] = $356;
    $357 = (($ptree) + 456|0);
    $358 = HEAP32[$357>>2]|0;
    $359 = $358 ^ $263;
    HEAP32[$357>>2] = $359;
    $360 = (($ptree) + 460|0);
    $361 = HEAP32[$360>>2]|0;
    $362 = $361 ^ $268;
    HEAP32[$360>>2] = $362;
    $363 = ((($ptree) + ($1)|0) + 512|0);
    HEAP8[$363>>0] = 3;
    $364 = (($ptree) + 92|0);
    $365 = HEAP32[$364>>2]|0;
    $366 = $365 ^ $258;
    HEAP32[$364>>2] = $366;
    $367 = (($ptree) + 96|0);
    $368 = HEAP32[$367>>2]|0;
    $369 = $368 ^ $263;
    HEAP32[$367>>2] = $369;
    $370 = (($ptree) + 100|0);
    $371 = HEAP32[$370>>2]|0;
    $372 = $371 ^ $268;
    HEAP32[$370>>2] = $372;
    break L14;
    break;
   }
   case 4:  {
    $373 = (($ptree) + 236|0);
    $374 = HEAP32[$373>>2]|0;
    $375 = $374 ^ $256;
    HEAP32[$373>>2] = $375;
    $376 = (($ptree) + 240|0);
    $377 = HEAP32[$376>>2]|0;
    $378 = $377 ^ $261;
    HEAP32[$376>>2] = $378;
    $379 = (($ptree) + 244|0);
    $380 = HEAP32[$379>>2]|0;
    $381 = $380 ^ $266;
    HEAP32[$379>>2] = $381;
    $382 = (($ptree) + 476|0);
    $383 = HEAP32[$382>>2]|0;
    $384 = $383 ^ $258;
    HEAP32[$382>>2] = $384;
    $385 = (($ptree) + 480|0);
    $386 = HEAP32[$385>>2]|0;
    $387 = $386 ^ $263;
    HEAP32[$385>>2] = $387;
    $388 = (($ptree) + 484|0);
    $389 = HEAP32[$388>>2]|0;
    $390 = $389 ^ $268;
    HEAP32[$388>>2] = $390;
    $391 = ((($ptree) + ($1)|0) + 512|0);
    HEAP8[$391>>0] = 4;
    $392 = (($ptree) + 92|0);
    $393 = HEAP32[$392>>2]|0;
    $394 = $393 ^ $258;
    HEAP32[$392>>2] = $394;
    $395 = (($ptree) + 96|0);
    $396 = HEAP32[$395>>2]|0;
    $397 = $396 ^ $263;
    HEAP32[$395>>2] = $397;
    $398 = (($ptree) + 100|0);
    $399 = HEAP32[$398>>2]|0;
    $400 = $399 ^ $268;
    HEAP32[$398>>2] = $400;
    break L14;
    break;
   }
   default: {
    $438 = (($ptree) + 284|0);
    $439 = HEAP32[$438>>2]|0;
    $440 = $439 ^ $256;
    HEAP32[$438>>2] = $440;
    $441 = (($ptree) + 288|0);
    $442 = HEAP32[$441>>2]|0;
    $443 = $442 ^ $261;
    HEAP32[$441>>2] = $443;
    $444 = (($ptree) + 292|0);
    $445 = HEAP32[$444>>2]|0;
    $446 = $445 ^ $266;
    HEAP32[$444>>2] = $446;
    $447 = (($ptree) + 332|0);
    $448 = HEAP32[$447>>2]|0;
    $449 = $448 ^ $258;
    HEAP32[$447>>2] = $449;
    $450 = (($ptree) + 336|0);
    $451 = HEAP32[$450>>2]|0;
    $452 = $451 ^ $263;
    HEAP32[$450>>2] = $452;
    $453 = (($ptree) + 340|0);
    $454 = HEAP32[$453>>2]|0;
    $455 = $454 ^ $268;
    HEAP32[$453>>2] = $455;
    $456 = ((($ptree) + ($1)|0) + 512|0);
    HEAP8[$456>>0] = 7;
    $457 = (($ptree) + 68|0);
    $458 = HEAP32[$457>>2]|0;
    $459 = $458 ^ $258;
    HEAP32[$457>>2] = $459;
    $460 = (($ptree) + 72|0);
    $461 = HEAP32[$460>>2]|0;
    $462 = $461 ^ $263;
    HEAP32[$460>>2] = $462;
    $463 = (($ptree) + 76|0);
    $464 = HEAP32[$463>>2]|0;
    $465 = $464 ^ $268;
    HEAP32[$463>>2] = $465;
    $466 = (($ptree) + 140|0);
    $467 = HEAP32[$466>>2]|0;
    $468 = $467 ^ $259;
    HEAP32[$466>>2] = $468;
    $469 = (($ptree) + 144|0);
    $470 = HEAP32[$469>>2]|0;
    $471 = $470 ^ $264;
    HEAP32[$469>>2] = $471;
    $472 = (($ptree) + 148|0);
    $473 = HEAP32[$472>>2]|0;
    $474 = $473 ^ $269;
    HEAP32[$472>>2] = $474;
    break L14;
   }
   }
  }
 } while(0);
 do {
  switch ($253|0) {
  case 0:  {
   $1073 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$1073>>0] = 0;
   $1074 = (34157280 + (($1*12)|0)|0);
   $1075 = HEAP32[$1074>>2]|0;
   $1076 = (34157280 + (($2*12)|0)|0);
   $1077 = HEAP32[$1076>>2]|0;
   $1078 = $1077 | $1075;
   $1079 = (($ptree) + 32|0);
   $1080 = HEAP32[$1079>>2]|0;
   $1081 = $1080 ^ $1078;
   HEAP32[$1079>>2] = $1081;
   $1082 = ((34157280 + (($1*12)|0)|0) + 4|0);
   $1083 = HEAP32[$1082>>2]|0;
   $1084 = ((34157280 + (($2*12)|0)|0) + 4|0);
   $1085 = HEAP32[$1084>>2]|0;
   $1086 = $1085 | $1083;
   $1087 = (($ptree) + 36|0);
   $1088 = HEAP32[$1087>>2]|0;
   $1089 = $1088 ^ $1086;
   HEAP32[$1087>>2] = $1089;
   $1090 = ((34157280 + (($1*12)|0)|0) + 8|0);
   $1091 = HEAP32[$1090>>2]|0;
   $1092 = ((34157280 + (($2*12)|0)|0) + 8|0);
   $1093 = HEAP32[$1092>>2]|0;
   $1094 = $1093 | $1091;
   $1095 = (($ptree) + 40|0);
   $1096 = HEAP32[$1095>>2]|0;
   $1097 = $1096 ^ $1094;
   HEAP32[$1095>>2] = $1097;
   $1098 = (34159232 + (($1*12)|0)|0);
   $1099 = HEAP32[$1098>>2]|0;
   $1100 = (34159232 + (($2*12)|0)|0);
   $1101 = HEAP32[$1100>>2]|0;
   $1102 = $1101 | $1099;
   $1103 = (($ptree) + 56|0);
   $1104 = HEAP32[$1103>>2]|0;
   $1105 = $1104 ^ $1102;
   HEAP32[$1103>>2] = $1105;
   $1106 = ((34159232 + (($1*12)|0)|0) + 4|0);
   $1107 = HEAP32[$1106>>2]|0;
   $1108 = ((34159232 + (($2*12)|0)|0) + 4|0);
   $1109 = HEAP32[$1108>>2]|0;
   $1110 = $1109 | $1107;
   $1111 = (($ptree) + 60|0);
   $1112 = HEAP32[$1111>>2]|0;
   $1113 = $1112 ^ $1110;
   HEAP32[$1111>>2] = $1113;
   $1114 = ((34159232 + (($1*12)|0)|0) + 8|0);
   $1115 = HEAP32[$1114>>2]|0;
   $1116 = ((34159232 + (($2*12)|0)|0) + 8|0);
   $1117 = HEAP32[$1116>>2]|0;
   $1118 = $1117 | $1115;
   $1119 = (($ptree) + 64|0);
   $1120 = HEAP32[$1119>>2]|0;
   $1121 = $1120 ^ $1118;
   HEAP32[$1119>>2] = $1121;
   $1122 = (34158256 + (($1*12)|0)|0);
   $1123 = HEAP32[$1122>>2]|0;
   $1124 = (34158256 + (($2*12)|0)|0);
   $1125 = HEAP32[$1124>>2]|0;
   $1126 = $1125 | $1123;
   $1127 = (($ptree) + 44|0);
   $1128 = HEAP32[$1127>>2]|0;
   $1129 = $1128 ^ $1126;
   HEAP32[$1127>>2] = $1129;
   $1130 = ((34158256 + (($1*12)|0)|0) + 4|0);
   $1131 = HEAP32[$1130>>2]|0;
   $1132 = ((34158256 + (($2*12)|0)|0) + 4|0);
   $1133 = HEAP32[$1132>>2]|0;
   $1134 = $1133 | $1131;
   $1135 = (($ptree) + 48|0);
   $1136 = HEAP32[$1135>>2]|0;
   $1137 = $1136 ^ $1134;
   HEAP32[$1135>>2] = $1137;
   $1138 = ((34158256 + (($1*12)|0)|0) + 8|0);
   $1139 = HEAP32[$1138>>2]|0;
   $1140 = ((34158256 + (($2*12)|0)|0) + 8|0);
   $1141 = HEAP32[$1140>>2]|0;
   $1142 = $1141 | $1139;
   $1143 = (($ptree) + 52|0);
   $1144 = HEAP32[$1143>>2]|0;
   $1145 = $1144 ^ $1142;
   HEAP32[$1143>>2] = $1145;
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $735 = (($ptree) + 368|0);
   $736 = HEAP32[$735>>2]|0;
   $737 = $736 ^ $258;
   HEAP32[$735>>2] = $737;
   $738 = (($ptree) + 372|0);
   $739 = HEAP32[$738>>2]|0;
   $740 = $739 ^ $263;
   HEAP32[$738>>2] = $740;
   $741 = (($ptree) + 376|0);
   $742 = HEAP32[$741>>2]|0;
   $743 = $742 ^ $268;
   HEAP32[$741>>2] = $743;
   $744 = (($ptree) + 500|0);
   $745 = HEAP32[$744>>2]|0;
   $746 = (($745) + -1)|0;
   HEAP32[$744>>2] = $746;
   $747 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$747>>0] = -1;
   $748 = (($2) + 9)|0;
   $749 = (34156304 + (($748*12)|0)|0);
   $750 = HEAP32[$749>>2]|0;
   $751 = (($ptree) + 176|0);
   $752 = HEAP32[$751>>2]|0;
   $753 = $752 ^ $750;
   HEAP32[$751>>2] = $753;
   $754 = ((34156304 + (($748*12)|0)|0) + 4|0);
   $755 = HEAP32[$754>>2]|0;
   $756 = (($ptree) + 180|0);
   $757 = HEAP32[$756>>2]|0;
   $758 = $757 ^ $755;
   HEAP32[$756>>2] = $758;
   $759 = ((34156304 + (($748*12)|0)|0) + 8|0);
   $760 = HEAP32[$759>>2]|0;
   $761 = (($ptree) + 184|0);
   $762 = HEAP32[$761>>2]|0;
   $763 = $762 ^ $760;
   HEAP32[$761>>2] = $763;
   break;
  }
  case 2:  {
   $764 = (($ptree) + 200|0);
   $765 = HEAP32[$764>>2]|0;
   $766 = $765 ^ $258;
   HEAP32[$764>>2] = $766;
   $767 = (($ptree) + 204|0);
   $768 = HEAP32[$767>>2]|0;
   $769 = $768 ^ $263;
   HEAP32[$767>>2] = $769;
   $770 = (($ptree) + 208|0);
   $771 = HEAP32[$770>>2]|0;
   $772 = $771 ^ $268;
   HEAP32[$770>>2] = $772;
   $773 = (($ptree) + 500|0);
   $774 = HEAP32[$773>>2]|0;
   $775 = (($774) + -32)|0;
   HEAP32[$773>>2] = $775;
   $776 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$776>>0] = -2;
   break;
  }
  case 3:  {
   $777 = (($ptree) + 224|0);
   $778 = HEAP32[$777>>2]|0;
   $779 = $778 ^ $258;
   HEAP32[$777>>2] = $779;
   $780 = (($ptree) + 228|0);
   $781 = HEAP32[$780>>2]|0;
   $782 = $781 ^ $263;
   HEAP32[$780>>2] = $782;
   $783 = (($ptree) + 232|0);
   $784 = HEAP32[$783>>2]|0;
   $785 = $784 ^ $268;
   HEAP32[$783>>2] = $785;
   $786 = (($ptree) + 500|0);
   $787 = HEAP32[$786>>2]|0;
   $788 = (($787) + -256)|0;
   HEAP32[$786>>2] = $788;
   $789 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$789>>0] = -3;
   break;
  }
  case 4:  {
   $790 = (($ptree) + 248|0);
   $791 = HEAP32[$790>>2]|0;
   $792 = $791 ^ $258;
   HEAP32[$790>>2] = $792;
   $793 = (($ptree) + 252|0);
   $794 = HEAP32[$793>>2]|0;
   $795 = $794 ^ $263;
   HEAP32[$793>>2] = $795;
   $796 = (($ptree) + 256|0);
   $797 = HEAP32[$796>>2]|0;
   $798 = $797 ^ $268;
   HEAP32[$796>>2] = $798;
   $799 = (($ptree) + 500|0);
   $800 = HEAP32[$799>>2]|0;
   $801 = (($800) + -2048)|0;
   HEAP32[$799>>2] = $801;
   $802 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$802>>0] = -4;
   break;
  }
  case 5:  {
   $803 = (($ptree) + 392|0);
   $804 = HEAP32[$803>>2]|0;
   $805 = $804 ^ $258;
   HEAP32[$803>>2] = $805;
   $806 = (($ptree) + 396|0);
   $807 = HEAP32[$806>>2]|0;
   $808 = $807 ^ $263;
   HEAP32[$806>>2] = $808;
   $809 = (($ptree) + 400|0);
   $810 = HEAP32[$809>>2]|0;
   $811 = $810 ^ $268;
   HEAP32[$809>>2] = $811;
   $812 = (($ptree) + 500|0);
   $813 = HEAP32[$812>>2]|0;
   $814 = (($813) + -16384)|0;
   HEAP32[$812>>2] = $814;
   $815 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$815>>0] = -5;
   $816 = (($ptree) + 104|0);
   $817 = HEAP32[$816>>2]|0;
   $818 = $817 ^ $258;
   HEAP32[$816>>2] = $818;
   $819 = (($ptree) + 108|0);
   $820 = HEAP32[$819>>2]|0;
   $821 = $820 ^ $263;
   HEAP32[$819>>2] = $821;
   $822 = (($ptree) + 112|0);
   $823 = HEAP32[$822>>2]|0;
   $824 = $823 ^ $268;
   HEAP32[$822>>2] = $824;
   break;
  }
  case 6:  {
   $825 = (($ptree) + 272|0);
   $826 = HEAP32[$825>>2]|0;
   $827 = $826 ^ $258;
   HEAP32[$825>>2] = $827;
   $828 = (($ptree) + 276|0);
   $829 = HEAP32[$828>>2]|0;
   $830 = $829 ^ $263;
   HEAP32[$828>>2] = $830;
   $831 = (($ptree) + 280|0);
   $832 = HEAP32[$831>>2]|0;
   $833 = $832 ^ $268;
   HEAP32[$831>>2] = $833;
   $834 = (($ptree) + 500|0);
   $835 = HEAP32[$834>>2]|0;
   $836 = (($835) + -131072)|0;
   HEAP32[$834>>2] = $836;
   $837 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$837>>0] = -6;
   $838 = (($ptree) + 128|0);
   $839 = HEAP32[$838>>2]|0;
   $840 = $839 ^ $258;
   HEAP32[$838>>2] = $840;
   $841 = (($ptree) + 132|0);
   $842 = HEAP32[$841>>2]|0;
   $843 = $842 ^ $263;
   HEAP32[$841>>2] = $843;
   $844 = (($ptree) + 136|0);
   $845 = HEAP32[$844>>2]|0;
   $846 = $845 ^ $268;
   HEAP32[$844>>2] = $846;
   break;
  }
  case 7:  {
   $847 = (($ptree) + 296|0);
   $848 = HEAP32[$847>>2]|0;
   $849 = $848 ^ $258;
   HEAP32[$847>>2] = $849;
   $850 = (($ptree) + 300|0);
   $851 = HEAP32[$850>>2]|0;
   $852 = $851 ^ $263;
   HEAP32[$850>>2] = $852;
   $853 = (($ptree) + 304|0);
   $854 = HEAP32[$853>>2]|0;
   $855 = $854 ^ $268;
   HEAP32[$853>>2] = $855;
   $856 = (($ptree) + 500|0);
   $857 = HEAP32[$856>>2]|0;
   $858 = (($857) + -524288)|0;
   HEAP32[$856>>2] = $858;
   $859 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$859>>0] = -7;
   $860 = (($ptree) + 152|0);
   $861 = HEAP32[$860>>2]|0;
   $862 = $861 ^ $258;
   HEAP32[$860>>2] = $862;
   $863 = (($ptree) + 156|0);
   $864 = HEAP32[$863>>2]|0;
   $865 = $864 ^ $263;
   HEAP32[$863>>2] = $865;
   $866 = (($ptree) + 160|0);
   $867 = HEAP32[$866>>2]|0;
   $868 = $867 ^ $268;
   HEAP32[$866>>2] = $868;
   break;
  }
  case 9:  {
   $869 = (($ptree) + 416|0);
   $870 = HEAP32[$869>>2]|0;
   $871 = $870 ^ $258;
   HEAP32[$869>>2] = $871;
   $872 = (($ptree) + 420|0);
   $873 = HEAP32[$872>>2]|0;
   $874 = $873 ^ $263;
   HEAP32[$872>>2] = $874;
   $875 = (($ptree) + 424|0);
   $876 = HEAP32[$875>>2]|0;
   $877 = $876 ^ $268;
   HEAP32[$875>>2] = $877;
   $878 = (($ptree) + 500|0);
   $879 = HEAP32[$878>>2]|0;
   $880 = (($879) + -1)|0;
   HEAP32[$878>>2] = $880;
   $881 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$881>>0] = -9;
   $882 = (($ptree) + 104|0);
   $883 = HEAP32[$882>>2]|0;
   $884 = $883 ^ $258;
   HEAP32[$882>>2] = $884;
   $885 = (($ptree) + 108|0);
   $886 = HEAP32[$885>>2]|0;
   $887 = $886 ^ $263;
   HEAP32[$885>>2] = $887;
   $888 = (($ptree) + 112|0);
   $889 = HEAP32[$888>>2]|0;
   $890 = $889 ^ $268;
   HEAP32[$888>>2] = $890;
   break;
  }
  case 10:  {
   $891 = (($ptree) + 440|0);
   $892 = HEAP32[$891>>2]|0;
   $893 = $892 ^ $258;
   HEAP32[$891>>2] = $893;
   $894 = (($ptree) + 444|0);
   $895 = HEAP32[$894>>2]|0;
   $896 = $895 ^ $263;
   HEAP32[$894>>2] = $896;
   $897 = (($ptree) + 448|0);
   $898 = HEAP32[$897>>2]|0;
   $899 = $898 ^ $268;
   HEAP32[$897>>2] = $899;
   $900 = (($ptree) + 500|0);
   $901 = HEAP32[$900>>2]|0;
   $902 = (($901) + -32)|0;
   HEAP32[$900>>2] = $902;
   $903 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$903>>0] = -10;
   $904 = (($ptree) + 104|0);
   $905 = HEAP32[$904>>2]|0;
   $906 = $905 ^ $258;
   HEAP32[$904>>2] = $906;
   $907 = (($ptree) + 108|0);
   $908 = HEAP32[$907>>2]|0;
   $909 = $908 ^ $263;
   HEAP32[$907>>2] = $909;
   $910 = (($ptree) + 112|0);
   $911 = HEAP32[$910>>2]|0;
   $912 = $911 ^ $268;
   HEAP32[$910>>2] = $912;
   break;
  }
  case 11:  {
   $913 = (($ptree) + 464|0);
   $914 = HEAP32[$913>>2]|0;
   $915 = $914 ^ $258;
   HEAP32[$913>>2] = $915;
   $916 = (($ptree) + 468|0);
   $917 = HEAP32[$916>>2]|0;
   $918 = $917 ^ $263;
   HEAP32[$916>>2] = $918;
   $919 = (($ptree) + 472|0);
   $920 = HEAP32[$919>>2]|0;
   $921 = $920 ^ $268;
   HEAP32[$919>>2] = $921;
   $922 = (($ptree) + 500|0);
   $923 = HEAP32[$922>>2]|0;
   $924 = (($923) + -256)|0;
   HEAP32[$922>>2] = $924;
   $925 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$925>>0] = -11;
   $926 = (($ptree) + 104|0);
   $927 = HEAP32[$926>>2]|0;
   $928 = $927 ^ $258;
   HEAP32[$926>>2] = $928;
   $929 = (($ptree) + 108|0);
   $930 = HEAP32[$929>>2]|0;
   $931 = $930 ^ $263;
   HEAP32[$929>>2] = $931;
   $932 = (($ptree) + 112|0);
   $933 = HEAP32[$932>>2]|0;
   $934 = $933 ^ $268;
   HEAP32[$932>>2] = $934;
   break;
  }
  case 12:  {
   $935 = (($ptree) + 488|0);
   $936 = HEAP32[$935>>2]|0;
   $937 = $936 ^ $258;
   HEAP32[$935>>2] = $937;
   $938 = (($ptree) + 492|0);
   $939 = HEAP32[$938>>2]|0;
   $940 = $939 ^ $263;
   HEAP32[$938>>2] = $940;
   $941 = (($ptree) + 496|0);
   $942 = HEAP32[$941>>2]|0;
   $943 = $942 ^ $268;
   HEAP32[$941>>2] = $943;
   $944 = (($ptree) + 500|0);
   $945 = HEAP32[$944>>2]|0;
   $946 = (($945) + -2048)|0;
   HEAP32[$944>>2] = $946;
   $947 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$947>>0] = -12;
   $948 = (($ptree) + 104|0);
   $949 = HEAP32[$948>>2]|0;
   $950 = $949 ^ $258;
   HEAP32[$948>>2] = $950;
   $951 = (($ptree) + 108|0);
   $952 = HEAP32[$951>>2]|0;
   $953 = $952 ^ $263;
   HEAP32[$951>>2] = $953;
   $954 = (($ptree) + 112|0);
   $955 = HEAP32[$954>>2]|0;
   $956 = $955 ^ $268;
   HEAP32[$954>>2] = $956;
   break;
  }
  case 14:  {
   $957 = (($ptree) + 320|0);
   $958 = HEAP32[$957>>2]|0;
   $959 = $958 ^ $258;
   HEAP32[$957>>2] = $959;
   $960 = (($ptree) + 324|0);
   $961 = HEAP32[$960>>2]|0;
   $962 = $961 ^ $263;
   HEAP32[$960>>2] = $962;
   $963 = (($ptree) + 328|0);
   $964 = HEAP32[$963>>2]|0;
   $965 = $964 ^ $268;
   HEAP32[$963>>2] = $965;
   $966 = (($ptree) + 500|0);
   $967 = HEAP32[$966>>2]|0;
   $968 = (($967) + -131072)|0;
   HEAP32[$966>>2] = $968;
   $969 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$969>>0] = -14;
   $970 = (($ptree) + 80|0);
   $971 = HEAP32[$970>>2]|0;
   $972 = $971 ^ $258;
   HEAP32[$970>>2] = $972;
   $973 = (($ptree) + 84|0);
   $974 = HEAP32[$973>>2]|0;
   $975 = $974 ^ $263;
   HEAP32[$973>>2] = $975;
   $976 = (($ptree) + 88|0);
   $977 = HEAP32[$976>>2]|0;
   $978 = $977 ^ $268;
   HEAP32[$976>>2] = $978;
   $979 = (($ptree) + 128|0);
   $980 = HEAP32[$979>>2]|0;
   $981 = $980 ^ $258;
   HEAP32[$979>>2] = $981;
   $982 = (($ptree) + 132|0);
   $983 = HEAP32[$982>>2]|0;
   $984 = $983 ^ $263;
   HEAP32[$982>>2] = $984;
   $985 = (($ptree) + 136|0);
   $986 = HEAP32[$985>>2]|0;
   $987 = $986 ^ $268;
   HEAP32[$985>>2] = $987;
   break;
  }
  default: {
   $988 = (($ptree) + 344|0);
   $989 = HEAP32[$988>>2]|0;
   $990 = $989 ^ $258;
   HEAP32[$988>>2] = $990;
   $991 = (($ptree) + 348|0);
   $992 = HEAP32[$991>>2]|0;
   $993 = $992 ^ $263;
   HEAP32[$991>>2] = $993;
   $994 = (($ptree) + 352|0);
   $995 = HEAP32[$994>>2]|0;
   $996 = $995 ^ $268;
   HEAP32[$994>>2] = $996;
   $997 = (($ptree) + 500|0);
   $998 = HEAP32[$997>>2]|0;
   $999 = (($998) + -524288)|0;
   HEAP32[$997>>2] = $999;
   $1000 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$1000>>0] = -15;
   $1001 = (($ptree) + 80|0);
   $1002 = HEAP32[$1001>>2]|0;
   $1003 = $1002 ^ $258;
   HEAP32[$1001>>2] = $1003;
   $1004 = (($ptree) + 84|0);
   $1005 = HEAP32[$1004>>2]|0;
   $1006 = $1005 ^ $263;
   HEAP32[$1004>>2] = $1006;
   $1007 = (($ptree) + 88|0);
   $1008 = HEAP32[$1007>>2]|0;
   $1009 = $1008 ^ $268;
   HEAP32[$1007>>2] = $1009;
   $1010 = (($ptree) + 152|0);
   $1011 = HEAP32[$1010>>2]|0;
   $1012 = $1011 ^ $258;
   HEAP32[$1010>>2] = $1012;
   $1013 = (($ptree) + 156|0);
   $1014 = HEAP32[$1013>>2]|0;
   $1015 = $1014 ^ $263;
   HEAP32[$1013>>2] = $1015;
   $1016 = (($ptree) + 160|0);
   $1017 = HEAP32[$1016>>2]|0;
   $1018 = $1017 ^ $268;
   HEAP32[$1016>>2] = $1018;
  }
  }
 } while(0);
 $1019 = (($ptree) + 20|0);
 $1020 = HEAP32[$1019>>2]|0;
 $1021 = $1020 ^ $258;
 HEAP32[$1019>>2] = $1021;
 $1022 = (($ptree) + 24|0);
 $1023 = HEAP32[$1022>>2]|0;
 $1024 = $1023 ^ $263;
 HEAP32[$1022>>2] = $1024;
 $1025 = (($ptree) + 28|0);
 $1026 = HEAP32[$1025>>2]|0;
 $1027 = $1026 ^ $268;
 HEAP32[$1025>>2] = $1027;
 $1028 = (34157280 + (($1*12)|0)|0);
 $1029 = HEAP32[$1028>>2]|0;
 $1030 = (($ptree) + 32|0);
 $1031 = HEAP32[$1030>>2]|0;
 $1032 = $1031 ^ $1029;
 HEAP32[$1030>>2] = $1032;
 $1033 = ((34157280 + (($1*12)|0)|0) + 4|0);
 $1034 = HEAP32[$1033>>2]|0;
 $1035 = (($ptree) + 36|0);
 $1036 = HEAP32[$1035>>2]|0;
 $1037 = $1036 ^ $1034;
 HEAP32[$1035>>2] = $1037;
 $1038 = ((34157280 + (($1*12)|0)|0) + 8|0);
 $1039 = HEAP32[$1038>>2]|0;
 $1040 = (($ptree) + 40|0);
 $1041 = HEAP32[$1040>>2]|0;
 $1042 = $1041 ^ $1039;
 HEAP32[$1040>>2] = $1042;
 $1043 = (34159232 + (($1*12)|0)|0);
 $1044 = HEAP32[$1043>>2]|0;
 $1045 = (($ptree) + 56|0);
 $1046 = HEAP32[$1045>>2]|0;
 $1047 = $1046 ^ $1044;
 HEAP32[$1045>>2] = $1047;
 $1048 = ((34159232 + (($1*12)|0)|0) + 4|0);
 $1049 = HEAP32[$1048>>2]|0;
 $1050 = (($ptree) + 60|0);
 $1051 = HEAP32[$1050>>2]|0;
 $1052 = $1051 ^ $1049;
 HEAP32[$1050>>2] = $1052;
 $1053 = ((34159232 + (($1*12)|0)|0) + 8|0);
 $1054 = HEAP32[$1053>>2]|0;
 $1055 = (($ptree) + 64|0);
 $1056 = HEAP32[$1055>>2]|0;
 $1057 = $1056 ^ $1054;
 HEAP32[$1055>>2] = $1057;
 $1058 = (34158256 + (($1*12)|0)|0);
 $1059 = HEAP32[$1058>>2]|0;
 $1060 = (($ptree) + 44|0);
 $1061 = HEAP32[$1060>>2]|0;
 $1062 = $1061 ^ $1059;
 HEAP32[$1060>>2] = $1062;
 $1063 = ((34158256 + (($1*12)|0)|0) + 4|0);
 $1064 = HEAP32[$1063>>2]|0;
 $1065 = (($ptree) + 48|0);
 $1066 = HEAP32[$1065>>2]|0;
 $1067 = $1066 ^ $1064;
 HEAP32[$1065>>2] = $1067;
 $1068 = ((34158256 + (($1*12)|0)|0) + 8|0);
 $1069 = HEAP32[$1068>>2]|0;
 $1070 = (($ptree) + 52|0);
 $1071 = HEAP32[$1070>>2]|0;
 $1072 = $1071 ^ $1069;
 HEAP32[$1070>>2] = $1072;
 STACKTOP = sp;return;
}
function _unmake_move_w($ptree,$move,$ply) {
 $ptree = $ptree|0;
 $move = $move|0;
 $ply = $ply|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
 var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
 var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
 var $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0;
 var $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $move >>> 7;
 $1 = $0 & 127;
 $2 = $move & 127;
 $3 = (($ptree) + 572204|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($ply) + -1)|0;
 $6 = (($5) + ($4))|0;
 $7 = ((($ptree) + ($6<<3)|0) + 600|0);
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = $ptree;
 $15 = $14;
 HEAP32[$15>>2] = $10;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $13;
 $18 = ((($ptree) + ($ply<<1)|0) + 571300|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19 << 16 >> 16;
 $21 = (($ptree) + 508|0);
 HEAP32[$21>>2] = $20;
 $22 = ($1>>>0)>(80);
 if ($22) {
  switch ($1|0) {
  case 85:  {
   $111 = (34156304 + (($2*12)|0)|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (($ptree) + 392|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = $114 ^ $112;
   HEAP32[$113>>2] = $115;
   $116 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($ptree) + 396|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $119 ^ $117;
   HEAP32[$118>>2] = $120;
   $121 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($ptree) + 400|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $124 ^ $122;
   HEAP32[$123>>2] = $125;
   $126 = (($ptree) + 104|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $127 ^ $112;
   HEAP32[$126>>2] = $128;
   $129 = (($ptree) + 108|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = $130 ^ $117;
   HEAP32[$129>>2] = $131;
   $132 = (($ptree) + 112|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $133 ^ $122;
   HEAP32[$132>>2] = $134;
   $135 = (($ptree) + 504|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (($136) + 16384)|0;
   HEAP32[$135>>2] = $137;
   $196 = $112;$200 = $117;$204 = $122;
   break;
  }
  case 81:  {
   $23 = (34156304 + (($2*12)|0)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($ptree) + 368|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $26 ^ $24;
   HEAP32[$25>>2] = $27;
   $28 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($ptree) + 372|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $31 ^ $29;
   HEAP32[$30>>2] = $32;
   $33 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($ptree) + 376|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 ^ $34;
   HEAP32[$35>>2] = $37;
   $38 = (($2) + 9)|0;
   $39 = (34156304 + (($38*12)|0)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($ptree) + 176|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42 ^ $40;
   HEAP32[$41>>2] = $43;
   $44 = ((34156304 + (($38*12)|0)|0) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($ptree) + 180|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $47 ^ $45;
   HEAP32[$46>>2] = $48;
   $49 = ((34156304 + (($38*12)|0)|0) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($ptree) + 184|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52 ^ $50;
   HEAP32[$51>>2] = $53;
   $54 = (($ptree) + 504|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + 1)|0;
   HEAP32[$54>>2] = $56;
   $196 = $24;$200 = $29;$204 = $34;
   break;
  }
  case 82:  {
   $57 = (34156304 + (($2*12)|0)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($ptree) + 200|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $60 ^ $58;
   HEAP32[$59>>2] = $61;
   $62 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($ptree) + 204|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 ^ $63;
   HEAP32[$64>>2] = $66;
   $67 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (($ptree) + 208|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $70 ^ $68;
   HEAP32[$69>>2] = $71;
   $72 = (($ptree) + 504|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) + 32)|0;
   HEAP32[$72>>2] = $74;
   $196 = $58;$200 = $63;$204 = $68;
   break;
  }
  case 83:  {
   $75 = (34156304 + (($2*12)|0)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (($ptree) + 224|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $78 ^ $76;
   HEAP32[$77>>2] = $79;
   $80 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (($ptree) + 228|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $83 ^ $81;
   HEAP32[$82>>2] = $84;
   $85 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($ptree) + 232|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $88 ^ $86;
   HEAP32[$87>>2] = $89;
   $90 = (($ptree) + 504|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($91) + 256)|0;
   HEAP32[$90>>2] = $92;
   $196 = $76;$200 = $81;$204 = $86;
   break;
  }
  case 84:  {
   $93 = (34156304 + (($2*12)|0)|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (($ptree) + 248|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $96 ^ $94;
   HEAP32[$95>>2] = $97;
   $98 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (($ptree) + 252|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = $101 ^ $99;
   HEAP32[$100>>2] = $102;
   $103 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (($ptree) + 256|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = $106 ^ $104;
   HEAP32[$105>>2] = $107;
   $108 = (($ptree) + 504|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (($109) + 2048)|0;
   HEAP32[$108>>2] = $110;
   $196 = $94;$200 = $99;$204 = $104;
   break;
  }
  case 86:  {
   $138 = (34156304 + (($2*12)|0)|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = (($ptree) + 272|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = $141 ^ $139;
   HEAP32[$140>>2] = $142;
   $143 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = (($ptree) + 276|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $146 ^ $144;
   HEAP32[$145>>2] = $147;
   $148 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = (($ptree) + 280|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = $151 ^ $149;
   HEAP32[$150>>2] = $152;
   $153 = (($ptree) + 128|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = $154 ^ $139;
   HEAP32[$153>>2] = $155;
   $156 = (($ptree) + 132|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = $157 ^ $144;
   HEAP32[$156>>2] = $158;
   $159 = (($ptree) + 136|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = $160 ^ $149;
   HEAP32[$159>>2] = $161;
   $162 = (($ptree) + 504|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (($163) + 131072)|0;
   HEAP32[$162>>2] = $164;
   $196 = $139;$200 = $144;$204 = $149;
   break;
  }
  default: {
   $165 = (34156304 + (($2*12)|0)|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = (($ptree) + 296|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = $168 ^ $166;
   HEAP32[$167>>2] = $169;
   $170 = ((34156304 + (($2*12)|0)|0) + 4|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (($ptree) + 300|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $173 ^ $171;
   HEAP32[$172>>2] = $174;
   $175 = ((34156304 + (($2*12)|0)|0) + 8|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = (($ptree) + 304|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = $178 ^ $176;
   HEAP32[$177>>2] = $179;
   $180 = (($ptree) + 152|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $181 ^ $166;
   HEAP32[$180>>2] = $182;
   $183 = (($ptree) + 156|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = $184 ^ $171;
   HEAP32[$183>>2] = $185;
   $186 = (($ptree) + 160|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = $187 ^ $176;
   HEAP32[$186>>2] = $188;
   $189 = (($ptree) + 504|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = (($190) + 524288)|0;
   HEAP32[$189>>2] = $191;
   $196 = $166;$200 = $171;$204 = $176;
  }
  }
  $192 = ((($ptree) + ($2)|0) + 512|0);
  HEAP8[$192>>0] = 0;
  $193 = (($ptree) + 20|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = $194 ^ $196;
  HEAP32[$193>>2] = $195;
  $197 = (($ptree) + 24|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $198 ^ $200;
  HEAP32[$197>>2] = $199;
  $201 = (($ptree) + 28|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = $202 ^ $204;
  HEAP32[$201>>2] = $203;
  $205 = (34157280 + (($2*12)|0)|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = (($ptree) + 32|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = $208 ^ $206;
  HEAP32[$207>>2] = $209;
  $210 = ((34157280 + (($2*12)|0)|0) + 4|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = (($ptree) + 36|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = $213 ^ $211;
  HEAP32[$212>>2] = $214;
  $215 = ((34157280 + (($2*12)|0)|0) + 8|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = (($ptree) + 40|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = $218 ^ $216;
  HEAP32[$217>>2] = $219;
  $220 = (34158256 + (($2*12)|0)|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = (($ptree) + 44|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = $223 ^ $221;
  HEAP32[$222>>2] = $224;
  $225 = ((34158256 + (($2*12)|0)|0) + 4|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = (($ptree) + 48|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = $228 ^ $226;
  HEAP32[$227>>2] = $229;
  $230 = ((34158256 + (($2*12)|0)|0) + 8|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = (($ptree) + 52|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = $233 ^ $231;
  HEAP32[$232>>2] = $234;
  $235 = (34159232 + (($2*12)|0)|0);
  $236 = HEAP32[$235>>2]|0;
  $237 = (($ptree) + 56|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = $238 ^ $236;
  HEAP32[$237>>2] = $239;
  $240 = ((34159232 + (($2*12)|0)|0) + 4|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = (($ptree) + 60|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = $243 ^ $241;
  HEAP32[$242>>2] = $244;
  $245 = ((34159232 + (($2*12)|0)|0) + 8|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = (($ptree) + 64|0);
  $248 = HEAP32[$247>>2]|0;
  $249 = $248 ^ $246;
  HEAP32[$247>>2] = $249;
  STACKTOP = sp;return;
 }
 $250 = $move >>> 15;
 $251 = $250 & 15;
 $252 = $move >>> 19;
 $253 = $252 & 15;
 $254 = $move & 16384;
 $255 = (34156304 + (($1*12)|0)|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = (34156304 + (($2*12)|0)|0);
 $258 = HEAP32[$257>>2]|0;
 $259 = $258 | $256;
 $260 = ((34156304 + (($1*12)|0)|0) + 4|0);
 $261 = HEAP32[$260>>2]|0;
 $262 = ((34156304 + (($2*12)|0)|0) + 4|0);
 $263 = HEAP32[$262>>2]|0;
 $264 = $263 | $261;
 $265 = ((34156304 + (($1*12)|0)|0) + 8|0);
 $266 = HEAP32[$265>>2]|0;
 $267 = ((34156304 + (($2*12)|0)|0) + 8|0);
 $268 = HEAP32[$267>>2]|0;
 $269 = $268 | $266;
 $270 = (($ptree) + 20|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = $271 ^ $259;
 HEAP32[$270>>2] = $272;
 $273 = (($ptree) + 24|0);
 $274 = HEAP32[$273>>2]|0;
 $275 = $274 ^ $264;
 HEAP32[$273>>2] = $275;
 $276 = (($ptree) + 28|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 ^ $269;
 HEAP32[$276>>2] = $278;
 $279 = ($254|0)==(0);
 L14: do {
  if ($279) {
   do {
    switch ($251|0) {
    case 1:  {
     $475 = (($ptree) + 368|0);
     $476 = HEAP32[$475>>2]|0;
     $477 = $476 ^ $259;
     HEAP32[$475>>2] = $477;
     $478 = (($ptree) + 372|0);
     $479 = HEAP32[$478>>2]|0;
     $480 = $479 ^ $264;
     HEAP32[$478>>2] = $480;
     $481 = (($ptree) + 376|0);
     $482 = HEAP32[$481>>2]|0;
     $483 = $482 ^ $269;
     HEAP32[$481>>2] = $483;
     $484 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$484>>0] = -1;
     $485 = (($2) + 9)|0;
     $486 = (34156304 + (($485*12)|0)|0);
     $487 = HEAP32[$486>>2]|0;
     $488 = (($ptree) + 176|0);
     $489 = HEAP32[$488>>2]|0;
     $490 = $489 ^ $487;
     $491 = ((34156304 + (($485*12)|0)|0) + 4|0);
     $492 = HEAP32[$491>>2]|0;
     $493 = (($ptree) + 180|0);
     $494 = HEAP32[$493>>2]|0;
     $495 = $494 ^ $492;
     $496 = ((34156304 + (($485*12)|0)|0) + 8|0);
     $497 = HEAP32[$496>>2]|0;
     $498 = (($ptree) + 184|0);
     $499 = HEAP32[$498>>2]|0;
     $500 = $499 ^ $497;
     $501 = $490 ^ $258;
     HEAP32[$488>>2] = $501;
     $502 = $495 ^ $263;
     HEAP32[$493>>2] = $502;
     $503 = $500 ^ $268;
     HEAP32[$498>>2] = $503;
     break L14;
     break;
    }
    case 2:  {
     $504 = (($ptree) + 200|0);
     $505 = HEAP32[$504>>2]|0;
     $506 = $505 ^ $259;
     HEAP32[$504>>2] = $506;
     $507 = (($ptree) + 204|0);
     $508 = HEAP32[$507>>2]|0;
     $509 = $508 ^ $264;
     HEAP32[$507>>2] = $509;
     $510 = (($ptree) + 208|0);
     $511 = HEAP32[$510>>2]|0;
     $512 = $511 ^ $269;
     HEAP32[$510>>2] = $512;
     $513 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$513>>0] = -2;
     break L14;
     break;
    }
    case 3:  {
     $514 = (($ptree) + 224|0);
     $515 = HEAP32[$514>>2]|0;
     $516 = $515 ^ $259;
     HEAP32[$514>>2] = $516;
     $517 = (($ptree) + 228|0);
     $518 = HEAP32[$517>>2]|0;
     $519 = $518 ^ $264;
     HEAP32[$517>>2] = $519;
     $520 = (($ptree) + 232|0);
     $521 = HEAP32[$520>>2]|0;
     $522 = $521 ^ $269;
     HEAP32[$520>>2] = $522;
     $523 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$523>>0] = -3;
     break L14;
     break;
    }
    case 4:  {
     $524 = (($ptree) + 248|0);
     $525 = HEAP32[$524>>2]|0;
     $526 = $525 ^ $259;
     HEAP32[$524>>2] = $526;
     $527 = (($ptree) + 252|0);
     $528 = HEAP32[$527>>2]|0;
     $529 = $528 ^ $264;
     HEAP32[$527>>2] = $529;
     $530 = (($ptree) + 256|0);
     $531 = HEAP32[$530>>2]|0;
     $532 = $531 ^ $269;
     HEAP32[$530>>2] = $532;
     $533 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$533>>0] = -4;
     break L14;
     break;
    }
    case 5:  {
     $534 = (($ptree) + 392|0);
     $535 = HEAP32[$534>>2]|0;
     $536 = $535 ^ $259;
     HEAP32[$534>>2] = $536;
     $537 = (($ptree) + 396|0);
     $538 = HEAP32[$537>>2]|0;
     $539 = $538 ^ $264;
     HEAP32[$537>>2] = $539;
     $540 = (($ptree) + 400|0);
     $541 = HEAP32[$540>>2]|0;
     $542 = $541 ^ $269;
     HEAP32[$540>>2] = $542;
     $543 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$543>>0] = -5;
     $544 = (($ptree) + 104|0);
     $545 = HEAP32[$544>>2]|0;
     $546 = $545 ^ $259;
     HEAP32[$544>>2] = $546;
     $547 = (($ptree) + 108|0);
     $548 = HEAP32[$547>>2]|0;
     $549 = $548 ^ $264;
     HEAP32[$547>>2] = $549;
     $550 = (($ptree) + 112|0);
     $551 = HEAP32[$550>>2]|0;
     $552 = $551 ^ $269;
     HEAP32[$550>>2] = $552;
     break L14;
     break;
    }
    case 6:  {
     $553 = (($ptree) + 272|0);
     $554 = HEAP32[$553>>2]|0;
     $555 = $554 ^ $259;
     HEAP32[$553>>2] = $555;
     $556 = (($ptree) + 276|0);
     $557 = HEAP32[$556>>2]|0;
     $558 = $557 ^ $264;
     HEAP32[$556>>2] = $558;
     $559 = (($ptree) + 280|0);
     $560 = HEAP32[$559>>2]|0;
     $561 = $560 ^ $269;
     HEAP32[$559>>2] = $561;
     $562 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$562>>0] = -6;
     $563 = (($ptree) + 128|0);
     $564 = HEAP32[$563>>2]|0;
     $565 = $564 ^ $259;
     HEAP32[$563>>2] = $565;
     $566 = (($ptree) + 132|0);
     $567 = HEAP32[$566>>2]|0;
     $568 = $567 ^ $264;
     HEAP32[$566>>2] = $568;
     $569 = (($ptree) + 136|0);
     $570 = HEAP32[$569>>2]|0;
     $571 = $570 ^ $269;
     HEAP32[$569>>2] = $571;
     break L14;
     break;
    }
    case 7:  {
     $572 = (($ptree) + 296|0);
     $573 = HEAP32[$572>>2]|0;
     $574 = $573 ^ $259;
     HEAP32[$572>>2] = $574;
     $575 = (($ptree) + 300|0);
     $576 = HEAP32[$575>>2]|0;
     $577 = $576 ^ $264;
     HEAP32[$575>>2] = $577;
     $578 = (($ptree) + 304|0);
     $579 = HEAP32[$578>>2]|0;
     $580 = $579 ^ $269;
     HEAP32[$578>>2] = $580;
     $581 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$581>>0] = -7;
     $582 = (($ptree) + 152|0);
     $583 = HEAP32[$582>>2]|0;
     $584 = $583 ^ $259;
     HEAP32[$582>>2] = $584;
     $585 = (($ptree) + 156|0);
     $586 = HEAP32[$585>>2]|0;
     $587 = $586 ^ $264;
     HEAP32[$585>>2] = $587;
     $588 = (($ptree) + 160|0);
     $589 = HEAP32[$588>>2]|0;
     $590 = $589 ^ $269;
     HEAP32[$588>>2] = $590;
     break L14;
     break;
    }
    case 8:  {
     $591 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$591>>0] = -8;
     $592 = $1&255;
     $593 = (($ptree) + 594|0);
     HEAP8[$593>>0] = $592;
     $594 = (($ptree) + 80|0);
     $595 = HEAP32[$594>>2]|0;
     $596 = $595 ^ $259;
     HEAP32[$594>>2] = $596;
     $597 = (($ptree) + 84|0);
     $598 = HEAP32[$597>>2]|0;
     $599 = $598 ^ $264;
     HEAP32[$597>>2] = $599;
     $600 = (($ptree) + 88|0);
     $601 = HEAP32[$600>>2]|0;
     $602 = $601 ^ $269;
     HEAP32[$600>>2] = $602;
     break L14;
     break;
    }
    case 9:  {
     $603 = (($ptree) + 416|0);
     $604 = HEAP32[$603>>2]|0;
     $605 = $604 ^ $259;
     HEAP32[$603>>2] = $605;
     $606 = (($ptree) + 420|0);
     $607 = HEAP32[$606>>2]|0;
     $608 = $607 ^ $264;
     HEAP32[$606>>2] = $608;
     $609 = (($ptree) + 424|0);
     $610 = HEAP32[$609>>2]|0;
     $611 = $610 ^ $269;
     HEAP32[$609>>2] = $611;
     $612 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$612>>0] = -9;
     $613 = (($ptree) + 104|0);
     $614 = HEAP32[$613>>2]|0;
     $615 = $614 ^ $259;
     HEAP32[$613>>2] = $615;
     $616 = (($ptree) + 108|0);
     $617 = HEAP32[$616>>2]|0;
     $618 = $617 ^ $264;
     HEAP32[$616>>2] = $618;
     $619 = (($ptree) + 112|0);
     $620 = HEAP32[$619>>2]|0;
     $621 = $620 ^ $269;
     HEAP32[$619>>2] = $621;
     break L14;
     break;
    }
    case 10:  {
     $622 = (($ptree) + 440|0);
     $623 = HEAP32[$622>>2]|0;
     $624 = $623 ^ $259;
     HEAP32[$622>>2] = $624;
     $625 = (($ptree) + 444|0);
     $626 = HEAP32[$625>>2]|0;
     $627 = $626 ^ $264;
     HEAP32[$625>>2] = $627;
     $628 = (($ptree) + 448|0);
     $629 = HEAP32[$628>>2]|0;
     $630 = $629 ^ $269;
     HEAP32[$628>>2] = $630;
     $631 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$631>>0] = -10;
     $632 = (($ptree) + 104|0);
     $633 = HEAP32[$632>>2]|0;
     $634 = $633 ^ $259;
     HEAP32[$632>>2] = $634;
     $635 = (($ptree) + 108|0);
     $636 = HEAP32[$635>>2]|0;
     $637 = $636 ^ $264;
     HEAP32[$635>>2] = $637;
     $638 = (($ptree) + 112|0);
     $639 = HEAP32[$638>>2]|0;
     $640 = $639 ^ $269;
     HEAP32[$638>>2] = $640;
     break L14;
     break;
    }
    case 11:  {
     $641 = (($ptree) + 464|0);
     $642 = HEAP32[$641>>2]|0;
     $643 = $642 ^ $259;
     HEAP32[$641>>2] = $643;
     $644 = (($ptree) + 468|0);
     $645 = HEAP32[$644>>2]|0;
     $646 = $645 ^ $264;
     HEAP32[$644>>2] = $646;
     $647 = (($ptree) + 472|0);
     $648 = HEAP32[$647>>2]|0;
     $649 = $648 ^ $269;
     HEAP32[$647>>2] = $649;
     $650 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$650>>0] = -11;
     $651 = (($ptree) + 104|0);
     $652 = HEAP32[$651>>2]|0;
     $653 = $652 ^ $259;
     HEAP32[$651>>2] = $653;
     $654 = (($ptree) + 108|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = $655 ^ $264;
     HEAP32[$654>>2] = $656;
     $657 = (($ptree) + 112|0);
     $658 = HEAP32[$657>>2]|0;
     $659 = $658 ^ $269;
     HEAP32[$657>>2] = $659;
     break L14;
     break;
    }
    case 12:  {
     $660 = (($ptree) + 488|0);
     $661 = HEAP32[$660>>2]|0;
     $662 = $661 ^ $259;
     HEAP32[$660>>2] = $662;
     $663 = (($ptree) + 492|0);
     $664 = HEAP32[$663>>2]|0;
     $665 = $664 ^ $264;
     HEAP32[$663>>2] = $665;
     $666 = (($ptree) + 496|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = $667 ^ $269;
     HEAP32[$666>>2] = $668;
     $669 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$669>>0] = -12;
     $670 = (($ptree) + 104|0);
     $671 = HEAP32[$670>>2]|0;
     $672 = $671 ^ $259;
     HEAP32[$670>>2] = $672;
     $673 = (($ptree) + 108|0);
     $674 = HEAP32[$673>>2]|0;
     $675 = $674 ^ $264;
     HEAP32[$673>>2] = $675;
     $676 = (($ptree) + 112|0);
     $677 = HEAP32[$676>>2]|0;
     $678 = $677 ^ $269;
     HEAP32[$676>>2] = $678;
     break L14;
     break;
    }
    case 14:  {
     $679 = (($ptree) + 320|0);
     $680 = HEAP32[$679>>2]|0;
     $681 = $680 ^ $259;
     HEAP32[$679>>2] = $681;
     $682 = (($ptree) + 324|0);
     $683 = HEAP32[$682>>2]|0;
     $684 = $683 ^ $264;
     HEAP32[$682>>2] = $684;
     $685 = (($ptree) + 328|0);
     $686 = HEAP32[$685>>2]|0;
     $687 = $686 ^ $269;
     HEAP32[$685>>2] = $687;
     $688 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$688>>0] = -14;
     $689 = (($ptree) + 80|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = $690 ^ $259;
     HEAP32[$689>>2] = $691;
     $692 = (($ptree) + 84|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $693 ^ $264;
     HEAP32[$692>>2] = $694;
     $695 = (($ptree) + 88|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = $696 ^ $269;
     HEAP32[$695>>2] = $697;
     $698 = (($ptree) + 128|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 ^ $259;
     HEAP32[$698>>2] = $700;
     $701 = (($ptree) + 132|0);
     $702 = HEAP32[$701>>2]|0;
     $703 = $702 ^ $264;
     HEAP32[$701>>2] = $703;
     $704 = (($ptree) + 136|0);
     $705 = HEAP32[$704>>2]|0;
     $706 = $705 ^ $269;
     HEAP32[$704>>2] = $706;
     break L14;
     break;
    }
    default: {
     $707 = (($ptree) + 344|0);
     $708 = HEAP32[$707>>2]|0;
     $709 = $708 ^ $259;
     HEAP32[$707>>2] = $709;
     $710 = (($ptree) + 348|0);
     $711 = HEAP32[$710>>2]|0;
     $712 = $711 ^ $264;
     HEAP32[$710>>2] = $712;
     $713 = (($ptree) + 352|0);
     $714 = HEAP32[$713>>2]|0;
     $715 = $714 ^ $269;
     HEAP32[$713>>2] = $715;
     $716 = ((($ptree) + ($1)|0) + 512|0);
     HEAP8[$716>>0] = -15;
     $717 = (($ptree) + 80|0);
     $718 = HEAP32[$717>>2]|0;
     $719 = $718 ^ $259;
     HEAP32[$717>>2] = $719;
     $720 = (($ptree) + 84|0);
     $721 = HEAP32[$720>>2]|0;
     $722 = $721 ^ $264;
     HEAP32[$720>>2] = $722;
     $723 = (($ptree) + 88|0);
     $724 = HEAP32[$723>>2]|0;
     $725 = $724 ^ $269;
     HEAP32[$723>>2] = $725;
     $726 = (($ptree) + 152|0);
     $727 = HEAP32[$726>>2]|0;
     $728 = $727 ^ $259;
     HEAP32[$726>>2] = $728;
     $729 = (($ptree) + 156|0);
     $730 = HEAP32[$729>>2]|0;
     $731 = $730 ^ $264;
     HEAP32[$729>>2] = $731;
     $732 = (($ptree) + 160|0);
     $733 = HEAP32[$732>>2]|0;
     $734 = $733 ^ $269;
     HEAP32[$732>>2] = $734;
     break L14;
    }
    }
   } while(0);
  } else {
   switch ($251|0) {
   case 1:  {
    $280 = (($ptree) + 368|0);
    $281 = HEAP32[$280>>2]|0;
    $282 = $281 ^ $256;
    HEAP32[$280>>2] = $282;
    $283 = (($ptree) + 372|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = $284 ^ $261;
    HEAP32[$283>>2] = $285;
    $286 = (($ptree) + 376|0);
    $287 = HEAP32[$286>>2]|0;
    $288 = $287 ^ $266;
    HEAP32[$286>>2] = $288;
    $289 = (($ptree) + 416|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = $290 ^ $258;
    HEAP32[$289>>2] = $291;
    $292 = (($ptree) + 420|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $293 ^ $263;
    HEAP32[$292>>2] = $294;
    $295 = (($ptree) + 424|0);
    $296 = HEAP32[$295>>2]|0;
    $297 = $296 ^ $268;
    HEAP32[$295>>2] = $297;
    $298 = ((($ptree) + ($1)|0) + 512|0);
    HEAP8[$298>>0] = -1;
    $299 = (($ptree) + 176|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = $300 ^ $258;
    HEAP32[$299>>2] = $301;
    $302 = (($ptree) + 180|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = $303 ^ $263;
    HEAP32[$302>>2] = $304;
    $305 = (($ptree) + 184|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = $306 ^ $268;
    HEAP32[$305>>2] = $307;
    $308 = (($ptree) + 104|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = $309 ^ $258;
    HEAP32[$308>>2] = $310;
    $311 = (($ptree) + 108|0);
    $312 = HEAP32[$311>>2]|0;
    $313 = $312 ^ $263;
    HEAP32[$311>>2] = $313;
    $314 = (($ptree) + 112|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = $315 ^ $268;
    HEAP32[$314>>2] = $316;
    break L14;
    break;
   }
   case 2:  {
    $317 = (($ptree) + 200|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = $318 ^ $256;
    HEAP32[$317>>2] = $319;
    $320 = (($ptree) + 204|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = $321 ^ $261;
    HEAP32[$320>>2] = $322;
    $323 = (($ptree) + 208|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = $324 ^ $266;
    HEAP32[$323>>2] = $325;
    $326 = (($ptree) + 440|0);
    $327 = HEAP32[$326>>2]|0;
    $328 = $327 ^ $258;
    HEAP32[$326>>2] = $328;
    $329 = (($ptree) + 444|0);
    $330 = HEAP32[$329>>2]|0;
    $331 = $330 ^ $263;
    HEAP32[$329>>2] = $331;
    $332 = (($ptree) + 448|0);
    $333 = HEAP32[$332>>2]|0;
    $334 = $333 ^ $268;
    HEAP32[$332>>2] = $334;
    $335 = ((($ptree) + ($1)|0) + 512|0);
    HEAP8[$335>>0] = -2;
    $336 = (($ptree) + 104|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = $337 ^ $258;
    HEAP32[$336>>2] = $338;
    $339 = (($ptree) + 108|0);
    $340 = HEAP32[$339>>2]|0;
    $341 = $340 ^ $263;
    HEAP32[$339>>2] = $341;
    $342 = (($ptree) + 112|0);
    $343 = HEAP32[$342>>2]|0;
    $344 = $343 ^ $268;
    HEAP32[$342>>2] = $344;
    break L14;
    break;
   }
   case 3:  {
    $345 = (($ptree) + 224|0);
    $346 = HEAP32[$345>>2]|0;
    $347 = $346 ^ $256;
    HEAP32[$345>>2] = $347;
    $348 = (($ptree) + 228|0);
    $349 = HEAP32[$348>>2]|0;
    $350 = $349 ^ $261;
    HEAP32[$348>>2] = $350;
    $351 = (($ptree) + 232|0);
    $352 = HEAP32[$351>>2]|0;
    $353 = $352 ^ $266;
    HEAP32[$351>>2] = $353;
    $354 = (($ptree) + 464|0);
    $355 = HEAP32[$354>>2]|0;
    $356 = $355 ^ $258;
    HEAP32[$354>>2] = $356;
    $357 = (($ptree) + 468|0);
    $358 = HEAP32[$357>>2]|0;
    $359 = $358 ^ $263;
    HEAP32[$357>>2] = $359;
    $360 = (($ptree) + 472|0);
    $361 = HEAP32[$360>>2]|0;
    $362 = $361 ^ $268;
    HEAP32[$360>>2] = $362;
    $363 = ((($ptree) + ($1)|0) + 512|0);
    HEAP8[$363>>0] = -3;
    $364 = (($ptree) + 104|0);
    $365 = HEAP32[$364>>2]|0;
    $366 = $365 ^ $258;
    HEAP32[$364>>2] = $366;
    $367 = (($ptree) + 108|0);
    $368 = HEAP32[$367>>2]|0;
    $369 = $368 ^ $263;
    HEAP32[$367>>2] = $369;
    $370 = (($ptree) + 112|0);
    $371 = HEAP32[$370>>2]|0;
    $372 = $371 ^ $268;
    HEAP32[$370>>2] = $372;
    break L14;
    break;
   }
   case 4:  {
    $373 = (($ptree) + 248|0);
    $374 = HEAP32[$373>>2]|0;
    $375 = $374 ^ $256;
    HEAP32[$373>>2] = $375;
    $376 = (($ptree) + 252|0);
    $377 = HEAP32[$376>>2]|0;
    $378 = $377 ^ $261;
    HEAP32[$376>>2] = $378;
    $379 = (($ptree) + 256|0);
    $380 = HEAP32[$379>>2]|0;
    $381 = $380 ^ $266;
    HEAP32[$379>>2] = $381;
    $382 = (($ptree) + 488|0);
    $383 = HEAP32[$382>>2]|0;
    $384 = $383 ^ $258;
    HEAP32[$382>>2] = $384;
    $385 = (($ptree) + 492|0);
    $386 = HEAP32[$385>>2]|0;
    $387 = $386 ^ $263;
    HEAP32[$385>>2] = $387;
    $388 = (($ptree) + 496|0);
    $389 = HEAP32[$388>>2]|0;
    $390 = $389 ^ $268;
    HEAP32[$388>>2] = $390;
    $391 = ((($ptree) + ($1)|0) + 512|0);
    HEAP8[$391>>0] = -4;
    $392 = (($ptree) + 104|0);
    $393 = HEAP32[$392>>2]|0;
    $394 = $393 ^ $258;
    HEAP32[$392>>2] = $394;
    $395 = (($ptree) + 108|0);
    $396 = HEAP32[$395>>2]|0;
    $397 = $396 ^ $263;
    HEAP32[$395>>2] = $397;
    $398 = (($ptree) + 112|0);
    $399 = HEAP32[$398>>2]|0;
    $400 = $399 ^ $268;
    HEAP32[$398>>2] = $400;
    break L14;
    break;
   }
   case 6:  {
    $401 = (($ptree) + 272|0);
    $402 = HEAP32[$401>>2]|0;
    $403 = $402 ^ $256;
    HEAP32[$401>>2] = $403;
    $404 = (($ptree) + 276|0);
    $405 = HEAP32[$404>>2]|0;
    $406 = $405 ^ $261;
    HEAP32[$404>>2] = $406;
    $407 = (($ptree) + 280|0);
    $408 = HEAP32[$407>>2]|0;
    $409 = $408 ^ $266;
    HEAP32[$407>>2] = $409;
    $410 = (($ptree) + 320|0);
    $411 = HEAP32[$410>>2]|0;
    $412 = $411 ^ $258;
    HEAP32[$410>>2] = $412;
    $413 = (($ptree) + 324|0);
    $414 = HEAP32[$413>>2]|0;
    $415 = $414 ^ $263;
    HEAP32[$413>>2] = $415;
    $416 = (($ptree) + 328|0);
    $417 = HEAP32[$416>>2]|0;
    $418 = $417 ^ $268;
    HEAP32[$416>>2] = $418;
    $419 = ((($ptree) + ($1)|0) + 512|0);
    HEAP8[$419>>0] = -6;
    $420 = (($ptree) + 80|0);
    $421 = HEAP32[$420>>2]|0;
    $422 = $421 ^ $258;
    HEAP32[$420>>2] = $422;
    $423 = (($ptree) + 84|0);
    $424 = HEAP32[$423>>2]|0;
    $425 = $424 ^ $263;
    HEAP32[$423>>2] = $425;
    $426 = (($ptree) + 88|0);
    $427 = HEAP32[$426>>2]|0;
    $428 = $427 ^ $268;
    HEAP32[$426>>2] = $428;
    $429 = (($ptree) + 128|0);
    $430 = HEAP32[$429>>2]|0;
    $431 = $430 ^ $259;
    HEAP32[$429>>2] = $431;
    $432 = (($ptree) + 132|0);
    $433 = HEAP32[$432>>2]|0;
    $434 = $433 ^ $264;
    HEAP32[$432>>2] = $434;
    $435 = (($ptree) + 136|0);
    $436 = HEAP32[$435>>2]|0;
    $437 = $436 ^ $269;
    HEAP32[$435>>2] = $437;
    break L14;
    break;
   }
   default: {
    $438 = (($ptree) + 296|0);
    $439 = HEAP32[$438>>2]|0;
    $440 = $439 ^ $256;
    HEAP32[$438>>2] = $440;
    $441 = (($ptree) + 300|0);
    $442 = HEAP32[$441>>2]|0;
    $443 = $442 ^ $261;
    HEAP32[$441>>2] = $443;
    $444 = (($ptree) + 304|0);
    $445 = HEAP32[$444>>2]|0;
    $446 = $445 ^ $266;
    HEAP32[$444>>2] = $446;
    $447 = (($ptree) + 344|0);
    $448 = HEAP32[$447>>2]|0;
    $449 = $448 ^ $258;
    HEAP32[$447>>2] = $449;
    $450 = (($ptree) + 348|0);
    $451 = HEAP32[$450>>2]|0;
    $452 = $451 ^ $263;
    HEAP32[$450>>2] = $452;
    $453 = (($ptree) + 352|0);
    $454 = HEAP32[$453>>2]|0;
    $455 = $454 ^ $268;
    HEAP32[$453>>2] = $455;
    $456 = ((($ptree) + ($1)|0) + 512|0);
    HEAP8[$456>>0] = -7;
    $457 = (($ptree) + 80|0);
    $458 = HEAP32[$457>>2]|0;
    $459 = $458 ^ $258;
    HEAP32[$457>>2] = $459;
    $460 = (($ptree) + 84|0);
    $461 = HEAP32[$460>>2]|0;
    $462 = $461 ^ $263;
    HEAP32[$460>>2] = $462;
    $463 = (($ptree) + 88|0);
    $464 = HEAP32[$463>>2]|0;
    $465 = $464 ^ $268;
    HEAP32[$463>>2] = $465;
    $466 = (($ptree) + 152|0);
    $467 = HEAP32[$466>>2]|0;
    $468 = $467 ^ $259;
    HEAP32[$466>>2] = $468;
    $469 = (($ptree) + 156|0);
    $470 = HEAP32[$469>>2]|0;
    $471 = $470 ^ $264;
    HEAP32[$469>>2] = $471;
    $472 = (($ptree) + 160|0);
    $473 = HEAP32[$472>>2]|0;
    $474 = $473 ^ $269;
    HEAP32[$472>>2] = $474;
    break L14;
   }
   }
  }
 } while(0);
 do {
  switch ($253|0) {
  case 0:  {
   $1073 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$1073>>0] = 0;
   $1074 = (34157280 + (($1*12)|0)|0);
   $1075 = HEAP32[$1074>>2]|0;
   $1076 = (34157280 + (($2*12)|0)|0);
   $1077 = HEAP32[$1076>>2]|0;
   $1078 = $1077 | $1075;
   $1079 = (($ptree) + 32|0);
   $1080 = HEAP32[$1079>>2]|0;
   $1081 = $1080 ^ $1078;
   HEAP32[$1079>>2] = $1081;
   $1082 = ((34157280 + (($1*12)|0)|0) + 4|0);
   $1083 = HEAP32[$1082>>2]|0;
   $1084 = ((34157280 + (($2*12)|0)|0) + 4|0);
   $1085 = HEAP32[$1084>>2]|0;
   $1086 = $1085 | $1083;
   $1087 = (($ptree) + 36|0);
   $1088 = HEAP32[$1087>>2]|0;
   $1089 = $1088 ^ $1086;
   HEAP32[$1087>>2] = $1089;
   $1090 = ((34157280 + (($1*12)|0)|0) + 8|0);
   $1091 = HEAP32[$1090>>2]|0;
   $1092 = ((34157280 + (($2*12)|0)|0) + 8|0);
   $1093 = HEAP32[$1092>>2]|0;
   $1094 = $1093 | $1091;
   $1095 = (($ptree) + 40|0);
   $1096 = HEAP32[$1095>>2]|0;
   $1097 = $1096 ^ $1094;
   HEAP32[$1095>>2] = $1097;
   $1098 = (34159232 + (($1*12)|0)|0);
   $1099 = HEAP32[$1098>>2]|0;
   $1100 = (34159232 + (($2*12)|0)|0);
   $1101 = HEAP32[$1100>>2]|0;
   $1102 = $1101 | $1099;
   $1103 = (($ptree) + 56|0);
   $1104 = HEAP32[$1103>>2]|0;
   $1105 = $1104 ^ $1102;
   HEAP32[$1103>>2] = $1105;
   $1106 = ((34159232 + (($1*12)|0)|0) + 4|0);
   $1107 = HEAP32[$1106>>2]|0;
   $1108 = ((34159232 + (($2*12)|0)|0) + 4|0);
   $1109 = HEAP32[$1108>>2]|0;
   $1110 = $1109 | $1107;
   $1111 = (($ptree) + 60|0);
   $1112 = HEAP32[$1111>>2]|0;
   $1113 = $1112 ^ $1110;
   HEAP32[$1111>>2] = $1113;
   $1114 = ((34159232 + (($1*12)|0)|0) + 8|0);
   $1115 = HEAP32[$1114>>2]|0;
   $1116 = ((34159232 + (($2*12)|0)|0) + 8|0);
   $1117 = HEAP32[$1116>>2]|0;
   $1118 = $1117 | $1115;
   $1119 = (($ptree) + 64|0);
   $1120 = HEAP32[$1119>>2]|0;
   $1121 = $1120 ^ $1118;
   HEAP32[$1119>>2] = $1121;
   $1122 = (34158256 + (($1*12)|0)|0);
   $1123 = HEAP32[$1122>>2]|0;
   $1124 = (34158256 + (($2*12)|0)|0);
   $1125 = HEAP32[$1124>>2]|0;
   $1126 = $1125 | $1123;
   $1127 = (($ptree) + 44|0);
   $1128 = HEAP32[$1127>>2]|0;
   $1129 = $1128 ^ $1126;
   HEAP32[$1127>>2] = $1129;
   $1130 = ((34158256 + (($1*12)|0)|0) + 4|0);
   $1131 = HEAP32[$1130>>2]|0;
   $1132 = ((34158256 + (($2*12)|0)|0) + 4|0);
   $1133 = HEAP32[$1132>>2]|0;
   $1134 = $1133 | $1131;
   $1135 = (($ptree) + 48|0);
   $1136 = HEAP32[$1135>>2]|0;
   $1137 = $1136 ^ $1134;
   HEAP32[$1135>>2] = $1137;
   $1138 = ((34158256 + (($1*12)|0)|0) + 8|0);
   $1139 = HEAP32[$1138>>2]|0;
   $1140 = ((34158256 + (($2*12)|0)|0) + 8|0);
   $1141 = HEAP32[$1140>>2]|0;
   $1142 = $1141 | $1139;
   $1143 = (($ptree) + 52|0);
   $1144 = HEAP32[$1143>>2]|0;
   $1145 = $1144 ^ $1142;
   HEAP32[$1143>>2] = $1145;
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $735 = (($ptree) + 356|0);
   $736 = HEAP32[$735>>2]|0;
   $737 = $736 ^ $258;
   HEAP32[$735>>2] = $737;
   $738 = (($ptree) + 360|0);
   $739 = HEAP32[$738>>2]|0;
   $740 = $739 ^ $263;
   HEAP32[$738>>2] = $740;
   $741 = (($ptree) + 364|0);
   $742 = HEAP32[$741>>2]|0;
   $743 = $742 ^ $268;
   HEAP32[$741>>2] = $743;
   $744 = (($ptree) + 504|0);
   $745 = HEAP32[$744>>2]|0;
   $746 = (($745) + -1)|0;
   HEAP32[$744>>2] = $746;
   $747 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$747>>0] = 1;
   $748 = (($2) + -9)|0;
   $749 = (34156304 + (($748*12)|0)|0);
   $750 = HEAP32[$749>>2]|0;
   $751 = (($ptree) + 164|0);
   $752 = HEAP32[$751>>2]|0;
   $753 = $752 ^ $750;
   HEAP32[$751>>2] = $753;
   $754 = ((34156304 + (($748*12)|0)|0) + 4|0);
   $755 = HEAP32[$754>>2]|0;
   $756 = (($ptree) + 168|0);
   $757 = HEAP32[$756>>2]|0;
   $758 = $757 ^ $755;
   HEAP32[$756>>2] = $758;
   $759 = ((34156304 + (($748*12)|0)|0) + 8|0);
   $760 = HEAP32[$759>>2]|0;
   $761 = (($ptree) + 172|0);
   $762 = HEAP32[$761>>2]|0;
   $763 = $762 ^ $760;
   HEAP32[$761>>2] = $763;
   break;
  }
  case 2:  {
   $764 = (($ptree) + 188|0);
   $765 = HEAP32[$764>>2]|0;
   $766 = $765 ^ $258;
   HEAP32[$764>>2] = $766;
   $767 = (($ptree) + 192|0);
   $768 = HEAP32[$767>>2]|0;
   $769 = $768 ^ $263;
   HEAP32[$767>>2] = $769;
   $770 = (($ptree) + 196|0);
   $771 = HEAP32[$770>>2]|0;
   $772 = $771 ^ $268;
   HEAP32[$770>>2] = $772;
   $773 = (($ptree) + 504|0);
   $774 = HEAP32[$773>>2]|0;
   $775 = (($774) + -32)|0;
   HEAP32[$773>>2] = $775;
   $776 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$776>>0] = 2;
   break;
  }
  case 3:  {
   $777 = (($ptree) + 212|0);
   $778 = HEAP32[$777>>2]|0;
   $779 = $778 ^ $258;
   HEAP32[$777>>2] = $779;
   $780 = (($ptree) + 216|0);
   $781 = HEAP32[$780>>2]|0;
   $782 = $781 ^ $263;
   HEAP32[$780>>2] = $782;
   $783 = (($ptree) + 220|0);
   $784 = HEAP32[$783>>2]|0;
   $785 = $784 ^ $268;
   HEAP32[$783>>2] = $785;
   $786 = (($ptree) + 504|0);
   $787 = HEAP32[$786>>2]|0;
   $788 = (($787) + -256)|0;
   HEAP32[$786>>2] = $788;
   $789 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$789>>0] = 3;
   break;
  }
  case 4:  {
   $790 = (($ptree) + 236|0);
   $791 = HEAP32[$790>>2]|0;
   $792 = $791 ^ $258;
   HEAP32[$790>>2] = $792;
   $793 = (($ptree) + 240|0);
   $794 = HEAP32[$793>>2]|0;
   $795 = $794 ^ $263;
   HEAP32[$793>>2] = $795;
   $796 = (($ptree) + 244|0);
   $797 = HEAP32[$796>>2]|0;
   $798 = $797 ^ $268;
   HEAP32[$796>>2] = $798;
   $799 = (($ptree) + 504|0);
   $800 = HEAP32[$799>>2]|0;
   $801 = (($800) + -2048)|0;
   HEAP32[$799>>2] = $801;
   $802 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$802>>0] = 4;
   break;
  }
  case 5:  {
   $803 = (($ptree) + 380|0);
   $804 = HEAP32[$803>>2]|0;
   $805 = $804 ^ $258;
   HEAP32[$803>>2] = $805;
   $806 = (($ptree) + 384|0);
   $807 = HEAP32[$806>>2]|0;
   $808 = $807 ^ $263;
   HEAP32[$806>>2] = $808;
   $809 = (($ptree) + 388|0);
   $810 = HEAP32[$809>>2]|0;
   $811 = $810 ^ $268;
   HEAP32[$809>>2] = $811;
   $812 = (($ptree) + 504|0);
   $813 = HEAP32[$812>>2]|0;
   $814 = (($813) + -16384)|0;
   HEAP32[$812>>2] = $814;
   $815 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$815>>0] = 5;
   $816 = (($ptree) + 92|0);
   $817 = HEAP32[$816>>2]|0;
   $818 = $817 ^ $258;
   HEAP32[$816>>2] = $818;
   $819 = (($ptree) + 96|0);
   $820 = HEAP32[$819>>2]|0;
   $821 = $820 ^ $263;
   HEAP32[$819>>2] = $821;
   $822 = (($ptree) + 100|0);
   $823 = HEAP32[$822>>2]|0;
   $824 = $823 ^ $268;
   HEAP32[$822>>2] = $824;
   break;
  }
  case 6:  {
   $825 = (($ptree) + 260|0);
   $826 = HEAP32[$825>>2]|0;
   $827 = $826 ^ $258;
   HEAP32[$825>>2] = $827;
   $828 = (($ptree) + 264|0);
   $829 = HEAP32[$828>>2]|0;
   $830 = $829 ^ $263;
   HEAP32[$828>>2] = $830;
   $831 = (($ptree) + 268|0);
   $832 = HEAP32[$831>>2]|0;
   $833 = $832 ^ $268;
   HEAP32[$831>>2] = $833;
   $834 = (($ptree) + 504|0);
   $835 = HEAP32[$834>>2]|0;
   $836 = (($835) + -131072)|0;
   HEAP32[$834>>2] = $836;
   $837 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$837>>0] = 6;
   $838 = (($ptree) + 116|0);
   $839 = HEAP32[$838>>2]|0;
   $840 = $839 ^ $258;
   HEAP32[$838>>2] = $840;
   $841 = (($ptree) + 120|0);
   $842 = HEAP32[$841>>2]|0;
   $843 = $842 ^ $263;
   HEAP32[$841>>2] = $843;
   $844 = (($ptree) + 124|0);
   $845 = HEAP32[$844>>2]|0;
   $846 = $845 ^ $268;
   HEAP32[$844>>2] = $846;
   break;
  }
  case 7:  {
   $847 = (($ptree) + 284|0);
   $848 = HEAP32[$847>>2]|0;
   $849 = $848 ^ $258;
   HEAP32[$847>>2] = $849;
   $850 = (($ptree) + 288|0);
   $851 = HEAP32[$850>>2]|0;
   $852 = $851 ^ $263;
   HEAP32[$850>>2] = $852;
   $853 = (($ptree) + 292|0);
   $854 = HEAP32[$853>>2]|0;
   $855 = $854 ^ $268;
   HEAP32[$853>>2] = $855;
   $856 = (($ptree) + 504|0);
   $857 = HEAP32[$856>>2]|0;
   $858 = (($857) + -524288)|0;
   HEAP32[$856>>2] = $858;
   $859 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$859>>0] = 7;
   $860 = (($ptree) + 140|0);
   $861 = HEAP32[$860>>2]|0;
   $862 = $861 ^ $258;
   HEAP32[$860>>2] = $862;
   $863 = (($ptree) + 144|0);
   $864 = HEAP32[$863>>2]|0;
   $865 = $864 ^ $263;
   HEAP32[$863>>2] = $865;
   $866 = (($ptree) + 148|0);
   $867 = HEAP32[$866>>2]|0;
   $868 = $867 ^ $268;
   HEAP32[$866>>2] = $868;
   break;
  }
  case 9:  {
   $869 = (($ptree) + 404|0);
   $870 = HEAP32[$869>>2]|0;
   $871 = $870 ^ $258;
   HEAP32[$869>>2] = $871;
   $872 = (($ptree) + 408|0);
   $873 = HEAP32[$872>>2]|0;
   $874 = $873 ^ $263;
   HEAP32[$872>>2] = $874;
   $875 = (($ptree) + 412|0);
   $876 = HEAP32[$875>>2]|0;
   $877 = $876 ^ $268;
   HEAP32[$875>>2] = $877;
   $878 = (($ptree) + 504|0);
   $879 = HEAP32[$878>>2]|0;
   $880 = (($879) + -1)|0;
   HEAP32[$878>>2] = $880;
   $881 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$881>>0] = 9;
   $882 = (($ptree) + 92|0);
   $883 = HEAP32[$882>>2]|0;
   $884 = $883 ^ $258;
   HEAP32[$882>>2] = $884;
   $885 = (($ptree) + 96|0);
   $886 = HEAP32[$885>>2]|0;
   $887 = $886 ^ $263;
   HEAP32[$885>>2] = $887;
   $888 = (($ptree) + 100|0);
   $889 = HEAP32[$888>>2]|0;
   $890 = $889 ^ $268;
   HEAP32[$888>>2] = $890;
   break;
  }
  case 10:  {
   $891 = (($ptree) + 428|0);
   $892 = HEAP32[$891>>2]|0;
   $893 = $892 ^ $258;
   HEAP32[$891>>2] = $893;
   $894 = (($ptree) + 432|0);
   $895 = HEAP32[$894>>2]|0;
   $896 = $895 ^ $263;
   HEAP32[$894>>2] = $896;
   $897 = (($ptree) + 436|0);
   $898 = HEAP32[$897>>2]|0;
   $899 = $898 ^ $268;
   HEAP32[$897>>2] = $899;
   $900 = (($ptree) + 504|0);
   $901 = HEAP32[$900>>2]|0;
   $902 = (($901) + -32)|0;
   HEAP32[$900>>2] = $902;
   $903 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$903>>0] = 10;
   $904 = (($ptree) + 92|0);
   $905 = HEAP32[$904>>2]|0;
   $906 = $905 ^ $258;
   HEAP32[$904>>2] = $906;
   $907 = (($ptree) + 96|0);
   $908 = HEAP32[$907>>2]|0;
   $909 = $908 ^ $263;
   HEAP32[$907>>2] = $909;
   $910 = (($ptree) + 100|0);
   $911 = HEAP32[$910>>2]|0;
   $912 = $911 ^ $268;
   HEAP32[$910>>2] = $912;
   break;
  }
  case 11:  {
   $913 = (($ptree) + 452|0);
   $914 = HEAP32[$913>>2]|0;
   $915 = $914 ^ $258;
   HEAP32[$913>>2] = $915;
   $916 = (($ptree) + 456|0);
   $917 = HEAP32[$916>>2]|0;
   $918 = $917 ^ $263;
   HEAP32[$916>>2] = $918;
   $919 = (($ptree) + 460|0);
   $920 = HEAP32[$919>>2]|0;
   $921 = $920 ^ $268;
   HEAP32[$919>>2] = $921;
   $922 = (($ptree) + 504|0);
   $923 = HEAP32[$922>>2]|0;
   $924 = (($923) + -256)|0;
   HEAP32[$922>>2] = $924;
   $925 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$925>>0] = 11;
   $926 = (($ptree) + 92|0);
   $927 = HEAP32[$926>>2]|0;
   $928 = $927 ^ $258;
   HEAP32[$926>>2] = $928;
   $929 = (($ptree) + 96|0);
   $930 = HEAP32[$929>>2]|0;
   $931 = $930 ^ $263;
   HEAP32[$929>>2] = $931;
   $932 = (($ptree) + 100|0);
   $933 = HEAP32[$932>>2]|0;
   $934 = $933 ^ $268;
   HEAP32[$932>>2] = $934;
   break;
  }
  case 12:  {
   $935 = (($ptree) + 476|0);
   $936 = HEAP32[$935>>2]|0;
   $937 = $936 ^ $258;
   HEAP32[$935>>2] = $937;
   $938 = (($ptree) + 480|0);
   $939 = HEAP32[$938>>2]|0;
   $940 = $939 ^ $263;
   HEAP32[$938>>2] = $940;
   $941 = (($ptree) + 484|0);
   $942 = HEAP32[$941>>2]|0;
   $943 = $942 ^ $268;
   HEAP32[$941>>2] = $943;
   $944 = (($ptree) + 504|0);
   $945 = HEAP32[$944>>2]|0;
   $946 = (($945) + -2048)|0;
   HEAP32[$944>>2] = $946;
   $947 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$947>>0] = 12;
   $948 = (($ptree) + 92|0);
   $949 = HEAP32[$948>>2]|0;
   $950 = $949 ^ $258;
   HEAP32[$948>>2] = $950;
   $951 = (($ptree) + 96|0);
   $952 = HEAP32[$951>>2]|0;
   $953 = $952 ^ $263;
   HEAP32[$951>>2] = $953;
   $954 = (($ptree) + 100|0);
   $955 = HEAP32[$954>>2]|0;
   $956 = $955 ^ $268;
   HEAP32[$954>>2] = $956;
   break;
  }
  case 14:  {
   $957 = (($ptree) + 308|0);
   $958 = HEAP32[$957>>2]|0;
   $959 = $958 ^ $258;
   HEAP32[$957>>2] = $959;
   $960 = (($ptree) + 312|0);
   $961 = HEAP32[$960>>2]|0;
   $962 = $961 ^ $263;
   HEAP32[$960>>2] = $962;
   $963 = (($ptree) + 316|0);
   $964 = HEAP32[$963>>2]|0;
   $965 = $964 ^ $268;
   HEAP32[$963>>2] = $965;
   $966 = (($ptree) + 504|0);
   $967 = HEAP32[$966>>2]|0;
   $968 = (($967) + -131072)|0;
   HEAP32[$966>>2] = $968;
   $969 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$969>>0] = 14;
   $970 = (($ptree) + 68|0);
   $971 = HEAP32[$970>>2]|0;
   $972 = $971 ^ $258;
   HEAP32[$970>>2] = $972;
   $973 = (($ptree) + 72|0);
   $974 = HEAP32[$973>>2]|0;
   $975 = $974 ^ $263;
   HEAP32[$973>>2] = $975;
   $976 = (($ptree) + 76|0);
   $977 = HEAP32[$976>>2]|0;
   $978 = $977 ^ $268;
   HEAP32[$976>>2] = $978;
   $979 = (($ptree) + 116|0);
   $980 = HEAP32[$979>>2]|0;
   $981 = $980 ^ $258;
   HEAP32[$979>>2] = $981;
   $982 = (($ptree) + 120|0);
   $983 = HEAP32[$982>>2]|0;
   $984 = $983 ^ $263;
   HEAP32[$982>>2] = $984;
   $985 = (($ptree) + 124|0);
   $986 = HEAP32[$985>>2]|0;
   $987 = $986 ^ $268;
   HEAP32[$985>>2] = $987;
   break;
  }
  default: {
   $988 = (($ptree) + 332|0);
   $989 = HEAP32[$988>>2]|0;
   $990 = $989 ^ $258;
   HEAP32[$988>>2] = $990;
   $991 = (($ptree) + 336|0);
   $992 = HEAP32[$991>>2]|0;
   $993 = $992 ^ $263;
   HEAP32[$991>>2] = $993;
   $994 = (($ptree) + 340|0);
   $995 = HEAP32[$994>>2]|0;
   $996 = $995 ^ $268;
   HEAP32[$994>>2] = $996;
   $997 = (($ptree) + 504|0);
   $998 = HEAP32[$997>>2]|0;
   $999 = (($998) + -524288)|0;
   HEAP32[$997>>2] = $999;
   $1000 = ((($ptree) + ($2)|0) + 512|0);
   HEAP8[$1000>>0] = 15;
   $1001 = (($ptree) + 68|0);
   $1002 = HEAP32[$1001>>2]|0;
   $1003 = $1002 ^ $258;
   HEAP32[$1001>>2] = $1003;
   $1004 = (($ptree) + 72|0);
   $1005 = HEAP32[$1004>>2]|0;
   $1006 = $1005 ^ $263;
   HEAP32[$1004>>2] = $1006;
   $1007 = (($ptree) + 76|0);
   $1008 = HEAP32[$1007>>2]|0;
   $1009 = $1008 ^ $268;
   HEAP32[$1007>>2] = $1009;
   $1010 = (($ptree) + 140|0);
   $1011 = HEAP32[$1010>>2]|0;
   $1012 = $1011 ^ $258;
   HEAP32[$1010>>2] = $1012;
   $1013 = (($ptree) + 144|0);
   $1014 = HEAP32[$1013>>2]|0;
   $1015 = $1014 ^ $263;
   HEAP32[$1013>>2] = $1015;
   $1016 = (($ptree) + 148|0);
   $1017 = HEAP32[$1016>>2]|0;
   $1018 = $1017 ^ $268;
   HEAP32[$1016>>2] = $1018;
  }
  }
 } while(0);
 $1019 = (($ptree) + 8|0);
 $1020 = HEAP32[$1019>>2]|0;
 $1021 = $1020 ^ $258;
 HEAP32[$1019>>2] = $1021;
 $1022 = (($ptree) + 12|0);
 $1023 = HEAP32[$1022>>2]|0;
 $1024 = $1023 ^ $263;
 HEAP32[$1022>>2] = $1024;
 $1025 = (($ptree) + 16|0);
 $1026 = HEAP32[$1025>>2]|0;
 $1027 = $1026 ^ $268;
 HEAP32[$1025>>2] = $1027;
 $1028 = (34157280 + (($1*12)|0)|0);
 $1029 = HEAP32[$1028>>2]|0;
 $1030 = (($ptree) + 32|0);
 $1031 = HEAP32[$1030>>2]|0;
 $1032 = $1031 ^ $1029;
 HEAP32[$1030>>2] = $1032;
 $1033 = ((34157280 + (($1*12)|0)|0) + 4|0);
 $1034 = HEAP32[$1033>>2]|0;
 $1035 = (($ptree) + 36|0);
 $1036 = HEAP32[$1035>>2]|0;
 $1037 = $1036 ^ $1034;
 HEAP32[$1035>>2] = $1037;
 $1038 = ((34157280 + (($1*12)|0)|0) + 8|0);
 $1039 = HEAP32[$1038>>2]|0;
 $1040 = (($ptree) + 40|0);
 $1041 = HEAP32[$1040>>2]|0;
 $1042 = $1041 ^ $1039;
 HEAP32[$1040>>2] = $1042;
 $1043 = (34159232 + (($1*12)|0)|0);
 $1044 = HEAP32[$1043>>2]|0;
 $1045 = (($ptree) + 56|0);
 $1046 = HEAP32[$1045>>2]|0;
 $1047 = $1046 ^ $1044;
 HEAP32[$1045>>2] = $1047;
 $1048 = ((34159232 + (($1*12)|0)|0) + 4|0);
 $1049 = HEAP32[$1048>>2]|0;
 $1050 = (($ptree) + 60|0);
 $1051 = HEAP32[$1050>>2]|0;
 $1052 = $1051 ^ $1049;
 HEAP32[$1050>>2] = $1052;
 $1053 = ((34159232 + (($1*12)|0)|0) + 8|0);
 $1054 = HEAP32[$1053>>2]|0;
 $1055 = (($ptree) + 64|0);
 $1056 = HEAP32[$1055>>2]|0;
 $1057 = $1056 ^ $1054;
 HEAP32[$1055>>2] = $1057;
 $1058 = (34158256 + (($1*12)|0)|0);
 $1059 = HEAP32[$1058>>2]|0;
 $1060 = (($ptree) + 44|0);
 $1061 = HEAP32[$1060>>2]|0;
 $1062 = $1061 ^ $1059;
 HEAP32[$1060>>2] = $1062;
 $1063 = ((34158256 + (($1*12)|0)|0) + 4|0);
 $1064 = HEAP32[$1063>>2]|0;
 $1065 = (($ptree) + 48|0);
 $1066 = HEAP32[$1065>>2]|0;
 $1067 = $1066 ^ $1064;
 HEAP32[$1065>>2] = $1067;
 $1068 = ((34158256 + (($1*12)|0)|0) + 8|0);
 $1069 = HEAP32[$1068>>2]|0;
 $1070 = (($ptree) + 52|0);
 $1071 = HEAP32[$1070>>2]|0;
 $1072 = $1071 ^ $1069;
 HEAP32[$1070>>2] = $1072;
 STACKTOP = sp;return;
}
function _set_search_limit_time($turn) {
 $turn = $turn|0;
 var $$ = 0, $$$u0$0 = 0, $$1 = 0, $$3 = 0, $$off = 0, $$off2 = 0, $$u0$0 = 0, $$u1$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $u0$0 = 0, $u0$3 = 0, $u1$0 = 0, $u1$1 = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[34181008>>2]|0;
 $1 = ($0|0)==(-1);
 if (!($1)) {
  $2 = HEAP32[34180920>>2]|0;
  $3 = $2 & 64;
  $4 = ($3|0)==(0);
  if ($4) {
   $5 = HEAP32[34181000>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    $7 = $2 & 65536;
    $8 = ($7|0)==(0);
    if ($8) {
     label = 7;
    } else {
     $9 = ($0*5)|0;
     $u0$3 = $0;$u1$1 = $9;
    }
   } else {
    label = 7;
   }
   do {
    if ((label|0) == 7) {
     $10 = ($0|0)==(0);
     $11 = ($turn|0)!=(0);
     $12 = HEAP32[34180992>>2]|0;
     $13 = HEAP32[34180984>>2]|0;
     $14 = $11 ? $12 : $13;
     if (!($10)) {
      $15 = ($14>>>0)>($5>>>0);
      $16 = (($5) - ($14))|0;
      $$3 = $15 ? 0 : $16;
      $17 = (($$3) + 17)|0;
      $18 = (($17>>>0) / 35)&-1;
      $$off2 = (($$3) + -53)|0;
      $19 = ($$off2>>>0)<(35);
      $$ = $19 ? 3 : $18;
      $20 = ($0*5)|0;
      $21 = ($$>>>0)<($20>>>0);
      $u0$0 = $21 ? $20 : $$;
      $22 = ($u0$0*5)|0;
      $23 = (($$3) + ($0))|0;
      $24 = ($23>>>0)<($u0$0>>>0);
      $$u0$0 = $24 ? $23 : $u0$0;
      $25 = ($23>>>0)<($22>>>0);
      $u1$0 = $25 ? $23 : $22;
      $26 = ($$u0$0|0)==(0);
      $$$u0$0 = $26 ? 1 : $$u0$0;
      $27 = ($u1$0|0)==(0);
      $$u1$0 = $27 ? 1 : $u1$0;
      $u0$3 = $$$u0$0;$u1$1 = $$u1$0;
      break;
     }
     $28 = (($14) + 15)|0;
     $29 = ($28>>>0)<($5>>>0);
     if ($29) {
      $30 = (($5) - ($14))|0;
      $31 = (($30) + 17)|0;
      $32 = (($31>>>0) / 35)&-1;
      $$off = (($30) + -53)|0;
      $33 = ($$off>>>0)<(35);
      $$1 = $33 ? 1 : $32;
      $34 = ($$1*5)|0;
      $u0$3 = $$1;$u1$1 = $34;
     } else {
      $u0$3 = 1;$u1$1 = 1;
     }
    }
   } while(0);
   $35 = ($u0$3*1000)|0;
   $36 = (($35) + 1000)|0;
   $37 = HEAP32[34181080>>2]|0;
   $38 = (($36) - ($37))|0;
   HEAP32[34181056>>2] = $38;
   $39 = ($u1$1*1000)|0;
   $40 = (($39) + 1000)|0;
   $41 = (($40) - ($37))|0;
   HEAP32[34181064>>2] = $41;
   $42 = $2 & 32;
   $43 = ($42|0)==(0);
   if ($43) {
    $46 = $38;$47 = $41;
   } else {
    $44 = (($41>>>0) / 5)&-1;
    HEAP32[34181064>>2] = $44;
    $45 = (($41>>>0) / 25)&-1;
    HEAP32[34181056>>2] = $45;
    $46 = $45;$47 = $44;
   }
   HEAP32[$vararg_buffer>>2] = $46;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $47;
   _out(221113472,$vararg_buffer);
   STACKTOP = sp;return;
  }
 }
 HEAP32[34181056>>2] = -1;
 HEAP32[34181064>>2] = -1;
 STACKTOP = sp;return;
}
function _update_time($turn) {
 $turn = $turn|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $timeval$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $timeval$i = sp;
 $0 = (_gettimeofday(($timeval$i|0),(0|0))|0);
 $1 = ($0|0)==(-1);
 if ($1) {
  HEAP32[220526664>>2] = 221113680;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$timeval$i>>2]|0;
 $3 = ($2*1000)|0;
 $4 = (($timeval$i) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5>>>0) / 1000)&-1;
 $7 = (($6) + ($3))|0;
 $8 = HEAP32[34181048>>2]|0;
 $9 = (($7) - ($8))|0;
 $10 = (($9>>>0) / 1000)&-1;
 $11 = ($9>>>0)>(999);
 $$ = $11 ? $10 : 1;
 HEAP32[34180976>>2] = $$;
 $12 = ($turn|0)==(0);
 if ($12) {
  $15 = HEAP32[34180984>>2]|0;
  $16 = (($15) + ($$))|0;
  HEAP32[34180984>>2] = $16;
 } else {
  $13 = HEAP32[34180992>>2]|0;
  $14 = (($13) + ($$))|0;
  HEAP32[34180992>>2] = $14;
 }
 HEAP32[34181048>>2] = $7;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _get_elapsed($ptime) {
 $ptime = $ptime|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $timeval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $timeval = sp;
 $0 = (_gettimeofday(($timeval|0),(0|0))|0);
 $1 = ($0|0)==(-1);
 if ($1) {
  HEAP32[220526664>>2] = 221113680;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $2 = HEAP32[$timeval>>2]|0;
  $3 = ($2*1000)|0;
  $4 = (($timeval) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5>>>0) / 1000)&-1;
  $7 = (($6) + ($3))|0;
  HEAP32[$ptime>>2] = $7;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _adjust_time($elapsed_new,$turn) {
 $elapsed_new = $elapsed_new|0;
 $turn = $turn|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($turn|0)==(0);
 if ($0) {
  $6 = HEAP32[34180984>>2]|0;
  $7 = (($6) + ($elapsed_new))|0;
  $8 = HEAP32[34180976>>2]|0;
  $9 = ($7>>>0)<($8>>>0);
  if ($9) {
   _out_warning(221113496,$vararg_buffer1);
   HEAP32[34180984>>2] = 0;
   STACKTOP = sp;return;
  } else {
   $10 = (($7) - ($8))|0;
   HEAP32[34180984>>2] = $10;
   STACKTOP = sp;return;
  }
 } else {
  $1 = HEAP32[34180992>>2]|0;
  $2 = (($1) + ($elapsed_new))|0;
  $3 = HEAP32[34180976>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   _out_warning(221113496,$vararg_buffer);
   HEAP32[34180992>>2] = 0;
   STACKTOP = sp;return;
  } else {
   $5 = (($2) - ($3))|0;
   HEAP32[34180992>>2] = $5;
   STACKTOP = sp;return;
  }
 }
}
function _reset_time($b_remain,$w_remain) {
 $b_remain = $b_remain|0;
 $w_remain = $w_remain|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[34181008>>2]|0;
 $1 = ($0|0)==(-1);
 if ($1) {
  HEAP32[220526664>>2] = 221113520;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[34181000>>2]|0;
 $3 = ($2>>>0)<($b_remain>>>0);
 $4 = ($2>>>0)<($w_remain>>>0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  HEAP32[$vararg_buffer>>2] = $2;
  (_snprintf(220525640,512,221113544,$vararg_buffer)|0);
  HEAP32[220526664>>2] = 220525640;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 } else {
  $5 = (($2) - ($b_remain))|0;
  HEAP32[34180984>>2] = $5;
  $6 = (($2) - ($w_remain))|0;
  HEAP32[34180992>>2] = $6;
  HEAP32[$vararg_buffer1>>2] = $5;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $6;
  _out(221113584,$vararg_buffer1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _str_time_symple($time) {
 $time = $time|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($time>>>0) / 1000)&-1;
 $1 = ($time>>>0)<(60000);
 if ($1) {
  $2 = (($time>>>0) % 1000)&-1;
  $3 = ($0*1000)|0;
  $4 = (($2) + ($3))|0;
  $5 = (+($4>>>0));
  $6 = $5;
  $7 = $6 / 1000.0;
  HEAPF64[tempDoublePtr>>3]=$7;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_snprintf(221113608,32,221113640,$vararg_buffer)|0);
  STACKTOP = sp;return (221113608|0);
 } else {
  $8 = (($time>>>0) / 60000)&-1;
  $9 = (($0>>>0) % 60)&-1;
  HEAP32[$vararg_buffer1>>2] = $8;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $9;
  (_snprintf(221113608,32,221113648,$vararg_buffer1)|0);
  STACKTOP = sp;return (221113608|0);
 }
 return 0|0;
}
function _get_cputime($ptime) {
 $ptime = $ptime|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp;
 $0 = (_times(($t|0))|0);
 $1 = ($0|0)==(-1);
 if ($1) {
  HEAP32[220526664>>2] = 221113664;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $2 = HEAP32[$t>>2]|0;
  $3 = (($t) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + ($2))|0;
  $6 = (($t) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + ($7))|0;
  $9 = (($t) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + ($10))|0;
  $12 = HEAP32[221098896>>2]|0;
  $13 = (($11|0) / ($12|0))&-1;
  $14 = ($13*1000)|0;
  $15 = (($11|0) % ($12|0))&-1;
  $16 = ($15*1000)|0;
  $17 = (($16|0) / ($12|0))&-1;
  $18 = (($17) + ($14))|0;
  HEAP32[$ptime>>2] = $18;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _read_record($ptree,$str_file,$moves,$flag) {
 $ptree = $ptree|0;
 $str_file = $str_file|0;
 $moves = $moves|0;
 $flag = $flag|0;
 var $$0 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $record = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $record = sp;
 $0 = (($record) + 588|0);
 HEAP32[$0>>2] = 0;
 $1 = (($record) + 584|0);
 HEAP32[$1>>2] = 0;
 $2 = (($record) + 580|0);
 HEAP32[$2>>2] = 0;
 $3 = (($record) + 64|0);
 HEAP8[$3>>0] = 0;
 $4 = (($record) + 320|0);
 HEAP8[$4>>0] = 0;
 $5 = (_file_open($str_file,221113720)|0);
 $6 = (($record) + 576|0);
 HEAP32[$6>>2] = $5;
 $7 = ($5|0)==(0|0);
 if ($7) {
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ($moves|0)==(0);
 L4: do {
  if ($8) {
   $9 = (_in_CSA_header($ptree,$record,$flag)|0);
   $10 = ($9|0)<(0);
   if ($10) {
    $11 = HEAP32[$6>>2]|0;
    (_file_close($11)|0);
    HEAP32[$6>>2] = 0;
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   while(1) {
    $12 = (_in_CSA($ptree,$record,0,$flag)|0);
    $13 = ($12|0)<(0);
    if ($13) {
     break;
    }
    $$off = (($12) + -1)|0;
    $15 = ($$off>>>0)>(1);
    if (!($15)) {
     break L4;
    }
    $16 = HEAP32[$1>>2]|0;
    $17 = ($16>>>0)<($moves>>>0);
    if (!($17)) {
     break L4;
    }
   }
   $14 = HEAP32[$6>>2]|0;
   (_file_close($14)|0);
   HEAP32[$6>>2] = 0;
   $$0 = $12;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = HEAP32[$6>>2]|0;
 $19 = (_file_close($18)|0);
 HEAP32[$6>>2] = 0;
 $$0 = $19;
 STACKTOP = sp;return ($$0|0);
}
function _record_open($pr,$str_file,$record_mode,$str_name1,$str_name2) {
 $pr = $pr|0;
 $str_file = $str_file|0;
 $record_mode = $record_mode|0;
 $str_name1 = $str_name1|0;
 $str_name2 = $str_name2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($pr) + 588|0);
 HEAP32[$0>>2] = 0;
 $1 = (($pr) + 584|0);
 HEAP32[$1>>2] = 0;
 $2 = (($pr) + 580|0);
 HEAP32[$2>>2] = 0;
 $3 = (($pr) + 64|0);
 HEAP8[$3>>0] = 0;
 $4 = (($pr) + 320|0);
 HEAP8[$4>>0] = 0;
 $5 = ($str_name1|0)==(0|0);
 if (!($5)) {
  (_strncpy(($3|0),($str_name1|0),255)|0);
  $6 = (($pr) + 319|0);
  HEAP8[$6>>0] = 0;
 }
 $7 = ($str_name2|0)==(0|0);
 if (!($7)) {
  (_strncpy(($4|0),($str_name2|0),255)|0);
  $8 = (($pr) + 575|0);
  HEAP8[$8>>0] = 0;
 }
 if ((($record_mode|0) == 0)) {
  $9 = (_file_open($str_file,221113704)|0);
  $10 = (($pr) + 576|0);
  HEAP32[$10>>2] = $9;
  $11 = ($9|0)==(0|0);
  if ($11) {
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($record_mode|0) == 1)) {
  $12 = (_file_open($str_file,221113712)|0);
  $13 = (($pr) + 576|0);
  HEAP32[$13>>2] = $12;
  $14 = ($12|0)==(0|0);
  if ($14) {
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $15 = (_file_open($str_file,221113720)|0);
  $16 = (($pr) + 576|0);
  HEAP32[$16>>2] = $15;
  $17 = ($15|0)==(0|0);
  if ($17) {
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _in_CSA_header($ptree,$pr,$flag) {
 $ptree = $ptree|0;
 $pr = $pr|0;
 $flag = $flag|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $handv$0$i = 0, $i$0$lcssa$i$i = 0, $i$0$lcssa$i$i6 = 0, $i$04$i$i = 0, $i$04$i$i5 = 0, $i$1$i$i = 0, $i$1$lcssa = 0, $i$115 = 0, $ifile$01$i = 0, $iret$070 = 0;
 var $is_all_done$0 = 0, $is_all_done$023$i = 0, $is_all_done$1$i = 0, $is_all_done$178 = 0, $is_rep1_done$0 = 0, $is_rep1_done$176 = 0, $is_rep2_done$0 = 0, $is_rep2_done$177 = 0, $isdigit = 0, $isdigittmp = 0, $ispos$i = 0, $isquare$011$i = 0, $min_posi = 0, $n$022$i = 0, $nbishop$017$i = 0, $nbishop$1$i = 0, $neg$i = 0, $ngold$016$i = 0, $ngold$1$i = 0, $nknight$014$i = 0;
 var $nknight$1$i = 0, $nlance$013$i = 0, $nlance$1$i = 0, $not$ = 0, $not$$i = 0, $npawn$012$i = 0, $npawn$1$i = 0, $nrook$018$i = 0, $nrook$1$i = 0, $nsilver$015$i = 0, $nsilver$1$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond1 = 0, $or$cond10$i = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0;
 var $or$cond9$i = 0, $scevgep = 0, $scevgep52 = 0, $str_line = 0, $str_name1$0$ph46 = 0, $str_name2$0$ph1935 = 0, $str_name2$0$ph47 = 0, $str_piece$i = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 32|0;
 $vararg_buffer10 = sp + 16|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $str_piece$i = sp + 648|0;
 $min_posi = sp + 40|0;
 $str_line = sp + 136|0;
 HEAP8[$pr>>0] = 0;
 $0 = (($pr) + 8|0);
 HEAP8[$0>>0] = 0;
 $1 = (($pr) + 16|0);
 HEAP8[$1>>0] = 0;
 $2 = (($pr) + 24|0);
 HEAP8[$2>>0] = 0;
 $3 = (($pr) + 32|0);
 HEAP8[$3>>0] = 0;
 $4 = (($pr) + 40|0);
 HEAP8[$4>>0] = 0;
 $5 = (($pr) + 48|0);
 HEAP8[$5>>0] = 0;
 $6 = (($pr) + 56|0);
 HEAP8[$6>>0] = 0;
 $7 = (_read_CSA_line($pr,$str_line)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($pr) + 320|0);
 $10 = (($str_line) + 2|0);
 $11 = (($pr) + 575|0);
 $12 = (($pr) + 64|0);
 $13 = (($pr) + 319|0);
 $245 = $7;$str_name1$0$ph46 = 0;$str_name2$0$ph47 = 0;
 L4: while(1) {
  $246 = $245;$str_name2$0$ph1935 = $str_name2$0$ph47;
  L6: while(1) {
   $52 = $246;
   while(1) {
    $14 = HEAP8[$str_line>>0]|0;
    if (!((($14<<24>>24) == 36) | (($14<<24>>24) == 86) | (($14<<24>>24) == 78))) {
     label = 16;
     break L4;
    }
    $15 = (_memcmp($str_line,221113864,8)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     $i$115 = 0;
     while(1) {
      $scevgep = (($pr) + ($i$115<<3)|0);
      $19 = $i$115 << 3;
      $20 = (($19) + 8)|0;
      $scevgep52 = (($str_line) + ($20)|0);
      $21 = $scevgep52;
      $22 = $21;
      $23 = HEAPU8[$22>>0]|(HEAPU8[$22+1>>0]<<8)|(HEAPU8[$22+2>>0]<<16)|(HEAPU8[$22+3>>0]<<24);
      $24 = (($21) + 4)|0;
      $25 = $24;
      $26 = HEAPU8[$25>>0]|(HEAPU8[$25+1>>0]<<8)|(HEAPU8[$25+2>>0]<<16)|(HEAPU8[$25+3>>0]<<24);
      $27 = $scevgep;
      $28 = $27;
      HEAP8[$28>>0]=$23&255;HEAP8[$28+1>>0]=($23>>8)&255;HEAP8[$28+2>>0]=($23>>16)&255;HEAP8[$28+3>>0]=$23>>24;
      $29 = (($27) + 4)|0;
      $30 = $29;
      HEAP8[$30>>0]=$26&255;HEAP8[$30+1>>0]=($26>>8)&255;HEAP8[$30+2>>0]=($26>>16)&255;HEAP8[$30+3>>0]=$26>>24;
      $31 = ((($pr) + ($i$115<<3)|0) + 7|0);
      HEAP8[$31>>0] = 0;
      $32 = $i$115 << 3;
      $33 = (($32) + 15)|0;
      $34 = (($str_line) + ($33)|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = ($35<<24>>24)==(0);
      $18 = (($i$115) + 1)|0;
      if ($36) {
       $i$1$lcssa = $i$115;
       break;
      }
      $17 = ($18|0)<(8);
      if ($17) {
       $i$115 = $18;
      } else {
       $i$1$lcssa = $18;
       break;
      }
     }
     $37 = ($i$1$lcssa|0)==(8);
     if ($37) {
      label = 9;
      break L4;
     }
    } else {
     $43 = (_memcmp($str_line,221113928,2)|0);
     $44 = ($43|0)==(0);
     if ($44) {
      break L6;
     }
     $47 = (_memcmp($str_line,221113936,2)|0);
     $48 = ($47|0)==(0);
     if ($48) {
      break;
     }
    }
    $38 = (_read_CSA_line($pr,$str_line)|0);
    $39 = ($38|0)<(0);
    if ($39) {
     $$0 = $38;
     label = 87;
     break L4;
    } else {
     $52 = $38;
    }
   }
   (_strncpy(($9|0),($10|0),255)|0);
   HEAP8[$11>>0] = 0;
   $49 = (_read_CSA_line($pr,$str_line)|0);
   $50 = ($49|0)<(0);
   if ($50) {
    $$0 = $49;
    label = 87;
    break L4;
   } else {
    $246 = $49;$str_name2$0$ph1935 = $9;
   }
  }
  (_strncpy(($12|0),($10|0),255)|0);
  HEAP8[$13>>0] = 0;
  $45 = (_read_CSA_line($pr,$str_line)|0);
  $46 = ($45|0)<(0);
  if ($46) {
   $$0 = $45;
   label = 87;
   break;
  } else {
   $245 = $45;$str_name1$0$ph46 = $12;$str_name2$0$ph47 = $str_name2$0$ph1935;
  }
 }
 if ((label|0) == 9) {
  $40 = HEAP32[144>>2]|0;
  $41 = (($pr) + 588|0);
  $42 = HEAP32[$41>>2]|0;
  HEAP32[$vararg_buffer>>2] = $42;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 221113880;
  (_snprintf(220525640,512,$40,$vararg_buffer)|0);
  HEAP32[220526664>>2] = 220525640;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 16) {
  $51 = ($52|0)==(0);
  if ($51) {
   $53 = HEAP32[144>>2]|0;
   $54 = (($pr) + 588|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = HEAP32[520>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $55;
   $vararg_ptr5 = (($vararg_buffer2) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $56;
   (_snprintf(220525640,512,$53,$vararg_buffer2)|0);
   HEAP32[220526664>>2] = 220525640;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $57 = (($min_posi) + 9|0);
  dest=$57+0|0; stop=dest+81|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  $58 = (($min_posi) + 4|0);
  HEAP32[$58>>2] = 0;
  HEAP32[$min_posi>>2] = 0;
  $59 = (($str_line) + 1|0);
  $60 = (($str_piece$i) + 2|0);
  $61 = (($str_piece$i) + 1|0);
  $63 = $14;$is_all_done$0 = 0;$is_rep1_done$0 = 0;$is_rep2_done$0 = 0;
  L29: while(1) {
   $62 = ($63<<24>>24)==(80);
   if (!($62)) {
    label = 83;
    break;
   }
   $64 = HEAP8[$59>>0]|0;
   $65 = ($64<<24>>24)==(73);
   $66 = ($is_rep2_done$0|0)==(0);
   $or$cond = $65 & $66;
   $67 = ($is_all_done$0|0)==(0);
   $or$cond1 = $or$cond & $67;
   L32: do {
    if ($or$cond1) {
     $221 = (_read_board_rep1($str_line,$min_posi)|0);
     $222 = ($221|0)<(0);
     if ($222) {
      $iret$070 = $221;
      break L29;
     } else {
      $is_all_done$178 = 0;$is_rep1_done$176 = 1;$is_rep2_done$177 = 0;
     }
    } else {
     $68 = $64 << 24 >> 24;
     $isdigittmp = (($68) + -48)|0;
     $isdigit = ($isdigittmp>>>0)<(10);
     if ($isdigit) {
      $69 = ($64<<24>>24)!=(48);
      $70 = ($is_rep1_done$0|0)==(0);
      $or$cond2 = $69 & $70;
      $or$cond3 = $or$cond2 & $67;
      if ($or$cond3) {
       HEAP8[$60>>0] = 0;
       $71 = ($68*9)|0;
       $72 = (($71) + -441)|0;
       $ifile$01$i = 0;
       while(1) {
        $73 = ($ifile$01$i*3)|0;
        $74 = (($73) + 2)|0;
        $75 = (($str_line) + ($74)|0);
        $76 = HEAP8[$75>>0]|0;
        if ((($76<<24>>24) == 45) | (($76<<24>>24) == 43)) {
         $77 = (($73) + 3)|0;
         $78 = (($str_line) + ($77)|0);
         $79 = HEAP8[$78>>0]|0;
         HEAP8[$str_piece$i>>0] = $79;
         $80 = (($73) + 4)|0;
         $81 = (($str_line) + ($80)|0);
         $82 = HEAP8[$81>>0]|0;
         HEAP8[$61>>0] = $82;
         $i$04$i$i = 0;
         while(1) {
          $85 = (920 + ($i$04$i$i<<2)|0);
          $86 = HEAP32[$85>>2]|0;
          $87 = (_strcmp($86,$str_piece$i)|0);
          $88 = ($87|0)==(0);
          $84 = (($i$04$i$i) + 1)|0;
          if ($88) {
           $i$0$lcssa$i$i = $i$04$i$i;
           break;
          }
          $83 = ($84|0)<(16);
          if ($83) {
           $i$04$i$i = $84;
          } else {
           $i$0$lcssa$i$i = $84;
           break;
          }
         }
         if ((($i$0$lcssa$i$i|0) == 0) | (($i$0$lcssa$i$i|0) == 13) | (($i$0$lcssa$i$i|0) == 16)) {
          label = 31;
          break L29;
         }
         $89 = ($i$0$lcssa$i$i|0)<(0);
         if ($89) {
          label = 31;
          break L29;
         }
         $90 = (($ifile$01$i) + ($72))|0;
         $91 = ((($min_posi) + ($90)|0) + 9|0);
         $92 = HEAP8[$91>>0]|0;
         $93 = ($92<<24>>24)==(0);
         if (!($93)) {
          label = 31;
          break L29;
         }
         $95 = ($76<<24>>24)==(45);
         $96 = (0 - ($i$0$lcssa$i$i))|0;
         $97 = $95 ? $96 : $i$0$lcssa$i$i;
         $98 = $97&255;
         HEAP8[$91>>0] = $98;
        } else {
         $99 = (($ifile$01$i) + ($72))|0;
         $100 = ((($min_posi) + ($99)|0) + 9|0);
         HEAP8[$100>>0] = 0;
        }
        $101 = (($ifile$01$i) + 1)|0;
        $102 = ($101|0)<(9);
        if ($102) {
         $ifile$01$i = $101;
        } else {
         $is_all_done$178 = 0;$is_rep1_done$176 = 0;$is_rep2_done$177 = 1;
         break L32;
        }
       }
      }
     }
     if (!((($64<<24>>24) == 45) | (($64<<24>>24) == 43))) {
      label = 83;
      break L29;
     }
     HEAP8[$60>>0] = 0;
     $not$$i = ($64<<24>>24)!=(43);
     $103 = HEAP8[$10>>0]|0;
     $104 = ($103<<24>>24)==(0);
     if ($104) {
      $is_all_done$178 = 0;$is_rep1_done$176 = $is_rep1_done$0;$is_rep2_done$177 = $is_rep2_done$0;
     } else {
      $120 = $103;$is_all_done$023$i = 0;$n$022$i = 2;
      while(1) {
       $105 = $n$022$i | 1;
       $106 = (($str_line) + ($105)|0);
       $107 = HEAP8[$106>>0]|0;
       $108 = ($107<<24>>24)==(0);
       if ($108) {
        label = 40;
        break L29;
       }
       $109 = (($n$022$i) + 2)|0;
       $110 = (($str_line) + ($109)|0);
       $111 = HEAP8[$110>>0]|0;
       $112 = ($111<<24>>24)==(0);
       if ($112) {
        label = 40;
        break L29;
       }
       $113 = (($n$022$i) + 3)|0;
       $114 = (($str_line) + ($113)|0);
       $115 = HEAP8[$114>>0]|0;
       $116 = ($115<<24>>24)!=(0);
       $117 = ($is_all_done$023$i|0)==(0);
       $or$cond$i = $116 & $117;
       if (!($or$cond$i)) {
        label = 40;
        break L29;
       }
       $119 = ($120<<24>>24)==(48);
       $121 = ($107<<24>>24)==(48);
       $or$cond6$i = $119 & $121;
       $122 = ($111<<24>>24)==(65);
       $or$cond7$i = $or$cond6$i & $122;
       $123 = ($115<<24>>24)==(76);
       $or$cond8$i = $or$cond7$i & $123;
       do {
        if ($or$cond8$i) {
         $124 = HEAP32[$min_posi>>2]|0;
         $125 = HEAP32[$58>>2]|0;
         $126 = $124 & 31;
         $127 = $125 & 31;
         $128 = (($127) + ($126))|0;
         $129 = $124 >>> 5;
         $130 = $129 & 7;
         $131 = $125 >>> 5;
         $132 = $131 & 7;
         $133 = (($132) + ($130))|0;
         $134 = $124 >>> 8;
         $135 = $134 & 7;
         $136 = $125 >>> 8;
         $137 = $136 & 7;
         $138 = (($137) + ($135))|0;
         $139 = $124 >>> 11;
         $140 = $139 & 7;
         $141 = $125 >>> 11;
         $142 = $141 & 7;
         $143 = (($142) + ($140))|0;
         $144 = $124 >>> 14;
         $145 = $144 & 7;
         $146 = $125 >>> 14;
         $147 = $146 & 7;
         $148 = (($147) + ($145))|0;
         $149 = $124 >>> 17;
         $150 = $149 & 3;
         $151 = $125 >>> 17;
         $152 = $151 & 3;
         $153 = (($152) + ($150))|0;
         $154 = $124 >>> 19;
         $155 = $125 >>> 19;
         $156 = (($155) + ($154))|0;
         $isquare$011$i = 0;$nbishop$017$i = $153;$ngold$016$i = $148;$nknight$014$i = $138;$nlance$013$i = $133;$npawn$012$i = $128;$nrook$018$i = $156;$nsilver$015$i = $143;
         while(1) {
          $157 = ((($min_posi) + ($isquare$011$i)|0) + 9|0);
          $158 = HEAP8[$157>>0]|0;
          $159 = $158 << 24 >> 24;
          $ispos$i = ($158<<24>>24)>(-1);
          $neg$i = (0 - ($159))|0;
          $160 = $ispos$i ? $159 : $neg$i;
          switch ($160|0) {
          case 9: case 1:  {
           $161 = (($npawn$012$i) + 1)|0;
           $nbishop$1$i = $nbishop$017$i;$ngold$1$i = $ngold$016$i;$nknight$1$i = $nknight$014$i;$nlance$1$i = $nlance$013$i;$npawn$1$i = $161;$nrook$1$i = $nrook$018$i;$nsilver$1$i = $nsilver$015$i;
           break;
          }
          case 10: case 2:  {
           $162 = (($nlance$013$i) + 1)|0;
           $nbishop$1$i = $nbishop$017$i;$ngold$1$i = $ngold$016$i;$nknight$1$i = $nknight$014$i;$nlance$1$i = $162;$npawn$1$i = $npawn$012$i;$nrook$1$i = $nrook$018$i;$nsilver$1$i = $nsilver$015$i;
           break;
          }
          case 11: case 3:  {
           $163 = (($nknight$014$i) + 1)|0;
           $nbishop$1$i = $nbishop$017$i;$ngold$1$i = $ngold$016$i;$nknight$1$i = $163;$nlance$1$i = $nlance$013$i;$npawn$1$i = $npawn$012$i;$nrook$1$i = $nrook$018$i;$nsilver$1$i = $nsilver$015$i;
           break;
          }
          case 12: case 4:  {
           $164 = (($nsilver$015$i) + 1)|0;
           $nbishop$1$i = $nbishop$017$i;$ngold$1$i = $ngold$016$i;$nknight$1$i = $nknight$014$i;$nlance$1$i = $nlance$013$i;$npawn$1$i = $npawn$012$i;$nrook$1$i = $nrook$018$i;$nsilver$1$i = $164;
           break;
          }
          case 5:  {
           $165 = (($ngold$016$i) + 1)|0;
           $nbishop$1$i = $nbishop$017$i;$ngold$1$i = $165;$nknight$1$i = $nknight$014$i;$nlance$1$i = $nlance$013$i;$npawn$1$i = $npawn$012$i;$nrook$1$i = $nrook$018$i;$nsilver$1$i = $nsilver$015$i;
           break;
          }
          case 14: case 6:  {
           $166 = (($nbishop$017$i) + 1)|0;
           $nbishop$1$i = $166;$ngold$1$i = $ngold$016$i;$nknight$1$i = $nknight$014$i;$nlance$1$i = $nlance$013$i;$npawn$1$i = $npawn$012$i;$nrook$1$i = $nrook$018$i;$nsilver$1$i = $nsilver$015$i;
           break;
          }
          case 15: case 7:  {
           $167 = (($nrook$018$i) + 1)|0;
           $nbishop$1$i = $nbishop$017$i;$ngold$1$i = $ngold$016$i;$nknight$1$i = $nknight$014$i;$nlance$1$i = $nlance$013$i;$npawn$1$i = $npawn$012$i;$nrook$1$i = $167;$nsilver$1$i = $nsilver$015$i;
           break;
          }
          default: {
           $nbishop$1$i = $nbishop$017$i;$ngold$1$i = $ngold$016$i;$nknight$1$i = $nknight$014$i;$nlance$1$i = $nlance$013$i;$npawn$1$i = $npawn$012$i;$nrook$1$i = $nrook$018$i;$nsilver$1$i = $nsilver$015$i;
          }
          }
          $168 = (($isquare$011$i) + 1)|0;
          $exitcond$i = ($168|0)==(81);
          if ($exitcond$i) {
           break;
          } else {
           $isquare$011$i = $168;$nbishop$017$i = $nbishop$1$i;$ngold$016$i = $ngold$1$i;$nknight$014$i = $nknight$1$i;$nlance$013$i = $nlance$1$i;$npawn$012$i = $npawn$1$i;$nrook$018$i = $nrook$1$i;$nsilver$015$i = $nsilver$1$i;
          }
         }
         $169 = (18 - ($npawn$1$i))|0;
         $170 = (4 - ($nlance$1$i))|0;
         $171 = $170 << 5;
         $172 = (($169) + ($171))|0;
         $173 = (4 - ($nknight$1$i))|0;
         $174 = $173 << 8;
         $175 = (($172) + ($174))|0;
         $176 = (4 - ($nsilver$1$i))|0;
         $177 = $176 << 11;
         $178 = (($175) + ($177))|0;
         $179 = (4 - ($ngold$1$i))|0;
         $180 = $179 << 14;
         $181 = (($178) + ($180))|0;
         $182 = (2 - ($nbishop$1$i))|0;
         $183 = $182 << 17;
         $184 = (($181) + ($183))|0;
         $185 = (2 - ($nrook$1$i))|0;
         $186 = $185 << 19;
         $187 = (($184) + ($186))|0;
         if ($not$$i) {
          $188 = (($187) + ($125))|0;
          HEAP32[$58>>2] = $188;
          $is_all_done$1$i = 1;
          break;
         } else {
          $189 = (($187) + ($124))|0;
          HEAP32[$min_posi>>2] = $189;
          $is_all_done$1$i = 1;
          break;
         }
        } else {
         HEAP8[$str_piece$i>>0] = $111;
         HEAP8[$61>>0] = $115;
         $i$04$i$i5 = 0;
         while(1) {
          $192 = (920 + ($i$04$i$i5<<2)|0);
          $193 = HEAP32[$192>>2]|0;
          $194 = (_strcmp($193,$str_piece$i)|0);
          $195 = ($194|0)==(0);
          $191 = (($i$04$i$i5) + 1)|0;
          if ($195) {
           $i$0$lcssa$i$i6 = $i$04$i$i5;
           break;
          }
          $190 = ($191|0)<(16);
          if ($190) {
           $i$04$i$i5 = $191;
          } else {
           $i$0$lcssa$i$i6 = $191;
           break;
          }
         }
         if ((($i$0$lcssa$i$i6|0) == 0) | (($i$0$lcssa$i$i6|0) == 13) | (($i$0$lcssa$i$i6|0) == 16)) {
          $i$1$i$i = -2;
         } else {
          $i$1$i$i = $i$0$lcssa$i$i6;
         }
         if (!($119)) {
          $201 = $120 << 24 >> 24;
          $202 = $107 << 24 >> 24;
          $203 = (57 - ($201))|0;
          $204 = (($202) + -49)|0;
          $205 = ($i$1$i$i|0)==(-2);
          $206 = ($203>>>0)>(8);
          $or$cond9$i = $205 | $206;
          $207 = ($204>>>0)>(8);
          $or$cond10$i = $or$cond9$i | $207;
          if ($or$cond10$i) {
           label = 74;
           break L29;
          }
          $208 = ($204*9)|0;
          $209 = (($208) + ($203))|0;
          $210 = ((($min_posi) + ($209)|0) + 9|0);
          $211 = HEAP8[$210>>0]|0;
          $212 = ($211<<24>>24)==(0);
          if (!($212)) {
           label = 74;
           break L29;
          }
          $214 = (0 - ($i$1$i$i))|0;
          $215 = $not$$i ? $214 : $i$1$i$i;
          $216 = $215&255;
          HEAP8[$210>>0] = $216;
          $is_all_done$1$i = 0;
          break;
         }
         switch ($i$1$i$i|0) {
         case 2:  {
          $handv$0$i = 32;
          break;
         }
         case 3:  {
          $handv$0$i = 256;
          break;
         }
         case 4:  {
          $handv$0$i = 2048;
          break;
         }
         case 5:  {
          $handv$0$i = 16384;
          break;
         }
         case 6:  {
          $handv$0$i = 131072;
          break;
         }
         case 7:  {
          $handv$0$i = 524288;
          break;
         }
         case 1:  {
          $handv$0$i = 1;
          break;
         }
         default: {
          label = 68;
          break L29;
         }
         }
         if ($not$$i) {
          $197 = HEAP32[$58>>2]|0;
          $198 = (($197) + ($handv$0$i))|0;
          HEAP32[$58>>2] = $198;
          $is_all_done$1$i = 0;
          break;
         } else {
          $199 = HEAP32[$min_posi>>2]|0;
          $200 = (($199) + ($handv$0$i))|0;
          HEAP32[$min_posi>>2] = $200;
          $is_all_done$1$i = 0;
          break;
         }
        }
       } while(0);
       $217 = (($n$022$i) + 4)|0;
       $218 = (($str_line) + ($217)|0);
       $219 = HEAP8[$218>>0]|0;
       $220 = ($219<<24>>24)==(0);
       if ($220) {
        $is_all_done$178 = $is_all_done$1$i;$is_rep1_done$176 = $is_rep1_done$0;$is_rep2_done$177 = $is_rep2_done$0;
        break;
       } else {
        $120 = $219;$is_all_done$023$i = $is_all_done$1$i;$n$022$i = $217;
       }
      }
     }
    }
   } while(0);
   $227 = (_read_CSA_line($pr,$str_line)|0);
   $228 = ($227|0)<(0);
   if ($228) {
    $$0 = $227;
    label = 87;
    break;
   }
   $229 = ($227|0)==(0);
   if ($229) {
    label = 82;
    break;
   }
   $$pre = HEAP8[$str_line>>0]|0;
   $63 = $$pre;$is_all_done$0 = $is_all_done$178;$is_rep1_done$0 = $is_rep1_done$176;$is_rep2_done$0 = $is_rep2_done$177;
  }
  if ((label|0) == 31) {
   $94 = HEAP32[408>>2]|0;
   HEAP32[220526664>>2] = $94;
   $iret$070 = -2;
  }
  else if ((label|0) == 40) {
   $118 = HEAP32[408>>2]|0;
   HEAP32[220526664>>2] = $118;
   $iret$070 = -2;
  }
  else if ((label|0) == 68) {
   $196 = HEAP32[408>>2]|0;
   HEAP32[220526664>>2] = $196;
   $iret$070 = -2;
  }
  else if ((label|0) == 74) {
   $213 = HEAP32[408>>2]|0;
   HEAP32[220526664>>2] = $213;
   $iret$070 = -2;
  }
  else if ((label|0) == 82) {
   $230 = HEAP32[144>>2]|0;
   $231 = (($pr) + 588|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[520>>2]|0;
   HEAP32[$vararg_buffer10>>2] = $232;
   $vararg_ptr13 = (($vararg_buffer10) + 4|0);
   HEAP32[$vararg_ptr13>>2] = $233;
   (_snprintf(220525640,512,$230,$vararg_buffer10)|0);
   HEAP32[220526664>>2] = 220525640;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 83) {
   $234 = (_strcmp($str_line,221113944)|0);
   $235 = ($234|0)==(0);
   if (!($235)) {
    $236 = (_strcmp($str_line,221113952)|0);
    $237 = ($236|0)==(0);
    if (!($237)) {
     $238 = HEAP32[144>>2]|0;
     $239 = (($pr) + 588|0);
     $240 = HEAP32[$239>>2]|0;
     $241 = HEAP32[368>>2]|0;
     HEAP32[$vararg_buffer14>>2] = $240;
     $vararg_ptr17 = (($vararg_buffer14) + 4|0);
     HEAP32[$vararg_ptr17>>2] = $241;
     (_snprintf(220525640,512,$238,$vararg_buffer14)|0);
     HEAP32[220526664>>2] = 220525640;
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $not$ = ($63<<24>>24)!=(43);
   $242 = $not$&1;
   $243 = (($min_posi) + 8|0);
   HEAP8[$243>>0] = $242;
   $244 = (_ini_game($ptree,$min_posi,$flag,$str_name1$0$ph46,$str_name2$0$ph1935)|0);
   $$0 = $244;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 87) {
   STACKTOP = sp;return ($$0|0);
  }
  $223 = HEAP32[144>>2]|0;
  $224 = (($pr) + 588|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = HEAP32[220526664>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $225;
  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $226;
  (_snprintf(220525640,512,$223,$vararg_buffer6)|0);
  HEAP32[220526664>>2] = 220525640;
  $$0 = $iret$070;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 87) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _record_close($pr) {
 $pr = $pr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pr) + 576|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_file_close($1)|0);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return ($2|0);
}
function _in_CSA($ptree,$pr,$pmove,$flag) {
 $ptree = $ptree|0;
 $pr = $pr|0;
 $pmove = $pmove|0;
 $flag = $flag|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $l$0 = 0, $move = 0, $or$cond = 0, $ptr = 0, $str_line = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer18 = sp + 40|0;
 $vararg_buffer14 = sp + 24|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp;
 $vararg_buffer = sp + 8|0;
 $str_line = sp + 56|0;
 $ptr = sp + 52|0;
 $move = sp + 48|0;
 $0 = (($pr) + 584|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (_in_CSA_header($ptree,$pr,$flag)|0);
  $4 = ($3|0)<(0);
  if ($4) {
   $$0 = $3;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $5 = (_read_CSA_line($pr,$str_line)|0);
 $6 = ($5|0)<(0);
 if ($6) {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 } else {
  $8 = $5;
 }
 while(1) {
  $7 = ($8|0)==(0);
  if ($7) {
   $$0 = 1;
   label = 36;
   break;
  }
  $9 = HEAP32[40>>2]|0;
  $10 = (_strcmp($str_line,$9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   label = 6;
   break;
  }
  $14 = HEAP32[64>>2]|0;
  $15 = (_strcmp($str_line,$14)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   label = 9;
   break;
  }
  $17 = HEAP32[88>>2]|0;
  $18 = (_strcmp($str_line,$17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   label = 9;
   break;
  }
  $22 = HEAP32[104>>2]|0;
  $23 = (_strcmp($str_line,$22)|0);
  $24 = ($23|0)==(0);
  if ($24) {
   $$0 = 5;
   label = 36;
   break;
  }
  $25 = HEAP8[$str_line>>0]|0;
  if (!((($25<<24>>24) == 37) | (($25<<24>>24) == 84))) {
   label = 13;
   break;
  }
  $26 = (_read_CSA_line($pr,$str_line)|0);
  $27 = ($26|0)<(0);
  if ($27) {
   $$0 = $26;
   label = 36;
   break;
  } else {
   $8 = $26;
  }
 }
 if ((label|0) == 6) {
  $12 = HEAP32[34180920>>2]|0;
  $13 = $12 | 2;
  HEAP32[34180920>>2] = $13;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 9) {
  $20 = HEAP32[34180920>>2]|0;
  $21 = $20 | 4;
  HEAP32[34180920>>2] = $21;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 13) {
  $28 = (_strcmp($str_line,221113784)|0);
  $29 = ($28|0)==(0);
  if ($29) {
   $30 = (($pr) + 580|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + 1)|0;
   HEAP32[$30>>2] = $32;
   HEAP32[$0>>2] = 0;
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
  $33 = HEAP32[34180920>>2]|0;
  $34 = $33 & 15;
  $35 = ($34|0)==(0);
  if (!($35)) {
   $36 = HEAP32[144>>2]|0;
   $37 = (($pr) + 588|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = HEAP32[368>>2]|0;
   HEAP32[$vararg_buffer>>2] = $38;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $39;
   (_snprintf(220525640,512,$36,$vararg_buffer)|0);
   HEAP32[220526664>>2] = 220525640;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $40 = (($str_line) + 1|0);
  $41 = (_interpret_CSA_move($ptree,$move,$40)|0);
  $42 = ($41|0)<(0);
  if ($42) {
   $43 = HEAP32[144>>2]|0;
   $44 = (($pr) + 588|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = HEAP32[220526664>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $45;
   $vararg_ptr5 = (($vararg_buffer2) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $46;
   (_snprintf(220525640,512,$43,$vararg_buffer2)|0);
   HEAP32[220526664>>2] = 220525640;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $47 = ($pmove|0)==(0|0);
  if (!($47)) {
   $48 = HEAP32[$move>>2]|0;
   HEAP32[$pmove>>2] = $48;
  }
  $49 = $flag & 1;
  $50 = ($49|0)==(0);
  do {
   if ($50) {
    $l$0 = 0;
   } else {
    $51 = (_read_CSA_line($pr,$str_line)|0);
    $52 = ($51|0)<(0);
    if ($52) {
     $$0 = $51;
     STACKTOP = sp;return ($$0|0);
    }
    $53 = ($51|0)==(0);
    if ($53) {
     $54 = HEAP32[144>>2]|0;
     $55 = (($pr) + 588|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = HEAP32[520>>2]|0;
     HEAP32[$vararg_buffer6>>2] = $56;
     $vararg_ptr9 = (($vararg_buffer6) + 4|0);
     HEAP32[$vararg_ptr9>>2] = $57;
     (_snprintf(220525640,512,$54,$vararg_buffer6)|0);
     HEAP32[220526664>>2] = 220525640;
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    $58 = HEAP8[$str_line>>0]|0;
    $59 = ($58<<24>>24)==(84);
    if (!($59)) {
     $60 = HEAP32[144>>2]|0;
     $61 = (($pr) + 588|0);
     $62 = HEAP32[$61>>2]|0;
     HEAP32[$vararg_buffer10>>2] = $62;
     $vararg_ptr13 = (($vararg_buffer10) + 4|0);
     HEAP32[$vararg_ptr13>>2] = 221113792;
     (_snprintf(220525640,512,$60,$vararg_buffer10)|0);
     HEAP32[220526664>>2] = 220525640;
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    $63 = (_strtol($40,$ptr,0)|0);
    $64 = HEAP32[$ptr>>2]|0;
    $65 = ($64|0)==($40|0);
    if (!($65)) {
     $66 = ($63|0)==(2147483647);
     $67 = ($63|0)<(0);
     $or$cond = $66 | $67;
     if (!($or$cond)) {
      $l$0 = $63;
      break;
     }
    }
    $68 = HEAP32[144>>2]|0;
    $69 = (($pr) + 588|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = HEAP32[368>>2]|0;
    HEAP32[$vararg_buffer14>>2] = $70;
    $vararg_ptr17 = (($vararg_buffer14) + 4|0);
    HEAP32[$vararg_ptr17>>2] = $71;
    (_snprintf(220525640,512,$68,$vararg_buffer14)|0);
    HEAP32[220526664>>2] = 220525640;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  HEAP32[34180976>>2] = $l$0;
  $72 = HEAP32[34184024>>2]|0;
  $73 = ($72|0)==(0);
  if ($73) {
   $76 = HEAP32[34180984>>2]|0;
   $77 = (($76) + ($l$0))|0;
   HEAP32[34180984>>2] = $77;
  } else {
   $74 = HEAP32[34180992>>2]|0;
   $75 = (($74) + ($l$0))|0;
   HEAP32[34180992>>2] = $75;
  }
  $78 = HEAP32[$move>>2]|0;
  $79 = $flag & -2;
  $80 = (_make_move_root($ptree,$78,$79)|0);
  $81 = ($80|0)<(0);
  if ($81) {
   $82 = HEAP32[144>>2]|0;
   $83 = (($pr) + 588|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = HEAP32[220526664>>2]|0;
   HEAP32[$vararg_buffer18>>2] = $84;
   $vararg_ptr21 = (($vararg_buffer18) + 4|0);
   HEAP32[$vararg_ptr21>>2] = $85;
   (_snprintf(220525640,512,$82,$vararg_buffer18)|0);
   HEAP32[220526664>>2] = 220525640;
   $$0 = $80;
   STACKTOP = sp;return ($$0|0);
  } else {
   $86 = HEAP32[$0>>2]|0;
   $87 = (($86) + 1)|0;
   HEAP32[$0>>2] = $87;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 36) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _out_CSA($ptree,$pr,$move) {
 $ptree = $ptree|0;
 $pr = $pr|0;
 $move = $move|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer5 = 0;
 var $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($move|0)==(-16777216);
 $1 = (($pr) + 584|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 if ($0) {
  if (!($3)) {
   _out_CSA_header($ptree,$pr);
  }
  $4 = (($pr) + 576|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[40>>2]|0;
  HEAP32[$vararg_buffer>>2] = $6;
  (_fprintf(($5|0),(221113728|0),($vararg_buffer|0))|0);
  $7 = (($pr) + 588|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 1)|0;
  HEAP32[$7>>2] = $9;
 } else {
  if (!($3)) {
   $10 = HEAP32[34184024>>2]|0;
   $11 = $10 ^ 1;
   HEAP32[34184024>>2] = $11;
   $12 = ($10|0)==(1);
   if ($12) {
    _unmake_move_b($ptree,$move,1);
   } else {
    _unmake_move_w($ptree,$move,1);
   }
   _out_CSA_header($ptree,$pr);
   $13 = HEAP32[34184024>>2]|0;
   $14 = ($13|0)==(0);
   if ($14) {
    _make_move_b($ptree,$move,1);
   } else {
    _make_move_w($ptree,$move,1);
   }
   $15 = HEAP32[34184024>>2]|0;
   $16 = $15 ^ 1;
   HEAP32[34184024>>2] = $16;
  }
  (_str_CSA_move($move)|0);
  $17 = (($pr) + 576|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[34184024>>2]|0;
  $20 = $19 ^ 1;
  $21 = (984 + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  HEAP32[$vararg_buffer1>>2] = $23;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 221113824;
  (_fprintf(($18|0),(221113736|0),($vararg_buffer1|0))|0);
  $24 = (($pr) + 588|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$24>>2] = $26;
  $27 = HEAP32[$1>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$1>>2] = $28;
 }
 $29 = HEAP32[34184024>>2]|0;
 $30 = ($29|0)!=(0);
 $31 = HEAP32[34180984>>2]|0;
 $32 = HEAP32[34180992>>2]|0;
 $33 = $30 ? $31 : $32;
 $34 = (($pr) + 576|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[34180976>>2]|0;
 $37 = (($33>>>0) / 60)&-1;
 $38 = (($33>>>0) % 60)&-1;
 HEAP32[$vararg_buffer5>>2] = $36;
 $vararg_ptr8 = (($vararg_buffer5) + 4|0);
 HEAP32[$vararg_ptr8>>2] = $37;
 $vararg_ptr9 = (($vararg_buffer5) + 8|0);
 HEAP32[$vararg_ptr9>>2] = $38;
 (_fprintf(($35|0),(221113744|0),($vararg_buffer5|0))|0);
 $39 = (($pr) + 588|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + 1)|0;
 HEAP32[$39>>2] = $41;
 $42 = HEAP32[34180920>>2]|0;
 $43 = $42 & 1;
 $44 = ($43|0)==(0);
 if (!($44)) {
  $45 = HEAP32[$34>>2]|0;
  (_fprintf(($45|0),(221113768|0),($vararg_buffer10|0))|0);
  $46 = HEAP32[$39>>2]|0;
  $47 = (($46) + 1)|0;
  HEAP32[$39>>2] = $47;
  $54 = HEAP32[$34>>2]|0;
  (_fflush(($54|0))|0);
  STACKTOP = sp;return;
 }
 $48 = $42 & 4;
 $49 = ($48|0)==(0);
 if ($49) {
  $54 = HEAP32[$34>>2]|0;
  (_fflush(($54|0))|0);
  STACKTOP = sp;return;
 }
 $50 = HEAP32[$34>>2]|0;
 $51 = HEAP32[64>>2]|0;
 HEAP32[$vararg_buffer12>>2] = $51;
 (_fprintf(($50|0),(221113728|0),($vararg_buffer12|0))|0);
 $52 = HEAP32[$39>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[$39>>2] = $53;
 $54 = HEAP32[$34>>2]|0;
 (_fflush(($54|0))|0);
 STACKTOP = sp;return;
}
function _out_CSA_header($ptree,$pr) {
 $ptree = $ptree|0;
 $pr = $pr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0;
 var $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $t = sp + 48|0;
 $0 = (($pr) + 576|0);
 $1 = HEAP32[$0>>2]|0;
 (_fwrite((221113960|0),21,1,($1|0))|0);
 $2 = (($pr) + 64|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $5 = HEAP32[$0>>2]|0;
  HEAP32[$vararg_buffer>>2] = $2;
  (_fprintf(($5|0),(221113984|0),($vararg_buffer|0))|0);
 }
 $6 = (($pr) + 320|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  $9 = HEAP32[$0>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $6;
  (_fprintf(($9|0),(221113992|0),($vararg_buffer1|0))|0);
 }
 $10 = (_time((0|0))|0);
 HEAP32[$t>>2] = $10;
 $11 = ($10|0)==(-1);
 if ($11) {
  _out_warning(221114000,$vararg_buffer4);
 } else {
  $12 = (_localtime(($t|0))|0);
  $13 = HEAP32[$0>>2]|0;
  $14 = (($12) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 1900)|0;
  $17 = (($12) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 1)|0;
  $20 = (($12) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($12) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($12) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $16;
  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $19;
  $vararg_ptr10 = (($vararg_buffer6) + 8|0);
  HEAP32[$vararg_ptr10>>2] = $21;
  $vararg_ptr11 = (($vararg_buffer6) + 12|0);
  HEAP32[$vararg_ptr11>>2] = $23;
  $vararg_ptr12 = (($vararg_buffer6) + 16|0);
  HEAP32[$vararg_ptr12>>2] = $25;
  $vararg_ptr13 = (($vararg_buffer6) + 20|0);
  HEAP32[$vararg_ptr13>>2] = $26;
  (_fprintf(($13|0),(221114024|0),($vararg_buffer6|0))|0);
 }
 $27 = (($ptree) + 512|0);
 $28 = (_memcmp($27,((1424 + 9|0)),81)|0);
 $29 = ($28|0)==(0);
 if ($29) {
  $30 = HEAP8[((1424 + 8|0))>>0]|0;
  $31 = $30 << 24 >> 24;
  $32 = HEAP32[34184024>>2]|0;
  $33 = ($31|0)==($32|0);
  if ($33) {
   $34 = HEAP32[1424>>2]|0;
   $35 = (($ptree) + 500|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($34|0)==($36|0);
   if ($37) {
    $38 = HEAP32[((1424 + 4|0))>>2]|0;
    $39 = (($ptree) + 504|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($38|0)==($40|0);
    if ($41) {
     $42 = HEAP32[$0>>2]|0;
     (_fwrite((221114072|0),3,1,($42|0))|0);
     $43 = (($pr) + 588|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (($44) + 1)|0;
     HEAP32[$43>>2] = $45;
    } else {
     label = 13;
    }
   } else {
    label = 13;
   }
  } else {
   label = 13;
  }
 } else {
  label = 13;
 }
 if ((label|0) == 13) {
  $46 = HEAP32[$0>>2]|0;
  (_out_board($ptree,$46,0,1)|0);
  $47 = (($pr) + 588|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + 10)|0;
  HEAP32[$47>>2] = $49;
 }
 $50 = HEAP32[34184024>>2]|0;
 $51 = ($50|0)==(0);
 $52 = HEAP32[$0>>2]|0;
 if ($51) {
  (_fwrite((221114088|0),2,1,($52|0))|0);
  $53 = (($pr) + 588|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + 1)|0;
  HEAP32[$53>>2] = $55;
  STACKTOP = sp;return;
 } else {
  (_fwrite((221114080|0),2,1,($52|0))|0);
  $53 = (($pr) + 588|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + 1)|0;
  HEAP32[$53>>2] = $55;
  STACKTOP = sp;return;
 }
}
function _str_CSA_move($move) {
 $move = $move|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $0 = $move & 16384;
 $1 = $move >>> 15;
 $2 = $1 & 15;
 $3 = $move >>> 7;
 $4 = $3 & 127;
 $5 = $move & 127;
 $6 = ($0|0)==(0);
 if (!($6)) {
  $7 = (1248 + ($4)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = (9 - ($9))|0;
  $11 = (1336 + ($4)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = (($13) + 1)|0;
  $15 = (1248 + ($5)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = (9 - ($17))|0;
  $19 = (1336 + ($5)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = (($21) + 1)|0;
  $23 = (($2) + 8)|0;
  $24 = (920 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  HEAP32[$vararg_buffer>>2] = $10;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $14;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $18;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $22;
  $vararg_ptr4 = (($vararg_buffer) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $25;
  (_snprintf(221113824,7,221113832,$vararg_buffer)|0);
  STACKTOP = sp;return (221113824|0);
 }
 $26 = ($4>>>0)<(81);
 if ($26) {
  $27 = (1248 + ($4)|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = (9 - ($29))|0;
  $31 = (1336 + ($4)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = (($33) + 1)|0;
  $35 = (1248 + ($5)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = (9 - ($37))|0;
  $39 = (1336 + ($5)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = (($41) + 1)|0;
  $43 = (920 + ($2<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $30;
  $vararg_ptr8 = (($vararg_buffer5) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $34;
  $vararg_ptr9 = (($vararg_buffer5) + 8|0);
  HEAP32[$vararg_ptr9>>2] = $38;
  $vararg_ptr10 = (($vararg_buffer5) + 12|0);
  HEAP32[$vararg_ptr10>>2] = $42;
  $vararg_ptr11 = (($vararg_buffer5) + 16|0);
  HEAP32[$vararg_ptr11>>2] = $44;
  (_snprintf(221113824,7,221113832,$vararg_buffer5)|0);
  STACKTOP = sp;return (221113824|0);
 } else {
  $45 = (1248 + ($5)|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = (9 - ($47))|0;
  $49 = (1336 + ($5)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = (($51) + 1)|0;
  $53 = (($4) + -80)|0;
  $54 = (920 + ($53<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  HEAP32[$vararg_buffer12>>2] = $48;
  $vararg_ptr15 = (($vararg_buffer12) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $52;
  $vararg_ptr16 = (($vararg_buffer12) + 8|0);
  HEAP32[$vararg_ptr16>>2] = $55;
  (_snprintf(221113824,7,221113848,$vararg_buffer12)|0);
  STACKTOP = sp;return (221113824|0);
 }
 return 0|0;
}
function _record_wind($pr) {
 $pr = $pr|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $str_line = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str_line = sp;
 while(1) {
  $0 = (_read_CSA_line($pr,$str_line)|0);
  $1 = ($0|0)<(0);
  if ($1) {
   $$0 = $0;
   label = 6;
   break;
  }
  $2 = ($0|0)==(0);
  if ($2) {
   $$0 = 1;
   label = 6;
   break;
  }
  $3 = (_strcmp($str_line,221113784)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  $5 = (($pr) + 580|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 1)|0;
  HEAP32[$5>>2] = $7;
  $8 = (($pr) + 584|0);
  HEAP32[$8>>2] = 0;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _read_CSA_line($pr,$str) {
 $pr = $pr|0;
 $str = $str|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0$i = 0, $c$08 = 0, $c$08$us = 0, $c$08$us9 = 0, $i$0$lcssa = 0, $i$07 = 0;
 var $i$07$us = 0, $i$07$us10 = 0, $i$1 = 0, $i$1$in = 0, $isascii4 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond3$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (($pr) + 576|0);
 $1 = (($pr) + 588|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = (_fgetc(($2|0))|0);
  if ((($3|0) == 39)) {
   while(1) {
    $6 = HEAP32[$0>>2]|0;
    $7 = (_fgetc(($6|0))|0);
    $8 = ($7|0)==(10);
    if ($8) {
     $9 = HEAP32[$1>>2]|0;
     $10 = (($9) + 1)|0;
     HEAP32[$1>>2] = $10;
    }
    $11 = ($7|0)==(-1);
    $or$cond$i = $11 | $8;
    $12 = ($7|0)!=(39);
    $or$cond3$i = $or$cond$i & $12;
    if ($or$cond3$i) {
     $c$0$i = $7;
     break;
    }
   }
  } else if ((($3|0) == 10)) {
   $4 = HEAP32[$1>>2]|0;
   $5 = (($4) + 1)|0;
   HEAP32[$1>>2] = $5;
   $c$0$i = 10;
  } else {
   $c$0$i = $3;
  }
  $13 = (_isgraph($c$0$i)|0);
  $14 = ($13|0)!=(0);
  $15 = ($c$0$i|0)==(-1);
  $or$cond = $14 | $15;
  if ($or$cond) {
   break;
  }
 }
 if ($15) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 L15: do {
  if ((($c$0$i|0) == 78)) {
   $c$08$us = 78;$i$07$us = 0;
   while(1) {
    if ((($c$08$us|0) == 10) | (($c$08$us|0) == -1)) {
     $i$0$lcssa = $i$07$us;
     break L15;
    }
    $16 = $c$08$us&255;
    $17 = (($str) + ($i$07$us)|0);
    HEAP8[$17>>0] = $16;
    $18 = HEAP32[$0>>2]|0;
    $19 = (_fgetc(($18|0))|0);
    $20 = ($19|0)==(10);
    if ($20) {
     $21 = HEAP32[$1>>2]|0;
     $22 = (($21) + 1)|0;
     HEAP32[$1>>2] = $22;
    }
    $23 = (($i$07$us) + 1)|0;
    $24 = ($23|0)<(511);
    if ($24) {
     $c$08$us = $19;$i$07$us = $23;
    } else {
     $i$0$lcssa = $23;
     break;
    }
   }
  } else if ((($c$0$i|0) == 36)) {
   $c$08$us9 = 36;$i$07$us10 = 0;
   while(1) {
    if ((($c$08$us9|0) == 10) | (($c$08$us9|0) == -1)) {
     $i$0$lcssa = $i$07$us10;
     break L15;
    }
    $25 = $c$08$us9&255;
    $26 = (($str) + ($i$07$us10)|0);
    HEAP8[$26>>0] = $25;
    $27 = HEAP32[$0>>2]|0;
    $28 = (_fgetc(($27|0))|0);
    $29 = ($28|0)==(10);
    if ($29) {
     $30 = HEAP32[$1>>2]|0;
     $31 = (($30) + 1)|0;
     HEAP32[$1>>2] = $31;
    }
    $32 = (($i$07$us10) + 1)|0;
    $33 = ($32|0)<(511);
    if ($33) {
     $c$08$us9 = $28;$i$07$us10 = $32;
    } else {
     $i$0$lcssa = $32;
     break;
    }
   }
  } else {
   $c$08 = $c$0$i;$i$07 = 0;
   while(1) {
    if ((($c$08|0) == 44)) {
     if (!((($c$0$i|0) == 36) | (($c$0$i|0) == 78))) {
      $i$0$lcssa = $i$07;
      break L15;
     }
    } else if ((($c$08|0) == 10) | (($c$08|0) == -1)) {
     $i$0$lcssa = $i$07;
     break L15;
    }
    $34 = $c$08&255;
    $35 = (($str) + ($i$07)|0);
    HEAP8[$35>>0] = $34;
    $36 = HEAP32[$0>>2]|0;
    $37 = (_fgetc(($36|0))|0);
    $38 = ($37|0)==(10);
    if ($38) {
     $39 = HEAP32[$1>>2]|0;
     $40 = (($39) + 1)|0;
     HEAP32[$1>>2] = $40;
    }
    $41 = (($i$07) + 1)|0;
    $42 = ($41|0)<(511);
    if ($42) {
     $c$08 = $37;$i$07 = $41;
    } else {
     $i$0$lcssa = $41;
     break;
    }
   }
  }
 } while(0);
 $43 = ($i$0$lcssa|0)==(511);
 if ($43) {
  $44 = HEAP32[144>>2]|0;
  $45 = HEAP32[$1>>2]|0;
  $46 = HEAP32[664>>2]|0;
  HEAP32[$vararg_buffer>>2] = $45;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $46;
  (_snprintf(220525640,512,$44,$vararg_buffer)|0);
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 } else {
  $i$1$in = $i$0$lcssa;
 }
 while(1) {
  $i$1 = (($i$1$in) + -1)|0;
  $47 = (($str) + ($i$1)|0);
  $48 = HEAP8[$47>>0]|0;
  $isascii4 = ($48<<24>>24)>(-1);
  if (!($isascii4)) {
   break;
  }
  $49 = $48 << 24 >> 24;
  $50 = (_isspace($49)|0);
  $51 = ($50|0)==(0);
  if ($51) {
   break;
  } else {
   $i$1$in = $i$1;
  }
 }
 $52 = (($str) + ($i$1$in)|0);
 HEAP8[$52>>0] = 0;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _interpret_CSA_move($ptree,$pmove,$str) {
 $ptree = $ptree|0;
 $pmove = $pmove|0;
 $str = $str|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0$lcssa$i = 0, $i$04$i = 0, $ifrom$0 = 0, $ipiece$0 = 0;
 var $ipiece$1 = 0, $ispos = 0, $ispos1 = 0, $move$0 = 0, $move$1 = 0, $neg = 0, $neg2 = 0, $or$cond = 0, $or$cond3 = 0, $p$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$str>>0]|0;
 $1 = $0 << 24 >> 24;
 $2 = (($str) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (($str) + 2|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($str) + 3|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = (57 - ($7))|0;
 $12 = ($10*9)|0;
 $13 = (($11) + -441)|0;
 $14 = (($13) + ($12))|0;
 $15 = (($str) + 4|0);
 $i$04$i = 0;
 while(1) {
  $18 = (920 + ($i$04$i<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_strcmp($19,$15)|0);
  $21 = ($20|0)==(0);
  $17 = (($i$04$i) + 1)|0;
  if ($21) {
   $i$0$lcssa$i = $i$04$i;
   break;
  }
  $16 = ($17|0)<(16);
  if ($16) {
   $i$04$i = $17;
  } else {
   $i$0$lcssa$i = $17;
   break;
  }
 }
 if (!((($i$0$lcssa$i|0) == 0) | (($i$0$lcssa$i|0) == 13) | (($i$0$lcssa$i|0) == 16))) {
  $22 = ($i$0$lcssa$i|0)<(0);
  if (!($22)) {
   $24 = ($0<<24>>24)==(48);
   $25 = ($3<<24>>24)==(48);
   $or$cond = $24 & $25;
   if ($or$cond) {
    $26 = $i$0$lcssa$i << 7;
    $27 = (($26) + 10240)|0;
    $28 = $27 | $14;
    $ifrom$0 = 81;$ipiece$1 = $i$0$lcssa$i;$move$1 = $28;
   } else {
    $29 = (57 - ($1))|0;
    $30 = ($4*9)|0;
    $31 = (($29) + -441)|0;
    $32 = (($31) + ($30))|0;
    $33 = ((($ptree) + ($32)|0) + 512|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34 << 24 >> 24;
    $ispos = ($34<<24>>24)>(-1);
    $neg = (0 - ($35))|0;
    $36 = $ispos ? $35 : $neg;
    $37 = (($36) + 8)|0;
    $38 = ($37|0)==($i$0$lcssa$i|0);
    $39 = (($i$0$lcssa$i) + -8)|0;
    $ipiece$0 = $38 ? $39 : $i$0$lcssa$i;
    $move$0 = $38 ? 16384 : 0;
    $40 = $32 << 7;
    $41 = $14 | $40;
    $42 = ((($ptree) + ($14)|0) + 512|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43 << 24 >> 24;
    $ispos1 = ($43<<24>>24)>(-1);
    $neg2 = (0 - ($44))|0;
    $45 = $ispos1 ? $44 : $neg2;
    $46 = $45 << 19;
    $47 = $41 | $46;
    $48 = $ipiece$0 << 15;
    $49 = $47 | $move$0;
    $50 = $49 | $48;
    $ifrom$0 = $32;$ipiece$1 = $ipiece$0;$move$1 = $50;
   }
   HEAP32[$pmove>>2] = 0;
   $51 = (($ptree) + 76980|0);
   $52 = HEAP32[34184024>>2]|0;
   $53 = ($52|0)==(0);
   if ($53) {
    $55 = (_b_gen_captures($ptree,$51)|0);
    $58 = $55;
   } else {
    $54 = (_w_gen_captures($ptree,$51)|0);
    $58 = $54;
   }
   $56 = HEAP32[34184024>>2]|0;
   $57 = ($56|0)==(0);
   if ($57) {
    $60 = (_b_gen_nocaptures($ptree,$58)|0);
    $63 = $60;
   } else {
    $59 = (_w_gen_nocaptures($ptree,$58)|0);
    $63 = $59;
   }
   $61 = HEAP32[34184024>>2]|0;
   $62 = ($61|0)==(0);
   if ($62) {
    $65 = (_b_gen_cap_nopro_ex2($ptree,$63)|0);
    $68 = $65;
   } else {
    $64 = (_w_gen_cap_nopro_ex2($ptree,$63)|0);
    $68 = $64;
   }
   $66 = HEAP32[34184024>>2]|0;
   $67 = ($66|0)==(0);
   if ($67) {
    $70 = (_b_gen_nocap_nopro_ex2($ptree,$68)|0);
    $73 = $70;
   } else {
    $69 = (_w_gen_nocap_nopro_ex2($ptree,$68)|0);
    $73 = $69;
   }
   $71 = HEAP32[34184024>>2]|0;
   $72 = ($71|0)==(0);
   if ($72) {
    $75 = (_b_gen_drop($ptree,$73)|0);
    $77 = $75;
   } else {
    $74 = (_w_gen_drop($ptree,$73)|0);
    $77 = $74;
   }
   $76 = ($51>>>0)<($77>>>0);
   L32: do {
    if ($76) {
     $p$04 = $51;
     while(1) {
      $80 = HEAP32[$p$04>>2]|0;
      $81 = ($80|0)==($move$1|0);
      $79 = (($p$04) + 4|0);
      if ($81) {
       break;
      }
      $78 = ($79>>>0)<($77>>>0);
      if ($78) {
       $p$04 = $79;
      } else {
       label = 29;
       break L32;
      }
     }
     HEAP32[$pmove>>2] = $move$1;
     $83 = $move$1;
    } else {
     label = 29;
    }
   } while(0);
   if ((label|0) == 29) {
    $$pr = HEAP32[$pmove>>2]|0;
    $83 = $$pr;
   }
   $82 = ($83|0)==(0);
   if (!($82)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $84 = HEAP32[432>>2]|0;
   HEAP32[220526664>>2] = $84;
   $85 = ($ipiece$1|0)==(1);
   $86 = ($ifrom$0|0)==(81);
   $or$cond3 = $85 & $86;
   if (!($or$cond3)) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $87 = ((($ptree) + ($14)|0) + 512|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = ($88<<24>>24)==(0);
   if (!($89)) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $90 = HEAP32[34184024>>2]|0;
   $91 = ($90|0)==(0);
   if ($91) {
    $96 = (($ptree) + 500|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = $97 & 31;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    $117 = (($ptree) + 164|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (($ptree) + 168|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = $120 | $118;
    $122 = (($ptree) + 172|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = $121 | $123;
    $125 = 67240192 >>> $11;
    $126 = $124 & $125;
    $127 = ($126|0)==(0);
    if (!($127)) {
     $128 = HEAP32[456>>2]|0;
     HEAP32[220526664>>2] = $128;
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    $129 = (($14) + -9)|0;
    $130 = ((($ptree) + ($129)|0) + 512|0);
    $131 = HEAP8[$130>>0]|0;
    $132 = ($131<<24>>24)==(-8);
    if (!($132)) {
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    $133 = HEAP32[488>>2]|0;
    HEAP32[220526664>>2] = $133;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   } else {
    $92 = (($ptree) + 504|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = $93 & 31;
    $95 = ($94|0)==(0);
    if ($95) {
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    $100 = (($ptree) + 176|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (($ptree) + 180|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = $103 | $101;
    $105 = (($ptree) + 184|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $104 | $106;
    $108 = 67240192 >>> $11;
    $109 = $107 & $108;
    $110 = ($109|0)==(0);
    if (!($110)) {
     $111 = HEAP32[456>>2]|0;
     HEAP32[220526664>>2] = $111;
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    $112 = (($14) + 9)|0;
    $113 = ((($ptree) + ($112)|0) + 512|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = ($114<<24>>24)==(8);
    if (!($115)) {
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    $116 = HEAP32[488>>2]|0;
    HEAP32[220526664>>2] = $116;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $23 = HEAP32[432>>2]|0;
 HEAP32[220526664>>2] = $23;
 $$0 = -2;
 STACKTOP = sp;return ($$0|0);
}
function _read_board_rep1($str_line,$pmin_posi) {
 $str_line = $str_line|0;
 $pmin_posi = $pmin_posi|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $board = 0, $i$0$lcssa$i = 0, $i$04$i = 0, $i$1$i = 0, $ispos = 0, $isquare$05 = 0, $neg = 0, $or$cond = 0;
 var $or$cond4 = 0, $p$06 = 0, $str_piece = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str_piece = sp + 81|0;
 $board = sp;
 dest=$board+0|0; src=((1424 + 9|0))+0|0; stop=dest+81|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $0 = (($str_line) + 2|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $isquare$05 = 0;
  } else {
   $3 = (($str_piece) + 1|0);
   $4 = (($str_piece) + 2|0);
   $p$06 = $0;
   while(1) {
    $5 = (($p$06) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     label = 6;
     break;
    }
    $8 = (($p$06) + 2|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     label = 6;
     break;
    }
    $11 = (($p$06) + 3|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = ($12<<24>>24)==(0);
    if ($13) {
     label = 6;
     break;
    }
    HEAP8[$str_piece>>0] = $9;
    $15 = HEAP8[$11>>0]|0;
    HEAP8[$3>>0] = $15;
    HEAP8[$4>>0] = 0;
    $i$04$i = 0;
    while(1) {
     $18 = (920 + ($i$04$i<<2)|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (_strcmp($19,$str_piece)|0);
     $21 = ($20|0)==(0);
     $17 = (($i$04$i) + 1)|0;
     if ($21) {
      $i$0$lcssa$i = $i$04$i;
      break;
     }
     $16 = ($17|0)<(16);
     if ($16) {
      $i$04$i = $17;
     } else {
      $i$0$lcssa$i = $17;
      break;
     }
    }
    if ((($i$0$lcssa$i|0) == 0) | (($i$0$lcssa$i|0) == 13) | (($i$0$lcssa$i|0) == 16)) {
     $i$1$i = -2;
    } else {
     $i$1$i = $i$0$lcssa$i;
    }
    $22 = HEAP8[$p$06>>0]|0;
    $23 = $22 << 24 >> 24;
    $24 = HEAP8[$5>>0]|0;
    $25 = $24 << 24 >> 24;
    $26 = (57 - ($23))|0;
    $27 = (($25) + -49)|0;
    $28 = ($i$1$i|0)==(-2);
    $29 = ($26>>>0)>(8);
    $or$cond = $28 | $29;
    $30 = ($27>>>0)>(8);
    $or$cond4 = $or$cond | $30;
    if ($or$cond4) {
     label = 14;
     break;
    }
    $31 = ($27*9)|0;
    $32 = (($31) + ($26))|0;
    $33 = (($board) + ($32)|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34 << 24 >> 24;
    $ispos = ($34<<24>>24)>(-1);
    $neg = (0 - ($35))|0;
    $36 = $ispos ? $35 : $neg;
    $37 = ($36|0)==($i$1$i|0);
    if (!($37)) {
     label = 14;
     break;
    }
    HEAP8[$33>>0] = 0;
    $39 = (($p$06) + 4|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = ($40<<24>>24)==(0);
    if ($41) {
     $isquare$05 = 0;
     break L1;
    } else {
     $p$06 = $39;
    }
   }
   if ((label|0) == 6) {
    $14 = HEAP32[408>>2]|0;
    HEAP32[220526664>>2] = $14;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 14) {
    $38 = HEAP32[408>>2]|0;
    HEAP32[220526664>>2] = $38;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 while(1) {
  $42 = (($board) + ($isquare$05)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = ($43<<24>>24)==(0);
  if (!($44)) {
   $45 = ((($pmin_posi) + ($isquare$05)|0) + 9|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = ($46<<24>>24)==(0);
   if (!($47)) {
    break;
   }
   HEAP8[$45>>0] = $43;
  }
  $49 = (($isquare$05) + 1)|0;
  $50 = ($49|0)<(81);
  if ($50) {
   $isquare$05 = $49;
  } else {
   $$0 = 1;
   label = 21;
   break;
  }
 }
 if ((label|0) == 21) {
  STACKTOP = sp;return ($$0|0);
 }
 $48 = HEAP32[408>>2]|0;
 HEAP32[220526664>>2] = $48;
 $$0 = -2;
 STACKTOP = sp;return ($$0|0);
}
function _is_move_valid($__ptree__,$move,$turn) {
 $__ptree__ = $__ptree__|0;
 $move = $move|0;
 $turn = $turn|0;
 var $$0 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $move >>> 7;
 $1 = $0 & 127;
 $2 = $move & 127;
 $3 = ($1>>>0)<(81);
 L1: do {
  if ($3) {
   $4 = $move >>> 15;
   $5 = $4 & 15;
   $6 = ($turn|0)==(0);
   $7 = ((($__ptree__) + ($1)|0) + 512|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   if ($6) {
    $18 = ($9|0)==($5|0);
    if (!($18)) {
     $$0 = 0;
     break;
    }
    $19 = ((($__ptree__) + ($2)|0) + 512|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20 << 24 >> 24;
    $22 = $move >>> 19;
    $23 = $22 & 15;
    $24 = (0 - ($23))|0;
    $25 = ($21|0)==($24|0);
    if (!($25)) {
     $$0 = 0;
     break;
    }
   } else {
    $10 = (0 - ($5))|0;
    $11 = ($9|0)==($10|0);
    if (!($11)) {
     $$0 = 0;
     break;
    }
    $12 = ((($__ptree__) + ($2)|0) + 512|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = $move >>> 19;
    $16 = $15 & 15;
    $17 = ($14|0)==($16|0);
    if (!($17)) {
     $$0 = 0;
     break;
    }
   }
   switch ($5|0) {
   case 0:  {
    $$0 = 0;
    break L1;
    break;
   }
   case 15: case 7: case 14: case 6: case 2:  {
    $26 = (($__ptree__) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($__ptree__) + 20|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = $29 | $27;
    $31 = (($__ptree__) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($__ptree__) + 24|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $34 | $32;
    $36 = (($__ptree__) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($__ptree__) + 28|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $39 | $37;
    $41 = ((34077568 + (($1*972)|0)|0) + (($2*12)|0)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $42 & $30;
    $44 = (((34077568 + (($1*972)|0)|0) + (($2*12)|0)|0) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = $45 & $35;
    $47 = (((34077568 + (($1*972)|0)|0) + (($2*12)|0)|0) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = $48 & $40;
    $50 = $46 | $43;
    $51 = $50 | $49;
    $52 = ($51|0)==(0);
    if (!($52)) {
     $$0 = 0;
     break L1;
    }
    break;
   }
   default: {
   }
   }
   $$0 = 1;
  } else {
   $53 = ((($__ptree__) + ($2)|0) + 512|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = ($54<<24>>24)==(0);
   if ($55) {
    $56 = ($turn|0)!=(0);
    $57 = (($__ptree__) + 504|0);
    $58 = (($__ptree__) + 500|0);
    $$in = $56 ? $57 : $58;
    $59 = HEAP32[$$in>>2]|0;
    switch ($1|0) {
    case 84:  {
     $106 = $59 & 14336;
     $107 = ($106|0)==(0);
     if (!($107)) {
      $$0 = 1;
      break L1;
     }
     break;
    }
    case 85:  {
     $108 = $59 & 114688;
     $109 = ($108|0)==(0);
     if (!($109)) {
      $$0 = 1;
      break L1;
     }
     break;
    }
    case 86:  {
     $110 = $59 & 393216;
     $111 = ($110|0)==(0);
     if (!($111)) {
      $$0 = 1;
      break L1;
     }
     break;
    }
    case 82:  {
     $102 = $59 & 224;
     $103 = ($102|0)==(0);
     if (!($103)) {
      $$0 = 1;
      break L1;
     }
     break;
    }
    case 83:  {
     $104 = $59 & 1792;
     $105 = ($104|0)==(0);
     if (!($105)) {
      $$0 = 1;
      break L1;
     }
     break;
    }
    case 81:  {
     $60 = $59 & 31;
     $61 = ($60|0)==(0);
     if ($61) {
      $$0 = 0;
      break L1;
     }
     if ($56) {
      $62 = (($__ptree__) + 176|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = (($__ptree__) + 180|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = $65 | $63;
      $67 = (($__ptree__) + 184|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = $66 | $68;
      $70 = (1248 + ($2)|0);
      $71 = HEAP8[$70>>0]|0;
      $72 = $71&255;
      $73 = 67240192 >>> $72;
      $74 = $73 & $69;
      $75 = ($74|0)==(0);
      if (!($75)) {
       $$0 = 0;
       break L1;
      }
      $76 = (($2) + 9)|0;
      $77 = ((($__ptree__) + ($76)|0) + 512|0);
      $78 = HEAP8[$77>>0]|0;
      $79 = ($78<<24>>24)==(8);
      if ($79) {
       $80 = (_is_mate_w_pawn_drop($__ptree__,$2)|0);
       $81 = ($80|0)==(0);
       if (!($81)) {
        $$0 = 0;
        break L1;
       }
      }
     } else {
      $82 = (($__ptree__) + 164|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = (($__ptree__) + 168|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = $85 | $83;
      $87 = (($__ptree__) + 172|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = $86 | $88;
      $90 = (1248 + ($2)|0);
      $91 = HEAP8[$90>>0]|0;
      $92 = $91&255;
      $93 = 67240192 >>> $92;
      $94 = $93 & $89;
      $95 = ($94|0)==(0);
      if (!($95)) {
       $$0 = 0;
       break L1;
      }
      $96 = (($2) + -9)|0;
      $97 = ((($__ptree__) + ($96)|0) + 512|0);
      $98 = HEAP8[$97>>0]|0;
      $99 = ($98<<24>>24)==(-8);
      if ($99) {
       $100 = (_is_mate_b_pawn_drop($__ptree__,$2)|0);
       $101 = ($100|0)==(0);
       if (!($101)) {
        $$0 = 0;
        break L1;
       }
      }
     }
     $$0 = 1;
     break L1;
     break;
    }
    default: {
     $112 = $59 & 1572864;
     $113 = ($112|0)==(0);
     if (!($113)) {
      $$0 = 1;
      break L1;
     }
    }
    }
    $$0 = 0;
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _exam_tree($ptree) {
 $ptree = $ptree|0;
 var $$0 = 0, $$bcounter$0$1 = 0, $$bcounter$0$2 = 0, $$bcounter$0$3 = 0, $$bcounter$0$4 = 0, $$bcounter$0$5 = 0, $$bcounter$0$6 = 0, $$bcounter$0$7 = 0, $$bcounter$0$8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $ifile$013 = 0, $ispos = 0, $isquare$023 = 0, $isquare$17 = 0, $isquare$25 = 0, $isquare$33 = 0, $isquare$41 = 0, $nbishop$019 = 0, $nbishop$1 = 0, $nbking$022 = 0, $nbking$1 = 0, $neg = 0, $ngold$018 = 0, $ngold$1 = 0;
 var $nknight$016 = 0, $nknight$1 = 0, $nlance$015 = 0, $nlance$1 = 0, $npawn$014 = 0, $npawn$1 = 0, $nrook$020 = 0, $nrook$1 = 0, $nsilver$017 = 0, $nsilver$1 = 0, $nwking$021 = 0, $nwking$1 = 0, $or$cond = 0, $wcounter$1$1 = 0, $wcounter$1$2 = 0, $wcounter$1$3 = 0, $wcounter$1$4 = 0, $wcounter$1$5 = 0, $wcounter$1$6 = 0, $wcounter$1$7 = 0;
 var $wcounter$1$8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ptree) + 500|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 31;
 $3 = (($ptree) + 504|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 31;
 $6 = (($5) + ($2))|0;
 $7 = $1 >>> 5;
 $8 = $7 & 7;
 $9 = $4 >>> 5;
 $10 = $9 & 7;
 $11 = (($10) + ($8))|0;
 $12 = $1 >>> 8;
 $13 = $12 & 7;
 $14 = $4 >>> 8;
 $15 = $14 & 7;
 $16 = (($15) + ($13))|0;
 $17 = $1 >>> 11;
 $18 = $17 & 7;
 $19 = $4 >>> 11;
 $20 = $19 & 7;
 $21 = (($20) + ($18))|0;
 $22 = $1 >>> 14;
 $23 = $22 & 7;
 $24 = $4 >>> 14;
 $25 = $24 & 7;
 $26 = (($25) + ($23))|0;
 $27 = $1 >>> 17;
 $28 = $27 & 3;
 $29 = $4 >>> 17;
 $30 = $29 & 3;
 $31 = (($30) + ($28))|0;
 $32 = $1 >>> 19;
 $33 = $4 >>> 19;
 $34 = (($33) + ($32))|0;
 $isquare$023 = 0;$nbishop$019 = $31;$nbking$022 = 0;$ngold$018 = $26;$nknight$016 = $16;$nlance$015 = $11;$npawn$014 = $6;$nrook$020 = $34;$nsilver$017 = $21;$nwking$021 = 0;
 while(1) {
  $35 = ((($ptree) + ($isquare$023)|0) + 512|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36 << 24 >> 24;
  $ispos = ($36<<24>>24)>(-1);
  $neg = (0 - ($37))|0;
  $38 = $ispos ? $37 : $neg;
  L3: do {
   switch ($38|0) {
   case 5:  {
    $43 = (($ngold$018) + 1)|0;
    $nbishop$1 = $nbishop$019;$nbking$1 = $nbking$022;$ngold$1 = $43;$nknight$1 = $nknight$016;$nlance$1 = $nlance$015;$npawn$1 = $npawn$014;$nrook$1 = $nrook$020;$nsilver$1 = $nsilver$017;$nwking$1 = $nwking$021;
    break;
   }
   case 12: case 4:  {
    $42 = (($nsilver$017) + 1)|0;
    $nbishop$1 = $nbishop$019;$nbking$1 = $nbking$022;$ngold$1 = $ngold$018;$nknight$1 = $nknight$016;$nlance$1 = $nlance$015;$npawn$1 = $npawn$014;$nrook$1 = $nrook$020;$nsilver$1 = $42;$nwking$1 = $nwking$021;
    break;
   }
   case 15: case 7:  {
    $45 = (($nrook$020) + 1)|0;
    $nbishop$1 = $nbishop$019;$nbking$1 = $nbking$022;$ngold$1 = $ngold$018;$nknight$1 = $nknight$016;$nlance$1 = $nlance$015;$npawn$1 = $npawn$014;$nrook$1 = $45;$nsilver$1 = $nsilver$017;$nwking$1 = $nwking$021;
    break;
   }
   case 11: case 3:  {
    $41 = (($nknight$016) + 1)|0;
    $nbishop$1 = $nbishop$019;$nbking$1 = $nbking$022;$ngold$1 = $ngold$018;$nknight$1 = $41;$nlance$1 = $nlance$015;$npawn$1 = $npawn$014;$nrook$1 = $nrook$020;$nsilver$1 = $nsilver$017;$nwking$1 = $nwking$021;
    break;
   }
   case 8:  {
    $46 = ($36<<24>>24)==(8);
    if ($46) {
     $47 = (($nbking$022) + 1)|0;
     $nbishop$1 = $nbishop$019;$nbking$1 = $47;$ngold$1 = $ngold$018;$nknight$1 = $nknight$016;$nlance$1 = $nlance$015;$npawn$1 = $npawn$014;$nrook$1 = $nrook$020;$nsilver$1 = $nsilver$017;$nwking$1 = $nwking$021;
     break L3;
    } else {
     $48 = (($nwking$021) + 1)|0;
     $nbishop$1 = $nbishop$019;$nbking$1 = $nbking$022;$ngold$1 = $ngold$018;$nknight$1 = $nknight$016;$nlance$1 = $nlance$015;$npawn$1 = $npawn$014;$nrook$1 = $nrook$020;$nsilver$1 = $nsilver$017;$nwking$1 = $48;
     break L3;
    }
    break;
   }
   case 10: case 2:  {
    $40 = (($nlance$015) + 1)|0;
    $nbishop$1 = $nbishop$019;$nbking$1 = $nbking$022;$ngold$1 = $ngold$018;$nknight$1 = $nknight$016;$nlance$1 = $40;$npawn$1 = $npawn$014;$nrook$1 = $nrook$020;$nsilver$1 = $nsilver$017;$nwking$1 = $nwking$021;
    break;
   }
   case 14: case 6:  {
    $44 = (($nbishop$019) + 1)|0;
    $nbishop$1 = $44;$nbking$1 = $nbking$022;$ngold$1 = $ngold$018;$nknight$1 = $nknight$016;$nlance$1 = $nlance$015;$npawn$1 = $npawn$014;$nrook$1 = $nrook$020;$nsilver$1 = $nsilver$017;$nwking$1 = $nwking$021;
    break;
   }
   case 9: case 1:  {
    $39 = (($npawn$014) + 1)|0;
    $nbishop$1 = $nbishop$019;$nbking$1 = $nbking$022;$ngold$1 = $ngold$018;$nknight$1 = $nknight$016;$nlance$1 = $nlance$015;$npawn$1 = $39;$nrook$1 = $nrook$020;$nsilver$1 = $nsilver$017;$nwking$1 = $nwking$021;
    break;
   }
   default: {
    $nbishop$1 = $nbishop$019;$nbking$1 = $nbking$022;$ngold$1 = $ngold$018;$nknight$1 = $nknight$016;$nlance$1 = $nlance$015;$npawn$1 = $npawn$014;$nrook$1 = $nrook$020;$nsilver$1 = $nsilver$017;$nwking$1 = $nwking$021;
   }
   }
  } while(0);
  $49 = (($isquare$023) + 1)|0;
  $exitcond = ($49|0)==(81);
  if ($exitcond) {
   break;
  } else {
   $isquare$023 = $49;$nbishop$019 = $nbishop$1;$nbking$022 = $nbking$1;$ngold$018 = $ngold$1;$nknight$016 = $nknight$1;$nlance$015 = $nlance$1;$npawn$014 = $npawn$1;$nrook$020 = $nrook$1;$nsilver$017 = $nsilver$1;$nwking$021 = $nwking$1;
  }
 }
 $50 = ($npawn$1|0)>(18);
 if ($50) {
  HEAP32[220526664>>2] = 221114096;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $51 = ($nlance$1|0)>(4);
 if ($51) {
  HEAP32[220526664>>2] = 221114112;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $52 = ($nknight$1|0)>(4);
 if ($52) {
  HEAP32[220526664>>2] = 221114128;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = ($nsilver$1|0)>(4);
 if ($53) {
  HEAP32[220526664>>2] = 221114152;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $54 = ($ngold$1|0)>(4);
 if ($54) {
  HEAP32[220526664>>2] = 221114176;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $55 = ($nbishop$1|0)>(2);
 if ($55) {
  HEAP32[220526664>>2] = 221114192;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $56 = ($nrook$1|0)>(2);
 if ($56) {
  HEAP32[220526664>>2] = 221114216;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $57 = ($nbking$1|0)==(1);
 $58 = ($nwking$1|0)==(1);
 $or$cond = $57 & $58;
 if ($or$cond) {
  $ifile$013 = 0;
 } else {
  HEAP32[220526664>>2] = 221114232;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $61 = ((($ptree) + ($ifile$013)|0) + 512|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = ($62<<24>>24)==(1);
  $64 = $63&1;
  $65 = (($ifile$013) + 9)|0;
  $66 = ((($ptree) + ($65)|0) + 512|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = ($67<<24>>24)==(1);
  $69 = $68&1;
  $$bcounter$0$1 = (($69) + ($64))|0;
  $70 = (($ifile$013) + 18)|0;
  $71 = ((($ptree) + ($70)|0) + 512|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = ($72<<24>>24)==(1);
  $74 = $73&1;
  $$bcounter$0$2 = (($74) + ($$bcounter$0$1))|0;
  $75 = (($ifile$013) + 27)|0;
  $76 = ((($ptree) + ($75)|0) + 512|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = ($77<<24>>24)==(1);
  $79 = $78&1;
  $$bcounter$0$3 = (($79) + ($$bcounter$0$2))|0;
  $80 = (($ifile$013) + 36)|0;
  $81 = ((($ptree) + ($80)|0) + 512|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = ($82<<24>>24)==(1);
  $84 = $83&1;
  $$bcounter$0$4 = (($84) + ($$bcounter$0$3))|0;
  $85 = (($ifile$013) + 45)|0;
  $86 = ((($ptree) + ($85)|0) + 512|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = ($87<<24>>24)==(1);
  $89 = $88&1;
  $$bcounter$0$5 = (($89) + ($$bcounter$0$4))|0;
  $90 = (($ifile$013) + 54)|0;
  $91 = ((($ptree) + ($90)|0) + 512|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = ($92<<24>>24)==(1);
  $94 = $93&1;
  $$bcounter$0$6 = (($94) + ($$bcounter$0$5))|0;
  $95 = (($ifile$013) + 63)|0;
  $96 = ((($ptree) + ($95)|0) + 512|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = ($97<<24>>24)==(1);
  $99 = $98&1;
  $$bcounter$0$7 = (($99) + ($$bcounter$0$6))|0;
  $100 = (($ifile$013) + 72)|0;
  $101 = ((($ptree) + ($100)|0) + 512|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = ($102<<24>>24)==(1);
  $104 = $103&1;
  $$bcounter$0$8 = (($104) + ($$bcounter$0$7))|0;
  $105 = ($$bcounter$0$8|0)>(1);
  if ($105) {
   label = 32;
   break;
  }
  $106 = ($67<<24>>24)==(-1);
  $107 = ($62<<24>>24)==(-1);
  $108 = ($72<<24>>24)==(-1);
  $109 = $106&1;
  $110 = $107&1;
  $111 = ($77<<24>>24)==(-1);
  $112 = $108&1;
  $wcounter$1$1 = (($109) + ($110))|0;
  $113 = ($82<<24>>24)==(-1);
  $114 = $111&1;
  $wcounter$1$2 = (($112) + ($wcounter$1$1))|0;
  $115 = ($87<<24>>24)==(-1);
  $116 = $113&1;
  $wcounter$1$3 = (($114) + ($wcounter$1$2))|0;
  $117 = ($92<<24>>24)==(-1);
  $118 = $115&1;
  $wcounter$1$4 = (($116) + ($wcounter$1$3))|0;
  $119 = ($97<<24>>24)==(-1);
  $120 = $117&1;
  $wcounter$1$5 = (($118) + ($wcounter$1$4))|0;
  $121 = ($102<<24>>24)==(-1);
  $122 = $119&1;
  $wcounter$1$6 = (($120) + ($wcounter$1$5))|0;
  $123 = $121&1;
  $wcounter$1$7 = (($122) + ($wcounter$1$6))|0;
  $wcounter$1$8 = (($123) + ($wcounter$1$7))|0;
  $124 = ($wcounter$1$8|0)>(1);
  $60 = (($ifile$013) + 1)|0;
  if ($124) {
   label = 34;
   break;
  }
  $59 = ($60|0)<(9);
  if ($59) {
   $ifile$013 = $60;
  } else {
   $isquare$17 = 0;
   label = 35;
   break;
  }
 }
 if ((label|0) == 32) {
  HEAP32[220526664>>2] = 221114256;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 34) {
  HEAP32[220526664>>2] = 221114288;
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 35) {
  while(1) {
   label = 0;
   $125 = ((($ptree) + ($isquare$17)|0) + 512|0);
   $126 = HEAP8[$125>>0]|0;
   if ((($126<<24>>24) == 1)) {
    label = 36;
    break;
   } else if ((($126<<24>>24) == 2)) {
    label = 37;
    break;
   }
   $127 = (($isquare$17) + 1)|0;
   $128 = ($127|0)<(9);
   if ($128) {
    $isquare$17 = $127;
    label = 35;
   } else {
    $isquare$25 = 0;
    label = 40;
    break;
   }
  }
  if ((label|0) == 36) {
   HEAP32[220526664>>2] = 221114320;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 37) {
   HEAP32[220526664>>2] = 221114344;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 40) {
   while(1) {
    label = 0;
    $131 = ((($ptree) + ($isquare$25)|0) + 512|0);
    $132 = HEAP8[$131>>0]|0;
    $133 = ($132<<24>>24)==(3);
    $130 = (($isquare$25) + 1)|0;
    if ($133) {
     label = 41;
     break;
    }
    $129 = ($130|0)<(18);
    if ($129) {
     $isquare$25 = $130;
     label = 40;
    } else {
     $isquare$33 = 72;
     break;
    }
   }
   if ((label|0) == 41) {
    HEAP32[220526664>>2] = 221114368;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   while(1) {
    $134 = ((($ptree) + ($isquare$33)|0) + 512|0);
    $135 = HEAP8[$134>>0]|0;
    if ((($135<<24>>24) == -1)) {
     label = 43;
     break;
    } else if ((($135<<24>>24) == -2)) {
     label = 44;
     break;
    }
    $136 = (($isquare$33) + 1)|0;
    $137 = ($136|0)<(81);
    if ($137) {
     $isquare$33 = $136;
    } else {
     $isquare$41 = 63;
     label = 47;
     break;
    }
   }
   if ((label|0) == 43) {
    HEAP32[220526664>>2] = 221114400;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 44) {
    HEAP32[220526664>>2] = 221114424;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 47) {
    while(1) {
     label = 0;
     $140 = ((($ptree) + ($isquare$41)|0) + 512|0);
     $141 = HEAP8[$140>>0]|0;
     $142 = ($141<<24>>24)==(-3);
     $139 = (($isquare$41) + 1)|0;
     if ($142) {
      label = 48;
      break;
     }
     $138 = ($139|0)<(81);
     if ($138) {
      $isquare$41 = $139;
      label = 47;
     } else {
      break;
     }
    }
    if ((label|0) == 48) {
     HEAP32[220526664>>2] = 221114448;
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    $143 = HEAP32[34184024>>2]|0;
    $144 = ($143|0)==(1);
    if ($144) {
     $150 = (($ptree) + 593|0);
     $151 = HEAP8[$150>>0]|0;
     $152 = $151&255;
     $153 = (_is_black_attacked($ptree,$152)|0);
     $154 = ($153|0)==(0);
     if ($154) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
    } else {
     $145 = (($ptree) + 594|0);
     $146 = HEAP8[$145>>0]|0;
     $147 = $146&255;
     $148 = (_is_white_attacked($ptree,$147)|0);
     $149 = ($148|0)==(0);
     if ($149) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $155 = HEAP32[552>>2]|0;
    HEAP32[220526664>>2] = $155;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 return 0|0;
}
function _popu_count012($u0,$u1,$u2) {
 $u0 = $u0|0;
 $u1 = $u1|0;
 $u2 = $u2|0;
 var $$016 = 0, $$0210 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $counter$0$lcssa = 0, $counter$011 = 0;
 var $counter$1$lcssa = 0, $counter$17 = 0, $counter$2$lcssa = 0, $counter$24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($u0|0)==(0);
 if ($0) {
  $counter$0$lcssa = 0;
 } else {
  $$0210 = $u0;$counter$011 = 0;
  while(1) {
   $2 = (($counter$011) + 1)|0;
   $3 = (($$0210) + -1)|0;
   $4 = $3 & $$0210;
   $5 = ($4|0)==(0);
   if ($5) {
    $counter$0$lcssa = $2;
    break;
   } else {
    $$0210 = $4;$counter$011 = $2;
   }
  }
 }
 $1 = ($u1|0)==(0);
 if ($1) {
  $counter$1$lcssa = $counter$0$lcssa;
 } else {
  $$016 = $u1;$counter$17 = $counter$0$lcssa;
  while(1) {
   $7 = (($counter$17) + 1)|0;
   $8 = (($$016) + -1)|0;
   $9 = $8 & $$016;
   $10 = ($9|0)==(0);
   if ($10) {
    $counter$1$lcssa = $7;
    break;
   } else {
    $$016 = $9;$counter$17 = $7;
   }
  }
 }
 $6 = ($u2|0)==(0);
 if ($6) {
  $counter$2$lcssa = $counter$1$lcssa;
  STACKTOP = sp;return ($counter$2$lcssa|0);
 } else {
  $$03 = $u2;$counter$24 = $counter$1$lcssa;
 }
 while(1) {
  $11 = (($counter$24) + 1)|0;
  $12 = (($$03) + -1)|0;
  $13 = $12 & $$03;
  $14 = ($13|0)==(0);
  if ($14) {
   $counter$2$lcssa = $11;
   break;
  } else {
   $$03 = $13;$counter$24 = $11;
  }
 }
 STACKTOP = sp;return ($counter$2$lcssa|0);
}
function _first_one012($u0,$u1,$u2) {
 $u0 = $u0|0;
 $u1 = $u1|0;
 $u2 = $u2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $u0 & 133955584;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = $u0 >>> 18;
  $3 = (221110320 + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = $u0 & 134217216;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = $u0 >>> 9;
  $9 = (221110320 + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = (($11) + 9)|0;
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = $u0 & 134217727;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = (221110320 + ($u0)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = (($17) + 18)|0;
  $$0 = $18;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = $u1 & 133955584;
 $20 = ($19|0)==(0);
 if (!($20)) {
  $21 = $u1 >>> 18;
  $22 = (221110320 + ($21)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (($24) + 27)|0;
  $$0 = $25;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = $u1 & 134217216;
 $27 = ($26|0)==(0);
 if (!($27)) {
  $28 = $u1 >>> 9;
  $29 = (221110320 + ($28)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = (($31) + 36)|0;
  $$0 = $32;
  STACKTOP = sp;return ($$0|0);
 }
 $33 = $u1 & 134217727;
 $34 = ($33|0)==(0);
 if (!($34)) {
  $35 = (221110320 + ($u1)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = (($37) + 45)|0;
  $$0 = $38;
  STACKTOP = sp;return ($$0|0);
 }
 $39 = $u2 & 133955584;
 $40 = ($39|0)==(0);
 if (!($40)) {
  $41 = $u2 >>> 18;
  $42 = (221110320 + ($41)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = (($44) + 54)|0;
  $$0 = $45;
  STACKTOP = sp;return ($$0|0);
 }
 $46 = $u2 & 134217216;
 $47 = ($46|0)==(0);
 if ($47) {
  $53 = (221110320 + ($u2)|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = (($55) + 72)|0;
  $$0 = $56;
  STACKTOP = sp;return ($$0|0);
 } else {
  $48 = $u2 >>> 9;
  $49 = (221110320 + ($48)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = (($51) + 63)|0;
  $$0 = $52;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _last_one210($u2,$u1,$u0) {
 $u2 = $u2|0;
 $u1 = $u1|0;
 $u0 = $u0|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $u2 & 511;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = (221110832 + ($0)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = (($4) + 72)|0;
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = $u2 & 262143;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = $6 >>> 9;
  $9 = (221110832 + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = (($11) + 63)|0;
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = $u2 & 134217727;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = $u2 >>> 18;
  $16 = (221110832 + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = (($18) + 54)|0;
  $$0 = $19;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $u1 & 511;
 $21 = ($20|0)==(0);
 if (!($21)) {
  $22 = (221110832 + ($20)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (($24) + 45)|0;
  $$0 = $25;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = $u1 & 262143;
 $27 = ($26|0)==(0);
 if (!($27)) {
  $28 = $26 >>> 9;
  $29 = (221110832 + ($28)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = (($31) + 36)|0;
  $$0 = $32;
  STACKTOP = sp;return ($$0|0);
 }
 $33 = $u1 & 134217727;
 $34 = ($33|0)==(0);
 if (!($34)) {
  $35 = $u1 >>> 18;
  $36 = (221110832 + ($35)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = (($38) + 27)|0;
  $$0 = $39;
  STACKTOP = sp;return ($$0|0);
 }
 $40 = $u0 & 511;
 $41 = ($40|0)==(0);
 if (!($41)) {
  $42 = (221110832 + ($40)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = (($44) + 18)|0;
  $$0 = $45;
  STACKTOP = sp;return ($$0|0);
 }
 $46 = $u0 & 262143;
 $47 = ($46|0)==(0);
 if ($47) {
  $53 = $u0 >>> 18;
  $54 = (221110832 + ($53)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $$0 = $56;
  STACKTOP = sp;return ($$0|0);
 } else {
  $48 = $46 >>> 9;
  $49 = (221110832 + ($48)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = (($51) + 9)|0;
  $$0 = $52;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _first_one01($u0,$u1) {
 $u0 = $u0|0;
 $u1 = $u1|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $u0 & 133955584;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = $u0 >>> 18;
  $3 = (221110320 + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = $u0 & 134217216;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = $u0 >>> 9;
  $9 = (221110320 + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = (($11) + 9)|0;
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = $u0 & 134217727;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = (221110320 + ($u0)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = (($17) + 18)|0;
  $$0 = $18;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = $u1 & 133955584;
 $20 = ($19|0)==(0);
 if (!($20)) {
  $21 = $u1 >>> 18;
  $22 = (221110320 + ($21)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (($24) + 27)|0;
  $$0 = $25;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = $u1 & 134217216;
 $27 = ($26|0)==(0);
 if ($27) {
  $33 = (221110320 + ($u1)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = (($35) + 45)|0;
  $$0 = $36;
  STACKTOP = sp;return ($$0|0);
 } else {
  $28 = $u1 >>> 9;
  $29 = (221110320 + ($28)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = (($31) + 36)|0;
  $$0 = $32;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _first_one12($u1,$u2) {
 $u1 = $u1|0;
 $u2 = $u2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = $u1 & 133955584;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = $u1 >>> 18;
  $3 = (221110320 + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = (($5) + 27)|0;
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = $u1 & 134217216;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = $u1 >>> 9;
  $10 = (221110320 + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = (($12) + 36)|0;
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = $u1 & 134217727;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $16 = (221110320 + ($u1)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = (($18) + 45)|0;
  $$0 = $19;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $u2 & 133955584;
 $21 = ($20|0)==(0);
 if (!($21)) {
  $22 = $u2 >>> 18;
  $23 = (221110320 + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = (($25) + 54)|0;
  $$0 = $26;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = $u2 & 134217216;
 $28 = ($27|0)==(0);
 if ($28) {
  $34 = (221110320 + ($u2)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = (($36) + 72)|0;
  $$0 = $37;
  STACKTOP = sp;return ($$0|0);
 } else {
  $29 = $u2 >>> 9;
  $30 = (221110320 + ($29)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = (($32) + 63)|0;
  $$0 = $33;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _last_one01($u0,$u1) {
 $u0 = $u0|0;
 $u1 = $u1|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $u1 & 511;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = (221110832 + ($0)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = (($4) + 45)|0;
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = $u1 & 262143;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = $6 >>> 9;
  $9 = (221110832 + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = (($11) + 36)|0;
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = $u1 & 134217727;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = $u1 >>> 18;
  $16 = (221110832 + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = (($18) + 27)|0;
  $$0 = $19;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $u0 & 511;
 $21 = ($20|0)==(0);
 if (!($21)) {
  $22 = (221110832 + ($20)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (($24) + 18)|0;
  $$0 = $25;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = $u0 & 262143;
 $27 = ($26|0)==(0);
 if ($27) {
  $33 = $u0 >>> 18;
  $34 = (221110832 + ($33)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $$0 = $36;
  STACKTOP = sp;return ($$0|0);
 } else {
  $28 = $26 >>> 9;
  $29 = (221110832 + ($28)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = (($31) + 9)|0;
  $$0 = $32;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _last_one12($u1,$u2) {
 $u1 = $u1|0;
 $u2 = $u2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = $u2 & 511;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = (221110832 + ($0)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = (($4) + 72)|0;
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = $u2 & 262143;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = $6 >>> 9;
  $9 = (221110832 + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = (($11) + 63)|0;
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = $u2 & 134217727;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = $u2 >>> 18;
  $16 = (221110832 + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = (($18) + 54)|0;
  $$0 = $19;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $u1 & 511;
 $21 = ($20|0)==(0);
 if (!($21)) {
  $22 = (221110832 + ($20)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (($24) + 45)|0;
  $$0 = $25;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = $u1 & 262143;
 $27 = ($26|0)==(0);
 if ($27) {
  $33 = $u1 >>> 18;
  $34 = (221110832 + ($33)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = (($36) + 27)|0;
  $$0 = $37;
  STACKTOP = sp;return ($$0|0);
 } else {
  $28 = $26 >>> 9;
  $29 = (221110832 + ($28)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = (($31) + 36)|0;
  $$0 = $32;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _first_one1($u1) {
 $u1 = $u1|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = $u1 & 133955584;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = $u1 >>> 18;
  $3 = (221110320 + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = (($5) + 27)|0;
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = $u1 & 134217216;
 $8 = ($7|0)==(0);
 if ($8) {
  $14 = (221110320 + ($u1)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($16) + 45)|0;
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $u1 >>> 9;
  $10 = (221110320 + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = (($12) + 36)|0;
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _first_one2($u2) {
 $u2 = $u2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = $u2 & 133955584;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = $u2 >>> 18;
  $3 = (221110320 + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = (($5) + 54)|0;
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = $u2 & 134217216;
 $8 = ($7|0)==(0);
 if ($8) {
  $14 = (221110320 + ($u2)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($16) + 72)|0;
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $u2 >>> 9;
  $10 = (221110320 + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = (($12) + 63)|0;
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _last_one0($i) {
 $i = $i|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $i & 511;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = (221110832 + ($0)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = (($4) + 18)|0;
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = $i & 262143;
 $7 = ($6|0)==(0);
 if ($7) {
  $13 = $i >>> 18;
  $14 = (221110832 + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 } else {
  $8 = $6 >>> 9;
  $9 = (221110832 + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = (($11) + 9)|0;
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _last_one1($u1) {
 $u1 = $u1|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = $u1 & 511;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = (221110832 + ($0)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = (($4) + 45)|0;
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = $u1 & 262143;
 $7 = ($6|0)==(0);
 if ($7) {
  $13 = $u1 >>> 18;
  $14 = (221110832 + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($16) + 27)|0;
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 } else {
  $8 = $6 >>> 9;
  $9 = (221110832 + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = (($11) + 36)|0;
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _iterate($ptree) {
 $ptree = $ptree|0;
 var $$ = 0, $$$0$i = 0, $$$0$i18 = 0, $$$0$i21 = 0, $$$0$i24 = 0, $$$0$i30 = 0, $$$0$i33 = 0, $$$i = 0, $$$i22 = 0, $$$i28 = 0, $$$i31 = 0, $$0 = 0, $$0$i29 = 0, $$0$i32 = 0, $$2$i = 0, $$2$neg$i = 0, $$8 = 0, $$n10$0 = 0, $$n10$2 = 0, $$pr$pre = 0;
 var $$pr36 = 0, $$pr37 = 0, $$pre = 0, $$pre140 = 0, $$pre141 = 0, $$pre141$pre = 0, $$pre142 = 0, $$pre143 = 0, $$pre143$pre = 0, $$pre148 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0.0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0.0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0, $599 = 0.0, $6 = 0, $60 = 0, $600 = 0.0, $601 = 0, $602 = 0, $603 = 0.0, $604 = 0.0, $605 = 0.0, $606 = 0, $607 = 0.0, $608 = 0, $609 = 0.0, $61 = 0, $610 = 0.0;
 var $611 = 0, $612 = 0.0, $613 = 0.0, $614 = 0, $615 = 0.0, $616 = 0.0, $617 = 0, $618 = 0.0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0, $622 = 0.0, $623 = 0.0, $624 = 0.0, $625 = 0, $626 = 0.0, $627 = 0.0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0.0, $634 = 0.0, $635 = 0, $636 = 0, $637 = 0.0, $638 = 0.0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0.0, $689 = 0.0, $69 = 0, $690 = 0, $691 = 0, $692 = 0.0, $693 = 0.0, $694 = 0, $695 = 0.0, $696 = 0.0, $697 = 0.0, $698 = 0, $699 = 0.0, $7 = 0, $70 = 0, $700 = 0.0;
 var $701 = 0.0, $702 = 0, $703 = 0.0, $704 = 0.0, $705 = 0.0, $706 = 0, $707 = 0.0, $708 = 0.0, $709 = 0, $71 = 0, $710 = 0, $711 = 0.0, $712 = 0.0, $713 = 0, $714 = 0.0, $715 = 0.0, $716 = 0.0, $717 = 0, $718 = 0.0, $719 = 0.0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0.0, $752 = 0.0, $753 = 0, $754 = 0.0, $755 = 0.0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0.0, $763 = 0.0, $764 = 0.0, $765 = 0.0, $766 = 0, $767 = 0, $768 = 0, $769 = 0.0, $77 = 0, $770 = 0.0, $771 = 0, $772 = 0.0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cpu = 0, $cpu_start = 0, $dummy = 0, $elapsed = 0, $elapsed1 = 0, $elapsed11 = 0, $exitcond = 0, $exitcond110 = 0, $exitcond121 = 0, $exitcond138 = 0, $exitcond139 = 0, $i$0$i = 0;
 var $i$01$i = 0, $i$0107 = 0, $i$02$i = 0, $i2$062 = 0, $i7$0 = 0, $i7$0$pn$lcssa = 0, $i7$0$pn84 = 0, $i7$0$pn84$phi = 0, $i7$089 = 0, $i7$090 = 0, $i8$044 = 0, $i9$042 = 0, $ianser$01$i = 0, $ianser$01$i25 = 0, $iret$0 = 0, $ispos = 0, $ispos6 = 0, $j$0 = 0, $j$083 = 0, $j$085 = 0;
 var $k$094 = 0, $n10$0$lcssa = 0.0, $n10$043 = 0, $n10$2 = 0, $neg = 0, $neg7 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond10154 = 0, $or$cond14 = 0, $or$cond3 = 0, $or$cond5 = 0, $phitmp = 0.0, $phitmp109 = 0.0, $ply$0104 = 0, $ply$1$lcssa = 0, $ply$1102 = 0, $ply$251 = 0, $ply$3 = 0, $ply$3$in$ph = 0;
 var $ply$356 = 0, $ply$358 = 0, $right_answer_made$096 = 0, $right_answer_made$1 = 0, $right_answer_made$2 = 0, $right_answer_made$3 = 0, $right_answer_made$4 = 0, $root_move_swap = 0, $root_nfail_high$promoted = 0, $root_nfail_low$promoted = 0, $str$0$i = 0, $str$0$i34 = 0, $time_elapsed = 0, $tt$050 = 0, $tt$1$ph = 0, $tt$157 = 0, $u$0 = 0, $value$0$lcssa = 0, $value$0103 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer104 = 0, $vararg_buffer111 = 0, $vararg_buffer119 = 0, $vararg_buffer12 = 0, $vararg_buffer122 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer35 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer46 = 0, $vararg_buffer53 = 0;
 var $vararg_buffer58 = 0, $vararg_buffer62 = 0, $vararg_buffer67 = 0, $vararg_buffer69 = 0, $vararg_buffer74 = 0, $vararg_buffer79 = 0, $vararg_buffer8 = 0, $vararg_buffer85 = 0, $vararg_buffer90 = 0, $vararg_buffer98 = 0, $vararg_ptr101 = 0, $vararg_ptr102 = 0, $vararg_ptr103 = 0, $vararg_ptr107 = 0, $vararg_ptr108 = 0, $vararg_ptr109 = 0, $vararg_ptr110 = 0, $vararg_ptr114 = 0, $vararg_ptr115 = 0, $vararg_ptr116 = 0;
 var $vararg_ptr117 = 0, $vararg_ptr118 = 0, $vararg_ptr125 = 0, $vararg_ptr126 = 0, $vararg_ptr15 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr34 = 0, $vararg_ptr38 = 0, $vararg_ptr39 = 0, $vararg_ptr40 = 0, $vararg_ptr49 = 0, $vararg_ptr50 = 0, $vararg_ptr51 = 0, $vararg_ptr52 = 0, $vararg_ptr56 = 0, $vararg_ptr57 = 0, $vararg_ptr6 = 0, $vararg_ptr61 = 0, $vararg_ptr65 = 0;
 var $vararg_ptr66 = 0, $vararg_ptr7 = 0, $vararg_ptr72 = 0, $vararg_ptr73 = 0, $vararg_ptr77 = 0, $vararg_ptr78 = 0, $vararg_ptr82 = 0, $vararg_ptr83 = 0, $vararg_ptr84 = 0, $vararg_ptr88 = 0, $vararg_ptr89 = 0, $vararg_ptr93 = 0, $vararg_ptr94 = 0, $vararg_ptr95 = 0, $vararg_ptr96 = 0, $vararg_ptr97 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer122 = sp + 464|0;
 $vararg_buffer119 = sp + 408|0;
 $vararg_buffer111 = sp + 104|0;
 $vararg_buffer104 = sp + 248|0;
 $vararg_buffer98 = sp + 144|0;
 $vararg_buffer90 = sp + 16|0;
 $vararg_buffer85 = sp + 40|0;
 $vararg_buffer79 = sp + 280|0;
 $vararg_buffer74 = sp + 56|0;
 $vararg_buffer69 = sp + 72|0;
 $vararg_buffer67 = sp + 88|0;
 $vararg_buffer62 = sp + 336|0;
 $vararg_buffer58 = sp + 368|0;
 $vararg_buffer53 = sp + 392|0;
 $vararg_buffer46 = sp + 416|0;
 $vararg_buffer44 = sp + 456|0;
 $vararg_buffer41 = sp + 176|0;
 $vararg_buffer35 = sp + 184|0;
 $vararg_buffer31 = sp + 208|0;
 $vararg_buffer26 = sp + 216|0;
 $vararg_buffer24 = sp + 232|0;
 $vararg_buffer22 = sp + 240|0;
 $vararg_buffer20 = sp + 8|0;
 $vararg_buffer18 = sp + 312|0;
 $vararg_buffer16 = sp + 320|0;
 $vararg_buffer12 = sp;
 $vararg_buffer10 = sp + 328|0;
 $vararg_buffer8 = sp + 96|0;
 $vararg_buffer3 = sp + 352|0;
 $vararg_buffer1 = sp + 136|0;
 $vararg_buffer = sp + 384|0;
 $cpu_start = sp + 492|0;
 $elapsed = sp + 496|0;
 $dummy = sp + 504|0;
 $elapsed1 = sp + 508|0;
 $time_elapsed = sp + 512|0;
 $root_move_swap = sp + 440|0;
 $cpu = sp + 488|0;
 $elapsed11 = sp + 500|0;
 $0 = HEAP32[1520>>2]|0;
 $1 = ($0|0)!=(0|0);
 $2 = HEAP32[221099720>>2]|0;
 $3 = ($2|0)==(0);
 $or$cond = $1 & $3;
 L1: do {
  if ($or$cond) {
   $4 = (($ptree) + 572204|0);
   $5 = HEAP32[$4>>2]|0;
   $i$01$i = (($5) + -2)|0;
   $6 = ($i$01$i|0)>(-1);
   L3: do {
    if ($6) {
     $7 = $ptree;
     $8 = $7;
     $9 = HEAP32[$8>>2]|0;
     $10 = (($7) + 4)|0;
     $11 = $10;
     $12 = HEAP32[$11>>2]|0;
     $13 = (($ptree) + 500|0);
     $i$02$i = $i$01$i;
     while(1) {
      $14 = ((($ptree) + ($i$02$i<<3)|0) + 600|0);
      $15 = $14;
      $16 = $15;
      $17 = HEAP32[$16>>2]|0;
      $18 = (($15) + 4)|0;
      $19 = $18;
      $20 = HEAP32[$19>>2]|0;
      $21 = ($17|0)==($9|0);
      $22 = ($20|0)==($12|0);
      $23 = $21 & $22;
      if ($23) {
       $25 = ((($ptree) + ($i$02$i<<2)|0) + 75444|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = HEAP32[$13>>2]|0;
       $28 = ($26|0)==($27|0);
       if ($28) {
        break;
       }
      }
      $i$0$i = (($i$02$i) + -2)|0;
      $24 = ($i$0$i|0)>(-1);
      if ($24) {
       $i$02$i = $i$0$i;
      } else {
       break L3;
      }
     }
     _out(221115680,$vararg_buffer);
     break L1;
    }
   } while(0);
   $29 = (_book_probe($ptree)|0);
   $30 = ($29|0)<(0);
   if ($30) {
    $$0 = $29;
    STACKTOP = sp;return ($$0|0);
   }
   $31 = (_get_elapsed($elapsed)|0);
   $32 = ($31|0)<(0);
   if ($32) {
    $$0 = $31;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$elapsed>>2]|0;
   $34 = HEAP32[34181040>>2]|0;
   $35 = (($33) - ($34))|0;
   $36 = (_str_time_symple($35)|0);
   HEAP32[$vararg_buffer1>>2] = $36;
   _out(221114480,$vararg_buffer1);
   $37 = ($29|0)==(0);
   if (!($37)) {
    _pv_close($ptree,2,8);
    $38 = (($ptree) + 7780|0);
    _memcpy((33570872|0),($38|0),516)|0;
    HEAP32[34184072>>2] = 0;
    $39 = HEAP32[34180920>>2]|0;
    $40 = $39 & 32;
    $41 = ($40|0)==(0);
    if ($41) {
     $i$0107 = 0;
     while(1) {
      $42 = ((($ptree) + ($i$0107<<1)|0) + 538532|0);
      $43 = HEAP16[$42>>1]|0;
      $44 = ($43&65535) >>> 8;
      HEAP16[$42>>1] = $44;
      $45 = ((($ptree) + ($i$0107<<1)|0) + 505764|0);
      $46 = HEAP16[$45>>1]|0;
      $47 = ($46&65535) >>> 8;
      HEAP16[$45>>1] = $47;
      $48 = (($i$0107) + 1)|0;
      $exitcond139 = ($48|0)==(16384);
      if ($exitcond139) {
       break;
      } else {
       $i$0107 = $48;
      }
     }
    }
    $49 = HEAP32[221102520>>2]|0;
    $50 = ($49|0)==(-1);
    if ($50) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
    $51 = HEAP32[221102528>>2]|0;
    $52 = (($ptree) + 7784|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (_str_CSA_move($53)|0);
    $55 = HEAP32[221102536>>2]|0;
    $56 = ($55|0)==(2147483647);
    $57 = $56 ? 221114560 : 221114568;
    HEAP32[$vararg_buffer3>>2] = $51;
    $vararg_ptr6 = (($vararg_buffer3) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $54;
    $vararg_ptr7 = (($vararg_buffer3) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $57;
    (_sckt_out($49,221114520,$vararg_buffer3)|0);
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $58 = HEAP32[221111344>>2]|0;
 $59 = ($58|0)==(0);
 L28: do {
  if ($59) {
   $60 = (($ptree) + 572204|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)>(19);
   if ($62) {
    $63 = HEAP32[34184024>>2]|0;
    $64 = ($63|0)==(1);
    do {
     if ($64) {
      $65 = (($ptree) + 530|0);
      $66 = HEAP8[$65>>0]|0;
      $67 = ($66<<24>>24)==(-1);
      if (!($67)) {
       $68 = (($ptree) + 539|0);
       $69 = HEAP8[$68>>0]|0;
       $70 = ($69<<24>>24)==(-1);
       if (!($70)) {
        $71 = (($ptree) + 548|0);
        $72 = HEAP8[$71>>0]|0;
        $73 = ($72<<24>>24)==(-1);
        if (!($73)) {
         break L28;
        }
       }
      }
      $74 = (($ptree) + 531|0);
      $75 = HEAP8[$74>>0]|0;
      $76 = ($75<<24>>24)==(-1);
      if (!($76)) {
       break L28;
      }
      $77 = (($ptree) + 532|0);
      $78 = HEAP8[$77>>0]|0;
      $79 = ($78<<24>>24)==(-1);
      if (!($79)) {
       break L28;
      }
      $80 = (($ptree) + 533|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = ($81<<24>>24)==(-1);
      if (!($82)) {
       break L28;
      }
      $83 = (($ptree) + 534|0);
      $84 = HEAP8[$83>>0]|0;
      $85 = ($84<<24>>24)==(-1);
      if (!($85)) {
       break L28;
      }
      $86 = (($ptree) + 535|0);
      $87 = HEAP8[$86>>0]|0;
      $88 = ($87<<24>>24)==(-1);
      if (!($88)) {
       break L28;
      }
      $89 = (($ptree) + 536|0);
      $90 = HEAP8[$89>>0]|0;
      $91 = ($90<<24>>24)==(-1);
      if (!($91)) {
       break L28;
      }
      $92 = (($ptree) + 537|0);
      $93 = HEAP8[$92>>0]|0;
      $94 = ($93<<24>>24)==(-1);
      if (!($94)) {
       break L28;
      }
      $95 = (($ptree) + 538|0);
      $96 = HEAP8[$95>>0]|0;
      $97 = ($96<<24>>24)==(-1);
      if (!($97)) {
       $98 = (($ptree) + 547|0);
       $99 = HEAP8[$98>>0]|0;
       $100 = ($99<<24>>24)==(-1);
       if (!($100)) {
        $101 = (($ptree) + 556|0);
        $102 = HEAP8[$101>>0]|0;
        $103 = ($102<<24>>24)==(-1);
        if (!($103)) {
         break L28;
        }
       }
      }
      _out(221114576,$vararg_buffer8);
      HEAP32[221111344>>2] = 1;
      _ehash_clear();
      $104 = (_ini_trans_table()|0);
      $105 = ($104|0)<(0);
      if ($105) {
       $$0 = -1;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$pr$pre = HEAP32[34184024>>2]|0;
       $107 = $$pr$pre;
       break;
      }
     } else {
      $107 = $63;
     }
    } while(0);
    $106 = ($107|0)==(0);
    if ($106) {
     $108 = (($ptree) + 566|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = ($109<<24>>24)==(1);
     if (!($110)) {
      $111 = (($ptree) + 557|0);
      $112 = HEAP8[$111>>0]|0;
      $113 = ($112<<24>>24)==(1);
      if (!($113)) {
       $114 = (($ptree) + 548|0);
       $115 = HEAP8[$114>>0]|0;
       $116 = ($115<<24>>24)==(1);
       if (!($116)) {
        break;
       }
      }
     }
     $117 = (($ptree) + 567|0);
     $118 = HEAP8[$117>>0]|0;
     $119 = ($118<<24>>24)==(1);
     if ($119) {
      $120 = (($ptree) + 568|0);
      $121 = HEAP8[$120>>0]|0;
      $122 = ($121<<24>>24)==(1);
      if ($122) {
       $123 = (($ptree) + 569|0);
       $124 = HEAP8[$123>>0]|0;
       $125 = ($124<<24>>24)==(1);
       if ($125) {
        $126 = (($ptree) + 570|0);
        $127 = HEAP8[$126>>0]|0;
        $128 = ($127<<24>>24)==(1);
        if ($128) {
         $129 = (($ptree) + 571|0);
         $130 = HEAP8[$129>>0]|0;
         $131 = ($130<<24>>24)==(1);
         if ($131) {
          $132 = (($ptree) + 572|0);
          $133 = HEAP8[$132>>0]|0;
          $134 = ($133<<24>>24)==(1);
          if ($134) {
           $135 = (($ptree) + 573|0);
           $136 = HEAP8[$135>>0]|0;
           $137 = ($136<<24>>24)==(1);
           if ($137) {
            $138 = (($ptree) + 574|0);
            $139 = HEAP8[$138>>0]|0;
            $140 = ($139<<24>>24)==(1);
            if (!($140)) {
             $141 = (($ptree) + 565|0);
             $142 = HEAP8[$141>>0]|0;
             $143 = ($142<<24>>24)==(1);
             if (!($143)) {
              $144 = (($ptree) + 556|0);
              $145 = HEAP8[$144>>0]|0;
              $146 = ($145<<24>>24)==(1);
              if (!($146)) {
               break;
              }
             }
            }
            _out(221114616,$vararg_buffer10);
            HEAP32[221111344>>2] = 2;
            _ehash_clear();
            $147 = (_ini_trans_table()|0);
            $148 = ($147|0)<(0);
            if ($148) {
             $$0 = -1;
             STACKTOP = sp;return ($$0|0);
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $149 = (_get_cputime($cpu_start)|0);
 $150 = ($149|0)<(0);
 if ($150) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $151 = (($ptree) + 2648|0);
 $152 = $151;
 $153 = $152;
 HEAP32[$153>>2] = 0;
 $154 = (($152) + 4)|0;
 $155 = $154;
 HEAP32[$155>>2] = 0;
 $156 = (($ptree) + 75360|0);
 $157 = (($ptree) + 75364|0);
 $158 = (($ptree) + 75368|0);
 $159 = (($ptree) + 75372|0);
 $160 = (($ptree) + 75376|0);
 $161 = (($ptree) + 75388|0);
 $162 = (($ptree) + 75392|0);
 $163 = (($ptree) + 75396|0);
 $164 = (($ptree) + 75400|0);
 $165 = (($ptree) + 75380|0);
 $166 = (($ptree) + 75384|0);
 $167 = (($ptree) + 75404|0);
 $168 = (($ptree) + 75408|0);
 $169 = (($ptree) + 75412|0);
 $170 = (($ptree) + 75416|0);
 $171 = (($ptree) + 75420|0);
 $172 = (($ptree) + 75424|0);
 $173 = (($ptree) + 75428|0);
 $174 = (($ptree) + 75432|0);
 $175 = (($ptree) + 75436|0);
 $176 = (($ptree) + 75440|0);
 $177 = (($ptree) + 142516|0);
 HEAP32[$177>>2] = 0;
 $178 = (($ptree) + 571556|0);
 dest=$156+0|0; stop=dest+84|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$178>>2] = 2147483647;
 $179 = (($ptree) + 571560|0);
 HEAP32[$179>>2] = 2147483647;
 $180 = (($ptree) + 7264|0);
 HEAP32[$180>>2] = 0;
 $181 = (($ptree) + 7268|0);
 HEAP32[$181>>2] = 0;
 $182 = (($ptree) + 7778|0);
 HEAP8[$182>>0] = 0;
 $183 = (($ptree) + 7777|0);
 HEAP8[$183>>0] = 0;
 HEAP32[34184080>>2] = 0;
 HEAP32[34181120>>2] = 0;
 HEAP32[34181096>>2] = 0;
 HEAP32[34183984>>2] = 0;
 HEAP32[34183992>>2] = 0;
 HEAP32[34184016>>2] = -32600;
 HEAP32[34184000>>2] = -32600;
 HEAP32[34184008>>2] = 32600;
 HEAP32[34184032>>2] = 0;
 HEAP32[((33559672 + 12|0))>>2] = 2;
 HEAP32[34180960>>2] = 0;
 $184 = HEAP32[34181040>>2]|0;
 HEAP32[34181032>>2] = $184;
 $185 = HEAP32[34180920>>2]|0;
 $186 = $185 & -5641;
 HEAP32[34180920>>2] = $186;
 $ply$0104 = 0;
 while(1) {
  $187 = ((($ptree) + ($ply$0104<<4)|0) + 73324|0);
  HEAP32[$187>>2] = 0;
  $188 = ((($ptree) + ($ply$0104<<4)|0) + 73320|0);
  HEAP32[$188>>2] = 0;
  $189 = ((($ptree) + ($ply$0104<<3)|0) + 143032|0);
  HEAP32[$189>>2] = 0;
  $190 = ((($ptree) + ($ply$0104<<3)|0) + 143028|0);
  HEAP32[$190>>2] = 0;
  $191 = (($ply$0104) + 1)|0;
  $exitcond138 = ($191|0)==(128);
  if ($exitcond138) {
   break;
  } else {
   $ply$0104 = $191;
  }
 }
 $192 = HEAP32[34180944>>2]|0;
 $193 = ($192>>>0)>(1600015);
 if ($193) {
  $u$0 = 100000;
 } else {
  $194 = $192 >>> 4;
  $195 = ($192>>>0)<(160000);
  $$8 = $195 ? 10000 : $194;
  $u$0 = $$8;
 }
 HEAP32[34180952>>2] = $u$0;
 $196 = HEAP32[34184024>>2]|0;
 _set_search_limit_time($196);
 $197 = HEAP32[34181128>>2]|0;
 $198 = (($197) + -99)|0;
 $199 = HEAP32[34181136>>2]|0;
 $200 = (($199) + -99)|0;
 $201 = HEAP32[34181144>>2]|0;
 $202 = (($201) + -99)|0;
 $203 = HEAP32[34181160>>2]|0;
 $204 = (($203) + -148)|0;
 $205 = HEAP32[34181168>>2]|0;
 $206 = (($205) + -148)|0;
 $207 = HEAP32[34181152>>2]|0;
 $208 = (($207) + -396)|0;
 $209 = ($198|0)<(396);
 $210 = $209 ? 396 : $198;
 HEAP32[34181128>>2] = $210;
 $211 = ($200|0)<(396);
 $212 = $211 ? 396 : $200;
 HEAP32[34181136>>2] = $212;
 $213 = ($202|0)<(396);
 $214 = $213 ? 396 : $202;
 HEAP32[34181144>>2] = $214;
 $215 = ($204|0)<(396);
 $216 = $215 ? 396 : $204;
 HEAP32[34181160>>2] = $216;
 $217 = ($206|0)<(396);
 $218 = $217 ? 396 : $206;
 HEAP32[34181168>>2] = $218;
 $219 = ($208|0)<(396);
 $220 = $219 ? 396 : $208;
 HEAP32[34181152>>2] = $220;
 $221 = (($ptree) + 572072|0);
 $222 = HEAP8[$221>>0]|0;
 $223 = $222&255;
 $224 = (($ptree) + 572073|0);
 $225 = HEAP8[$224>>0]|0;
 $226 = $225&255;
 HEAP32[$vararg_buffer12>>2] = $223;
 $vararg_ptr15 = (($vararg_buffer12) + 4|0);
 HEAP32[$vararg_ptr15>>2] = $226;
 _out(221114656,$vararg_buffer12);
 $227 = HEAP8[((33570872 + 513|0))>>0]|0;
 $228 = ($227<<24>>24)==(0);
 if ($228) {
  label = 57;
 } else {
  _out(221114688,$vararg_buffer16);
  $229 = HEAP32[34184080>>2]|0;
  $230 = ($229|0)<(1);
  if ($230) {
   $234 = 0;
  } else {
   $231 = HEAP8[((33570872 + 514|0))>>0]|0;
   $232 = $231&255;
   $233 = (($232) + -1)|0;
   $234 = $233;
  }
  HEAP32[34184080>>2] = $234;
  _memcpy(($180|0),(33570872|0),516)|0;
  $235 = (($ptree) + 7776|0);
  HEAP8[$235>>0] = 7;
  $236 = HEAP32[34184024>>2]|0;
  $237 = ($236|0)!=(0);
  $238 = HEAP32[34184072>>2]|0;
  $239 = (0 - ($238))|0;
  $240 = $237 ? $239 : $238;
  HEAP32[34184016>>2] = $240;
  _out_pv($ptree,$240,$236,0);
  _out(221114744,$vararg_buffer18);
  $$pr36 = HEAP8[((33570872 + 513|0))>>0]|0;
  $241 = ($$pr36<<24>>24)==(0);
  if ($241) {
   label = 57;
  }
 }
 if ((label|0) == 57) {
  $242 = (($ptree) + 502964|0);
  $ply$1102 = 1;$value$0103 = -2147483648;
  while(1) {
   HEAP32[$dummy>>2] = 0;
   $243 = $ply$1102 << 3;
   $244 = $243 | 4;
   $245 = HEAP32[34184024>>2]|0;
   $246 = (_hash_probe($ptree,1,$244,$245,-32600,32600,$dummy)|0);
   $247 = ($246|0)==(3);
   if (!($247)) {
    $ply$1$lcssa = $ply$1102;$value$0$lcssa = $value$0103;
    break;
   }
   $248 = HEAP32[$242>>2]|0;
   $249 = (($ply$1102) + 1)|0;
   $250 = ($249|0)<(118);
   if ($250) {
    $ply$1102 = $249;$value$0103 = $248;
   } else {
    $ply$1$lcssa = $249;$value$0$lcssa = $248;
    break;
   }
  }
  $251 = ($value$0$lcssa|0)>(-32600);
  if ($251) {
   _out(221114752,$vararg_buffer20);
   $252 = (($ply$1$lcssa) + -1)|0;
   HEAP32[34184080>>2] = $252;
   $253 = $252&255;
   HEAP8[$182>>0] = $253;
   $254 = (($ptree) + 7776|0);
   HEAP8[$254>>0] = 6;
   HEAP32[34184016>>2] = $value$0$lcssa;
   $255 = HEAP32[34184024>>2]|0;
   _out_pv($ptree,$value$0$lcssa,$255,0);
   _out(221114744,$vararg_buffer22);
   $256 = HEAP8[$183>>0]|0;
   $257 = ($256<<24>>24)==(0);
   if ($257) {
    HEAP32[34184080>>2] = 0;
    HEAP8[$182>>0] = 0;
    HEAP32[34184016>>2] = -32600;
   }
  }
 }
 _out(221114808,$vararg_buffer24);
 $258 = (_make_root_move_list($ptree)|0);
 $259 = HEAP32[34183992>>2]|0;
 $260 = ($259|0)==(0);
 if ($260) {
  $261 = HEAP32[221099720>>2]|0;
  $262 = ($261|0)==(0);
  if ($262) {
   $269 = HEAP32[704>>2]|0;
   HEAP32[220526664>>2] = $269;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $263 = HEAP32[221102520>>2]|0;
  $264 = ($263|0)==(-1);
  if ($264) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $265 = HEAP32[221102528>>2]|0;
  $266 = HEAP32[221102536>>2]|0;
  $267 = ($266|0)==(2147483647);
  $268 = $267 ? 221114560 : 221114568;
  HEAP32[$vararg_buffer26>>2] = $265;
  $vararg_ptr29 = (($vararg_buffer26) + 4|0);
  HEAP32[$vararg_ptr29>>2] = -32600;
  $vararg_ptr30 = (($vararg_buffer26) + 8|0);
  HEAP32[$vararg_ptr30>>2] = $268;
  (_sckt_out($263,221114832,$vararg_buffer26)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $270 = HEAP8[$183>>0]|0;
 $271 = ($270<<24>>24)==(0);
 if ($271) {
  $$pre148 = HEAP32[((33559672 + 8|0))>>2]|0;
  $275 = $$pre148;
  label = 71;
 } else {
  $272 = HEAP32[$181>>2]|0;
  $273 = HEAP32[((33559672 + 8|0))>>2]|0;
  $274 = ($272|0)==($273|0);
  if (!($274)) {
   $275 = $273;
   label = 71;
  }
 }
 if ((label|0) == 71) {
  HEAP32[34184080>>2] = 0;
  HEAP32[$181>>2] = $275;
  HEAP8[$183>>0] = 1;
  HEAP8[$182>>0] = 1;
  $276 = (($ptree) + 7776|0);
  HEAP8[$276>>0] = 0;
  HEAP32[34184016>>2] = $258;
  HEAP32[34184032>>2] = 0;
 }
 $277 = (_get_elapsed($elapsed1)|0);
 $278 = ($277|0)<(0);
 if ($278) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $279 = HEAP32[34183992>>2]|0;
 $280 = HEAP32[$elapsed1>>2]|0;
 $281 = HEAP32[34181040>>2]|0;
 $282 = (($280) - ($281))|0;
 $283 = (_str_time_symple($282)|0);
 HEAP32[$vararg_buffer31>>2] = $279;
 $vararg_ptr34 = (($vararg_buffer31) + 4|0);
 HEAP32[$vararg_ptr34>>2] = $283;
 _out(221114872,$vararg_buffer31);
 $284 = HEAP32[34184024>>2]|0;
 $285 = ($284|0)!=(0);
 $286 = HEAP32[34184016>>2]|0;
 $287 = (0 - ($286))|0;
 $288 = $285 ? $287 : $286;
 HEAP32[34184072>>2] = $288;
 _memcpy((33570872|0),($180|0),516)|0;
 $289 = HEAP32[221102520>>2]|0;
 $290 = ($289|0)==(-1);
 if ($290) {
  $305 = $286;
 } else {
  $291 = HEAP32[221102528>>2]|0;
  $292 = HEAP32[$181>>2]|0;
  $293 = (_str_CSA_move($292)|0);
  $294 = HEAP32[34184016>>2]|0;
  $295 = $151;
  $296 = $295;
  $297 = HEAP32[$296>>2]|0;
  $298 = (($295) + 4)|0;
  $299 = $298;
  $300 = HEAP32[$299>>2]|0;
  HEAP32[$vararg_buffer35>>2] = $291;
  $vararg_ptr38 = (($vararg_buffer35) + 4|0);
  HEAP32[$vararg_ptr38>>2] = $293;
  $vararg_ptr39 = (($vararg_buffer35) + 8|0);
  HEAP32[$vararg_ptr39>>2] = $294;
  $vararg_ptr40 = (($vararg_buffer35) + 12|0);
  $301 = $vararg_ptr40;
  $302 = $301;
  HEAP32[$302>>2] = $297;
  $303 = (($301) + 4)|0;
  $304 = $303;
  HEAP32[$304>>2] = $300;
  (_sckt_out($289,221114904,$vararg_buffer35)|0);
  $$pre = HEAP32[34184016>>2]|0;
  $305 = $$pre;
 }
 $ispos = ($305|0)>(-1);
 $neg = (0 - ($305))|0;
 $306 = $ispos ? $305 : $neg;
 $307 = ($306|0)>(30000);
 if ($307) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $308 = HEAP32[34184080>>2]|0;
 $309 = HEAP32[34184088>>2]|0;
 $310 = ($308|0)<($309|0);
 if (!($310)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $311 = HEAP32[34180920>>2]|0;
 $312 = $311 & 32;
 $313 = ($312|0)==(0);
 if (!($313)) {
  $314 = HEAP32[34183992>>2]|0;
  $315 = ($314|0)==(1);
  if ($315) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $316 = HEAP8[$182>>0]|0;
  $317 = ($316&255)>(4);
  if ($317) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $318 = (($308) + 1)|0;
 HEAP32[34184080>>2] = $318;
 $319 = HEAP32[34181064>>2]|0;
 $320 = HEAP32[34181056>>2]|0;
 $321 = ($319|0)==($320|0);
 $$$i = $321 ? 396 : 198;
 $322 = (($$$i) + ($305))|0;
 $323 = ($322|0)>(30000);
 $$$0$i = $323 ? 32600 : $322;
 HEAP32[34184008>>2] = $$$0$i;
 $324 = (($305) - ($$$i))|0;
 $325 = ($324|0)<(-30000);
 $$$0$i18 = $325 ? -32600 : $324;
 HEAP32[34184000>>2] = $$$0$i18;
 HEAP32[34184016>>2] = $$$0$i18;
 HEAP32[$vararg_buffer41>>2] = $318;
 _out(221114936,$vararg_buffer41);
 $$pr37 = HEAP32[34184080>>2]|0;
 $326 = ($$pr37|0)<(30);
 L129: do {
  if ($326) {
   $327 = (($ptree) + 593|0);
   $328 = (($ptree) + 594|0);
   $329 = (($ptree) + 7784|0);
   $right_answer_made$096 = 0;
   L131: while(1) {
    $330 = (_get_elapsed(34181072)|0);
    $331 = ($330|0)<(0);
    if ($331) {
     $$0 = -1;
     label = 179;
     break;
    }
    $332 = HEAP32[34184024>>2]|0;
    $333 = HEAP8[$183>>0]|0;
    $334 = ($333<<24>>24)==(0);
    if (!($334)) {
     $ply$251 = 1;$tt$050 = $332;
     while(1) {
      $335 = ((($ptree) + ($ply$251<<2)|0) + 7264|0);
      $336 = HEAP32[$335>>2]|0;
      $337 = (_is_move_valid($ptree,$336,$tt$050)|0);
      $338 = ($337|0)==(0);
      if ($338) {
       $ply$3$in$ph = $ply$251;$tt$1$ph = $tt$050;
       break;
      }
      $339 = ($tt$050|0)==(0);
      if ($339) {
       _make_move_b($ptree,$336,$ply$251);
       $344 = HEAP8[$327>>0]|0;
       $345 = $344&255;
       $346 = (_is_black_attacked($ptree,$345)|0);
       $347 = ($346|0)==(0);
       if (!($347)) {
        label = 89;
        break;
       }
      } else {
       _make_move_w($ptree,$336,$ply$251);
       $340 = HEAP8[$328>>0]|0;
       $341 = $340&255;
       $342 = (_is_white_attacked($ptree,$341)|0);
       $343 = ($342|0)==(0);
       if (!($343)) {
        label = 88;
        break;
       }
      }
      $348 = $tt$050 ^ 1;
      $349 = (($ply$251) + 1)|0;
      $350 = HEAP8[$183>>0]|0;
      $351 = $350&255;
      $352 = ($ply$251|0)<($351|0);
      if ($352) {
       $ply$251 = $349;$tt$050 = $348;
      } else {
       $ply$3$in$ph = $349;$tt$1$ph = $348;
       break;
      }
     }
     if ((label|0) == 88) {
      label = 0;
      _unmake_move_w($ptree,$336,$ply$251);
      $ply$3$in$ph = $ply$251;$tt$1$ph = $tt$050;
     }
     else if ((label|0) == 89) {
      label = 0;
      _unmake_move_b($ptree,$336,$ply$251);
      $ply$3$in$ph = $ply$251;$tt$1$ph = 0;
     }
     $ply$356 = (($ply$3$in$ph) + -1)|0;
     $353 = ($ply$356|0)>(0);
     if ($353) {
      $ply$358 = $ply$356;$tt$157 = $tt$1$ph;
      while(1) {
       $354 = $tt$157 ^ 1;
       $355 = ((($ptree) + ($ply$358<<2)|0) + 7264|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = ($tt$157|0)==(1);
       if ($357) {
        _unmake_move_b($ptree,$356,$ply$358);
       } else {
        _unmake_move_w($ptree,$356,$ply$358);
       }
       _hash_store_pv($ptree,$356,$354);
       $ply$3 = (($ply$358) + -1)|0;
       $358 = ($ply$3|0)>(0);
       if ($358) {
        $ply$358 = $ply$3;$tt$157 = $354;
       } else {
        break;
       }
      }
     }
    }
    HEAP32[34184040>>2] = 0;
    HEAP32[34184048>>2] = 0;
    $359 = HEAP32[34183992>>2]|0;
    HEAP32[((33559672 + 12|0))>>2] = 2;
    $360 = ($359|0)>(1);
    if ($360) {
     $i2$062 = 1;
     while(1) {
      $361 = ((33559672 + ($i2$062<<4)|0) + 12|0);
      HEAP32[$361>>2] = 0;
      $362 = (($i2$062) + 1)|0;
      $exitcond121 = ($362|0)==($359|0);
      if ($exitcond121) {
       break;
      } else {
       $i2$062 = $362;
      }
     }
    }
    $363 = HEAP32[34184000>>2]|0;
    $364 = HEAP32[34184008>>2]|0;
    $365 = HEAP32[34184024>>2]|0;
    $366 = HEAP32[34184080>>2]|0;
    $367 = $366 << 3;
    $368 = $367 | 4;
    $369 = (_searchr($ptree,$363,$364,$365,$368)|0);
    $370 = HEAP32[34180920>>2]|0;
    $371 = $370 & 4096;
    $372 = ($371|0)==(0);
    if ($372) {
     $377 = $369;$507 = $370;
    } else {
     $$0 = -1;
     label = 179;
     break;
    }
    while(1) {
     $373 = HEAP32[34183984>>2]|0;
     $374 = ($373|0)==(0);
     if (!($374)) {
      label = 100;
      break;
     }
     $375 = HEAP32[34184008>>2]|0;
     $376 = ($375|0)>($377|0);
     if ($376) {
      $443 = HEAP32[34184000>>2]|0;
      $444 = ($377|0)>($443|0);
      if ($444) {
       $$pre141 = $443;$$pre143 = $375;
       label = 140;
       break;
      }
      $445 = HEAP32[((33559672 + 12|0))>>2]|0;
      $446 = $445 & 2;
      $447 = ($446|0)==(0);
      if ($447) {
       label = 123;
       break;
      }
      $448 = $445 & -2;
      HEAP32[((33559672 + 12|0))>>2] = $448;
      $449 = HEAP32[34184024>>2]|0;
      $450 = ($449|0)!=(0);
      $451 = (0 - ($443))|0;
      $452 = $450 ? $451 : $443;
      $453 = (+($452|0));
      $454 = (_get_elapsed($time_elapsed)|0);
      $455 = ($454|0)<(0);
      if ($455) {
       $$0 = -1;
       label = 179;
       break L131;
      }
      $456 = HEAP32[34181064>>2]|0;
      $457 = HEAP32[34181056>>2]|0;
      $458 = ($456|0)==($457|0);
      $$$i31 = $458 ? 396 : 198;
      $$2$neg$i = $458 ? -1190 : -793;
      $root_nfail_low$promoted = HEAP32[34184048>>2]|0;
      $$pre140 = HEAP32[34184000>>2]|0;
      $460 = $root_nfail_low$promoted;$462 = $$pre140;
      while(1) {
       $459 = (($460) + 1)|0;
       if ((($460|0) == -1)) {
        $461 = (($462) - ($$$i31))|0;
        $$0$i32 = $461;
       } else if ((($460|0) == 0)) {
        $463 = (($$2$neg$i) + ($462))|0;
        $464 = (($463) + ($$$i31))|0;
        $$0$i32 = $464;
       } else if ((($460|0) == 1)) {
        $$0$i32 = -32600;
       } else {
        label = 129;
        break L131;
       }
       $465 = ($$0$i32|0)<(-30000);
       $$$0$i33 = $465 ? -32600 : $$0$i32;
       HEAP32[34184000>>2] = $$$0$i33;
       $466 = ($377|0)>($$$0$i33|0);
       if ($466) {
        break;
       } else {
        $460 = $459;$462 = $$$0$i33;
       }
      }
      HEAP32[34184048>>2] = $459;
      HEAP32[34184016>>2] = $$$0$i33;
      $467 = HEAP32[$time_elapsed>>2]|0;
      $468 = HEAP32[34181040>>2]|0;
      $469 = (($467) - ($468))|0;
      $470 = (_str_time_symple($469)|0);
      $471 = HEAP32[34184080>>2]|0;
      $472 = $453 / 100.0;
      HEAP32[$vararg_buffer69>>2] = $471;
      $vararg_ptr72 = (($vararg_buffer69) + 4|0);
      HEAP32[$vararg_ptr72>>2] = $470;
      $vararg_ptr73 = (($vararg_buffer69) + 8|0);
      HEAPF64[tempDoublePtr>>3]=$472;HEAP32[$vararg_ptr73>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr73+4>>2]=HEAP32[tempDoublePtr+4>>2];
      _out(221115032,$vararg_buffer69);
      $473 = HEAP32[34184024>>2]|0;
      $474 = HEAP32[34184048>>2]|0;
      $475 = HEAP32[34181064>>2]|0;
      $476 = HEAP32[34181056>>2]|0;
      $477 = ($475|0)==($476|0);
      $478 = ($474|0)==(1);
      $479 = ($473|0)!=(1);
      do {
       if ($477) {
        if ($478) {
         $482 = $479 ? 221115592 : 221115600;
         $str$0$i34 = $482;
         break;
        } else {
         $483 = $479 ? 221115608 : 221115616;
         $str$0$i34 = $483;
         break;
        }
       } else {
        if ($478) {
         $480 = $479 ? 221115560 : 221115568;
         $str$0$i34 = $480;
         break;
        } else {
         $481 = $479 ? 221115576 : 221115584;
         $str$0$i34 = $481;
         break;
        }
       }
      } while(0);
      $484 = HEAP32[((33559672 + 8|0))>>2]|0;
      $485 = (_str_CSA_move($484)|0);
      $486 = HEAP32[34184024>>2]|0;
      $487 = (984 + ($486)|0);
      $488 = HEAP8[$487>>0]|0;
      $489 = $488 << 24 >> 24;
      HEAP32[$vararg_buffer74>>2] = $489;
      $vararg_ptr77 = (($vararg_buffer74) + 4|0);
      HEAP32[$vararg_ptr77>>2] = $485;
      $vararg_ptr78 = (($vararg_buffer74) + 8|0);
      HEAP32[$vararg_ptr78>>2] = $str$0$i34;
      _out(221115080,$vararg_buffer74);
     } else {
      $378 = HEAP32[((33559672 + 12|0))>>2]|0;
      $379 = $378 & -2;
      HEAP32[((33559672 + 12|0))>>2] = $379;
      $380 = HEAP32[34184024>>2]|0;
      $381 = ($380|0)!=(0);
      $382 = (0 - ($375))|0;
      $383 = $381 ? $382 : $375;
      $384 = (+($383|0));
      $385 = HEAP32[34181064>>2]|0;
      $386 = HEAP32[34181056>>2]|0;
      $387 = ($385|0)==($386|0);
      $$$i28 = $387 ? 396 : 198;
      $$2$i = $387 ? 1190 : 793;
      $root_nfail_high$promoted = HEAP32[34184040>>2]|0;
      $389 = $root_nfail_high$promoted;$391 = $375;
      while(1) {
       $388 = (($389) + 1)|0;
       if ((($389|0) == -1)) {
        $390 = (($$$i28) + ($391))|0;
        $$0$i29 = $390;
       } else if ((($389|0) == 0)) {
        $392 = (($391) - ($$$i28))|0;
        $393 = (($392) + ($$2$i))|0;
        $$0$i29 = $393;
       } else if ((($389|0) == 1)) {
        $$0$i29 = 32600;
       } else {
        label = 106;
        break L131;
       }
       $394 = ($$0$i29|0)>(30000);
       $$$0$i30 = $394 ? 32600 : $$0$i29;
       HEAP32[34184008>>2] = $$$0$i30;
       $395 = ($377|0)<($$$0$i30|0);
       if ($395) {
        break;
       } else {
        $389 = $388;$391 = $$$0$i30;
       }
      }
      HEAP32[34184040>>2] = $388;
      $396 = HEAP32[221102520>>2]|0;
      $397 = ($396|0)==(-1);
      if (!($397)) {
       $398 = HEAP32[221102528>>2]|0;
       $399 = HEAP32[$329>>2]|0;
       $400 = (_str_CSA_move($399)|0);
       $401 = HEAP32[34184008>>2]|0;
       $402 = $151;
       $403 = $402;
       $404 = HEAP32[$403>>2]|0;
       $405 = (($402) + 4)|0;
       $406 = $405;
       $407 = HEAP32[$406>>2]|0;
       $408 = HEAP32[221102536>>2]|0;
       $409 = HEAP32[34184080>>2]|0;
       $410 = ($408|0)<=($409|0);
       $411 = $410 ? 221114568 : 221114560;
       HEAP32[$vararg_buffer46>>2] = $398;
       $vararg_ptr49 = (($vararg_buffer46) + 4|0);
       HEAP32[$vararg_ptr49>>2] = $400;
       $vararg_ptr50 = (($vararg_buffer46) + 8|0);
       HEAP32[$vararg_ptr50>>2] = $401;
       $vararg_ptr51 = (($vararg_buffer46) + 12|0);
       $412 = $vararg_ptr51;
       $413 = $412;
       HEAP32[$413>>2] = $404;
       $414 = (($412) + 4)|0;
       $415 = $414;
       HEAP32[$415>>2] = $407;
       $vararg_ptr52 = (($vararg_buffer46) + 20|0);
       HEAP32[$vararg_ptr52>>2] = $411;
       (_sckt_out($396,221115000,$vararg_buffer46)|0);
      }
      $416 = HEAP32[34181024>>2]|0;
      $417 = HEAP32[34181040>>2]|0;
      $418 = (($416) - ($417))|0;
      $419 = (_str_time_symple($418)|0);
      $420 = HEAP32[((33559672 + 12|0))>>2]|0;
      $421 = $420 & 2;
      $422 = ($421|0)==(0);
      if ($422) {
       $425 = $384 / 100.0;
       HEAP32[$vararg_buffer58>>2] = $419;
       $vararg_ptr61 = (($vararg_buffer58) + 4|0);
       HEAPF64[tempDoublePtr>>3]=$425;HEAP32[$vararg_ptr61>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr61+4>>2]=HEAP32[tempDoublePtr+4>>2];
       _out(221115048,$vararg_buffer58);
      } else {
       $423 = HEAP32[34184080>>2]|0;
       $424 = $384 / 100.0;
       HEAP32[$vararg_buffer53>>2] = $423;
       $vararg_ptr56 = (($vararg_buffer53) + 4|0);
       HEAP32[$vararg_ptr56>>2] = $419;
       $vararg_ptr57 = (($vararg_buffer53) + 8|0);
       HEAPF64[tempDoublePtr>>3]=$424;HEAP32[$vararg_ptr57>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr57+4>>2]=HEAP32[tempDoublePtr+4>>2];
       _out(221115032,$vararg_buffer53);
      }
      $426 = HEAP32[34184024>>2]|0;
      $427 = HEAP32[34184040>>2]|0;
      $428 = HEAP32[34181064>>2]|0;
      $429 = HEAP32[34181056>>2]|0;
      $430 = ($428|0)==($429|0);
      $431 = ($427|0)==(1);
      $432 = ($426|0)!=(0);
      do {
       if ($430) {
        if ($431) {
         $435 = $432 ? 221115592 : 221115600;
         $str$0$i = $435;
         break;
        } else {
         $436 = $432 ? 221115608 : 221115616;
         $str$0$i = $436;
         break;
        }
       } else {
        if ($431) {
         $433 = $432 ? 221115560 : 221115568;
         $str$0$i = $433;
         break;
        } else {
         $434 = $432 ? 221115576 : 221115584;
         $str$0$i = $434;
         break;
        }
       }
      } while(0);
      $437 = HEAP32[$329>>2]|0;
      $438 = (_str_CSA_move($437)|0);
      $439 = HEAP32[34184024>>2]|0;
      $440 = (984 + ($439)|0);
      $441 = HEAP8[$440>>0]|0;
      $442 = $441 << 24 >> 24;
      HEAP32[$vararg_buffer62>>2] = $442;
      $vararg_ptr65 = (($vararg_buffer62) + 4|0);
      HEAP32[$vararg_ptr65>>2] = $438;
      $vararg_ptr66 = (($vararg_buffer62) + 8|0);
      HEAP32[$vararg_ptr66>>2] = $str$0$i;
      _out(221115064,$vararg_buffer62);
     }
     $490 = HEAP32[34184000>>2]|0;
     $491 = HEAP32[34184008>>2]|0;
     $492 = HEAP32[34184024>>2]|0;
     $493 = HEAP32[34184080>>2]|0;
     $494 = $493 << 3;
     $495 = $494 | 4;
     $496 = (_searchr($ptree,$490,$491,$492,$495)|0);
     $497 = HEAP32[34180920>>2]|0;
     $498 = $497 & 4096;
     $499 = ($498|0)==(0);
     if ($499) {
      $377 = $496;$507 = $497;
     } else {
      $$0 = -1;
      label = 179;
      break L131;
     }
    }
    if ((label|0) == 100) {
     label = 0;
     $$pre141$pre = HEAP32[34184000>>2]|0;
     $$pre143$pre = HEAP32[34184008>>2]|0;
     $$pre141 = $$pre141$pre;$$pre143 = $$pre143$pre;
     label = 140;
    }
    else if ((label|0) == 123) {
     label = 0;
     HEAP32[34184016>>2] = $443;
     $or$cond10154 = 0;
    }
    do {
     if ((label|0) == 140) {
      label = 0;
      $$pre142 = HEAP32[34184016>>2]|0;
      $500 = ($$pre141|0)<($$pre142|0);
      $501 = ($$pre142|0)<($$pre143|0);
      $or$cond10 = $500 & $501;
      if (!($or$cond10)) {
       $or$cond10154 = 0;
       break;
      }
      $502 = HEAP32[34184024>>2]|0;
      $503 = ($502|0)!=(0);
      $504 = (0 - ($$pre142))|0;
      $505 = $503 ? $504 : $$pre142;
      HEAP32[34184072>>2] = $505;
      _memcpy((33570872|0),($180|0),516)|0;
      $or$cond10154 = 1;
     }
    } while(0);
    if (!($374)) {
     $right_answer_made$3 = $right_answer_made$096;
     break L129;
    }
    if ($or$cond10154) {
     $506 = $507 & 256;
     $508 = ($506|0)!=(0);
     $509 = HEAP32[34184088>>2]|0;
     $510 = ($509|0)==(128);
     $or$cond3 = $508 & $510;
     L218: do {
      if ($or$cond3) {
       $511 = HEAP32[$181>>2]|0;
       $512 = (_str_CSA_move($511)|0);
       $ianser$01$i25 = 0;
       while(1) {
        $515 = (33555976 + ($ianser$01$i25<<3)|0);
        $516 = HEAP8[$515>>0]|0;
        $517 = ($516<<24>>24)==(0);
        if ($517) {
         $right_answer_made$1 = 0;
         break L218;
        }
        $518 = ((33555976 + ($ianser$01$i25<<3)|0) + 1|0);
        $519 = (_strcmp($518,$512)|0);
        $520 = ($519|0)==(0);
        $514 = (($ianser$01$i25) + 1)|0;
        if ($520) {
         break;
        }
        $513 = ($514|0)<(8);
        if ($513) {
         $ianser$01$i25 = $514;
        } else {
         $right_answer_made$1 = 0;
         break L218;
        }
       }
       $521 = ($right_answer_made$096|0)>(1);
       $522 = HEAP32[34184080>>2]|0;
       $523 = ($522|0)>(3);
       $or$cond5 = $521 & $523;
       if ($or$cond5) {
        $right_answer_made$3 = $right_answer_made$096;
        break L129;
       }
       $524 = (($right_answer_made$096) + 1)|0;
       $right_answer_made$1 = $524;
      } else {
       $right_answer_made$1 = $right_answer_made$096;
      }
     } while(0);
     $ispos6 = ($377|0)>(-1);
     $neg7 = (0 - ($377))|0;
     $525 = $ispos6 ? $377 : $neg7;
     $526 = ($525|0)>(30000);
     if ($526) {
      $right_answer_made$3 = $right_answer_made$1;
      break L129;
     }
     $527 = HEAP32[34184080>>2]|0;
     $528 = HEAP32[34184088>>2]|0;
     $529 = ($527|0)<($528|0);
     if (!($529)) {
      $right_answer_made$3 = $right_answer_made$1;
      break L129;
     }
     $530 = HEAP32[34181064>>2]|0;
     $531 = HEAP32[34181056>>2]|0;
     $532 = ($530|0)==($531|0);
     $$$i22 = $532 ? 396 : 198;
     $533 = (($$$i22) + ($377))|0;
     $534 = ($533|0)>(30000);
     $$$0$i24 = $534 ? 32600 : $533;
     HEAP32[34184008>>2] = $$$0$i24;
     $535 = (($377) - ($$$i22))|0;
     $536 = ($535|0)<(-30000);
     $$$0$i21 = $536 ? -32600 : $535;
     HEAP32[34184000>>2] = $$$0$i21;
     HEAP32[34184016>>2] = $$$0$i21;
     $right_answer_made$2 = $right_answer_made$1;
    } else {
     $right_answer_made$2 = $right_answer_made$096;
    }
    $537 = HEAP32[34183992>>2]|0;
    $k$094 = 6;
    while(1) {
     $538 = (992 + ($k$094<<2)|0);
     $539 = HEAP32[$538>>2]|0;
     $540 = (($537) - ($539))|0;
     $i7$089 = (($540) + -1)|0;
     $541 = ($i7$089|0)>(0);
     if ($541) {
      $i7$090 = $i7$089;
      while(1) {
       $542 = (33559672 + ($i7$090<<4)|0);
       ;HEAP32[$root_move_swap+0>>2]=HEAP32[$542+0>>2]|0;HEAP32[$root_move_swap+4>>2]=HEAP32[$542+4>>2]|0;HEAP32[$root_move_swap+8>>2]=HEAP32[$542+8>>2]|0;HEAP32[$root_move_swap+12>>2]=HEAP32[$542+12>>2]|0;
       $543 = $542;
       $544 = $543;
       $545 = HEAP32[$544>>2]|0;
       $546 = (($543) + 4)|0;
       $547 = $546;
       $548 = HEAP32[$547>>2]|0;
       $j$083 = (($i7$090) + ($539))|0;
       $549 = ($j$083|0)<($537|0);
       L235: do {
        if ($549) {
         $i7$0$pn84 = $i7$090;$j$085 = $j$083;
         while(1) {
          $551 = (33559672 + ($j$085<<4)|0);
          $552 = $551;
          $553 = $552;
          $554 = HEAP32[$553>>2]|0;
          $555 = (($552) + 4)|0;
          $556 = $555;
          $557 = HEAP32[$556>>2]|0;
          $558 = ($557>>>0)>($548>>>0);
          $559 = ($557|0)==($548|0);
          $560 = ($554>>>0)>($545>>>0);
          $561 = $559 & $560;
          $562 = $558 | $561;
          $563 = (33559672 + ($i7$0$pn84<<4)|0);
          if (!($562)) {
           $566 = $563;
           break L235;
          }
          $564 = (33559672 + ($j$085<<4)|0);
          ;HEAP32[$563+0>>2]=HEAP32[$564+0>>2]|0;HEAP32[$563+4>>2]=HEAP32[$564+4>>2]|0;HEAP32[$563+8>>2]=HEAP32[$564+8>>2]|0;HEAP32[$563+12>>2]=HEAP32[$564+12>>2]|0;
          $j$0 = (($j$085) + ($539))|0;
          $565 = ($j$0|0)<($537|0);
          if ($565) {
           $i7$0$pn84$phi = $j$085;$j$085 = $j$0;$i7$0$pn84 = $i7$0$pn84$phi;
          } else {
           $i7$0$pn$lcssa = $j$085;
           label = 157;
           break;
          }
         }
        } else {
         $i7$0$pn$lcssa = $i7$090;
         label = 157;
        }
       } while(0);
       if ((label|0) == 157) {
        label = 0;
        $550 = (33559672 + ($i7$0$pn$lcssa<<4)|0);
        $566 = $550;
       }
       ;HEAP32[$566+0>>2]=HEAP32[$root_move_swap+0>>2]|0;HEAP32[$566+4>>2]=HEAP32[$root_move_swap+4>>2]|0;HEAP32[$566+8>>2]=HEAP32[$root_move_swap+8>>2]|0;HEAP32[$566+12>>2]=HEAP32[$root_move_swap+12>>2]|0;
       $i7$0 = (($i7$090) + -1)|0;
       $567 = ($i7$0|0)>(0);
       if ($567) {
        $i7$090 = $i7$0;
       } else {
        break;
       }
      }
     }
     $568 = (($k$094) + -1)|0;
     $569 = ($k$094|0)>(0);
     if ($569) {
      $k$094 = $568;
     } else {
      break;
     }
    }
    $570 = HEAP32[34184080>>2]|0;
    $571 = (($570) + 1)|0;
    HEAP32[34184080>>2] = $571;
    $572 = ($571|0)<(30);
    if ($572) {
     $right_answer_made$096 = $right_answer_made$2;
    } else {
     $right_answer_made$3 = $right_answer_made$2;
     break L129;
    }
   }
   if ((label|0) == 106) {
    HEAP32[34184040>>2] = $388;
    _out_error(221115656,$vararg_buffer44);
    _exit(1);
    // unreachable;
   }
   else if ((label|0) == 129) {
    HEAP32[34184048>>2] = $459;
    _out_error(221115624,$vararg_buffer67);
    _exit(1);
    // unreachable;
   }
   else if ((label|0) == 179) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $right_answer_made$3 = 0;
  }
 } while(0);
 $573 = HEAP32[34180920>>2]|0;
 $574 = $573 & 256;
 $575 = ($574|0)==(0);
 L252: do {
  if ($575) {
   $right_answer_made$4 = $right_answer_made$3;
  } else {
   $576 = HEAP32[$181>>2]|0;
   $577 = (_str_CSA_move($576)|0);
   $ianser$01$i = 0;
   while(1) {
    $580 = (33555976 + ($ianser$01$i<<3)|0);
    $581 = HEAP8[$580>>0]|0;
    $582 = ($581<<24>>24)==(0);
    if ($582) {
     $right_answer_made$4 = 0;
     break L252;
    }
    $583 = ((33555976 + ($ianser$01$i<<3)|0) + 1|0);
    $584 = (_strcmp($583,$577)|0);
    $585 = ($584|0)==(0);
    $579 = (($ianser$01$i) + 1)|0;
    if ($585) {
     $right_answer_made$4 = 1;
     break L252;
    }
    $578 = ($579|0)<(8);
    if ($578) {
     $ianser$01$i = $579;
    } else {
     $right_answer_made$4 = 0;
     break;
    }
   }
  }
 } while(0);
 $i8$044 = 0;
 while(1) {
  $586 = ((($ptree) + ($i8$044<<1)|0) + 538532|0);
  $587 = HEAP16[$586>>1]|0;
  $588 = ($587&65535) >>> 8;
  HEAP16[$586>>1] = $588;
  $589 = ((($ptree) + ($i8$044<<1)|0) + 505764|0);
  $590 = HEAP16[$589>>1]|0;
  $591 = ($590&65535) >>> 8;
  HEAP16[$589>>1] = $591;
  $592 = (($i8$044) + 1)|0;
  $exitcond110 = ($592|0)==(16384);
  if ($exitcond110) {
   break;
  } else {
   $i8$044 = $592;
  }
 }
 $593 = HEAP32[$162>>2]|0;
 $594 = (+($593>>>0));
 $595 = HEAP32[$161>>2]|0;
 $596 = (+($595>>>0));
 $597 = $594 + $596;
 $598 = HEAP32[$163>>2]|0;
 $599 = (+($598>>>0));
 $600 = $597 + $599;
 $601 = HEAP32[$164>>2]|0;
 $602 = (($601) + 1)|0;
 $603 = (+($602>>>0));
 $604 = 100.0 / $603;
 $605 = $600 * $604;
 $606 = HEAP32[$170>>2]|0;
 $607 = (+($606>>>0));
 $608 = HEAP32[$174>>2]|0;
 $609 = (+($608>>>0));
 $610 = $607 + $609;
 $611 = HEAP32[$173>>2]|0;
 $612 = (+($611>>>0));
 $613 = $610 + $612;
 $614 = HEAP32[$172>>2]|0;
 $615 = (+($614>>>0));
 $616 = $613 + $615;
 $617 = HEAP32[$171>>2]|0;
 $618 = (+($617>>>0));
 $619 = $616 + $618;
 $620 = HEAP32[$169>>2]|0;
 $621 = (($620) + 1)|0;
 $622 = (+($621>>>0));
 $623 = 100.0 / $622;
 $624 = $619 * $623;
 $625 = HEAP32[$156>>2]|0;
 $626 = (+($625>>>0));
 $627 = $626 * 100.0;
 $628 = HEAP32[$157>>2]|0;
 $629 = (($628) + 1)|0;
 $630 = (+($629>>>0));
 $631 = $627 / $630;
 $632 = HEAP32[$176>>2]|0;
 $633 = (+($632>>>0));
 $634 = $633 * 100.0;
 $635 = HEAP32[$175>>2]|0;
 $636 = (($635) + 1)|0;
 $637 = (+($636>>>0));
 $638 = $634 / $637;
 HEAPF64[tempDoublePtr>>3]=$605;HEAP32[$vararg_buffer79>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer79+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr82 = (($vararg_buffer79) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$624;HEAP32[$vararg_ptr82>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr82+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr83 = (($vararg_buffer79) + 16|0);
 HEAPF64[tempDoublePtr>>3]=$631;HEAP32[$vararg_ptr83>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr83+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr84 = (($vararg_buffer79) + 24|0);
 HEAPF64[tempDoublePtr>>3]=$638;HEAP32[$vararg_ptr84>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr84+4>>2]=HEAP32[tempDoublePtr+4>>2];
 _out(221115096,$vararg_buffer79);
 $639 = HEAP32[$158>>2]|0;
 $640 = HEAP32[$159>>2]|0;
 $641 = HEAP32[$160>>2]|0;
 HEAP32[$vararg_buffer85>>2] = $639;
 $vararg_ptr88 = (($vararg_buffer85) + 4|0);
 HEAP32[$vararg_ptr88>>2] = $640;
 $vararg_ptr89 = (($vararg_buffer85) + 8|0);
 HEAP32[$vararg_ptr89>>2] = $641;
 _out(221115168,$vararg_buffer85);
 $642 = HEAP32[34181128>>2]|0;
 $643 = HEAP32[34181144>>2]|0;
 $644 = HEAP32[34181136>>2]|0;
 $645 = HEAP32[34181152>>2]|0;
 $646 = HEAP32[34181160>>2]|0;
 $647 = HEAP32[34181168>>2]|0;
 HEAP32[$vararg_buffer90>>2] = $642;
 $vararg_ptr93 = (($vararg_buffer90) + 4|0);
 HEAP32[$vararg_ptr93>>2] = $643;
 $vararg_ptr94 = (($vararg_buffer90) + 8|0);
 HEAP32[$vararg_ptr94>>2] = $644;
 $vararg_ptr95 = (($vararg_buffer90) + 12|0);
 HEAP32[$vararg_ptr95>>2] = $645;
 $vararg_ptr96 = (($vararg_buffer90) + 16|0);
 HEAP32[$vararg_ptr96>>2] = $646;
 $vararg_ptr97 = (($vararg_buffer90) + 20|0);
 HEAP32[$vararg_ptr97>>2] = $647;
 _out(221115216,$vararg_buffer90);
 $648 = HEAP32[34184064>>2]|0;
 $649 = 1 << $648;
 $650 = ($649|0)>(8192);
 $$ = $650 ? 8192 : $649;
 $651 = ($$|0)>(0);
 if ($651) {
  $652 = HEAP32[33555968>>2]|0;
  $653 = HEAP32[34184056>>2]|0;
  $654 = ($649|0)<(8192);
  $655 = $654 ? $649 : 8192;
  $i9$042 = 0;$n10$043 = 0;
  while(1) {
   $656 = ((($652) + (($i9$042*48)|0)|0) + 8|0);
   $657 = $656;
   $658 = $657;
   $659 = HEAP32[$658>>2]|0;
   $660 = (($657) + 4)|0;
   $661 = $660;
   $662 = HEAP32[$661>>2]|0;
   $663 = $659 & 7;
   $664 = ($653|0)==($663|0);
   $665 = $664&1;
   $$n10$0 = (($665) + ($n10$043))|0;
   $666 = ((($652) + (($i9$042*48)|0)|0) + 24|0);
   $667 = $666;
   $668 = $667;
   $669 = HEAP32[$668>>2]|0;
   $670 = (($667) + 4)|0;
   $671 = $670;
   $672 = HEAP32[$671>>2]|0;
   $673 = $669 & 7;
   $674 = ($653|0)==($673|0);
   $675 = $674&1;
   $n10$2 = (($$n10$0) + ($675))|0;
   $676 = ((($652) + (($i9$042*48)|0)|0) + 40|0);
   $677 = $676;
   $678 = $677;
   $679 = HEAP32[$678>>2]|0;
   $680 = (($677) + 4)|0;
   $681 = $680;
   $682 = HEAP32[$681>>2]|0;
   $683 = $679 & 7;
   $684 = ($653|0)==($683|0);
   $685 = $684&1;
   $$n10$2 = (($n10$2) + ($685))|0;
   $686 = (($i9$042) + 1)|0;
   $exitcond = ($686|0)==($655|0);
   if ($exitcond) {
    break;
   } else {
    $i9$042 = $686;$n10$043 = $$n10$2;
   }
  }
  $phitmp = (+($$n10$2|0));
  $phitmp109 = $phitmp * 100.0;
  $n10$0$lcssa = $phitmp109;
 } else {
  $n10$0$lcssa = 0.0;
 }
 $687 = HEAP32[$167>>2]|0;
 $688 = (+($687>>>0));
 $689 = $688 * 100.0;
 $690 = HEAP32[$169>>2]|0;
 $691 = (($690) + 1)|0;
 $692 = (+($691>>>0));
 $693 = $689 / $692;
 $694 = HEAP32[$168>>2]|0;
 $695 = (+($694>>>0));
 $696 = $695 * 100.0;
 $697 = $696 / $692;
 $698 = HEAP32[$173>>2]|0;
 $699 = (+($698>>>0));
 $700 = $699 * 100.0;
 $701 = $700 / $692;
 $702 = HEAP32[$174>>2]|0;
 $703 = (+($702>>>0));
 $704 = $703 * 100.0;
 $705 = $704 / $692;
 HEAPF64[tempDoublePtr>>3]=$693;HEAP32[$vararg_buffer98>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer98+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr101 = (($vararg_buffer98) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$697;HEAP32[$vararg_ptr101>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr101+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr102 = (($vararg_buffer98) + 16|0);
 HEAPF64[tempDoublePtr>>3]=$701;HEAP32[$vararg_ptr102>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr102+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr103 = (($vararg_buffer98) + 24|0);
 HEAPF64[tempDoublePtr>>3]=$705;HEAP32[$vararg_ptr103>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr103+4>>2]=HEAP32[tempDoublePtr+4>>2];
 _out(221115288,$vararg_buffer98);
 $706 = HEAP32[$171>>2]|0;
 $707 = (+($706>>>0));
 $708 = $707 * 100.0;
 $709 = HEAP32[$169>>2]|0;
 $710 = (($709) + 1)|0;
 $711 = (+($710>>>0));
 $712 = $708 / $711;
 $713 = HEAP32[$172>>2]|0;
 $714 = (+($713>>>0));
 $715 = $714 * 100.0;
 $716 = $715 / $711;
 $717 = ($$*3)|0;
 $718 = (+($717|0));
 $719 = $n10$0$lcssa / $718;
 $720 = HEAP32[$170>>2]|0;
 $721 = HEAP32[34184056>>2]|0;
 HEAP32[$vararg_buffer104>>2] = $720;
 $vararg_ptr107 = (($vararg_buffer104) + 4|0);
 HEAPF64[tempDoublePtr>>3]=$712;HEAP32[$vararg_ptr107>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr107+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr108 = (($vararg_buffer104) + 12|0);
 HEAPF64[tempDoublePtr>>3]=$716;HEAP32[$vararg_ptr108>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr108+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr109 = (($vararg_buffer104) + 20|0);
 HEAPF64[tempDoublePtr>>3]=$719;HEAP32[$vararg_ptr109>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr109+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr110 = (($vararg_buffer104) + 28|0);
 HEAP32[$vararg_ptr110>>2] = $721;
 _out(221115368,$vararg_buffer104);
 $722 = $719 > 9.0;
 if ($722) {
  $723 = HEAP32[34184056>>2]|0;
  $724 = (($723) + 1)|0;
  $725 = $724 & 7;
  HEAP32[34184056>>2] = $725;
 }
 $726 = $151;
 $727 = $726;
 $728 = HEAP32[$727>>2]|0;
 $729 = (($726) + 4)|0;
 $730 = $729;
 $731 = HEAP32[$730>>2]|0;
 $732 = HEAP32[$166>>2]|0;
 $733 = HEAP32[$165>>2]|0;
 $734 = HEAP32[$161>>2]|0;
 $735 = HEAP32[$162>>2]|0;
 $736 = HEAP32[$163>>2]|0;
 $737 = $vararg_buffer111;
 $738 = $737;
 HEAP32[$738>>2] = $728;
 $739 = (($737) + 4)|0;
 $740 = $739;
 HEAP32[$740>>2] = $731;
 $vararg_ptr114 = (($vararg_buffer111) + 8|0);
 HEAP32[$vararg_ptr114>>2] = $732;
 $vararg_ptr115 = (($vararg_buffer111) + 12|0);
 HEAP32[$vararg_ptr115>>2] = $733;
 $vararg_ptr116 = (($vararg_buffer111) + 16|0);
 HEAP32[$vararg_ptr116>>2] = $734;
 $vararg_ptr117 = (($vararg_buffer111) + 20|0);
 HEAP32[$vararg_ptr117>>2] = $735;
 $vararg_ptr118 = (($vararg_buffer111) + 24|0);
 HEAP32[$vararg_ptr118>>2] = $736;
 _out(221115448,$vararg_buffer111);
 $741 = (_get_cputime($cpu)|0);
 $742 = ($741|0)<(0);
 if ($742) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $743 = (_get_elapsed($elapsed11)|0);
 $744 = ($743|0)<(0);
 if ($744) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $745 = HEAP32[$cpu_start>>2]|0;
 $746 = HEAP32[$cpu>>2]|0;
 $747 = (($746) - ($745))|0;
 HEAP32[$cpu>>2] = $747;
 $748 = HEAP32[34181040>>2]|0;
 $749 = HEAP32[$elapsed11>>2]|0;
 $750 = (($749) - ($748))|0;
 HEAP32[$elapsed11>>2] = $750;
 $751 = (+($747>>>0));
 $752 = $751 * 100.0;
 $753 = (($750) + 1)|0;
 $754 = (+($753>>>0));
 $755 = $752 / $754;
 $756 = $151;
 $757 = $756;
 $758 = HEAP32[$757>>2]|0;
 $759 = (($756) + 4)|0;
 $760 = $759;
 $761 = HEAP32[$760>>2]|0;
 $762 = (+($758>>>0)) + (4294967296.0*(+($761>>>0)));
 $763 = $762 * 1000.0;
 $764 = $763 / $754;
 $765 = $764 + 0.5;
 $766 = (~~(($765))>>>0);
 HEAP32[34180944>>2] = $766;
 $767 = (($ptree) + 508|0);
 $768 = HEAP32[$767>>2]|0;
 $769 = (+($768|0));
 $770 = $769 / 174.0;
 $771 = (_str_time_symple($750)|0);
 HEAP32[$vararg_buffer119>>2] = $771;
 _out(221115504,$vararg_buffer119);
 $772 = $764 / 1000.0;
 HEAPF64[tempDoublePtr>>3]=$755;HEAP32[$vararg_buffer122>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer122+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr125 = (($vararg_buffer122) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$770;HEAP32[$vararg_ptr125>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr125+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr126 = (($vararg_buffer122) + 16|0);
 HEAPF64[tempDoublePtr>>3]=$772;HEAP32[$vararg_ptr126>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr126+4>>2]=HEAP32[tempDoublePtr+4>>2];
 _out(221115520,$vararg_buffer122);
 $773 = HEAP32[34180920>>2]|0;
 $774 = $773 & 256;
 $775 = ($774|0)!=(0);
 $776 = ($right_answer_made$4|0)==(0);
 $or$cond14 = $775 & $776;
 $777 = $or$cond14&1;
 $iret$0 = $777 ^ 1;
 $$0 = $iret$0;
 STACKTOP = sp;return ($$0|0);
}
function _searchr($ptree,$alpha,$beta,$turn,$depth) {
 $ptree = $ptree|0;
 $alpha = $alpha|0;
 $beta = $beta|0;
 $turn = $turn|0;
 $depth = $depth|0;
 var $$0 = 0, $$01$ = 0, $$01$ph = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ch$0 = 0, $depth_reduced$0 = 0, $dvalue$0 = 0.0, $extension$0 = 0, $first_move$0 = 0, $first_move$0$ph = 0, $i$03$i = 0, $index$01$i = 0, $new_depth$0 = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond5$not = 0, $or$cond6 = 0, $root_move_temp$i = 0, $storemerge = 0;
 var $str$i = 0, $value$0 = 0, $value$1 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer26 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0;
 var $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer26 = sp + 104|0;
 $vararg_buffer20 = sp + 56|0;
 $vararg_buffer13 = sp + 80|0;
 $vararg_buffer8 = sp + 40|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $root_move_temp$i = sp + 24|0;
 $str$i = sp + 128|0;
 $0 = (($ptree) + 2656|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ptree) + 2660|0);
 HEAP32[$2>>2] = $1;
 $3 = (($ptree) + 142520|0);
 $4 = (984 + ($turn)|0);
 $5 = (($ptree) + 2648|0);
 $6 = ($turn|0)!=(0);
 $7 = $turn ^ 1;
 $8 = ($turn|0)==(1);
 $9 = (($ptree) + 593|0);
 $10 = (($ptree) + 572074|0);
 $11 = (($ptree) + 572073|0);
 $12 = (0 - ($beta))|0;
 $13 = (($ptree) + 75368|0);
 $14 = (($ptree) + 572072|0);
 $15 = (($ptree) + 594|0);
 $16 = (($ptree) + 7264|0);
 $17 = (($ptree) + 7780|0);
 $18 = (($ptree) + 7784|0);
 $$01$ph = $alpha;$first_move$0$ph = 1;
 L1: while(1) {
  $19 = (0 - ($$01$ph))|0;
  $20 = $$01$ph ^ -1;
  $21 = (($$01$ph) + 1)|0;
  $first_move$0 = $first_move$0$ph;
  while(1) {
   $22 = HEAP32[34183992>>2]|0;
   $23 = ($22|0)>(0);
   if ($23) {
    $i$03$i = 0;
   } else {
    label = 61;
    break L1;
   }
   while(1) {
    $26 = ((33559672 + ($i$03$i<<4)|0) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $27 & 1;
    $29 = ($28|0)==(0);
    $25 = (($i$03$i) + 1)|0;
    if ($29) {
     break;
    }
    $24 = ($25|0)<($22|0);
    if ($24) {
     $i$03$i = $25;
    } else {
     label = 61;
     break L1;
    }
   }
   $30 = $27 | 1;
   HEAP32[$26>>2] = $30;
   $31 = ((33559672 + ($i$03$i<<4)|0) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   HEAP32[$3>>2] = $32;
   HEAP32[34184032>>2] = $i$03$i;
   $33 = HEAP32[34184080>>2]|0;
   $34 = ($33|0)>(5);
   do {
    if ($34) {
     $35 = (_str_CSA_move($32)|0);
     $36 = HEAP32[34183992>>2]|0;
     HEAP32[$vararg_buffer>>2] = $25;
     $vararg_ptr1 = (($vararg_buffer) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $36;
     (_snprintf($str$i,9,221116040,$vararg_buffer)|0);
     $37 = HEAP32[$26>>2]|0;
     $38 = $37 & 2;
     $39 = ($38|0)==(0);
     if ($39) {
      $43 = HEAP8[$4>>0]|0;
      $44 = $43 << 24 >> 24;
      HEAP32[$vararg_buffer8>>2] = $str$i;
      $vararg_ptr11 = (($vararg_buffer8) + 4|0);
      HEAP32[$vararg_ptr11>>2] = $44;
      $vararg_ptr12 = (($vararg_buffer8) + 8|0);
      HEAP32[$vararg_ptr12>>2] = $35;
      _out(221116080,$vararg_buffer8);
      break;
     } else {
      $40 = HEAP32[34184080>>2]|0;
      $41 = HEAP8[$4>>0]|0;
      $42 = $41 << 24 >> 24;
      HEAP32[$vararg_buffer2>>2] = $40;
      $vararg_ptr5 = (($vararg_buffer2) + 4|0);
      HEAP32[$vararg_ptr5>>2] = $str$i;
      $vararg_ptr6 = (($vararg_buffer2) + 8|0);
      HEAP32[$vararg_ptr6>>2] = $42;
      $vararg_ptr7 = (($vararg_buffer2) + 12|0);
      HEAP32[$vararg_ptr7>>2] = $35;
      _out(221116048,$vararg_buffer2);
      break;
     }
    }
   } while(0);
   $45 = $5;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = (($45) + 4)|0;
   $49 = $48;
   $50 = HEAP32[$49>>2]|0;
   $51 = HEAP32[$3>>2]|0;
   if ($6) {
    _make_move_w($ptree,$51,1);
    if ($8) {
     $56 = HEAP8[$9>>0]|0;
     $57 = $56&255;
     $58 = (_is_black_attacked($ptree,$57)|0);
     $59 = ($58|0)==(0);
     if ($59) {
      $extension$0 = -8;$storemerge = 0;
     } else {
      label = 15;
     }
    } else {
     label = 13;
    }
   } else {
    _make_move_b($ptree,$51,1);
    label = 13;
   }
   if ((label|0) == 13) {
    label = 0;
    $52 = HEAP8[$15>>0]|0;
    $53 = $52&255;
    $54 = (_is_white_attacked($ptree,$53)|0);
    $55 = ($54|0)==(0);
    if ($55) {
     $extension$0 = -8;$storemerge = 0;
    } else {
     label = 15;
    }
   }
   if ((label|0) == 15) {
    label = 0;
    $60 = HEAP32[$13>>2]|0;
    $61 = (($60) + 1)|0;
    HEAP32[$13>>2] = $61;
    $62 = HEAP8[$14>>0]|0;
    $63 = $62&255;
    $64 = (($63) + 1)|0;
    $65 = $64&255;
    $extension$0 = 0;$storemerge = $65;
   }
   HEAP8[$10>>0] = $storemerge;
   $66 = ($first_move$0|0)==(0);
   $67 = (($extension$0) + ($depth))|0;
   if ($66) {
    $75 = ($67|0)>(15);
    if ($75) {
     $76 = HEAP8[$11>>0]|0;
     $77 = ($76<<24>>24)==(0);
     if ($77) {
      $78 = HEAP32[$3>>2]|0;
      $79 = $78 & 7864320;
      $80 = ($79|0)==(0);
      if ($80) {
       $81 = $78 & 16384;
       $82 = ($81|0)==(0);
       $83 = $78 & 491520;
       $84 = ($83|0)==(131072);
       $or$cond = $82 | $84;
       if ($or$cond) {
        $85 = (($67) + -8)|0;
        $depth_reduced$0 = 8;$new_depth$0 = $85;
       } else {
        $depth_reduced$0 = 0;$new_depth$0 = $67;
       }
      } else {
       $depth_reduced$0 = 0;$new_depth$0 = $67;
      }
     } else {
      $depth_reduced$0 = 0;$new_depth$0 = $67;
     }
    } else {
     $depth_reduced$0 = 0;$new_depth$0 = $67;
    }
    $86 = (_search($ptree,$20,$19,$7,$new_depth$0,2,476)|0);
    $87 = (0 - ($86))|0;
    $88 = HEAP32[34183984>>2]|0;
    $notlhs = ($88|0)!=(0);
    $notrhs = ($$01$ph|0)>=($87|0);
    $or$cond5$not = $notrhs | $notlhs;
    $89 = ($depth_reduced$0|0)==(0);
    $or$cond6 = $or$cond5$not | $89;
    if ($or$cond6) {
     $94 = $88;$value$0 = $87;
    } else {
     $90 = (($depth_reduced$0) + ($new_depth$0))|0;
     $91 = (_search($ptree,$20,$19,$7,$90,2,476)|0);
     $92 = (0 - ($91))|0;
     $$pre = HEAP32[34183984>>2]|0;
     $94 = $$pre;$value$0 = $92;
    }
    $93 = ($94|0)==(0);
    if (!($93)) {
     label = 33;
     break L1;
    }
    $96 = ($$01$ph|0)<($value$0|0);
    if ($96) {
     $97 = HEAP32[221102520>>2]|0;
     $98 = ($97|0)==(-1);
     if (!($98)) {
      $99 = HEAP32[221102528>>2]|0;
      $100 = HEAP32[$3>>2]|0;
      $101 = (_str_CSA_move($100)|0);
      $102 = $5;
      $103 = $102;
      $104 = HEAP32[$103>>2]|0;
      $105 = (($102) + 4)|0;
      $106 = $105;
      $107 = HEAP32[$106>>2]|0;
      $108 = HEAP32[221102536>>2]|0;
      $109 = HEAP32[34184080>>2]|0;
      $110 = ($108|0)<=($109|0);
      $111 = $110 ? 221115752 : 221115760;
      HEAP32[$vararg_buffer13>>2] = $99;
      $vararg_ptr16 = (($vararg_buffer13) + 4|0);
      HEAP32[$vararg_ptr16>>2] = $101;
      $vararg_ptr17 = (($vararg_buffer13) + 8|0);
      HEAP32[$vararg_ptr17>>2] = $21;
      $vararg_ptr18 = (($vararg_buffer13) + 12|0);
      $112 = $vararg_ptr18;
      $113 = $112;
      HEAP32[$113>>2] = $104;
      $114 = (($112) + 4)|0;
      $115 = $114;
      HEAP32[$115>>2] = $107;
      $vararg_ptr19 = (($vararg_buffer13) + 20|0);
      HEAP32[$vararg_ptr19>>2] = $111;
      (_sckt_out($97,221115720,$vararg_buffer13)|0);
     }
     HEAP32[34181096>>2] = 0;
     $116 = (_search($ptree,$12,$19,$7,$67,2,476)|0);
     $117 = (0 - ($116))|0;
     $118 = HEAP32[34183984>>2]|0;
     $119 = ($118|0)==(0);
     if ($119) {
      $value$1 = $117;
     } else {
      label = 40;
      break L1;
     }
    } else {
     $value$1 = $value$0;
    }
   } else {
    $68 = (_search($ptree,$12,$19,$7,$67,2,476)|0);
    $69 = (0 - ($68))|0;
    $70 = HEAP32[34183984>>2]|0;
    $71 = ($70|0)==(0);
    if (!($71)) {
     label = 18;
     break L1;
    }
    $73 = ($$01$ph|0)<($69|0);
    if ($73) {
     $value$1 = $69;
    } else {
     label = 22;
     break L1;
    }
   }
   $127 = HEAP32[$3>>2]|0;
   if ($6) {
    _unmake_move_w($ptree,$127,1);
   } else {
    _unmake_move_b($ptree,$127,1);
   }
   $128 = $5;
   $129 = $128;
   $130 = HEAP32[$129>>2]|0;
   $131 = (($128) + 4)|0;
   $132 = $131;
   $133 = HEAP32[$132>>2]|0;
   $134 = (_i64Subtract(($130|0),($133|0),($47|0),($50|0))|0);
   $135 = tempRet0;
   $136 = HEAP32[34184032>>2]|0;
   $137 = (33559672 + ($136<<4)|0);
   $138 = $137;
   $139 = $138;
   HEAP32[$139>>2] = $134;
   $140 = (($138) + 4)|0;
   $141 = $140;
   HEAP32[$141>>2] = $135;
   $142 = ($$01$ph|0)<($value$1|0);
   if ($142) {
    break;
   } else {
    $first_move$0 = 0;
   }
  }
  $143 = (_get_elapsed(34181024)|0);
  $144 = ($143|0)<(0);
  if ($144) {
   label = 59;
   break;
  }
  $145 = HEAP32[34184032>>2]|0;
  $146 = ($145|0)==(0);
  if (!($146)) {
   $147 = (33559672 + ($145<<4)|0);
   ;HEAP32[$root_move_temp$i+0>>2]=HEAP32[$147+0>>2]|0;HEAP32[$root_move_temp$i+4>>2]=HEAP32[$147+4>>2]|0;HEAP32[$root_move_temp$i+8>>2]=HEAP32[$147+8>>2]|0;HEAP32[$root_move_temp$i+12>>2]=HEAP32[$147+12>>2]|0;
   $148 = ($145|0)>(0);
   if ($148) {
    $index$01$i = $145;
    while(1) {
     $149 = (33559672 + ($index$01$i<<4)|0);
     $150 = (($index$01$i) + -1)|0;
     $151 = (33559672 + ($150<<4)|0);
     ;HEAP32[$149+0>>2]=HEAP32[$151+0>>2]|0;HEAP32[$149+4>>2]=HEAP32[$151+4>>2]|0;HEAP32[$149+8>>2]=HEAP32[$151+8>>2]|0;HEAP32[$149+12>>2]=HEAP32[$151+12>>2]|0;
     $152 = ($150|0)>(0);
     if ($152) {
      $index$01$i = $150;
     } else {
      break;
     }
    }
   }
   ;HEAP32[33559672+0>>2]=HEAP32[$root_move_temp$i+0>>2]|0;HEAP32[33559672+4>>2]=HEAP32[$root_move_temp$i+4>>2]|0;HEAP32[33559672+8>>2]=HEAP32[$root_move_temp$i+8>>2]|0;HEAP32[33559672+12>>2]=HEAP32[$root_move_temp$i+12>>2]|0;
  }
  HEAP32[34184032>>2] = 0;
  $153 = ($value$1|0)<($beta|0);
  if (!($153)) {
   label = 57;
   break;
  }
  _memcpy(($16|0),($17|0),516)|0;
  HEAP32[34184016>>2] = $value$1;
  $154 = HEAP32[221102520>>2]|0;
  $155 = ($154|0)==(-1);
  if (!($155)) {
   $156 = HEAP32[221102528>>2]|0;
   $157 = HEAP32[$18>>2]|0;
   $158 = (_str_CSA_move($157)|0);
   $159 = $5;
   $160 = $159;
   $161 = HEAP32[$160>>2]|0;
   $162 = (($159) + 4)|0;
   $163 = $162;
   $164 = HEAP32[$163>>2]|0;
   $165 = HEAP32[221102536>>2]|0;
   $166 = HEAP32[34184080>>2]|0;
   $167 = ($165|0)<=($166|0);
   $168 = $167 ? 221115752 : 221115760;
   HEAP32[$vararg_buffer26>>2] = $156;
   $vararg_ptr29 = (($vararg_buffer26) + 4|0);
   HEAP32[$vararg_ptr29>>2] = $158;
   $vararg_ptr30 = (($vararg_buffer26) + 8|0);
   HEAP32[$vararg_ptr30>>2] = $value$1;
   $vararg_ptr31 = (($vararg_buffer26) + 12|0);
   $169 = $vararg_ptr31;
   $170 = $169;
   HEAP32[$170>>2] = $161;
   $171 = (($169) + 4)|0;
   $172 = $171;
   HEAP32[$172>>2] = $164;
   $vararg_ptr32 = (($vararg_buffer26) + 20|0);
   HEAP32[$vararg_ptr32>>2] = $168;
   (_sckt_out($154,221116112,$vararg_buffer26)|0);
  }
  $175 = HEAP32[34181024>>2]|0;
  $176 = HEAP32[34181040>>2]|0;
  $177 = (($175) - ($176))|0;
  _out_pv($ptree,$value$1,$turn,$177);
  if ($153) {
   $$01$ph = $value$1;$first_move$0$ph = 0;
  } else {
   $$0 = $value$1;
   label = 62;
   break;
  }
 }
 if ((label|0) == 18) {
  $72 = HEAP32[$3>>2]|0;
  if ($6) {
   _unmake_move_w($ptree,$72,1);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   _unmake_move_b($ptree,$72,1);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 22) {
  $74 = HEAP32[$3>>2]|0;
  if ($6) {
   _unmake_move_w($ptree,$74,1);
   $$0 = $69;
   STACKTOP = sp;return ($$0|0);
  } else {
   _unmake_move_b($ptree,$74,1);
   $$0 = $69;
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 33) {
  $95 = HEAP32[$3>>2]|0;
  if ($6) {
   _unmake_move_w($ptree,$95,1);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   _unmake_move_b($ptree,$95,1);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 40) {
  $120 = HEAP32[$3>>2]|0;
  if ($6) {
   _unmake_move_w($ptree,$120,1);
  } else {
   _unmake_move_b($ptree,$120,1);
  }
  _pv_close($ptree,2,9);
  $121 = HEAP32[34181032>>2]|0;
  HEAP32[34181024>>2] = $121;
  HEAP32[34184016>>2] = $21;
  _memcpy(($16|0),($17|0),516)|0;
  $122 = (+($$01$ph|0));
  if ($6) {
   $123 = -$122;
   $ch$0 = 45;$dvalue$0 = $123;
  } else {
   $ch$0 = 43;$dvalue$0 = $122;
  }
  $124 = HEAP32[$3>>2]|0;
  $125 = (_str_CSA_move($124)|0);
  $126 = $dvalue$0 / 100.0;
  HEAPF64[tempDoublePtr>>3]=$126;HEAP32[$vararg_buffer20>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer20+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr23 = (($vararg_buffer20) + 8|0);
  HEAP32[$vararg_ptr23>>2] = $ch$0;
  $vararg_ptr24 = (($vararg_buffer20) + 12|0);
  HEAP32[$vararg_ptr24>>2] = $125;
  $vararg_ptr25 = (($vararg_buffer20) + 16|0);
  HEAP32[$vararg_ptr25>>2] = $ch$0;
  _out(221115768,$vararg_buffer20);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 57) {
  _pv_close($ptree,2,9);
  _memcpy(($16|0),($17|0),516)|0;
  HEAP32[34184016>>2] = $value$1;
  $$0 = $value$1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 59) {
  $173 = HEAP32[34180920>>2]|0;
  $174 = $173 | 4096;
  HEAP32[34180920>>2] = $174;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 61) {
  $178 = HEAP32[34183984>>2]|0;
  $179 = ($178|0)==(0);
  $$01$ = $179 ? $$01$ph : 0;
  $$0 = $$01$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 62) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _out_pv($ptree,$value,$turn,$time) {
 $ptree = $ptree|0;
 $value = $value|0;
 $turn = $turn|0;
 $time = $time|0;
 var $$0$lcssa = 0, $$036 = 0, $$126 = 0, $$126$us = 0, $$lcssa = 0, $$lcssa20 = 0, $$ph = 0, $$ph31 = 0, $$pre = 0, $$pre$phi84Z2D = 0, $$pre$phi86Z2D = 0, $$pre$phiZ2D = 0, $$pre76 = 0, $$pre77 = 0, $$pre81 = 0, $$pre83 = 0, $$pre85 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dummy = 0, $i$011 = 0, $i$011$us = 0, $ispos = 0, $neg = 0, $or$cond = 0, $or$cond88 = 0, $ply$0$lcssa = 0, $ply$033 = 0, $ply$1$lcssa14 = 0, $ply$1$lcssa15 = 0, $ply$122 = 0;
 var $ply$122$us = 0, $ply$2 = 0, $ply$23 = 0, $ply$3 = 0, $ply$3$in$ph = 0, $ply$310 = 0, $ply$38 = 0, $str$0$ph = 0, $tt$0$lcssa = 0, $tt$035 = 0, $tt$1$lcssa17 = 0, $tt$124 = 0, $tt$124$us = 0, $tt$2 = 0, $tt$24 = 0, $tt$3$ph = 0, $tt$39 = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0;
 var $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer26 = sp + 96|0;
 $vararg_buffer23 = sp + 48|0;
 $vararg_buffer21 = sp + 16|0;
 $vararg_buffer16 = sp + 24|0;
 $vararg_buffer14 = sp + 88|0;
 $vararg_buffer9 = sp;
 $vararg_buffer7 = sp + 40|0;
 $vararg_buffer3 = sp + 72|0;
 $vararg_buffer = sp + 56|0;
 $dummy = sp + 100|0;
 $0 = HEAP32[34184080>>2]|0;
 $1 = ($0|0)>(4);
 if ($1) {
  $$pre83 = (0 - ($value))|0;
  $$pre$phi84Z2D = $$pre83;
  label = 5;
 } else {
  $ispos = ($value|0)>(-1);
  $neg = (0 - ($value))|0;
  $2 = $ispos ? $value : $neg;
  $3 = ($2|0)>(30000);
  if ($3) {
   $$pre$phi84Z2D = $neg;
   label = 5;
  } else {
   $$pre81 = (($ptree) + 7777|0);
   $$ph31 = 0;$$pre$phiZ2D = $$pre81;
  }
 }
 do {
  if ((label|0) == 5) {
   $4 = (_str_time_symple($time)|0);
   $5 = ($turn|0)!=(0);
   $6 = $5 ? $$pre$phi84Z2D : $value;
   $7 = (+($6|0));
   $8 = $7 / 100.0;
   $9 = (($ptree) + 7777|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if ($11) {
    $$ph31 = 1;$$pre$phiZ2D = $9;
   } else {
    $12 = HEAP32[34184032>>2]|0;
    $13 = ((33559672 + ($12<<4)|0) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14 & 2;
    $16 = ($15|0)==(0);
    if ($16) {
     HEAP32[$vararg_buffer3>>2] = $4;
     $vararg_ptr6 = (($vararg_buffer3) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$8;HEAP32[$vararg_ptr6>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr6+4>>2]=HEAP32[tempDoublePtr+4>>2];
     _out(221115824,$vararg_buffer3);
     $$ph31 = 1;$$pre$phiZ2D = $9;
     break;
    } else {
     $17 = HEAP32[34184080>>2]|0;
     HEAP32[$vararg_buffer>>2] = $17;
     $vararg_ptr1 = (($vararg_buffer) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $4;
     $vararg_ptr2 = (($vararg_buffer) + 8|0);
     HEAPF64[tempDoublePtr>>3]=$8;HEAP32[$vararg_ptr2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr2+4>>2]=HEAP32[tempDoublePtr+4>>2];
     _out(221115808,$vararg_buffer);
     $$ph31 = 1;$$pre$phiZ2D = $9;
     break;
    }
   }
  }
 } while(0);
 $18 = HEAP8[$$pre$phiZ2D>>0]|0;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $$0$lcssa = $value;$ply$0$lcssa = 1;$tt$0$lcssa = $turn;
 } else {
  $$036 = $value;$ply$033 = 1;$tt$035 = $turn;
  while(1) {
   if ($$ph31) {
    $20 = ($ply$033|0)>(1);
    if ($20) {
     $21 = (($ply$033) + -1)|0;
     $22 = (($21|0) % 5)&-1;
     $23 = ($22|0)==(0);
     if ($23) {
      _out(221115840,$vararg_buffer7);
     }
    }
    $24 = ((($ptree) + ($ply$033<<2)|0) + 7264|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (_str_CSA_move($25)|0);
    $27 = (984 + ($tt$035)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    HEAP32[$vararg_buffer9>>2] = $ply$033;
    $vararg_ptr12 = (($vararg_buffer9) + 4|0);
    HEAP32[$vararg_ptr12>>2] = $29;
    $vararg_ptr13 = (($vararg_buffer9) + 8|0);
    HEAP32[$vararg_ptr13>>2] = $26;
    _out(221115864,$vararg_buffer9);
    $$pre$phi86Z2D = $24;
   } else {
    $$pre85 = ((($ptree) + ($ply$033<<2)|0) + 7264|0);
    $$pre$phi86Z2D = $$pre85;
   }
   $30 = ($tt$035|0)==(0);
   $31 = HEAP32[$$pre$phi86Z2D>>2]|0;
   if ($30) {
    _make_move_b($ptree,$31,$ply$033);
   } else {
    _make_move_w($ptree,$31,$ply$033);
   }
   $32 = $tt$035 ^ 1;
   $33 = (0 - ($$036))|0;
   $34 = (($ply$033) + 1)|0;
   $35 = HEAP8[$$pre$phiZ2D>>0]|0;
   $36 = $35&255;
   $37 = ($ply$033|0)<($36|0);
   if ($37) {
    $$036 = $33;$ply$033 = $34;$tt$035 = $32;
   } else {
    $$0$lcssa = $33;$ply$0$lcssa = $34;$tt$0$lcssa = $32;
    break;
   }
  }
 }
 $38 = (($ptree) + 7776|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = ($39<<24>>24)==(6);
 $41 = ($ply$0$lcssa|0)<(128);
 $or$cond88 = $40 & $41;
 L28: do {
  if ($or$cond88) {
   $42 = (($ptree) + 502964|0);
   $43 = (($ptree) + 593|0);
   $44 = (($ptree) + 594|0);
   L30: do {
    if ($$ph31) {
     $$126$us = $$0$lcssa;$ply$122$us = $ply$0$lcssa;$tt$124$us = $tt$0$lcssa;
     while(1) {
      HEAP32[$dummy>>2] = 0;
      $45 = ((($ptree) + ($ply$122$us<<2)|0) + 76468|0);
      HEAP32[$45>>2] = 0;
      $46 = (_hash_probe($ptree,$ply$122$us,0,$tt$124$us,-32600,32600,$dummy)|0);
      $47 = ($46|0)==(3);
      if (!($47)) {
       $ply$2 = $ply$122$us;$tt$2 = $tt$124$us;
       label = 47;
       break L28;
      }
      $48 = HEAP32[$42>>2]|0;
      $49 = ($$126$us|0)==($48|0);
      if (!($49)) {
       $ply$2 = $ply$122$us;$tt$2 = $tt$124$us;
       label = 47;
       break L28;
      }
      $50 = HEAP32[$45>>2]|0;
      $51 = (_is_move_valid($ptree,$50,$tt$124$us)|0);
      $52 = ($51|0)==(0);
      if ($52) {
       $ply$2 = $ply$122$us;$tt$2 = $tt$124$us;
       label = 47;
       break L28;
      }
      $53 = HEAP32[$45>>2]|0;
      $54 = ((($ptree) + ($ply$122$us<<2)|0) + 7264|0);
      HEAP32[$54>>2] = $53;
      $55 = ($ply$122$us|0)>(1);
      if ($55) {
       $i$011$us = 1;
       while(1) {
        $81 = ((($ptree) + ($i$011$us<<2)|0) + 7264|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = ($82|0)==($53|0);
        $57 = (($i$011$us) + 1)|0;
        if ($83) {
         $ply$2 = $ply$122$us;$tt$2 = $tt$124$us;
         label = 47;
         break L28;
        }
        $56 = ($57|0)<($ply$122$us|0);
        if ($56) {
         $i$011$us = $57;
        } else {
         break;
        }
       }
       if ($55) {
        $58 = (($ply$122$us) + -1)|0;
        $59 = (($58|0) % 5)&-1;
        $60 = ($59|0)==(0);
        if ($60) {
         _out(221115840,$vararg_buffer14);
         $$pre = HEAP32[$54>>2]|0;
         $61 = $$pre;
        } else {
         $61 = $53;
        }
       } else {
        $61 = $53;
       }
      } else {
       $61 = $53;
      }
      $62 = (_str_CSA_move($61)|0);
      $63 = (984 + ($tt$124$us)|0);
      $64 = HEAP8[$63>>0]|0;
      $65 = $64 << 24 >> 24;
      HEAP32[$vararg_buffer16>>2] = $ply$122$us;
      $vararg_ptr19 = (($vararg_buffer16) + 4|0);
      HEAP32[$vararg_ptr19>>2] = $65;
      $vararg_ptr20 = (($vararg_buffer16) + 8|0);
      HEAP32[$vararg_ptr20>>2] = $62;
      _out(221115880,$vararg_buffer16);
      $$pre76 = HEAP32[$54>>2]|0;
      $66 = ($tt$124$us|0)==(0);
      if ($66) {
       _make_move_b($ptree,$$pre76,$ply$122$us);
       $71 = HEAP8[$43>>0]|0;
       $72 = $71&255;
       $73 = (_is_black_attacked($ptree,$72)|0);
       $74 = ($73|0)==(0);
       if (!($74)) {
        $$lcssa20 = $45;$ply$1$lcssa15 = $ply$122$us;
        label = 45;
        break L30;
       }
      } else {
       _make_move_w($ptree,$$pre76,$ply$122$us);
       $67 = HEAP8[$44>>0]|0;
       $68 = $67&255;
       $69 = (_is_white_attacked($ptree,$68)|0);
       $70 = ($69|0)==(0);
       if (!($70)) {
        $$lcssa = $45;$ply$1$lcssa14 = $ply$122$us;$tt$1$lcssa17 = $tt$124$us;
        label = 44;
        break L30;
       }
      }
      $75 = HEAP8[$$pre$phiZ2D>>0]|0;
      $76 = (($75) + 1)<<24>>24;
      HEAP8[$$pre$phiZ2D>>0] = $76;
      $77 = $tt$124$us ^ 1;
      $78 = (0 - ($$126$us))|0;
      $79 = (($ply$122$us) + 1)|0;
      $80 = ($79|0)<(128);
      if ($80) {
       $$126$us = $78;$ply$122$us = $79;$tt$124$us = $77;
      } else {
       $ply$2 = $79;$tt$2 = $77;
       label = 47;
       break L28;
      }
     }
    } else {
     $$126 = $$0$lcssa;$ply$122 = $ply$0$lcssa;$tt$124 = $tt$0$lcssa;
     while(1) {
      HEAP32[$dummy>>2] = 0;
      $84 = ((($ptree) + ($ply$122<<2)|0) + 76468|0);
      HEAP32[$84>>2] = 0;
      $85 = (_hash_probe($ptree,$ply$122,0,$tt$124,-32600,32600,$dummy)|0);
      $86 = ($85|0)==(3);
      if (!($86)) {
       $ply$2 = $ply$122;$tt$2 = $tt$124;
       label = 47;
       break L28;
      }
      $87 = HEAP32[$42>>2]|0;
      $88 = ($$126|0)==($87|0);
      if (!($88)) {
       $ply$2 = $ply$122;$tt$2 = $tt$124;
       label = 47;
       break L28;
      }
      $89 = HEAP32[$84>>2]|0;
      $90 = (_is_move_valid($ptree,$89,$tt$124)|0);
      $91 = ($90|0)==(0);
      if ($91) {
       $ply$2 = $ply$122;$tt$2 = $tt$124;
       label = 47;
       break L28;
      }
      $92 = HEAP32[$84>>2]|0;
      $93 = ((($ptree) + ($ply$122<<2)|0) + 7264|0);
      HEAP32[$93>>2] = $92;
      $94 = ($ply$122|0)>(1);
      if ($94) {
       $i$011 = 1;
       while(1) {
        $97 = ((($ptree) + ($i$011<<2)|0) + 7264|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = ($98|0)==($92|0);
        $96 = (($i$011) + 1)|0;
        if ($99) {
         $ply$2 = $ply$122;$tt$2 = $tt$124;
         label = 47;
         break L28;
        }
        $95 = ($96|0)<($ply$122|0);
        if ($95) {
         $i$011 = $96;
        } else {
         break;
        }
       }
      }
      $100 = ($tt$124|0)==(0);
      if ($100) {
       _make_move_b($ptree,$92,$ply$122);
       $105 = HEAP8[$43>>0]|0;
       $106 = $105&255;
       $107 = (_is_black_attacked($ptree,$106)|0);
       $108 = ($107|0)==(0);
       if (!($108)) {
        $$lcssa20 = $84;$ply$1$lcssa15 = $ply$122;
        label = 45;
        break L30;
       }
      } else {
       _make_move_w($ptree,$92,$ply$122);
       $101 = HEAP8[$44>>0]|0;
       $102 = $101&255;
       $103 = (_is_white_attacked($ptree,$102)|0);
       $104 = ($103|0)==(0);
       if (!($104)) {
        $$lcssa = $84;$ply$1$lcssa14 = $ply$122;$tt$1$lcssa17 = $tt$124;
        label = 44;
        break L30;
       }
      }
      $111 = HEAP8[$$pre$phiZ2D>>0]|0;
      $112 = (($111) + 1)<<24>>24;
      HEAP8[$$pre$phiZ2D>>0] = $112;
      $113 = $tt$124 ^ 1;
      $114 = (0 - ($$126))|0;
      $115 = (($ply$122) + 1)|0;
      $116 = ($115|0)<(128);
      if ($116) {
       $$126 = $114;$ply$122 = $115;$tt$124 = $113;
      } else {
       $ply$2 = $115;$tt$2 = $113;
       label = 47;
       break L28;
      }
     }
    }
   } while(0);
   if ((label|0) == 44) {
    $109 = HEAP32[$$lcssa>>2]|0;
    _unmake_move_w($ptree,$109,$ply$1$lcssa14);
    if ($$ph31) {
     $ply$23 = $ply$1$lcssa14;$tt$24 = $tt$1$lcssa17;
     label = 48;
     break;
    } else {
     $$ph = 0;$ply$3$in$ph = $ply$1$lcssa14;$tt$3$ph = $tt$1$lcssa17;
     break;
    }
   }
   else if ((label|0) == 45) {
    $110 = HEAP32[$$lcssa20>>2]|0;
    _unmake_move_b($ptree,$110,$ply$1$lcssa15);
    if ($$ph31) {
     $ply$23 = $ply$1$lcssa15;$tt$24 = 0;
     label = 48;
     break;
    } else {
     $$ph = 0;$ply$3$in$ph = $ply$1$lcssa15;$tt$3$ph = 0;
     break;
    }
   }
  } else {
   $ply$2 = $ply$0$lcssa;$tt$2 = $tt$0$lcssa;
   label = 47;
  }
 } while(0);
 if ((label|0) == 47) {
  if ($$ph31) {
   $ply$23 = $ply$2;$tt$24 = $tt$2;
   label = 48;
  } else {
   $$ph = 0;$ply$3$in$ph = $ply$2;$tt$3$ph = $tt$2;
  }
 }
 L67: do {
  if ((label|0) == 48) {
   $117 = HEAP8[$38>>0]|0;
   $118 = ($117<<24>>24)==(0);
   if ($118) {
    $$ph = 1;$ply$3$in$ph = $ply$23;$tt$3$ph = $tt$24;
   } else {
    $119 = (($ply$23) + -1)|0;
    $120 = (($119|0) % 5)&-1;
    $121 = ($120|0)!=(0);
    $122 = ($ply$23|0)==(1);
    $or$cond = $121 | $122;
    if ($or$cond) {
     $124 = $117;
    } else {
     _out(221115840,$vararg_buffer21);
     $$pre77 = HEAP8[$38>>0]|0;
     $124 = $$pre77;
    }
    $123 = $124&255;
    switch ($123|0) {
    case 10:  {
     $str$0$ph = 221116008;
     break;
    }
    case 2:  {
     $str$0$ph = 221115896;
     break;
    }
    case 1:  {
     $str$0$ph = 221115912;
     break;
    }
    case 5: case 4:  {
     $str$0$ph = 221115928;
     break;
    }
    case 7:  {
     $str$0$ph = 221115944;
     break;
    }
    case 6:  {
     $str$0$ph = 221115960;
     break;
    }
    case 8:  {
     $str$0$ph = 221115976;
     break;
    }
    case 9:  {
     $str$0$ph = 221115992;
     break;
    }
    default: {
     $$ph = 1;$ply$3$in$ph = $ply$23;$tt$3$ph = $tt$24;
     break L67;
    }
    }
    HEAP32[$vararg_buffer23>>2] = $str$0$ph;
    _out(221116024,$vararg_buffer23);
    $$ph = 1;$ply$3$in$ph = $ply$23;$tt$3$ph = $tt$24;
   }
  }
 } while(0);
 $ply$38 = (($ply$3$in$ph) + -1)|0;
 $125 = ($ply$38|0)>(0);
 if ($125) {
  $ply$310 = $ply$38;$tt$39 = $tt$3$ph;
  while(1) {
   $126 = $tt$39 ^ 1;
   $127 = ($tt$39|0)==(1);
   $128 = ((($ptree) + ($ply$310<<2)|0) + 7264|0);
   $129 = HEAP32[$128>>2]|0;
   if ($127) {
    _unmake_move_b($ptree,$129,$ply$310);
   } else {
    _unmake_move_w($ptree,$129,$ply$310);
   }
   $ply$3 = (($ply$310) + -1)|0;
   $130 = ($ply$3|0)>(0);
   if ($130) {
    $ply$310 = $ply$3;$tt$39 = $126;
   } else {
    break;
   }
  }
 }
 if (!($$ph)) {
  STACKTOP = sp;return;
 }
 _out(221116032,$vararg_buffer26);
 STACKTOP = sp;return;
}
function _search($ptree,$alpha,$beta,$turn,$depth,$ply,$state_node) {
 $ptree = $ptree|0;
 $alpha = $alpha|0;
 $beta = $beta|0;
 $turn = $turn|0;
 $depth = $depth|0;
 $ply = $ply|0;
 $state_node = $state_node|0;
 var $$ = 0, $$$1 = 0, $$$i = 0, $$$i$i = 0, $$0 = 0, $$0$i = 0, $$01 = 0, $$1$ph$ph = 0, $$15 = 0, $$16 = 0, $$9 = 0, $$lcssa$i = 0, $$not = 0, $$not112 = 0, $$pre = 0, $$pre96 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bound$0 = 0, $brmerge = 0, $depth_reduced$0 = 0;
 var $depth_reduced$1 = 0, $extension$0$ph = 0, $extension$1 = 0, $first_move_expanded$0$ph = 0, $first_move_expanded$0$ph$ph = 0, $i$01$i = 0, $i$01$us$i = 0, $new_depth1$0 = 0, $new_depth1$1 = 0, $new_depth1$2 = 0, $notlhs = 0, $notlhs41 = 0, $notrhs = 0, $notrhs42 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond11 = 0, $or$cond113 = 0, $or$cond114 = 0, $or$cond12 = 0;
 var $or$cond14 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond2 = 0, $or$cond20 = 0, $or$cond21$not = 0, $or$cond22 = 0, $or$cond23$not = 0, $or$cond25 = 0, $or$cond26 = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond5 = 0, $or$cond6 = 0, $or$cond7 = 0, $or$cond8 = 0, $state_node_new2$0$ph = 0, $state_node_new2$035 = 0, $value$0 = 0, $value$1 = 0;
 var $value$1$$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $state_node;
 $1 = ((($ptree) + ($ply)|0) + 572072|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $4 = ($depth|0)<(8);
 $or$cond = $3 & $4;
 if ($or$cond) {
  $5 = (_search_quies($ptree,$alpha,$beta,$turn,$ply,1)|0);
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($ptree) + 2648|0);
 $7 = $6;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (_i64Add(($9|0),($12|0),1,0)|0);
 $14 = tempRet0;
 $15 = $6;
 $16 = $15;
 HEAP32[$16>>2] = $13;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $14;
 $19 = ($ply|0)>(126);
 if ($19) {
  $20 = (_evaluate($ptree,$ply,$turn)|0);
  $21 = ($20|0)>($alpha|0);
  $22 = ($20|0)<($beta|0);
  $or$cond2 = $21 & $22;
  if ($or$cond2) {
   $23 = (($ply) + -1)|0;
   $24 = ((($ptree) + ($23<<2)|0) + 142516|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (((($ptree) + (($23*516)|0)|0) + ($23<<2)|0) + 7264|0);
   HEAP32[$26>>2] = $25;
   $27 = $23&255;
   $28 = ((($ptree) + (($23*516)|0)|0) + 7777|0);
   HEAP8[$28>>0] = $27;
   $29 = ((($ptree) + (($23*516)|0)|0) + 7776|0);
   HEAP8[$29>>0] = 0;
   $30 = HEAP32[34184080>>2]|0;
   $31 = $30&255;
   $32 = ((($ptree) + (($23*516)|0)|0) + 7778|0);
   HEAP8[$32>>0] = $31;
  }
  $33 = ((($ptree) + ($ply<<2)|0) + 142516|0);
  HEAP32[$33>>2] = 0;
  $$0 = $20;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = HEAP32[34180952>>2]|0;
 $35 = HEAP32[34180960>>2]|0;
 $36 = (($35) + 1)|0;
 HEAP32[34180960>>2] = $36;
 $37 = ($34>>>0)<($36>>>0);
 if ($37) {
  $38 = (_detect_signals($ptree)|0);
  $39 = ($38|0)==(0);
  if (!($39)) {
   HEAP32[34183984>>2] = 1;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($ptree) + 75400|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 1)|0;
 HEAP32[$40>>2] = $42;
 $43 = ($ply|0)<(4);
 L17: do {
  if ($43) {
   $44 = (_detect_repetition($ptree,$ply,$turn,2)|0);
   $$0$i = $44;
   label = 32;
  } else {
   $45 = (($ptree) + 572204|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + ($ply))|0;
   $48 = (($47) + -1)|0;
   $49 = (($47) + -33)|0;
   $50 = ($49|0)<(0);
   $$$i = $50 ? 0 : $49;
   $51 = (($47) + -3)|0;
   $52 = ($51|0)<($$$i|0);
   if ($52) {
    label = 45;
   } else {
    $53 = (($ptree) + 500|0);
    $54 = ($turn|0)==(0);
    L20: do {
     if ($54) {
      $i$01$us$i = $51;
      while(1) {
       $55 = ((($ptree) + ($i$01$us$i<<3)|0) + 600|0);
       $56 = $55;
       $57 = $56;
       $58 = HEAP32[$57>>2]|0;
       $59 = (($56) + 4)|0;
       $60 = $59;
       $61 = HEAP32[$60>>2]|0;
       $62 = $ptree;
       $63 = $62;
       $64 = HEAP32[$63>>2]|0;
       $65 = (($62) + 4)|0;
       $66 = $65;
       $67 = HEAP32[$66>>2]|0;
       $68 = ($58|0)==($64|0);
       $69 = ($61|0)==($67|0);
       $70 = $68 & $69;
       do {
        if ($70) {
         $71 = HEAP32[$53>>2]|0;
         $72 = ((($ptree) + ($i$01$us$i<<2)|0) + 75444|0);
         $73 = HEAP32[$72>>2]|0;
         $74 = (($48) - ($i$01$us$i))|0;
         $75 = $74 & 1;
         $76 = ($75|0)==(0);
         if (!($76)) {
          $77 = (_is_hand_eq_supe($71,$73)|0);
          $78 = ($77|0)==(0);
          if ($78) {
           break;
          } else {
           label = 33;
           break L17;
          }
         }
         $79 = ($71|0)==($73|0);
         if ($79) {
          $$lcssa$i = $74;
          break L20;
         }
         $80 = (_is_hand_eq_supe($71,$73)|0);
         $81 = ($80|0)==(0);
         if (!($81)) {
          label = 33;
          break L17;
         }
         $82 = (_is_hand_eq_supe($73,$71)|0);
         $83 = ($82|0)==(0);
         if (!($83)) {
          label = 36;
          break L17;
         }
        }
       } while(0);
       $84 = ($i$01$us$i|0)>($$$i|0);
       if (!($84)) {
        label = 45;
        break L17;
       }
       $85 = (($i$01$us$i) + -1)|0;
       $i$01$us$i = $85;
      }
     } else {
      $i$01$i = $51;
      while(1) {
       $86 = ((($ptree) + ($i$01$i<<3)|0) + 600|0);
       $87 = $86;
       $88 = $87;
       $89 = HEAP32[$88>>2]|0;
       $90 = (($87) + 4)|0;
       $91 = $90;
       $92 = HEAP32[$91>>2]|0;
       $93 = $ptree;
       $94 = $93;
       $95 = HEAP32[$94>>2]|0;
       $96 = (($93) + 4)|0;
       $97 = $96;
       $98 = HEAP32[$97>>2]|0;
       $99 = ($89|0)==($95|0);
       $100 = ($92|0)==($98|0);
       $101 = $99 & $100;
       do {
        if ($101) {
         $102 = HEAP32[$53>>2]|0;
         $103 = ((($ptree) + ($i$01$i<<2)|0) + 75444|0);
         $104 = HEAP32[$103>>2]|0;
         $105 = (($48) - ($i$01$i))|0;
         $106 = $105 & 1;
         $107 = ($106|0)==(0);
         if (!($107)) {
          $108 = (_is_hand_eq_supe($104,$102)|0);
          $109 = ($108|0)==(0);
          if ($109) {
           break;
          } else {
           label = 36;
           break L17;
          }
         }
         $110 = ($102|0)==($104|0);
         if ($110) {
          $$lcssa$i = $105;
          break L20;
         }
         $122 = (_is_hand_eq_supe($102,$104)|0);
         $123 = ($122|0)==(0);
         if (!($123)) {
          label = 33;
          break L17;
         }
         $124 = (_is_hand_eq_supe($104,$102)|0);
         $125 = ($124|0)==(0);
         if (!($125)) {
          label = 36;
          break L17;
         }
        }
       } while(0);
       $126 = ($i$01$i|0)>($$$i|0);
       if (!($126)) {
        label = 45;
        break L17;
       }
       $127 = (($i$01$i) + -1)|0;
       $i$01$i = $127;
      }
     }
    } while(0);
    $111 = HEAP8[$1>>0]|0;
    $112 = $111&255;
    $113 = $112 << 1;
    $114 = (($113) + -2)|0;
    $115 = ($114|0)<($$lcssa$i|0);
    if ($115) {
     $116 = (($ply) + -1)|0;
     $117 = ((($ptree) + ($116)|0) + 572072|0);
     $118 = HEAP8[$117>>0]|0;
     $119 = $118&255;
     $120 = $119 << 1;
     $121 = ($120|0)<($$lcssa$i|0);
     $$$i$i = $121 ? 1 : 3;
     $$0$i = $$$i$i;
     label = 32;
    } else {
     label = 42;
    }
   }
  }
 } while(0);
 L46: do {
  if ((label|0) == 32) {
   switch ($$0$i|0) {
   case 1:  {
    break;
   }
   case 3:  {
    $184 = ($ply|0)>(4);
    if (!($184)) {
     label = 45;
     break L46;
    }
    $185 = (($ptree) + 75392|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = (($186) + 1)|0;
    HEAP32[$185>>2] = $187;
    $188 = ((($ptree) + ($ply<<2)|0) + 142516|0);
    HEAP32[$188>>2] = 0;
    $$0 = -32600;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 2:  {
    label = 42;
    break L46;
    break;
   }
   case 5:  {
    label = 36;
    break L46;
    break;
   }
   case 4:  {
    label = 33;
    break L46;
    break;
   }
   default: {
    label = 45;
    break L46;
   }
   }
   $164 = ($alpha|0)<(1);
   $165 = ($beta|0)>(1);
   $or$cond5 = $164 & $165;
   if ($or$cond5) {
    $166 = (($ply) + -1)|0;
    $167 = ((($ptree) + ($166<<2)|0) + 142516|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = (((($ptree) + (($166*516)|0)|0) + ($166<<2)|0) + 7264|0);
    HEAP32[$169>>2] = $168;
    $170 = $166&255;
    $171 = ((($ptree) + (($166*516)|0)|0) + 7777|0);
    HEAP8[$171>>0] = $170;
    $172 = ((($ptree) + (($166*516)|0)|0) + 7776|0);
    HEAP8[$172>>0] = 1;
    $173 = HEAP32[34184080>>2]|0;
    $174 = $173&255;
    $175 = ((($ptree) + (($166*516)|0)|0) + 7778|0);
    HEAP8[$175>>0] = $174;
   }
   $176 = (($ptree) + 75388|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = (($177) + 1)|0;
   HEAP32[$176>>2] = $178;
   $179 = ((($ptree) + ($ply<<2)|0) + 142516|0);
   HEAP32[$179>>2] = 0;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 if ((label|0) == 33) {
  $128 = ($turn|0)!=(0);
  $129 = $128 ? -32599 : 32599;
  $130 = ($129|0)>($alpha|0);
  $131 = ($129|0)<($beta|0);
  $or$cond3 = $130 & $131;
  if ($or$cond3) {
   $132 = (($ply) + -1)|0;
   $133 = ((($ptree) + ($132<<2)|0) + 142516|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (((($ptree) + (($132*516)|0)|0) + ($132<<2)|0) + 7264|0);
   HEAP32[$135>>2] = $134;
   $136 = $132&255;
   $137 = ((($ptree) + (($132*516)|0)|0) + 7777|0);
   HEAP8[$137>>0] = $136;
   $138 = ((($ptree) + (($132*516)|0)|0) + 7776|0);
   HEAP8[$138>>0] = 4;
   $139 = HEAP32[34184080>>2]|0;
   $140 = $139&255;
   $141 = ((($ptree) + (($132*516)|0)|0) + 7778|0);
   HEAP8[$141>>0] = $140;
  }
  $142 = (($ptree) + 75396|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (($143) + 1)|0;
  HEAP32[$142>>2] = $144;
  $145 = ((($ptree) + ($ply<<2)|0) + 142516|0);
  HEAP32[$145>>2] = 0;
  $$0 = $129;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 36) {
  $146 = ($turn|0)!=(0);
  $147 = $146 ? 32599 : -32599;
  $148 = ($147|0)>($alpha|0);
  $149 = ($147|0)<($beta|0);
  $or$cond4 = $148 & $149;
  if ($or$cond4) {
   $150 = (($ply) + -1)|0;
   $151 = ((($ptree) + ($150<<2)|0) + 142516|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = (((($ptree) + (($150*516)|0)|0) + ($150<<2)|0) + 7264|0);
   HEAP32[$153>>2] = $152;
   $154 = $150&255;
   $155 = ((($ptree) + (($150*516)|0)|0) + 7777|0);
   HEAP8[$155>>0] = $154;
   $156 = ((($ptree) + (($150*516)|0)|0) + 7776|0);
   HEAP8[$156>>0] = 5;
   $157 = HEAP32[34184080>>2]|0;
   $158 = $157&255;
   $159 = ((($ptree) + (($150*516)|0)|0) + 7778|0);
   HEAP8[$159>>0] = $158;
  }
  $160 = (($ptree) + 75396|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = (($161) + 1)|0;
  HEAP32[$160>>2] = $162;
  $163 = ((($ptree) + ($ply<<2)|0) + 142516|0);
  HEAP32[$163>>2] = 0;
  $$0 = $147;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 42) {
  $180 = (($ptree) + 75392|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = (($181) + 1)|0;
  HEAP32[$180>>2] = $182;
  $183 = ((($ptree) + ($ply<<2)|0) + 142516|0);
  HEAP32[$183>>2] = 0;
  $$0 = 32600;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 45) {
  $189 = (($ply) + -32600)|0;
  $190 = ($189|0)>($alpha|0);
  if ($190) {
   $191 = ($189|0)<($beta|0);
   if ($191) {
    $$01 = $189;
   } else {
    $192 = ((($ptree) + ($ply<<2)|0) + 142516|0);
    HEAP32[$192>>2] = 0;
    $$0 = $189;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $193 = (32599 - ($ply))|0;
   $194 = ($193|0)>($alpha|0);
   if ($194) {
    $$01 = $alpha;
   } else {
    $$0 = $193;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $195 = ((($ptree) + ($ply<<2)|0) + 76468|0);
  HEAP32[$195>>2] = 0;
  $196 = (_hash_probe($ptree,$ply,$depth,$turn,$$01,$beta,$0)|0);
  if ((($196|0) == 2)) {
   $218 = HEAP32[$195>>2]|0;
   $219 = ((($ptree) + ($ply<<2)|0) + 142516|0);
   HEAP32[$219>>2] = $218;
   $220 = HEAP32[$0>>2]|0;
   $221 = $220 & 256;
   $222 = ($221|0)==(0);
   if (!($222)) {
    $223 = (($alpha) + 1)|0;
    $224 = ($223|0)==($beta|0);
    if ($224) {
     $225 = (($ptree) + 502964|0);
     $226 = HEAP32[$225>>2]|0;
     $$0 = $226;
     STACKTOP = sp;return ($$0|0);
    }
   }
  } else if ((($196|0) == 3)) {
   $197 = HEAP32[$195>>2]|0;
   $198 = ((($ptree) + ($ply<<2)|0) + 142516|0);
   HEAP32[$198>>2] = $197;
   $199 = HEAP32[$0>>2]|0;
   $200 = $199 & 256;
   $201 = ($200|0)==(0);
   if (!($201)) {
    $202 = (($alpha) + 1)|0;
    $203 = ($202|0)==($beta|0);
    if ($203) {
     $204 = (($ptree) + 502964|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = ($$01|0)<($205|0);
     $207 = ($205|0)<($beta|0);
     $or$cond6 = $206 & $207;
     if (!($or$cond6)) {
      $$0 = $205;
      STACKTOP = sp;return ($$0|0);
     }
     $208 = (($ply) + -1)|0;
     $209 = ((($ptree) + ($208<<2)|0) + 142516|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = (((($ptree) + (($208*516)|0)|0) + ($208<<2)|0) + 7264|0);
     HEAP32[$211>>2] = $210;
     $212 = $208&255;
     $213 = ((($ptree) + (($208*516)|0)|0) + 7777|0);
     HEAP8[$213>>0] = $212;
     $214 = ((($ptree) + (($208*516)|0)|0) + 7776|0);
     HEAP8[$214>>0] = 6;
     $215 = HEAP32[34184080>>2]|0;
     $216 = $215&255;
     $217 = ((($ptree) + (($208*516)|0)|0) + 7778|0);
     HEAP8[$217>>0] = $216;
     $$pre96 = HEAP32[$204>>2]|0;
     $$0 = $$pre96;
     STACKTOP = sp;return ($$0|0);
    }
   }
  } else if ((($196|0) == 1)) {
   $227 = HEAP32[$0>>2]|0;
   $228 = $227 & 256;
   $229 = ($228|0)==(0);
   if (!($229)) {
    $230 = (($alpha) + 1)|0;
    $231 = ($230|0)==($beta|0);
    if ($231) {
     $232 = (($ptree) + 502964|0);
     $233 = HEAP32[$232>>2]|0;
     $$0 = $233;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
  $234 = HEAP8[$1>>0]|0;
  $235 = ($234<<24>>24)==(0);
  do {
   if ($235) {
    $236 = HEAP32[$0>>2]|0;
    $237 = $236 & 16;
    $238 = ($237|0)==(0);
    if (!($238)) {
     $239 = (_is_mate_in3ply($ptree,$turn,$ply)|0);
     $240 = ($239|0)==(0);
     if (!($240)) {
      $241 = (32599 - ($ply))|0;
      $242 = ((($ptree) + ($ply<<2)|0) + 142516|0);
      $243 = HEAP32[$242>>2]|0;
      _hash_store($ptree,$ply,$depth,$turn,3,$241,$243,0);
      $244 = ($$01|0)<($241|0);
      $245 = ($241|0)<($beta|0);
      $or$cond7 = $244 & $245;
      if (!($or$cond7)) {
       $$0 = $241;
       STACKTOP = sp;return ($$0|0);
      }
      $246 = (($ply) + -1)|0;
      $247 = ((($ptree) + ($246<<2)|0) + 142516|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = (((($ptree) + (($246*516)|0)|0) + ($246<<2)|0) + 7264|0);
      HEAP32[$249>>2] = $248;
      $250 = $246&255;
      $251 = ((($ptree) + (($246*516)|0)|0) + 7777|0);
      HEAP8[$251>>0] = $250;
      $252 = ((($ptree) + (($246*516)|0)|0) + 7776|0);
      HEAP8[$252>>0] = 10;
      $253 = HEAP32[34184080>>2]|0;
      $254 = $253&255;
      $255 = ((($ptree) + (($246*516)|0)|0) + 7778|0);
      HEAP8[$255>>0] = $254;
      $$0 = $241;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $256 = ($depth|0)>(15);
    if ($256) {
     $257 = HEAP32[$0>>2]|0;
     $258 = $257 & 4;
     $259 = ($258|0)==(0);
     if ($259) {
      label = 78;
     } else {
      $260 = (($alpha) + 1)|0;
      $261 = ($260|0)==($beta|0);
      if ($261) {
       $262 = (_evaluate($ptree,$ply,$turn)|0);
       $263 = ($262|0)<($beta|0);
       if ($263) {
        label = 78;
       } else {
        $264 = ($depth|0)<(52);
        if ($264) {
         $265 = (($depth) + -24)|0;
         $302 = $265;
        } else {
         $266 = ($depth|0)<(61);
         $267 = (($depth) + -32)|0;
         $$ = $266 ? 28 : $267;
         $302 = $$;
        }
        $268 = (($ptree) + 572204|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = (($ply) + -1)|0;
        $271 = (($270) + ($269))|0;
        $272 = ((($ptree) + ($ply<<2)|0) + 142516|0);
        HEAP32[$272>>2] = 16777216;
        $273 = ((($ptree) + ($270<<2)|0) + 2656|0);
        $274 = HEAP32[$273>>2]|0;
        $275 = ((($ptree) + ($ply<<2)|0) + 2656|0);
        HEAP32[$275>>2] = $274;
        $276 = ((($ptree) + ($ply<<2)|0) + 571556|0);
        $277 = HEAP32[$276>>2]|0;
        $278 = (0 - ($277))|0;
        $279 = (($ply) + 1)|0;
        $280 = ((($ptree) + ($279<<2)|0) + 571556|0);
        HEAP32[$280>>2] = $278;
        $281 = ((($ptree) + ($279)|0) + 572072|0);
        HEAP8[$281>>0] = 0;
        $282 = $ptree;
        $283 = $282;
        $284 = HEAP32[$283>>2]|0;
        $285 = (($282) + 4)|0;
        $286 = $285;
        $287 = HEAP32[$286>>2]|0;
        $288 = ((($ptree) + ($271<<3)|0) + 600|0);
        $289 = $288;
        $290 = $289;
        HEAP32[$290>>2] = $284;
        $291 = (($289) + 4)|0;
        $292 = $291;
        HEAP32[$292>>2] = $287;
        $293 = (($ptree) + 500|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ((($ptree) + ($271<<2)|0) + 75444|0);
        HEAP32[$295>>2] = $294;
        $296 = (($ptree) + 75364|0);
        $297 = HEAP32[$296>>2]|0;
        $298 = (($297) + 1)|0;
        HEAP32[$296>>2] = $298;
        $299 = (0 - ($beta))|0;
        $300 = (1 - ($beta))|0;
        $301 = $turn ^ 1;
        $303 = (_search($ptree,$299,$300,$301,$302,$279,472)|0);
        $304 = (0 - ($303))|0;
        $305 = HEAP32[34183984>>2]|0;
        $306 = ($305|0)==(0);
        if (!($306)) {
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        }
        $307 = ($beta|0)>($304|0);
        if ($307) {
         $313 = (($ply) + -32598)|0;
         $314 = ($313|0)==($304|0);
         if (!($314)) {
          label = 78;
          break;
         }
         $315 = HEAP32[$0>>2]|0;
         $316 = $315 | 32;
         HEAP32[$0>>2] = $316;
         label = 78;
         break;
        }
        $308 = (($ptree) + 75360|0);
        $309 = HEAP32[$308>>2]|0;
        $310 = (($309) + 1)|0;
        HEAP32[$308>>2] = $310;
        $311 = ($302|0)<(8);
        if (!($311)) {
         $$0 = $304;
         STACKTOP = sp;return ($$0|0);
        }
        $312 = HEAP32[$0>>2]|0;
        _hash_store($ptree,$ply,$depth,$turn,2,$304,0,$312);
        $$0 = $304;
        STACKTOP = sp;return ($$0|0);
       }
      } else {
       label = 78;
      }
     }
    }
   } else {
    label = 78;
   }
  } while(0);
  do {
   if ((label|0) == 78) {
    $317 = HEAP32[$195>>2]|0;
    $318 = ($317|0)==(0);
    $319 = ($depth|0)>(23);
    $or$cond8 = $318 & $319;
    if ($or$cond8) {
     $320 = HEAP32[$0>>2]|0;
     $321 = $320 & 128;
     $322 = ($321|0)==(0);
     if (!($322)) {
      $323 = ($depth|0)<(36);
      $324 = (($depth) + -24)|0;
      $$9 = $323 ? 12 : $324;
      $325 = $320 & -277;
      $326 = (_search($ptree,$$01,$beta,$turn,$$9,$ply,$325)|0);
      $327 = HEAP32[34183984>>2]|0;
      $328 = ($327|0)==(0);
      if (!($328)) {
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      $329 = ($326|0)<($beta|0);
      if (!($329)) {
       $330 = ((($ptree) + ($ply<<2)|0) + 142516|0);
       $331 = HEAP32[$330>>2]|0;
       HEAP32[$195>>2] = $331;
       break;
      }
      $332 = ($$01|0)<($326|0);
      if ($332) {
       $333 = (($ply) + -1)|0;
       $334 = (((($ptree) + (($333*516)|0)|0) + ($ply<<2)|0) + 7264|0);
       $335 = HEAP32[$334>>2]|0;
       HEAP32[$195>>2] = $335;
      }
     }
    }
   }
  } while(0);
  $336 = (($ply) + -1)|0;
  $337 = ((($ptree) + ($336<<2)|0) + 2656|0);
  $338 = HEAP32[$337>>2]|0;
  $339 = ((($ptree) + ($ply<<2)|0) + 2656|0);
  HEAP32[$339>>2] = $338;
  $340 = ((($ptree) + ($ply<<5)|0) + 3184|0);
  HEAP32[$340>>2] = 0;
  $341 = ((($ptree) + ($ply<<2)|0) + 144052|0);
  HEAP32[$341>>2] = 0;
  (_evaluate($ptree,$ply,$turn)|0);
  $342 = (($ply) + 1)|0;
  $343 = ((($ptree) + ($342)|0) + 572072|0);
  $344 = ((($ptree) + ($ply<<2)|0) + 142516|0);
  $345 = ($turn|0)!=(0);
  $346 = ((($ptree) + ($336<<2)|0) + 142516|0);
  $347 = ((($ptree) + ($ply<<5)|0) + 3172|0);
  $348 = (($ptree) + 75372|0);
  $349 = ((($ptree) + ($ply<<5)|0) + 3192|0);
  $350 = ((($ptree) + ($ply<<5)|0) + 3196|0);
  $351 = ((($ptree) + ($ply<<5)|0) + 3176|0);
  $352 = (($ptree) + 75376|0);
  $353 = (($depth) + -8)|0;
  $354 = ((($ptree) + ($ply<<2)|0) + 571556|0);
  $355 = ((($ptree) + ($ply<<3)|0) + 143028|0);
  $356 = ((($ptree) + ($ply<<3)|0) + 143032|0);
  $357 = (($alpha) + 1)|0;
  $358 = ($357|0)==($beta|0);
  $359 = (($ptree) + 594|0);
  $360 = (($ptree) + 593|0);
  $361 = (($ptree) + 75368|0);
  $362 = ((($ptree) + ($336)|0) + 572072|0);
  $363 = $turn ^ 1;
  $364 = (0 - ($beta))|0;
  $$1$ph$ph = $$01;$first_move_expanded$0$ph$ph = 0;
  L124: while(1) {
   $365 = (($$1$ph$ph) + -396)|0;
   $first_move_expanded$0$ph = $first_move_expanded$0$ph$ph;
   while(1) {
    $366 = ($first_move_expanded$0$ph|0)==(0);
    L128: while(1) {
     $367 = HEAP8[$1>>0]|0;
     $368 = ($367<<24>>24)==(0);
     if ($368) {
      $370 = (_gen_next_move($ptree,$ply,$turn)|0);
      $372 = $370;
     } else {
      $369 = (_gen_next_evasion($ptree,$ply,$turn)|0);
      $372 = $369;
     }
     $371 = ($372|0)==(0);
     if ($371) {
      label = 189;
      break L124;
     }
     HEAP8[$343>>0] = 0;
     $373 = HEAP8[$1>>0]|0;
     $374 = ($373<<24>>24)==(0);
     if ($374) {
      $375 = HEAP32[$344>>2]|0;
      $376 = $375 & 7864320;
      $377 = ($376|0)==(0);
      if ($377) {
       $378 = $375 & 16384;
       $379 = ($378|0)==(0);
       $380 = $375 & 491520;
       $381 = ($380|0)==(131072);
       $or$cond$i = $379 | $381;
       if ($or$cond$i) {
        $382 = HEAP32[$341>>2]|0;
        $383 = (($382) + 1)|0;
        HEAP32[$341>>2] = $383;
        $384 = (((($ptree) + (($ply*2800)|0)|0) + ($382<<2)|0) + 144564|0);
        HEAP32[$384>>2] = $375;
       }
      }
     }
     $385 = HEAP32[$344>>2]|0;
     if ($345) {
      $386 = (_is_move_check_w($ptree,$385)|0);
      $387 = ($386|0)==(0);
      if ($387) {
       label = 100;
      } else {
       label = 99;
      }
     } else {
      $388 = (_is_move_check_b($ptree,$385)|0);
      $389 = ($388|0)==(0);
      if ($389) {
       label = 100;
      } else {
       label = 99;
      }
     }
     do {
      if ((label|0) == 99) {
       label = 0;
       $390 = HEAP32[$361>>2]|0;
       $391 = (($390) + 1)|0;
       HEAP32[$361>>2] = $391;
       $392 = HEAP8[$362>>0]|0;
       $393 = $392&255;
       $394 = (($393) + 1)|0;
       $395 = $394&255;
       HEAP8[$343>>0] = $395;
       $extension$0$ph = 8;$state_node_new2$0$ph = 476;
       label = 113;
      }
      else if ((label|0) == 100) {
       label = 0;
       $396 = HEAP8[$1>>0]|0;
       $397 = ($396<<24>>24)==(0);
       if (!($397)) {
        $398 = HEAP32[$339>>2]|0;
        $399 = HEAP32[$337>>2]|0;
        $400 = $398;
        $401 = $399;
        $402 = (($400) - ($401))|0;
        $403 = ($402|0)==(4);
        if (!($403)) {
         $extension$1 = 0;$state_node_new2$035 = 476;
         break;
        }
        $404 = HEAP32[$352>>2]|0;
        $405 = (($404) + 1)|0;
        HEAP32[$352>>2] = $405;
        $extension$0$ph = 4;$state_node_new2$0$ph = 476;
        label = 113;
        break;
       }
       $406 = HEAP32[$0>>2]|0;
       $407 = $406 & 8;
       $408 = ($407|0)==(0);
       if ($408) {
        $extension$1 = 0;$state_node_new2$035 = 476;
       } else {
        $409 = HEAP32[$344>>2]|0;
        $410 = HEAP32[$346>>2]|0;
        $411 = $410 ^ $409;
        $412 = $411 & 127;
        $413 = ($412|0)==(0);
        if ($413) {
         $414 = HEAP32[$347>>2]|0;
         $415 = ($409|0)==($414|0);
         if (!($415)) {
          $416 = HEAP32[$349>>2]|0;
          $417 = HEAP32[$350>>2]|0;
          $418 = (($417) + 174)|0;
          $419 = ($416|0)<($418|0);
          if (!($419)) {
           $extension$1 = 0;$state_node_new2$035 = 476;
           break;
          }
          $420 = HEAP32[$351>>2]|0;
          $421 = ($409|0)==($420|0);
          if (!($421)) {
           $extension$1 = 0;$state_node_new2$035 = 476;
           break;
          }
         }
         $422 = $410 & 7864320;
         $423 = ($422|0)==(0);
         if ($423) {
          $424 = $410 & 16384;
          $425 = ($424|0)==(0);
          $426 = $410 & 491520;
          $427 = ($426|0)==(131072);
          $or$cond11 = $425 | $427;
          if ($or$cond11) {
           $extension$1 = 0;$state_node_new2$035 = 476;
           break;
          }
         }
         $428 = HEAP32[$348>>2]|0;
         $429 = (($428) + 1)|0;
         HEAP32[$348>>2] = $429;
         $430 = HEAP32[$344>>2]|0;
         $431 = $430 & 16384;
         $432 = ($431|0)==(0);
         if ($432) {
          $433 = HEAP32[$346>>2]|0;
          $434 = $433 >>> 15;
          $435 = $433 >>> 19;
          $436 = $434 ^ $435;
          $437 = $436 & 15;
          $438 = ($437|0)==(0);
          if ($438) {
           $extension$0$ph = 4;$state_node_new2$0$ph = 468;
           label = 113;
           break;
          }
         }
         $extension$0$ph = 2;$state_node_new2$0$ph = 468;
         label = 113;
        } else {
         $extension$1 = 0;$state_node_new2$035 = 476;
        }
       }
      }
     } while(0);
     if ((label|0) == 113) {
      label = 0;
      $439 = HEAP32[34184080>>2]|0;
      $440 = $439 << 1;
      $441 = ($440|0)<($ply|0);
      if ($441) {
       $442 = $439 << 2;
       $443 = ($442|0)>($ply|0);
       if ($443) {
        $444 = (($442) - ($ply))|0;
        $445 = Math_imul($444, $extension$0$ph)|0;
        $446 = (($445|0) / ($440|0))&-1;
        $extension$1 = $446;$state_node_new2$035 = $state_node_new2$0$ph;
       } else {
        $extension$1 = 0;$state_node_new2$035 = $state_node_new2$0$ph;
       }
      } else {
       $extension$1 = $extension$0$ph;$state_node_new2$035 = $state_node_new2$0$ph;
      }
     }
     $447 = (($353) + ($extension$1))|0;
     $448 = ($447|0)<(8);
     $or$cond12 = $448 | $366;
     do {
      if ($or$cond12) {
       $depth_reduced$1 = 0;$new_depth1$0 = $447;
      } else {
       $449 = HEAP32[$0>>2]|0;
       $450 = $449 & 32;
       $451 = ($450|0)==(0);
       if ($451) {
        $452 = HEAP8[$1>>0]|0;
        $453 = ($452<<24>>24)==(0);
        if ($453) {
         $454 = HEAP32[$344>>2]|0;
         $455 = $454 & 7864320;
         $456 = ($455|0)==(0);
         if ($456) {
          $457 = $454 & 16384;
          $458 = ($457|0)==(0);
          $459 = $454 & 491520;
          $460 = ($459|0)==(131072);
          $or$cond14 = $458 | $460;
          if ($or$cond14) {
           $461 = HEAP32[$195>>2]|0;
           $462 = ($461|0)==($454|0);
           if ($462) {
            $depth_reduced$1 = 0;$new_depth1$0 = $447;
            break;
           }
           $463 = HEAP32[$355>>2]|0;
           $464 = ($463|0)==($454|0);
           if ($464) {
            $depth_reduced$1 = 0;$new_depth1$0 = $447;
            break;
           }
           $465 = HEAP32[$356>>2]|0;
           $466 = ($465|0)==($454|0);
           if ($466) {
            $depth_reduced$1 = 0;$new_depth1$0 = $447;
            break;
           }
           $467 = (_phash($454,$turn)|0);
           $468 = ((($ptree) + ($467<<1)|0) + 538532|0);
           $469 = HEAP16[$468>>1]|0;
           $470 = $469&65535;
           $471 = (($470) + 1)|0;
           $472 = ((($ptree) + ($467<<1)|0) + 505764|0);
           $473 = HEAP16[$472>>1]|0;
           $474 = $473&65535;
           $475 = $474 << 3;
           $476 = (($475) + 16)|0;
           do {
            if ($358) {
             $483 = ($471*75)|0;
             $484 = ($483>>>0)<($476>>>0);
             if ($484) {
              $depth_reduced$0 = 16;
              break;
             }
             $485 = ($471*46)|0;
             $486 = ($485>>>0)<($476>>>0);
             if ($486) {
              $depth_reduced$0 = 12;
              break;
             }
             $487 = ($471*30)|0;
             $488 = ($487>>>0)<($476>>>0);
             if ($488) {
              $depth_reduced$0 = 8;
              break;
             }
             $489 = ($471*12)|0;
             $490 = ($489>>>0)<($476>>>0);
             $$16 = $490 ? 4 : 0;
             $depth_reduced$0 = $$16;
            } else {
             $477 = ($471*160)|0;
             $478 = ($477>>>0)<($476>>>0);
             if ($478) {
              $depth_reduced$0 = 12;
              break;
             }
             $479 = ($471*50)|0;
             $480 = ($479>>>0)<($476>>>0);
             if ($480) {
              $depth_reduced$0 = 8;
              break;
             }
             $481 = ($471*19)|0;
             $482 = ($481>>>0)<($476>>>0);
             $$15 = $482 ? 4 : 0;
             $depth_reduced$0 = $$15;
            }
           } while(0);
           $491 = (($447) - ($depth_reduced$0))|0;
           $depth_reduced$1 = $depth_reduced$0;$new_depth1$0 = $491;
          } else {
           $depth_reduced$1 = 0;$new_depth1$0 = $447;
          }
         } else {
          $depth_reduced$1 = 0;$new_depth1$0 = $447;
         }
        } else {
         $depth_reduced$1 = 0;$new_depth1$0 = $447;
        }
       } else {
        $depth_reduced$1 = 0;$new_depth1$0 = $447;
       }
      }
     } while(0);
     $492 = HEAP8[$343>>0]|0;
     $493 = ($492<<24>>24)==(0);
     if ($493) {
      $494 = HEAP8[$1>>0]|0;
      $495 = ($494<<24>>24)==(0);
      $496 = ($new_depth1$0|0)<(24);
      $or$cond17 = $495 & $496;
      if ($or$cond17) {
       $497 = HEAP32[$344>>2]|0;
       $498 = (_estimate_score_diff($ptree,$497,$turn)|0);
       $499 = ($new_depth1$0|0)>(15);
       if ($499) {
        $bound$0 = $365;
       } else {
        $500 = ($new_depth1$0|0)>(7);
        $$$1 = $500 ? $365 : $$1$ph$ph;
        $bound$0 = $$$1;
       }
       $501 = HEAP32[$344>>2]|0;
       $502 = HEAP32[$354>>2]|0;
       $503 = (_eval_max_score($ptree,$501,$502,$turn,$498)|0);
       $504 = ($503|0)>($bound$0|0);
       if (!($504)) {
        label = 138;
        break;
       }
      }
     }
     $506 = ($new_depth1$0|0)<(16);
     do {
      if ($506) {
       $507 = HEAP8[$1>>0]|0;
       $508 = ($507<<24>>24)==(0);
       if ($508) {
        $509 = HEAP8[$343>>0]|0;
        $510 = ($509<<24>>24)==(0);
        if ($510) {
         $511 = HEAP32[$344>>2]|0;
         $512 = $511 & 7864320;
         $513 = ($512|0)==(0);
         if (!($513)) {
          break;
         }
         $514 = $511 & 16384;
         $515 = ($514|0)==(0);
         $516 = $511 & 491520;
         $517 = ($516|0)==(131072);
         $or$cond19 = $515 | $517;
         if (!($or$cond19)) {
          break;
         }
         $518 = HEAP32[$195>>2]|0;
         $519 = ($518|0)==($511|0);
         if ($519) {
          break;
         }
         $520 = HEAP32[$355>>2]|0;
         $521 = ($520|0)==($511|0);
         if ($521) {
          break;
         }
         $522 = HEAP32[$356>>2]|0;
         $523 = ($522|0)==($511|0);
         $$not = $358 ^ 1;
         $brmerge = $523 | $$not;
         if ($brmerge) {
          break;
         }
         $524 = (_swap($ptree,$511,-1,0,$turn)|0);
         $525 = ($524|0)<(0);
         if ($525) {
          label = 148;
          break L128;
         }
        }
       }
      }
     } while(0);
     $527 = HEAP32[$344>>2]|0;
     if ($345) {
      _make_move_w($ptree,$527,$ply);
     } else {
      _make_move_b($ptree,$527,$ply);
     }
     $528 = HEAP32[$344>>2]|0;
     $529 = $528 & 16256;
     $530 = ($529>>>0)<(10368);
     if (!($530)) {
      label = 159;
      break;
     }
     $531 = HEAP8[$1>>0]|0;
     $532 = ($531<<24>>24)==(0);
     if (!($532)) {
      label = 159;
      break;
     }
     if ($345) {
      $533 = HEAP8[$359>>0]|0;
      $534 = $533&255;
      $535 = (_is_white_attacked($ptree,$534)|0);
      $536 = ($535|0)==(0);
      if ($536) {
       label = 159;
       break;
      }
      $541 = HEAP32[$344>>2]|0;
      _unmake_move_w($ptree,$541,$ply);
      continue;
     } else {
      $537 = HEAP8[$360>>0]|0;
      $538 = $537&255;
      $539 = (_is_black_attacked($ptree,$538)|0);
      $540 = ($539|0)==(0);
      if ($540) {
       label = 159;
       break;
      }
      $542 = HEAP32[$344>>2]|0;
      _unmake_move_b($ptree,$542,$ply);
      continue;
     }
    }
    if ((label|0) == 138) {
     label = 0;
     $505 = (($first_move_expanded$0$ph) + 1)|0;
     $first_move_expanded$0$ph = $505;
     continue;
    }
    else if ((label|0) == 148) {
     label = 0;
     $526 = (($first_move_expanded$0$ph) + 1)|0;
     $first_move_expanded$0$ph = $526;
     continue;
    }
    else if ((label|0) == 159) {
     label = 0;
     $543 = HEAP8[$343>>0]|0;
     $544 = ($543<<24>>24)==(0);
     if (!($544)) {
      break;
     }
     $545 = HEAP8[$1>>0]|0;
     $546 = ($545<<24>>24)==(0);
     if (!($546)) {
      break;
     }
     $547 = (_evaluate($ptree,$342,$363)|0);
     $548 = (0 - ($547))|0;
     $549 = ($new_depth1$0|0)>(7);
     $550 = ($$1$ph$ph|0)<($548|0);
     $or$cond20 = $549 | $550;
     if ($or$cond20) {
      $$not112 = $506 ^ 1;
      $551 = ($365|0)<($548|0);
      $or$cond113 = $551 | $$not112;
      if ($or$cond113) {
       $552 = ($new_depth1$0|0)>(23);
       $553 = ($365|0)<($548|0);
       $or$cond114 = $552 | $553;
       if ($or$cond114) {
        break;
       }
      }
     }
     $554 = (($first_move_expanded$0$ph) + 1)|0;
     $555 = HEAP32[$344>>2]|0;
     if ($345) {
      _unmake_move_w($ptree,$555,$ply);
      $first_move_expanded$0$ph = $554;
      continue;
     } else {
      _unmake_move_b($ptree,$555,$ply);
      $first_move_expanded$0$ph = $554;
      continue;
     }
    }
   }
   $556 = ($first_move_expanded$0$ph|0)!=(0);
   $557 = (0 - ($$1$ph$ph))|0;
   if ($556) {
    $560 = $$1$ph$ph ^ -1;
    $561 = (_search($ptree,$560,$557,$363,$new_depth1$0,$342,$state_node_new2$035)|0);
    $562 = (0 - ($561))|0;
    $563 = HEAP32[34183984>>2]|0;
    $notlhs = ($563|0)!=(0);
    $notrhs = ($$1$ph$ph|0)>=($562|0);
    $or$cond21$not = $notrhs | $notlhs;
    $564 = ($depth_reduced$1|0)==(0);
    $or$cond22 = $or$cond21$not | $564;
    if ($or$cond22) {
     $568 = $563;$new_depth1$1 = $new_depth1$0;$value$0 = $562;
    } else {
     $565 = (($depth_reduced$1) + ($new_depth1$0))|0;
     $566 = (_search($ptree,$560,$557,$363,$565,$342,$state_node_new2$035)|0);
     $567 = (0 - ($566))|0;
     $$pre = HEAP32[34183984>>2]|0;
     $568 = $$pre;$new_depth1$1 = $565;$value$0 = $567;
    }
    $notlhs41 = ($568|0)!=(0);
    $notrhs42 = ($$1$ph$ph|0)>=($value$0|0);
    $or$cond23$not = $notrhs42 | $notlhs41;
    $569 = (($$1$ph$ph) + 1)|0;
    $570 = ($569|0)==($beta|0);
    $or$cond25 = $or$cond23$not | $570;
    if ($or$cond25) {
     $new_depth1$2 = $new_depth1$1;$value$1 = $value$0;
    } else {
     $571 = (_search($ptree,$364,$557,$363,$new_depth1$1,$342,$state_node_new2$035)|0);
     $572 = (0 - ($571))|0;
     $new_depth1$2 = $new_depth1$1;$value$1 = $572;
    }
   } else {
    $558 = (_search($ptree,$364,$557,$363,$new_depth1$0,$342,$state_node_new2$035)|0);
    $559 = (0 - ($558))|0;
    $new_depth1$2 = $new_depth1$0;$value$1 = $559;
   }
   $573 = HEAP32[34183984>>2]|0;
   $574 = ($573|0)==(0);
   $575 = HEAP32[$344>>2]|0;
   if (!($574)) {
    label = 174;
    break;
   }
   if ($345) {
    _unmake_move_w($ptree,$575,$ply);
   } else {
    _unmake_move_b($ptree,$575,$ply);
   }
   $576 = ($$1$ph$ph|0)<($value$1|0);
   if ($576) {
    $577 = ($new_depth1$2|0)<(8);
    if ($577) {
     $578 = HEAP8[$343>>0]|0;
     $579 = ($578<<24>>24)==(0);
     if ($579) {
      $580 = HEAP32[$354>>2]|0;
      $581 = ($580|0)==(2147483647);
      if (!($581)) {
       $582 = HEAP32[$344>>2]|0;
       $583 = ((($ptree) + ($342<<2)|0) + 571556|0);
       $584 = HEAP32[$583>>2]|0;
       $585 = (0 - ($584))|0;
       _check_futile_score_quies($ptree,$582,$580,$585,$turn);
      }
     }
    }
    $586 = ($value$1|0)<($beta|0);
    if (!($586)) {
     label = 186;
     break;
    }
   }
   $value$1$$1 = $576 ? $value$1 : $$1$ph$ph;
   $596 = (($first_move_expanded$0$ph) + 1)|0;
   $$1$ph$ph = $value$1$$1;$first_move_expanded$0$ph$ph = $596;
  }
  if ((label|0) == 174) {
   if ($345) {
    _unmake_move_w($ptree,$575,$ply);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    _unmake_move_b($ptree,$575,$ply);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
  else if ((label|0) == 186) {
   $587 = HEAP32[$344>>2]|0;
   $588 = HEAP32[$0>>2]|0;
   _hash_store($ptree,$ply,$depth,$turn,2,$value$1,$587,$588);
   $589 = HEAP32[$344>>2]|0;
   _hist_good($ptree,$589,$ply,$depth,$turn);
   $590 = (($ptree) + 75436|0);
   $591 = HEAP32[$590>>2]|0;
   $592 = (($591) + 1)|0;
   HEAP32[$590>>2] = $592;
   if ($556) {
    $$0 = $value$1;
    STACKTOP = sp;return ($$0|0);
   }
   $593 = (($ptree) + 75440|0);
   $594 = HEAP32[$593>>2]|0;
   $595 = (($594) + 1)|0;
   HEAP32[$593>>2] = $595;
   $$0 = $value$1;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 189) {
   if ($366) {
    $597 = ($$1$ph$ph|0)==($alpha|0);
    if ($597) {
     $$0 = $alpha;
     STACKTOP = sp;return ($$0|0);
    }
    $598 = HEAP32[$346>>2]|0;
    $599 = (((($ptree) + (($336*516)|0)|0) + ($336<<2)|0) + 7264|0);
    HEAP32[$599>>2] = $598;
    $600 = $336&255;
    $601 = ((($ptree) + (($336*516)|0)|0) + 7777|0);
    HEAP8[$601>>0] = $600;
    $602 = ((($ptree) + (($336*516)|0)|0) + 7776|0);
    HEAP8[$602>>0] = 0;
    $603 = HEAP32[34184080>>2]|0;
    $604 = $603&255;
    $605 = ((($ptree) + (($336*516)|0)|0) + 7778|0);
    HEAP8[$605>>0] = $604;
    $$0 = $$1$ph$ph;
    STACKTOP = sp;return ($$0|0);
   }
   $606 = ($$1$ph$ph|0)>($189|0);
   if (!($606)) {
    $607 = ($alpha|0)<(-32599);
    $608 = ($beta|0)>(-32599);
    $or$cond26 = $607 & $608;
    if ($or$cond26) {
     $609 = HEAP32[$346>>2]|0;
     $610 = (((($ptree) + (($336*516)|0)|0) + ($336<<2)|0) + 7264|0);
     HEAP32[$610>>2] = $609;
     $611 = $336&255;
     $612 = ((($ptree) + (($336*516)|0)|0) + 7777|0);
     HEAP8[$612>>0] = $611;
     $613 = $345 ? 4 : 5;
     $614 = ((($ptree) + (($336*516)|0)|0) + 7776|0);
     HEAP8[$614>>0] = $613;
     $615 = HEAP32[34184080>>2]|0;
     $616 = $615&255;
     $617 = ((($ptree) + (($336*516)|0)|0) + 7778|0);
     HEAP8[$617>>0] = $616;
    }
    HEAP32[$344>>2] = 0;
    $$0 = -32599;
    STACKTOP = sp;return ($$0|0);
   }
   $618 = ($$1$ph$ph|0)==($alpha|0);
   if ($618) {
    $640 = HEAP32[$0>>2]|0;
    _hash_store($ptree,$ply,$depth,$turn,1,$alpha,0,$640);
    $$0 = $alpha;
    STACKTOP = sp;return ($$0|0);
   } else {
    $619 = (((($ptree) + (($ply*516)|0)|0) + ($ply<<2)|0) + 7264|0);
    $620 = HEAP32[$619>>2]|0;
    _hist_good($ptree,$620,$ply,$depth,$turn);
    $621 = (((($ptree) + (($336*516)|0)|0) + ($ply<<2)|0) + 7264|0);
    $622 = ((($ptree) + (($ply*516)|0)|0) + 7777|0);
    $623 = HEAP8[$622>>0]|0;
    $624 = $623&255;
    $625 = (($624) - ($ply))|0;
    $626 = $625 << 2;
    $627 = (($626) + 4)|0;
    _memcpy(($621|0),($619|0),($627|0))|0;
    $628 = ((($ptree) + (($ply*516)|0)|0) + 7776|0);
    $629 = HEAP8[$628>>0]|0;
    $630 = ((($ptree) + (($336*516)|0)|0) + 7776|0);
    HEAP8[$630>>0] = $629;
    $631 = HEAP8[$622>>0]|0;
    $632 = ((($ptree) + (($336*516)|0)|0) + 7777|0);
    HEAP8[$632>>0] = $631;
    $633 = ((($ptree) + (($ply*516)|0)|0) + 7778|0);
    $634 = HEAP8[$633>>0]|0;
    $635 = ((($ptree) + (($336*516)|0)|0) + 7778|0);
    HEAP8[$635>>0] = $634;
    $636 = HEAP32[$346>>2]|0;
    $637 = (((($ptree) + (($336*516)|0)|0) + ($336<<2)|0) + 7264|0);
    HEAP32[$637>>2] = $636;
    $638 = HEAP32[$619>>2]|0;
    $639 = HEAP32[$0>>2]|0;
    _hash_store($ptree,$ply,$depth,$turn,3,$$1$ph$ph,$638,$639);
    $$0 = $$1$ph$ph;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 return 0|0;
}
function _pv_close($ptree,$ply,$type) {
 $ptree = $ptree|0;
 $ply = $ply|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ply) + -1)|0;
 $1 = ((($ptree) + ($0<<2)|0) + 142516|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (((($ptree) + (($0*516)|0)|0) + ($0<<2)|0) + 7264|0);
 HEAP32[$3>>2] = $2;
 $4 = $0&255;
 $5 = ((($ptree) + (($0*516)|0)|0) + 7777|0);
 HEAP8[$5>>0] = $4;
 $6 = $type&255;
 $7 = ((($ptree) + (($0*516)|0)|0) + 7776|0);
 HEAP8[$7>>0] = $6;
 $8 = HEAP32[34184080>>2]|0;
 $9 = $8&255;
 $10 = ((($ptree) + (($0*516)|0)|0) + 7778|0);
 HEAP8[$10>>0] = $9;
 STACKTOP = sp;return;
}
function _detect_signals($ptree) {
 $ptree = $ptree|0;
 var $$ = 0, $$0 = 0, $$15 = 0, $$17 = 0, $$9 = 0, $$not = 0, $$old = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $easy_time$0 = 0, $ispos = 0, $neg = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond = 0, $or$cond11 = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond18 = 0, $or$cond3$not = 0, $or$cond5 = 0, $storemerge = 0, $tcount$0 = 0, $tlimit$1 = 0, $tlimit_count$0 = 0, $tmax$0 = 0, $tnow = 0, $u$0 = 0, $u$1 = 0, $u$2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $tnow = sp + 44|0;
 $0 = HEAP32[34180920>>2]|0;
 $1 = $0 & 1048576;
 $2 = ($1|0)==(0);
 do {
  if ($2) {
   $3 = (_next_cmdline(0)|0);
   if ((($3|0) == -1)) {
    $4 = HEAP32[34180920>>2]|0;
    $5 = $4 | 4096;
    HEAP32[34180920>>2] = $5;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else if ((($3|0) == -2)) {
    $6 = HEAP32[220526664>>2]|0;
    HEAP32[$vararg_buffer>>2] = $6;
    _out_warning(221116144,$vararg_buffer);
    _shutdown_all();
    break;
   } else {
    $7 = HEAP32[34180920>>2]|0;
    $8 = $7 & 16;
    $9 = ($8|0)==(0);
    if (!($9)) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
    $10 = ($3|0)==(0);
    if ($10) {
     break;
    }
    $11 = (_procedure($ptree)|0);
    if ((($11|0) == 1)) {
     (_next_cmdline(1)|0);
    } else if ((($11|0) == -2)) {
     $14 = HEAP32[220526664>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $14;
     _out_warning(221116144,$vararg_buffer1);
     (_next_cmdline(1)|0);
     _shutdown_all();
    } else if ((($11|0) == -1)) {
     $12 = HEAP32[34180920>>2]|0;
     $13 = $12 | 4096;
     HEAP32[34180920>>2] = $13;
     (_next_cmdline(1)|0);
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
    $15 = HEAP32[34180920>>2]|0;
    $16 = $15 & 1560;
    $17 = ($16|0)==(0);
    if ($17) {
     break;
    } else {
     $$0 = 1;
    }
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $18 = 34180912;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($ptree) + 2648|0);
 $25 = $24;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($23>>>0)>($30>>>0);
 $32 = ($23|0)==($30|0);
 $33 = ($20>>>0)>($27>>>0);
 $34 = $32 & $33;
 $35 = $31 | $34;
 if (!($35)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $36 = (_get_elapsed($tnow)|0);
 $37 = ($36|0)<(0);
 if ($37) {
  $38 = HEAP32[34180920>>2]|0;
  $39 = $38 | 4096;
  HEAP32[34180920>>2] = $39;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $40 = HEAP32[221099712>>2]|0;
 $41 = ($40|0)==(-1);
 if (!($41)) {
  $42 = HEAP32[$tnow>>2]|0;
  $43 = HEAP32[221098904>>2]|0;
  $44 = (($42) - ($43))|0;
  $45 = ($44>>>0)>(180000);
  if ($45) {
   $46 = (_sckt_out($40,221116152,$vararg_buffer4)|0);
   $47 = ($46|0)<(0);
   if ($47) {
    $48 = HEAP32[34180920>>2]|0;
    $49 = $48 | 4096;
    HEAP32[34180920>>2] = $49;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $50 = HEAP32[221102520>>2]|0;
 $51 = ($50|0)==(-1);
 if (!($51)) {
  $52 = HEAP32[221098904>>2]|0;
  $53 = (($52) + 500)|0;
  $54 = HEAP32[$tnow>>2]|0;
  $$not = ($53>>>0)<($54>>>0);
  if ($$not) {
   $55 = $24;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + 4)|0;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = HEAP32[221102528>>2]|0;
   HEAP32[$vararg_buffer6>>2] = $61;
   $vararg_ptr9 = (($vararg_buffer6) + 4|0);
   $62 = $vararg_ptr9;
   $63 = $62;
   HEAP32[$63>>2] = $57;
   $64 = (($62) + 4)|0;
   $65 = $64;
   HEAP32[$65>>2] = $60;
   (_sckt_out($50,221116160,$vararg_buffer6)|0);
  }
 }
 $66 = HEAP32[34181056>>2]|0;
 $67 = ($66|0)!=(-1);
 $68 = HEAP32[34181016>>2]|0;
 $69 = ($68>>>0)<(128);
 $or$cond = $67 & $69;
 if ($or$cond) {
  $70 = HEAP32[34184080>>2]|0;
  $71 = (($70) + 10)|0;
  $72 = ($71|0)<($68|0);
  if ($72) {
   label = 35;
  } else {
   $73 = ($70|0)<($68|0);
   if ($73) {
    $74 = (($70) + 1)|0;
    $75 = ($74|0)<($68|0);
    if ($75) {
     $76 = (($70) + 2)|0;
     $77 = ($76|0)<($68|0);
     if ($77) {
      $78 = (($70) + 3)|0;
      $79 = ($78|0)<($68|0);
      if ($79) {
       $80 = (($70) + 4)|0;
       $81 = ($80|0)<($68|0);
       if ($81) {
        $82 = (($70) + 5)|0;
        $83 = ($82|0)<($68|0);
        if ($83) {
         $84 = (($70) + 6)|0;
         $85 = ($84|0)<($68|0);
         if ($85) {
          $86 = (($70) + 7)|0;
          $87 = ($86|0)<($68|0);
          if ($87) {
           $88 = (($70) + 8)|0;
           $89 = ($88|0)<($68|0);
           if ($89) {
            $90 = (($70) + 9)|0;
            $91 = ($90|0)<($68|0);
            $$ = $91 ? 2047 : 1023;
            $u$0 = $$;
           } else {
            $u$0 = 511;
           }
          } else {
           $u$0 = 255;
          }
         } else {
          $u$0 = 127;
         }
        } else {
         $u$0 = 63;
        }
       } else {
        $u$0 = 31;
       }
      } else {
       $u$0 = 15;
      }
     } else {
      $u$0 = 7;
     }
    } else {
     $u$0 = 3;
    }
   } else {
    $u$0 = 1;
   }
   $92 = ($u$0*1000)|0;
   $93 = (($92) + 1000)|0;
   $94 = HEAP32[34181080>>2]|0;
   $95 = (($93) - ($94))|0;
   $96 = ($u$0*5000)|0;
   $97 = (($96) + 1000)|0;
   $98 = (($97) - ($94))|0;
   $99 = ($95>>>0)>($66>>>0);
   $$9 = $99 ? $66 : $95;
   $100 = HEAP32[34181064>>2]|0;
   $101 = ($98>>>0)>($100>>>0);
   $$17 = $101 ? $100 : $98;
   $tlimit$1 = $$9;$tmax$0 = $$17;
  }
 } else {
  label = 35;
 }
 if ((label|0) == 35) {
  $102 = HEAP32[34181064>>2]|0;
  $tlimit$1 = $66;$tmax$0 = $102;
 }
 $103 = HEAP32[$tnow>>2]|0;
 $104 = HEAP32[34181048>>2]|0;
 $105 = (($103) - ($104))|0;
 $106 = HEAP32[34181040>>2]|0;
 $107 = (($104) - ($106))|0;
 $108 = (($103) - ($106))|0;
 $109 = HEAP32[34184024>>2]|0;
 $110 = ($109|0)!=(0);
 $111 = HEAP32[34184072>>2]|0;
 $112 = (0 - ($111))|0;
 $113 = $110 ? $112 : $111;
 $114 = ($tlimit$1|0)==(-1);
 if ($114) {
  $136 = 0;
 } else {
  $115 = HEAP32[34184000>>2]|0;
  $116 = HEAP32[34184016>>2]|0;
  $117 = HEAP32[34184048>>2]|0;
  $notlhs = ($115|0)==($116|0);
  $notrhs = ($117|0)==(0);
  $or$cond3$not = $notrhs & $notlhs;
  $118 = HEAP8[((33570872 + 512|0))>>0]|0;
  $119 = ($118<<24>>24)==(1);
  $or$cond11 = $or$cond3$not | $119;
  if ($or$cond11) {
   $136 = 1;
  } else {
   $120 = HEAP32[34184040>>2]|0;
   $121 = ($120|0)==(0);
   if ($121) {
    $136 = 0;
   } else {
    $122 = (($116) + 198)|0;
    $123 = ($122|0)>=($113|0);
    $136 = $123;
   }
  }
 }
 $124 = ($tlimit$1|0)==($tmax$0|0);
 $125 = $124 ? $107 : 0;
 $tlimit_count$0 = (($125) + ($tlimit$1))|0;
 $tcount$0 = $124 ? $105 : $108;
 $126 = HEAP32[34180920>>2]|0;
 $127 = $126 & 64;
 $128 = ($127|0)==(0);
 $129 = HEAP32[34183992>>2]|0;
 $130 = ($129|0)==(1);
 $or$cond5 = $128 & $130;
 if ($or$cond5) {
  $131 = HEAP32[34181080>>2]|0;
  $132 = (2000 - ($131))|0;
  $133 = ($105>>>0)>($132>>>0);
  $134 = ($tcount$0>>>0)>($tmax$0>>>0);
  $or$cond18 = $133 | $134;
  if ($or$cond18) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$old = ($tcount$0>>>0)>($tmax$0>>>0);
  if ($$old) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $135 = ($tcount$0>>>0)>($tlimit$1>>>0);
 $or$cond12 = $136 & $135;
 if ($or$cond12) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 do {
  if ($136) {
   $137 = HEAP32[34181096>>2]|0;
   $ispos = ($113|0)>(-1);
   $neg = (0 - ($113))|0;
   $138 = $ispos ? $113 : $neg;
   $139 = ($137|0)>($138|0);
   if ($139) {
    $140 = HEAP32[34181104>>2]|0;
    $141 = HEAP32[34181120>>2]|0;
    $142 = (($113) - ($141))|0;
    $143 = ($140|0)<($142|0);
    $144 = HEAP32[34181112>>2]|0;
    $145 = ($144|0)>($142|0);
    $or$cond14 = $143 & $145;
    if ($or$cond14) {
     $146 = (($tlimit_count$0>>>0) / 5)&-1;
     $147 = ($146>>>0)<($107>>>0);
     do {
      if ($147) {
       $u$1 = $146;
      } else {
       $148 = (($146) - ($107))|0;
       $149 = HEAP32[34181080>>2]|0;
       $150 = (2000 - ($149))|0;
       $151 = ($148>>>0)<($150>>>0);
       if ($151) {
        $152 = (($107) + 2000)|0;
        $153 = (($152) - ($149))|0;
        $u$1 = $153;
        break;
       } else {
        $154 = (($148>>>0) % 1000)&-1;
        $155 = (($146) + 1000)|0;
        $156 = (($155) - ($149))|0;
        $157 = (($156) - ($154))|0;
        $u$1 = $157;
        break;
       }
      }
     } while(0);
     $158 = ($108>>>0)>($u$1>>>0);
     if (!($158)) {
      $161 = (($108) + 500)|0;
      $162 = ($161>>>0)>($u$1>>>0);
      $$15 = $162&1;
      $easy_time$0 = $$15;
      break;
     }
     $159 = HEAP32[((33559672 + 8|0))>>2]|0;
     $160 = (_str_CSA_move($159)|0);
     HEAP32[$vararg_buffer10>>2] = $160;
     _out(221116176,$vararg_buffer10);
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    } else {
     $easy_time$0 = 0;
    }
   } else {
    $easy_time$0 = 0;
   }
  } else {
   $easy_time$0 = 0;
  }
 } while(0);
 $163 = HEAP32[34180960>>2]|0;
 $164 = (+($163>>>0));
 $165 = $164 * 1000.0;
 $166 = HEAP32[34181032>>2]|0;
 $167 = (($103) - ($166))|0;
 $168 = (+($167>>>0));
 $169 = $168 + 0.10000000000000001;
 $170 = $165 / $169;
 $171 = (~~(($170))>>>0);
 $172 = HEAP32[34180944>>2]|0;
 $173 = $171 << 1;
 $174 = ($172>>>0)>($173>>>0);
 do {
  if ($174) {
   $175 = $172 >>> 1;
   HEAP32[34180944>>2] = $175;
   $187 = $175;
  } else {
   $176 = $171 >>> 1;
   $177 = ($172>>>0)<($176>>>0);
   if ($177) {
    $178 = $172 << 1;
    HEAP32[34180944>>2] = $178;
    $187 = $178;
    break;
   } else {
    HEAP32[34180944>>2] = $171;
    $187 = $171;
    break;
   }
  }
 } while(0);
 if ($or$cond5) {
  $179 = HEAP32[34181080>>2]|0;
  $180 = (2000 - ($179))|0;
  $u$2 = $180;
 } else {
  $u$2 = $tlimit$1;
 }
 $181 = $126 & 96;
 $182 = $181 | $easy_time$0;
 $183 = ($182|0)==(0);
 if ($183) {
  $184 = (($tcount$0) + 500)|0;
  $185 = ($u$2>>>0)>($184>>>0);
  if ($185) {
   $186 = $187 >>> 2;
   $storemerge = $186;
  } else {
   label = 64;
  }
 } else {
  label = 64;
 }
 if ((label|0) == 64) {
  $188 = $187 >>> 5;
  $storemerge = $188;
 }
 HEAP32[34180952>>2] = $storemerge;
 HEAP32[34181032>>2] = $103;
 HEAP32[34180960>>2] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _hist_good($ptree,$move_good,$ply,$depth,$turn) {
 $ptree = $ptree|0;
 $move_good = $move_good|0;
 $ply = $ply|0;
 $depth = $depth|0;
 $turn = $turn|0;
 var $$depth = 0, $$neg2 = 0, $$phi$trans$insert6 = 0, $$pre = 0, $$pre7 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $i$03 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($ptree) + ($ply)|0) + 572072|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $move_good >>> 19;
 $4 = $3 & 15;
 $5 = (($4) + 15)|0;
 $6 = (34184184 + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($ptree) + ($ply<<4)|0) + 73312|0);
 $9 = ((($ptree) + ($ply<<4)|0) + 73320|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 127;
 $12 = ((($ptree) + ($11)|0) + 512|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13 << 24 >> 24;
 $15 = (($14) + 15)|0;
 $16 = (34184184 + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($ptree) + ($ply<<4)|0) + 73324|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 127;
 $21 = ((($ptree) + ($20)|0) + 512|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22 << 24 >> 24;
 $24 = (($23) + 15)|0;
 $25 = (34184184 + ($24<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($ptree) + ($ply<<5)|0) + 3172|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==($move_good|0);
 do {
  if ($29) {
   $30 = ((($ptree) + ($ply<<5)|0) + 3180|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $31 & 2;
   $33 = ($32|0)==(0);
   if (!($33)) {
    $34 = $move_good & 524287;
    $35 = ($34|0)==($10|0);
    if (!($35)) {
     $36 = ((($ptree) + ($ply<<5)|0) + 3192|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = $7 ^ -1;
     $39 = (($37) + ($38))|0;
     HEAP32[$8>>2] = $39;
    }
   }
   $40 = $31 & 4;
   $41 = ($40|0)==(0);
   if (!($41)) {
    $42 = $move_good & 524287;
    $43 = ($42|0)==($19|0);
    if (!($43)) {
     $44 = ((($ptree) + ($ply<<5)|0) + 3192|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (-2 - ($7))|0;
     $47 = (($46) + ($45))|0;
     $48 = ((($ptree) + ($ply<<4)|0) + 73316|0);
     HEAP32[$48>>2] = $47;
    }
   }
  } else {
   $49 = $move_good & 524287;
   $50 = ($49|0)==($10|0);
   if ($50) {
    $51 = ((($ptree) + ($ply<<5)|0) + 3180|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $52 & 8;
    $54 = ($53|0)==(0);
    if (!($54)) {
     $55 = HEAP32[$8>>2]|0;
     $56 = (($55) + ($7))|0;
     $57 = ((($ptree) + ($ply<<5)|0) + 3192|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (($58) + 1)|0;
     $60 = ($56|0)<($59|0);
     if ($60) {
      $61 = (1 - ($7))|0;
      $62 = (($61) + ($58))|0;
      HEAP32[$8>>2] = $62;
     }
    }
    $63 = $52 & 4;
    $64 = ($63|0)==(0);
    if ($64) {
     break;
    }
    $65 = HEAP32[$8>>2]|0;
    $66 = (($65) + ($7))|0;
    $67 = ((($ptree) + ($ply<<4)|0) + 73316|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (($68) + ($26))|0;
    $70 = (($69) + 1)|0;
    $71 = ($66|0)<($70|0);
    if (!($71)) {
     break;
    }
    $72 = (1 - ($7))|0;
    $73 = (($72) + ($69))|0;
    HEAP32[$8>>2] = $73;
    break;
   }
   $74 = ($49|0)==($19|0);
   if (!($74)) {
    HEAP32[$18>>2] = $10;
    HEAP32[$9>>2] = $49;
    $102 = ((($ptree) + ($ply<<5)|0) + 3180|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = $103 & 2;
    $105 = ($104|0)==(0);
    if ($105) {
     $$pre9 = HEAP32[$8>>2]|0;
     $111 = $$pre9;
    } else {
     $106 = (_swap($ptree,$move_good,-1284,1284,$turn)|0);
     $$neg2 = $7 ^ -1;
     $107 = (($106) + ($$neg2))|0;
     $108 = HEAP32[$8>>2]|0;
     $109 = ($108|0)>($107|0);
     if ($109) {
      HEAP32[$8>>2] = $107;
      $111 = $107;
     } else {
      $111 = $108;
     }
    }
    $110 = ((($ptree) + ($ply<<4)|0) + 73316|0);
    HEAP32[$110>>2] = $111;
    $112 = ((($ptree) + ($ply<<5)|0) + 3192|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (1 - ($7))|0;
    $115 = (($114) + ($113))|0;
    HEAP32[$8>>2] = $115;
    break;
   }
   $75 = ((($ptree) + ($ply<<5)|0) + 3180|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $76 & 8;
   $78 = ($77|0)==(0);
   if (!($78)) {
    $79 = ((($ptree) + ($ply<<4)|0) + 73316|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($80) + ($7))|0;
    $82 = ((($ptree) + ($ply<<5)|0) + 3192|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = (($83) + 1)|0;
    $85 = ($81|0)<($84|0);
    if ($85) {
     $86 = (1 - ($7))|0;
     $87 = (($86) + ($83))|0;
     HEAP32[$79>>2] = $87;
    }
   }
   $88 = $76 & 2;
   $89 = ($88|0)==(0);
   if ($89) {
    $$pre = HEAP32[$8>>2]|0;
    $$phi$trans$insert6 = ((($ptree) + ($ply<<4)|0) + 73316|0);
    $$pre7 = HEAP32[$$phi$trans$insert6>>2]|0;
    $100 = $$pre7;$101 = $$pre;
   } else {
    $90 = ((($ptree) + ($ply<<4)|0) + 73316|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (($91) + ($7))|0;
    $93 = HEAP32[$8>>2]|0;
    $94 = (($93) + ($17))|0;
    $95 = (($94) + 1)|0;
    $96 = ($92|0)<($95|0);
    if ($96) {
     $97 = (1 - ($7))|0;
     $98 = (($97) + ($94))|0;
     HEAP32[$90>>2] = $98;
     $100 = $98;$101 = $93;
    } else {
     $100 = $91;$101 = $93;
    }
   }
   HEAP32[$9>>2] = $19;
   HEAP32[$18>>2] = $10;
   $99 = ((($ptree) + ($ply<<4)|0) + 73316|0);
   HEAP32[$8>>2] = $100;
   HEAP32[$99>>2] = $101;
  }
 } while(0);
 $116 = ($4|0)==(0);
 if (!($116)) {
  STACKTOP = sp;return;
 }
 $117 = $move_good & 16384;
 $118 = ($117|0)==(0);
 $119 = $move_good & 491520;
 $120 = ($119|0)==(131072);
 $or$cond = $118 | $120;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $121 = ((($ptree) + ($ply<<3)|0) + 143028|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)==($move_good|0);
 if (!($123)) {
  $124 = ((($ptree) + ($ply<<3)|0) + 143032|0);
  HEAP32[$124>>2] = $122;
  HEAP32[$121>>2] = $move_good;
 }
 $125 = ($depth|0)<(1);
 $$depth = $125 ? 1 : $depth;
 $126 = ((($ptree) + ($ply<<2)|0) + 144052|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($127|0)>(0);
 if ($128) {
  $i$03 = 0;
  while(1) {
   $129 = (((($ptree) + (($ply*2800)|0)|0) + ($i$03<<2)|0) + 144564|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (_phash($130,$turn)|0);
   $132 = ((($ptree) + ($131<<1)|0) + 505764|0);
   $133 = HEAP16[$132>>1]|0;
   $134 = ($133<<16>>16)<(0);
   if ($134) {
    $135 = ((($ptree) + ($131<<1)|0) + 538532|0);
    $136 = HEAP16[$135>>1]|0;
    $137 = ($136&65535) >>> 1;
    HEAP16[$135>>1] = $137;
    $138 = ($133&65535) >>> 1;
    HEAP16[$132>>1] = $138;
    $140 = $138;
   } else {
    $140 = $133;
   }
   $139 = $140&65535;
   $141 = (($139) + ($$depth))|0;
   $142 = $141&65535;
   HEAP16[$132>>1] = $142;
   $143 = (($i$03) + 1)|0;
   $exitcond = ($143|0)==($127|0);
   if ($exitcond) {
    break;
   } else {
    $i$03 = $143;
   }
  }
 }
 $144 = (_phash($move_good,$turn)|0);
 $145 = ((($ptree) + ($144<<1)|0) + 538532|0);
 $146 = HEAP16[$145>>1]|0;
 $147 = $146&65535;
 $148 = (($147) + ($$depth))|0;
 $149 = $148&65535;
 HEAP16[$145>>1] = $149;
 STACKTOP = sp;return;
}
function _pv_copy($ptree,$ply) {
 $ptree = $ptree|0;
 $ply = $ply|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ply) + -1)|0;
 $1 = (((($ptree) + (($0*516)|0)|0) + ($ply<<2)|0) + 7264|0);
 $2 = (((($ptree) + (($ply*516)|0)|0) + ($ply<<2)|0) + 7264|0);
 $3 = ((($ptree) + (($ply*516)|0)|0) + 7777|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (($5) - ($ply))|0;
 $7 = $6 << 2;
 $8 = (($7) + 4)|0;
 _memcpy(($1|0),($2|0),($8|0))|0;
 $9 = ((($ptree) + (($ply*516)|0)|0) + 7776|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ((($ptree) + (($0*516)|0)|0) + 7776|0);
 HEAP8[$11>>0] = $10;
 $12 = HEAP8[$3>>0]|0;
 $13 = ((($ptree) + (($0*516)|0)|0) + 7777|0);
 HEAP8[$13>>0] = $12;
 $14 = ((($ptree) + (($ply*516)|0)|0) + 7778|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ((($ptree) + (($0*516)|0)|0) + 7778|0);
 HEAP8[$16>>0] = $15;
 $17 = ((($ptree) + ($0<<2)|0) + 142516|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (((($ptree) + (($0*516)|0)|0) + ($0<<2)|0) + 7264|0);
 HEAP32[$19>>2] = $18;
 STACKTOP = sp;return;
}
function _search_quies($ptree,$alpha,$beta,$turn,$ply,$qui_ply) {
 $ptree = $ptree|0;
 $alpha = $alpha|0;
 $beta = $beta|0;
 $turn = $turn|0;
 $ply = $ply|0;
 $qui_ply = $qui_ply|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$1$ph = 0, $$lcssa$i = 0, $$pr = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$013$i = 0, $i$013$us$i = 0, $i$18$i = 0, $j$0$i = 0, $j$0$in$lcssa$i = 0, $j$0$in5$i = 0, $j$0$in5$i$phi = 0;
 var $j$04$i = 0, $j$06$i = 0, $nqmove$0$lcssa$i = 0, $nqmove$0$lcssa21$i = 0, $nqmove$012$i = 0, $nqmove$012$us$i = 0, $nqmove$1$i = 0, $nqmove$1$us$i = 0, $or$cond = 0, $or$cond$us$i = 0, $or$cond3$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[34180960>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[34180960>>2] = $1;
 $2 = (($ptree) + 2648|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_i64Add(($5|0),($8|0),1,0)|0);
 $10 = tempRet0;
 $11 = $2;
 $12 = $11;
 HEAP32[$12>>2] = $9;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $15 = (($ptree) + 75384|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$15>>2] = $17;
 $18 = (_evaluate($ptree,$ply,$turn)|0);
 $19 = ($18|0)>($alpha|0);
 if ($19) {
  $20 = ($18|0)<($beta|0);
  if ($20) {
   $$01 = $18;
  } else {
   $21 = ((($ptree) + ($ply<<2)|0) + 142516|0);
   HEAP32[$21>>2] = 16777216;
   $$0 = $18;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $alpha;
 }
 $22 = ($ply|0)>(126);
 if ($22) {
  $23 = ($$01|0)==($alpha|0);
  if (!($23)) {
   _pv_close($ptree,$ply,0);
  }
  $24 = ((($ptree) + ($ply<<2)|0) + 142516|0);
  HEAP32[$24>>2] = 0;
  $$0 = $18;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = (_is_mate_in3ply($ptree,$turn,$ply)|0);
 $26 = ($25|0)==(0);
 if (!($26)) {
  $27 = (32599 - ($ply))|0;
  $28 = ($$01|0)<($27|0);
  $29 = ($27|0)<($beta|0);
  $or$cond = $28 & $29;
  if (!($or$cond)) {
   $$0 = $27;
   STACKTOP = sp;return ($$0|0);
  }
  _pv_close($ptree,$ply,10);
  $$0 = $27;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = ((($ptree) + ($ply<<5)|0) + 3184|0);
 HEAP32[$30>>2] = 0;
 $31 = ($turn|0)==(0);
 $32 = (($ply) + -1)|0;
 $33 = ((($ptree) + ($32<<2)|0) + 2656|0);
 $34 = ((($ptree) + ($ply<<2)|0) + 2656|0);
 $35 = ($qui_ply|0)>(6);
 $36 = ((($ptree) + ($ply<<2)|0) + 571556|0);
 $37 = ((($ptree) + ($ply<<5)|0) + 3168|0);
 $38 = (($ptree) + 502964|0);
 $39 = ((($ptree) + ($ply<<2)|0) + 142516|0);
 $40 = ($turn|0)!=(0);
 $41 = (($ptree) + 594|0);
 $42 = (0 - ($beta))|0;
 $43 = $turn ^ 1;
 $44 = (($ply) + 1)|0;
 $45 = (($qui_ply) + 1)|0;
 $46 = ((($ptree) + ($44<<2)|0) + 571556|0);
 $47 = (($ptree) + 593|0);
 $$1 = $$01;$145 = 0;
 while(1) {
  if ((($145|0) == 0)) {
   $48 = HEAP32[$33>>2]|0;
   if ($31) {
    $50 = (_b_gen_captures($ptree,$48)|0);
    $51 = $50;
   } else {
    $49 = (_w_gen_captures($ptree,$48)|0);
    $51 = $49;
   }
   HEAP32[$34>>2] = $51;
   $52 = HEAP32[$33>>2]|0;
   $53 = $51;
   $54 = $52;
   $55 = (($53) - ($54))|0;
   $56 = $55 >> 2;
   $57 = ($55|0)>(0);
   if ($57) {
    if ($35) {
     $i$013$us$i = 0;$nqmove$012$us$i = 0;
     while(1) {
      $58 = (($52) + ($i$013$us$i<<2)|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = $59 >>> 19;
      $61 = $60 & 15;
      $62 = ($61|0)==(1);
      $63 = $59 & 16384;
      $64 = ($63|0)==(0);
      $or$cond$us$i = $62 & $64;
      if ($or$cond$us$i) {
       $nqmove$1$us$i = $nqmove$012$us$i;
      } else {
       $65 = ($61|0)!=(0);
       $66 = $59 & 491520;
       $67 = ($66|0)==(32768);
       $or$cond3$us$i = $65 | $67;
       if ($or$cond3$us$i) {
        $68 = (_estimate_score_diff($ptree,$59,$turn)|0);
        $69 = HEAP32[$36>>2]|0;
        $70 = (_eval_max_score($ptree,$59,$69,$turn,$68)|0);
        $71 = ($70|0)>($$1|0);
        if ($71) {
         $72 = (_swap($ptree,$59,-1,738,$turn)|0);
         $73 = ($72|0)>(-1);
         if ($73) {
          $74 = (($72) + ($68))|0;
          $75 = ((($ptree) + ($nqmove$012$us$i<<2)|0) + 502964|0);
          HEAP32[$75>>2] = $74;
          $76 = (($nqmove$012$us$i) + 1)|0;
          $77 = (($52) + ($nqmove$012$us$i<<2)|0);
          HEAP32[$77>>2] = $59;
          $nqmove$1$us$i = $76;
         } else {
          $nqmove$1$us$i = $nqmove$012$us$i;
         }
        } else {
         $nqmove$1$us$i = $nqmove$012$us$i;
        }
       } else {
        $nqmove$1$us$i = $nqmove$012$us$i;
       }
      }
      $78 = (($i$013$us$i) + 1)|0;
      $79 = ($78|0)<($56|0);
      if ($79) {
       $i$013$us$i = $78;$nqmove$012$us$i = $nqmove$1$us$i;
      } else {
       $nqmove$0$lcssa$i = $nqmove$1$us$i;
       break;
      }
     }
    } else {
     $i$013$i = 0;$nqmove$012$i = 0;
     while(1) {
      $80 = (($52) + ($i$013$i<<2)|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = (_estimate_score_diff($ptree,$81,$turn)|0);
      $83 = HEAP32[$36>>2]|0;
      $84 = (_eval_max_score($ptree,$81,$83,$turn,$82)|0);
      $85 = ($84|0)>($$1|0);
      if ($85) {
       $86 = (_swap($ptree,$81,-1,738,$turn)|0);
       $87 = ($86|0)>(-1);
       if ($87) {
        $88 = (($86) + ($82))|0;
        $89 = ((($ptree) + ($nqmove$012$i<<2)|0) + 502964|0);
        HEAP32[$89>>2] = $88;
        $90 = (($nqmove$012$i) + 1)|0;
        $91 = (($52) + ($nqmove$012$i<<2)|0);
        HEAP32[$91>>2] = $81;
        $nqmove$1$i = $90;
       } else {
        $nqmove$1$i = $nqmove$012$i;
       }
      } else {
       $nqmove$1$i = $nqmove$012$i;
      }
      $92 = (($i$013$i) + 1)|0;
      $93 = ($92|0)<($56|0);
      if ($93) {
       $i$013$i = $92;$nqmove$012$i = $nqmove$1$i;
      } else {
       $nqmove$0$lcssa$i = $nqmove$1$i;
       break;
      }
     }
    }
    $94 = ((($ptree) + ($nqmove$0$lcssa$i<<2)|0) + 502964|0);
    HEAP32[$94>>2] = -2147483648;
    $95 = (($nqmove$0$lcssa$i) + -2)|0;
    $96 = ($95|0)>(-1);
    if ($96) {
     $i$18$i = $95;
     while(1) {
      $97 = ((($ptree) + ($i$18$i<<2)|0) + 502964|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = (($52) + ($i$18$i<<2)|0);
      $100 = HEAP32[$99>>2]|0;
      $j$04$i = (($i$18$i) + 1)|0;
      $101 = ((($ptree) + ($j$04$i<<2)|0) + 502964|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = ($102|0)>($98|0);
      if ($103) {
       $104 = $102;$105 = $97;$j$0$in5$i = $i$18$i;$j$06$i = $j$04$i;
       while(1) {
        HEAP32[$105>>2] = $104;
        $106 = (($52) + ($j$06$i<<2)|0);
        $107 = HEAP32[$106>>2]|0;
        $108 = (($52) + ($j$0$in5$i<<2)|0);
        HEAP32[$108>>2] = $107;
        $j$0$i = (($j$06$i) + 1)|0;
        $109 = ((($ptree) + ($j$0$i<<2)|0) + 502964|0);
        $110 = HEAP32[$109>>2]|0;
        $111 = ($110|0)>($98|0);
        $112 = ((($ptree) + ($j$06$i<<2)|0) + 502964|0);
        if ($111) {
         $j$0$in5$i$phi = $j$06$i;$104 = $110;$105 = $112;$j$06$i = $j$0$i;$j$0$in5$i = $j$0$in5$i$phi;
        } else {
         $$lcssa$i = $112;$j$0$in$lcssa$i = $j$06$i;
         break;
        }
       }
      } else {
       $$lcssa$i = $97;$j$0$in$lcssa$i = $i$18$i;
      }
      HEAP32[$$lcssa$i>>2] = $98;
      $113 = (($52) + ($j$0$in$lcssa$i<<2)|0);
      HEAP32[$113>>2] = $100;
      $114 = (($i$18$i) + -1)|0;
      $115 = ($i$18$i|0)>(0);
      if ($115) {
       $i$18$i = $114;
      } else {
       $nqmove$0$lcssa21$i = $nqmove$0$lcssa$i;
       break;
      }
     }
    } else {
     $nqmove$0$lcssa21$i = $nqmove$0$lcssa$i;
    }
   } else {
    HEAP32[$38>>2] = -2147483648;
    $nqmove$0$lcssa21$i = 0;
   }
   $116 = HEAP32[$33>>2]|0;
   $117 = (($116) + ($nqmove$0$lcssa21$i<<2)|0);
   HEAP32[$34>>2] = $117;
   HEAP32[$37>>2] = $52;
   HEAP32[$30>>2] = 1;
   $120 = $52;
  } else if ((($145|0) == 1)) {
   $$pre$i = HEAP32[$37>>2]|0;
   $120 = $$pre$i;
  } else {
   break;
  }
  $118 = HEAP32[$34>>2]|0;
  $119 = ($120|0)==($118|0);
  if ($119) {
   break;
  }
  $121 = (($120) + 4|0);
  HEAP32[$37>>2] = $121;
  $122 = HEAP32[$120>>2]|0;
  HEAP32[$39>>2] = $122;
  if ($40) {
   _make_move_w($ptree,$122,$ply);
   $123 = HEAP8[$41>>0]|0;
   $124 = $123&255;
   $125 = (_is_white_attacked($ptree,$124)|0);
   $126 = ($125|0)==(0);
   if ($126) {
    label = 42;
   } else {
    $131 = HEAP32[$39>>2]|0;
    _unmake_move_w($ptree,$131,$ply);
    $$1$ph = $$1;
   }
  } else {
   _make_move_b($ptree,$122,$ply);
   $127 = HEAP8[$47>>0]|0;
   $128 = $127&255;
   $129 = (_is_black_attacked($ptree,$128)|0);
   $130 = ($129|0)==(0);
   if ($130) {
    label = 42;
   } else {
    $132 = HEAP32[$39>>2]|0;
    _unmake_move_b($ptree,$132,$ply);
    $$1$ph = $$1;
   }
  }
  if ((label|0) == 42) {
   label = 0;
   $133 = (0 - ($$1))|0;
   $134 = (_search_quies($ptree,$42,$133,$43,$44,$45)|0);
   $135 = (0 - ($134))|0;
   $136 = HEAP32[$39>>2]|0;
   if ($40) {
    _unmake_move_w($ptree,$136,$ply);
   } else {
    _unmake_move_b($ptree,$136,$ply);
   }
   $137 = ($$1|0)<($135|0);
   if ($137) {
    $138 = HEAP32[$39>>2]|0;
    $139 = HEAP32[$36>>2]|0;
    $140 = HEAP32[$46>>2]|0;
    $141 = (0 - ($140))|0;
    _check_futile_score_quies($ptree,$138,$139,$141,$turn);
    $142 = ($beta|0)>($135|0);
    if ($142) {
     $$1$ph = $135;
    } else {
     $$0 = $135;
     label = 51;
     break;
    }
   } else {
    $$1$ph = $$1;
   }
  }
  $$pr = HEAP32[$30>>2]|0;
  $$1 = $$1$ph;$145 = $$pr;
 }
 if ((label|0) == 51) {
  STACKTOP = sp;return ($$0|0);
 }
 $143 = ($$1|0)==($alpha|0);
 if ($143) {
  $$0 = $alpha;
  STACKTOP = sp;return ($$0|0);
 }
 $144 = ($$1|0)==($18|0);
 if ($144) {
  _pv_close($ptree,$ply,0);
  $$0 = $18;
  STACKTOP = sp;return ($$0|0);
 } else {
  _pv_copy($ptree,$ply);
  $$0 = $$1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _eval_material($ptree) {
 $ptree = $ptree|0;
 var $$neg11 = 0, $$neg14 = 0, $$neg17 = 0, $$neg2 = 0, $$neg20 = 0, $$neg5 = 0, $$neg8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ptree) + 356|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ptree) + 360|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($ptree) + 364|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_popu_count012($1,$3,$5)|0);
 $7 = (($ptree) + 500|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 31;
 $10 = (($ptree) + 368|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($ptree) + 372|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($ptree) + 376|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_popu_count012($11,$13,$15)|0);
 $17 = (($ptree) + 504|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & 31;
 $$neg2 = (($9) + ($6))|0;
 $20 = (($$neg2) - ($16))|0;
 $21 = (($20) - ($19))|0;
 $22 = HEAP32[((34184376 + 64|0))>>2]|0;
 $23 = Math_imul($21, $22)|0;
 $24 = (($ptree) + 188|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($ptree) + 192|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($ptree) + 196|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (_popu_count012($25,$27,$29)|0);
 $31 = HEAP32[$7>>2]|0;
 $32 = $31 >>> 5;
 $33 = $32 & 7;
 $34 = (($ptree) + 200|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($ptree) + 204|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($ptree) + 208|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (_popu_count012($35,$37,$39)|0);
 $41 = HEAP32[$17>>2]|0;
 $42 = $41 >>> 5;
 $43 = $42 & 7;
 $$neg5 = (($33) + ($30))|0;
 $44 = (($$neg5) - ($40))|0;
 $45 = (($44) - ($43))|0;
 $46 = HEAP32[((34184376 + 68|0))>>2]|0;
 $47 = Math_imul($45, $46)|0;
 $48 = (($47) + ($23))|0;
 $49 = (($ptree) + 212|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($ptree) + 216|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($ptree) + 220|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (_popu_count012($50,$52,$54)|0);
 $56 = HEAP32[$7>>2]|0;
 $57 = $56 >>> 8;
 $58 = $57 & 7;
 $59 = (($ptree) + 224|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($ptree) + 228|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($ptree) + 232|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (_popu_count012($60,$62,$64)|0);
 $66 = HEAP32[$17>>2]|0;
 $67 = $66 >>> 8;
 $68 = $67 & 7;
 $$neg8 = (($58) + ($55))|0;
 $69 = (($$neg8) - ($65))|0;
 $70 = (($69) - ($68))|0;
 $71 = HEAP32[((34184376 + 72|0))>>2]|0;
 $72 = Math_imul($70, $71)|0;
 $73 = (($48) + ($72))|0;
 $74 = (($ptree) + 236|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (($ptree) + 240|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($ptree) + 244|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (_popu_count012($75,$77,$79)|0);
 $81 = HEAP32[$7>>2]|0;
 $82 = $81 >>> 11;
 $83 = $82 & 7;
 $84 = (($ptree) + 248|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($ptree) + 252|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (($ptree) + 256|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (_popu_count012($85,$87,$89)|0);
 $91 = HEAP32[$17>>2]|0;
 $92 = $91 >>> 11;
 $93 = $92 & 7;
 $$neg11 = (($83) + ($80))|0;
 $94 = (($$neg11) - ($90))|0;
 $95 = (($94) - ($93))|0;
 $96 = HEAP32[((34184376 + 76|0))>>2]|0;
 $97 = Math_imul($95, $96)|0;
 $98 = (($73) + ($97))|0;
 $99 = (($ptree) + 380|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($ptree) + 384|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($ptree) + 388|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (_popu_count012($100,$102,$104)|0);
 $106 = HEAP32[$7>>2]|0;
 $107 = $106 >>> 14;
 $108 = $107 & 7;
 $109 = (($ptree) + 392|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = (($ptree) + 396|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = (($ptree) + 400|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (_popu_count012($110,$112,$114)|0);
 $116 = HEAP32[$17>>2]|0;
 $117 = $116 >>> 14;
 $118 = $117 & 7;
 $$neg14 = (($108) + ($105))|0;
 $119 = (($$neg14) - ($115))|0;
 $120 = (($119) - ($118))|0;
 $121 = HEAP32[((34184376 + 80|0))>>2]|0;
 $122 = Math_imul($120, $121)|0;
 $123 = (($98) + ($122))|0;
 $124 = (($ptree) + 260|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = (($ptree) + 264|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = (($ptree) + 268|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = (_popu_count012($125,$127,$129)|0);
 $131 = HEAP32[$7>>2]|0;
 $132 = $131 >>> 17;
 $133 = $132 & 3;
 $134 = (($ptree) + 272|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = (($ptree) + 276|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = (($ptree) + 280|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = (_popu_count012($135,$137,$139)|0);
 $141 = HEAP32[$17>>2]|0;
 $142 = $141 >>> 17;
 $143 = $142 & 3;
 $$neg17 = (($133) + ($130))|0;
 $144 = (($$neg17) - ($140))|0;
 $145 = (($144) - ($143))|0;
 $146 = HEAP32[((34184376 + 84|0))>>2]|0;
 $147 = Math_imul($145, $146)|0;
 $148 = (($123) + ($147))|0;
 $149 = (($ptree) + 284|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = (($ptree) + 288|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = (($ptree) + 292|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = (_popu_count012($150,$152,$154)|0);
 $156 = HEAP32[$7>>2]|0;
 $157 = $156 >>> 19;
 $158 = (($ptree) + 296|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = (($ptree) + 300|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = (($ptree) + 304|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = (_popu_count012($159,$161,$163)|0);
 $165 = HEAP32[$17>>2]|0;
 $166 = $165 >>> 19;
 $$neg20 = (($157) + ($155))|0;
 $167 = (($$neg20) - ($164))|0;
 $168 = (($167) - ($166))|0;
 $169 = HEAP32[((34184376 + 88|0))>>2]|0;
 $170 = Math_imul($168, $169)|0;
 $171 = (($148) + ($170))|0;
 $172 = (($ptree) + 404|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = (($ptree) + 408|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = (($ptree) + 412|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = (_popu_count012($173,$175,$177)|0);
 $179 = (($ptree) + 416|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = (($ptree) + 420|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = (($ptree) + 424|0);
 $184 = HEAP32[$183>>2]|0;
 $185 = (_popu_count012($180,$182,$184)|0);
 $186 = (($178) - ($185))|0;
 $187 = HEAP32[((34184376 + 96|0))>>2]|0;
 $188 = Math_imul($186, $187)|0;
 $189 = (($171) + ($188))|0;
 $190 = (($ptree) + 428|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = (($ptree) + 432|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = (($ptree) + 436|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = (_popu_count012($191,$193,$195)|0);
 $197 = (($ptree) + 440|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = (($ptree) + 444|0);
 $200 = HEAP32[$199>>2]|0;
 $201 = (($ptree) + 448|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = (_popu_count012($198,$200,$202)|0);
 $204 = (($196) - ($203))|0;
 $205 = HEAP32[((34184376 + 100|0))>>2]|0;
 $206 = Math_imul($204, $205)|0;
 $207 = (($189) + ($206))|0;
 $208 = (($ptree) + 452|0);
 $209 = HEAP32[$208>>2]|0;
 $210 = (($ptree) + 456|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = (($ptree) + 460|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = (_popu_count012($209,$211,$213)|0);
 $215 = (($ptree) + 464|0);
 $216 = HEAP32[$215>>2]|0;
 $217 = (($ptree) + 468|0);
 $218 = HEAP32[$217>>2]|0;
 $219 = (($ptree) + 472|0);
 $220 = HEAP32[$219>>2]|0;
 $221 = (_popu_count012($216,$218,$220)|0);
 $222 = (($214) - ($221))|0;
 $223 = HEAP32[((34184376 + 104|0))>>2]|0;
 $224 = Math_imul($222, $223)|0;
 $225 = (($207) + ($224))|0;
 $226 = (($ptree) + 476|0);
 $227 = HEAP32[$226>>2]|0;
 $228 = (($ptree) + 480|0);
 $229 = HEAP32[$228>>2]|0;
 $230 = (($ptree) + 484|0);
 $231 = HEAP32[$230>>2]|0;
 $232 = (_popu_count012($227,$229,$231)|0);
 $233 = (($ptree) + 488|0);
 $234 = HEAP32[$233>>2]|0;
 $235 = (($ptree) + 492|0);
 $236 = HEAP32[$235>>2]|0;
 $237 = (($ptree) + 496|0);
 $238 = HEAP32[$237>>2]|0;
 $239 = (_popu_count012($234,$236,$238)|0);
 $240 = (($232) - ($239))|0;
 $241 = HEAP32[((34184376 + 108|0))>>2]|0;
 $242 = Math_imul($240, $241)|0;
 $243 = (($225) + ($242))|0;
 $244 = (($ptree) + 308|0);
 $245 = HEAP32[$244>>2]|0;
 $246 = (($ptree) + 312|0);
 $247 = HEAP32[$246>>2]|0;
 $248 = (($ptree) + 316|0);
 $249 = HEAP32[$248>>2]|0;
 $250 = (_popu_count012($245,$247,$249)|0);
 $251 = (($ptree) + 320|0);
 $252 = HEAP32[$251>>2]|0;
 $253 = (($ptree) + 324|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = (($ptree) + 328|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = (_popu_count012($252,$254,$256)|0);
 $258 = (($250) - ($257))|0;
 $259 = HEAP32[((34184376 + 116|0))>>2]|0;
 $260 = Math_imul($258, $259)|0;
 $261 = (($243) + ($260))|0;
 $262 = (($ptree) + 332|0);
 $263 = HEAP32[$262>>2]|0;
 $264 = (($ptree) + 336|0);
 $265 = HEAP32[$264>>2]|0;
 $266 = (($ptree) + 340|0);
 $267 = HEAP32[$266>>2]|0;
 $268 = (_popu_count012($263,$265,$267)|0);
 $269 = (($ptree) + 344|0);
 $270 = HEAP32[$269>>2]|0;
 $271 = (($ptree) + 348|0);
 $272 = HEAP32[$271>>2]|0;
 $273 = (($ptree) + 352|0);
 $274 = HEAP32[$273>>2]|0;
 $275 = (_popu_count012($270,$272,$274)|0);
 $276 = (($268) - ($275))|0;
 $277 = HEAP32[((34184376 + 120|0))>>2]|0;
 $278 = Math_imul($276, $277)|0;
 $279 = (($261) + ($278))|0;
 STACKTOP = sp;return ($279|0);
}
function _evaluate($ptree,$ply,$turn) {
 $ptree = $ptree|0;
 $ply = $ply|0;
 $turn = $turn|0;
 var $$$i = 0, $$0 = 0, $$0$in = 0, $$1$i = 0, $$in$i = 0, $$in1$i = 0, $$score$1$i = 0, $$score$11$i = 0, $$score$13$i = 0, $$score$15$i = 0, $$score$17$i = 0, $$score$19$i = 0, $$score$21$i = 0, $$score$23$i = 0, $$score$3$i = 0, $$score$5$i = 0, $$score$7$i = 0, $$score$9$i = 0, $$sink$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0;
 var $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0;
 var $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0;
 var $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0;
 var $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0;
 var $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0;
 var $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0;
 var $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0;
 var $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0;
 var $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0;
 var $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0;
 var $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0;
 var $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0;
 var $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0;
 var $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0;
 var $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0;
 var $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $bb$sroa$0$020$i = 0, $bb$sroa$0$0246$i = 0, $bb$sroa$0$10111$i = 0, $bb$sroa$0$11100$i = 0, $bb$sroa$0$1235$i = 0, $bb$sroa$0$1284$i = 0, $bb$sroa$0$1373$i = 0, $bb$sroa$0$1457$i = 0, $bb$sroa$0$1546$i = 0, $bb$sroa$0$1630$i = 0, $bb$sroa$0$1720$i = 0, $bb$sroa$0$2219$i = 0, $bb$sroa$0$3208$i = 0, $bb$sroa$0$4192$i = 0, $bb$sroa$0$5181$i = 0, $bb$sroa$0$6165$i = 0, $bb$sroa$0$7154$i = 0, $bb$sroa$0$8138$i = 0, $bb$sroa$0$9127$i = 0, $bb$sroa$1$021$i = 0;
 var $bb$sroa$1$0247$i = 0, $bb$sroa$1$10112$i = 0, $bb$sroa$1$11101$i = 0, $bb$sroa$1$1236$i = 0, $bb$sroa$1$1285$i = 0, $bb$sroa$1$1374$i = 0, $bb$sroa$1$1458$i = 0, $bb$sroa$1$1547$i = 0, $bb$sroa$1$1631$i = 0, $bb$sroa$1$1721$i = 0, $bb$sroa$1$2220$i = 0, $bb$sroa$1$3209$i = 0, $bb$sroa$1$4193$i = 0, $bb$sroa$1$5182$i = 0, $bb$sroa$1$6166$i = 0, $bb$sroa$1$7155$i = 0, $bb$sroa$1$8139$i = 0, $bb$sroa$1$9128$i = 0, $bb$sroa$2$022$i = 0, $bb$sroa$2$0248$i = 0;
 var $bb$sroa$2$10113$i = 0, $bb$sroa$2$11102$i = 0, $bb$sroa$2$1237$i = 0, $bb$sroa$2$1286$i = 0, $bb$sroa$2$1375$i = 0, $bb$sroa$2$1459$i = 0, $bb$sroa$2$1548$i = 0, $bb$sroa$2$1632$i = 0, $bb$sroa$2$1722$i = 0, $bb$sroa$2$2221$i = 0, $bb$sroa$2$3210$i = 0, $bb$sroa$2$4194$i = 0, $bb$sroa$2$5183$i = 0, $bb$sroa$2$6167$i = 0, $bb$sroa$2$7156$i = 0, $bb$sroa$2$8140$i = 0, $bb$sroa$2$9129$i = 0, $diff$0$i = 0, $diff$1$i = 0, $diff$2$i = 0;
 var $exitcond = 0, $exitcond$i = 0, $exitcond260$i = 0, $exitcond267$i = 0, $exitcond274$i = 0, $exitcond281$i = 0, $exitcond288$i = 0, $exitcond295$i = 0, $exitcond302$i = 0, $exitcond309$i = 0, $exitcond79 = 0, $hand_index$0$i = 0, $hand_index2$0$i = 0, $i$020 = 0, $i$0229$i = 0, $i$1202$i = 0, $i$2175$i = 0, $i$3148$i = 0, $i$4121$i = 0, $i$594$i = 0;
 var $i$667$i = 0, $i$740$i = 0, $i$816$i = 0, $indvars$iv = 0, $indvars$iv$next = 0, $j$018 = 0, $list0 = 0, $list1 = 0, $list2$i = 0, $n2$0$lcssa$i = 0, $n2$0243$i = 0, $n2$1$lcssa$i = 0, $n2$10$lcssa$i = 0, $n2$10108$i = 0, $n2$11$lcssa$i = 0, $n2$1197$i = 0, $n2$12$lcssa$i = 0, $n2$1232$i = 0, $n2$1281$i = 0, $n2$13$lcssa$i = 0;
 var $n2$1370$i = 0, $n2$14$lcssa$i = 0, $n2$1454$i = 0, $n2$15$lcssa$i = 0, $n2$1543$i = 0, $n2$16$lcssa$i = 0, $n2$1627$i = 0, $n2$17$lcssa$i = 0, $n2$1717$i = 0, $n2$2$lcssa$i = 0, $n2$2216$i = 0, $n2$3$lcssa$i = 0, $n2$3205$i = 0, $n2$4$lcssa$i = 0, $n2$4189$i = 0, $n2$5$lcssa$i = 0, $n2$5178$i = 0, $n2$6$lcssa$i = 0, $n2$6162$i = 0, $n2$7$lcssa$i = 0;
 var $n2$7151$i = 0, $n2$8$lcssa$i = 0, $n2$8135$i = 0, $n2$9$lcssa$i = 0, $n2$9124$i = 0, $nlist$0$lcssa$i = 0, $nlist$0$lcssa$i3 = 0, $nlist$019$i = 0, $nlist$0245$i = 0, $nlist$1$i = 0, $nlist$1$lcssa$i = 0, $nlist$10$lcssa$i = 0, $nlist$10110$i = 0, $nlist$11$lcssa$i = 0, $nlist$1199$i = 0, $nlist$12$lcssa$i = 0, $nlist$1234$i = 0, $nlist$1283$i = 0, $nlist$13$lcssa$i = 0, $nlist$1372$i = 0;
 var $nlist$14$lcssa$i = 0, $nlist$1456$i = 0, $nlist$15$lcssa$i = 0, $nlist$1545$i = 0, $nlist$16$lcssa$i = 0, $nlist$1629$i = 0, $nlist$17$lcssa$i = 0, $nlist$1719$i = 0, $nlist$2$lcssa$i = 0, $nlist$2218$i = 0, $nlist$3$lcssa$i = 0, $nlist$3207$i = 0, $nlist$4$lcssa$i = 0, $nlist$4191$i = 0, $nlist$5$lcssa$i = 0, $nlist$5180$i = 0, $nlist$6$lcssa$i = 0, $nlist$6164$i = 0, $nlist$7$lcssa$i = 0, $nlist$7153$i = 0;
 var $nlist$8$lcssa$i = 0, $nlist$8137$i = 0, $nlist$9$lcssa$i = 0, $nlist$9126$i = 0, $score$0$lcssa$i = 0, $score$0244$i = 0, $score$1$i = 0, $score$1$lcssa$i = 0, $score$10$lcssa$i = 0, $score$10109$i = 0, $score$11$i = 0, $score$11$lcssa$i = 0, $score$1198$i = 0, $score$12$lcssa$i = 0, $score$1233$i = 0, $score$1282$i = 0, $score$13$i = 0, $score$13$lcssa$i = 0, $score$1371$i = 0, $score$14$lcssa$i = 0;
 var $score$1455$i = 0, $score$15$i = 0, $score$15$lcssa$i = 0, $score$1544$i = 0, $score$16$lcssa$i = 0, $score$1628$i = 0, $score$17$i = 0, $score$17$lcssa$i = 0, $score$1718$i = 0, $score$19$i = 0, $score$2$lcssa$i = 0, $score$21$i = 0, $score$2217$i = 0, $score$23$i = 0, $score$3$i = 0, $score$3$lcssa$i = 0, $score$3206$i = 0, $score$4$lcssa$i = 0, $score$4190$i = 0, $score$5$i = 0;
 var $score$5$lcssa$i = 0, $score$5179$i = 0, $score$6$lcssa$i = 0, $score$6163$i = 0, $score$7$i = 0, $score$7$lcssa$i = 0, $score$7152$i = 0, $score$8$lcssa$i = 0, $score$8136$i = 0, $score$9$i = 0, $score$9$lcssa$i = 0, $score$9125$i = 0, $sum$0$lcssa = 0, $sum$021 = 0, $sum$119 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list2$i = sp + 416|0;
 $list0 = sp + 208|0;
 $list1 = sp;
 $0 = (($ptree) + 75380|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($ptree) + ($ply<<2)|0) + 571556|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(2147483647);
 if (!($5)) {
  $$0$in = $4;
  $$0 = (($$0$in|0) / 32)&-1;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = $ptree;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($ptree) + 500|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $8 & 4194303;
 $15 = (1528 + ($14<<3)|0);
 $16 = $15;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (_bitshift64Shl(($13|0),0,21)|0);
 $23 = tempRet0;
 $24 = $8 & -2097152;
 $25 = $22 ^ $24;
 $26 = $23 ^ $11;
 $27 = $18 & -2097152;
 $28 = $21 ^ $18;
 $29 = ($27|0)==($25|0);
 $30 = ($28|0)==($26|0);
 $31 = $29 & $30;
 if ($31) {
  $32 = $18 & 2097151;
  $33 = (($32) + -1048576)|0;
  $34 = ($turn|0)!=(0);
  $35 = (1048576 - ($32))|0;
  $36 = $34 ? $35 : $33;
  HEAP32[$3>>2] = $36;
  $$0$in = $36;
  $$0 = (($$0$in|0) / 32)&-1;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = $13 & 31;
 HEAP32[$list0>>2] = $37;
 $38 = (($ptree) + 504|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 & 31;
 $41 = (($40) + 19)|0;
 $42 = (($list0) + 4|0);
 HEAP32[$42>>2] = $41;
 $43 = $13 >>> 5;
 $44 = $43 & 7;
 $45 = (($44) + 38)|0;
 $46 = (($list0) + 8|0);
 HEAP32[$46>>2] = $45;
 $47 = $39 >>> 5;
 $48 = $47 & 7;
 $49 = (($48) + 43)|0;
 $50 = (($list0) + 12|0);
 HEAP32[$50>>2] = $49;
 $51 = $13 >>> 8;
 $52 = $51 & 7;
 $53 = $52 | 48;
 $54 = (($list0) + 16|0);
 HEAP32[$54>>2] = $53;
 $55 = $39 >>> 8;
 $56 = $55 & 7;
 $57 = (($56) + 53)|0;
 $58 = (($list0) + 20|0);
 HEAP32[$58>>2] = $57;
 $59 = $13 >>> 11;
 $60 = $59 & 7;
 $61 = (($60) + 58)|0;
 $62 = (($list0) + 24|0);
 HEAP32[$62>>2] = $61;
 $63 = $39 >>> 11;
 $64 = $63 & 7;
 $65 = (($64) + 63)|0;
 $66 = (($list0) + 28|0);
 HEAP32[$66>>2] = $65;
 $67 = $13 >>> 14;
 $68 = $67 & 7;
 $69 = (($68) + 68)|0;
 $70 = (($list0) + 32|0);
 HEAP32[$70>>2] = $69;
 $71 = $39 >>> 14;
 $72 = $71 & 7;
 $73 = (($72) + 73)|0;
 $74 = (($list0) + 36|0);
 HEAP32[$74>>2] = $73;
 $75 = $13 >>> 17;
 $76 = $75 & 3;
 $77 = (($76) + 78)|0;
 $78 = (($list0) + 40|0);
 HEAP32[$78>>2] = $77;
 $79 = $39 >>> 17;
 $80 = $79 & 3;
 $81 = (($80) + 81)|0;
 $82 = (($list0) + 44|0);
 HEAP32[$82>>2] = $81;
 $83 = $13 >>> 19;
 $84 = (($83) + 84)|0;
 $85 = (($list0) + 48|0);
 HEAP32[$85>>2] = $84;
 $86 = $39 >>> 19;
 $87 = (($86) + 87)|0;
 $88 = (($list0) + 52|0);
 HEAP32[$88>>2] = $87;
 HEAP32[$list1>>2] = $40;
 $89 = (($37) + 19)|0;
 $90 = (($list1) + 4|0);
 HEAP32[$90>>2] = $89;
 $91 = (($48) + 38)|0;
 $92 = (($list1) + 8|0);
 HEAP32[$92>>2] = $91;
 $93 = (($44) + 43)|0;
 $94 = (($list1) + 12|0);
 HEAP32[$94>>2] = $93;
 $95 = $56 | 48;
 $96 = (($list1) + 16|0);
 HEAP32[$96>>2] = $95;
 $97 = (($52) + 53)|0;
 $98 = (($list1) + 20|0);
 HEAP32[$98>>2] = $97;
 $99 = (($64) + 58)|0;
 $100 = (($list1) + 24|0);
 HEAP32[$100>>2] = $99;
 $101 = (($60) + 63)|0;
 $102 = (($list1) + 28|0);
 HEAP32[$102>>2] = $101;
 $103 = (($72) + 68)|0;
 $104 = (($list1) + 32|0);
 HEAP32[$104>>2] = $103;
 $105 = (($68) + 73)|0;
 $106 = (($list1) + 36|0);
 HEAP32[$106>>2] = $105;
 $107 = (($80) + 78)|0;
 $108 = (($list1) + 40|0);
 HEAP32[$108>>2] = $107;
 $109 = (($76) + 81)|0;
 $110 = (($list1) + 44|0);
 HEAP32[$110>>2] = $109;
 $111 = (($86) + 84)|0;
 $112 = (($list1) + 48|0);
 HEAP32[$112>>2] = $111;
 $113 = HEAP32[$12>>2]|0;
 $114 = $113 >>> 19;
 $115 = (($114) + 87)|0;
 $116 = (($list1) + 52|0);
 HEAP32[$116>>2] = $115;
 $117 = HEAP32[221111344>>2]|0;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = (($ply) + -1)|0;
  $120 = ((($ptree) + ($119<<2)|0) + 571556|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($121|0)==(2147483647);
  if (!($122)) {
   $123 = ((($ptree) + ($119<<2)|0) + 142516|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $124 & 491520;
   $126 = ($125|0)==(262144);
   if (!($126)) {
    $127 = $124 >>> 7;
    $128 = $127 & 127;
    $129 = $124 & 127;
    $130 = (($ptree) + 8|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (($ptree) + 20|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = $133 | $131;
    $135 = (($ptree) + 12|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (($ptree) + 24|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = $138 | $136;
    $140 = (($ptree) + 16|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (($ptree) + 28|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = $143 | $141;
    $145 = (($ptree) + 593|0);
    $146 = HEAP8[$145>>0]|0;
    $147 = $146&255;
    $148 = (34156304 + (($147*12)|0)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = $149 ^ $134;
    $151 = ((34156304 + (($147*12)|0)|0) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = $152 ^ $139;
    $154 = ((34156304 + (($147*12)|0)|0) + 8|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = $155 ^ $144;
    $157 = (($ptree) + 594|0);
    $158 = HEAP8[$157>>0]|0;
    $159 = $158&255;
    $160 = (34156304 + (($159*12)|0)|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = $150 ^ $161;
    $163 = ((34156304 + (($159*12)|0)|0) + 4|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = $153 ^ $164;
    $166 = ((34156304 + (($159*12)|0)|0) + 8|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = $156 ^ $167;
    $169 = (34156304 + (($129*12)|0)|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = $162 ^ $170;
    $172 = ((34156304 + (($129*12)|0)|0) + 4|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = $165 ^ $173;
    $175 = ((34156304 + (($129*12)|0)|0) + 8|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = $168 ^ $176;
    $178 = $174 | $171;
    $179 = $178 | $177;
    $180 = ($179|0)==(0);
    if ($180) {
     $nlist$0$lcssa$i3 = 14;
    } else {
     $bb$sroa$0$020$i = $171;$bb$sroa$1$021$i = $174;$bb$sroa$2$022$i = $177;$nlist$019$i = 14;
     while(1) {
      $181 = (_first_one012($bb$sroa$0$020$i,$bb$sroa$1$021$i,$bb$sroa$2$022$i)|0);
      $182 = (34156304 + (($181*12)|0)|0);
      $183 = HEAP32[$182>>2]|0;
      $184 = $183 ^ $bb$sroa$0$020$i;
      $185 = ((34156304 + (($181*12)|0)|0) + 4|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = $186 ^ $bb$sroa$1$021$i;
      $188 = ((34156304 + (($181*12)|0)|0) + 8|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = $189 ^ $bb$sroa$2$022$i;
      $191 = ((($ptree) + ($181)|0) + 512|0);
      $192 = HEAP8[$191>>0]|0;
      $193 = $192 << 24 >> 24;
      $194 = (($193) + 15)|0;
      $195 = (1024 + ($194<<2)|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = (($196) + ($181))|0;
      $198 = (($list0) + ($nlist$019$i<<2)|0);
      HEAP32[$198>>2] = $197;
      $199 = (15 - ($193))|0;
      $200 = (1024 + ($199<<2)|0);
      $201 = HEAP32[$200>>2]|0;
      $202 = (80 - ($181))|0;
      $203 = (($202) + ($201))|0;
      $204 = (($nlist$019$i) + 1)|0;
      $205 = (($list1) + ($nlist$019$i<<2)|0);
      HEAP32[$205>>2] = $203;
      $206 = $187 | $184;
      $207 = $206 | $190;
      $208 = ($207|0)==(0);
      if ($208) {
       $nlist$0$lcssa$i3 = $204;
       break;
      } else {
       $bb$sroa$0$020$i = $184;$bb$sroa$1$021$i = $187;$bb$sroa$2$022$i = $190;$nlist$019$i = $204;
      }
     }
    }
    $209 = ((($ptree) + ($129)|0) + 512|0);
    $210 = HEAP8[$209>>0]|0;
    $211 = $210 << 24 >> 24;
    $212 = (($211) + 15)|0;
    $213 = (1024 + ($212<<2)|0);
    $214 = HEAP32[$213>>2]|0;
    $215 = (($214) + ($129))|0;
    $216 = (($list0) + ($nlist$0$lcssa$i3<<2)|0);
    HEAP32[$216>>2] = $215;
    $217 = (15 - ($211))|0;
    $218 = (1024 + ($217<<2)|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = (80 - ($129))|0;
    $221 = (($219) + ($220))|0;
    $222 = (($nlist$0$lcssa$i3) + 1)|0;
    $223 = (($list1) + ($nlist$0$lcssa$i3<<2)|0);
    HEAP32[$223>>2] = $221;
    $224 = (_doapc($146,$158,$211,$129,$list0,$list1,$222)|0);
    $225 = ($128>>>0)>(80);
    if ($225) {
     $226 = (($128) + -80)|0;
     $227 = ($turn|0)==(0);
     $$in1$i = $227 ? $38 : $12;
     $228 = HEAP32[$$in1$i>>2]|0;
     switch ($128|0) {
     case 86:  {
      $238 = $228 >>> 17;
      $239 = $238 & 3;
      $hand_index$0$i = $239;
      break;
     }
     case 83:  {
      $232 = $228 >>> 8;
      $233 = $232 & 7;
      $hand_index$0$i = $233;
      break;
     }
     case 84:  {
      $234 = $228 >>> 11;
      $235 = $234 & 7;
      $hand_index$0$i = $235;
      break;
     }
     case 85:  {
      $236 = $228 >>> 14;
      $237 = $236 & 7;
      $hand_index$0$i = $237;
      break;
     }
     case 81:  {
      $229 = $228 & 31;
      $hand_index$0$i = $229;
      break;
     }
     case 82:  {
      $230 = $228 >>> 5;
      $231 = $230 & 7;
      $hand_index$0$i = $231;
      break;
     }
     default: {
      $240 = $228 >>> 19;
      $hand_index$0$i = $240;
     }
     }
     $241 = (_doacapt($146,$158,$226,$turn,$hand_index$0$i,$list0,$list1,$nlist$0$lcssa$i3)|0);
     $242 = (($241) + ($224))|0;
     $243 = $128 << 1;
     $244 = (-161 - ($turn))|0;
     $245 = (($244) + ($243))|0;
     $246 = (($list0) + ($245<<2)|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = (($247) + 1)|0;
     HEAP32[$246>>2] = $248;
     $249 = (($turn) + -162)|0;
     $250 = (($249) + ($243))|0;
     $251 = (($list1) + ($250<<2)|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = (($252) + 1)|0;
     HEAP32[$251>>2] = $253;
     $254 = (($hand_index$0$i) + 1)|0;
     $255 = (_doacapt($146,$158,$226,$turn,$254,$list0,$list1,$nlist$0$lcssa$i3)|0);
     $256 = (($242) - ($255))|0;
     $diff$2$i = $256;
    } else {
     $257 = $124 >>> 19;
     $258 = $257 & 15;
     $259 = ($258|0)==(0);
     if ($259) {
      $diff$0$i = $224;$nlist$1$i = $nlist$0$lcssa$i3;
     } else {
      $260 = $257 & 7;
      $261 = ($turn|0)!=(0);
      $$in$i = $261 ? $12 : $38;
      $262 = HEAP32[$$in$i>>2]|0;
      $263 = (0 - ($258))|0;
      $264 = $261 ? $263 : $258;
      $265 = (($264) + 15)|0;
      $266 = (34184184 + ($265<<2)|0);
      $267 = HEAP32[$266>>2]|0;
      $268 = (0 - ($267))|0;
      $$sink$i = $261 ? $267 : $268;
      $269 = $$sink$i << 5;
      $270 = (($269) + ($224))|0;
      switch ($260|0) {
      case 2:  {
       $272 = $262 >>> 5;
       $273 = $272 & 7;
       $hand_index2$0$i = $273;
       break;
      }
      case 3:  {
       $274 = $262 >>> 8;
       $275 = $274 & 7;
       $hand_index2$0$i = $275;
       break;
      }
      case 6:  {
       $280 = $262 >>> 17;
       $281 = $280 & 3;
       $hand_index2$0$i = $281;
       break;
      }
      case 1:  {
       $271 = $262 & 31;
       $hand_index2$0$i = $271;
       break;
      }
      case 4:  {
       $276 = $262 >>> 11;
       $277 = $276 & 7;
       $hand_index2$0$i = $277;
       break;
      }
      case 5:  {
       $278 = $262 >>> 14;
       $279 = $278 & 7;
       $hand_index2$0$i = $279;
       break;
      }
      default: {
       $282 = $262 >>> 19;
       $hand_index2$0$i = $282;
      }
      }
      $283 = (_doacapt($146,$158,$260,$turn,$hand_index2$0$i,$list0,$list1,$nlist$0$lcssa$i3)|0);
      $284 = (($270) + ($283))|0;
      $285 = $260 << 1;
      $286 = $turn ^ -1;
      $287 = (($285) + ($286))|0;
      $288 = (($list0) + ($287<<2)|0);
      $289 = HEAP32[$288>>2]|0;
      $290 = (($289) + -1)|0;
      HEAP32[$288>>2] = $290;
      $291 = (($turn) + -2)|0;
      $292 = (($291) + ($285))|0;
      $293 = (($list1) + ($292<<2)|0);
      $294 = HEAP32[$293>>2]|0;
      $295 = (($294) + -1)|0;
      HEAP32[$293>>2] = $295;
      $296 = (($hand_index2$0$i) + -1)|0;
      $297 = (_doacapt($146,$158,$260,$turn,$296,$list0,$list1,$nlist$0$lcssa$i3)|0);
      $298 = (($284) - ($297))|0;
      $299 = (1024 + ($265<<2)|0);
      $300 = HEAP32[$299>>2]|0;
      $301 = (($300) + ($129))|0;
      HEAP32[$216>>2] = $301;
      $302 = (15 - ($264))|0;
      $303 = (1024 + ($302<<2)|0);
      $304 = HEAP32[$303>>2]|0;
      $305 = (($304) + ($220))|0;
      HEAP32[$223>>2] = $305;
      $306 = (_doapc($146,$158,$264,$129,$list0,$list1,$222)|0);
      $307 = (($298) - ($306))|0;
      $diff$0$i = $307;$nlist$1$i = $222;
     }
     $308 = $124 >>> 15;
     $309 = $308 & 15;
     $310 = $124 & 16384;
     $311 = ($310|0)==(0);
     if ($311) {
      $diff$1$i = $diff$0$i;
     } else {
      $312 = ($turn|0)!=(0);
      $313 = (($309) + 7)|0;
      $314 = (34184312 + ($313<<2)|0);
      $315 = HEAP32[$314>>2]|0;
      $316 = (0 - ($315))|0;
      $317 = $312 ? $315 : $316;
      $318 = $317 << 5;
      $319 = (($318) + ($diff$0$i))|0;
      $diff$1$i = $319;
     }
     $320 = ($turn|0)!=(0);
     $321 = (0 - ($309))|0;
     $322 = $320 ? $309 : $321;
     $323 = (($322) + 15)|0;
     $324 = (1024 + ($323<<2)|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = (($325) + ($128))|0;
     $327 = (($list0) + ($nlist$1$i<<2)|0);
     HEAP32[$327>>2] = $326;
     $328 = (15 - ($322))|0;
     $329 = (1024 + ($328<<2)|0);
     $330 = HEAP32[$329>>2]|0;
     $331 = (80 - ($128))|0;
     $332 = (($331) + ($330))|0;
     $333 = (($nlist$1$i) + 1)|0;
     $334 = (($list1) + ($nlist$1$i<<2)|0);
     HEAP32[$334>>2] = $332;
     $335 = (_doapc($146,$158,$322,$128,$list0,$list1,$333)|0);
     $336 = (($diff$1$i) - ($335))|0;
     $diff$2$i = $336;
    }
    $337 = ($turn|0)!=(0);
    $338 = (0 - ($121))|0;
    $339 = $337 ? $121 : $338;
    $340 = (($diff$2$i) + ($339))|0;
    $341 = $ptree;
    $342 = $341;
    $343 = HEAP32[$342>>2]|0;
    $344 = (($341) + 4)|0;
    $345 = $344;
    $346 = HEAP32[$345>>2]|0;
    $347 = HEAP32[$12>>2]|0;
    $348 = (_bitshift64Shl(($347|0),0,21)|0);
    $349 = tempRet0;
    $350 = $343 & -2097152;
    $351 = $348 ^ $350;
    $352 = $349 ^ $346;
    $353 = (($340) + 1048576)|0;
    $354 = ($353|0)<(0);
    $355 = $354 << 31 >> 31;
    $356 = $351 | $353;
    $357 = $352 | $355;
    $358 = $356 ^ $357;
    $359 = $343 & 4194303;
    $360 = (1528 + ($359<<3)|0);
    $361 = $360;
    $362 = $361;
    HEAP32[$362>>2] = $356;
    $363 = (($361) + 4)|0;
    $364 = $363;
    HEAP32[$364>>2] = $358;
    $365 = (0 - ($340))|0;
    $366 = $337 ? $365 : $340;
    HEAP32[$3>>2] = $366;
    $$0$in = $366;
    $$0 = (($$0$in|0) / 32)&-1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $367 = (($ptree) + 593|0);
 $368 = HEAP8[$367>>0]|0;
 $369 = $368&255;
 $370 = (($ptree) + 594|0);
 $371 = HEAP8[$370>>0]|0;
 $372 = $371&255;
 $373 = (80 - ($372))|0;
 $374 = (80 - ($369))|0;
 $375 = $113 & 31;
 $376 = (((210768720 + (($369*119556)|0)|0) + (($372*1476)|0)|0) + ($375<<1)|0);
 $377 = HEAP16[$376>>1]|0;
 $378 = $377 << 16 >> 16;
 $379 = $113 >>> 5;
 $380 = $379 & 7;
 $381 = (($380) + 19)|0;
 $382 = (((210768720 + (($369*119556)|0)|0) + (($372*1476)|0)|0) + ($381<<1)|0);
 $383 = HEAP16[$382>>1]|0;
 $384 = $383 << 16 >> 16;
 $385 = (($384) + ($378))|0;
 $386 = $113 >>> 8;
 $387 = $386 & 7;
 $388 = $387 | 24;
 $389 = (((210768720 + (($369*119556)|0)|0) + (($372*1476)|0)|0) + ($388<<1)|0);
 $390 = HEAP16[$389>>1]|0;
 $391 = $390 << 16 >> 16;
 $392 = (($385) + ($391))|0;
 $393 = $113 >>> 11;
 $394 = $393 & 7;
 $395 = (($394) + 29)|0;
 $396 = (((210768720 + (($369*119556)|0)|0) + (($372*1476)|0)|0) + ($395<<1)|0);
 $397 = HEAP16[$396>>1]|0;
 $398 = $397 << 16 >> 16;
 $399 = (($392) + ($398))|0;
 $400 = $113 >>> 14;
 $401 = $400 & 7;
 $402 = (($401) + 34)|0;
 $403 = (((210768720 + (($369*119556)|0)|0) + (($372*1476)|0)|0) + ($402<<1)|0);
 $404 = HEAP16[$403>>1]|0;
 $405 = $404 << 16 >> 16;
 $406 = (($399) + ($405))|0;
 $407 = $113 >>> 17;
 $408 = $407 & 3;
 $409 = (($408) + 39)|0;
 $410 = (((210768720 + (($369*119556)|0)|0) + (($372*1476)|0)|0) + ($409<<1)|0);
 $411 = HEAP16[$410>>1]|0;
 $412 = $411 << 16 >> 16;
 $413 = (($406) + ($412))|0;
 $414 = (($114) + 42)|0;
 $415 = (((210768720 + (($369*119556)|0)|0) + (($372*1476)|0)|0) + ($414<<1)|0);
 $416 = HEAP16[$415>>1]|0;
 $417 = $416 << 16 >> 16;
 $418 = (($413) + ($417))|0;
 $419 = HEAP32[$38>>2]|0;
 $420 = $419 & 31;
 $421 = (((210768720 + (($373*119556)|0)|0) + (($374*1476)|0)|0) + ($420<<1)|0);
 $422 = HEAP16[$421>>1]|0;
 $423 = $422 << 16 >> 16;
 $424 = (($418) - ($423))|0;
 $425 = $419 >>> 5;
 $426 = $425 & 7;
 $427 = (($426) + 19)|0;
 $428 = (((210768720 + (($373*119556)|0)|0) + (($374*1476)|0)|0) + ($427<<1)|0);
 $429 = HEAP16[$428>>1]|0;
 $430 = $429 << 16 >> 16;
 $431 = (($424) - ($430))|0;
 $432 = $419 >>> 8;
 $433 = $432 & 7;
 $434 = $433 | 24;
 $435 = (((210768720 + (($373*119556)|0)|0) + (($374*1476)|0)|0) + ($434<<1)|0);
 $436 = HEAP16[$435>>1]|0;
 $437 = $436 << 16 >> 16;
 $438 = (($431) - ($437))|0;
 $439 = $419 >>> 11;
 $440 = $439 & 7;
 $441 = (($440) + 29)|0;
 $442 = (((210768720 + (($373*119556)|0)|0) + (($374*1476)|0)|0) + ($441<<1)|0);
 $443 = HEAP16[$442>>1]|0;
 $444 = $443 << 16 >> 16;
 $445 = (($438) - ($444))|0;
 $446 = $419 >>> 14;
 $447 = $446 & 7;
 $448 = (($447) + 34)|0;
 $449 = (((210768720 + (($373*119556)|0)|0) + (($374*1476)|0)|0) + ($448<<1)|0);
 $450 = HEAP16[$449>>1]|0;
 $451 = $450 << 16 >> 16;
 $452 = (($445) - ($451))|0;
 $453 = $419 >>> 17;
 $454 = $453 & 3;
 $455 = (($454) + 39)|0;
 $456 = (((210768720 + (($373*119556)|0)|0) + (($374*1476)|0)|0) + ($455<<1)|0);
 $457 = HEAP16[$456>>1]|0;
 $458 = $457 << 16 >> 16;
 $459 = (($452) - ($458))|0;
 $460 = $419 >>> 19;
 $461 = (($460) + 42)|0;
 $462 = (((210768720 + (($373*119556)|0)|0) + (($374*1476)|0)|0) + ($461<<1)|0);
 $463 = HEAP16[$462>>1]|0;
 $464 = $463 << 16 >> 16;
 $465 = (($459) - ($464))|0;
 $466 = (($ptree) + 356|0);
 $467 = HEAP32[$466>>2]|0;
 $468 = (($ptree) + 360|0);
 $469 = HEAP32[$468>>2]|0;
 $470 = (($ptree) + 364|0);
 $471 = HEAP32[$470>>2]|0;
 $472 = $469 | $467;
 $473 = $472 | $471;
 $474 = ($473|0)==(0);
 if ($474) {
  $n2$0$lcssa$i = 0;$nlist$0$lcssa$i = 14;$score$0$lcssa$i = $465;
 } else {
  $bb$sroa$0$0246$i = $467;$bb$sroa$1$0247$i = $469;$bb$sroa$2$0248$i = $471;$n2$0243$i = 0;$nlist$0245$i = 14;$score$0244$i = $465;
  while(1) {
   $475 = (_first_one012($bb$sroa$0$0246$i,$bb$sroa$1$0247$i,$bb$sroa$2$0248$i)|0);
   $476 = (34156304 + (($475*12)|0)|0);
   $477 = HEAP32[$476>>2]|0;
   $478 = $477 ^ $bb$sroa$0$0246$i;
   $479 = ((34156304 + (($475*12)|0)|0) + 4|0);
   $480 = HEAP32[$479>>2]|0;
   $481 = $480 ^ $bb$sroa$1$0247$i;
   $482 = ((34156304 + (($475*12)|0)|0) + 8|0);
   $483 = HEAP32[$482>>2]|0;
   $484 = $483 ^ $bb$sroa$2$0248$i;
   $485 = (($475) + 81)|0;
   $486 = (($list0) + ($nlist$0245$i<<2)|0);
   HEAP32[$486>>2] = $485;
   $487 = (242 - ($475))|0;
   $488 = (($list2$i) + ($n2$0243$i<<2)|0);
   HEAP32[$488>>2] = $487;
   $489 = (($475) + 36)|0;
   $490 = (((210768720 + (($369*119556)|0)|0) + (($372*1476)|0)|0) + ($489<<1)|0);
   $491 = HEAP16[$490>>1]|0;
   $492 = $491 << 16 >> 16;
   $493 = (($492) + ($score$0244$i))|0;
   $494 = (($nlist$0245$i) + 1)|0;
   $495 = (($n2$0243$i) + 1)|0;
   $496 = $481 | $478;
   $497 = $496 | $484;
   $498 = ($497|0)==(0);
   if ($498) {
    $n2$0$lcssa$i = $495;$nlist$0$lcssa$i = $494;$score$0$lcssa$i = $493;
    break;
   } else {
    $bb$sroa$0$0246$i = $478;$bb$sroa$1$0247$i = $481;$bb$sroa$2$0248$i = $484;$n2$0243$i = $495;$nlist$0245$i = $494;$score$0244$i = $493;
   }
  }
 }
 $499 = (($ptree) + 368|0);
 $500 = HEAP32[$499>>2]|0;
 $501 = (($ptree) + 372|0);
 $502 = HEAP32[$501>>2]|0;
 $503 = (($ptree) + 376|0);
 $504 = HEAP32[$503>>2]|0;
 $505 = $502 | $500;
 $506 = $505 | $504;
 $507 = ($506|0)==(0);
 if ($507) {
  $n2$1$lcssa$i = $n2$0$lcssa$i;$nlist$1$lcssa$i = $nlist$0$lcssa$i;$score$1$lcssa$i = $score$0$lcssa$i;
 } else {
  $bb$sroa$0$1235$i = $500;$bb$sroa$1$1236$i = $502;$bb$sroa$2$1237$i = $504;$n2$1232$i = $n2$0$lcssa$i;$nlist$1234$i = $nlist$0$lcssa$i;$score$1233$i = $score$0$lcssa$i;
  while(1) {
   $510 = (_first_one012($bb$sroa$0$1235$i,$bb$sroa$1$1236$i,$bb$sroa$2$1237$i)|0);
   $511 = (34156304 + (($510*12)|0)|0);
   $512 = HEAP32[$511>>2]|0;
   $513 = $512 ^ $bb$sroa$0$1235$i;
   $514 = ((34156304 + (($510*12)|0)|0) + 4|0);
   $515 = HEAP32[$514>>2]|0;
   $516 = $515 ^ $bb$sroa$1$1236$i;
   $517 = ((34156304 + (($510*12)|0)|0) + 8|0);
   $518 = HEAP32[$517>>2]|0;
   $519 = $518 ^ $bb$sroa$2$1237$i;
   $520 = (($510) + 162)|0;
   $521 = (($list0) + ($nlist$1234$i<<2)|0);
   HEAP32[$521>>2] = $520;
   $522 = (80 - ($510))|0;
   $523 = (($522) + 81)|0;
   $524 = (($list2$i) + ($n2$1232$i<<2)|0);
   HEAP32[$524>>2] = $523;
   $525 = (($522) + 36)|0;
   $526 = (((210768720 + (($373*119556)|0)|0) + (($374*1476)|0)|0) + ($525<<1)|0);
   $527 = HEAP16[$526>>1]|0;
   $528 = $527 << 16 >> 16;
   $529 = (($score$1233$i) - ($528))|0;
   $530 = (($nlist$1234$i) + 1)|0;
   $531 = (($n2$1232$i) + 1)|0;
   $532 = $516 | $513;
   $533 = $532 | $519;
   $534 = ($533|0)==(0);
   if ($534) {
    $n2$1$lcssa$i = $531;$nlist$1$lcssa$i = $530;$score$1$lcssa$i = $529;
    break;
   } else {
    $bb$sroa$0$1235$i = $513;$bb$sroa$1$1236$i = $516;$bb$sroa$2$1237$i = $519;$n2$1232$i = $531;$nlist$1234$i = $530;$score$1233$i = $529;
   }
  }
 }
 $508 = ($n2$1$lcssa$i|0)>(0);
 if ($508) {
  $509 = (($nlist$1$lcssa$i) + -1)|0;
  $i$0229$i = 0;
  while(1) {
   $535 = (($list2$i) + ($i$0229$i<<2)|0);
   $536 = HEAP32[$535>>2]|0;
   $537 = (($509) - ($i$0229$i))|0;
   $538 = (($list1) + ($537<<2)|0);
   HEAP32[$538>>2] = $536;
   $539 = (($i$0229$i) + 1)|0;
   $exitcond309$i = ($539|0)==($n2$1$lcssa$i|0);
   if ($exitcond309$i) {
    break;
   } else {
    $i$0229$i = $539;
   }
  }
 }
 $540 = (($ptree) + 188|0);
 $541 = HEAP32[$540>>2]|0;
 $542 = (($ptree) + 192|0);
 $543 = HEAP32[$542>>2]|0;
 $544 = (($ptree) + 196|0);
 $545 = HEAP32[$544>>2]|0;
 $546 = $543 | $541;
 $547 = $546 | $545;
 $548 = ($547|0)==(0);
 if ($548) {
  $n2$2$lcssa$i = 0;$nlist$2$lcssa$i = $nlist$1$lcssa$i;$score$2$lcssa$i = $score$1$lcssa$i;
 } else {
  $bb$sroa$0$2219$i = $541;$bb$sroa$1$2220$i = $543;$bb$sroa$2$2221$i = $545;$n2$2216$i = 0;$nlist$2218$i = $nlist$1$lcssa$i;$score$2217$i = $score$1$lcssa$i;
  while(1) {
   $549 = (_first_one012($bb$sroa$0$2219$i,$bb$sroa$1$2220$i,$bb$sroa$2$2221$i)|0);
   $550 = (34156304 + (($549*12)|0)|0);
   $551 = HEAP32[$550>>2]|0;
   $552 = $551 ^ $bb$sroa$0$2219$i;
   $553 = ((34156304 + (($549*12)|0)|0) + 4|0);
   $554 = HEAP32[$553>>2]|0;
   $555 = $554 ^ $bb$sroa$1$2220$i;
   $556 = ((34156304 + (($549*12)|0)|0) + 8|0);
   $557 = HEAP32[$556>>2]|0;
   $558 = $557 ^ $bb$sroa$2$2221$i;
   $559 = (($549) + 225)|0;
   $560 = (($list0) + ($nlist$2218$i<<2)|0);
   HEAP32[$560>>2] = $559;
   $561 = (386 - ($549))|0;
   $562 = (($list2$i) + ($n2$2216$i<<2)|0);
   HEAP32[$562>>2] = $561;
   $563 = (($549) + 108)|0;
   $564 = (((210768720 + (($369*119556)|0)|0) + (($372*1476)|0)|0) + ($563<<1)|0);
   $565 = HEAP16[$564>>1]|0;
   $566 = $565 << 16 >> 16;
   $567 = (($566) + ($score$2217$i))|0;
   $568 = (($nlist$2218$i) + 1)|0;
   $569 = (($n2$2216$i) + 1)|0;
   $570 = $555 | $552;
   $571 = $570 | $558;
   $572 = ($571|0)==(0);
   if ($572) {
    $n2$2$lcssa$i = $569;$nlist$2$lcssa$i = $568;$score$2$lcssa$i = $567;
    break;
   } else {
    $bb$sroa$0$2219$i = $552;$bb$sroa$1$2220$i = $555;$bb$sroa$2$2221$i = $558;$n2$2216$i = $569;$nlist$2218$i = $568;$score$2217$i = $567;
   }
  }
 }
 $573 = (($ptree) + 200|0);
 $574 = HEAP32[$573>>2]|0;
 $575 = (($ptree) + 204|0);
 $576 = HEAP32[$575>>2]|0;
 $577 = (($ptree) + 208|0);
 $578 = HEAP32[$577>>2]|0;
 $579 = $576 | $574;
 $580 = $579 | $578;
 $581 = ($580|0)==(0);
 if ($581) {
  $n2$3$lcssa$i = $n2$2$lcssa$i;$nlist$3$lcssa$i = $nlist$2$lcssa$i;$score$3$lcssa$i = $score$2$lcssa$i;
 } else {
  $bb$sroa$0$3208$i = $574;$bb$sroa$1$3209$i = $576;$bb$sroa$2$3210$i = $578;$n2$3205$i = $n2$2$lcssa$i;$nlist$3207$i = $nlist$2$lcssa$i;$score$3206$i = $score$2$lcssa$i;
  while(1) {
   $584 = (_first_one012($bb$sroa$0$3208$i,$bb$sroa$1$3209$i,$bb$sroa$2$3210$i)|0);
   $585 = (34156304 + (($584*12)|0)|0);
   $586 = HEAP32[$585>>2]|0;
   $587 = $586 ^ $bb$sroa$0$3208$i;
   $588 = ((34156304 + (($584*12)|0)|0) + 4|0);
   $589 = HEAP32[$588>>2]|0;
   $590 = $589 ^ $bb$sroa$1$3209$i;
   $591 = ((34156304 + (($584*12)|0)|0) + 8|0);
   $592 = HEAP32[$591>>2]|0;
   $593 = $592 ^ $bb$sroa$2$3210$i;
   $594 = (($584) + 306)|0;
   $595 = (($list0) + ($nlist$3207$i<<2)|0);
   HEAP32[$595>>2] = $594;
   $596 = (80 - ($584))|0;
   $597 = (($596) + 225)|0;
   $598 = (($list2$i) + ($n2$3205$i<<2)|0);
   HEAP32[$598>>2] = $597;
   $599 = (($596) + 108)|0;
   $600 = (((210768720 + (($373*119556)|0)|0) + (($374*1476)|0)|0) + ($599<<1)|0);
   $601 = HEAP16[$600>>1]|0;
   $602 = $601 << 16 >> 16;
   $603 = (($score$3206$i) - ($602))|0;
   $604 = (($nlist$3207$i) + 1)|0;
   $605 = (($n2$3205$i) + 1)|0;
   $606 = $590 | $587;
   $607 = $606 | $593;
   $608 = ($607|0)==(0);
   if ($608) {
    $n2$3$lcssa$i = $605;$nlist$3$lcssa$i = $604;$score$3$lcssa$i = $603;
    break;
   } else {
    $bb$sroa$0$3208$i = $587;$bb$sroa$1$3209$i = $590;$bb$sroa$2$3210$i = $593;$n2$3205$i = $605;$nlist$3207$i = $604;$score$3206$i = $603;
   }
  }
 }
 $582 = ($n2$3$lcssa$i|0)>(0);
 if ($582) {
  $583 = (($nlist$3$lcssa$i) + -1)|0;
  $i$1202$i = 0;
  while(1) {
   $609 = (($list2$i) + ($i$1202$i<<2)|0);
   $610 = HEAP32[$609>>2]|0;
   $611 = (($583) - ($i$1202$i))|0;
   $612 = (($list1) + ($611<<2)|0);
   HEAP32[$612>>2] = $610;
   $613 = (($i$1202$i) + 1)|0;
   $exitcond302$i = ($613|0)==($n2$3$lcssa$i|0);
   if ($exitcond302$i) {
    break;
   } else {
    $i$1202$i = $613;
   }
  }
 }
 $614 = (($ptree) + 212|0);
 $615 = HEAP32[$614>>2]|0;
 $616 = (($ptree) + 216|0);
 $617 = HEAP32[$616>>2]|0;
 $618 = (($ptree) + 220|0);
 $619 = HEAP32[$618>>2]|0;
 $620 = $617 | $615;
 $621 = $620 | $619;
 $622 = ($621|0)==(0);
 if ($622) {
  $n2$4$lcssa$i = 0;$nlist$4$lcssa$i = $nlist$3$lcssa$i;$score$4$lcssa$i = $score$3$lcssa$i;
 } else {
  $bb$sroa$0$4192$i = $615;$bb$sroa$1$4193$i = $617;$bb$sroa$2$4194$i = $619;$n2$4189$i = 0;$nlist$4191$i = $nlist$3$lcssa$i;$score$4190$i = $score$3$lcssa$i;
  while(1) {
   $623 = (_first_one012($bb$sroa$0$4192$i,$bb$sroa$1$4193$i,$bb$sroa$2$4194$i)|0);
   $624 = (34156304 + (($623*12)|0)|0);
   $625 = HEAP32[$624>>2]|0;
   $626 = $625 ^ $bb$sroa$0$4192$i;
   $627 = ((34156304 + (($623*12)|0)|0) + 4|0);
   $628 = HEAP32[$627>>2]|0;
   $629 = $628 ^ $bb$sroa$1$4193$i;
   $630 = ((34156304 + (($623*12)|0)|0) + 8|0);
   $631 = HEAP32[$630>>2]|0;
   $632 = $631 ^ $bb$sroa$2$4194$i;
   $633 = (($623) + 360)|0;
   $634 = (($list0) + ($nlist$4191$i<<2)|0);
   HEAP32[$634>>2] = $633;
   $635 = (521 - ($623))|0;
   $636 = (($list2$i) + ($n2$4189$i<<2)|0);
   HEAP32[$636>>2] = $635;
   $637 = (($623) + 171)|0;
   $638 = (((210768720 + (($369*119556)|0)|0) + (($372*1476)|0)|0) + ($637<<1)|0);
   $639 = HEAP16[$638>>1]|0;
   $640 = $639 << 16 >> 16;
   $641 = (($640) + ($score$4190$i))|0;
   $642 = (($nlist$4191$i) + 1)|0;
   $643 = (($n2$4189$i) + 1)|0;
   $644 = $629 | $626;
   $645 = $644 | $632;
   $646 = ($645|0)==(0);
   if ($646) {
    $n2$4$lcssa$i = $643;$nlist$4$lcssa$i = $642;$score$4$lcssa$i = $641;
    break;
   } else {
    $bb$sroa$0$4192$i = $626;$bb$sroa$1$4193$i = $629;$bb$sroa$2$4194$i = $632;$n2$4189$i = $643;$nlist$4191$i = $642;$score$4190$i = $641;
   }
  }
 }
 $647 = (($ptree) + 224|0);
 $648 = HEAP32[$647>>2]|0;
 $649 = (($ptree) + 228|0);
 $650 = HEAP32[$649>>2]|0;
 $651 = (($ptree) + 232|0);
 $652 = HEAP32[$651>>2]|0;
 $653 = $650 | $648;
 $654 = $653 | $652;
 $655 = ($654|0)==(0);
 if ($655) {
  $n2$5$lcssa$i = $n2$4$lcssa$i;$nlist$5$lcssa$i = $nlist$4$lcssa$i;$score$5$lcssa$i = $score$4$lcssa$i;
 } else {
  $bb$sroa$0$5181$i = $648;$bb$sroa$1$5182$i = $650;$bb$sroa$2$5183$i = $652;$n2$5178$i = $n2$4$lcssa$i;$nlist$5180$i = $nlist$4$lcssa$i;$score$5179$i = $score$4$lcssa$i;
  while(1) {
   $658 = (_first_one012($bb$sroa$0$5181$i,$bb$sroa$1$5182$i,$bb$sroa$2$5183$i)|0);
   $659 = (34156304 + (($658*12)|0)|0);
   $660 = HEAP32[$659>>2]|0;
   $661 = $660 ^ $bb$sroa$0$5181$i;
   $662 = ((34156304 + (($658*12)|0)|0) + 4|0);
   $663 = HEAP32[$662>>2]|0;
   $664 = $663 ^ $bb$sroa$1$5182$i;
   $665 = ((34156304 + (($658*12)|0)|0) + 8|0);
   $666 = HEAP32[$665>>2]|0;
   $667 = $666 ^ $bb$sroa$2$5183$i;
   $668 = (($658) + 441)|0;
   $669 = (($list0) + ($nlist$5180$i<<2)|0);
   HEAP32[$669>>2] = $668;
   $670 = (80 - ($658))|0;
   $671 = (($670) + 360)|0;
   $672 = (($list2$i) + ($n2$5178$i<<2)|0);
   HEAP32[$672>>2] = $671;
   $673 = (($670) + 171)|0;
   $674 = (((210768720 + (($373*119556)|0)|0) + (($374*1476)|0)|0) + ($673<<1)|0);
   $675 = HEAP16[$674>>1]|0;
   $676 = $675 << 16 >> 16;
   $677 = (($score$5179$i) - ($676))|0;
   $678 = (($nlist$5180$i) + 1)|0;
   $679 = (($n2$5178$i) + 1)|0;
   $680 = $664 | $661;
   $681 = $680 | $667;
   $682 = ($681|0)==(0);
   if ($682) {
    $n2$5$lcssa$i = $679;$nlist$5$lcssa$i = $678;$score$5$lcssa$i = $677;
    break;
   } else {
    $bb$sroa$0$5181$i = $661;$bb$sroa$1$5182$i = $664;$bb$sroa$2$5183$i = $667;$n2$5178$i = $679;$nlist$5180$i = $678;$score$5179$i = $677;
   }
  }
 }
 $656 = ($n2$5$lcssa$i|0)>(0);
 if ($656) {
  $657 = (($nlist$5$lcssa$i) + -1)|0;
  $i$2175$i = 0;
  while(1) {
   $683 = (($list2$i) + ($i$2175$i<<2)|0);
   $684 = HEAP32[$683>>2]|0;
   $685 = (($657) - ($i$2175$i))|0;
   $686 = (($list1) + ($685<<2)|0);
   HEAP32[$686>>2] = $684;
   $687 = (($i$2175$i) + 1)|0;
   $exitcond295$i = ($687|0)==($n2$5$lcssa$i|0);
   if ($exitcond295$i) {
    break;
   } else {
    $i$2175$i = $687;
   }
  }
 }
 $688 = (($ptree) + 236|0);
 $689 = HEAP32[$688>>2]|0;
 $690 = (($ptree) + 240|0);
 $691 = HEAP32[$690>>2]|0;
 $692 = (($ptree) + 244|0);
 $693 = HEAP32[$692>>2]|0;
 $694 = $691 | $689;
 $695 = $694 | $693;
 $696 = ($695|0)==(0);
 if ($696) {
  $n2$6$lcssa$i = 0;$nlist$6$lcssa$i = $nlist$5$lcssa$i;$score$6$lcssa$i = $score$5$lcssa$i;
 } else {
  $bb$sroa$0$6165$i = $689;$bb$sroa$1$6166$i = $691;$bb$sroa$2$6167$i = $693;$n2$6162$i = 0;$nlist$6164$i = $nlist$5$lcssa$i;$score$6163$i = $score$5$lcssa$i;
  while(1) {
   $697 = (_first_one012($bb$sroa$0$6165$i,$bb$sroa$1$6166$i,$bb$sroa$2$6167$i)|0);
   $698 = (34156304 + (($697*12)|0)|0);
   $699 = HEAP32[$698>>2]|0;
   $700 = $699 ^ $bb$sroa$0$6165$i;
   $701 = ((34156304 + (($697*12)|0)|0) + 4|0);
   $702 = HEAP32[$701>>2]|0;
   $703 = $702 ^ $bb$sroa$1$6166$i;
   $704 = ((34156304 + (($697*12)|0)|0) + 8|0);
   $705 = HEAP32[$704>>2]|0;
   $706 = $705 ^ $bb$sroa$2$6167$i;
   $707 = (($697) + 504)|0;
   $708 = (($list0) + ($nlist$6164$i<<2)|0);
   HEAP32[$708>>2] = $707;
   $709 = (665 - ($697))|0;
   $710 = (($list2$i) + ($n2$6162$i<<2)|0);
   HEAP32[$710>>2] = $709;
   $711 = (($697) + 252)|0;
   $712 = (((210768720 + (($369*119556)|0)|0) + (($372*1476)|0)|0) + ($711<<1)|0);
   $713 = HEAP16[$712>>1]|0;
   $714 = $713 << 16 >> 16;
   $715 = (($714) + ($score$6163$i))|0;
   $716 = (($nlist$6164$i) + 1)|0;
   $717 = (($n2$6162$i) + 1)|0;
   $718 = $703 | $700;
   $719 = $718 | $706;
   $720 = ($719|0)==(0);
   if ($720) {
    $n2$6$lcssa$i = $717;$nlist$6$lcssa$i = $716;$score$6$lcssa$i = $715;
    break;
   } else {
    $bb$sroa$0$6165$i = $700;$bb$sroa$1$6166$i = $703;$bb$sroa$2$6167$i = $706;$n2$6162$i = $717;$nlist$6164$i = $716;$score$6163$i = $715;
   }
  }
 }
 $721 = (($ptree) + 248|0);
 $722 = HEAP32[$721>>2]|0;
 $723 = (($ptree) + 252|0);
 $724 = HEAP32[$723>>2]|0;
 $725 = (($ptree) + 256|0);
 $726 = HEAP32[$725>>2]|0;
 $727 = $724 | $722;
 $728 = $727 | $726;
 $729 = ($728|0)==(0);
 if ($729) {
  $n2$7$lcssa$i = $n2$6$lcssa$i;$nlist$7$lcssa$i = $nlist$6$lcssa$i;$score$7$lcssa$i = $score$6$lcssa$i;
 } else {
  $bb$sroa$0$7154$i = $722;$bb$sroa$1$7155$i = $724;$bb$sroa$2$7156$i = $726;$n2$7151$i = $n2$6$lcssa$i;$nlist$7153$i = $nlist$6$lcssa$i;$score$7152$i = $score$6$lcssa$i;
  while(1) {
   $732 = (_first_one012($bb$sroa$0$7154$i,$bb$sroa$1$7155$i,$bb$sroa$2$7156$i)|0);
   $733 = (34156304 + (($732*12)|0)|0);
   $734 = HEAP32[$733>>2]|0;
   $735 = $734 ^ $bb$sroa$0$7154$i;
   $736 = ((34156304 + (($732*12)|0)|0) + 4|0);
   $737 = HEAP32[$736>>2]|0;
   $738 = $737 ^ $bb$sroa$1$7155$i;
   $739 = ((34156304 + (($732*12)|0)|0) + 8|0);
   $740 = HEAP32[$739>>2]|0;
   $741 = $740 ^ $bb$sroa$2$7156$i;
   $742 = (($732) + 585)|0;
   $743 = (($list0) + ($nlist$7153$i<<2)|0);
   HEAP32[$743>>2] = $742;
   $744 = (80 - ($732))|0;
   $745 = (($744) + 504)|0;
   $746 = (($list2$i) + ($n2$7151$i<<2)|0);
   HEAP32[$746>>2] = $745;
   $747 = (($744) + 252)|0;
   $748 = (((210768720 + (($373*119556)|0)|0) + (($374*1476)|0)|0) + ($747<<1)|0);
   $749 = HEAP16[$748>>1]|0;
   $750 = $749 << 16 >> 16;
   $751 = (($score$7152$i) - ($750))|0;
   $752 = (($nlist$7153$i) + 1)|0;
   $753 = (($n2$7151$i) + 1)|0;
   $754 = $738 | $735;
   $755 = $754 | $741;
   $756 = ($755|0)==(0);
   if ($756) {
    $n2$7$lcssa$i = $753;$nlist$7$lcssa$i = $752;$score$7$lcssa$i = $751;
    break;
   } else {
    $bb$sroa$0$7154$i = $735;$bb$sroa$1$7155$i = $738;$bb$sroa$2$7156$i = $741;$n2$7151$i = $753;$nlist$7153$i = $752;$score$7152$i = $751;
   }
  }
 }
 $730 = ($n2$7$lcssa$i|0)>(0);
 if ($730) {
  $731 = (($nlist$7$lcssa$i) + -1)|0;
  $i$3148$i = 0;
  while(1) {
   $757 = (($list2$i) + ($i$3148$i<<2)|0);
   $758 = HEAP32[$757>>2]|0;
   $759 = (($731) - ($i$3148$i))|0;
   $760 = (($list1) + ($759<<2)|0);
   HEAP32[$760>>2] = $758;
   $761 = (($i$3148$i) + 1)|0;
   $exitcond288$i = ($761|0)==($n2$7$lcssa$i|0);
   if ($exitcond288$i) {
    break;
   } else {
    $i$3148$i = $761;
   }
  }
 }
 $762 = (($ptree) + 92|0);
 $763 = HEAP32[$762>>2]|0;
 $764 = (($ptree) + 96|0);
 $765 = HEAP32[$764>>2]|0;
 $766 = (($ptree) + 100|0);
 $767 = HEAP32[$766>>2]|0;
 $768 = $765 | $763;
 $769 = $768 | $767;
 $770 = ($769|0)==(0);
 if ($770) {
  $n2$8$lcssa$i = 0;$nlist$8$lcssa$i = $nlist$7$lcssa$i;$score$8$lcssa$i = $score$7$lcssa$i;
 } else {
  $bb$sroa$0$8138$i = $763;$bb$sroa$1$8139$i = $765;$bb$sroa$2$8140$i = $767;$n2$8135$i = 0;$nlist$8137$i = $nlist$7$lcssa$i;$score$8136$i = $score$7$lcssa$i;
  while(1) {
   $771 = (_first_one012($bb$sroa$0$8138$i,$bb$sroa$1$8139$i,$bb$sroa$2$8140$i)|0);
   $772 = (34156304 + (($771*12)|0)|0);
   $773 = HEAP32[$772>>2]|0;
   $774 = $773 ^ $bb$sroa$0$8138$i;
   $775 = ((34156304 + (($771*12)|0)|0) + 4|0);
   $776 = HEAP32[$775>>2]|0;
   $777 = $776 ^ $bb$sroa$1$8139$i;
   $778 = ((34156304 + (($771*12)|0)|0) + 8|0);
   $779 = HEAP32[$778>>2]|0;
   $780 = $779 ^ $bb$sroa$2$8140$i;
   $781 = (($771) + 666)|0;
   $782 = (($list0) + ($nlist$8137$i<<2)|0);
   HEAP32[$782>>2] = $781;
   $783 = (827 - ($771))|0;
   $784 = (($list2$i) + ($n2$8135$i<<2)|0);
   HEAP32[$784>>2] = $783;
   $785 = (($771) + 333)|0;
   $786 = (((210768720 + (($369*119556)|0)|0) + (($372*1476)|0)|0) + ($785<<1)|0);
   $787 = HEAP16[$786>>1]|0;
   $788 = $787 << 16 >> 16;
   $789 = (($788) + ($score$8136$i))|0;
   $790 = (($nlist$8137$i) + 1)|0;
   $791 = (($n2$8135$i) + 1)|0;
   $792 = $777 | $774;
   $793 = $792 | $780;
   $794 = ($793|0)==(0);
   if ($794) {
    $n2$8$lcssa$i = $791;$nlist$8$lcssa$i = $790;$score$8$lcssa$i = $789;
    break;
   } else {
    $bb$sroa$0$8138$i = $774;$bb$sroa$1$8139$i = $777;$bb$sroa$2$8140$i = $780;$n2$8135$i = $791;$nlist$8137$i = $790;$score$8136$i = $789;
   }
  }
 }
 $795 = (($ptree) + 104|0);
 $796 = HEAP32[$795>>2]|0;
 $797 = (($ptree) + 108|0);
 $798 = HEAP32[$797>>2]|0;
 $799 = (($ptree) + 112|0);
 $800 = HEAP32[$799>>2]|0;
 $801 = $798 | $796;
 $802 = $801 | $800;
 $803 = ($802|0)==(0);
 if ($803) {
  $n2$9$lcssa$i = $n2$8$lcssa$i;$nlist$9$lcssa$i = $nlist$8$lcssa$i;$score$9$lcssa$i = $score$8$lcssa$i;
 } else {
  $bb$sroa$0$9127$i = $796;$bb$sroa$1$9128$i = $798;$bb$sroa$2$9129$i = $800;$n2$9124$i = $n2$8$lcssa$i;$nlist$9126$i = $nlist$8$lcssa$i;$score$9125$i = $score$8$lcssa$i;
  while(1) {
   $806 = (_first_one012($bb$sroa$0$9127$i,$bb$sroa$1$9128$i,$bb$sroa$2$9129$i)|0);
   $807 = (34156304 + (($806*12)|0)|0);
   $808 = HEAP32[$807>>2]|0;
   $809 = $808 ^ $bb$sroa$0$9127$i;
   $810 = ((34156304 + (($806*12)|0)|0) + 4|0);
   $811 = HEAP32[$810>>2]|0;
   $812 = $811 ^ $bb$sroa$1$9128$i;
   $813 = ((34156304 + (($806*12)|0)|0) + 8|0);
   $814 = HEAP32[$813>>2]|0;
   $815 = $814 ^ $bb$sroa$2$9129$i;
   $816 = (($806) + 747)|0;
   $817 = (($list0) + ($nlist$9126$i<<2)|0);
   HEAP32[$817>>2] = $816;
   $818 = (80 - ($806))|0;
   $819 = (($818) + 666)|0;
   $820 = (($list2$i) + ($n2$9124$i<<2)|0);
   HEAP32[$820>>2] = $819;
   $821 = (($818) + 333)|0;
   $822 = (((210768720 + (($373*119556)|0)|0) + (($374*1476)|0)|0) + ($821<<1)|0);
   $823 = HEAP16[$822>>1]|0;
   $824 = $823 << 16 >> 16;
   $825 = (($score$9125$i) - ($824))|0;
   $826 = (($nlist$9126$i) + 1)|0;
   $827 = (($n2$9124$i) + 1)|0;
   $828 = $812 | $809;
   $829 = $828 | $815;
   $830 = ($829|0)==(0);
   if ($830) {
    $n2$9$lcssa$i = $827;$nlist$9$lcssa$i = $826;$score$9$lcssa$i = $825;
    break;
   } else {
    $bb$sroa$0$9127$i = $809;$bb$sroa$1$9128$i = $812;$bb$sroa$2$9129$i = $815;$n2$9124$i = $827;$nlist$9126$i = $826;$score$9125$i = $825;
   }
  }
 }
 $804 = ($n2$9$lcssa$i|0)>(0);
 if ($804) {
  $805 = (($nlist$9$lcssa$i) + -1)|0;
  $i$4121$i = 0;
  while(1) {
   $831 = (($list2$i) + ($i$4121$i<<2)|0);
   $832 = HEAP32[$831>>2]|0;
   $833 = (($805) - ($i$4121$i))|0;
   $834 = (($list1) + ($833<<2)|0);
   HEAP32[$834>>2] = $832;
   $835 = (($i$4121$i) + 1)|0;
   $exitcond281$i = ($835|0)==($n2$9$lcssa$i|0);
   if ($exitcond281$i) {
    break;
   } else {
    $i$4121$i = $835;
   }
  }
 }
 $836 = (($ptree) + 260|0);
 $837 = HEAP32[$836>>2]|0;
 $838 = (($ptree) + 264|0);
 $839 = HEAP32[$838>>2]|0;
 $840 = (($ptree) + 268|0);
 $841 = HEAP32[$840>>2]|0;
 $842 = $839 | $837;
 $843 = $842 | $841;
 $844 = ($843|0)==(0);
 if ($844) {
  $n2$10$lcssa$i = 0;$nlist$10$lcssa$i = $nlist$9$lcssa$i;$score$10$lcssa$i = $score$9$lcssa$i;
 } else {
  $bb$sroa$0$10111$i = $837;$bb$sroa$1$10112$i = $839;$bb$sroa$2$10113$i = $841;$n2$10108$i = 0;$nlist$10110$i = $nlist$9$lcssa$i;$score$10109$i = $score$9$lcssa$i;
  while(1) {
   $845 = (_first_one012($bb$sroa$0$10111$i,$bb$sroa$1$10112$i,$bb$sroa$2$10113$i)|0);
   $846 = (34156304 + (($845*12)|0)|0);
   $847 = HEAP32[$846>>2]|0;
   $848 = $847 ^ $bb$sroa$0$10111$i;
   $849 = ((34156304 + (($845*12)|0)|0) + 4|0);
   $850 = HEAP32[$849>>2]|0;
   $851 = $850 ^ $bb$sroa$1$10112$i;
   $852 = ((34156304 + (($845*12)|0)|0) + 8|0);
   $853 = HEAP32[$852>>2]|0;
   $854 = $853 ^ $bb$sroa$2$10113$i;
   $855 = (($845) + 828)|0;
   $856 = (($list0) + ($nlist$10110$i<<2)|0);
   HEAP32[$856>>2] = $855;
   $857 = (989 - ($845))|0;
   $858 = (($list2$i) + ($n2$10108$i<<2)|0);
   HEAP32[$858>>2] = $857;
   $859 = (($845) + 414)|0;
   $860 = (((210768720 + (($369*119556)|0)|0) + (($372*1476)|0)|0) + ($859<<1)|0);
   $861 = HEAP16[$860>>1]|0;
   $862 = $861 << 16 >> 16;
   $863 = (($862) + ($score$10109$i))|0;
   $864 = (($nlist$10110$i) + 1)|0;
   $865 = (($n2$10108$i) + 1)|0;
   $866 = $851 | $848;
   $867 = $866 | $854;
   $868 = ($867|0)==(0);
   if ($868) {
    $n2$10$lcssa$i = $865;$nlist$10$lcssa$i = $864;$score$10$lcssa$i = $863;
    break;
   } else {
    $bb$sroa$0$10111$i = $848;$bb$sroa$1$10112$i = $851;$bb$sroa$2$10113$i = $854;$n2$10108$i = $865;$nlist$10110$i = $864;$score$10109$i = $863;
   }
  }
 }
 $869 = (($ptree) + 272|0);
 $870 = HEAP32[$869>>2]|0;
 $871 = (($ptree) + 276|0);
 $872 = HEAP32[$871>>2]|0;
 $873 = (($ptree) + 280|0);
 $874 = HEAP32[$873>>2]|0;
 $875 = $872 | $870;
 $876 = $875 | $874;
 $877 = ($876|0)==(0);
 if ($877) {
  $n2$11$lcssa$i = $n2$10$lcssa$i;$nlist$11$lcssa$i = $nlist$10$lcssa$i;$score$11$lcssa$i = $score$10$lcssa$i;
 } else {
  $bb$sroa$0$11100$i = $870;$bb$sroa$1$11101$i = $872;$bb$sroa$2$11102$i = $874;$n2$1197$i = $n2$10$lcssa$i;$nlist$1199$i = $nlist$10$lcssa$i;$score$1198$i = $score$10$lcssa$i;
  while(1) {
   $880 = (_first_one012($bb$sroa$0$11100$i,$bb$sroa$1$11101$i,$bb$sroa$2$11102$i)|0);
   $881 = (34156304 + (($880*12)|0)|0);
   $882 = HEAP32[$881>>2]|0;
   $883 = $882 ^ $bb$sroa$0$11100$i;
   $884 = ((34156304 + (($880*12)|0)|0) + 4|0);
   $885 = HEAP32[$884>>2]|0;
   $886 = $885 ^ $bb$sroa$1$11101$i;
   $887 = ((34156304 + (($880*12)|0)|0) + 8|0);
   $888 = HEAP32[$887>>2]|0;
   $889 = $888 ^ $bb$sroa$2$11102$i;
   $890 = (($880) + 909)|0;
   $891 = (($list0) + ($nlist$1199$i<<2)|0);
   HEAP32[$891>>2] = $890;
   $892 = (80 - ($880))|0;
   $893 = (($892) + 828)|0;
   $894 = (($list2$i) + ($n2$1197$i<<2)|0);
   HEAP32[$894>>2] = $893;
   $895 = (($892) + 414)|0;
   $896 = (((210768720 + (($373*119556)|0)|0) + (($374*1476)|0)|0) + ($895<<1)|0);
   $897 = HEAP16[$896>>1]|0;
   $898 = $897 << 16 >> 16;
   $899 = (($score$1198$i) - ($898))|0;
   $900 = (($nlist$1199$i) + 1)|0;
   $901 = (($n2$1197$i) + 1)|0;
   $902 = $886 | $883;
   $903 = $902 | $889;
   $904 = ($903|0)==(0);
   if ($904) {
    $n2$11$lcssa$i = $901;$nlist$11$lcssa$i = $900;$score$11$lcssa$i = $899;
    break;
   } else {
    $bb$sroa$0$11100$i = $883;$bb$sroa$1$11101$i = $886;$bb$sroa$2$11102$i = $889;$n2$1197$i = $901;$nlist$1199$i = $900;$score$1198$i = $899;
   }
  }
 }
 $878 = ($n2$11$lcssa$i|0)>(0);
 if ($878) {
  $879 = (($nlist$11$lcssa$i) + -1)|0;
  $i$594$i = 0;
  while(1) {
   $905 = (($list2$i) + ($i$594$i<<2)|0);
   $906 = HEAP32[$905>>2]|0;
   $907 = (($879) - ($i$594$i))|0;
   $908 = (($list1) + ($907<<2)|0);
   HEAP32[$908>>2] = $906;
   $909 = (($i$594$i) + 1)|0;
   $exitcond274$i = ($909|0)==($n2$11$lcssa$i|0);
   if ($exitcond274$i) {
    break;
   } else {
    $i$594$i = $909;
   }
  }
 }
 $910 = (($ptree) + 308|0);
 $911 = HEAP32[$910>>2]|0;
 $912 = (($ptree) + 312|0);
 $913 = HEAP32[$912>>2]|0;
 $914 = (($ptree) + 316|0);
 $915 = HEAP32[$914>>2]|0;
 $916 = $913 | $911;
 $917 = $916 | $915;
 $918 = ($917|0)==(0);
 if ($918) {
  $n2$12$lcssa$i = 0;$nlist$12$lcssa$i = $nlist$11$lcssa$i;$score$12$lcssa$i = $score$11$lcssa$i;
 } else {
  $bb$sroa$0$1284$i = $911;$bb$sroa$1$1285$i = $913;$bb$sroa$2$1286$i = $915;$n2$1281$i = 0;$nlist$1283$i = $nlist$11$lcssa$i;$score$1282$i = $score$11$lcssa$i;
  while(1) {
   $919 = (_first_one012($bb$sroa$0$1284$i,$bb$sroa$1$1285$i,$bb$sroa$2$1286$i)|0);
   $920 = (34156304 + (($919*12)|0)|0);
   $921 = HEAP32[$920>>2]|0;
   $922 = $921 ^ $bb$sroa$0$1284$i;
   $923 = ((34156304 + (($919*12)|0)|0) + 4|0);
   $924 = HEAP32[$923>>2]|0;
   $925 = $924 ^ $bb$sroa$1$1285$i;
   $926 = ((34156304 + (($919*12)|0)|0) + 8|0);
   $927 = HEAP32[$926>>2]|0;
   $928 = $927 ^ $bb$sroa$2$1286$i;
   $929 = (($919) + 990)|0;
   $930 = (($list0) + ($nlist$1283$i<<2)|0);
   HEAP32[$930>>2] = $929;
   $931 = (1151 - ($919))|0;
   $932 = (($list2$i) + ($n2$1281$i<<2)|0);
   HEAP32[$932>>2] = $931;
   $933 = (($919) + 495)|0;
   $934 = (((210768720 + (($369*119556)|0)|0) + (($372*1476)|0)|0) + ($933<<1)|0);
   $935 = HEAP16[$934>>1]|0;
   $936 = $935 << 16 >> 16;
   $937 = (($936) + ($score$1282$i))|0;
   $938 = (($nlist$1283$i) + 1)|0;
   $939 = (($n2$1281$i) + 1)|0;
   $940 = $925 | $922;
   $941 = $940 | $928;
   $942 = ($941|0)==(0);
   if ($942) {
    $n2$12$lcssa$i = $939;$nlist$12$lcssa$i = $938;$score$12$lcssa$i = $937;
    break;
   } else {
    $bb$sroa$0$1284$i = $922;$bb$sroa$1$1285$i = $925;$bb$sroa$2$1286$i = $928;$n2$1281$i = $939;$nlist$1283$i = $938;$score$1282$i = $937;
   }
  }
 }
 $943 = (($ptree) + 320|0);
 $944 = HEAP32[$943>>2]|0;
 $945 = (($ptree) + 324|0);
 $946 = HEAP32[$945>>2]|0;
 $947 = (($ptree) + 328|0);
 $948 = HEAP32[$947>>2]|0;
 $949 = $946 | $944;
 $950 = $949 | $948;
 $951 = ($950|0)==(0);
 if ($951) {
  $n2$13$lcssa$i = $n2$12$lcssa$i;$nlist$13$lcssa$i = $nlist$12$lcssa$i;$score$13$lcssa$i = $score$12$lcssa$i;
 } else {
  $bb$sroa$0$1373$i = $944;$bb$sroa$1$1374$i = $946;$bb$sroa$2$1375$i = $948;$n2$1370$i = $n2$12$lcssa$i;$nlist$1372$i = $nlist$12$lcssa$i;$score$1371$i = $score$12$lcssa$i;
  while(1) {
   $954 = (_first_one012($bb$sroa$0$1373$i,$bb$sroa$1$1374$i,$bb$sroa$2$1375$i)|0);
   $955 = (34156304 + (($954*12)|0)|0);
   $956 = HEAP32[$955>>2]|0;
   $957 = $956 ^ $bb$sroa$0$1373$i;
   $958 = ((34156304 + (($954*12)|0)|0) + 4|0);
   $959 = HEAP32[$958>>2]|0;
   $960 = $959 ^ $bb$sroa$1$1374$i;
   $961 = ((34156304 + (($954*12)|0)|0) + 8|0);
   $962 = HEAP32[$961>>2]|0;
   $963 = $962 ^ $bb$sroa$2$1375$i;
   $964 = (($954) + 1071)|0;
   $965 = (($list0) + ($nlist$1372$i<<2)|0);
   HEAP32[$965>>2] = $964;
   $966 = (80 - ($954))|0;
   $967 = (($966) + 990)|0;
   $968 = (($list2$i) + ($n2$1370$i<<2)|0);
   HEAP32[$968>>2] = $967;
   $969 = (($966) + 495)|0;
   $970 = (((210768720 + (($373*119556)|0)|0) + (($374*1476)|0)|0) + ($969<<1)|0);
   $971 = HEAP16[$970>>1]|0;
   $972 = $971 << 16 >> 16;
   $973 = (($score$1371$i) - ($972))|0;
   $974 = (($nlist$1372$i) + 1)|0;
   $975 = (($n2$1370$i) + 1)|0;
   $976 = $960 | $957;
   $977 = $976 | $963;
   $978 = ($977|0)==(0);
   if ($978) {
    $n2$13$lcssa$i = $975;$nlist$13$lcssa$i = $974;$score$13$lcssa$i = $973;
    break;
   } else {
    $bb$sroa$0$1373$i = $957;$bb$sroa$1$1374$i = $960;$bb$sroa$2$1375$i = $963;$n2$1370$i = $975;$nlist$1372$i = $974;$score$1371$i = $973;
   }
  }
 }
 $952 = ($n2$13$lcssa$i|0)>(0);
 if ($952) {
  $953 = (($nlist$13$lcssa$i) + -1)|0;
  $i$667$i = 0;
  while(1) {
   $979 = (($list2$i) + ($i$667$i<<2)|0);
   $980 = HEAP32[$979>>2]|0;
   $981 = (($953) - ($i$667$i))|0;
   $982 = (($list1) + ($981<<2)|0);
   HEAP32[$982>>2] = $980;
   $983 = (($i$667$i) + 1)|0;
   $exitcond267$i = ($983|0)==($n2$13$lcssa$i|0);
   if ($exitcond267$i) {
    break;
   } else {
    $i$667$i = $983;
   }
  }
 }
 $984 = (($ptree) + 284|0);
 $985 = HEAP32[$984>>2]|0;
 $986 = (($ptree) + 288|0);
 $987 = HEAP32[$986>>2]|0;
 $988 = (($ptree) + 292|0);
 $989 = HEAP32[$988>>2]|0;
 $990 = $987 | $985;
 $991 = $990 | $989;
 $992 = ($991|0)==(0);
 if ($992) {
  $n2$14$lcssa$i = 0;$nlist$14$lcssa$i = $nlist$13$lcssa$i;$score$14$lcssa$i = $score$13$lcssa$i;
 } else {
  $bb$sroa$0$1457$i = $985;$bb$sroa$1$1458$i = $987;$bb$sroa$2$1459$i = $989;$n2$1454$i = 0;$nlist$1456$i = $nlist$13$lcssa$i;$score$1455$i = $score$13$lcssa$i;
  while(1) {
   $993 = (_first_one012($bb$sroa$0$1457$i,$bb$sroa$1$1458$i,$bb$sroa$2$1459$i)|0);
   $994 = (34156304 + (($993*12)|0)|0);
   $995 = HEAP32[$994>>2]|0;
   $996 = $995 ^ $bb$sroa$0$1457$i;
   $997 = ((34156304 + (($993*12)|0)|0) + 4|0);
   $998 = HEAP32[$997>>2]|0;
   $999 = $998 ^ $bb$sroa$1$1458$i;
   $1000 = ((34156304 + (($993*12)|0)|0) + 8|0);
   $1001 = HEAP32[$1000>>2]|0;
   $1002 = $1001 ^ $bb$sroa$2$1459$i;
   $1003 = (($993) + 1152)|0;
   $1004 = (($list0) + ($nlist$1456$i<<2)|0);
   HEAP32[$1004>>2] = $1003;
   $1005 = (1313 - ($993))|0;
   $1006 = (($list2$i) + ($n2$1454$i<<2)|0);
   HEAP32[$1006>>2] = $1005;
   $1007 = (($993) + 576)|0;
   $1008 = (((210768720 + (($369*119556)|0)|0) + (($372*1476)|0)|0) + ($1007<<1)|0);
   $1009 = HEAP16[$1008>>1]|0;
   $1010 = $1009 << 16 >> 16;
   $1011 = (($1010) + ($score$1455$i))|0;
   $1012 = (($nlist$1456$i) + 1)|0;
   $1013 = (($n2$1454$i) + 1)|0;
   $1014 = $999 | $996;
   $1015 = $1014 | $1002;
   $1016 = ($1015|0)==(0);
   if ($1016) {
    $n2$14$lcssa$i = $1013;$nlist$14$lcssa$i = $1012;$score$14$lcssa$i = $1011;
    break;
   } else {
    $bb$sroa$0$1457$i = $996;$bb$sroa$1$1458$i = $999;$bb$sroa$2$1459$i = $1002;$n2$1454$i = $1013;$nlist$1456$i = $1012;$score$1455$i = $1011;
   }
  }
 }
 $1017 = (($ptree) + 296|0);
 $1018 = HEAP32[$1017>>2]|0;
 $1019 = (($ptree) + 300|0);
 $1020 = HEAP32[$1019>>2]|0;
 $1021 = (($ptree) + 304|0);
 $1022 = HEAP32[$1021>>2]|0;
 $1023 = $1020 | $1018;
 $1024 = $1023 | $1022;
 $1025 = ($1024|0)==(0);
 if ($1025) {
  $n2$15$lcssa$i = $n2$14$lcssa$i;$nlist$15$lcssa$i = $nlist$14$lcssa$i;$score$15$lcssa$i = $score$14$lcssa$i;
 } else {
  $bb$sroa$0$1546$i = $1018;$bb$sroa$1$1547$i = $1020;$bb$sroa$2$1548$i = $1022;$n2$1543$i = $n2$14$lcssa$i;$nlist$1545$i = $nlist$14$lcssa$i;$score$1544$i = $score$14$lcssa$i;
  while(1) {
   $1028 = (_first_one012($bb$sroa$0$1546$i,$bb$sroa$1$1547$i,$bb$sroa$2$1548$i)|0);
   $1029 = (34156304 + (($1028*12)|0)|0);
   $1030 = HEAP32[$1029>>2]|0;
   $1031 = $1030 ^ $bb$sroa$0$1546$i;
   $1032 = ((34156304 + (($1028*12)|0)|0) + 4|0);
   $1033 = HEAP32[$1032>>2]|0;
   $1034 = $1033 ^ $bb$sroa$1$1547$i;
   $1035 = ((34156304 + (($1028*12)|0)|0) + 8|0);
   $1036 = HEAP32[$1035>>2]|0;
   $1037 = $1036 ^ $bb$sroa$2$1548$i;
   $1038 = (($1028) + 1233)|0;
   $1039 = (($list0) + ($nlist$1545$i<<2)|0);
   HEAP32[$1039>>2] = $1038;
   $1040 = (80 - ($1028))|0;
   $1041 = (($1040) + 1152)|0;
   $1042 = (($list2$i) + ($n2$1543$i<<2)|0);
   HEAP32[$1042>>2] = $1041;
   $1043 = (($1040) + 576)|0;
   $1044 = (((210768720 + (($373*119556)|0)|0) + (($374*1476)|0)|0) + ($1043<<1)|0);
   $1045 = HEAP16[$1044>>1]|0;
   $1046 = $1045 << 16 >> 16;
   $1047 = (($score$1544$i) - ($1046))|0;
   $1048 = (($nlist$1545$i) + 1)|0;
   $1049 = (($n2$1543$i) + 1)|0;
   $1050 = $1034 | $1031;
   $1051 = $1050 | $1037;
   $1052 = ($1051|0)==(0);
   if ($1052) {
    $n2$15$lcssa$i = $1049;$nlist$15$lcssa$i = $1048;$score$15$lcssa$i = $1047;
    break;
   } else {
    $bb$sroa$0$1546$i = $1031;$bb$sroa$1$1547$i = $1034;$bb$sroa$2$1548$i = $1037;$n2$1543$i = $1049;$nlist$1545$i = $1048;$score$1544$i = $1047;
   }
  }
 }
 $1026 = ($n2$15$lcssa$i|0)>(0);
 if ($1026) {
  $1027 = (($nlist$15$lcssa$i) + -1)|0;
  $i$740$i = 0;
  while(1) {
   $1053 = (($list2$i) + ($i$740$i<<2)|0);
   $1054 = HEAP32[$1053>>2]|0;
   $1055 = (($1027) - ($i$740$i))|0;
   $1056 = (($list1) + ($1055<<2)|0);
   HEAP32[$1056>>2] = $1054;
   $1057 = (($i$740$i) + 1)|0;
   $exitcond260$i = ($1057|0)==($n2$15$lcssa$i|0);
   if ($exitcond260$i) {
    break;
   } else {
    $i$740$i = $1057;
   }
  }
 }
 $1058 = (($ptree) + 332|0);
 $1059 = HEAP32[$1058>>2]|0;
 $1060 = (($ptree) + 336|0);
 $1061 = HEAP32[$1060>>2]|0;
 $1062 = (($ptree) + 340|0);
 $1063 = HEAP32[$1062>>2]|0;
 $1064 = $1061 | $1059;
 $1065 = $1064 | $1063;
 $1066 = ($1065|0)==(0);
 if ($1066) {
  $n2$16$lcssa$i = 0;$nlist$16$lcssa$i = $nlist$15$lcssa$i;$score$16$lcssa$i = $score$15$lcssa$i;
 } else {
  $bb$sroa$0$1630$i = $1059;$bb$sroa$1$1631$i = $1061;$bb$sroa$2$1632$i = $1063;$n2$1627$i = 0;$nlist$1629$i = $nlist$15$lcssa$i;$score$1628$i = $score$15$lcssa$i;
  while(1) {
   $1067 = (_first_one012($bb$sroa$0$1630$i,$bb$sroa$1$1631$i,$bb$sroa$2$1632$i)|0);
   $1068 = (34156304 + (($1067*12)|0)|0);
   $1069 = HEAP32[$1068>>2]|0;
   $1070 = $1069 ^ $bb$sroa$0$1630$i;
   $1071 = ((34156304 + (($1067*12)|0)|0) + 4|0);
   $1072 = HEAP32[$1071>>2]|0;
   $1073 = $1072 ^ $bb$sroa$1$1631$i;
   $1074 = ((34156304 + (($1067*12)|0)|0) + 8|0);
   $1075 = HEAP32[$1074>>2]|0;
   $1076 = $1075 ^ $bb$sroa$2$1632$i;
   $1077 = (($1067) + 1314)|0;
   $1078 = (($list0) + ($nlist$1629$i<<2)|0);
   HEAP32[$1078>>2] = $1077;
   $1079 = (1475 - ($1067))|0;
   $1080 = (($list2$i) + ($n2$1627$i<<2)|0);
   HEAP32[$1080>>2] = $1079;
   $1081 = (($1067) + 657)|0;
   $1082 = (((210768720 + (($369*119556)|0)|0) + (($372*1476)|0)|0) + ($1081<<1)|0);
   $1083 = HEAP16[$1082>>1]|0;
   $1084 = $1083 << 16 >> 16;
   $1085 = (($1084) + ($score$1628$i))|0;
   $1086 = (($nlist$1629$i) + 1)|0;
   $1087 = (($n2$1627$i) + 1)|0;
   $1088 = $1073 | $1070;
   $1089 = $1088 | $1076;
   $1090 = ($1089|0)==(0);
   if ($1090) {
    $n2$16$lcssa$i = $1087;$nlist$16$lcssa$i = $1086;$score$16$lcssa$i = $1085;
    break;
   } else {
    $bb$sroa$0$1630$i = $1070;$bb$sroa$1$1631$i = $1073;$bb$sroa$2$1632$i = $1076;$n2$1627$i = $1087;$nlist$1629$i = $1086;$score$1628$i = $1085;
   }
  }
 }
 $1091 = (($ptree) + 344|0);
 $1092 = HEAP32[$1091>>2]|0;
 $1093 = (($ptree) + 348|0);
 $1094 = HEAP32[$1093>>2]|0;
 $1095 = (($ptree) + 352|0);
 $1096 = HEAP32[$1095>>2]|0;
 $1097 = $1094 | $1092;
 $1098 = $1097 | $1096;
 $1099 = ($1098|0)==(0);
 if ($1099) {
  $n2$17$lcssa$i = $n2$16$lcssa$i;$nlist$17$lcssa$i = $nlist$16$lcssa$i;$score$17$lcssa$i = $score$16$lcssa$i;
 } else {
  $bb$sroa$0$1720$i = $1092;$bb$sroa$1$1721$i = $1094;$bb$sroa$2$1722$i = $1096;$n2$1717$i = $n2$16$lcssa$i;$nlist$1719$i = $nlist$16$lcssa$i;$score$1718$i = $score$16$lcssa$i;
  while(1) {
   $1102 = (_first_one012($bb$sroa$0$1720$i,$bb$sroa$1$1721$i,$bb$sroa$2$1722$i)|0);
   $1103 = (34156304 + (($1102*12)|0)|0);
   $1104 = HEAP32[$1103>>2]|0;
   $1105 = $1104 ^ $bb$sroa$0$1720$i;
   $1106 = ((34156304 + (($1102*12)|0)|0) + 4|0);
   $1107 = HEAP32[$1106>>2]|0;
   $1108 = $1107 ^ $bb$sroa$1$1721$i;
   $1109 = ((34156304 + (($1102*12)|0)|0) + 8|0);
   $1110 = HEAP32[$1109>>2]|0;
   $1111 = $1110 ^ $bb$sroa$2$1722$i;
   $1112 = (($1102) + 1395)|0;
   $1113 = (($list0) + ($nlist$1719$i<<2)|0);
   HEAP32[$1113>>2] = $1112;
   $1114 = (80 - ($1102))|0;
   $1115 = (($1114) + 1314)|0;
   $1116 = (($list2$i) + ($n2$1717$i<<2)|0);
   HEAP32[$1116>>2] = $1115;
   $1117 = (($1114) + 657)|0;
   $1118 = (((210768720 + (($373*119556)|0)|0) + (($374*1476)|0)|0) + ($1117<<1)|0);
   $1119 = HEAP16[$1118>>1]|0;
   $1120 = $1119 << 16 >> 16;
   $1121 = (($score$1718$i) - ($1120))|0;
   $1122 = (($nlist$1719$i) + 1)|0;
   $1123 = (($n2$1717$i) + 1)|0;
   $1124 = $1108 | $1105;
   $1125 = $1124 | $1111;
   $1126 = ($1125|0)==(0);
   if ($1126) {
    $n2$17$lcssa$i = $1123;$nlist$17$lcssa$i = $1122;$score$17$lcssa$i = $1121;
    break;
   } else {
    $bb$sroa$0$1720$i = $1105;$bb$sroa$1$1721$i = $1108;$bb$sroa$2$1722$i = $1111;$n2$1717$i = $1123;$nlist$1719$i = $1122;$score$1718$i = $1121;
   }
  }
 }
 $1100 = ($n2$17$lcssa$i|0)>(0);
 if ($1100) {
  $1101 = (($nlist$17$lcssa$i) + -1)|0;
  $i$816$i = 0;
  while(1) {
   $1127 = (($list2$i) + ($i$816$i<<2)|0);
   $1128 = HEAP32[$1127>>2]|0;
   $1129 = (($1101) - ($i$816$i))|0;
   $1130 = (($list1) + ($1129<<2)|0);
   HEAP32[$1130>>2] = $1128;
   $1131 = (($i$816$i) + 1)|0;
   $exitcond$i = ($1131|0)==($n2$17$lcssa$i|0);
   if ($exitcond$i) {
    break;
   } else {
    $i$816$i = $1131;
   }
  }
 }
 $1132 = HEAP8[$367>>0]|0;
 $1133 = $1132&255;
 $1134 = HEAP8[$370>>0]|0;
 $1135 = $1134&255;
 $1136 = (80 - ($1135))|0;
 $1137 = ($nlist$17$lcssa$i|0)>(0);
 if ($1137) {
  $i$020 = 0;$indvars$iv = 1;$sum$021 = 0;
  while(1) {
   $1138 = (($list0) + ($i$020<<2)|0);
   $1139 = HEAP32[$1138>>2]|0;
   $1140 = (($list1) + ($i$020<<2)|0);
   $1141 = HEAP32[$1140>>2]|0;
   $1142 = (($1139) + 1)|0;
   $1143 = Math_imul($1142, $1139)|0;
   $1144 = (($1143|0) / 2)&-1;
   $1145 = (($1141) + 1)|0;
   $1146 = Math_imul($1145, $1141)|0;
   $1147 = (($1146|0) / 2)&-1;
   $j$018 = 0;$sum$119 = $sum$021;
   while(1) {
    $1148 = (($list0) + ($j$018<<2)|0);
    $1149 = HEAP32[$1148>>2]|0;
    $1150 = (($list1) + ($j$018<<2)|0);
    $1151 = HEAP32[$1150>>2]|0;
    $1152 = (($1144) + ($1149))|0;
    $1153 = ((34184504 + (Math_imul($1133, 2180052)|0)|0) + ($1152<<1)|0);
    $1154 = HEAP16[$1153>>1]|0;
    $1155 = $1154 << 16 >> 16;
    $1156 = (($1155) + ($sum$119))|0;
    $1157 = (($1147) + ($1151))|0;
    $1158 = ((34184504 + (Math_imul($1136, 2180052)|0)|0) + ($1157<<1)|0);
    $1159 = HEAP16[$1158>>1]|0;
    $1160 = $1159 << 16 >> 16;
    $1161 = (($1156) - ($1160))|0;
    $1162 = (($j$018) + 1)|0;
    $exitcond = ($1162|0)==($indvars$iv|0);
    if ($exitcond) {
     break;
    } else {
     $j$018 = $1162;$sum$119 = $1161;
    }
   }
   $1163 = (($i$020) + 1)|0;
   $indvars$iv$next = (($indvars$iv) + 1)|0;
   $exitcond79 = ($1163|0)==($nlist$17$lcssa$i|0);
   if ($exitcond79) {
    $sum$0$lcssa = $1161;
    break;
   } else {
    $i$020 = $1163;$indvars$iv = $indvars$iv$next;$sum$021 = $1161;
   }
  }
 } else {
  $sum$0$lcssa = 0;
 }
 $1164 = (($sum$0$lcssa) + ($score$17$lcssa$i))|0;
 $1165 = (($ptree) + 508|0);
 $1166 = HEAP32[$1165>>2]|0;
 $1167 = $1166 << 5;
 $1168 = (($1164) + ($1167))|0;
 $1169 = HEAP32[221111344>>2]|0;
 if ((($1169|0) == 2)) {
  $1170 = (($ptree) + 513|0);
  $1171 = HEAP8[$1170>>0]|0;
  $1172 = ($1171<<24>>24)==(-3);
  $$$i = $1172 ? 22400 : 0;
  $1173 = (($ptree) + 519|0);
  $1174 = HEAP8[$1173>>0]|0;
  $1175 = ($1174<<24>>24)==(-3);
  $1176 = (($$$i) + 22400)|0;
  $score$1$i = $1175 ? $1176 : $$$i;
  $1177 = (($ptree) + 530|0);
  $1178 = HEAP8[$1177>>0]|0;
  $1179 = ($1178<<24>>24)==(-3);
  $1180 = (($score$1$i) + 22400)|0;
  $$score$1$i = $1179 ? $1180 : $score$1$i;
  $1181 = (($ptree) + 532|0);
  $1182 = HEAP8[$1181>>0]|0;
  $1183 = ($1182<<24>>24)==(-3);
  $1184 = (($$score$1$i) + 12800)|0;
  $score$3$i = $1183 ? $1184 : $$score$1$i;
  $1185 = (($ptree) + 536|0);
  $1186 = HEAP8[$1185>>0]|0;
  $1187 = ($1186<<24>>24)==(-3);
  $1188 = (($score$3$i) + 12800)|0;
  $$score$3$i = $1187 ? $1188 : $score$3$i;
  $1189 = (($ptree) + 538|0);
  $1190 = HEAP8[$1189>>0]|0;
  $1191 = ($1190<<24>>24)==(-3);
  $1192 = (($$score$3$i) + 22400)|0;
  $score$5$i = $1191 ? $1192 : $$score$3$i;
  $1193 = (($ptree) + 549|0);
  $1194 = HEAP8[$1193>>0]|0;
  $1195 = ($1194<<24>>24)==(-3);
  $1196 = (($score$5$i) + 22400)|0;
  $$score$5$i = $1195 ? $1196 : $score$5$i;
  $1197 = (($ptree) + 551|0);
  $1198 = HEAP8[$1197>>0]|0;
  $1199 = ($1198<<24>>24)==(-3);
  $1200 = (($$score$5$i) + 3200)|0;
  $score$7$i = $1199 ? $1200 : $$score$5$i;
  $1201 = (($ptree) + 553|0);
  $1202 = HEAP8[$1201>>0]|0;
  $1203 = ($1202<<24>>24)==(-3);
  $1204 = (($score$7$i) + 3200)|0;
  $$score$7$i = $1203 ? $1204 : $score$7$i;
  $1205 = (($ptree) + 555|0);
  $1206 = HEAP8[$1205>>0]|0;
  $1207 = ($1206<<24>>24)==(-3);
  $1208 = (($$score$7$i) + 22400)|0;
  $score$9$i = $1207 ? $1208 : $$score$7$i;
  $1209 = (($ptree) + 570|0);
  $1210 = HEAP8[$1209>>0]|0;
  $1211 = ($1210<<24>>24)==(1);
  $1212 = (($score$9$i) + 6400)|0;
  $$score$9$i = $1211 ? $1212 : $score$9$i;
  $1213 = (($ptree) + 561|0);
  $1214 = HEAP8[$1213>>0]|0;
  $1215 = ($1214<<24>>24)==(1);
  $1216 = (($$score$9$i) + 6400)|0;
  $score$11$i = $1215 ? $1216 : $$score$9$i;
  $1217 = (($ptree) + 552|0);
  $1218 = HEAP8[$1217>>0]|0;
  $1219 = ($1218<<24>>24)==(1);
  $1220 = (($score$11$i) + 6400)|0;
  $$score$11$i = $1219 ? $1220 : $score$11$i;
  $1273 = $$score$11$i;
 } else if ((($1169|0) == 0)) {
  $1273 = 0;
 } else {
  $1221 = (($ptree) + 585|0);
  $1222 = HEAP8[$1221>>0]|0;
  $1223 = ($1222<<24>>24)==(3);
  $$1$i = $1223 ? -22400 : 0;
  $1224 = (($ptree) + 591|0);
  $1225 = HEAP8[$1224>>0]|0;
  $1226 = ($1225<<24>>24)==(3);
  $1227 = (($$1$i) + -22400)|0;
  $score$13$i = $1226 ? $1227 : $$1$i;
  $1228 = (($ptree) + 566|0);
  $1229 = HEAP8[$1228>>0]|0;
  $1230 = ($1229<<24>>24)==(3);
  $1231 = (($score$13$i) + -22400)|0;
  $$score$13$i = $1230 ? $1231 : $score$13$i;
  $1232 = (($ptree) + 568|0);
  $1233 = HEAP8[$1232>>0]|0;
  $1234 = ($1233<<24>>24)==(3);
  $1235 = (($$score$13$i) + -12800)|0;
  $score$15$i = $1234 ? $1235 : $$score$13$i;
  $1236 = (($ptree) + 572|0);
  $1237 = HEAP8[$1236>>0]|0;
  $1238 = ($1237<<24>>24)==(3);
  $1239 = (($score$15$i) + -12800)|0;
  $$score$15$i = $1238 ? $1239 : $score$15$i;
  $1240 = (($ptree) + 574|0);
  $1241 = HEAP8[$1240>>0]|0;
  $1242 = ($1241<<24>>24)==(3);
  $1243 = (($$score$15$i) + -22400)|0;
  $score$17$i = $1242 ? $1243 : $$score$15$i;
  $1244 = (($ptree) + 549|0);
  $1245 = HEAP8[$1244>>0]|0;
  $1246 = ($1245<<24>>24)==(3);
  $1247 = (($score$17$i) + -22400)|0;
  $$score$17$i = $1246 ? $1247 : $score$17$i;
  $1248 = (($ptree) + 551|0);
  $1249 = HEAP8[$1248>>0]|0;
  $1250 = ($1249<<24>>24)==(3);
  $1251 = (($$score$17$i) + -3200)|0;
  $score$19$i = $1250 ? $1251 : $$score$17$i;
  $1252 = (($ptree) + 553|0);
  $1253 = HEAP8[$1252>>0]|0;
  $1254 = ($1253<<24>>24)==(3);
  $1255 = (($score$19$i) + -3200)|0;
  $$score$19$i = $1254 ? $1255 : $score$19$i;
  $1256 = (($ptree) + 555|0);
  $1257 = HEAP8[$1256>>0]|0;
  $1258 = ($1257<<24>>24)==(3);
  $1259 = (($$score$19$i) + -22400)|0;
  $score$21$i = $1258 ? $1259 : $$score$19$i;
  $1260 = (($ptree) + 534|0);
  $1261 = HEAP8[$1260>>0]|0;
  $1262 = ($1261<<24>>24)==(-1);
  $1263 = (($score$21$i) + -6400)|0;
  $$score$21$i = $1262 ? $1263 : $score$21$i;
  $1264 = (($ptree) + 543|0);
  $1265 = HEAP8[$1264>>0]|0;
  $1266 = ($1265<<24>>24)==(-1);
  $1267 = (($$score$21$i) + -6400)|0;
  $score$23$i = $1266 ? $1267 : $$score$21$i;
  $1268 = (($ptree) + 552|0);
  $1269 = HEAP8[$1268>>0]|0;
  $1270 = ($1269<<24>>24)==(-1);
  $1271 = (($score$23$i) + -6400)|0;
  $$score$23$i = $1270 ? $1271 : $score$23$i;
  $1273 = $$score$23$i;
 }
 $1272 = (($1168) + ($1273))|0;
 $1274 = $ptree;
 $1275 = $1274;
 $1276 = HEAP32[$1275>>2]|0;
 $1277 = (($1274) + 4)|0;
 $1278 = $1277;
 $1279 = HEAP32[$1278>>2]|0;
 $1280 = HEAP32[$12>>2]|0;
 $1281 = (_bitshift64Shl(($1280|0),0,21)|0);
 $1282 = tempRet0;
 $1283 = $1276 & -2097152;
 $1284 = $1281 ^ $1283;
 $1285 = $1282 ^ $1279;
 $1286 = (($1272) + 1048576)|0;
 $1287 = ($1286|0)<(0);
 $1288 = $1287 << 31 >> 31;
 $1289 = $1284 | $1286;
 $1290 = $1285 | $1288;
 $1291 = $1289 ^ $1290;
 $1292 = $1276 & 4194303;
 $1293 = (1528 + ($1292<<3)|0);
 $1294 = $1293;
 $1295 = $1294;
 HEAP32[$1295>>2] = $1289;
 $1296 = (($1294) + 4)|0;
 $1297 = $1296;
 HEAP32[$1297>>2] = $1291;
 $1298 = ($turn|0)!=(0);
 $1299 = (0 - ($1272))|0;
 $1300 = $1298 ? $1299 : $1272;
 HEAP32[$3>>2] = $1300;
 $$0$in = $1300;
 $$0 = (($$0$in|0) / 32)&-1;
 STACKTOP = sp;return ($$0|0);
}
function _ehash_clear() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memset((1528|0),0,33554432)|0;
 STACKTOP = sp;return;
}
function _doapc($ptree$0$0$46$val,$ptree$0$0$47$val,$pc,$sq,$list0,$list1,$nlist) {
 $ptree$0$0$46$val = $ptree$0$0$46$val|0;
 $ptree$0$0$47$val = $ptree$0$0$47$val|0;
 $pc = $pc|0;
 $sq = $sq|0;
 $list0 = $list0|0;
 $list1 = $list1|0;
 $nlist = $nlist|0;
 var $$pn = 0, $$pn2 = 0, $$sink = 0, $$sink$in = 0, $$sink1 = 0, $$sink1$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond7 = 0;
 var $i$05 = 0, $i$13 = 0, $sum$04 = 0, $sum$1$lcssa = 0, $sum$12 = 0, $sum$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pc) + 15)|0;
 $1 = (1024 + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($sq))|0;
 $4 = (15 - ($pc))|0;
 $5 = (1024 + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (80 - ($sq))|0;
 $8 = (($6) + ($7))|0;
 $9 = $ptree$0$0$46$val&255;
 $10 = $ptree$0$0$47$val&255;
 $11 = (80 - ($10))|0;
 $12 = (($3) + 1)|0;
 $13 = Math_imul($12, $3)|0;
 $14 = (($13|0) / 2)&-1;
 $15 = (($8) + 1)|0;
 $16 = Math_imul($15, $8)|0;
 $17 = (($16|0) / 2)&-1;
 $i$05 = 0;$sum$04 = 0;
 while(1) {
  $19 = (($list0) + ($i$05<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($14))|0;
  $22 = ((34184504 + (Math_imul($9, 2180052)|0)|0) + ($21<<1)|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23 << 16 >> 16;
  $25 = (($24) + ($sum$04))|0;
  $26 = (($list1) + ($i$05<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($17))|0;
  $29 = ((34184504 + (Math_imul($11, 2180052)|0)|0) + ($28<<1)|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30 << 16 >> 16;
  $32 = (($25) - ($31))|0;
  $33 = (($i$05) + 1)|0;
  $exitcond7 = ($33|0)==(14);
  if ($exitcond7) {
   break;
  } else {
   $i$05 = $33;$sum$04 = $32;
  }
 }
 $18 = ($nlist|0)>(14);
 if ($18) {
  $i$13 = 14;$sum$12 = $32;
  while(1) {
   $34 = (($list0) + ($i$13<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($3|0)<($35|0);
   if ($36) {
    $38 = (($35) + 1)|0;
    $39 = Math_imul($38, $35)|0;
    $40 = (($39|0) / 2)&-1;
    $41 = (($40) + ($3))|0;
    $$pn = $41;
   } else {
    $37 = (($14) + ($35))|0;
    $$pn = $37;
   }
   $$sink$in = ((34184504 + (Math_imul($9, 2180052)|0)|0) + ($$pn<<1)|0);
   $$sink = HEAP16[$$sink$in>>1]|0;
   $42 = $$sink << 16 >> 16;
   $43 = (($42) + ($sum$12))|0;
   $44 = (($list1) + ($i$13<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($8|0)<($45|0);
   if ($46) {
    $48 = (($45) + 1)|0;
    $49 = Math_imul($48, $45)|0;
    $50 = (($49|0) / 2)&-1;
    $51 = (($50) + ($8))|0;
    $$pn2 = $51;
   } else {
    $47 = (($17) + ($45))|0;
    $$pn2 = $47;
   }
   $$sink1$in = ((34184504 + (Math_imul($11, 2180052)|0)|0) + ($$pn2<<1)|0);
   $$sink1 = HEAP16[$$sink1$in>>1]|0;
   $52 = $$sink1 << 16 >> 16;
   $53 = (($43) - ($52))|0;
   $54 = (($i$13) + 1)|0;
   $exitcond = ($54|0)==($nlist|0);
   if ($exitcond) {
    $sum$1$lcssa = $53;
    break;
   } else {
    $i$13 = $54;$sum$12 = $53;
   }
  }
 } else {
  $sum$1$lcssa = $32;
 }
 $55 = ($pc|0)>(0);
 if ($55) {
  $56 = (1152 + ($pc<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + ($sq))|0;
  $59 = (((210768720 + (($9*119556)|0)|0) + (($10*1476)|0)|0) + ($58<<1)|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = $60 << 16 >> 16;
  $62 = (($61) + ($sum$1$lcssa))|0;
  $sum$2 = $62;
  STACKTOP = sp;return ($sum$2|0);
 } else {
  $63 = (80 - ($9))|0;
  $64 = (0 - ($pc))|0;
  $65 = (1152 + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + ($7))|0;
  $68 = (((210768720 + (($11*119556)|0)|0) + (($63*1476)|0)|0) + ($67<<1)|0);
  $69 = HEAP16[$68>>1]|0;
  $70 = $69 << 16 >> 16;
  $71 = (($sum$1$lcssa) - ($70))|0;
  $sum$2 = $71;
  STACKTOP = sp;return ($sum$2|0);
 }
 return 0|0;
}
function _doacapt($ptree$0$0$46$val,$ptree$0$0$47$val,$pc,$turn,$hand_index,$list0,$list1,$nlist) {
 $ptree$0$0$46$val = $ptree$0$0$46$val|0;
 $ptree$0$0$47$val = $ptree$0$0$47$val|0;
 $pc = $pc|0;
 $turn = $turn|0;
 $hand_index = $hand_index|0;
 $list0 = $list0|0;
 $list1 = $list1|0;
 $nlist = $nlist|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond21 = 0, $exitcond23 = 0, $i$016 = 0, $i$1$lcssa24 = 0, $i$111 = 0, $i$2 = 0, $i$28 = 0, $sum$0$lcssa = 0, $sum$015 = 0, $sum$1$lcssa25 = 0, $sum$110 = 0, $sum$2$lcssa = 0;
 var $sum$27 = 0, $sum$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $pc << 1;
 $1 = (($0) + -2)|0;
 $2 = (($0) + -1)|0;
 $3 = (($2) - ($turn))|0;
 $4 = (($1) + ($turn))|0;
 $5 = $ptree$0$0$46$val&255;
 $6 = $ptree$0$0$47$val&255;
 $7 = (80 - ($6))|0;
 $8 = ($nlist|0)>(14);
 if ($8) {
  $9 = (($list0) + ($3<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($list1) + ($4<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $i$016 = 14;$sum$015 = 0;
  while(1) {
   $26 = (($list0) + ($i$016<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 1)|0;
   $29 = Math_imul($28, $27)|0;
   $30 = (($29|0) / 2)&-1;
   $31 = (($10) + ($30))|0;
   $32 = ((34184504 + (Math_imul($5, 2180052)|0)|0) + ($31<<1)|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = $33 << 16 >> 16;
   $35 = (($34) + ($sum$015))|0;
   $36 = (($list1) + ($i$016<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + 1)|0;
   $39 = Math_imul($38, $37)|0;
   $40 = (($39|0) / 2)&-1;
   $41 = (($12) + ($40))|0;
   $42 = ((34184504 + (Math_imul($7, 2180052)|0)|0) + ($41<<1)|0);
   $43 = HEAP16[$42>>1]|0;
   $44 = $43 << 16 >> 16;
   $45 = (($35) - ($44))|0;
   $46 = (($i$016) + 1)|0;
   $exitcond23 = ($46|0)==($nlist|0);
   if ($exitcond23) {
    $sum$0$lcssa = $45;
    break;
   } else {
    $i$016 = $46;$sum$015 = $45;
   }
  }
 } else {
  $sum$0$lcssa = 0;
 }
 $13 = ($1|0)<(0);
 if ($13) {
  $i$1$lcssa24 = 1;$sum$1$lcssa25 = $sum$0$lcssa;
  label = 7;
 } else {
  $14 = (($list0) + ($3<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 1)|0;
  $17 = Math_imul($16, $15)|0;
  $18 = (($17|0) / 2)&-1;
  $19 = (($list1) + ($4<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 1)|0;
  $22 = Math_imul($21, $20)|0;
  $23 = (($22|0) / 2)&-1;
  $24 = $pc << 1;
  $25 = (($24) + -1)|0;
  $i$111 = 0;$sum$110 = $sum$0$lcssa;
  while(1) {
   $52 = (($list0) + ($i$111<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + ($18))|0;
   $55 = ((34184504 + (Math_imul($5, 2180052)|0)|0) + ($54<<1)|0);
   $56 = HEAP16[$55>>1]|0;
   $57 = $56 << 16 >> 16;
   $58 = (($57) + ($sum$110))|0;
   $59 = (($list1) + ($i$111<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + ($23))|0;
   $62 = ((34184504 + (Math_imul($7, 2180052)|0)|0) + ($61<<1)|0);
   $63 = HEAP16[$62>>1]|0;
   $64 = $63 << 16 >> 16;
   $65 = (($58) - ($64))|0;
   $66 = (($i$111) + 1)|0;
   $exitcond21 = ($66|0)==($25|0);
   if ($exitcond21) {
    break;
   } else {
    $i$111 = $66;$sum$110 = $65;
   }
  }
  $47 = ($24|0)<(14);
  if ($47) {
   $i$1$lcssa24 = $24;$sum$1$lcssa25 = $65;
   label = 7;
  } else {
   $sum$2$lcssa = $65;
  }
 }
 if ((label|0) == 7) {
  $48 = (($list0) + ($3<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($list1) + ($4<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $i$28 = $i$1$lcssa24;$sum$27 = $sum$1$lcssa25;
  while(1) {
   $67 = (($list0) + ($i$28<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (($68) + 1)|0;
   $70 = Math_imul($69, $68)|0;
   $71 = (($70|0) / 2)&-1;
   $72 = (($49) + ($71))|0;
   $73 = ((34184504 + (Math_imul($5, 2180052)|0)|0) + ($72<<1)|0);
   $74 = HEAP16[$73>>1]|0;
   $75 = $74 << 16 >> 16;
   $76 = (($75) + ($sum$27))|0;
   $77 = (($list1) + ($i$28<<2)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($78) + 1)|0;
   $80 = Math_imul($79, $78)|0;
   $81 = (($80|0) / 2)&-1;
   $82 = (($51) + ($81))|0;
   $83 = ((34184504 + (Math_imul($7, 2180052)|0)|0) + ($82<<1)|0);
   $84 = HEAP16[$83>>1]|0;
   $85 = $84 << 16 >> 16;
   $86 = (($76) - ($85))|0;
   $i$2 = (($i$28) + 1)|0;
   $exitcond = ($i$2|0)==(14);
   if ($exitcond) {
    $sum$2$lcssa = $86;
    break;
   } else {
    $i$28 = $i$2;$sum$27 = $86;
   }
  }
 }
 $87 = ($turn|0)==(0);
 if ($87) {
  $117 = (($list0) + ($3<<2)|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($118) + 1)|0;
  $120 = Math_imul($119, $118)|0;
  $121 = (($120|0) / 2)&-1;
  $122 = (($121) + ($118))|0;
  $123 = ((34184504 + (Math_imul($5, 2180052)|0)|0) + ($122<<1)|0);
  $124 = HEAP16[$123>>1]|0;
  $125 = $124 << 16 >> 16;
  $126 = (($125) + ($sum$2$lcssa))|0;
  $127 = (($list1) + ($3<<2)|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (($128) + 1)|0;
  $130 = Math_imul($129, $128)|0;
  $131 = (($130|0) / 2)&-1;
  $132 = (($list1) + ($4<<2)|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (($133) + ($131))|0;
  $135 = ((34184504 + (Math_imul($7, 2180052)|0)|0) + ($134<<1)|0);
  $136 = HEAP16[$135>>1]|0;
  $137 = $136 << 16 >> 16;
  $138 = (($126) - ($137))|0;
  $139 = (80 - ($5))|0;
  $140 = (1216 + ($pc<<2)|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = (($141) + ($hand_index))|0;
  $143 = (((210768720 + (($7*119556)|0)|0) + (($139*1476)|0)|0) + ($142<<1)|0);
  $144 = HEAP16[$143>>1]|0;
  $145 = $144 << 16 >> 16;
  $146 = (($138) - ($145))|0;
  $sum$3 = $146;
  STACKTOP = sp;return ($sum$3|0);
 } else {
  $88 = (($list0) + ($4<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($89) + 1)|0;
  $91 = Math_imul($90, $89)|0;
  $92 = (($91|0) / 2)&-1;
  $93 = (($list0) + ($3<<2)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($94) + ($92))|0;
  $96 = ((34184504 + (Math_imul($5, 2180052)|0)|0) + ($95<<1)|0);
  $97 = HEAP16[$96>>1]|0;
  $98 = $97 << 16 >> 16;
  $99 = (($98) + ($sum$2$lcssa))|0;
  $100 = (($list1) + ($4<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($101) + 1)|0;
  $103 = Math_imul($102, $101)|0;
  $104 = (($103|0) / 2)&-1;
  $105 = (($104) + ($101))|0;
  $106 = ((34184504 + (Math_imul($7, 2180052)|0)|0) + ($105<<1)|0);
  $107 = HEAP16[$106>>1]|0;
  $108 = $107 << 16 >> 16;
  $109 = (($99) - ($108))|0;
  $110 = (1216 + ($pc<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + ($hand_index))|0;
  $113 = (((210768720 + (($5*119556)|0)|0) + (($6*1476)|0)|0) + ($112<<1)|0);
  $114 = HEAP16[$113>>1]|0;
  $115 = $114 << 16 >> 16;
  $116 = (($109) + ($115))|0;
  $sum$3 = $116;
  STACKTOP = sp;return ($sum$3|0);
 }
 return 0|0;
}
function _swap($ptree,$move,$root_alpha,$root_beta,$turn) {
 $ptree = $ptree|0;
 $move = $move|0;
 $root_alpha = $root_alpha|0;
 $root_beta = $root_beta|0;
 $turn = $turn|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $$29 = 0, $$30 = 0, $$31 = 0, $$32 = 0, $$33 = 0, $$36 = 0, $$37 = 0, $$38 = 0, $$39 = 0, $$40 = 0, $$41 = 0, $$45 = 0, $$46 = 0, $$47 = 0, $$48 = 0, $$49 = 0, $$50 = 0;
 var $$51 = 0, $$52 = 0, $$53 = 0, $$54 = 0, $$55 = 0, $$56 = 0, $$64 = 0, $$65 = 0, $$66 = 0, $$pn = 0, $$pn$in = 0, $$pn10 = 0, $$pn11 = 0, $$pn12 = 0, $$pn12$in = 0, $$pn13 = 0, $$pn13$in = 0, $$pn14 = 0, $$pn14$in = 0, $$pn15 = 0;
 var $$pn15$in = 0, $$pn2 = 0, $$pn2$in = 0, $$pn3 = 0, $$pn3$in = 0, $$pn4 = 0, $$pn4$in = 0, $$pn5 = 0, $$pn5$in = 0, $$pn6 = 0, $$pn6$in = 0, $$pn7 = 0, $$pn7$in = 0, $$pn8 = 0, $$pn8$in = 0, $$pn9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $abb_plus_rays$abb_minus_rays = 0, $abb_plus_rays$abb_minus_rays27 = 0, $abb_plus_rays$abb_minus_rays28 = 0;
 var $abb_plus_rays$abb_minus_rays63 = 0, $alpha$0 = 0, $alpha$0$beta$0 = 0, $alpha$1 = 0, $attacked_piece$0 = 0, $attacked_piece$1 = 0, $attacked_piece$2 = 0, $attacked_piece$3 = 0, $bb$sroa$0$0 = 0, $bb$sroa$0$1 = 0, $bb$sroa$0$2 = 0, $bb$sroa$0$3 = 0, $bb$sroa$1$0 = 0, $bb$sroa$1$1 = 0, $bb$sroa$1$2 = 0, $bb$sroa$1$3 = 0, $bb$sroa$2$0 = 0, $bb$sroa$2$1 = 0, $bb$sroa$2$2 = 0, $bb$sroa$2$3 = 0;
 var $bb_attack$sroa$0$0 = 0, $bb_attack$sroa$0$1 = 0, $bb_attack$sroa$1$0 = 0, $bb_attack$sroa$1$1 = 0, $bb_attack$sroa$2$0 = 0, $bb_attack$sroa$2$1 = 0, $bb_temp$sroa$0$0 = 0, $bb_temp$sroa$1$0 = 0, $bb_temp$sroa$2$0 = 0, $beta$0 = 0, $beta$1 = 0, $from$0 = 0, $from$1 = 0, $nc$0 = 0, $or$cond = 0, $or$cond34 = 0, $or$cond35 = 0, $or$cond42 = 0, $or$cond43 = 0, $or$cond44 = 0;
 var $value$0 = 0, $value$1 = 0, $value$2 = 0, $value$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = $move >>> 7;
 $2 = $1 & 127;
 $3 = $move & 127;
 $4 = ($2>>>0)>(80);
 if ($4) {
  $5 = (($2) + -65)|0;
  $6 = (34184184 + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $attacked_piece$1 = $7;$value$1 = 0;
 } else {
  $8 = $move >>> 15;
  $9 = $8 & 15;
  $10 = $move >>> 19;
  $11 = $10 & 15;
  $12 = $move & 16384;
  $13 = (($11) + 15)|0;
  $14 = (34184184 + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($9) + 15)|0;
  $17 = (34184184 + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($12|0)==(0);
  if ($19) {
   $attacked_piece$0 = $18;$value$0 = $15;
  } else {
   $20 = (($9) + 7)|0;
   $21 = (34184312 + ($20<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + ($15))|0;
   $24 = (($22) + ($18))|0;
   $attacked_piece$0 = $24;$value$0 = $23;
  }
  $25 = (($value$0) - ($attacked_piece$0))|0;
  $26 = (($25) + -447)|0;
  $27 = ($26|0)<($root_beta|0);
  if ($27) {
   $attacked_piece$1 = $attacked_piece$0;$value$1 = $value$0;
  } else {
   $$0 = $26;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _attacks_to_piece($0,$ptree,$3);
 $28 = HEAP32[$0>>2]|0;
 $29 = (($0) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($0) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($ptree) + 140|0);
 $34 = (($ptree) + 152|0);
 $35 = (($ptree) + 144|0);
 $36 = (($ptree) + 156|0);
 $37 = (($ptree) + 148|0);
 $38 = (($ptree) + 160|0);
 $39 = (($ptree) + 188|0);
 $40 = (($ptree) + 192|0);
 $41 = (($ptree) + 196|0);
 $42 = (($ptree) + 200|0);
 $43 = (($ptree) + 204|0);
 $44 = (($ptree) + 208|0);
 $45 = (($ptree) + 116|0);
 $46 = (($ptree) + 128|0);
 $47 = (($ptree) + 120|0);
 $48 = (($ptree) + 132|0);
 $49 = (($ptree) + 124|0);
 $50 = (($ptree) + 136|0);
 $51 = (($ptree) + 20|0);
 $52 = (($ptree) + 24|0);
 $53 = (($ptree) + 28|0);
 $54 = (($ptree) + 368|0);
 $55 = (($ptree) + 372|0);
 $56 = (($ptree) + 376|0);
 $57 = (($ptree) + 224|0);
 $58 = (($ptree) + 228|0);
 $59 = (($ptree) + 232|0);
 $60 = (($ptree) + 416|0);
 $61 = (($ptree) + 420|0);
 $62 = (($ptree) + 424|0);
 $63 = (($ptree) + 440|0);
 $64 = (($ptree) + 444|0);
 $65 = (($ptree) + 448|0);
 $66 = (($ptree) + 464|0);
 $67 = (($ptree) + 468|0);
 $68 = (($ptree) + 472|0);
 $69 = (($ptree) + 248|0);
 $70 = (($ptree) + 252|0);
 $71 = (($ptree) + 256|0);
 $72 = (($ptree) + 488|0);
 $73 = (($ptree) + 492|0);
 $74 = (($ptree) + 496|0);
 $75 = (($ptree) + 392|0);
 $76 = (($ptree) + 396|0);
 $77 = (($ptree) + 400|0);
 $78 = (($ptree) + 272|0);
 $79 = (($ptree) + 276|0);
 $80 = (($ptree) + 280|0);
 $81 = (($ptree) + 320|0);
 $82 = (($ptree) + 324|0);
 $83 = (($ptree) + 328|0);
 $84 = (($ptree) + 296|0);
 $85 = (($ptree) + 300|0);
 $86 = (($ptree) + 304|0);
 $87 = (($ptree) + 344|0);
 $88 = (($ptree) + 348|0);
 $89 = (($ptree) + 352|0);
 $90 = (($ptree) + 594|0);
 $91 = ($3>>>0)>(53);
 $$40 = $91 ? 767 : 514;
 $$38 = $91 ? 721 : 464;
 $92 = (($3) + -9)|0;
 $$36 = $91 ? 621 : 174;
 $93 = (($ptree) + 8|0);
 $94 = (($ptree) + 12|0);
 $95 = (($ptree) + 16|0);
 $96 = (($ptree) + 356|0);
 $97 = (($ptree) + 360|0);
 $98 = (($ptree) + 364|0);
 $99 = (($ptree) + 212|0);
 $100 = (($ptree) + 216|0);
 $101 = (($ptree) + 220|0);
 $102 = (($ptree) + 404|0);
 $103 = (($ptree) + 408|0);
 $104 = (($ptree) + 412|0);
 $105 = (($ptree) + 428|0);
 $106 = (($ptree) + 432|0);
 $107 = (($ptree) + 436|0);
 $108 = (($ptree) + 452|0);
 $109 = (($ptree) + 456|0);
 $110 = (($ptree) + 460|0);
 $111 = (($ptree) + 236|0);
 $112 = (($ptree) + 240|0);
 $113 = (($ptree) + 244|0);
 $114 = (($ptree) + 476|0);
 $115 = (($ptree) + 480|0);
 $116 = (($ptree) + 484|0);
 $117 = (($ptree) + 380|0);
 $118 = (($ptree) + 384|0);
 $119 = (($ptree) + 388|0);
 $120 = (($ptree) + 260|0);
 $121 = (($ptree) + 264|0);
 $122 = (($ptree) + 268|0);
 $123 = (($ptree) + 308|0);
 $124 = (($ptree) + 312|0);
 $125 = (($ptree) + 316|0);
 $126 = (($ptree) + 284|0);
 $127 = (($ptree) + 288|0);
 $128 = (($ptree) + 292|0);
 $129 = (($ptree) + 332|0);
 $130 = (($ptree) + 336|0);
 $131 = (($ptree) + 340|0);
 $132 = (($ptree) + 593|0);
 $133 = ($3>>>0)<(27);
 $$32 = $133 ? 767 : 514;
 $$30 = $133 ? 721 : 464;
 $134 = (($3) + 9)|0;
 $$ = $133 ? 621 : 174;
 $$01 = $turn;$alpha$0 = -2147483648;$attacked_piece$2 = $attacked_piece$1;$bb_attack$sroa$0$0 = $28;$bb_attack$sroa$1$0 = $30;$bb_attack$sroa$2$0 = $32;$beta$0 = $value$1;$from$0 = $2;$nc$0 = 1;$value$2 = $value$1;
 L9: while(1) {
  $135 = ($from$0|0)<(81);
  do {
   if ($135) {
    $136 = (34156304 + (($from$0*12)|0)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $137 ^ $bb_attack$sroa$0$0;
    $139 = ((34156304 + (($from$0*12)|0)|0) + 4|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = $140 ^ $bb_attack$sroa$1$0;
    $142 = ((34156304 + (($from$0*12)|0)|0) + 8|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = $143 ^ $bb_attack$sroa$2$0;
    $145 = ((220518304 + (($3*81)|0)|0) + ($from$0)|0);
    $146 = HEAP8[$145>>0]|0;
    $147 = $146&255;
    if ((($147|0) == 4)) {
     $215 = ((33572424 + ($from$0<<3)|0) + 6|0);
     $216 = HEAP8[$215>>0]|0;
     $217 = $216&255;
     $218 = ((($ptree) + ($217<<2)|0) + 56|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ((33572424 + ($from$0<<3)|0) + 7|0);
     $221 = HEAP8[$220>>0]|0;
     $222 = $221&255;
     $223 = $219 >>> $222;
     $224 = $223 & 127;
     $225 = ((33704320 + (($from$0*1536)|0)|0) + (($224*12)|0)|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = (((33704320 + (($from$0*1536)|0)|0) + (($224*12)|0)|0) + 4|0);
     $228 = HEAP32[$227>>2]|0;
     $229 = (((33704320 + (($from$0*1536)|0)|0) + (($224*12)|0)|0) + 8|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = ($from$0|0)>($3|0);
     $abb_plus_rays$abb_minus_rays27 = $231 ? 34160208 : 34161184;
     $$pn6$in = ((($abb_plus_rays$abb_minus_rays27) + (($from$0*12)|0)|0) + 8|0);
     $$pn5$in = (($abb_plus_rays$abb_minus_rays27) + (($from$0*12)|0)|0);
     $$pn4$in = ((($abb_plus_rays$abb_minus_rays27) + (($from$0*12)|0)|0) + 4|0);
     $$pn6 = HEAP32[$$pn6$in>>2]|0;
     $$pn5 = HEAP32[$$pn5$in>>2]|0;
     $$pn4 = HEAP32[$$pn4$in>>2]|0;
     $bb$sroa$2$2 = $$pn6 & $230;
     $bb$sroa$0$2 = $$pn5 & $226;
     $bb$sroa$1$2 = $$pn4 & $228;
     $232 = HEAP32[$45>>2]|0;
     $233 = HEAP32[$46>>2]|0;
     $234 = $233 | $232;
     $235 = HEAP32[$47>>2]|0;
     $236 = HEAP32[$48>>2]|0;
     $237 = $236 | $235;
     $238 = HEAP32[$49>>2]|0;
     $239 = HEAP32[$50>>2]|0;
     $240 = $239 | $238;
     $241 = $bb$sroa$0$2 & $234;
     $242 = $bb$sroa$1$2 & $237;
     $243 = $bb$sroa$2$2 & $240;
     $244 = $241 | $138;
     $245 = $242 | $141;
     $246 = $243 | $144;
     $bb_attack$sroa$0$1 = $244;$bb_attack$sroa$1$1 = $245;$bb_attack$sroa$2$1 = $246;
     break;
    } else if ((($147|0) == 2)) {
     $183 = ((33572424 + ($from$0<<3)|0) + 2|0);
     $184 = HEAP8[$183>>0]|0;
     $185 = $184&255;
     $186 = ((($ptree) + ($185<<2)|0) + 32|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ((33572424 + ($from$0<<3)|0) + 3|0);
     $189 = HEAP8[$188>>0]|0;
     $190 = $189&255;
     $191 = $187 >>> $190;
     $192 = $191 & 127;
     $193 = ((33953152 + (($from$0*1536)|0)|0) + (($192*12)|0)|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (((33953152 + (($from$0*1536)|0)|0) + (($192*12)|0)|0) + 4|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = (((33953152 + (($from$0*1536)|0)|0) + (($192*12)|0)|0) + 8|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = HEAP32[$33>>2]|0;
     $200 = HEAP32[$34>>2]|0;
     $201 = $200 | $199;
     $202 = HEAP32[$35>>2]|0;
     $203 = HEAP32[$36>>2]|0;
     $204 = $203 | $202;
     $205 = HEAP32[$37>>2]|0;
     $206 = HEAP32[$38>>2]|0;
     $207 = $206 | $205;
     $208 = ($from$0|0)>($3|0);
     $abb_plus_rays$abb_minus_rays63 = $208 ? 34160208 : 34161184;
     $$64 = $208 ? $41 : $44;
     $$65 = $208 ? $40 : $43;
     $$66 = $208 ? $39 : $42;
     $$pn12$in = ((($abb_plus_rays$abb_minus_rays63) + (($from$0*12)|0)|0) + 8|0);
     $$pn8$in = (($abb_plus_rays$abb_minus_rays63) + (($from$0*12)|0)|0);
     $$pn7$in = ((($abb_plus_rays$abb_minus_rays63) + (($from$0*12)|0)|0) + 4|0);
     $$pn12 = HEAP32[$$pn12$in>>2]|0;
     $$pn11 = HEAP32[$$66>>2]|0;
     $$pn10 = HEAP32[$$65>>2]|0;
     $$pn9 = HEAP32[$$64>>2]|0;
     $$pn8 = HEAP32[$$pn8$in>>2]|0;
     $$pn7 = HEAP32[$$pn7$in>>2]|0;
     $bb$sroa$2$1 = $$pn12 & $198;
     $bb_temp$sroa$0$0 = $201 | $$pn11;
     $bb_temp$sroa$1$0 = $204 | $$pn10;
     $bb_temp$sroa$2$0 = $207 | $$pn9;
     $bb$sroa$0$1 = $bb_temp$sroa$0$0 & $194;
     $209 = $bb$sroa$0$1 & $$pn8;
     $bb$sroa$1$1 = $bb_temp$sroa$1$0 & $196;
     $210 = $bb$sroa$1$1 & $$pn7;
     $211 = $bb$sroa$2$1 & $bb_temp$sroa$2$0;
     $212 = $209 | $138;
     $213 = $210 | $141;
     $214 = $211 | $144;
     $bb_attack$sroa$0$1 = $212;$bb_attack$sroa$1$1 = $213;$bb_attack$sroa$2$1 = $214;
     break;
    } else if ((($147|0) == 5)) {
     $247 = ((33572424 + ($from$0<<3)|0) + 4|0);
     $248 = HEAP8[$247>>0]|0;
     $249 = $248&255;
     $250 = ((($ptree) + ($249<<2)|0) + 44|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = ((33572424 + ($from$0<<3)|0) + 5|0);
     $253 = HEAP8[$252>>0]|0;
     $254 = $253&255;
     $255 = $251 >>> $254;
     $256 = $255 & 127;
     $257 = ((33579904 + (($from$0*1536)|0)|0) + (($256*12)|0)|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = (((33579904 + (($from$0*1536)|0)|0) + (($256*12)|0)|0) + 4|0);
     $260 = HEAP32[$259>>2]|0;
     $261 = (((33579904 + (($from$0*1536)|0)|0) + (($256*12)|0)|0) + 8|0);
     $262 = HEAP32[$261>>2]|0;
     $263 = ($from$0|0)>($3|0);
     $abb_plus_rays$abb_minus_rays28 = $263 ? 34160208 : 34161184;
     $$pn3$in = ((($abb_plus_rays$abb_minus_rays28) + (($from$0*12)|0)|0) + 8|0);
     $$pn2$in = (($abb_plus_rays$abb_minus_rays28) + (($from$0*12)|0)|0);
     $$pn$in = ((($abb_plus_rays$abb_minus_rays28) + (($from$0*12)|0)|0) + 4|0);
     $$pn3 = HEAP32[$$pn3$in>>2]|0;
     $$pn2 = HEAP32[$$pn2$in>>2]|0;
     $$pn = HEAP32[$$pn$in>>2]|0;
     $bb$sroa$2$3 = $$pn3 & $262;
     $bb$sroa$0$3 = $$pn2 & $258;
     $bb$sroa$1$3 = $$pn & $260;
     $264 = HEAP32[$45>>2]|0;
     $265 = HEAP32[$46>>2]|0;
     $266 = $265 | $264;
     $267 = HEAP32[$47>>2]|0;
     $268 = HEAP32[$48>>2]|0;
     $269 = $268 | $267;
     $270 = HEAP32[$49>>2]|0;
     $271 = HEAP32[$50>>2]|0;
     $272 = $271 | $270;
     $273 = $bb$sroa$0$3 & $266;
     $274 = $bb$sroa$1$3 & $269;
     $275 = $bb$sroa$2$3 & $272;
     $276 = $273 | $138;
     $277 = $274 | $141;
     $278 = $275 | $144;
     $bb_attack$sroa$0$1 = $276;$bb_attack$sroa$1$1 = $277;$bb_attack$sroa$2$1 = $278;
     break;
    } else if ((($147|0) == 3)) {
     $148 = (33572424 + ($from$0<<3)|0);
     $149 = HEAP8[$148>>0]|0;
     $150 = $149&255;
     $151 = ((($ptree) + ($150<<2)|0) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ((($ptree) + ($150<<2)|0) + 20|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = $154 | $152;
     $156 = ((33572424 + ($from$0<<3)|0) + 1|0);
     $157 = HEAP8[$156>>0]|0;
     $158 = $157&255;
     $159 = $155 >>> $158;
     $160 = $159 & 127;
     $161 = ((33828736 + (($from$0*1536)|0)|0) + (($160*12)|0)|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = (((33828736 + (($from$0*1536)|0)|0) + (($160*12)|0)|0) + 4|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = (((33828736 + (($from$0*1536)|0)|0) + (($160*12)|0)|0) + 8|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = ($from$0|0)>($3|0);
     $abb_plus_rays$abb_minus_rays = $167 ? 34160208 : 34161184;
     $$pn15$in = ((($abb_plus_rays$abb_minus_rays) + (($from$0*12)|0)|0) + 8|0);
     $$pn14$in = (($abb_plus_rays$abb_minus_rays) + (($from$0*12)|0)|0);
     $$pn13$in = ((($abb_plus_rays$abb_minus_rays) + (($from$0*12)|0)|0) + 4|0);
     $$pn15 = HEAP32[$$pn15$in>>2]|0;
     $$pn14 = HEAP32[$$pn14$in>>2]|0;
     $$pn13 = HEAP32[$$pn13$in>>2]|0;
     $bb$sroa$2$0 = $$pn15 & $166;
     $bb$sroa$0$0 = $$pn14 & $162;
     $bb$sroa$1$0 = $$pn13 & $164;
     $168 = HEAP32[$33>>2]|0;
     $169 = HEAP32[$34>>2]|0;
     $170 = $169 | $168;
     $171 = HEAP32[$35>>2]|0;
     $172 = HEAP32[$36>>2]|0;
     $173 = $172 | $171;
     $174 = HEAP32[$37>>2]|0;
     $175 = HEAP32[$38>>2]|0;
     $176 = $175 | $174;
     $177 = $bb$sroa$0$0 & $170;
     $178 = $177 | $138;
     $179 = $bb$sroa$1$0 & $173;
     $180 = $179 | $141;
     $181 = $bb$sroa$2$0 & $176;
     $182 = $181 | $144;
     $bb_attack$sroa$0$1 = $178;$bb_attack$sroa$1$1 = $180;$bb_attack$sroa$2$1 = $182;
     break;
    } else {
     $bb_attack$sroa$0$1 = $138;$bb_attack$sroa$1$1 = $141;$bb_attack$sroa$2$1 = $144;
     break;
    }
   } else {
    $bb_attack$sroa$0$1 = $bb_attack$sroa$0$0;$bb_attack$sroa$1$1 = $bb_attack$sroa$1$0;$bb_attack$sroa$2$1 = $bb_attack$sroa$2$0;
   }
  } while(0);
  $279 = ($$01|0)==(0);
  do {
   if ($279) {
    $430 = HEAP32[$51>>2]|0;
    $431 = $430 & $bb_attack$sroa$0$1;
    $432 = HEAP32[$52>>2]|0;
    $433 = $432 & $bb_attack$sroa$1$1;
    $434 = $433 | $431;
    $435 = HEAP32[$53>>2]|0;
    $436 = $435 & $bb_attack$sroa$2$1;
    $437 = $434 | $436;
    $438 = ($437|0)==(0);
    if ($438) {
     label = 82;
     break L9;
    }
    $439 = (($attacked_piece$2) - ($value$2))|0;
    $440 = HEAP32[$54>>2]|0;
    $441 = $440 & $bb_attack$sroa$0$1;
    $442 = HEAP32[$55>>2]|0;
    $443 = $442 & $bb_attack$sroa$1$1;
    $444 = $443 | $441;
    $445 = HEAP32[$56>>2]|0;
    $446 = $445 & $bb_attack$sroa$2$1;
    $447 = $444 | $446;
    $448 = ($447|0)==(0);
    if (!($448)) {
     $449 = (($439) + 447)|0;
     $$37 = $91 ? $449 : $439;
     $attacked_piece$3 = $$36;$from$1 = $92;$value$3 = $$37;
     break;
    }
    $450 = HEAP32[$42>>2]|0;
    $451 = $450 & $bb_attack$sroa$0$1;
    $452 = HEAP32[$43>>2]|0;
    $453 = $452 & $bb_attack$sroa$1$1;
    $454 = HEAP32[$44>>2]|0;
    $455 = $454 & $bb_attack$sroa$2$1;
    $456 = $453 | $451;
    $457 = $456 | $455;
    $458 = ($457|0)==(0);
    if (!($458)) {
     $459 = (_first_one012($451,$453,$455)|0);
     $460 = (($439) + 257)|0;
     $$39 = $91 ? $460 : $439;
     $attacked_piece$3 = $$38;$from$1 = $459;$value$3 = $$39;
     break;
    }
    $461 = HEAP32[$57>>2]|0;
    $462 = $461 & $bb_attack$sroa$0$1;
    $463 = HEAP32[$58>>2]|0;
    $464 = $463 & $bb_attack$sroa$1$1;
    $465 = HEAP32[$59>>2]|0;
    $466 = $465 & $bb_attack$sroa$2$1;
    $467 = $464 | $462;
    $468 = $467 | $466;
    $469 = ($468|0)==(0);
    if (!($469)) {
     $470 = (_first_one012($462,$464,$466)|0);
     $471 = (($439) + 253)|0;
     $$41 = $91 ? $471 : $439;
     $attacked_piece$3 = $$40;$from$1 = $470;$value$3 = $$41;
     break;
    }
    $472 = HEAP32[$60>>2]|0;
    $473 = $472 & $bb_attack$sroa$0$1;
    $474 = HEAP32[$61>>2]|0;
    $475 = $474 & $bb_attack$sroa$1$1;
    $476 = HEAP32[$62>>2]|0;
    $477 = $476 & $bb_attack$sroa$2$1;
    $478 = $475 | $473;
    $479 = $478 | $477;
    $480 = ($479|0)==(0);
    if (!($480)) {
     $481 = (_first_one012($473,$475,$477)|0);
     $attacked_piece$3 = 621;$from$1 = $481;$value$3 = $439;
     break;
    }
    $482 = HEAP32[$63>>2]|0;
    $483 = $482 & $bb_attack$sroa$0$1;
    $484 = HEAP32[$64>>2]|0;
    $485 = $484 & $bb_attack$sroa$1$1;
    $486 = HEAP32[$65>>2]|0;
    $487 = $486 & $bb_attack$sroa$2$1;
    $488 = $485 | $483;
    $489 = $488 | $487;
    $490 = ($489|0)==(0);
    if (!($490)) {
     $491 = (_first_one012($483,$485,$487)|0);
     $attacked_piece$3 = 721;$from$1 = $491;$value$3 = $439;
     break;
    }
    $492 = HEAP32[$66>>2]|0;
    $493 = $492 & $bb_attack$sroa$0$1;
    $494 = HEAP32[$67>>2]|0;
    $495 = $494 & $bb_attack$sroa$1$1;
    $496 = HEAP32[$68>>2]|0;
    $497 = $496 & $bb_attack$sroa$2$1;
    $498 = $495 | $493;
    $499 = $498 | $497;
    $500 = ($499|0)==(0);
    if (!($500)) {
     $501 = (_first_one012($493,$495,$497)|0);
     $attacked_piece$3 = 767;$from$1 = $501;$value$3 = $439;
     break;
    }
    $502 = HEAP32[$69>>2]|0;
    $503 = $502 & $bb_attack$sroa$0$1;
    $504 = HEAP32[$70>>2]|0;
    $505 = $504 & $bb_attack$sroa$1$1;
    $506 = HEAP32[$71>>2]|0;
    $507 = $506 & $bb_attack$sroa$2$1;
    $508 = $505 | $503;
    $509 = $508 | $507;
    $510 = ($509|0)==(0);
    if (!($510)) {
     $511 = (_first_one012($503,$505,$507)|0);
     $512 = ($511|0)>(53);
     $or$cond42 = $512 | $91;
     $513 = (($439) + 126)|0;
     $$51 = $or$cond42 ? 864 : 738;
     $$52 = $or$cond42 ? $513 : $439;
     $attacked_piece$3 = $$51;$from$1 = $511;$value$3 = $$52;
     break;
    }
    $514 = HEAP32[$72>>2]|0;
    $515 = $514 & $bb_attack$sroa$0$1;
    $516 = HEAP32[$73>>2]|0;
    $517 = $516 & $bb_attack$sroa$1$1;
    $518 = HEAP32[$74>>2]|0;
    $519 = $518 & $bb_attack$sroa$2$1;
    $520 = $517 | $515;
    $521 = $520 | $519;
    $522 = ($521|0)==(0);
    if (!($522)) {
     $523 = (_first_one012($515,$517,$519)|0);
     $attacked_piece$3 = 864;$from$1 = $523;$value$3 = $439;
     break;
    }
    $524 = HEAP32[$75>>2]|0;
    $525 = $524 & $bb_attack$sroa$0$1;
    $526 = HEAP32[$76>>2]|0;
    $527 = $526 & $bb_attack$sroa$1$1;
    $528 = HEAP32[$77>>2]|0;
    $529 = $528 & $bb_attack$sroa$2$1;
    $530 = $527 | $525;
    $531 = $530 | $529;
    $532 = ($531|0)==(0);
    if (!($532)) {
     $533 = (_first_one012($525,$527,$529)|0);
     $attacked_piece$3 = 888;$from$1 = $533;$value$3 = $439;
     break;
    }
    $534 = HEAP32[$78>>2]|0;
    $535 = $534 & $bb_attack$sroa$0$1;
    $536 = HEAP32[$79>>2]|0;
    $537 = $536 & $bb_attack$sroa$1$1;
    $538 = HEAP32[$80>>2]|0;
    $539 = $538 & $bb_attack$sroa$2$1;
    $540 = $537 | $535;
    $541 = $540 | $539;
    $542 = ($541|0)==(0);
    if (!($542)) {
     $543 = (_first_one012($535,$537,$539)|0);
     $544 = ($543|0)>(53);
     $or$cond43 = $544 | $91;
     $545 = (($439) + 258)|0;
     $$53 = $or$cond43 ? 1396 : 1138;
     $$54 = $or$cond43 ? $545 : $439;
     $attacked_piece$3 = $$53;$from$1 = $543;$value$3 = $$54;
     break;
    }
    $546 = HEAP32[$81>>2]|0;
    $547 = $546 & $bb_attack$sroa$0$1;
    $548 = HEAP32[$82>>2]|0;
    $549 = $548 & $bb_attack$sroa$1$1;
    $550 = HEAP32[$83>>2]|0;
    $551 = $550 & $bb_attack$sroa$2$1;
    $552 = $549 | $547;
    $553 = $552 | $551;
    $554 = ($553|0)==(0);
    if (!($554)) {
     $555 = (_first_one012($547,$549,$551)|0);
     $attacked_piece$3 = 1396;$from$1 = $555;$value$3 = $439;
     break;
    }
    $556 = HEAP32[$84>>2]|0;
    $557 = $556 & $bb_attack$sroa$0$1;
    $558 = HEAP32[$85>>2]|0;
    $559 = $558 & $bb_attack$sroa$1$1;
    $560 = HEAP32[$86>>2]|0;
    $561 = $560 & $bb_attack$sroa$2$1;
    $562 = $559 | $557;
    $563 = $562 | $561;
    $564 = ($563|0)==(0);
    if (!($564)) {
     $565 = (_first_one012($557,$559,$561)|0);
     $566 = ($565|0)>(53);
     $or$cond44 = $566 | $91;
     $567 = (($439) + 303)|0;
     $$55 = $or$cond44 ? 1587 : 1284;
     $$56 = $or$cond44 ? $567 : $439;
     $attacked_piece$3 = $$55;$from$1 = $565;$value$3 = $$56;
     break;
    }
    $568 = HEAP32[$87>>2]|0;
    $569 = $568 & $bb_attack$sroa$0$1;
    $570 = HEAP32[$88>>2]|0;
    $571 = $570 & $bb_attack$sroa$1$1;
    $572 = HEAP32[$89>>2]|0;
    $573 = $572 & $bb_attack$sroa$2$1;
    $574 = $571 | $569;
    $575 = $574 | $573;
    $576 = ($575|0)==(0);
    if ($576) {
     $578 = HEAP8[$90>>0]|0;
     $579 = $578&255;
     $attacked_piece$3 = 30000;$from$1 = $579;$value$3 = $439;
     break;
    } else {
     $577 = (_first_one012($569,$571,$573)|0);
     $attacked_piece$3 = 1587;$from$1 = $577;$value$3 = $439;
     break;
    }
   } else {
    $280 = HEAP32[$93>>2]|0;
    $281 = $280 & $bb_attack$sroa$0$1;
    $282 = HEAP32[$94>>2]|0;
    $283 = $282 & $bb_attack$sroa$1$1;
    $284 = $283 | $281;
    $285 = HEAP32[$95>>2]|0;
    $286 = $285 & $bb_attack$sroa$2$1;
    $287 = $284 | $286;
    $288 = ($287|0)==(0);
    if ($288) {
     label = 82;
     break L9;
    }
    $289 = (($attacked_piece$2) - ($value$2))|0;
    $290 = HEAP32[$96>>2]|0;
    $291 = $290 & $bb_attack$sroa$0$1;
    $292 = HEAP32[$97>>2]|0;
    $293 = $292 & $bb_attack$sroa$1$1;
    $294 = $293 | $291;
    $295 = HEAP32[$98>>2]|0;
    $296 = $295 & $bb_attack$sroa$2$1;
    $297 = $294 | $296;
    $298 = ($297|0)==(0);
    if (!($298)) {
     $299 = (($289) + 447)|0;
     $$29 = $133 ? $299 : $289;
     $attacked_piece$3 = $$;$from$1 = $134;$value$3 = $$29;
     break;
    }
    $300 = HEAP32[$39>>2]|0;
    $301 = $300 & $bb_attack$sroa$0$1;
    $302 = HEAP32[$40>>2]|0;
    $303 = $302 & $bb_attack$sroa$1$1;
    $304 = HEAP32[$41>>2]|0;
    $305 = $304 & $bb_attack$sroa$2$1;
    $306 = $303 | $301;
    $307 = $306 | $305;
    $308 = ($307|0)==(0);
    if (!($308)) {
     $309 = (_first_one012($301,$303,$305)|0);
     $310 = (($289) + 257)|0;
     $$31 = $133 ? $310 : $289;
     $attacked_piece$3 = $$30;$from$1 = $309;$value$3 = $$31;
     break;
    }
    $311 = HEAP32[$99>>2]|0;
    $312 = $311 & $bb_attack$sroa$0$1;
    $313 = HEAP32[$100>>2]|0;
    $314 = $313 & $bb_attack$sroa$1$1;
    $315 = HEAP32[$101>>2]|0;
    $316 = $315 & $bb_attack$sroa$2$1;
    $317 = $314 | $312;
    $318 = $317 | $316;
    $319 = ($318|0)==(0);
    if (!($319)) {
     $320 = (_first_one012($312,$314,$316)|0);
     $321 = (($289) + 253)|0;
     $$33 = $133 ? $321 : $289;
     $attacked_piece$3 = $$32;$from$1 = $320;$value$3 = $$33;
     break;
    }
    $322 = HEAP32[$102>>2]|0;
    $323 = $322 & $bb_attack$sroa$0$1;
    $324 = HEAP32[$103>>2]|0;
    $325 = $324 & $bb_attack$sroa$1$1;
    $326 = HEAP32[$104>>2]|0;
    $327 = $326 & $bb_attack$sroa$2$1;
    $328 = $325 | $323;
    $329 = $328 | $327;
    $330 = ($329|0)==(0);
    if (!($330)) {
     $331 = (_first_one012($323,$325,$327)|0);
     $attacked_piece$3 = 621;$from$1 = $331;$value$3 = $289;
     break;
    }
    $332 = HEAP32[$105>>2]|0;
    $333 = $332 & $bb_attack$sroa$0$1;
    $334 = HEAP32[$106>>2]|0;
    $335 = $334 & $bb_attack$sroa$1$1;
    $336 = HEAP32[$107>>2]|0;
    $337 = $336 & $bb_attack$sroa$2$1;
    $338 = $335 | $333;
    $339 = $338 | $337;
    $340 = ($339|0)==(0);
    if (!($340)) {
     $341 = (_first_one012($333,$335,$337)|0);
     $attacked_piece$3 = 721;$from$1 = $341;$value$3 = $289;
     break;
    }
    $342 = HEAP32[$108>>2]|0;
    $343 = $342 & $bb_attack$sroa$0$1;
    $344 = HEAP32[$109>>2]|0;
    $345 = $344 & $bb_attack$sroa$1$1;
    $346 = HEAP32[$110>>2]|0;
    $347 = $346 & $bb_attack$sroa$2$1;
    $348 = $345 | $343;
    $349 = $348 | $347;
    $350 = ($349|0)==(0);
    if (!($350)) {
     $351 = (_first_one012($343,$345,$347)|0);
     $attacked_piece$3 = 767;$from$1 = $351;$value$3 = $289;
     break;
    }
    $352 = HEAP32[$111>>2]|0;
    $353 = $352 & $bb_attack$sroa$0$1;
    $354 = HEAP32[$112>>2]|0;
    $355 = $354 & $bb_attack$sroa$1$1;
    $356 = HEAP32[$113>>2]|0;
    $357 = $356 & $bb_attack$sroa$2$1;
    $358 = $355 | $353;
    $359 = $358 | $357;
    $360 = ($359|0)==(0);
    if (!($360)) {
     $361 = (_first_one012($353,$355,$357)|0);
     $362 = ($361|0)<(27);
     $or$cond = $362 | $133;
     $363 = (($289) + 126)|0;
     $$45 = $or$cond ? 864 : 738;
     $$46 = $or$cond ? $363 : $289;
     $attacked_piece$3 = $$45;$from$1 = $361;$value$3 = $$46;
     break;
    }
    $364 = HEAP32[$114>>2]|0;
    $365 = $364 & $bb_attack$sroa$0$1;
    $366 = HEAP32[$115>>2]|0;
    $367 = $366 & $bb_attack$sroa$1$1;
    $368 = HEAP32[$116>>2]|0;
    $369 = $368 & $bb_attack$sroa$2$1;
    $370 = $367 | $365;
    $371 = $370 | $369;
    $372 = ($371|0)==(0);
    if (!($372)) {
     $373 = (_first_one012($365,$367,$369)|0);
     $attacked_piece$3 = 864;$from$1 = $373;$value$3 = $289;
     break;
    }
    $374 = HEAP32[$117>>2]|0;
    $375 = $374 & $bb_attack$sroa$0$1;
    $376 = HEAP32[$118>>2]|0;
    $377 = $376 & $bb_attack$sroa$1$1;
    $378 = HEAP32[$119>>2]|0;
    $379 = $378 & $bb_attack$sroa$2$1;
    $380 = $377 | $375;
    $381 = $380 | $379;
    $382 = ($381|0)==(0);
    if (!($382)) {
     $383 = (_first_one012($375,$377,$379)|0);
     $attacked_piece$3 = 888;$from$1 = $383;$value$3 = $289;
     break;
    }
    $384 = HEAP32[$120>>2]|0;
    $385 = $384 & $bb_attack$sroa$0$1;
    $386 = HEAP32[$121>>2]|0;
    $387 = $386 & $bb_attack$sroa$1$1;
    $388 = HEAP32[$122>>2]|0;
    $389 = $388 & $bb_attack$sroa$2$1;
    $390 = $387 | $385;
    $391 = $390 | $389;
    $392 = ($391|0)==(0);
    if (!($392)) {
     $393 = (_first_one012($385,$387,$389)|0);
     $394 = ($393|0)<(27);
     $or$cond34 = $394 | $133;
     $395 = (($289) + 258)|0;
     $$47 = $or$cond34 ? 1396 : 1138;
     $$48 = $or$cond34 ? $395 : $289;
     $attacked_piece$3 = $$47;$from$1 = $393;$value$3 = $$48;
     break;
    }
    $396 = HEAP32[$123>>2]|0;
    $397 = $396 & $bb_attack$sroa$0$1;
    $398 = HEAP32[$124>>2]|0;
    $399 = $398 & $bb_attack$sroa$1$1;
    $400 = HEAP32[$125>>2]|0;
    $401 = $400 & $bb_attack$sroa$2$1;
    $402 = $399 | $397;
    $403 = $402 | $401;
    $404 = ($403|0)==(0);
    if (!($404)) {
     $405 = (_first_one012($397,$399,$401)|0);
     $attacked_piece$3 = 1396;$from$1 = $405;$value$3 = $289;
     break;
    }
    $406 = HEAP32[$126>>2]|0;
    $407 = $406 & $bb_attack$sroa$0$1;
    $408 = HEAP32[$127>>2]|0;
    $409 = $408 & $bb_attack$sroa$1$1;
    $410 = HEAP32[$128>>2]|0;
    $411 = $410 & $bb_attack$sroa$2$1;
    $412 = $409 | $407;
    $413 = $412 | $411;
    $414 = ($413|0)==(0);
    if (!($414)) {
     $415 = (_first_one012($407,$409,$411)|0);
     $416 = ($415|0)<(27);
     $or$cond35 = $416 | $133;
     $417 = (($289) + 303)|0;
     $$49 = $or$cond35 ? 1587 : 1284;
     $$50 = $or$cond35 ? $417 : $289;
     $attacked_piece$3 = $$49;$from$1 = $415;$value$3 = $$50;
     break;
    }
    $418 = HEAP32[$129>>2]|0;
    $419 = $418 & $bb_attack$sroa$0$1;
    $420 = HEAP32[$130>>2]|0;
    $421 = $420 & $bb_attack$sroa$1$1;
    $422 = HEAP32[$131>>2]|0;
    $423 = $422 & $bb_attack$sroa$2$1;
    $424 = $421 | $419;
    $425 = $424 | $423;
    $426 = ($425|0)==(0);
    if ($426) {
     $428 = HEAP8[$132>>0]|0;
     $429 = $428&255;
     $attacked_piece$3 = 30000;$from$1 = $429;$value$3 = $289;
     break;
    } else {
     $427 = (_first_one012($419,$421,$423)|0);
     $attacked_piece$3 = 1587;$from$1 = $427;$value$3 = $289;
     break;
    }
   }
  } while(0);
  $580 = (0 - ($value$3))|0;
  $581 = $$01 ^ 1;
  $582 = $nc$0 & 1;
  $583 = ($582|0)==(0);
  do {
   if ($583) {
    $591 = ($value$3|0)<($beta$0|0);
    if ($591) {
     $592 = ($value$3|0)>($alpha$0|0);
     if (!($592)) {
      $$0 = $alpha$0;
      label = 83;
      break L9;
     }
     $593 = ($value$3|0)>($root_alpha|0);
     if ($593) {
      $alpha$1 = $alpha$0;$beta$1 = $value$3;
      break;
     } else {
      $$0 = $value$3;
      label = 83;
      break L9;
     }
    } else {
     $594 = (($value$3) - ($attacked_piece$3))|0;
     $595 = (($594) + -447)|0;
     $596 = ($595|0)<($beta$0|0);
     if (!($596)) {
      $$0 = $beta$0;
      label = 83;
      break L9;
     }
     $597 = ($595|0)<($root_beta|0);
     if ($597) {
      $alpha$1 = $alpha$0;$beta$1 = $beta$0;
      break;
     } else {
      $$0 = $595;
      label = 83;
      break L9;
     }
    }
   } else {
    $584 = ($alpha$0|0)<($580|0);
    if ($584) {
     $585 = ($beta$0|0)>($580|0);
     if (!($585)) {
      $$0 = $beta$0;
      label = 83;
      break L9;
     }
     $586 = ($580|0)<($root_beta|0);
     if ($586) {
      $alpha$1 = $580;$beta$1 = $beta$0;
      break;
     } else {
      $$0 = $580;
      label = 83;
      break L9;
     }
    } else {
     $587 = (($attacked_piece$3) + 447)|0;
     $588 = (($587) - ($value$3))|0;
     $589 = ($588|0)>($alpha$0|0);
     if (!($589)) {
      $$0 = $alpha$0;
      label = 83;
      break L9;
     }
     $590 = ($588|0)>($root_alpha|0);
     if ($590) {
      $alpha$1 = $alpha$0;$beta$1 = $beta$0;
      break;
     } else {
      $$0 = $588;
      label = 83;
      break L9;
     }
    }
   }
  } while(0);
  $598 = (($nc$0) + 1)|0;
  $$01 = $581;$alpha$0 = $alpha$1;$attacked_piece$2 = $attacked_piece$3;$bb_attack$sroa$0$0 = $bb_attack$sroa$0$1;$bb_attack$sroa$1$0 = $bb_attack$sroa$1$1;$bb_attack$sroa$2$0 = $bb_attack$sroa$2$1;$beta$0 = $beta$1;$from$0 = $from$1;$nc$0 = $598;$value$2 = $value$3;
 }
 if ((label|0) == 82) {
  $599 = $nc$0 & 1;
  $600 = ($599|0)==(0);
  $alpha$0$beta$0 = $600 ? $alpha$0 : $beta$0;
  $$0 = $alpha$0$beta$0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 83) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _ini_trans_table() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[34184064>>2]|0;
 $1 = 48 << $0;
 $2 = (($1) + 15)|0;
 $3 = (_memory_alloc($2)|0);
 HEAP32[33555960>>2] = $3;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = 1 << $0;
 $6 = $3;
 $7 = (($6) + 15)|0;
 $8 = $7 & -16;
 $9 = $8;
 HEAP32[33555968>>2] = $9;
 $10 = (($5) + -1)|0;
 HEAP32[34180968>>2] = $10;
 $11 = 3 << $0;
 $12 = $11 >>> 10;
 $13 = $2 >>> 20;
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 _out(221116216,$vararg_buffer);
 $14 = (_clear_trans_table()|0);
 $$0 = $14;
 STACKTOP = sp;return ($$0|0);
}
function _clear_trans_table() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $elapsed_end = 0, $elapsed_start = 0, $exitcond = 0, $i$01 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $elapsed_start = sp + 16|0;
 $elapsed_end = sp + 12|0;
 $0 = (_get_elapsed($elapsed_start)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 _out(221116256,$vararg_buffer);
 HEAP32[34184056>>2] = 1;
 $2 = HEAP32[34184064>>2]|0;
 $3 = 1 << $2;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = HEAP32[33555968>>2]|0;
  $i$01 = 0;
  while(1) {
   $6 = (($5) + (($i$01*48)|0)|0);
   $7 = (($i$01) + 1)|0;
   $exitcond = ($7|0)==($3|0);
   dest=$6+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   if ($exitcond) {
    break;
   } else {
    $i$01 = $7;
   }
  }
 }
 $8 = (_get_elapsed($elapsed_end)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = HEAP32[$elapsed_end>>2]|0;
 $11 = HEAP32[$elapsed_start>>2]|0;
 $12 = (($10) - ($11))|0;
 $13 = (_str_time_symple($12)|0);
 HEAP32[$vararg_buffer1>>2] = $13;
 _out(221116296,$vararg_buffer1);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _hash_func($ptree) {
 $ptree = $ptree|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bb$sroa$0$0200 = 0, $bb$sroa$0$10120 = 0, $bb$sroa$0$11112 = 0, $bb$sroa$0$1192 = 0, $bb$sroa$0$12104 = 0, $bb$sroa$0$1396 = 0, $bb$sroa$0$1488 = 0, $bb$sroa$0$1580 = 0;
 var $bb$sroa$0$1672 = 0, $bb$sroa$0$1764 = 0, $bb$sroa$0$1856 = 0, $bb$sroa$0$1948 = 0, $bb$sroa$0$2040 = 0, $bb$sroa$0$2132 = 0, $bb$sroa$0$2184 = 0, $bb$sroa$0$2224 = 0, $bb$sroa$0$2316 = 0, $bb$sroa$0$248 = 0, $bb$sroa$0$254 = 0, $bb$sroa$0$3176 = 0, $bb$sroa$0$4168 = 0, $bb$sroa$0$5160 = 0, $bb$sroa$0$6152 = 0, $bb$sroa$0$7144 = 0, $bb$sroa$0$8136 = 0, $bb$sroa$0$9128 = 0, $bb$sroa$1$0199 = 0, $bb$sroa$1$10119 = 0;
 var $bb$sroa$1$11111 = 0, $bb$sroa$1$1191 = 0, $bb$sroa$1$12103 = 0, $bb$sroa$1$1395 = 0, $bb$sroa$1$1487 = 0, $bb$sroa$1$1579 = 0, $bb$sroa$1$1671 = 0, $bb$sroa$1$1763 = 0, $bb$sroa$1$1855 = 0, $bb$sroa$1$1947 = 0, $bb$sroa$1$2039 = 0, $bb$sroa$1$2131 = 0, $bb$sroa$1$2183 = 0, $bb$sroa$1$2223 = 0, $bb$sroa$1$2315 = 0, $bb$sroa$1$247 = 0, $bb$sroa$1$253 = 0, $bb$sroa$1$3175 = 0, $bb$sroa$1$4167 = 0, $bb$sroa$1$5159 = 0;
 var $bb$sroa$1$6151 = 0, $bb$sroa$1$7143 = 0, $bb$sroa$1$8135 = 0, $bb$sroa$1$9127 = 0, $bb$sroa$2$0198 = 0, $bb$sroa$2$10118 = 0, $bb$sroa$2$11110 = 0, $bb$sroa$2$1190 = 0, $bb$sroa$2$12102 = 0, $bb$sroa$2$1394 = 0, $bb$sroa$2$1486 = 0, $bb$sroa$2$1578 = 0, $bb$sroa$2$1670 = 0, $bb$sroa$2$1762 = 0, $bb$sroa$2$1854 = 0, $bb$sroa$2$1946 = 0, $bb$sroa$2$2038 = 0, $bb$sroa$2$2130 = 0, $bb$sroa$2$2182 = 0, $bb$sroa$2$2222 = 0;
 var $bb$sroa$2$2314 = 0, $bb$sroa$2$246 = 0, $bb$sroa$2$252 = 0, $bb$sroa$2$3174 = 0, $bb$sroa$2$4166 = 0, $bb$sroa$2$5158 = 0, $bb$sroa$2$6150 = 0, $bb$sroa$2$7142 = 0, $bb$sroa$2$8134 = 0, $bb$sroa$2$9126 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ptree) + 593|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (34166696 + ($2<<3)|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($ptree) + 594|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (34176072 + ($12<<3)|0);
 $14 = $13;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = $16 ^ $6;
 $21 = $19 ^ $9;
 $22 = (($ptree) + 356|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($ptree) + 360|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($ptree) + 364|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $25 | $27;
 $29 = $28 | $23;
 $30 = ($29|0)==(0);
 if ($30) {
  $882 = $20;$883 = $21;
 } else {
  $49 = $20;$51 = $21;$bb$sroa$0$0200 = $23;$bb$sroa$1$0199 = $25;$bb$sroa$2$0198 = $27;
  while(1) {
   $31 = (_first_one012($bb$sroa$0$0200,$bb$sroa$1$0199,$bb$sroa$2$0198)|0);
   $32 = (34156304 + (($31*12)|0)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 ^ $bb$sroa$0$0200;
   $35 = ((34156304 + (($31*12)|0)|0) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 ^ $bb$sroa$1$0199;
   $38 = ((34156304 + (($31*12)|0)|0) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $39 ^ $bb$sroa$2$0198;
   $41 = (34162160 + ($31<<3)|0);
   $42 = $41;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (($42) + 4)|0;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = $44 ^ $49;
   $50 = $47 ^ $51;
   $52 = $37 | $40;
   $53 = $52 | $34;
   $54 = ($53|0)==(0);
   if ($54) {
    $882 = $48;$883 = $50;
    break;
   } else {
    $49 = $48;$51 = $50;$bb$sroa$0$0200 = $34;$bb$sroa$1$0199 = $37;$bb$sroa$2$0198 = $40;
   }
  }
 }
 $55 = (($ptree) + 368|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($ptree) + 372|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($ptree) + 376|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $58 | $60;
 $62 = $61 | $56;
 $63 = ($62|0)==(0);
 if ($63) {
  $884 = $882;$885 = $883;
 } else {
  $82 = $882;$84 = $883;$bb$sroa$0$1192 = $56;$bb$sroa$1$1191 = $58;$bb$sroa$2$1190 = $60;
  while(1) {
   $64 = (_first_one012($bb$sroa$0$1192,$bb$sroa$1$1191,$bb$sroa$2$1190)|0);
   $65 = (34156304 + (($64*12)|0)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 ^ $bb$sroa$0$1192;
   $68 = ((34156304 + (($64*12)|0)|0) + 4|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $69 ^ $bb$sroa$1$1191;
   $71 = ((34156304 + (($64*12)|0)|0) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $72 ^ $bb$sroa$2$1190;
   $74 = (34171536 + ($64<<3)|0);
   $75 = $74;
   $76 = $75;
   $77 = HEAP32[$76>>2]|0;
   $78 = (($75) + 4)|0;
   $79 = $78;
   $80 = HEAP32[$79>>2]|0;
   $81 = $77 ^ $82;
   $83 = $80 ^ $84;
   $85 = $70 | $73;
   $86 = $85 | $67;
   $87 = ($86|0)==(0);
   if ($87) {
    $884 = $81;$885 = $83;
    break;
   } else {
    $82 = $81;$84 = $83;$bb$sroa$0$1192 = $67;$bb$sroa$1$1191 = $70;$bb$sroa$2$1190 = $73;
   }
  }
 }
 $88 = (($ptree) + 188|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (($ptree) + 192|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (($ptree) + 196|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $91 | $93;
 $95 = $94 | $89;
 $96 = ($95|0)==(0);
 if ($96) {
  $886 = $884;$887 = $885;
 } else {
  $115 = $884;$117 = $885;$bb$sroa$0$2184 = $89;$bb$sroa$1$2183 = $91;$bb$sroa$2$2182 = $93;
  while(1) {
   $97 = (_first_one012($bb$sroa$0$2184,$bb$sroa$1$2183,$bb$sroa$2$2182)|0);
   $98 = (34156304 + (($97*12)|0)|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $99 ^ $bb$sroa$0$2184;
   $101 = ((34156304 + (($97*12)|0)|0) + 4|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = $102 ^ $bb$sroa$1$2183;
   $104 = ((34156304 + (($97*12)|0)|0) + 8|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $105 ^ $bb$sroa$2$2182;
   $107 = (34162808 + ($97<<3)|0);
   $108 = $107;
   $109 = $108;
   $110 = HEAP32[$109>>2]|0;
   $111 = (($108) + 4)|0;
   $112 = $111;
   $113 = HEAP32[$112>>2]|0;
   $114 = $110 ^ $115;
   $116 = $113 ^ $117;
   $118 = $103 | $106;
   $119 = $118 | $100;
   $120 = ($119|0)==(0);
   if ($120) {
    $886 = $114;$887 = $116;
    break;
   } else {
    $115 = $114;$117 = $116;$bb$sroa$0$2184 = $100;$bb$sroa$1$2183 = $103;$bb$sroa$2$2182 = $106;
   }
  }
 }
 $121 = (($ptree) + 200|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (($ptree) + 204|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = (($ptree) + 208|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = $124 | $126;
 $128 = $127 | $122;
 $129 = ($128|0)==(0);
 if ($129) {
  $888 = $886;$889 = $887;
 } else {
  $148 = $886;$150 = $887;$bb$sroa$0$3176 = $122;$bb$sroa$1$3175 = $124;$bb$sroa$2$3174 = $126;
  while(1) {
   $130 = (_first_one012($bb$sroa$0$3176,$bb$sroa$1$3175,$bb$sroa$2$3174)|0);
   $131 = (34156304 + (($130*12)|0)|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $132 ^ $bb$sroa$0$3176;
   $134 = ((34156304 + (($130*12)|0)|0) + 4|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = $135 ^ $bb$sroa$1$3175;
   $137 = ((34156304 + (($130*12)|0)|0) + 8|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $138 ^ $bb$sroa$2$3174;
   $140 = (34172184 + ($130<<3)|0);
   $141 = $140;
   $142 = $141;
   $143 = HEAP32[$142>>2]|0;
   $144 = (($141) + 4)|0;
   $145 = $144;
   $146 = HEAP32[$145>>2]|0;
   $147 = $143 ^ $148;
   $149 = $146 ^ $150;
   $151 = $136 | $139;
   $152 = $151 | $133;
   $153 = ($152|0)==(0);
   if ($153) {
    $888 = $147;$889 = $149;
    break;
   } else {
    $148 = $147;$150 = $149;$bb$sroa$0$3176 = $133;$bb$sroa$1$3175 = $136;$bb$sroa$2$3174 = $139;
   }
  }
 }
 $154 = (($ptree) + 212|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = (($ptree) + 216|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = (($ptree) + 220|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = $157 | $159;
 $161 = $160 | $155;
 $162 = ($161|0)==(0);
 if ($162) {
  $890 = $888;$891 = $889;
 } else {
  $181 = $888;$183 = $889;$bb$sroa$0$4168 = $155;$bb$sroa$1$4167 = $157;$bb$sroa$2$4166 = $159;
  while(1) {
   $163 = (_first_one012($bb$sroa$0$4168,$bb$sroa$1$4167,$bb$sroa$2$4166)|0);
   $164 = (34156304 + (($163*12)|0)|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = $165 ^ $bb$sroa$0$4168;
   $167 = ((34156304 + (($163*12)|0)|0) + 4|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = $168 ^ $bb$sroa$1$4167;
   $170 = ((34156304 + (($163*12)|0)|0) + 8|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = $171 ^ $bb$sroa$2$4166;
   $173 = (34163456 + ($163<<3)|0);
   $174 = $173;
   $175 = $174;
   $176 = HEAP32[$175>>2]|0;
   $177 = (($174) + 4)|0;
   $178 = $177;
   $179 = HEAP32[$178>>2]|0;
   $180 = $176 ^ $181;
   $182 = $179 ^ $183;
   $184 = $169 | $172;
   $185 = $184 | $166;
   $186 = ($185|0)==(0);
   if ($186) {
    $890 = $180;$891 = $182;
    break;
   } else {
    $181 = $180;$183 = $182;$bb$sroa$0$4168 = $166;$bb$sroa$1$4167 = $169;$bb$sroa$2$4166 = $172;
   }
  }
 }
 $187 = (($ptree) + 224|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = (($ptree) + 228|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = (($ptree) + 232|0);
 $192 = HEAP32[$191>>2]|0;
 $193 = $190 | $192;
 $194 = $193 | $188;
 $195 = ($194|0)==(0);
 if ($195) {
  $892 = $890;$893 = $891;
 } else {
  $214 = $890;$216 = $891;$bb$sroa$0$5160 = $188;$bb$sroa$1$5159 = $190;$bb$sroa$2$5158 = $192;
  while(1) {
   $196 = (_first_one012($bb$sroa$0$5160,$bb$sroa$1$5159,$bb$sroa$2$5158)|0);
   $197 = (34156304 + (($196*12)|0)|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = $198 ^ $bb$sroa$0$5160;
   $200 = ((34156304 + (($196*12)|0)|0) + 4|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = $201 ^ $bb$sroa$1$5159;
   $203 = ((34156304 + (($196*12)|0)|0) + 8|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = $204 ^ $bb$sroa$2$5158;
   $206 = (34172832 + ($196<<3)|0);
   $207 = $206;
   $208 = $207;
   $209 = HEAP32[$208>>2]|0;
   $210 = (($207) + 4)|0;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $213 = $209 ^ $214;
   $215 = $212 ^ $216;
   $217 = $202 | $205;
   $218 = $217 | $199;
   $219 = ($218|0)==(0);
   if ($219) {
    $892 = $213;$893 = $215;
    break;
   } else {
    $214 = $213;$216 = $215;$bb$sroa$0$5160 = $199;$bb$sroa$1$5159 = $202;$bb$sroa$2$5158 = $205;
   }
  }
 }
 $220 = (($ptree) + 236|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = (($ptree) + 240|0);
 $223 = HEAP32[$222>>2]|0;
 $224 = (($ptree) + 244|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = $223 | $225;
 $227 = $226 | $221;
 $228 = ($227|0)==(0);
 if ($228) {
  $894 = $892;$895 = $893;
 } else {
  $247 = $892;$249 = $893;$bb$sroa$0$6152 = $221;$bb$sroa$1$6151 = $223;$bb$sroa$2$6150 = $225;
  while(1) {
   $229 = (_first_one012($bb$sroa$0$6152,$bb$sroa$1$6151,$bb$sroa$2$6150)|0);
   $230 = (34156304 + (($229*12)|0)|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = $231 ^ $bb$sroa$0$6152;
   $233 = ((34156304 + (($229*12)|0)|0) + 4|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 ^ $bb$sroa$1$6151;
   $236 = ((34156304 + (($229*12)|0)|0) + 8|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = $237 ^ $bb$sroa$2$6150;
   $239 = (34164104 + ($229<<3)|0);
   $240 = $239;
   $241 = $240;
   $242 = HEAP32[$241>>2]|0;
   $243 = (($240) + 4)|0;
   $244 = $243;
   $245 = HEAP32[$244>>2]|0;
   $246 = $242 ^ $247;
   $248 = $245 ^ $249;
   $250 = $235 | $238;
   $251 = $250 | $232;
   $252 = ($251|0)==(0);
   if ($252) {
    $894 = $246;$895 = $248;
    break;
   } else {
    $247 = $246;$249 = $248;$bb$sroa$0$6152 = $232;$bb$sroa$1$6151 = $235;$bb$sroa$2$6150 = $238;
   }
  }
 }
 $253 = (($ptree) + 248|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = (($ptree) + 252|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = (($ptree) + 256|0);
 $258 = HEAP32[$257>>2]|0;
 $259 = $256 | $258;
 $260 = $259 | $254;
 $261 = ($260|0)==(0);
 if ($261) {
  $896 = $894;$897 = $895;
 } else {
  $280 = $894;$282 = $895;$bb$sroa$0$7144 = $254;$bb$sroa$1$7143 = $256;$bb$sroa$2$7142 = $258;
  while(1) {
   $262 = (_first_one012($bb$sroa$0$7144,$bb$sroa$1$7143,$bb$sroa$2$7142)|0);
   $263 = (34156304 + (($262*12)|0)|0);
   $264 = HEAP32[$263>>2]|0;
   $265 = $264 ^ $bb$sroa$0$7144;
   $266 = ((34156304 + (($262*12)|0)|0) + 4|0);
   $267 = HEAP32[$266>>2]|0;
   $268 = $267 ^ $bb$sroa$1$7143;
   $269 = ((34156304 + (($262*12)|0)|0) + 8|0);
   $270 = HEAP32[$269>>2]|0;
   $271 = $270 ^ $bb$sroa$2$7142;
   $272 = (34173480 + ($262<<3)|0);
   $273 = $272;
   $274 = $273;
   $275 = HEAP32[$274>>2]|0;
   $276 = (($273) + 4)|0;
   $277 = $276;
   $278 = HEAP32[$277>>2]|0;
   $279 = $275 ^ $280;
   $281 = $278 ^ $282;
   $283 = $268 | $271;
   $284 = $283 | $265;
   $285 = ($284|0)==(0);
   if ($285) {
    $896 = $279;$897 = $281;
    break;
   } else {
    $280 = $279;$282 = $281;$bb$sroa$0$7144 = $265;$bb$sroa$1$7143 = $268;$bb$sroa$2$7142 = $271;
   }
  }
 }
 $286 = (($ptree) + 380|0);
 $287 = HEAP32[$286>>2]|0;
 $288 = (($ptree) + 384|0);
 $289 = HEAP32[$288>>2]|0;
 $290 = (($ptree) + 388|0);
 $291 = HEAP32[$290>>2]|0;
 $292 = $289 | $291;
 $293 = $292 | $287;
 $294 = ($293|0)==(0);
 if ($294) {
  $898 = $896;$899 = $897;
 } else {
  $313 = $896;$315 = $897;$bb$sroa$0$8136 = $287;$bb$sroa$1$8135 = $289;$bb$sroa$2$8134 = $291;
  while(1) {
   $295 = (_first_one012($bb$sroa$0$8136,$bb$sroa$1$8135,$bb$sroa$2$8134)|0);
   $296 = (34156304 + (($295*12)|0)|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = $297 ^ $bb$sroa$0$8136;
   $299 = ((34156304 + (($295*12)|0)|0) + 4|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = $300 ^ $bb$sroa$1$8135;
   $302 = ((34156304 + (($295*12)|0)|0) + 8|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = $303 ^ $bb$sroa$2$8134;
   $305 = (34164752 + ($295<<3)|0);
   $306 = $305;
   $307 = $306;
   $308 = HEAP32[$307>>2]|0;
   $309 = (($306) + 4)|0;
   $310 = $309;
   $311 = HEAP32[$310>>2]|0;
   $312 = $308 ^ $313;
   $314 = $311 ^ $315;
   $316 = $301 | $304;
   $317 = $316 | $298;
   $318 = ($317|0)==(0);
   if ($318) {
    $898 = $312;$899 = $314;
    break;
   } else {
    $313 = $312;$315 = $314;$bb$sroa$0$8136 = $298;$bb$sroa$1$8135 = $301;$bb$sroa$2$8134 = $304;
   }
  }
 }
 $319 = (($ptree) + 392|0);
 $320 = HEAP32[$319>>2]|0;
 $321 = (($ptree) + 396|0);
 $322 = HEAP32[$321>>2]|0;
 $323 = (($ptree) + 400|0);
 $324 = HEAP32[$323>>2]|0;
 $325 = $322 | $324;
 $326 = $325 | $320;
 $327 = ($326|0)==(0);
 if ($327) {
  $900 = $898;$901 = $899;
 } else {
  $346 = $898;$348 = $899;$bb$sroa$0$9128 = $320;$bb$sroa$1$9127 = $322;$bb$sroa$2$9126 = $324;
  while(1) {
   $328 = (_first_one012($bb$sroa$0$9128,$bb$sroa$1$9127,$bb$sroa$2$9126)|0);
   $329 = (34156304 + (($328*12)|0)|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = $330 ^ $bb$sroa$0$9128;
   $332 = ((34156304 + (($328*12)|0)|0) + 4|0);
   $333 = HEAP32[$332>>2]|0;
   $334 = $333 ^ $bb$sroa$1$9127;
   $335 = ((34156304 + (($328*12)|0)|0) + 8|0);
   $336 = HEAP32[$335>>2]|0;
   $337 = $336 ^ $bb$sroa$2$9126;
   $338 = (34174128 + ($328<<3)|0);
   $339 = $338;
   $340 = $339;
   $341 = HEAP32[$340>>2]|0;
   $342 = (($339) + 4)|0;
   $343 = $342;
   $344 = HEAP32[$343>>2]|0;
   $345 = $341 ^ $346;
   $347 = $344 ^ $348;
   $349 = $334 | $337;
   $350 = $349 | $331;
   $351 = ($350|0)==(0);
   if ($351) {
    $900 = $345;$901 = $347;
    break;
   } else {
    $346 = $345;$348 = $347;$bb$sroa$0$9128 = $331;$bb$sroa$1$9127 = $334;$bb$sroa$2$9126 = $337;
   }
  }
 }
 $352 = (($ptree) + 260|0);
 $353 = HEAP32[$352>>2]|0;
 $354 = (($ptree) + 264|0);
 $355 = HEAP32[$354>>2]|0;
 $356 = (($ptree) + 268|0);
 $357 = HEAP32[$356>>2]|0;
 $358 = $355 | $357;
 $359 = $358 | $353;
 $360 = ($359|0)==(0);
 if ($360) {
  $902 = $900;$903 = $901;
 } else {
  $379 = $900;$381 = $901;$bb$sroa$0$10120 = $353;$bb$sroa$1$10119 = $355;$bb$sroa$2$10118 = $357;
  while(1) {
   $361 = (_first_one012($bb$sroa$0$10120,$bb$sroa$1$10119,$bb$sroa$2$10118)|0);
   $362 = (34156304 + (($361*12)|0)|0);
   $363 = HEAP32[$362>>2]|0;
   $364 = $363 ^ $bb$sroa$0$10120;
   $365 = ((34156304 + (($361*12)|0)|0) + 4|0);
   $366 = HEAP32[$365>>2]|0;
   $367 = $366 ^ $bb$sroa$1$10119;
   $368 = ((34156304 + (($361*12)|0)|0) + 8|0);
   $369 = HEAP32[$368>>2]|0;
   $370 = $369 ^ $bb$sroa$2$10118;
   $371 = (34165400 + ($361<<3)|0);
   $372 = $371;
   $373 = $372;
   $374 = HEAP32[$373>>2]|0;
   $375 = (($372) + 4)|0;
   $376 = $375;
   $377 = HEAP32[$376>>2]|0;
   $378 = $374 ^ $379;
   $380 = $377 ^ $381;
   $382 = $367 | $370;
   $383 = $382 | $364;
   $384 = ($383|0)==(0);
   if ($384) {
    $902 = $378;$903 = $380;
    break;
   } else {
    $379 = $378;$381 = $380;$bb$sroa$0$10120 = $364;$bb$sroa$1$10119 = $367;$bb$sroa$2$10118 = $370;
   }
  }
 }
 $385 = (($ptree) + 272|0);
 $386 = HEAP32[$385>>2]|0;
 $387 = (($ptree) + 276|0);
 $388 = HEAP32[$387>>2]|0;
 $389 = (($ptree) + 280|0);
 $390 = HEAP32[$389>>2]|0;
 $391 = $388 | $390;
 $392 = $391 | $386;
 $393 = ($392|0)==(0);
 if ($393) {
  $904 = $902;$905 = $903;
 } else {
  $412 = $902;$414 = $903;$bb$sroa$0$11112 = $386;$bb$sroa$1$11111 = $388;$bb$sroa$2$11110 = $390;
  while(1) {
   $394 = (_first_one012($bb$sroa$0$11112,$bb$sroa$1$11111,$bb$sroa$2$11110)|0);
   $395 = (34156304 + (($394*12)|0)|0);
   $396 = HEAP32[$395>>2]|0;
   $397 = $396 ^ $bb$sroa$0$11112;
   $398 = ((34156304 + (($394*12)|0)|0) + 4|0);
   $399 = HEAP32[$398>>2]|0;
   $400 = $399 ^ $bb$sroa$1$11111;
   $401 = ((34156304 + (($394*12)|0)|0) + 8|0);
   $402 = HEAP32[$401>>2]|0;
   $403 = $402 ^ $bb$sroa$2$11110;
   $404 = (34174776 + ($394<<3)|0);
   $405 = $404;
   $406 = $405;
   $407 = HEAP32[$406>>2]|0;
   $408 = (($405) + 4)|0;
   $409 = $408;
   $410 = HEAP32[$409>>2]|0;
   $411 = $407 ^ $412;
   $413 = $410 ^ $414;
   $415 = $400 | $403;
   $416 = $415 | $397;
   $417 = ($416|0)==(0);
   if ($417) {
    $904 = $411;$905 = $413;
    break;
   } else {
    $412 = $411;$414 = $413;$bb$sroa$0$11112 = $397;$bb$sroa$1$11111 = $400;$bb$sroa$2$11110 = $403;
   }
  }
 }
 $418 = (($ptree) + 284|0);
 $419 = HEAP32[$418>>2]|0;
 $420 = (($ptree) + 288|0);
 $421 = HEAP32[$420>>2]|0;
 $422 = (($ptree) + 292|0);
 $423 = HEAP32[$422>>2]|0;
 $424 = $421 | $423;
 $425 = $424 | $419;
 $426 = ($425|0)==(0);
 if ($426) {
  $906 = $904;$907 = $905;
 } else {
  $445 = $904;$447 = $905;$bb$sroa$0$12104 = $419;$bb$sroa$1$12103 = $421;$bb$sroa$2$12102 = $423;
  while(1) {
   $427 = (_first_one012($bb$sroa$0$12104,$bb$sroa$1$12103,$bb$sroa$2$12102)|0);
   $428 = (34156304 + (($427*12)|0)|0);
   $429 = HEAP32[$428>>2]|0;
   $430 = $429 ^ $bb$sroa$0$12104;
   $431 = ((34156304 + (($427*12)|0)|0) + 4|0);
   $432 = HEAP32[$431>>2]|0;
   $433 = $432 ^ $bb$sroa$1$12103;
   $434 = ((34156304 + (($427*12)|0)|0) + 8|0);
   $435 = HEAP32[$434>>2]|0;
   $436 = $435 ^ $bb$sroa$2$12102;
   $437 = (34166048 + ($427<<3)|0);
   $438 = $437;
   $439 = $438;
   $440 = HEAP32[$439>>2]|0;
   $441 = (($438) + 4)|0;
   $442 = $441;
   $443 = HEAP32[$442>>2]|0;
   $444 = $440 ^ $445;
   $446 = $443 ^ $447;
   $448 = $433 | $436;
   $449 = $448 | $430;
   $450 = ($449|0)==(0);
   if ($450) {
    $906 = $444;$907 = $446;
    break;
   } else {
    $445 = $444;$447 = $446;$bb$sroa$0$12104 = $430;$bb$sroa$1$12103 = $433;$bb$sroa$2$12102 = $436;
   }
  }
 }
 $451 = (($ptree) + 296|0);
 $452 = HEAP32[$451>>2]|0;
 $453 = (($ptree) + 300|0);
 $454 = HEAP32[$453>>2]|0;
 $455 = (($ptree) + 304|0);
 $456 = HEAP32[$455>>2]|0;
 $457 = $454 | $456;
 $458 = $457 | $452;
 $459 = ($458|0)==(0);
 if ($459) {
  $908 = $906;$909 = $907;
 } else {
  $478 = $906;$480 = $907;$bb$sroa$0$1396 = $452;$bb$sroa$1$1395 = $454;$bb$sroa$2$1394 = $456;
  while(1) {
   $460 = (_first_one012($bb$sroa$0$1396,$bb$sroa$1$1395,$bb$sroa$2$1394)|0);
   $461 = (34156304 + (($460*12)|0)|0);
   $462 = HEAP32[$461>>2]|0;
   $463 = $462 ^ $bb$sroa$0$1396;
   $464 = ((34156304 + (($460*12)|0)|0) + 4|0);
   $465 = HEAP32[$464>>2]|0;
   $466 = $465 ^ $bb$sroa$1$1395;
   $467 = ((34156304 + (($460*12)|0)|0) + 8|0);
   $468 = HEAP32[$467>>2]|0;
   $469 = $468 ^ $bb$sroa$2$1394;
   $470 = (34175424 + ($460<<3)|0);
   $471 = $470;
   $472 = $471;
   $473 = HEAP32[$472>>2]|0;
   $474 = (($471) + 4)|0;
   $475 = $474;
   $476 = HEAP32[$475>>2]|0;
   $477 = $473 ^ $478;
   $479 = $476 ^ $480;
   $481 = $466 | $469;
   $482 = $481 | $463;
   $483 = ($482|0)==(0);
   if ($483) {
    $908 = $477;$909 = $479;
    break;
   } else {
    $478 = $477;$480 = $479;$bb$sroa$0$1396 = $463;$bb$sroa$1$1395 = $466;$bb$sroa$2$1394 = $469;
   }
  }
 }
 $484 = (($ptree) + 404|0);
 $485 = HEAP32[$484>>2]|0;
 $486 = (($ptree) + 408|0);
 $487 = HEAP32[$486>>2]|0;
 $488 = (($ptree) + 412|0);
 $489 = HEAP32[$488>>2]|0;
 $490 = $487 | $489;
 $491 = $490 | $485;
 $492 = ($491|0)==(0);
 if ($492) {
  $910 = $908;$911 = $909;
 } else {
  $511 = $908;$513 = $909;$bb$sroa$0$1488 = $485;$bb$sroa$1$1487 = $487;$bb$sroa$2$1486 = $489;
  while(1) {
   $493 = (_first_one012($bb$sroa$0$1488,$bb$sroa$1$1487,$bb$sroa$2$1486)|0);
   $494 = (34156304 + (($493*12)|0)|0);
   $495 = HEAP32[$494>>2]|0;
   $496 = $495 ^ $bb$sroa$0$1488;
   $497 = ((34156304 + (($493*12)|0)|0) + 4|0);
   $498 = HEAP32[$497>>2]|0;
   $499 = $498 ^ $bb$sroa$1$1487;
   $500 = ((34156304 + (($493*12)|0)|0) + 8|0);
   $501 = HEAP32[$500>>2]|0;
   $502 = $501 ^ $bb$sroa$2$1486;
   $503 = (34167344 + ($493<<3)|0);
   $504 = $503;
   $505 = $504;
   $506 = HEAP32[$505>>2]|0;
   $507 = (($504) + 4)|0;
   $508 = $507;
   $509 = HEAP32[$508>>2]|0;
   $510 = $506 ^ $511;
   $512 = $509 ^ $513;
   $514 = $499 | $502;
   $515 = $514 | $496;
   $516 = ($515|0)==(0);
   if ($516) {
    $910 = $510;$911 = $512;
    break;
   } else {
    $511 = $510;$513 = $512;$bb$sroa$0$1488 = $496;$bb$sroa$1$1487 = $499;$bb$sroa$2$1486 = $502;
   }
  }
 }
 $517 = (($ptree) + 416|0);
 $518 = HEAP32[$517>>2]|0;
 $519 = (($ptree) + 420|0);
 $520 = HEAP32[$519>>2]|0;
 $521 = (($ptree) + 424|0);
 $522 = HEAP32[$521>>2]|0;
 $523 = $520 | $522;
 $524 = $523 | $518;
 $525 = ($524|0)==(0);
 if ($525) {
  $912 = $910;$913 = $911;
 } else {
  $544 = $910;$546 = $911;$bb$sroa$0$1580 = $518;$bb$sroa$1$1579 = $520;$bb$sroa$2$1578 = $522;
  while(1) {
   $526 = (_first_one012($bb$sroa$0$1580,$bb$sroa$1$1579,$bb$sroa$2$1578)|0);
   $527 = (34156304 + (($526*12)|0)|0);
   $528 = HEAP32[$527>>2]|0;
   $529 = $528 ^ $bb$sroa$0$1580;
   $530 = ((34156304 + (($526*12)|0)|0) + 4|0);
   $531 = HEAP32[$530>>2]|0;
   $532 = $531 ^ $bb$sroa$1$1579;
   $533 = ((34156304 + (($526*12)|0)|0) + 8|0);
   $534 = HEAP32[$533>>2]|0;
   $535 = $534 ^ $bb$sroa$2$1578;
   $536 = (34176720 + ($526<<3)|0);
   $537 = $536;
   $538 = $537;
   $539 = HEAP32[$538>>2]|0;
   $540 = (($537) + 4)|0;
   $541 = $540;
   $542 = HEAP32[$541>>2]|0;
   $543 = $539 ^ $544;
   $545 = $542 ^ $546;
   $547 = $532 | $535;
   $548 = $547 | $529;
   $549 = ($548|0)==(0);
   if ($549) {
    $912 = $543;$913 = $545;
    break;
   } else {
    $544 = $543;$546 = $545;$bb$sroa$0$1580 = $529;$bb$sroa$1$1579 = $532;$bb$sroa$2$1578 = $535;
   }
  }
 }
 $550 = (($ptree) + 428|0);
 $551 = HEAP32[$550>>2]|0;
 $552 = (($ptree) + 432|0);
 $553 = HEAP32[$552>>2]|0;
 $554 = (($ptree) + 436|0);
 $555 = HEAP32[$554>>2]|0;
 $556 = $553 | $555;
 $557 = $556 | $551;
 $558 = ($557|0)==(0);
 if ($558) {
  $914 = $912;$915 = $913;
 } else {
  $577 = $912;$579 = $913;$bb$sroa$0$1672 = $551;$bb$sroa$1$1671 = $553;$bb$sroa$2$1670 = $555;
  while(1) {
   $559 = (_first_one012($bb$sroa$0$1672,$bb$sroa$1$1671,$bb$sroa$2$1670)|0);
   $560 = (34156304 + (($559*12)|0)|0);
   $561 = HEAP32[$560>>2]|0;
   $562 = $561 ^ $bb$sroa$0$1672;
   $563 = ((34156304 + (($559*12)|0)|0) + 4|0);
   $564 = HEAP32[$563>>2]|0;
   $565 = $564 ^ $bb$sroa$1$1671;
   $566 = ((34156304 + (($559*12)|0)|0) + 8|0);
   $567 = HEAP32[$566>>2]|0;
   $568 = $567 ^ $bb$sroa$2$1670;
   $569 = (34167992 + ($559<<3)|0);
   $570 = $569;
   $571 = $570;
   $572 = HEAP32[$571>>2]|0;
   $573 = (($570) + 4)|0;
   $574 = $573;
   $575 = HEAP32[$574>>2]|0;
   $576 = $572 ^ $577;
   $578 = $575 ^ $579;
   $580 = $565 | $568;
   $581 = $580 | $562;
   $582 = ($581|0)==(0);
   if ($582) {
    $914 = $576;$915 = $578;
    break;
   } else {
    $577 = $576;$579 = $578;$bb$sroa$0$1672 = $562;$bb$sroa$1$1671 = $565;$bb$sroa$2$1670 = $568;
   }
  }
 }
 $583 = (($ptree) + 440|0);
 $584 = HEAP32[$583>>2]|0;
 $585 = (($ptree) + 444|0);
 $586 = HEAP32[$585>>2]|0;
 $587 = (($ptree) + 448|0);
 $588 = HEAP32[$587>>2]|0;
 $589 = $586 | $588;
 $590 = $589 | $584;
 $591 = ($590|0)==(0);
 if ($591) {
  $916 = $914;$917 = $915;
 } else {
  $610 = $914;$612 = $915;$bb$sroa$0$1764 = $584;$bb$sroa$1$1763 = $586;$bb$sroa$2$1762 = $588;
  while(1) {
   $592 = (_first_one012($bb$sroa$0$1764,$bb$sroa$1$1763,$bb$sroa$2$1762)|0);
   $593 = (34156304 + (($592*12)|0)|0);
   $594 = HEAP32[$593>>2]|0;
   $595 = $594 ^ $bb$sroa$0$1764;
   $596 = ((34156304 + (($592*12)|0)|0) + 4|0);
   $597 = HEAP32[$596>>2]|0;
   $598 = $597 ^ $bb$sroa$1$1763;
   $599 = ((34156304 + (($592*12)|0)|0) + 8|0);
   $600 = HEAP32[$599>>2]|0;
   $601 = $600 ^ $bb$sroa$2$1762;
   $602 = (34177368 + ($592<<3)|0);
   $603 = $602;
   $604 = $603;
   $605 = HEAP32[$604>>2]|0;
   $606 = (($603) + 4)|0;
   $607 = $606;
   $608 = HEAP32[$607>>2]|0;
   $609 = $605 ^ $610;
   $611 = $608 ^ $612;
   $613 = $598 | $601;
   $614 = $613 | $595;
   $615 = ($614|0)==(0);
   if ($615) {
    $916 = $609;$917 = $611;
    break;
   } else {
    $610 = $609;$612 = $611;$bb$sroa$0$1764 = $595;$bb$sroa$1$1763 = $598;$bb$sroa$2$1762 = $601;
   }
  }
 }
 $616 = (($ptree) + 452|0);
 $617 = HEAP32[$616>>2]|0;
 $618 = (($ptree) + 456|0);
 $619 = HEAP32[$618>>2]|0;
 $620 = (($ptree) + 460|0);
 $621 = HEAP32[$620>>2]|0;
 $622 = $619 | $621;
 $623 = $622 | $617;
 $624 = ($623|0)==(0);
 if ($624) {
  $918 = $916;$919 = $917;
 } else {
  $643 = $916;$645 = $917;$bb$sroa$0$1856 = $617;$bb$sroa$1$1855 = $619;$bb$sroa$2$1854 = $621;
  while(1) {
   $625 = (_first_one012($bb$sroa$0$1856,$bb$sroa$1$1855,$bb$sroa$2$1854)|0);
   $626 = (34156304 + (($625*12)|0)|0);
   $627 = HEAP32[$626>>2]|0;
   $628 = $627 ^ $bb$sroa$0$1856;
   $629 = ((34156304 + (($625*12)|0)|0) + 4|0);
   $630 = HEAP32[$629>>2]|0;
   $631 = $630 ^ $bb$sroa$1$1855;
   $632 = ((34156304 + (($625*12)|0)|0) + 8|0);
   $633 = HEAP32[$632>>2]|0;
   $634 = $633 ^ $bb$sroa$2$1854;
   $635 = (34168640 + ($625<<3)|0);
   $636 = $635;
   $637 = $636;
   $638 = HEAP32[$637>>2]|0;
   $639 = (($636) + 4)|0;
   $640 = $639;
   $641 = HEAP32[$640>>2]|0;
   $642 = $638 ^ $643;
   $644 = $641 ^ $645;
   $646 = $631 | $634;
   $647 = $646 | $628;
   $648 = ($647|0)==(0);
   if ($648) {
    $918 = $642;$919 = $644;
    break;
   } else {
    $643 = $642;$645 = $644;$bb$sroa$0$1856 = $628;$bb$sroa$1$1855 = $631;$bb$sroa$2$1854 = $634;
   }
  }
 }
 $649 = (($ptree) + 464|0);
 $650 = HEAP32[$649>>2]|0;
 $651 = (($ptree) + 468|0);
 $652 = HEAP32[$651>>2]|0;
 $653 = (($ptree) + 472|0);
 $654 = HEAP32[$653>>2]|0;
 $655 = $652 | $654;
 $656 = $655 | $650;
 $657 = ($656|0)==(0);
 if ($657) {
  $920 = $918;$921 = $919;
 } else {
  $676 = $918;$678 = $919;$bb$sroa$0$1948 = $650;$bb$sroa$1$1947 = $652;$bb$sroa$2$1946 = $654;
  while(1) {
   $658 = (_first_one012($bb$sroa$0$1948,$bb$sroa$1$1947,$bb$sroa$2$1946)|0);
   $659 = (34156304 + (($658*12)|0)|0);
   $660 = HEAP32[$659>>2]|0;
   $661 = $660 ^ $bb$sroa$0$1948;
   $662 = ((34156304 + (($658*12)|0)|0) + 4|0);
   $663 = HEAP32[$662>>2]|0;
   $664 = $663 ^ $bb$sroa$1$1947;
   $665 = ((34156304 + (($658*12)|0)|0) + 8|0);
   $666 = HEAP32[$665>>2]|0;
   $667 = $666 ^ $bb$sroa$2$1946;
   $668 = (34178016 + ($658<<3)|0);
   $669 = $668;
   $670 = $669;
   $671 = HEAP32[$670>>2]|0;
   $672 = (($669) + 4)|0;
   $673 = $672;
   $674 = HEAP32[$673>>2]|0;
   $675 = $671 ^ $676;
   $677 = $674 ^ $678;
   $679 = $664 | $667;
   $680 = $679 | $661;
   $681 = ($680|0)==(0);
   if ($681) {
    $920 = $675;$921 = $677;
    break;
   } else {
    $676 = $675;$678 = $677;$bb$sroa$0$1948 = $661;$bb$sroa$1$1947 = $664;$bb$sroa$2$1946 = $667;
   }
  }
 }
 $682 = (($ptree) + 476|0);
 $683 = HEAP32[$682>>2]|0;
 $684 = (($ptree) + 480|0);
 $685 = HEAP32[$684>>2]|0;
 $686 = (($ptree) + 484|0);
 $687 = HEAP32[$686>>2]|0;
 $688 = $685 | $687;
 $689 = $688 | $683;
 $690 = ($689|0)==(0);
 if ($690) {
  $922 = $920;$923 = $921;
 } else {
  $709 = $920;$711 = $921;$bb$sroa$0$2040 = $683;$bb$sroa$1$2039 = $685;$bb$sroa$2$2038 = $687;
  while(1) {
   $691 = (_first_one012($bb$sroa$0$2040,$bb$sroa$1$2039,$bb$sroa$2$2038)|0);
   $692 = (34156304 + (($691*12)|0)|0);
   $693 = HEAP32[$692>>2]|0;
   $694 = $693 ^ $bb$sroa$0$2040;
   $695 = ((34156304 + (($691*12)|0)|0) + 4|0);
   $696 = HEAP32[$695>>2]|0;
   $697 = $696 ^ $bb$sroa$1$2039;
   $698 = ((34156304 + (($691*12)|0)|0) + 8|0);
   $699 = HEAP32[$698>>2]|0;
   $700 = $699 ^ $bb$sroa$2$2038;
   $701 = (34169288 + ($691<<3)|0);
   $702 = $701;
   $703 = $702;
   $704 = HEAP32[$703>>2]|0;
   $705 = (($702) + 4)|0;
   $706 = $705;
   $707 = HEAP32[$706>>2]|0;
   $708 = $704 ^ $709;
   $710 = $707 ^ $711;
   $712 = $697 | $700;
   $713 = $712 | $694;
   $714 = ($713|0)==(0);
   if ($714) {
    $922 = $708;$923 = $710;
    break;
   } else {
    $709 = $708;$711 = $710;$bb$sroa$0$2040 = $694;$bb$sroa$1$2039 = $697;$bb$sroa$2$2038 = $700;
   }
  }
 }
 $715 = (($ptree) + 488|0);
 $716 = HEAP32[$715>>2]|0;
 $717 = (($ptree) + 492|0);
 $718 = HEAP32[$717>>2]|0;
 $719 = (($ptree) + 496|0);
 $720 = HEAP32[$719>>2]|0;
 $721 = $718 | $720;
 $722 = $721 | $716;
 $723 = ($722|0)==(0);
 if ($723) {
  $924 = $922;$925 = $923;
 } else {
  $742 = $922;$744 = $923;$bb$sroa$0$2132 = $716;$bb$sroa$1$2131 = $718;$bb$sroa$2$2130 = $720;
  while(1) {
   $724 = (_first_one012($bb$sroa$0$2132,$bb$sroa$1$2131,$bb$sroa$2$2130)|0);
   $725 = (34156304 + (($724*12)|0)|0);
   $726 = HEAP32[$725>>2]|0;
   $727 = $726 ^ $bb$sroa$0$2132;
   $728 = ((34156304 + (($724*12)|0)|0) + 4|0);
   $729 = HEAP32[$728>>2]|0;
   $730 = $729 ^ $bb$sroa$1$2131;
   $731 = ((34156304 + (($724*12)|0)|0) + 8|0);
   $732 = HEAP32[$731>>2]|0;
   $733 = $732 ^ $bb$sroa$2$2130;
   $734 = (34178664 + ($724<<3)|0);
   $735 = $734;
   $736 = $735;
   $737 = HEAP32[$736>>2]|0;
   $738 = (($735) + 4)|0;
   $739 = $738;
   $740 = HEAP32[$739>>2]|0;
   $741 = $737 ^ $742;
   $743 = $740 ^ $744;
   $745 = $730 | $733;
   $746 = $745 | $727;
   $747 = ($746|0)==(0);
   if ($747) {
    $924 = $741;$925 = $743;
    break;
   } else {
    $742 = $741;$744 = $743;$bb$sroa$0$2132 = $727;$bb$sroa$1$2131 = $730;$bb$sroa$2$2130 = $733;
   }
  }
 }
 $748 = (($ptree) + 308|0);
 $749 = HEAP32[$748>>2]|0;
 $750 = (($ptree) + 312|0);
 $751 = HEAP32[$750>>2]|0;
 $752 = (($ptree) + 316|0);
 $753 = HEAP32[$752>>2]|0;
 $754 = $751 | $753;
 $755 = $754 | $749;
 $756 = ($755|0)==(0);
 if ($756) {
  $926 = $924;$927 = $925;
 } else {
  $775 = $924;$777 = $925;$bb$sroa$0$2224 = $749;$bb$sroa$1$2223 = $751;$bb$sroa$2$2222 = $753;
  while(1) {
   $757 = (_first_one012($bb$sroa$0$2224,$bb$sroa$1$2223,$bb$sroa$2$2222)|0);
   $758 = (34156304 + (($757*12)|0)|0);
   $759 = HEAP32[$758>>2]|0;
   $760 = $759 ^ $bb$sroa$0$2224;
   $761 = ((34156304 + (($757*12)|0)|0) + 4|0);
   $762 = HEAP32[$761>>2]|0;
   $763 = $762 ^ $bb$sroa$1$2223;
   $764 = ((34156304 + (($757*12)|0)|0) + 8|0);
   $765 = HEAP32[$764>>2]|0;
   $766 = $765 ^ $bb$sroa$2$2222;
   $767 = (34169936 + ($757<<3)|0);
   $768 = $767;
   $769 = $768;
   $770 = HEAP32[$769>>2]|0;
   $771 = (($768) + 4)|0;
   $772 = $771;
   $773 = HEAP32[$772>>2]|0;
   $774 = $770 ^ $775;
   $776 = $773 ^ $777;
   $778 = $763 | $766;
   $779 = $778 | $760;
   $780 = ($779|0)==(0);
   if ($780) {
    $926 = $774;$927 = $776;
    break;
   } else {
    $775 = $774;$777 = $776;$bb$sroa$0$2224 = $760;$bb$sroa$1$2223 = $763;$bb$sroa$2$2222 = $766;
   }
  }
 }
 $781 = (($ptree) + 320|0);
 $782 = HEAP32[$781>>2]|0;
 $783 = (($ptree) + 324|0);
 $784 = HEAP32[$783>>2]|0;
 $785 = (($ptree) + 328|0);
 $786 = HEAP32[$785>>2]|0;
 $787 = $784 | $786;
 $788 = $787 | $782;
 $789 = ($788|0)==(0);
 if ($789) {
  $928 = $926;$929 = $927;
 } else {
  $808 = $926;$810 = $927;$bb$sroa$0$2316 = $782;$bb$sroa$1$2315 = $784;$bb$sroa$2$2314 = $786;
  while(1) {
   $790 = (_first_one012($bb$sroa$0$2316,$bb$sroa$1$2315,$bb$sroa$2$2314)|0);
   $791 = (34156304 + (($790*12)|0)|0);
   $792 = HEAP32[$791>>2]|0;
   $793 = $792 ^ $bb$sroa$0$2316;
   $794 = ((34156304 + (($790*12)|0)|0) + 4|0);
   $795 = HEAP32[$794>>2]|0;
   $796 = $795 ^ $bb$sroa$1$2315;
   $797 = ((34156304 + (($790*12)|0)|0) + 8|0);
   $798 = HEAP32[$797>>2]|0;
   $799 = $798 ^ $bb$sroa$2$2314;
   $800 = (34179312 + ($790<<3)|0);
   $801 = $800;
   $802 = $801;
   $803 = HEAP32[$802>>2]|0;
   $804 = (($801) + 4)|0;
   $805 = $804;
   $806 = HEAP32[$805>>2]|0;
   $807 = $803 ^ $808;
   $809 = $806 ^ $810;
   $811 = $796 | $799;
   $812 = $811 | $793;
   $813 = ($812|0)==(0);
   if ($813) {
    $928 = $807;$929 = $809;
    break;
   } else {
    $808 = $807;$810 = $809;$bb$sroa$0$2316 = $793;$bb$sroa$1$2315 = $796;$bb$sroa$2$2314 = $799;
   }
  }
 }
 $814 = (($ptree) + 332|0);
 $815 = HEAP32[$814>>2]|0;
 $816 = (($ptree) + 336|0);
 $817 = HEAP32[$816>>2]|0;
 $818 = (($ptree) + 340|0);
 $819 = HEAP32[$818>>2]|0;
 $820 = $817 | $819;
 $821 = $820 | $815;
 $822 = ($821|0)==(0);
 if ($822) {
  $930 = $928;$931 = $929;
 } else {
  $841 = $928;$843 = $929;$bb$sroa$0$248 = $815;$bb$sroa$1$247 = $817;$bb$sroa$2$246 = $819;
  while(1) {
   $823 = (_first_one012($bb$sroa$0$248,$bb$sroa$1$247,$bb$sroa$2$246)|0);
   $824 = (34156304 + (($823*12)|0)|0);
   $825 = HEAP32[$824>>2]|0;
   $826 = $825 ^ $bb$sroa$0$248;
   $827 = ((34156304 + (($823*12)|0)|0) + 4|0);
   $828 = HEAP32[$827>>2]|0;
   $829 = $828 ^ $bb$sroa$1$247;
   $830 = ((34156304 + (($823*12)|0)|0) + 8|0);
   $831 = HEAP32[$830>>2]|0;
   $832 = $831 ^ $bb$sroa$2$246;
   $833 = (34170584 + ($823<<3)|0);
   $834 = $833;
   $835 = $834;
   $836 = HEAP32[$835>>2]|0;
   $837 = (($834) + 4)|0;
   $838 = $837;
   $839 = HEAP32[$838>>2]|0;
   $840 = $836 ^ $841;
   $842 = $839 ^ $843;
   $844 = $829 | $832;
   $845 = $844 | $826;
   $846 = ($845|0)==(0);
   if ($846) {
    $930 = $840;$931 = $842;
    break;
   } else {
    $841 = $840;$843 = $842;$bb$sroa$0$248 = $826;$bb$sroa$1$247 = $829;$bb$sroa$2$246 = $832;
   }
  }
 }
 $847 = (($ptree) + 344|0);
 $848 = HEAP32[$847>>2]|0;
 $849 = (($ptree) + 348|0);
 $850 = HEAP32[$849>>2]|0;
 $851 = (($ptree) + 352|0);
 $852 = HEAP32[$851>>2]|0;
 $853 = $850 | $852;
 $854 = $853 | $848;
 $855 = ($854|0)==(0);
 if ($855) {
  $880 = $931;$881 = $930;
  tempRet0 = $880;
  STACKTOP = sp;return ($881|0);
 } else {
  $874 = $930;$876 = $931;$bb$sroa$0$254 = $848;$bb$sroa$1$253 = $850;$bb$sroa$2$252 = $852;
 }
 while(1) {
  $856 = (_first_one012($bb$sroa$0$254,$bb$sroa$1$253,$bb$sroa$2$252)|0);
  $857 = (34156304 + (($856*12)|0)|0);
  $858 = HEAP32[$857>>2]|0;
  $859 = $858 ^ $bb$sroa$0$254;
  $860 = ((34156304 + (($856*12)|0)|0) + 4|0);
  $861 = HEAP32[$860>>2]|0;
  $862 = $861 ^ $bb$sroa$1$253;
  $863 = ((34156304 + (($856*12)|0)|0) + 8|0);
  $864 = HEAP32[$863>>2]|0;
  $865 = $864 ^ $bb$sroa$2$252;
  $866 = (34179960 + ($856<<3)|0);
  $867 = $866;
  $868 = $867;
  $869 = HEAP32[$868>>2]|0;
  $870 = (($867) + 4)|0;
  $871 = $870;
  $872 = HEAP32[$871>>2]|0;
  $873 = $869 ^ $874;
  $875 = $872 ^ $876;
  $877 = $862 | $865;
  $878 = $877 | $859;
  $879 = ($878|0)==(0);
  if ($879) {
   $880 = $875;$881 = $873;
   break;
  } else {
   $874 = $873;$876 = $875;$bb$sroa$0$254 = $859;$bb$sroa$1$253 = $862;$bb$sroa$2$252 = $865;
  }
 }
 tempRet0 = $880;
 STACKTOP = sp;return ($881|0);
}
function _hash_store($ptree,$ply,$depth,$turn,$value_type,$value,$move,$state_node) {
 $ptree = $ptree|0;
 $ply = $ply|0;
 $depth = $depth|0;
 $turn = $turn|0;
 $value_type = $value_type|0;
 $value = $value|0;
 $move = $move|0;
 $state_node = $state_node|0;
 var $$01 = 0, $$depth = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $ispos = 0;
 var $neg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($depth|0)<(0);
 $$depth = $0 ? 0 : $depth;
 $ispos = ($value|0)>(-1);
 $neg = (0 - ($value))|0;
 $1 = $ispos ? $value : $neg;
 $2 = ($1|0)>(30000);
 do {
  if ($2) {
   $3 = ($1|0)>(32598);
   if ($3) {
    STACKTOP = sp;return;
   }
   $4 = ($value|0)>(0);
   $5 = (($ply) + -1)|0;
   if ($4) {
    $6 = (($5) + ($value))|0;
    $$01 = $6;
    break;
   } else {
    $7 = (($value) - ($5))|0;
    $$01 = $7;
    break;
   }
  } else {
   $$01 = $value;
  }
 } while(0);
 $8 = $ptree;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = $10 & -128;
 $15 = $turn << 6;
 $16 = $state_node & 32;
 $17 = $value_type << 3;
 $18 = HEAP32[34184056>>2]|0;
 $19 = $17 | $15;
 $20 = $19 | $16;
 $21 = $20 | $18;
 $22 = $21 | $14;
 $23 = $$depth << 16;
 $24 = (($$01) + 32768)|0;
 $25 = $24 | $23;
 $26 = (_bitshift64Shl(($25|0),0,40)|0);
 $27 = tempRet0;
 $28 = $move & 524287;
 $29 = (_bitshift64Shl(($28|0),0,21)|0);
 $30 = tempRet0;
 $31 = $26 | $29;
 $32 = $27 | $30;
 $33 = (($ptree) + 500|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $31 | $34;
 $36 = HEAP32[34180968>>2]|0;
 $37 = $36 & $10;
 $38 = HEAP32[33555968>>2]|0;
 $39 = ((($38) + (($37*48)|0)|0) + 8|0);
 $40 = $39;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + 4)|0;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = $42 & 7;
 $47 = ($46|0)==($18|0);
 $48 = (($38) + (($37*48)|0)|0);
 if ($47) {
  $49 = $48;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4)|0;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = (_bitshift64Lshr(($51|0),($54|0),56)|0);
  $56 = tempRet0;
  $57 = ($55|0)>($$depth|0);
  if ($57) {
   $66 = $10 >>> 31;
   $67 = (((($38) + (($37*48)|0)|0) + ($66<<4)|0) + 16|0);
   $68 = $67;
   $69 = $68;
   HEAP32[$69>>2] = $35;
   $70 = (($68) + 4)|0;
   $71 = $70;
   HEAP32[$71>>2] = $32;
   $72 = (((($38) + (($37*48)|0)|0) + ($66<<4)|0) + 24|0);
   $73 = $72;
   $74 = $73;
   HEAP32[$74>>2] = $22;
   $75 = (($73) + 4)|0;
   $76 = $75;
   HEAP32[$76>>2] = $13;
   STACKTOP = sp;return;
  }
 }
 $58 = $48;
 $59 = $58;
 HEAP32[$59>>2] = $35;
 $60 = (($58) + 4)|0;
 $61 = $60;
 HEAP32[$61>>2] = $32;
 $62 = $39;
 $63 = $62;
 HEAP32[$63>>2] = $22;
 $64 = (($62) + 4)|0;
 $65 = $64;
 HEAP32[$65>>2] = $13;
 STACKTOP = sp;return;
}
function _hash_store_pv($ptree,$move,$turn) {
 $ptree = $ptree|0;
 $move = $move|0;
 $turn = $turn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $ptree;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $2 & -128;
 $7 = $turn << 6;
 $8 = $6 | $7;
 $9 = HEAP32[34180968>>2]|0;
 $10 = $2 & $9;
 $11 = HEAP32[33555968>>2]|0;
 $12 = (($11) + (($10*48)|0)|0);
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($11) + (($10*48)|0)|0) + 8|0);
 $20 = $19;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = $15 & 2097151;
 $27 = (($ptree) + 500|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($26|0)==($28|0);
 if ($29) {
  $30 = $22 & -64;
  $31 = ($30|0)==($8|0);
  $32 = ($25|0)==($5|0);
  $33 = $31 & $32;
  if ($33) {
   $34 = (_bitshift64Lshr(($15|0),($18|0),21)|0);
   $35 = tempRet0;
   $36 = $34 & 524287;
   $37 = $move & 524287;
   $38 = ($36|0)==($37|0);
   if ($38) {
    STACKTOP = sp;return;
   }
   $39 = $15 & 2097151;
   $40 = $18 & -256;
   $41 = (_bitshift64Shl(($37|0),0,21)|0);
   $42 = tempRet0;
   $43 = $39 | $41;
   $44 = $40 | $42;
   $45 = $22 & -25;
   $46 = $12;
   $47 = $46;
   HEAP32[$47>>2] = $43;
   $48 = (($46) + 4)|0;
   $49 = $48;
   HEAP32[$49>>2] = $44;
   $50 = $19;
   $51 = $50;
   HEAP32[$51>>2] = $45;
   $52 = (($50) + 4)|0;
   $53 = $52;
   HEAP32[$53>>2] = $25;
   STACKTOP = sp;return;
  }
 }
 $54 = $2 >>> 31;
 $55 = (((($11) + (($10*48)|0)|0) + ($54<<4)|0) + 16|0);
 $56 = $55;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = (($56) + 4)|0;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (((($11) + (($10*48)|0)|0) + ($54<<4)|0) + 24|0);
 $63 = $62;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 $66 = (($63) + 4)|0;
 $67 = $66;
 $68 = HEAP32[$67>>2]|0;
 $69 = $58 & 2097151;
 $70 = ($69|0)==($28|0);
 if ($70) {
  $71 = $65 & -64;
  $72 = ($71|0)==($8|0);
  $73 = ($68|0)==($5|0);
  $74 = $72 & $73;
  if ($74) {
   $75 = (_bitshift64Lshr(($58|0),($61|0),21)|0);
   $76 = tempRet0;
   $77 = $75 & 524287;
   $78 = $move & 524287;
   $79 = ($77|0)==($78|0);
   if ($79) {
    STACKTOP = sp;return;
   }
   $80 = $58 & 2097151;
   $81 = $61 & -256;
   $82 = (_bitshift64Shl(($78|0),0,21)|0);
   $83 = tempRet0;
   $84 = $80 | $82;
   $85 = $81 | $83;
   $86 = $65 & -25;
   $87 = $55;
   $88 = $87;
   HEAP32[$88>>2] = $84;
   $89 = (($87) + 4)|0;
   $90 = $89;
   HEAP32[$90>>2] = $85;
   $91 = $62;
   $92 = $91;
   HEAP32[$92>>2] = $86;
   $93 = (($91) + 4)|0;
   $94 = $93;
   HEAP32[$94>>2] = $68;
   STACKTOP = sp;return;
  }
 }
 $95 = $move & 524287;
 $96 = (_bitshift64Shl(($95|0),0,21)|0);
 $97 = tempRet0;
 $98 = $96 | $28;
 $99 = $97 | 8388608;
 $100 = HEAP32[34184056>>2]|0;
 $101 = ($100|0)<(0);
 $102 = $101 << 31 >> 31;
 $103 = $100 | $8;
 $104 = $102 | $5;
 $105 = $12;
 $106 = $105;
 HEAP32[$106>>2] = $98;
 $107 = (($105) + 4)|0;
 $108 = $107;
 HEAP32[$108>>2] = $99;
 $109 = $19;
 $110 = $109;
 HEAP32[$110>>2] = $103;
 $111 = (($109) + 4)|0;
 $112 = $111;
 HEAP32[$112>>2] = $104;
 STACKTOP = sp;return;
}
function _hash_probe($ptree,$ply,$depth_current,$turn_current,$alpha,$beta,$pstate_node) {
 $ptree = $ptree|0;
 $ply = $ply|0;
 $depth_current = $depth_current|0;
 $turn_current = $turn_current|0;
 $alpha = $alpha|0;
 $beta = $beta|0;
 $pstate_node = $pstate_node|0;
 var $$ = 0, $$0 = 0, $$10 = 0, $$11 = 0, $$16 = 0, $$19 = 0, $$20 = 0, $$27 = 0, $$67 = 0, $$68 = 0, $$69 = 0, $$70 = 0, $$9 = 0, $$depth_current = 0, $$in = 0, $$old = 0, $$old62 = 0, $$sink = 0, $$sink1 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $is_superior$0$i = 0, $is_superior$0$i31 = 0, $ispos = 0, $ispos3 = 0, $ispos5 = 0, $ispos7 = 0, $move_hash$0 = 0, $move_hash$0$ = 0, $move_hash$0$53 = 0, $move_hash$1 = 0, $move_supe$1 = 0, $move_supe$2 = 0, $move_supe$260 = 0, $move_supe$3 = 0, $move_supe$4 = 0, $neg = 0, $neg4 = 0, $neg6 = 0, $neg8 = 0, $or$cond = 0;
 var $or$cond12 = 0, $or$cond13 = 0, $or$cond14 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond18 = 0, $or$cond21 = 0, $or$cond22 = 0, $or$cond23 = 0, $or$cond24 = 0, $or$cond25 = 0, $or$cond26 = 0, $or$cond28 = 0, $or$cond29 = 0, $or$cond30 = 0, $or$cond61 = 0, $or$cond63 = 0, $or$cond87 = 0, $or$cond89 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($ptree) + 75412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$0>>2] = $2;
 $3 = ($depth_current|0)<(0);
 $$depth_current = $3 ? 0 : $depth_current;
 $4 = ($$depth_current|0)<(52);
 if ($4) {
  $5 = (($$depth_current) + -24)|0;
  $9 = $5;
 } else {
  $6 = ($$depth_current|0)<(61);
  $7 = (($$depth_current) + -32)|0;
  $$9 = $6 ? 28 : $7;
  $9 = $$9;
 }
 $8 = ($9|0)<(8);
 $$ = $8 ? 0 : $9;
 $10 = $ptree;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $12 & -128;
 $17 = HEAP32[34180968>>2]|0;
 $18 = $12 & $17;
 $19 = HEAP32[33555968>>2]|0;
 $20 = (($19) + (($18*48)|0)|0);
 $21 = $20;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($19) + (($18*48)|0)|0) + 8|0);
 $28 = $27;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = $30 & -128;
 $35 = ($34|0)==($16|0);
 $36 = ($33|0)==($15|0);
 $37 = $35 & $36;
 L5: do {
  if ($37) {
   $38 = (($ptree) + 75408|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + 1)|0;
   HEAP32[$38>>2] = $40;
   $41 = (_bitshift64Lshr(($23|0),($26|0),56)|0);
   $42 = tempRet0;
   $43 = (_bitshift64Lshr(($23|0),($26|0),40)|0);
   $44 = tempRet0;
   $45 = $43 & 65535;
   $46 = (($45) + -32768)|0;
   $47 = (_bitshift64Lshr(($23|0),($26|0),21)|0);
   $48 = tempRet0;
   $49 = $47 & 524287;
   $50 = $23 & 2097151;
   $51 = $30 & 32;
   $52 = $30 >>> 6;
   $53 = $52 & 1;
   $54 = $30 >>> 3;
   $55 = $54 & 3;
   $ispos5 = ($46|0)>(-1);
   $neg6 = (32768 - ($45))|0;
   $56 = $ispos5 ? $46 : $neg6;
   $57 = ($56|0)>(30000);
   do {
    if ($57) {
     $58 = ($46|0)>(0);
     $59 = (($ply) + -1)|0;
     if ($58) {
      $60 = (($46) - ($59))|0;
      $83 = $60;
      break;
     } else {
      $61 = (($46) + ($59))|0;
      $83 = $61;
      break;
     }
    } else {
     $83 = $46;
    }
   } while(0);
   $62 = ($$depth_current|0)>(23);
   if ($62) {
    $63 = ($$depth_current|0)<(36);
    $64 = (($$depth_current) + -24)|0;
    $$10 = $63 ? 12 : $64;
    $65 = ($41|0)<($$10|0);
    $66 = ($49|0)==(0);
    $or$cond61 = $65 | $66;
    if ($or$cond61) {
     $move_hash$0 = 0;
    } else {
     label = 12;
    }
   } else {
    $$old = ($49|0)==(0);
    if ($$old) {
     $move_hash$0 = 0;
    } else {
     label = 12;
    }
   }
   if ((label|0) == 12) {
    $67 = ($turn_current|0)!=(0);
    $68 = $47 & 127;
    $69 = ((($ptree) + ($68)|0) + 512|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $70 << 24 >> 24;
    $72 = (0 - ($71))|0;
    $$sink = $67 ? $71 : $72;
    $73 = $$sink << 19;
    $74 = $73 | $49;
    $move_hash$0 = $74;
   }
   $75 = ($53|0)==($turn_current|0);
   $76 = (($ptree) + 500|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($50|0)==($77|0);
   $or$cond87 = $75 & $78;
   if ($or$cond87) {
    $79 = ((($ptree) + ($ply<<2)|0) + 76468|0);
    HEAP32[$79>>2] = $move_hash$0;
    $80 = HEAP32[$pstate_node>>2]|0;
    $81 = $80 | $51;
    $82 = ($83|0)<(30001);
    $84 = $81 & -17;
    $$67 = $82 ? $84 : $81;
    HEAP32[$pstate_node>>2] = $$67;
    $85 = $54 & 1;
    $86 = ($85|0)==(0);
    if (!($86)) {
     $87 = ($83|0)>=($beta|0);
     $88 = ($$|0)>($41|0);
     $or$cond = $87 | $88;
     if ($or$cond) {
      $95 = $$67;
     } else {
      $89 = $$67 & -5;
      HEAP32[$pstate_node>>2] = $89;
      $95 = $89;
     }
     $90 = ($83|0)>($alpha|0);
     if (!($90)) {
      $91 = ($$depth_current|0)<(36);
      $92 = (($$depth_current) + -24)|0;
      $$11 = $91 ? 12 : $92;
      $93 = ($$11|0)>($41|0);
      if (!($93)) {
       $94 = $95 & -129;
       HEAP32[$pstate_node>>2] = $94;
      }
     }
    }
    do {
     if ((($55|0) == 3)) {
      label = 28;
     } else if ((($55|0) == 1)) {
      $103 = ($83|0)>($alpha|0);
      if ($103) {
       $move_supe$1 = 0;
       break L5;
      }
      $104 = ($41|0)>=($$depth_current|0);
      $105 = ($83|0)<(-30000);
      $or$cond13 = $104 | $105;
      if (!($or$cond13)) {
       $110 = ($55|0)==(3);
       if ($110) {
        label = 28;
        break;
       } else {
        label = 31;
        break;
       }
      }
      $106 = (($ptree) + 502964|0);
      HEAP32[$106>>2] = $83;
      $107 = (($ptree) + 75424|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = (($108) + 1)|0;
      HEAP32[$107>>2] = $109;
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     } else if ((($55|0) == 2)) {
      $96 = ($83|0)<($beta|0);
      if (!($96)) {
       $97 = ($41|0)>=($$depth_current|0);
       $98 = ($83|0)>(30000);
       $or$cond12 = $97 | $98;
       if ($or$cond12) {
        $99 = (($ptree) + 502964|0);
        HEAP32[$99>>2] = $83;
        $100 = (($ptree) + 75420|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = (($101) + 1)|0;
        HEAP32[$100>>2] = $102;
        $$0 = 2;
        STACKTOP = sp;return ($$0|0);
       } else {
        label = 31;
       }
      }
     } else {
      label = 31;
     }
    } while(0);
    do {
     if ((label|0) == 28) {
      $111 = ($41|0)<($$depth_current|0);
      if ($111) {
       $ispos7 = ($83|0)>(-1);
       $neg8 = (0 - ($83))|0;
       $112 = $ispos7 ? $83 : $neg8;
       $113 = ($112|0)>(30000);
       if (!($113)) {
        label = 31;
        break;
       }
      }
      $114 = (($ptree) + 502964|0);
      HEAP32[$114>>2] = $83;
      $115 = (($ptree) + 75424|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = (($116) + 1)|0;
      HEAP32[$115>>2] = $117;
      $$0 = 3;
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    if ((label|0) == 31) {
     $118 = $54 & 2;
     $119 = ($118|0)==(0);
     if ($119) {
      $move_supe$1 = 0;
      break;
     }
    }
    $120 = ((($ptree) + ($ply)|0) + 572072|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = ($121<<24>>24)==(0);
    if (!($122)) {
     $move_supe$1 = 0;
     break;
    }
    $123 = (($ply) + -1)|0;
    $124 = ((($ptree) + ($123)|0) + 572072|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = ($125<<24>>24)==(0);
    if (!($126)) {
     $move_supe$1 = 0;
     break;
    }
    $127 = ($$depth_current|0)<(16);
    if ($127) {
     $128 = (($beta) + 396)|0;
     $129 = ($128|0)>($83|0);
     if ($129) {
      label = 36;
     }
    } else {
     label = 36;
    }
    if ((label|0) == 36) {
     $130 = ($$depth_current|0)<(24);
     if (!($130)) {
      $move_supe$1 = 0;
      break;
     }
     $131 = (($beta) + 396)|0;
     $132 = ($131|0)>($83|0);
     if ($132) {
      $move_supe$1 = 0;
      break;
     }
    }
    $133 = (($ptree) + 502964|0);
    HEAP32[$133>>2] = $beta;
    $134 = (($ptree) + 75420|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + 1)|0;
    HEAP32[$134>>2] = $136;
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   }
   $137 = ($77|0)==($50|0);
   do {
    if ($137) {
     $is_superior$0$i = 0;
    } else {
     $138 = (_is_hand_eq_supe($77,$50)|0);
     $139 = ($138|0)==(0);
     if (!($139)) {
      $140 = ($turn_current|0)!=(0);
      $141 = $140 ? -1 : 1;
      $is_superior$0$i = $141;
      break;
     }
     $142 = (_is_hand_eq_supe($50,$77)|0);
     $143 = ($142|0)==(0);
     if ($143) {
      $move_supe$1 = 0;
      break L5;
     }
     $144 = ($turn_current|0)!=(0);
     $145 = $144 ? 1 : -1;
     $is_superior$0$i = $145;
    }
   } while(0);
   do {
    if ($75) {
     if ((($is_superior$0$i|0) == 1)) {
      $419 = $83;
      label = 48;
      break;
     } else if (!((($is_superior$0$i|0) == -1))) {
      $move_supe$1 = 0;
      break L5;
     }
     $179 = HEAP32[$pstate_node>>2]|0;
     $180 = $179 | $51;
     $181 = ($83|0)<(30001);
     $182 = $180 & -17;
     $$68 = $181 ? $182 : $180;
     HEAP32[$pstate_node>>2] = $$68;
     $183 = $54 & 1;
     $184 = ($183|0)==(0);
     if ($184) {
      $move_supe$1 = 0;
      break L5;
     }
     $185 = ($83|0)>($alpha|0);
     if ($185) {
      $193 = $$68;
     } else {
      $186 = ($$depth_current|0)<(36);
      $187 = (($$depth_current) + -24)|0;
      $$16 = $186 ? 12 : $187;
      $188 = ($$16|0)>($41|0);
      if ($188) {
       $193 = $$68;
      } else {
       $189 = $$68 & -129;
       HEAP32[$pstate_node>>2] = $189;
       $193 = $189;
      }
     }
     $190 = ($83|0)>=($beta|0);
     $191 = ($$|0)>($41|0);
     $or$cond17 = $190 | $191;
     if (!($or$cond17)) {
      $192 = $193 & -5;
      HEAP32[$pstate_node>>2] = $192;
     }
     if ($185) {
      $move_supe$1 = 0;
      break L5;
     }
     $194 = ($$depth_current|0)<=($41|0);
     $195 = ($83|0)<(-30000);
     $or$cond18 = $194 | $195;
     if (!($or$cond18)) {
      $move_supe$1 = 0;
      break L5;
     }
     $196 = (($ptree) + 502964|0);
     HEAP32[$196>>2] = $83;
     $197 = (($ptree) + 75432|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = (($198) + 1)|0;
     HEAP32[$197>>2] = $199;
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    } else {
     $146 = ($is_superior$0$i|0)==(-1);
     if ($146) {
      $move_supe$1 = 0;
      break L5;
     }
     $147 = (0 - ($83))|0;
     if ((($55|0) == 1)) {
      $160 = $147;$move_hash$0$53 = 0;
     } else if ((($55|0) == 2)) {
      $move_supe$1 = 0;
      break L5;
     } else {
      $419 = $147;
      label = 48;
     }
    }
   } while(0);
   if ((label|0) == 48) {
    $move_hash$0$ = $75 ? $move_hash$0 : 0;
    $148 = $54 & 2;
    $149 = ($148|0)==(0);
    if ($149) {
     $move_supe$1 = $move_hash$0$;
     break;
    } else {
     $160 = $419;$move_hash$0$53 = $move_hash$0$;
    }
   }
   $150 = ((($ptree) + ($ply)|0) + 572072|0);
   $151 = HEAP8[$150>>0]|0;
   $152 = ($151<<24>>24)==(0);
   do {
    if ($152) {
     $153 = (($ply) + -1)|0;
     $154 = ((($ptree) + ($153)|0) + 572072|0);
     $155 = HEAP8[$154>>0]|0;
     $156 = ($155<<24>>24)==(0);
     if ($156) {
      $157 = ($$depth_current|0)<(16);
      if ($157) {
       $158 = (($beta) + 396)|0;
       $159 = ($158|0)>($160|0);
       if ($159) {
        label = 53;
       }
      } else {
       label = 53;
      }
      if ((label|0) == 53) {
       $161 = ($$depth_current|0)<(24);
       if (!($161)) {
        break;
       }
       $162 = (($beta) + 396)|0;
       $163 = ($162|0)>($160|0);
       if ($163) {
        break;
       }
      }
      $164 = (($ptree) + 502964|0);
      HEAP32[$164>>2] = $beta;
      $165 = (($ptree) + 75420|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = (($166) + 1)|0;
      HEAP32[$165>>2] = $167;
      $$0 = 2;
      STACKTOP = sp;return ($$0|0);
     }
    }
   } while(0);
   $168 = ($160|0)<($beta|0);
   if ($168) {
    $move_supe$1 = $move_hash$0$53;
   } else {
    $169 = ($$depth_current|0)<=($41|0);
    $170 = ($160|0)>(30000);
    $or$cond14 = $169 | $170;
    if (!($or$cond14)) {
     $171 = ($41|0)<($$|0);
     $or$cond15 = $75 | $171;
     if ($or$cond15) {
      $move_supe$1 = $move_hash$0$53;
      break;
     }
     $172 = HEAP32[$pstate_node>>2]|0;
     $173 = $172 & 4;
     $174 = ($173|0)==(0);
     if ($174) {
      $move_supe$1 = $move_hash$0$53;
      break;
     }
    }
    $175 = (($ptree) + 502964|0);
    HEAP32[$175>>2] = $160;
    $176 = (($ptree) + 75428|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = (($177) + 1)|0;
    HEAP32[$176>>2] = $178;
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $move_supe$1 = 0;
  }
 } while(0);
 $200 = $ptree;
 $201 = $200;
 $202 = HEAP32[$201>>2]|0;
 $203 = (($200) + 4)|0;
 $204 = $203;
 $205 = HEAP32[$204>>2]|0;
 $206 = $202 >>> 31;
 $207 = HEAP32[33555968>>2]|0;
 $208 = (((($207) + (($18*48)|0)|0) + ($206<<4)|0) + 16|0);
 $209 = $208;
 $210 = $209;
 $211 = HEAP32[$210>>2]|0;
 $212 = (($209) + 4)|0;
 $213 = $212;
 $214 = HEAP32[$213>>2]|0;
 $215 = (((($207) + (($18*48)|0)|0) + ($206<<4)|0) + 24|0);
 $216 = $215;
 $217 = $216;
 $218 = HEAP32[$217>>2]|0;
 $219 = (($216) + 4)|0;
 $220 = $219;
 $221 = HEAP32[$220>>2]|0;
 $222 = $218 & -128;
 $223 = ($222|0)==($16|0);
 $224 = ($221|0)==($15|0);
 $225 = $223 & $224;
 L103: do {
  if ($225) {
   $226 = (($ptree) + 75404|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = (($227) + 1)|0;
   HEAP32[$226>>2] = $228;
   $229 = (_bitshift64Lshr(($211|0),($214|0),56)|0);
   $230 = tempRet0;
   $231 = (_bitshift64Lshr(($211|0),($214|0),40)|0);
   $232 = tempRet0;
   $233 = $231 & 65535;
   $234 = (($233) + -32768)|0;
   $235 = (_bitshift64Lshr(($211|0),($214|0),21)|0);
   $236 = tempRet0;
   $237 = $235 & 524287;
   $238 = $211 & 2097151;
   $239 = $218 & 32;
   $240 = $218 >>> 6;
   $241 = $240 & 1;
   $242 = $218 >>> 3;
   $243 = $242 & 3;
   $ispos = ($234|0)>(-1);
   $neg = (32768 - ($233))|0;
   $244 = $ispos ? $234 : $neg;
   $245 = ($244|0)>(30000);
   do {
    if ($245) {
     $246 = ($234|0)>(0);
     $247 = (($ply) + -1)|0;
     if ($246) {
      $248 = (($234) - ($247))|0;
      $273 = $248;
      break;
     } else {
      $249 = (($234) + ($247))|0;
      $273 = $249;
      break;
     }
    } else {
     $273 = $234;
    }
   } while(0);
   $250 = ($$depth_current|0)>(23);
   if ($250) {
    $251 = ($$depth_current|0)<(36);
    $252 = (($$depth_current) + -24)|0;
    $$19 = $251 ? 12 : $252;
    $253 = ($229|0)<($$19|0);
    $254 = ($237|0)==(0);
    $or$cond63 = $253 | $254;
    if ($or$cond63) {
     $move_hash$1 = 0;
    } else {
     label = 78;
    }
   } else {
    $$old62 = ($237|0)==(0);
    if ($$old62) {
     $move_hash$1 = 0;
    } else {
     label = 78;
    }
   }
   if ((label|0) == 78) {
    $255 = ($turn_current|0)!=(0);
    $256 = $235 & 127;
    $257 = ((($ptree) + ($256)|0) + 512|0);
    $258 = HEAP8[$257>>0]|0;
    $259 = $258 << 24 >> 24;
    $260 = (0 - ($259))|0;
    $$sink1 = $255 ? $259 : $260;
    $261 = $$sink1 << 19;
    $262 = $261 | $237;
    $move_hash$1 = $262;
   }
   $263 = ($241|0)==($turn_current|0);
   $264 = (($ptree) + 500|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = ($238|0)==($265|0);
   $or$cond89 = $263 & $266;
   if ($or$cond89) {
    $267 = ((($ptree) + ($ply<<2)|0) + 76468|0);
    $268 = HEAP32[$267>>2]|0;
    $269 = ($268|0)==(0);
    if ($269) {
     HEAP32[$267>>2] = $move_hash$1;
    }
    $270 = HEAP32[$pstate_node>>2]|0;
    $271 = $270 | $239;
    $272 = ($273|0)<(30001);
    $274 = $271 & -17;
    $$69 = $272 ? $274 : $271;
    HEAP32[$pstate_node>>2] = $$69;
    $275 = $242 & 1;
    $276 = ($275|0)==(0);
    if (!($276)) {
     $277 = ($273|0)>($alpha|0);
     if ($277) {
      $285 = $$69;
     } else {
      $278 = ($$depth_current|0)<(36);
      $279 = (($$depth_current) + -24)|0;
      $$20 = $278 ? 12 : $279;
      $280 = ($$20|0)>($229|0);
      if ($280) {
       $285 = $$69;
      } else {
       $281 = $$69 & -129;
       HEAP32[$pstate_node>>2] = $281;
       $285 = $281;
      }
     }
     $282 = ($273|0)>=($beta|0);
     $283 = ($$|0)>($229|0);
     $or$cond21 = $282 | $283;
     if (!($or$cond21)) {
      $284 = $285 & -5;
      HEAP32[$pstate_node>>2] = $284;
     }
    }
    do {
     if ((($243|0) == 2)) {
      $286 = ($273|0)<($beta|0);
      if (!($286)) {
       $287 = ($229|0)>=($$depth_current|0);
       $288 = ($273|0)>(30000);
       $or$cond22 = $287 | $288;
       if ($or$cond22) {
        $289 = (($ptree) + 502964|0);
        HEAP32[$289>>2] = $273;
        $290 = (($ptree) + 75420|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = (($291) + 1)|0;
        HEAP32[$290>>2] = $292;
        $$0 = 2;
        STACKTOP = sp;return ($$0|0);
       } else {
        label = 99;
       }
      }
     } else if ((($243|0) == 3)) {
      label = 96;
     } else if ((($243|0) == 1)) {
      $293 = ($273|0)>($alpha|0);
      if ($293) {
       $move_supe$3 = $move_supe$1;
       break L103;
      }
      $294 = ($229|0)>=($$depth_current|0);
      $295 = ($273|0)<(-30000);
      $or$cond23 = $294 | $295;
      if (!($or$cond23)) {
       $300 = ($243|0)==(3);
       if ($300) {
        label = 96;
        break;
       } else {
        label = 99;
        break;
       }
      }
      $296 = (($ptree) + 502964|0);
      HEAP32[$296>>2] = $273;
      $297 = (($ptree) + 75424|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = (($298) + 1)|0;
      HEAP32[$297>>2] = $299;
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     } else {
      label = 99;
     }
    } while(0);
    do {
     if ((label|0) == 96) {
      $301 = ($229|0)<($$depth_current|0);
      if ($301) {
       $ispos3 = ($273|0)>(-1);
       $neg4 = (0 - ($273))|0;
       $302 = $ispos3 ? $273 : $neg4;
       $303 = ($302|0)>(30000);
       if (!($303)) {
        label = 99;
        break;
       }
      }
      $304 = (($ptree) + 502964|0);
      HEAP32[$304>>2] = $273;
      $305 = (($ptree) + 75424|0);
      $306 = HEAP32[$305>>2]|0;
      $307 = (($306) + 1)|0;
      HEAP32[$305>>2] = $307;
      $$0 = 3;
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    if ((label|0) == 99) {
     $308 = $242 & 2;
     $309 = ($308|0)==(0);
     if ($309) {
      $move_supe$3 = $move_supe$1;
      break;
     }
    }
    $310 = ((($ptree) + ($ply)|0) + 572072|0);
    $311 = HEAP8[$310>>0]|0;
    $312 = ($311<<24>>24)==(0);
    if (!($312)) {
     $move_supe$3 = $move_supe$1;
     break;
    }
    $313 = (($ply) + -1)|0;
    $314 = ((($ptree) + ($313)|0) + 572072|0);
    $315 = HEAP8[$314>>0]|0;
    $316 = ($315<<24>>24)==(0);
    if (!($316)) {
     $move_supe$3 = $move_supe$1;
     break;
    }
    $317 = ($$depth_current|0)<(16);
    if ($317) {
     $318 = (($beta) + 396)|0;
     $319 = ($318|0)>($273|0);
     if ($319) {
      label = 104;
     }
    } else {
     label = 104;
    }
    if ((label|0) == 104) {
     $320 = ($$depth_current|0)<(24);
     if (!($320)) {
      $move_supe$3 = $move_supe$1;
      break;
     }
     $321 = (($beta) + 396)|0;
     $322 = ($321|0)>($273|0);
     if ($322) {
      $move_supe$3 = $move_supe$1;
      break;
     }
    }
    $323 = (($ptree) + 502964|0);
    HEAP32[$323>>2] = $beta;
    $324 = (($ptree) + 75420|0);
    $325 = HEAP32[$324>>2]|0;
    $326 = (($325) + 1)|0;
    HEAP32[$324>>2] = $326;
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   }
   $327 = ($265|0)==($238|0);
   do {
    if ($327) {
     $is_superior$0$i31 = 0;
    } else {
     $328 = (_is_hand_eq_supe($265,$238)|0);
     $329 = ($328|0)==(0);
     if (!($329)) {
      $330 = ($turn_current|0)!=(0);
      $331 = $330 ? -1 : 1;
      $is_superior$0$i31 = $331;
      break;
     }
     $332 = (_is_hand_eq_supe($238,$265)|0);
     $333 = ($332|0)==(0);
     if ($333) {
      $move_supe$3 = $move_supe$1;
      break L103;
     }
     $334 = ($turn_current|0)!=(0);
     $335 = $334 ? 1 : -1;
     $is_superior$0$i31 = $335;
    }
   } while(0);
   do {
    if ($263) {
     if ((($is_superior$0$i31|0) == 1)) {
      $420 = $273;
      label = 116;
      break;
     } else if (!((($is_superior$0$i31|0) == -1))) {
      $move_supe$3 = $move_supe$1;
      break L103;
     }
     $370 = HEAP32[$pstate_node>>2]|0;
     $371 = $370 | $239;
     $372 = ($273|0)<(30001);
     $373 = $371 & -17;
     $$70 = $372 ? $373 : $371;
     HEAP32[$pstate_node>>2] = $$70;
     $374 = $242 & 1;
     $375 = ($374|0)==(0);
     if ($375) {
      $move_supe$3 = $move_supe$1;
      break L103;
     }
     $376 = ($273|0)>($alpha|0);
     if ($376) {
      $384 = $$70;
     } else {
      $377 = ($$depth_current|0)<(36);
      $378 = (($$depth_current) + -24)|0;
      $$27 = $377 ? 12 : $378;
      $379 = ($$27|0)>($229|0);
      if ($379) {
       $384 = $$70;
      } else {
       $380 = $$70 & -129;
       HEAP32[$pstate_node>>2] = $380;
       $384 = $380;
      }
     }
     $381 = ($273|0)>=($beta|0);
     $382 = ($$|0)>($229|0);
     $or$cond28 = $381 | $382;
     if (!($or$cond28)) {
      $383 = $384 & -5;
      HEAP32[$pstate_node>>2] = $383;
     }
     if ($376) {
      $move_supe$3 = $move_supe$1;
      break L103;
     }
     $385 = ($229|0)>=($$depth_current|0);
     $386 = ($273|0)<(-30000);
     $or$cond29 = $385 | $386;
     if (!($or$cond29)) {
      $move_supe$3 = $move_supe$1;
      break L103;
     }
     $387 = (($ptree) + 502964|0);
     HEAP32[$387>>2] = $273;
     $388 = (($ptree) + 75432|0);
     $389 = HEAP32[$388>>2]|0;
     $390 = (($389) + 1)|0;
     HEAP32[$388>>2] = $390;
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    } else {
     $336 = ($is_superior$0$i31|0)==(-1);
     if ($336) {
      $move_supe$3 = $move_supe$1;
      break L103;
     }
     $337 = (0 - ($273))|0;
     if ((($243|0) == 2)) {
      $move_supe$3 = $move_supe$1;
      break L103;
     } else if ((($243|0) == 1)) {
      $351 = $337;$move_supe$260 = $move_supe$1;
     } else {
      $420 = $337;
      label = 116;
     }
    }
   } while(0);
   if ((label|0) == 116) {
    $338 = ($move_supe$1|0)==(0);
    $or$cond24 = $263 & $338;
    $move_supe$2 = $or$cond24 ? $move_hash$1 : $move_supe$1;
    $339 = $242 & 2;
    $340 = ($339|0)==(0);
    if ($340) {
     $move_supe$3 = $move_supe$2;
     break;
    } else {
     $351 = $420;$move_supe$260 = $move_supe$2;
    }
   }
   $341 = ((($ptree) + ($ply)|0) + 572072|0);
   $342 = HEAP8[$341>>0]|0;
   $343 = ($342<<24>>24)==(0);
   do {
    if ($343) {
     $344 = (($ply) + -1)|0;
     $345 = ((($ptree) + ($344)|0) + 572072|0);
     $346 = HEAP8[$345>>0]|0;
     $347 = ($346<<24>>24)==(0);
     if ($347) {
      $348 = ($$depth_current|0)<(16);
      if ($348) {
       $349 = (($beta) + 396)|0;
       $350 = ($349|0)>($351|0);
       if ($350) {
        label = 121;
       }
      } else {
       label = 121;
      }
      if ((label|0) == 121) {
       $352 = ($$depth_current|0)<(24);
       if (!($352)) {
        break;
       }
       $353 = (($beta) + 396)|0;
       $354 = ($353|0)>($351|0);
       if ($354) {
        break;
       }
      }
      $355 = (($ptree) + 502964|0);
      HEAP32[$355>>2] = $beta;
      $356 = (($ptree) + 75420|0);
      $357 = HEAP32[$356>>2]|0;
      $358 = (($357) + 1)|0;
      HEAP32[$356>>2] = $358;
      $$0 = 2;
      STACKTOP = sp;return ($$0|0);
     }
    }
   } while(0);
   $359 = ($351|0)<($beta|0);
   if ($359) {
    $move_supe$3 = $move_supe$260;
   } else {
    $360 = ($229|0)>=($$depth_current|0);
    $361 = ($351|0)>(30000);
    $or$cond25 = $360 | $361;
    if (!($or$cond25)) {
     $362 = ($229|0)<($$|0);
     $or$cond26 = $263 | $362;
     if ($or$cond26) {
      $move_supe$3 = $move_supe$260;
      break;
     }
     $363 = HEAP32[$pstate_node>>2]|0;
     $364 = $363 & 4;
     $365 = ($364|0)==(0);
     if ($365) {
      $move_supe$3 = $move_supe$260;
      break;
     }
    }
    $366 = (($ptree) + 502964|0);
    HEAP32[$366>>2] = $351;
    $367 = (($ptree) + 75428|0);
    $368 = HEAP32[$367>>2]|0;
    $369 = (($368) + 1)|0;
    HEAP32[$367>>2] = $369;
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $move_supe$3 = $move_supe$1;
  }
 } while(0);
 $391 = ((($ptree) + ($ply<<2)|0) + 76468|0);
 $392 = HEAP32[$391>>2]|0;
 $393 = ($392|0)!=(0);
 $394 = ($move_supe$3|0)==(0);
 $or$cond30 = $393 | $394;
 if ($or$cond30) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $395 = $move_supe$3 >>> 7;
 $396 = $395 & 127;
 $397 = ($396>>>0)>(80);
 do {
  if ($397) {
   $398 = ($turn_current|0)==(0);
   $399 = (($ptree) + 504|0);
   $400 = (($ptree) + 500|0);
   $$in = $398 ? $400 : $399;
   $401 = HEAP32[$$in>>2]|0;
   if ((($396|0) == 82)) {
    $415 = $401 & 224;
    $416 = ($415|0)==(0);
    if (!($416)) {
     $move_supe$4 = $move_supe$3;
     break;
    }
    $417 = $move_supe$3 & 127;
    $418 = $417 | 11136;
    $move_supe$4 = $418;
    break;
   } else if (!((($396|0) == 81))) {
    $move_supe$4 = $move_supe$3;
    break;
   }
   $402 = $401 & 31;
   $403 = ($402|0)==(0);
   if ($403) {
    $404 = $move_supe$3 & 127;
    $405 = $401 & 224;
    $406 = ($405|0)==(0);
    if (!($406)) {
     $407 = $404 | 10496;
     $move_supe$4 = $407;
     break;
    }
    $408 = $401 & 14336;
    $409 = ($408|0)==(0);
    if (!($409)) {
     $410 = $404 | 10752;
     $move_supe$4 = $410;
     break;
    }
    $411 = $401 & 114688;
    $412 = ($411|0)==(0);
    if ($412) {
     $414 = $404 | 11136;
     $move_supe$4 = $414;
     break;
    } else {
     $413 = $404 | 10880;
     $move_supe$4 = $413;
     break;
    }
   } else {
    $move_supe$4 = $move_supe$3;
   }
  } else {
   $move_supe$4 = $move_supe$3;
  }
 } while(0);
 HEAP32[$391>>2] = $move_supe$4;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _make_root_move_list($ptree) {
 $ptree = $ptree|0;
 var $$lobit = 0, $$lobit36 = 0, $$pr = 0, $$value$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $asort = 0, $exitcond = 0, $i$01$i = 0, $i$023 = 0, $i$1$pn$lcssa = 0, $i$1$pn11 = 0, $i$1$pn11$phi = 0, $i$116 = 0, $i$116$in = 0, $i$26 = 0, $id_easy_move$05 = 0, $j$0 = 0, $j$010 = 0, $j$012 = 0, $k$021 = 0, $num_root_move$0 = 0, $num_root_move$1 = 0;
 var $num_root_move$2 = 0, $num_root_move$235 = 0, $or$cond = 0, $phitmp = 0, $value$0 = 0, $value$0$value_pre_pv$0 = 0, $value$1 = 0, $value_pre_pv$0$lcssa = 0, $value_pre_pv$024 = 0, $value_pre_pv$1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2832|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $asort = sp + 32|0;
 $0 = (($ptree) + 2656|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[34184024>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = (_b_gen_captures($ptree,$1)|0);
  $7 = $5;
 } else {
  $4 = (_w_gen_captures($ptree,$1)|0);
  $7 = $4;
 }
 $6 = (($ptree) + 2660|0);
 HEAP32[$6>>2] = $7;
 $8 = HEAP32[34184024>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = (_b_gen_nocaptures($ptree,$7)|0);
  $12 = $11;
 } else {
  $10 = (_w_gen_nocaptures($ptree,$7)|0);
  $12 = $10;
 }
 HEAP32[$6>>2] = $12;
 $13 = HEAP32[34184024>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $16 = (_b_gen_drop($ptree,$12)|0);
  $17 = $16;
 } else {
  $15 = (_w_gen_drop($ptree,$12)|0);
  $17 = $15;
 }
 HEAP32[$6>>2] = $17;
 $18 = $17;
 $19 = $1;
 $20 = (($18) - ($19))|0;
 $21 = $20 >> 2;
 $22 = ($20|0)>(0);
 if ($22) {
  $23 = (($ptree) + 593|0);
  $24 = (($ptree) + 142520|0);
  $25 = (($ptree) + 7268|0);
  $26 = (($ptree) + 572072|0);
  $27 = (($ptree) + 572074|0);
  $28 = (($ptree) + 594|0);
  $i$023 = 0;$value_pre_pv$024 = -2147483648;
  while(1) {
   $29 = (($1) + ($i$023<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP32[34184024>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    _make_move_b($ptree,$30,1);
   } else {
    _make_move_w($ptree,$30,1);
   }
   $33 = HEAP32[34184024>>2]|0;
   $34 = ($33|0)==(0);
   if ($34) {
    $39 = HEAP8[$23>>0]|0;
    $40 = $39&255;
    $41 = (_is_black_attacked($ptree,$40)|0);
    $42 = ($41|0)==(0);
    if ($42) {
     label = 19;
    } else {
     $value$1 = -2147483648;$value_pre_pv$1 = $value_pre_pv$024;
    }
   } else {
    $35 = HEAP8[$28>>0]|0;
    $36 = $35&255;
    $37 = (_is_white_attacked($ptree,$36)|0);
    $38 = ($37|0)==(0);
    if ($38) {
     label = 19;
    } else {
     $value$1 = -2147483648;$value_pre_pv$1 = $value_pre_pv$024;
    }
   }
   L24: do {
    if ((label|0) == 19) {
     label = 0;
     $43 = HEAP32[221099720>>2]|0;
     $44 = ($43|0)==(0);
     if (!($44)) {
      $50 = $43;$i$01$i = 0;
      while(1) {
       $49 = ($50|0)==($30|0);
       $46 = (($i$01$i) + 1)|0;
       if ($49) {
        $value$1 = -2147483648;$value_pre_pv$1 = $value_pre_pv$024;
        break L24;
       }
       $45 = (221099720 + ($46<<2)|0);
       $47 = HEAP32[$45>>2]|0;
       $48 = ($47|0)==(0);
       if ($48) {
        break;
       } else {
        $50 = $47;$i$01$i = $46;
       }
      }
     }
     $51 = HEAP32[34184024>>2]|0;
     $52 = ($51|0)==(1);
     if ($52) {
      $57 = HEAP8[$23>>0]|0;
      $58 = $57&255;
      $59 = (_is_black_attacked($ptree,$58)|0);
      $60 = ($59|0)==(0);
      if (!($60)) {
       label = 25;
      }
     } else {
      $53 = HEAP8[$28>>0]|0;
      $54 = $53&255;
      $55 = (_is_white_attacked($ptree,$54)|0);
      $56 = ($55|0)==(0);
      if (!($56)) {
       label = 25;
      }
     }
     if ((label|0) == 25) {
      label = 0;
      $61 = HEAP8[$26>>0]|0;
      $62 = $61&255;
      $63 = (($62) + 1)|0;
      $64 = $63&255;
      HEAP8[$27>>0] = $64;
      $65 = $63 & 252;
      $66 = ($65>>>0)>(3);
      if ($66) {
       $67 = HEAP32[34184024>>2]|0;
       $68 = $67 ^ 1;
       $69 = (_detect_repetition($ptree,2,$68,2)|0);
       $phitmp = ($69|0)==(2);
       if ($phitmp) {
        $value$1 = -2147483648;$value_pre_pv$1 = $value_pre_pv$024;
        break;
       }
      }
     }
     HEAP32[$24>>2] = $30;
     $70 = HEAP32[34184024>>2]|0;
     $71 = $70 ^ 1;
     $72 = (_search_quies($ptree,-32600,32600,$71,2,1)|0);
     $73 = $30 >>> 14;
     $$lobit36 = $73 & 1;
     $value$0 = (($$lobit36) - ($72))|0;
     $74 = HEAP32[$25>>2]|0;
     $75 = ($30|0)==($74|0);
     $$value$0 = $75 ? 2147483647 : $value$0;
     $value$0$value_pre_pv$0 = $75 ? $value$0 : $value_pre_pv$024;
     $value$1 = $$value$0;$value_pre_pv$1 = $value$0$value_pre_pv$0;
    }
   } while(0);
   $76 = HEAP32[34184024>>2]|0;
   $77 = ($76|0)==(0);
   if ($77) {
    _unmake_move_b($ptree,$30,1);
   } else {
    _unmake_move_w($ptree,$30,1);
   }
   $78 = (($asort) + ($i$023<<2)|0);
   HEAP32[$78>>2] = $value$1;
   $79 = (($i$023) + 1)|0;
   $80 = ($79|0)<($21|0);
   if ($80) {
    $i$023 = $79;$value_pre_pv$024 = $value_pre_pv$1;
   } else {
    $value_pre_pv$0$lcssa = $value_pre_pv$1;
    break;
   }
  }
 } else {
  $value_pre_pv$0$lcssa = -2147483648;
 }
 $k$021 = 6;
 while(1) {
  $81 = (992 + ($k$021<<2)|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($21) - ($82))|0;
  $84 = ($83|0)>(0);
  if ($84) {
   $i$116$in = $83;
   while(1) {
    $i$116 = (($i$116$in) + -1)|0;
    $85 = (($asort) + ($i$116<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($1) + ($i$116<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $j$010 = (($i$116) + ($82))|0;
    $89 = ($j$010|0)<($21|0);
    L49: do {
     if ($89) {
      $i$1$pn11 = $i$116;$j$012 = $j$010;
      while(1) {
       $90 = (($asort) + ($j$012<<2)|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = ($91|0)>($86|0);
       if (!($92)) {
        $i$1$pn$lcssa = $i$1$pn11;
        break L49;
       }
       $93 = (($asort) + ($i$1$pn11<<2)|0);
       HEAP32[$93>>2] = $91;
       $94 = (($1) + ($j$012<<2)|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = (($1) + ($i$1$pn11<<2)|0);
       HEAP32[$96>>2] = $95;
       $j$0 = (($j$012) + ($82))|0;
       $97 = ($j$0|0)<($21|0);
       if ($97) {
        $i$1$pn11$phi = $j$012;$j$012 = $j$0;$i$1$pn11 = $i$1$pn11$phi;
       } else {
        $i$1$pn$lcssa = $j$012;
        break;
       }
      }
     } else {
      $i$1$pn$lcssa = $i$116;
     }
    } while(0);
    $98 = (($asort) + ($i$1$pn$lcssa<<2)|0);
    HEAP32[$98>>2] = $86;
    $99 = (($1) + ($i$1$pn$lcssa<<2)|0);
    HEAP32[$99>>2] = $88;
    $100 = ($i$116|0)>(0);
    if ($100) {
     $i$116$in = $i$116;
    } else {
     break;
    }
   }
  }
  $101 = (($k$021) + -1)|0;
  $102 = ($k$021|0)>(0);
  if ($102) {
   $k$021 = $101;
  } else {
   break;
  }
 }
 $103 = HEAP32[$asort>>2]|0;
 $104 = ($103|0)>(-30001);
 L56: do {
  if ($104) {
   $num_root_move$0 = $21;
   while(1) {
    $105 = ($num_root_move$0|0)==(0);
    if ($105) {
     $num_root_move$235 = 0;
     break L56;
    }
    $106 = (($num_root_move$0) + -1)|0;
    $107 = (($asort) + ($106<<2)|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)>(-30001);
    if ($109) {
     $num_root_move$2 = $num_root_move$0;
     label = 43;
     break;
    } else {
     $num_root_move$0 = $106;
    }
   }
  } else {
   $num_root_move$1 = $21;
   while(1) {
    $110 = ($num_root_move$1|0)==(0);
    if ($110) {
     $num_root_move$235 = 0;
     break L56;
    }
    $111 = (($num_root_move$1) + -1)|0;
    $112 = (($asort) + ($111<<2)|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ($113|0)==(-2147483648);
    if ($114) {
     $num_root_move$1 = $111;
    } else {
     $num_root_move$2 = $num_root_move$1;
     label = 43;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 43) {
  $115 = ($num_root_move$2|0)>(0);
  if ($115) {
   $i$26 = 0;
   while(1) {
    $116 = (($1) + ($i$26<<2)|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((33559672 + ($i$26<<4)|0) + 8|0);
    HEAP32[$118>>2] = $117;
    $119 = (33559672 + ($i$26<<4)|0);
    $120 = $119;
    $121 = $120;
    HEAP32[$121>>2] = 0;
    $122 = (($120) + 4)|0;
    $123 = $122;
    HEAP32[$123>>2] = 0;
    $124 = ((33559672 + ($i$26<<4)|0) + 12|0);
    HEAP32[$124>>2] = 0;
    $125 = (($i$26) + 1)|0;
    $exitcond = ($125|0)==($num_root_move$2|0);
    if ($exitcond) {
     $num_root_move$235 = $num_root_move$2;
     break;
    } else {
     $i$26 = $125;
    }
   }
  } else {
   $num_root_move$235 = $num_root_move$2;
  }
 }
 $126 = ($value_pre_pv$0$lcssa|0)==(-2147483648);
 if ($126) {
  $135 = $103;
 } else {
  HEAP32[$asort>>2] = $value_pre_pv$0$lcssa;
  $135 = $value_pre_pv$0$lcssa;
 }
 HEAP32[34183992>>2] = $num_root_move$235;
 $127 = ($num_root_move$235|0)>(1);
 if (!($127)) {
  STACKTOP = sp;return ($135|0);
 }
 $128 = HEAP32[34180920>>2]|0;
 $129 = $128 & 32;
 $130 = ($129|0)==(0);
 if (!($130)) {
  STACKTOP = sp;return ($135|0);
 }
 $131 = (($asort) + 4|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (($132) + 595)|0;
 $134 = ($135|0)>($133|0);
 do {
  if ($134) {
   HEAP32[34181104>>2] = -396;
   HEAP32[34181112>>2] = 3174;
   HEAP32[34181096>>2] = 1884;
   $id_easy_move$05 = 3;
  } else {
   $136 = (($132) + 396)|0;
   $137 = ($135|0)>($136|0);
   if ($137) {
    HEAP32[34181104>>2] = -297;
    HEAP32[34181112>>2] = 595;
    HEAP32[34181096>>2] = 892;
    $id_easy_move$05 = 2;
    break;
   }
   $138 = (($132) + 198)|0;
   $139 = ($135|0)>($138|0);
   $140 = ($135|0)>(-198);
   $or$cond = $139 & $140;
   if ($or$cond) {
    $141 = HEAP32[$1>>2]|0;
    $142 = $141 & 16256;
    $143 = ($142>>>0)<(10368);
    if ($143) {
     HEAP32[34181104>>2] = -198;
     HEAP32[34181112>>2] = 396;
     HEAP32[34181096>>2] = 595;
     $id_easy_move$05 = 1;
     break;
    }
   }
   $$pr = HEAP32[34181096>>2]|0;
   $144 = ($$pr|0)==(0);
   if ($144) {
    STACKTOP = sp;return ($135|0);
   } else {
    $id_easy_move$05 = 0;
   }
  }
 } while(0);
 $145 = HEAP32[$1>>2]|0;
 $146 = (_str_CSA_move($145)|0);
 HEAP32[$vararg_buffer>>2] = $146;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $id_easy_move$05;
 _out(221116312,$vararg_buffer);
 $147 = (($ptree) + 572073|0);
 $148 = HEAP8[$147>>0]|0;
 $149 = ($148<<24>>24)!=(0);
 $150 = $149&1;
 $151 = HEAP32[$1>>2]|0;
 $152 = $151 & 7864320;
 $153 = ($152|0)!=(0);
 $154 = $153&1;
 $155 = $151 >>> 14;
 $$lobit = $155 & 1;
 $156 = $151 & 16256;
 $157 = ($156>>>0)>(10240);
 $158 = $157&1;
 HEAP32[$vararg_buffer2>>2] = $150;
 $vararg_ptr5 = (($vararg_buffer2) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $154;
 $vararg_ptr6 = (($vararg_buffer2) + 8|0);
 HEAP32[$vararg_ptr6>>2] = $$lobit;
 $vararg_ptr7 = (($vararg_buffer2) + 12|0);
 HEAP32[$vararg_ptr7>>2] = $158;
 $vararg_ptr8 = (($vararg_buffer2) + 16|0);
 HEAP32[$vararg_ptr8>>2] = $135;
 $vararg_ptr9 = (($vararg_buffer2) + 20|0);
 HEAP32[$vararg_ptr9>>2] = $132;
 _out(221116360,$vararg_buffer2);
 HEAP32[34181120>>2] = $135;
 STACKTOP = sp;return ($135|0);
}
function _gen_next_move($ptree,$ply,$turn) {
 $ptree = $ptree|0;
 $ply = $ply|0;
 $turn = $turn|0;
 var $$ = 0, $$$lobit = 0, $$$lobit$not = 0, $$0 = 0, $$1 = 0, $$1$lobit = 0, $$1$lobit$not = 0, $$lcssa = 0, $$lobit = 0, $$lobit$not = 0, $$move_second$0 = 0, $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phi72Z2D = 0, $$pre$phi75Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$pre74 = 0;
 var $$remaining$0 = 0, $$remaining$07 = 0, $$remaining$08 = 0, $$value_best3$0 = 0, $$value_second$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $i$039 = 0, $i$132 = 0, $i14$012 = 0, $i5$0$ibest$0 = 0, $i5$015 = 0, $ibest$018 = 0, $ibest$1 = 0, $ibest13$0$i14$0 = 0, $ibest13$011 = 0, $ibest13$1 = 0, $j$0 = 0, $j$0$in$lcssa = 0, $j$0$in25 = 0, $j$0$in25$phi = 0, $j$024 = 0, $j$026 = 0, $killer1$0$lcssa = 0, $killer1$043 = 0, $killer1$1 = 0;
 var $killer2$0$lcssa = 0, $killer2$042 = 0, $killer2$1 = 0, $move_best$0$lcssa = 0, $move_best$041 = 0, $move_best$1 = 0, $move_second$0$lcssa = 0, $move_second$040 = 0, $move_second$1 = 0, $n$0 = 0, $n$1 = 0, $or$cond = 0, $or$cond2 = 0, $or$cond4 = 0, $or$cond6 = 0, $remaining$0$lcssa = 0, $remaining$036 = 0, $remaining$1 = 0, $remaining$2 = 0, $remaining$3 = 0;
 var $sortv$2 = 0, $value_best$0$lcssa = 0, $value_best$038 = 0, $value_best$1 = 0, $value_best3$013 = 0, $value_best3$1 = 0, $value_best8$0$ = 0, $value_best8$010 = 0, $value_best8$1 = 0, $value_second$0$lcssa = 0, $value_second$037 = 0, $value_second$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ptree) + ($ply<<5)|0) + 3168|0);
 $1 = ((($ptree) + ($ply<<5)|0) + 3184|0);
 $2 = HEAP32[$1>>2]|0;
 if ((($2|0) == 2)) {
  $$pre69 = ((($ptree) + ($ply<<2)|0) + 2656|0);
  $$pre$phi70Z2D = $$pre69;$$pre$phi72Z2D = $0;
  label = 66;
 } else if ((($2|0) == 0)) {
  $3 = ((($ptree) + ($ply<<5)|0) + 3180|0);
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 1;
  $4 = ((($ptree) + ($ply<<2)|0) + 2656|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$0>>2] = $5;
  $6 = ($turn|0)==(0);
  if ($6) {
   $8 = (_b_gen_captures($ptree,$5)|0);
   $9 = $8;
  } else {
   $7 = (_w_gen_captures($ptree,$5)|0);
   $9 = $7;
  }
  HEAP32[$4>>2] = $9;
  $10 = ((($ptree) + ($ply<<2)|0) + 76468|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($ptree) + ($ply<<4)|0) + 73312|0);
  $13 = ((($ptree) + ($ply<<4)|0) + 73320|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($ptree) + ($ply<<4)|0) + 73324|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $9;
  $18 = $5;
  $19 = (($17) - ($18))|0;
  $20 = $19 >> 2;
  $21 = ($19|0)>(0);
  if ($21) {
   $22 = ((($ptree) + ($ply<<4)|0) + 73316|0);
   $i$039 = 0;$killer1$043 = $14;$killer2$042 = $16;$move_best$041 = 0;$move_second$040 = 0;$remaining$036 = 0;$value_best$038 = 0;$value_second$037 = 0;
   while(1) {
    $23 = (($5) + ($i$039<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (_swap($ptree,$24,-1,2147483647,$turn)|0);
    $26 = ($25|0)>($value_best$038|0);
    if ($26) {
     $move_best$1 = $24;$move_second$1 = $move_best$041;$value_best$1 = $25;$value_second$1 = $value_best$038;
    } else {
     $27 = ($25|0)>($value_second$037|0);
     $$value_second$0 = $27 ? $25 : $value_second$037;
     $$move_second$0 = $27 ? $24 : $move_second$040;
     $move_best$1 = $move_best$041;$move_second$1 = $$move_second$0;$value_best$1 = $value_best$038;$value_second$1 = $$value_second$0;
    }
    $28 = ($24|0)==($11|0);
    do {
     if ($28) {
      $killer1$1 = $killer1$043;$killer2$1 = $killer2$042;$remaining$1 = $remaining$036;$sortv$2 = -2147483648;
     } else {
      $29 = $24 & 524287;
      $30 = ($29|0)==($killer1$043|0);
      if ($30) {
       $31 = HEAP32[$12>>2]|0;
       $32 = $24 >>> 19;
       $33 = $32 & 15;
       $34 = (($33) + 15)|0;
       $35 = (34184184 + ($34<<2)|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = (($36) + ($31))|0;
       $38 = ($25|0)<($37|0);
       $$ = $38 ? $37 : $25;
       $$$lobit = $$ >>> 31;
       $$$lobit$not = $$$lobit ^ 1;
       $$remaining$07 = (($$$lobit$not) + ($remaining$036))|0;
       $killer1$1 = 0;$killer2$1 = $killer2$042;$remaining$1 = $$remaining$07;$sortv$2 = $$;
       break;
      }
      $39 = ($29|0)==($killer2$042|0);
      if ($39) {
       $40 = HEAP32[$22>>2]|0;
       $41 = $24 >>> 19;
       $42 = $41 & 15;
       $43 = (($42) + 15)|0;
       $44 = (34184184 + ($43<<2)|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = (($45) + ($40))|0;
       $47 = ($25|0)<($46|0);
       $$1 = $47 ? $46 : $25;
       $$1$lobit = $$1 >>> 31;
       $$1$lobit$not = $$1$lobit ^ 1;
       $$remaining$08 = (($$1$lobit$not) + ($remaining$036))|0;
       $killer1$1 = $killer1$043;$killer2$1 = 0;$remaining$1 = $$remaining$08;$sortv$2 = $$1;
       break;
      } else {
       $$lobit = $25 >>> 31;
       $$lobit$not = $$lobit ^ 1;
       $$remaining$0 = (($$lobit$not) + ($remaining$036))|0;
       $killer1$1 = $killer1$043;$killer2$1 = $killer2$042;$remaining$1 = $$remaining$0;$sortv$2 = $25;
       break;
      }
     }
    } while(0);
    $48 = ((($ptree) + ($i$039<<2)|0) + 502964|0);
    HEAP32[$48>>2] = $sortv$2;
    $49 = (($i$039) + 1)|0;
    $50 = ($49|0)<($20|0);
    if ($50) {
     $i$039 = $49;$killer1$043 = $killer1$1;$killer2$042 = $killer2$1;$move_best$041 = $move_best$1;$move_second$040 = $move_second$1;$remaining$036 = $remaining$1;$value_best$038 = $value_best$1;$value_second$037 = $value_second$1;
    } else {
     $killer1$0$lcssa = $killer1$1;$killer2$0$lcssa = $killer2$1;$move_best$0$lcssa = $move_best$1;$move_second$0$lcssa = $move_second$1;$remaining$0$lcssa = $remaining$1;$value_best$0$lcssa = $value_best$1;$value_second$0$lcssa = $value_second$1;
     break;
    }
   }
  } else {
   $killer1$0$lcssa = $14;$killer2$0$lcssa = $16;$move_best$0$lcssa = 0;$move_second$0$lcssa = 0;$remaining$0$lcssa = 0;$value_best$0$lcssa = 0;$value_second$0$lcssa = 0;
  }
  $51 = ($killer1$0$lcssa|0)==(0);
  $52 = ($killer1$0$lcssa|0)==($11|0);
  $or$cond = $51 | $52;
  if ($or$cond) {
   $n$0 = $20;$remaining$2 = $remaining$0$lcssa;
  } else {
   $53 = HEAP32[$12>>2]|0;
   $54 = ($53|0)>(-1);
   if ($54) {
    $55 = (_is_move_valid($ptree,$killer1$0$lcssa,$turn)|0);
    $56 = ($55|0)==(0);
    if ($56) {
     $n$0 = $20;$remaining$2 = $remaining$0$lcssa;
    } else {
     $57 = HEAP32[$4>>2]|0;
     $58 = (($57) + 4|0);
     HEAP32[$4>>2] = $58;
     HEAP32[$57>>2] = $killer1$0$lcssa;
     $59 = HEAP32[$12>>2]|0;
     $60 = (($20) + 1)|0;
     $61 = ((($ptree) + ($20<<2)|0) + 502964|0);
     HEAP32[$61>>2] = $59;
     $62 = (($remaining$0$lcssa) + 1)|0;
     $n$0 = $60;$remaining$2 = $62;
    }
   } else {
    $n$0 = $20;$remaining$2 = $remaining$0$lcssa;
   }
  }
  $63 = ($killer2$0$lcssa|0)==(0);
  $64 = ($killer2$0$lcssa|0)==($11|0);
  $or$cond2 = $63 | $64;
  if ($or$cond2) {
   $n$1 = $n$0;$remaining$3 = $remaining$2;
  } else {
   $65 = ((($ptree) + ($ply<<4)|0) + 73316|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)>(-1);
   if ($67) {
    $68 = (_is_move_valid($ptree,$killer2$0$lcssa,$turn)|0);
    $69 = ($68|0)==(0);
    if ($69) {
     $n$1 = $n$0;$remaining$3 = $remaining$2;
    } else {
     $70 = HEAP32[$4>>2]|0;
     $71 = (($70) + 4|0);
     HEAP32[$4>>2] = $71;
     HEAP32[$70>>2] = $killer2$0$lcssa;
     $72 = HEAP32[$65>>2]|0;
     $73 = (($n$0) + 1)|0;
     $74 = ((($ptree) + ($n$0<<2)|0) + 502964|0);
     HEAP32[$74>>2] = $72;
     $75 = (($remaining$2) + 1)|0;
     $n$1 = $73;$remaining$3 = $75;
    }
   } else {
    $n$1 = $n$0;$remaining$3 = $remaining$2;
   }
  }
  $76 = ((($ptree) + ($ply<<5)|0) + 3192|0);
  HEAP32[$76>>2] = $value_best$0$lcssa;
  $77 = ((($ptree) + ($ply<<5)|0) + 3172|0);
  HEAP32[$77>>2] = $move_best$0$lcssa;
  $78 = ((($ptree) + ($ply<<5)|0) + 3196|0);
  HEAP32[$78>>2] = $value_second$0$lcssa;
  $79 = ((($ptree) + ($ply<<5)|0) + 3176|0);
  HEAP32[$79>>2] = $move_second$0$lcssa;
  $80 = ((($ptree) + ($ply<<5)|0) + 3188|0);
  HEAP32[$80>>2] = $remaining$3;
  $81 = ((($ptree) + ($n$1<<2)|0) + 502964|0);
  HEAP32[$81>>2] = -2147483648;
  $82 = (($n$1) + -2)|0;
  $83 = ($82|0)>(-1);
  if ($83) {
   $i$132 = $82;
   while(1) {
    $84 = ((($ptree) + ($i$132<<2)|0) + 502964|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (($5) + ($i$132<<2)|0);
    $87 = HEAP32[$86>>2]|0;
    $j$024 = (($i$132) + 1)|0;
    $88 = ((($ptree) + ($j$024<<2)|0) + 502964|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)>($85|0);
    if ($90) {
     $91 = $89;$92 = $84;$j$0$in25 = $i$132;$j$026 = $j$024;
     while(1) {
      HEAP32[$92>>2] = $91;
      $93 = (($5) + ($j$026<<2)|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = (($5) + ($j$0$in25<<2)|0);
      HEAP32[$95>>2] = $94;
      $j$0 = (($j$026) + 1)|0;
      $96 = ((($ptree) + ($j$0<<2)|0) + 502964|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ($97|0)>($85|0);
      $99 = ((($ptree) + ($j$026<<2)|0) + 502964|0);
      if ($98) {
       $j$0$in25$phi = $j$026;$91 = $97;$92 = $99;$j$026 = $j$0;$j$0$in25 = $j$0$in25$phi;
      } else {
       $$lcssa = $99;$j$0$in$lcssa = $j$026;
       break;
      }
     }
    } else {
     $$lcssa = $84;$j$0$in$lcssa = $i$132;
    }
    HEAP32[$$lcssa>>2] = $85;
    $100 = (($5) + ($j$0$in$lcssa<<2)|0);
    HEAP32[$100>>2] = $87;
    $101 = (($i$132) + -1)|0;
    $102 = ($i$132|0)>(0);
    if ($102) {
     $i$132 = $101;
    } else {
     break;
    }
   }
  }
  $103 = (($n$1) + -1)|0;
  $104 = ((($ptree) + ($103<<2)|0) + 502964|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)==(-2147483648);
  if ($106) {
   $107 = HEAP32[$4>>2]|0;
   $108 = (($107) + -4|0);
   HEAP32[$4>>2] = $108;
  }
  $109 = ($11|0)==(0);
  if ($109) {
   $$pre$phi75Z2D = $80;
   label = 42;
  } else {
   $110 = ($11|0)==($move_best$0$lcssa|0);
   if ($110) {
    $111 = HEAP32[$3>>2]|0;
    $112 = $111 | 8;
    HEAP32[$3>>2] = $112;
   }
   $113 = $11 & 524287;
   $114 = ($113|0)==($killer1$0$lcssa|0);
   if ($114) {
    $115 = HEAP32[$3>>2]|0;
    $116 = $115 | 2;
    HEAP32[$3>>2] = $116;
    $121 = $116;
   } else {
    $117 = ($113|0)==($killer2$0$lcssa|0);
    $118 = HEAP32[$3>>2]|0;
    if ($117) {
     $119 = $118 | 4;
     HEAP32[$3>>2] = $119;
     $121 = $119;
    } else {
     $121 = $118;
    }
   }
   $120 = $121 | 1;
   HEAP32[$3>>2] = $120;
   $122 = ((($ptree) + ($ply<<2)|0) + 142516|0);
   HEAP32[$122>>2] = $11;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($2|0) == 1)) {
  $$pre74 = ((($ptree) + ($ply<<5)|0) + 3188|0);
  $$pre$phi75Z2D = $$pre74;
  label = 42;
 } else {
  $$pre67 = ((($ptree) + ($ply<<2)|0) + 2656|0);
  $$pre$phi68Z2D = $$pre67;$$pre$phiZ2D = $0;
 }
 if ((label|0) == 42) {
  $123 = HEAP32[$$pre$phi75Z2D>>2]|0;
  $124 = (($123) + -1)|0;
  HEAP32[$$pre$phi75Z2D>>2] = $124;
  $125 = ($123|0)==(0);
  if (!($125)) {
   $126 = HEAP32[$0>>2]|0;
   $127 = (($126) + 4|0);
   HEAP32[$0>>2] = $127;
   $128 = HEAP32[$126>>2]|0;
   $129 = ((($ptree) + ($ply<<2)|0) + 142516|0);
   HEAP32[$129>>2] = $128;
   $130 = ((($ptree) + ($ply<<5)|0) + 3172|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ($128|0)==($131|0);
   if ($132) {
    $133 = ((($ptree) + ($ply<<5)|0) + 3180|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $134 | 8;
    HEAP32[$133>>2] = $135;
   }
   $136 = $128 & 524287;
   $137 = ((($ptree) + ($ply<<4)|0) + 73320|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = ($136|0)==($138|0);
   if ($139) {
    $140 = ((($ptree) + ($ply<<5)|0) + 3180|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $141 | 2;
    HEAP32[$140>>2] = $142;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $143 = ((($ptree) + ($ply<<4)|0) + 73324|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ($136|0)==($144|0);
   if (!($145)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $146 = ((($ptree) + ($ply<<5)|0) + 3180|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = $147 | 4;
   HEAP32[$146>>2] = $148;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $149 = ($turn|0)==(0);
  $150 = ((($ptree) + ($ply<<2)|0) + 2656|0);
  $151 = HEAP32[$150>>2]|0;
  if ($149) {
   $154 = (_b_gen_nocaptures($ptree,$151)|0);
   HEAP32[$150>>2] = $154;
   $155 = (_b_gen_drop($ptree,$154)|0);
   $156 = $155;
  } else {
   $152 = (_w_gen_nocaptures($ptree,$151)|0);
   HEAP32[$150>>2] = $152;
   $153 = (_w_gen_drop($ptree,$152)|0);
   $156 = $153;
  }
  HEAP32[$150>>2] = $156;
  $157 = HEAP32[$0>>2]|0;
  $158 = $156;
  $159 = $157;
  $160 = (($158) - ($159))|0;
  $161 = $160 >> 2;
  $162 = ($160|0)>(0);
  if ($162) {
   $163 = ((($ptree) + ($ply<<2)|0) + 76468|0);
   $164 = ((($ptree) + ($ply<<4)|0) + 73320|0);
   $165 = ((($ptree) + ($ply<<5)|0) + 3180|0);
   $166 = ((($ptree) + ($ply<<4)|0) + 73324|0);
   $i5$015 = 0;$ibest$018 = -1;$value_best3$013 = 0;
   while(1) {
    $167 = (($157) + ($i5$015<<2)|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = HEAP32[$163>>2]|0;
    $170 = ($168|0)==($169|0);
    do {
     if ($170) {
      label = 59;
     } else {
      $171 = HEAP32[$164>>2]|0;
      $172 = ($168|0)==($171|0);
      if ($172) {
       $173 = HEAP32[$165>>2]|0;
       $174 = $173 & 2;
       $175 = ($174|0)==(0);
       if (!($175)) {
        label = 59;
        break;
       }
      }
      $176 = HEAP32[$166>>2]|0;
      $177 = ($168|0)==($176|0);
      if ($177) {
       $178 = HEAP32[$165>>2]|0;
       $179 = $178 & 4;
       $180 = ($179|0)==(0);
       if (!($180)) {
        label = 59;
        break;
       }
      }
      $181 = $168 & 7864320;
      $182 = ($181|0)==(0);
      if ($182) {
       $183 = $168 & 16384;
       $184 = ($183|0)==(0);
       $185 = $168 & 491520;
       $186 = ($185|0)==(131072);
       $or$cond4 = $184 | $186;
       if ($or$cond4) {
        $187 = (_phash($168,$turn)|0);
        $188 = ((($ptree) + ($187<<1)|0) + 538532|0);
        $189 = HEAP16[$188>>1]|0;
        $190 = $189&65535;
        $191 = ((($ptree) + ($187<<1)|0) + 505764|0);
        $192 = HEAP16[$191>>1]|0;
        $193 = $192&65535;
        $194 = (($193) + 2)|0;
        $195 = $190 << 13;
        $196 = (($195) + 8192)|0;
        $197 = (($196>>>0) / ($194>>>0))&-1;
        $198 = ($197>>>0)>($value_best3$013>>>0);
        $$value_best3$0 = $198 ? $197 : $value_best3$013;
        $i5$0$ibest$0 = $198 ? $i5$015 : $ibest$018;
        $ibest$1 = $i5$0$ibest$0;$value_best3$1 = $$value_best3$0;
       } else {
        $ibest$1 = $ibest$018;$value_best3$1 = $value_best3$013;
       }
      } else {
       $ibest$1 = $ibest$018;$value_best3$1 = $value_best3$013;
      }
     }
    } while(0);
    if ((label|0) == 59) {
     label = 0;
     HEAP32[$167>>2] = 0;
     $ibest$1 = $ibest$018;$value_best3$1 = $value_best3$013;
    }
    $199 = (($i5$015) + 1)|0;
    $200 = ($199|0)<($161|0);
    if ($200) {
     $i5$015 = $199;$ibest$018 = $ibest$1;$value_best3$013 = $value_best3$1;
    } else {
     break;
    }
   }
   $201 = ($ibest$1|0)>(-1);
   if ($201) {
    $202 = ((($ptree) + ($ply<<5)|0) + 3180|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = $203 | 32;
    HEAP32[$202>>2] = $204;
    HEAP32[$1>>2] = 2;
    $205 = (($157) + ($ibest$1<<2)|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = ((($ptree) + ($ply<<2)|0) + 142516|0);
    HEAP32[$207>>2] = $206;
    HEAP32[$205>>2] = 0;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$pre$phi70Z2D = $150;$$pre$phi72Z2D = $0;
    label = 66;
   }
  } else {
   $$pre$phi70Z2D = $150;$$pre$phi72Z2D = $0;
   label = 66;
  }
 }
 if ((label|0) == 66) {
  HEAP32[$1>>2] = 3;
  $208 = HEAP32[$$pre$phi70Z2D>>2]|0;
  $209 = HEAP32[$$pre$phi72Z2D>>2]|0;
  $210 = $208;
  $211 = $209;
  $212 = (($210) - ($211))|0;
  $213 = $212 >> 2;
  $214 = ($212|0)>(0);
  if ($214) {
   $i14$012 = 0;$ibest13$011 = -1;$value_best8$010 = 0;
   while(1) {
    $215 = (($209) + ($i14$012<<2)|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = $216 & 7864320;
    $218 = ($217|0)==(0);
    if ($218) {
     $219 = $216 & 16384;
     $220 = ($219|0)==(0);
     $221 = $216 & 491520;
     $222 = ($221|0)==(131072);
     $or$cond6 = $220 | $222;
     if ($or$cond6) {
      $223 = (_phash($216,$turn)|0);
      $224 = ((($ptree) + ($223<<1)|0) + 538532|0);
      $225 = HEAP16[$224>>1]|0;
      $226 = $225&65535;
      $227 = ((($ptree) + ($223<<1)|0) + 505764|0);
      $228 = HEAP16[$227>>1]|0;
      $229 = $228&65535;
      $230 = (($229) + 2)|0;
      $231 = $226 << 13;
      $232 = (($231) + 8192)|0;
      $233 = (($232>>>0) / ($230>>>0))&-1;
      $234 = ($233>>>0)>($value_best8$010>>>0);
      if ($234) {
       $235 = HEAP32[$215>>2]|0;
       $236 = ($235|0)==(0);
       $value_best8$0$ = $236 ? $value_best8$010 : $233;
       $ibest13$0$i14$0 = $236 ? $ibest13$011 : $i14$012;
       $ibest13$1 = $ibest13$0$i14$0;$value_best8$1 = $value_best8$0$;
      } else {
       $ibest13$1 = $ibest13$011;$value_best8$1 = $value_best8$010;
      }
     } else {
      $ibest13$1 = $ibest13$011;$value_best8$1 = $value_best8$010;
     }
    } else {
     $ibest13$1 = $ibest13$011;$value_best8$1 = $value_best8$010;
    }
    $237 = (($i14$012) + 1)|0;
    $238 = ($237|0)<($213|0);
    if ($238) {
     $i14$012 = $237;$ibest13$011 = $ibest13$1;$value_best8$010 = $value_best8$1;
    } else {
     break;
    }
   }
   $239 = ($ibest13$1|0)>(-1);
   if ($239) {
    $240 = ((($ptree) + ($ply<<5)|0) + 3180|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = $241 | 64;
    HEAP32[$240>>2] = $242;
    $243 = (($209) + ($ibest13$1<<2)|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = ((($ptree) + ($ply<<2)|0) + 142516|0);
    HEAP32[$245>>2] = $244;
    HEAP32[$243>>2] = 0;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$pre$phi68Z2D = $$pre$phi70Z2D;$$pre$phiZ2D = $$pre$phi72Z2D;
   }
  } else {
   $$pre$phi68Z2D = $$pre$phi70Z2D;$$pre$phiZ2D = $$pre$phi72Z2D;
  }
 }
 $$pre = HEAP32[$$pre$phiZ2D>>2]|0;
 $248 = $$pre;
 while(1) {
  $246 = HEAP32[$$pre$phi68Z2D>>2]|0;
  $247 = ($248>>>0)<($246>>>0);
  if (!($247)) {
   $$0 = 0;
   label = 77;
   break;
  }
  $249 = HEAP32[$248>>2]|0;
  $250 = ($249|0)==(0);
  $251 = (($248) + 4|0);
  HEAP32[$$pre$phiZ2D>>2] = $251;
  if ($250) {
   $248 = $251;
  } else {
   break;
  }
 }
 if ((label|0) == 77) {
  STACKTOP = sp;return ($$0|0);
 }
 $252 = ((($ptree) + ($ply<<2)|0) + 142516|0);
 HEAP32[$252>>2] = $249;
 $253 = ((($ptree) + ($ply<<5)|0) + 3180|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = $254 | 128;
 HEAP32[$253>>2] = $255;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _gen_next_evasion($ptree,$ply,$turn) {
 $ptree = $ptree|0;
 $ply = $ply|0;
 $turn = $turn|0;
 var $$0 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi20Z2D = 0, $$pre$phi22Z2D = 0, $$pre$phiZ2D = 0, $$pre19 = 0, $$pre21 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $i$010 = 0, $i$010$in = 0;
 var $i$16 = 0, $j$0 = 0, $j$0$in$lcssa = 0, $j$0$in3 = 0, $j$0$in3$phi = 0, $j$02 = 0, $j$04 = 0, $sortv$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ptree) + ($ply<<5)|0) + 3168|0);
 $1 = ((($ptree) + ($ply<<5)|0) + 3184|0);
 $2 = HEAP32[$1>>2]|0;
 if ((($2|0) == 0)) {
  $3 = ($turn|0)==(0);
  $4 = ((($ptree) + ($ply<<2)|0) + 2656|0);
  $5 = HEAP32[$4>>2]|0;
  if ($3) {
   $7 = (_b_gen_evasion($ptree,$5)|0);
   $8 = $7;
  } else {
   $6 = (_w_gen_evasion($ptree,$5)|0);
   $8 = $6;
  }
  HEAP32[$4>>2] = $8;
  $9 = ((($ptree) + ($ply<<2)|0) + 76468|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $$pre$phi22Z2D = $4;
   label = 10;
  } else {
   HEAP32[$1>>2] = 1;
   $12 = HEAP32[$9>>2]|0;
   $13 = ((($ptree) + ($ply<<2)|0) + 142516|0);
   HEAP32[$13>>2] = $12;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($2|0) == 1)) {
  $$pre21 = ((($ptree) + ($ply<<2)|0) + 2656|0);
  $$pre$phi22Z2D = $$pre21;
  label = 10;
 } else {
  $$pre19 = ((($ptree) + ($ply<<2)|0) + 2656|0);
  $$pre$phi20Z2D = $$pre19;$$pre$phiZ2D = $0;
 }
 if ((label|0) == 10) {
  HEAP32[$1>>2] = 2;
  $14 = (($ply) + -1)|0;
  $15 = ((($ptree) + ($14<<2)|0) + 2656|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$0>>2] = $16;
  $17 = HEAP32[$$pre$phi22Z2D>>2]|0;
  $18 = $17;
  $19 = $16;
  $20 = (($18) - ($19))|0;
  $21 = $20 >> 2;
  $22 = ($20|0)>(0);
  if ($22) {
   $23 = ((($ptree) + ($ply<<2)|0) + 76468|0);
   $i$010$in = $21;
   while(1) {
    $i$010 = (($i$010$in) + -1)|0;
    $24 = (($16) + ($i$010<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = HEAP32[$23>>2]|0;
    $27 = ($25|0)==($26|0);
    do {
     if ($27) {
      HEAP32[$24>>2] = 0;
      $sortv$0 = -2147483648;
     } else {
      $28 = $25 & 491520;
      $29 = ($28|0)==(262144);
      if ($29) {
       $30 = $25 >>> 19;
       $31 = $30 & 15;
       $32 = (($31) + 15)|0;
       $33 = (34184184 + ($32<<2)|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = $34 << 1;
       $sortv$0 = $35;
       break;
      } else {
       $36 = (_swap($ptree,$25,-2147483648,2147483647,$turn)|0);
       $37 = (_estimate_score_diff($ptree,$25,$turn)|0);
       $38 = (($37) + ($36))|0;
       $sortv$0 = $38;
       break;
      }
     }
    } while(0);
    $39 = ((($ptree) + ($i$010<<2)|0) + 502964|0);
    HEAP32[$39>>2] = $sortv$0;
    $40 = ($i$010|0)>(0);
    if ($40) {
     $i$010$in = $i$010;
    } else {
     break;
    }
   }
  }
  $41 = ((($ptree) + ($21<<2)|0) + 502964|0);
  HEAP32[$41>>2] = -2147483648;
  $42 = (($21) + -2)|0;
  $43 = ($42|0)>(-1);
  if ($43) {
   $i$16 = $42;
   while(1) {
    $44 = ((($ptree) + ($i$16<<2)|0) + 502964|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($16) + ($i$16<<2)|0);
    $47 = HEAP32[$46>>2]|0;
    $j$02 = (($i$16) + 1)|0;
    $48 = ((($ptree) + ($j$02<<2)|0) + 502964|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)>($45|0);
    if ($50) {
     $51 = $49;$52 = $44;$j$0$in3 = $i$16;$j$04 = $j$02;
     while(1) {
      HEAP32[$52>>2] = $51;
      $53 = (($16) + ($j$04<<2)|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = (($16) + ($j$0$in3<<2)|0);
      HEAP32[$55>>2] = $54;
      $j$0 = (($j$04) + 1)|0;
      $56 = ((($ptree) + ($j$0<<2)|0) + 502964|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)>($45|0);
      $59 = ((($ptree) + ($j$04<<2)|0) + 502964|0);
      if ($58) {
       $j$0$in3$phi = $j$04;$51 = $57;$52 = $59;$j$04 = $j$0;$j$0$in3 = $j$0$in3$phi;
      } else {
       $$lcssa = $59;$j$0$in$lcssa = $j$04;
       break;
      }
     }
    } else {
     $$lcssa = $44;$j$0$in$lcssa = $i$16;
    }
    HEAP32[$$lcssa>>2] = $45;
    $60 = (($16) + ($j$0$in$lcssa<<2)|0);
    HEAP32[$60>>2] = $47;
    $61 = (($i$16) + -1)|0;
    $62 = ($i$16|0)>(0);
    if ($62) {
     $i$16 = $61;
    } else {
     $$pre$phi20Z2D = $$pre$phi22Z2D;$$pre$phiZ2D = $0;
     break;
    }
   }
  } else {
   $$pre$phi20Z2D = $$pre$phi22Z2D;$$pre$phiZ2D = $0;
  }
 }
 $$pre = HEAP32[$$pre$phiZ2D>>2]|0;
 $65 = $$pre;
 while(1) {
  $63 = HEAP32[$$pre$phi20Z2D>>2]|0;
  $64 = ($65>>>0)<($63>>>0);
  if (!($64)) {
   $$0 = 0;
   label = 25;
   break;
  }
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)==(0);
  $68 = (($65) + 4|0);
  HEAP32[$$pre$phiZ2D>>2] = $68;
  if ($67) {
   $65 = $68;
  } else {
   break;
  }
 }
 if ((label|0) == 25) {
  STACKTOP = sp;return ($$0|0);
 }
 $69 = ((($ptree) + ($ply<<2)|0) + 142516|0);
 HEAP32[$69>>2] = $66;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _b_gen_cap_nopro_ex2($ptree,$pmove) {
 $ptree = $ptree|0;
 $pmove = $pmove|0;
 var $$0$lcssa = 0, $$066 = 0, $$1$lcssa = 0, $$10$lcssa = 0, $$102 = 0, $$160 = 0, $$2$lcssa = 0, $$253 = 0, $$3$lcssa = 0, $$347 = 0, $$4$lcssa = 0, $$438 = 0, $$5$lcssa = 0, $$533 = 0, $$6$lcssa = 0, $$626 = 0, $$7$lcssa = 0, $$720 = 0, $$8$lcssa = 0, $$811 = 0;
 var $$9$lcssa = 0, $$93 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bb_move$sroa$0$041 = 0, $bb_move$sroa$0$114 = 0, $bb_move$sroa$1$040 = 0, $bb_move$sroa$1$113 = 0, $bb_move$sroa$2$039 = 0, $bb_move$sroa$2$112 = 0, $bb_piece$sroa$0$06 = 0, $bb_piece$sroa$1$05 = 0, $bb_piece$sroa$2$04 = 0, $ubb_move0$065 = 0, $ubb_move0$152 = 0, $ubb_move0$225 = 0;
 var $ubb_move0$31 = 0, $ubb_piece0$046 = 0, $ubb_piece0$119 = 0, $ubb_piece1$058 = 0, $ubb_piece1$131 = 0, $ubb_piece2$059 = 0, $ubb_piece2$132 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ptree) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ptree) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($ptree) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($ptree) + 164|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1 & 262143;
 $9 = $8 & $7;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0$lcssa = $pmove;
 } else {
  $$066 = $pmove;$ubb_move0$065 = $9;
  while(1) {
   $11 = (_last_one0($ubb_move0$065)|0);
   $12 = $11 << 7;
   $13 = (($12) + 1152)|0;
   $14 = ((($ptree) + ($11)|0) + 512|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 << 24 >> 24;
   $17 = (0 - ($16))|0;
   $18 = $17 << 19;
   $19 = $11 | $13;
   $20 = $19 | $18;
   $21 = $20 | 32768;
   $22 = (($$066) + 4|0);
   HEAP32[$$066>>2] = $21;
   $23 = (34156304 + (($11*12)|0)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24 ^ $ubb_move0$065;
   $26 = ($24|0)==($ubb_move0$065|0);
   if ($26) {
    $$0$lcssa = $22;
    break;
   } else {
    $$066 = $22;$ubb_move0$065 = $25;
   }
  }
 }
 $27 = (($ptree) + 264|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($ptree) + 268|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 | $28;
 $32 = ($31|0)==(0);
 if ($32) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$160 = $$0$lcssa;$ubb_piece1$058 = $28;$ubb_piece2$059 = $30;
  while(1) {
   $33 = (_last_one12($ubb_piece1$058,$ubb_piece2$059)|0);
   $34 = ((33572424 + ($33<<3)|0) + 6|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ((($ptree) + ($36<<2)|0) + 56|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((33572424 + ($33<<3)|0) + 7|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = $38 >>> $41;
   $43 = $42 & 127;
   $44 = ((33704320 + (($33*1536)|0)|0) + (($43*12)|0)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((33572424 + ($33<<3)|0) + 4|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = ((($ptree) + ($48<<2)|0) + 44|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((33572424 + ($33<<3)|0) + 5|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = $50 >>> $53;
   $55 = $54 & 127;
   $56 = ((33579904 + (($33*1536)|0)|0) + (($55*12)|0)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 | $45;
   $59 = $58 & $1;
   $60 = $33 << 7;
   $61 = ($59|0)==(0);
   if ($61) {
    $$2$lcssa = $$160;
   } else {
    $$253 = $$160;$ubb_move0$152 = $59;
    while(1) {
     $62 = (_last_one0($ubb_move0$152)|0);
     $63 = ((($ptree) + ($62)|0) + 512|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = $64 << 24 >> 24;
     $66 = (0 - ($65))|0;
     $67 = $66 << 19;
     $68 = $60 | $62;
     $69 = $68 | $67;
     $70 = $69 | 196608;
     $71 = (($$253) + 4|0);
     HEAP32[$$253>>2] = $70;
     $72 = (34156304 + (($62*12)|0)|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = $73 ^ $ubb_move0$152;
     $75 = ($73|0)==($ubb_move0$152|0);
     if ($75) {
      $$2$lcssa = $71;
      break;
     } else {
      $$253 = $71;$ubb_move0$152 = $74;
     }
    }
   }
   $76 = ((34156304 + (($33*12)|0)|0) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $77 ^ $ubb_piece1$058;
   $79 = ((34156304 + (($33*12)|0)|0) + 8|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $80 ^ $ubb_piece2$059;
   $82 = $81 | $78;
   $83 = ($82|0)==(0);
   if ($83) {
    $$1$lcssa = $$2$lcssa;
    break;
   } else {
    $$160 = $$2$lcssa;$ubb_piece1$058 = $78;$ubb_piece2$059 = $81;
   }
  }
 }
 $84 = (($ptree) + 260|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85|0)==(0);
 if ($86) {
  $$3$lcssa = $$1$lcssa;
 } else {
  $$347 = $$1$lcssa;$ubb_piece0$046 = $85;
  while(1) {
   $87 = (_last_one0($ubb_piece0$046)|0);
   $88 = ((33572424 + ($87<<3)|0) + 6|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = $89&255;
   $91 = ((($ptree) + ($90<<2)|0) + 56|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ((33572424 + ($87<<3)|0) + 7|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = $94&255;
   $96 = $92 >>> $95;
   $97 = $96 & 127;
   $98 = ((33704320 + (($87*1536)|0)|0) + (($97*12)|0)|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ((33572424 + ($87<<3)|0) + 4|0);
   $101 = HEAP8[$100>>0]|0;
   $102 = $101&255;
   $103 = ((($ptree) + ($102<<2)|0) + 44|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((33572424 + ($87<<3)|0) + 5|0);
   $106 = HEAP8[$105>>0]|0;
   $107 = $106&255;
   $108 = $104 >>> $107;
   $109 = $108 & 127;
   $110 = ((33579904 + (($87*1536)|0)|0) + (($109*12)|0)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $111 | $99;
   $113 = (((33704320 + (($87*1536)|0)|0) + (($97*12)|0)|0) + 4|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (((33579904 + (($87*1536)|0)|0) + (($109*12)|0)|0) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $116 | $114;
   $118 = (((33704320 + (($87*1536)|0)|0) + (($97*12)|0)|0) + 8|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (((33579904 + (($87*1536)|0)|0) + (($109*12)|0)|0) + 8|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $121 | $119;
   $123 = $112 & $1;
   $124 = $117 & $3;
   $125 = $122 & $5;
   $126 = $87 << 7;
   $127 = $124 | $125;
   $128 = $127 | $123;
   $129 = ($128|0)==(0);
   if ($129) {
    $$4$lcssa = $$347;
   } else {
    $$438 = $$347;$bb_move$sroa$0$041 = $123;$bb_move$sroa$1$040 = $124;$bb_move$sroa$2$039 = $125;
    while(1) {
     $130 = (_last_one210($bb_move$sroa$2$039,$bb_move$sroa$1$040,$bb_move$sroa$0$041)|0);
     $131 = ((($ptree) + ($130)|0) + 512|0);
     $132 = HEAP8[$131>>0]|0;
     $133 = $132 << 24 >> 24;
     $134 = (0 - ($133))|0;
     $135 = $134 << 19;
     $136 = $126 | $130;
     $137 = $136 | $135;
     $138 = $137 | 196608;
     $139 = (($$438) + 4|0);
     HEAP32[$$438>>2] = $138;
     $140 = (34156304 + (($130*12)|0)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $141 ^ $bb_move$sroa$0$041;
     $143 = ((34156304 + (($130*12)|0)|0) + 4|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = $144 ^ $bb_move$sroa$1$040;
     $146 = ((34156304 + (($130*12)|0)|0) + 8|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = $147 ^ $bb_move$sroa$2$039;
     $149 = $145 | $148;
     $150 = $149 | $142;
     $151 = ($150|0)==(0);
     if ($151) {
      $$4$lcssa = $139;
      break;
     } else {
      $$438 = $139;$bb_move$sroa$0$041 = $142;$bb_move$sroa$1$040 = $145;$bb_move$sroa$2$039 = $148;
     }
    }
   }
   $152 = (34156304 + (($87*12)|0)|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = $153 ^ $ubb_piece0$046;
   $155 = ($153|0)==($ubb_piece0$046|0);
   if ($155) {
    $$3$lcssa = $$4$lcssa;
    break;
   } else {
    $$347 = $$4$lcssa;$ubb_piece0$046 = $154;
   }
  }
 }
 $156 = (($ptree) + 288|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = (($ptree) + 292|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = $159 | $157;
 $161 = ($160|0)==(0);
 if ($161) {
  $$5$lcssa = $$3$lcssa;
 } else {
  $$533 = $$3$lcssa;$ubb_piece1$131 = $157;$ubb_piece2$132 = $159;
  while(1) {
   $162 = (_last_one12($ubb_piece1$131,$ubb_piece2$132)|0);
   $163 = ((33572424 + ($162<<3)|0) + 2|0);
   $164 = HEAP8[$163>>0]|0;
   $165 = $164&255;
   $166 = ((($ptree) + ($165<<2)|0) + 32|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = ((33572424 + ($162<<3)|0) + 3|0);
   $169 = HEAP8[$168>>0]|0;
   $170 = $169&255;
   $171 = $167 >>> $170;
   $172 = $171 & 127;
   $173 = ((33953152 + (($162*1536)|0)|0) + (($172*12)|0)|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (33572424 + ($162<<3)|0);
   $176 = HEAP8[$175>>0]|0;
   $177 = $176&255;
   $178 = ((($ptree) + ($177<<2)|0) + 8|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = ((($ptree) + ($177<<2)|0) + 20|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $181 | $179;
   $183 = ((33572424 + ($162<<3)|0) + 1|0);
   $184 = HEAP8[$183>>0]|0;
   $185 = $184&255;
   $186 = $182 >>> $185;
   $187 = $186 & 127;
   $188 = ((33828736 + (($162*1536)|0)|0) + (($187*12)|0)|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = $189 | $174;
   $191 = $190 & $1;
   $192 = $162 << 7;
   $193 = ($191|0)==(0);
   if ($193) {
    $$6$lcssa = $$533;
   } else {
    $$626 = $$533;$ubb_move0$225 = $191;
    while(1) {
     $194 = (_last_one0($ubb_move0$225)|0);
     $195 = ((($ptree) + ($194)|0) + 512|0);
     $196 = HEAP8[$195>>0]|0;
     $197 = $196 << 24 >> 24;
     $198 = (0 - ($197))|0;
     $199 = $198 << 19;
     $200 = $192 | $194;
     $201 = $200 | $199;
     $202 = $201 | 229376;
     $203 = (($$626) + 4|0);
     HEAP32[$$626>>2] = $202;
     $204 = (34156304 + (($194*12)|0)|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = $205 ^ $ubb_move0$225;
     $207 = ($205|0)==($ubb_move0$225|0);
     if ($207) {
      $$6$lcssa = $203;
      break;
     } else {
      $$626 = $203;$ubb_move0$225 = $206;
     }
    }
   }
   $208 = ((34156304 + (($162*12)|0)|0) + 4|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = $209 ^ $ubb_piece1$131;
   $211 = ((34156304 + (($162*12)|0)|0) + 8|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = $212 ^ $ubb_piece2$132;
   $214 = $213 | $210;
   $215 = ($214|0)==(0);
   if ($215) {
    $$5$lcssa = $$6$lcssa;
    break;
   } else {
    $$533 = $$6$lcssa;$ubb_piece1$131 = $210;$ubb_piece2$132 = $213;
   }
  }
 }
 $216 = (($ptree) + 284|0);
 $217 = HEAP32[$216>>2]|0;
 $218 = ($217|0)==(0);
 if ($218) {
  $$7$lcssa = $$5$lcssa;
 } else {
  $$720 = $$5$lcssa;$ubb_piece0$119 = $217;
  while(1) {
   $219 = (_last_one0($ubb_piece0$119)|0);
   $220 = ((33572424 + ($219<<3)|0) + 2|0);
   $221 = HEAP8[$220>>0]|0;
   $222 = $221&255;
   $223 = ((($ptree) + ($222<<2)|0) + 32|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = ((33572424 + ($219<<3)|0) + 3|0);
   $226 = HEAP8[$225>>0]|0;
   $227 = $226&255;
   $228 = $224 >>> $227;
   $229 = $228 & 127;
   $230 = ((33953152 + (($219*1536)|0)|0) + (($229*12)|0)|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = (33572424 + ($219<<3)|0);
   $233 = HEAP8[$232>>0]|0;
   $234 = $233&255;
   $235 = ((($ptree) + ($234<<2)|0) + 8|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = ((($ptree) + ($234<<2)|0) + 20|0);
   $238 = HEAP32[$237>>2]|0;
   $239 = $238 | $236;
   $240 = ((33572424 + ($219<<3)|0) + 1|0);
   $241 = HEAP8[$240>>0]|0;
   $242 = $241&255;
   $243 = $239 >>> $242;
   $244 = $243 & 127;
   $245 = ((33828736 + (($219*1536)|0)|0) + (($244*12)|0)|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = $246 | $231;
   $248 = (((33953152 + (($219*1536)|0)|0) + (($229*12)|0)|0) + 4|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = (((33828736 + (($219*1536)|0)|0) + (($244*12)|0)|0) + 4|0);
   $251 = HEAP32[$250>>2]|0;
   $252 = $251 | $249;
   $253 = (((33953152 + (($219*1536)|0)|0) + (($229*12)|0)|0) + 8|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = (((33828736 + (($219*1536)|0)|0) + (($244*12)|0)|0) + 8|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = $256 | $254;
   $258 = $247 & $1;
   $259 = $252 & $3;
   $260 = $257 & $5;
   $261 = $219 << 7;
   $262 = $259 | $260;
   $263 = $262 | $258;
   $264 = ($263|0)==(0);
   if ($264) {
    $$8$lcssa = $$720;
   } else {
    $$811 = $$720;$bb_move$sroa$0$114 = $258;$bb_move$sroa$1$113 = $259;$bb_move$sroa$2$112 = $260;
    while(1) {
     $265 = (_last_one210($bb_move$sroa$2$112,$bb_move$sroa$1$113,$bb_move$sroa$0$114)|0);
     $266 = ((($ptree) + ($265)|0) + 512|0);
     $267 = HEAP8[$266>>0]|0;
     $268 = $267 << 24 >> 24;
     $269 = (0 - ($268))|0;
     $270 = $269 << 19;
     $271 = $261 | $265;
     $272 = $271 | $270;
     $273 = $272 | 229376;
     $274 = (($$811) + 4|0);
     HEAP32[$$811>>2] = $273;
     $275 = (34156304 + (($265*12)|0)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = $276 ^ $bb_move$sroa$0$114;
     $278 = ((34156304 + (($265*12)|0)|0) + 4|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = $279 ^ $bb_move$sroa$1$113;
     $281 = ((34156304 + (($265*12)|0)|0) + 8|0);
     $282 = HEAP32[$281>>2]|0;
     $283 = $282 ^ $bb_move$sroa$2$112;
     $284 = $280 | $283;
     $285 = $284 | $277;
     $286 = ($285|0)==(0);
     if ($286) {
      $$8$lcssa = $274;
      break;
     } else {
      $$811 = $274;$bb_move$sroa$0$114 = $277;$bb_move$sroa$1$113 = $280;$bb_move$sroa$2$112 = $283;
     }
    }
   }
   $287 = (34156304 + (($219*12)|0)|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = $288 ^ $ubb_piece0$119;
   $290 = ($288|0)==($ubb_piece0$119|0);
   if ($290) {
    $$7$lcssa = $$8$lcssa;
    break;
   } else {
    $$720 = $$8$lcssa;$ubb_piece0$119 = $289;
   }
  }
 }
 $291 = (($ptree) + 188|0);
 $292 = HEAP32[$291>>2]|0;
 $293 = (($ptree) + 192|0);
 $294 = HEAP32[$293>>2]|0;
 $295 = (($ptree) + 196|0);
 $296 = HEAP32[$295>>2]|0;
 $297 = $1 & 261632;
 $298 = $294 | $296;
 $299 = $298 | $292;
 $300 = ($299|0)==(0);
 if ($300) {
  $$9$lcssa = $$7$lcssa;
  STACKTOP = sp;return ($$9$lcssa|0);
 } else {
  $$93 = $$7$lcssa;$bb_piece$sroa$0$06 = $292;$bb_piece$sroa$1$05 = $294;$bb_piece$sroa$2$04 = $296;
 }
 while(1) {
  $301 = (_last_one210($bb_piece$sroa$2$04,$bb_piece$sroa$1$05,$bb_piece$sroa$0$06)|0);
  $302 = ((33572424 + ($301<<3)|0) + 2|0);
  $303 = HEAP8[$302>>0]|0;
  $304 = $303&255;
  $305 = ((($ptree) + ($304<<2)|0) + 32|0);
  $306 = HEAP32[$305>>2]|0;
  $307 = ((33572424 + ($301<<3)|0) + 3|0);
  $308 = HEAP8[$307>>0]|0;
  $309 = $308&255;
  $310 = $306 >>> $309;
  $311 = $310 & 127;
  $312 = ((33953152 + (($301*1536)|0)|0) + (($311*12)|0)|0);
  $313 = HEAP32[$312>>2]|0;
  $314 = (34161184 + (($301*12)|0)|0);
  $315 = HEAP32[$314>>2]|0;
  $316 = $297 & $313;
  $317 = $316 & $315;
  $318 = $301 << 7;
  $319 = ($317|0)==(0);
  if ($319) {
   $$10$lcssa = $$93;
  } else {
   $$102 = $$93;$ubb_move0$31 = $317;
   while(1) {
    $320 = (_last_one0($ubb_move0$31)|0);
    $321 = ((($ptree) + ($320)|0) + 512|0);
    $322 = HEAP8[$321>>0]|0;
    $323 = $322 << 24 >> 24;
    $324 = (0 - ($323))|0;
    $325 = $324 << 19;
    $326 = $318 | $320;
    $327 = $326 | $325;
    $328 = $327 | 65536;
    $329 = (($$102) + 4|0);
    HEAP32[$$102>>2] = $328;
    $330 = (34156304 + (($320*12)|0)|0);
    $331 = HEAP32[$330>>2]|0;
    $332 = $331 ^ $ubb_move0$31;
    $333 = ($331|0)==($ubb_move0$31|0);
    if ($333) {
     $$10$lcssa = $329;
     break;
    } else {
     $$102 = $329;$ubb_move0$31 = $332;
    }
   }
  }
  $334 = (34156304 + (($301*12)|0)|0);
  $335 = HEAP32[$334>>2]|0;
  $336 = $335 ^ $bb_piece$sroa$0$06;
  $337 = ((34156304 + (($301*12)|0)|0) + 4|0);
  $338 = HEAP32[$337>>2]|0;
  $339 = $338 ^ $bb_piece$sroa$1$05;
  $340 = ((34156304 + (($301*12)|0)|0) + 8|0);
  $341 = HEAP32[$340>>2]|0;
  $342 = $341 ^ $bb_piece$sroa$2$04;
  $343 = $339 | $342;
  $344 = $343 | $336;
  $345 = ($344|0)==(0);
  if ($345) {
   $$9$lcssa = $$10$lcssa;
   break;
  } else {
   $$93 = $$10$lcssa;$bb_piece$sroa$0$06 = $336;$bb_piece$sroa$1$05 = $339;$bb_piece$sroa$2$04 = $342;
  }
 }
 STACKTOP = sp;return ($$9$lcssa|0);
}
function _b_gen_nocap_nopro_ex2($ptree,$pmove) {
 $ptree = $ptree|0;
 $pmove = $pmove|0;
 var $$0$lcssa = 0, $$066 = 0, $$1$lcssa = 0, $$10$lcssa = 0, $$102 = 0, $$160 = 0, $$2$lcssa = 0, $$253 = 0, $$3$lcssa = 0, $$347 = 0, $$4$lcssa = 0, $$441 = 0, $$5$lcssa = 0, $$533 = 0, $$6$lcssa = 0, $$626 = 0, $$7$lcssa = 0, $$720 = 0, $$8$lcssa = 0, $$814 = 0;
 var $$9$lcssa = 0, $$96 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bb_move$sroa$0$040 = 0, $bb_move$sroa$0$113 = 0, $bb_move$sroa$1$039 = 0, $bb_move$sroa$1$112 = 0, $bb_move$sroa$2$038 = 0, $bb_move$sroa$2$111 = 0, $bb_piece$sroa$0$05 = 0, $bb_piece$sroa$1$04 = 0, $bb_piece$sroa$2$03 = 0, $ubb_move0$065 = 0, $ubb_move0$152 = 0, $ubb_move0$225 = 0, $ubb_move0$31 = 0, $ubb_piece0$046 = 0, $ubb_piece0$119 = 0, $ubb_piece1$058 = 0;
 var $ubb_piece1$131 = 0, $ubb_piece2$059 = 0, $ubb_piece2$132 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ptree) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ptree) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | $1;
 $5 = (($ptree) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($ptree) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 | $6;
 $10 = (($ptree) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($ptree) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 | $11;
 $15 = $4 ^ -1;
 $16 = $9 ^ -1;
 $17 = $14 ^ -1;
 $18 = (($ptree) + 164|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $15 & 262143;
 $21 = $20 & $19;
 $22 = ($21|0)==(0);
 if ($22) {
  $$0$lcssa = $pmove;
 } else {
  $$066 = $pmove;$ubb_move0$065 = $21;
  while(1) {
   $23 = (_last_one0($ubb_move0$065)|0);
   $24 = $23 << 7;
   $25 = (($24) + 1152)|0;
   $26 = $23 | $25;
   $27 = $26 | 32768;
   $28 = (($$066) + 4|0);
   HEAP32[$$066>>2] = $27;
   $29 = (34156304 + (($23*12)|0)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 ^ $ubb_move0$065;
   $32 = ($30|0)==($ubb_move0$065|0);
   if ($32) {
    $$0$lcssa = $28;
    break;
   } else {
    $$066 = $28;$ubb_move0$065 = $31;
   }
  }
 }
 $33 = (($ptree) + 264|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($ptree) + 268|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 | $34;
 $38 = ($37|0)==(0);
 if ($38) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$160 = $$0$lcssa;$ubb_piece1$058 = $34;$ubb_piece2$059 = $36;
  while(1) {
   $39 = (_last_one12($ubb_piece1$058,$ubb_piece2$059)|0);
   $40 = ((33572424 + ($39<<3)|0) + 6|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = ((($ptree) + ($42<<2)|0) + 56|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((33572424 + ($39<<3)|0) + 7|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = $44 >>> $47;
   $49 = $48 & 127;
   $50 = ((33704320 + (($39*1536)|0)|0) + (($49*12)|0)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((33572424 + ($39<<3)|0) + 4|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $55 = ((($ptree) + ($54<<2)|0) + 44|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ((33572424 + ($39<<3)|0) + 5|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = $56 >>> $59;
   $61 = $60 & 127;
   $62 = ((33579904 + (($39*1536)|0)|0) + (($61*12)|0)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | $51;
   $65 = $64 & $15;
   $66 = $39 << 7;
   $67 = ($65|0)==(0);
   if ($67) {
    $$2$lcssa = $$160;
   } else {
    $$253 = $$160;$ubb_move0$152 = $65;
    while(1) {
     $68 = (_last_one0($ubb_move0$152)|0);
     $69 = $66 | $68;
     $70 = $69 | 196608;
     $71 = (($$253) + 4|0);
     HEAP32[$$253>>2] = $70;
     $72 = (34156304 + (($68*12)|0)|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = $73 ^ $ubb_move0$152;
     $75 = ($73|0)==($ubb_move0$152|0);
     if ($75) {
      $$2$lcssa = $71;
      break;
     } else {
      $$253 = $71;$ubb_move0$152 = $74;
     }
    }
   }
   $76 = ((34156304 + (($39*12)|0)|0) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $77 ^ $ubb_piece1$058;
   $79 = ((34156304 + (($39*12)|0)|0) + 8|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $80 ^ $ubb_piece2$059;
   $82 = $81 | $78;
   $83 = ($82|0)==(0);
   if ($83) {
    $$1$lcssa = $$2$lcssa;
    break;
   } else {
    $$160 = $$2$lcssa;$ubb_piece1$058 = $78;$ubb_piece2$059 = $81;
   }
  }
 }
 $84 = (($ptree) + 260|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85|0)==(0);
 if ($86) {
  $$3$lcssa = $$1$lcssa;
 } else {
  $$347 = $$1$lcssa;$ubb_piece0$046 = $85;
  while(1) {
   $87 = (_last_one0($ubb_piece0$046)|0);
   $88 = ((33572424 + ($87<<3)|0) + 6|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = $89&255;
   $91 = ((($ptree) + ($90<<2)|0) + 56|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ((33572424 + ($87<<3)|0) + 7|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = $94&255;
   $96 = $92 >>> $95;
   $97 = $96 & 127;
   $98 = ((33704320 + (($87*1536)|0)|0) + (($97*12)|0)|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ((33572424 + ($87<<3)|0) + 4|0);
   $101 = HEAP8[$100>>0]|0;
   $102 = $101&255;
   $103 = ((($ptree) + ($102<<2)|0) + 44|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((33572424 + ($87<<3)|0) + 5|0);
   $106 = HEAP8[$105>>0]|0;
   $107 = $106&255;
   $108 = $104 >>> $107;
   $109 = $108 & 127;
   $110 = ((33579904 + (($87*1536)|0)|0) + (($109*12)|0)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $111 | $99;
   $113 = (((33704320 + (($87*1536)|0)|0) + (($97*12)|0)|0) + 4|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (((33579904 + (($87*1536)|0)|0) + (($109*12)|0)|0) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $116 | $114;
   $118 = (((33704320 + (($87*1536)|0)|0) + (($97*12)|0)|0) + 8|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (((33579904 + (($87*1536)|0)|0) + (($109*12)|0)|0) + 8|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $121 | $119;
   $123 = $112 & $15;
   $124 = $117 & $16;
   $125 = $122 & $17;
   $126 = $87 << 7;
   $127 = $124 | $125;
   $128 = $127 | $123;
   $129 = ($128|0)==(0);
   if ($129) {
    $$4$lcssa = $$347;
   } else {
    $$441 = $$347;$bb_move$sroa$0$040 = $123;$bb_move$sroa$1$039 = $124;$bb_move$sroa$2$038 = $125;
    while(1) {
     $130 = (_last_one210($bb_move$sroa$2$038,$bb_move$sroa$1$039,$bb_move$sroa$0$040)|0);
     $131 = $126 | $130;
     $132 = $131 | 196608;
     $133 = (($$441) + 4|0);
     HEAP32[$$441>>2] = $132;
     $134 = (34156304 + (($130*12)|0)|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 ^ $bb_move$sroa$0$040;
     $137 = ((34156304 + (($130*12)|0)|0) + 4|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = $138 ^ $bb_move$sroa$1$039;
     $140 = ((34156304 + (($130*12)|0)|0) + 8|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $141 ^ $bb_move$sroa$2$038;
     $143 = $139 | $142;
     $144 = $143 | $136;
     $145 = ($144|0)==(0);
     if ($145) {
      $$4$lcssa = $133;
      break;
     } else {
      $$441 = $133;$bb_move$sroa$0$040 = $136;$bb_move$sroa$1$039 = $139;$bb_move$sroa$2$038 = $142;
     }
    }
   }
   $146 = (34156304 + (($87*12)|0)|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = $147 ^ $ubb_piece0$046;
   $149 = ($147|0)==($ubb_piece0$046|0);
   if ($149) {
    $$3$lcssa = $$4$lcssa;
    break;
   } else {
    $$347 = $$4$lcssa;$ubb_piece0$046 = $148;
   }
  }
 }
 $150 = (($ptree) + 288|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = (($ptree) + 292|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = $153 | $151;
 $155 = ($154|0)==(0);
 if ($155) {
  $$5$lcssa = $$3$lcssa;
 } else {
  $$533 = $$3$lcssa;$ubb_piece1$131 = $151;$ubb_piece2$132 = $153;
  while(1) {
   $156 = (_last_one12($ubb_piece1$131,$ubb_piece2$132)|0);
   $157 = ((33572424 + ($156<<3)|0) + 2|0);
   $158 = HEAP8[$157>>0]|0;
   $159 = $158&255;
   $160 = ((($ptree) + ($159<<2)|0) + 32|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = ((33572424 + ($156<<3)|0) + 3|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = $161 >>> $164;
   $166 = $165 & 127;
   $167 = ((33953152 + (($156*1536)|0)|0) + (($166*12)|0)|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = (33572424 + ($156<<3)|0);
   $170 = HEAP8[$169>>0]|0;
   $171 = $170&255;
   $172 = ((($ptree) + ($171<<2)|0) + 8|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = ((($ptree) + ($171<<2)|0) + 20|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = $175 | $173;
   $177 = ((33572424 + ($156<<3)|0) + 1|0);
   $178 = HEAP8[$177>>0]|0;
   $179 = $178&255;
   $180 = $176 >>> $179;
   $181 = $180 & 127;
   $182 = ((33828736 + (($156*1536)|0)|0) + (($181*12)|0)|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = $183 | $168;
   $185 = $184 & $15;
   $186 = $156 << 7;
   $187 = ($185|0)==(0);
   if ($187) {
    $$6$lcssa = $$533;
   } else {
    $$626 = $$533;$ubb_move0$225 = $185;
    while(1) {
     $188 = (_last_one0($ubb_move0$225)|0);
     $189 = $186 | $188;
     $190 = $189 | 229376;
     $191 = (($$626) + 4|0);
     HEAP32[$$626>>2] = $190;
     $192 = (34156304 + (($188*12)|0)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = $193 ^ $ubb_move0$225;
     $195 = ($193|0)==($ubb_move0$225|0);
     if ($195) {
      $$6$lcssa = $191;
      break;
     } else {
      $$626 = $191;$ubb_move0$225 = $194;
     }
    }
   }
   $196 = ((34156304 + (($156*12)|0)|0) + 4|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $197 ^ $ubb_piece1$131;
   $199 = ((34156304 + (($156*12)|0)|0) + 8|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = $200 ^ $ubb_piece2$132;
   $202 = $201 | $198;
   $203 = ($202|0)==(0);
   if ($203) {
    $$5$lcssa = $$6$lcssa;
    break;
   } else {
    $$533 = $$6$lcssa;$ubb_piece1$131 = $198;$ubb_piece2$132 = $201;
   }
  }
 }
 $204 = (($ptree) + 284|0);
 $205 = HEAP32[$204>>2]|0;
 $206 = ($205|0)==(0);
 if ($206) {
  $$7$lcssa = $$5$lcssa;
 } else {
  $$720 = $$5$lcssa;$ubb_piece0$119 = $205;
  while(1) {
   $207 = (_last_one0($ubb_piece0$119)|0);
   $208 = ((33572424 + ($207<<3)|0) + 2|0);
   $209 = HEAP8[$208>>0]|0;
   $210 = $209&255;
   $211 = ((($ptree) + ($210<<2)|0) + 32|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = ((33572424 + ($207<<3)|0) + 3|0);
   $214 = HEAP8[$213>>0]|0;
   $215 = $214&255;
   $216 = $212 >>> $215;
   $217 = $216 & 127;
   $218 = ((33953152 + (($207*1536)|0)|0) + (($217*12)|0)|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = (33572424 + ($207<<3)|0);
   $221 = HEAP8[$220>>0]|0;
   $222 = $221&255;
   $223 = ((($ptree) + ($222<<2)|0) + 8|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = ((($ptree) + ($222<<2)|0) + 20|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = $226 | $224;
   $228 = ((33572424 + ($207<<3)|0) + 1|0);
   $229 = HEAP8[$228>>0]|0;
   $230 = $229&255;
   $231 = $227 >>> $230;
   $232 = $231 & 127;
   $233 = ((33828736 + (($207*1536)|0)|0) + (($232*12)|0)|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 | $219;
   $236 = (((33953152 + (($207*1536)|0)|0) + (($217*12)|0)|0) + 4|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = (((33828736 + (($207*1536)|0)|0) + (($232*12)|0)|0) + 4|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = $239 | $237;
   $241 = (((33953152 + (($207*1536)|0)|0) + (($217*12)|0)|0) + 8|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = (((33828736 + (($207*1536)|0)|0) + (($232*12)|0)|0) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = $244 | $242;
   $246 = $235 & $15;
   $247 = $240 & $16;
   $248 = $245 & $17;
   $249 = $207 << 7;
   $250 = $247 | $248;
   $251 = $250 | $246;
   $252 = ($251|0)==(0);
   if ($252) {
    $$8$lcssa = $$720;
   } else {
    $$814 = $$720;$bb_move$sroa$0$113 = $246;$bb_move$sroa$1$112 = $247;$bb_move$sroa$2$111 = $248;
    while(1) {
     $253 = (_last_one210($bb_move$sroa$2$111,$bb_move$sroa$1$112,$bb_move$sroa$0$113)|0);
     $254 = $249 | $253;
     $255 = $254 | 229376;
     $256 = (($$814) + 4|0);
     HEAP32[$$814>>2] = $255;
     $257 = (34156304 + (($253*12)|0)|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = $258 ^ $bb_move$sroa$0$113;
     $260 = ((34156304 + (($253*12)|0)|0) + 4|0);
     $261 = HEAP32[$260>>2]|0;
     $262 = $261 ^ $bb_move$sroa$1$112;
     $263 = ((34156304 + (($253*12)|0)|0) + 8|0);
     $264 = HEAP32[$263>>2]|0;
     $265 = $264 ^ $bb_move$sroa$2$111;
     $266 = $262 | $265;
     $267 = $266 | $259;
     $268 = ($267|0)==(0);
     if ($268) {
      $$8$lcssa = $256;
      break;
     } else {
      $$814 = $256;$bb_move$sroa$0$113 = $259;$bb_move$sroa$1$112 = $262;$bb_move$sroa$2$111 = $265;
     }
    }
   }
   $269 = (34156304 + (($207*12)|0)|0);
   $270 = HEAP32[$269>>2]|0;
   $271 = $270 ^ $ubb_piece0$119;
   $272 = ($270|0)==($ubb_piece0$119|0);
   if ($272) {
    $$7$lcssa = $$8$lcssa;
    break;
   } else {
    $$720 = $$8$lcssa;$ubb_piece0$119 = $271;
   }
  }
 }
 $273 = (($ptree) + 188|0);
 $274 = HEAP32[$273>>2]|0;
 $275 = (($ptree) + 192|0);
 $276 = HEAP32[$275>>2]|0;
 $277 = (($ptree) + 196|0);
 $278 = HEAP32[$277>>2]|0;
 $279 = $15 & 261632;
 $280 = $276 | $278;
 $281 = $280 | $274;
 $282 = ($281|0)==(0);
 if ($282) {
  $$9$lcssa = $$7$lcssa;
  STACKTOP = sp;return ($$9$lcssa|0);
 } else {
  $$96 = $$7$lcssa;$bb_piece$sroa$0$05 = $274;$bb_piece$sroa$1$04 = $276;$bb_piece$sroa$2$03 = $278;
 }
 while(1) {
  $283 = (_last_one210($bb_piece$sroa$2$03,$bb_piece$sroa$1$04,$bb_piece$sroa$0$05)|0);
  $284 = ((33572424 + ($283<<3)|0) + 2|0);
  $285 = HEAP8[$284>>0]|0;
  $286 = $285&255;
  $287 = ((($ptree) + ($286<<2)|0) + 32|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = ((33572424 + ($283<<3)|0) + 3|0);
  $290 = HEAP8[$289>>0]|0;
  $291 = $290&255;
  $292 = $288 >>> $291;
  $293 = $292 & 127;
  $294 = ((33953152 + (($283*1536)|0)|0) + (($293*12)|0)|0);
  $295 = HEAP32[$294>>2]|0;
  $296 = (34161184 + (($283*12)|0)|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = $279 & $295;
  $299 = $298 & $297;
  $300 = $283 << 7;
  $301 = ($299|0)==(0);
  if ($301) {
   $$10$lcssa = $$96;
  } else {
   $$102 = $$96;$ubb_move0$31 = $299;
   while(1) {
    $302 = (_last_one0($ubb_move0$31)|0);
    $303 = $300 | $302;
    $304 = $303 | 65536;
    $305 = (($$102) + 4|0);
    HEAP32[$$102>>2] = $304;
    $306 = (34156304 + (($302*12)|0)|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = $307 ^ $ubb_move0$31;
    $309 = ($307|0)==($ubb_move0$31|0);
    if ($309) {
     $$10$lcssa = $305;
     break;
    } else {
     $$102 = $305;$ubb_move0$31 = $308;
    }
   }
  }
  $310 = (34156304 + (($283*12)|0)|0);
  $311 = HEAP32[$310>>2]|0;
  $312 = $311 ^ $bb_piece$sroa$0$05;
  $313 = ((34156304 + (($283*12)|0)|0) + 4|0);
  $314 = HEAP32[$313>>2]|0;
  $315 = $314 ^ $bb_piece$sroa$1$04;
  $316 = ((34156304 + (($283*12)|0)|0) + 8|0);
  $317 = HEAP32[$316>>2]|0;
  $318 = $317 ^ $bb_piece$sroa$2$03;
  $319 = $315 | $318;
  $320 = $319 | $312;
  $321 = ($320|0)==(0);
  if ($321) {
   $$9$lcssa = $$10$lcssa;
   break;
  } else {
   $$96 = $$10$lcssa;$bb_piece$sroa$0$05 = $312;$bb_piece$sroa$1$04 = $315;$bb_piece$sroa$2$03 = $318;
  }
 }
 STACKTOP = sp;return ($$9$lcssa|0);
}
function _w_gen_cap_nopro_ex2($ptree,$pmove) {
 $ptree = $ptree|0;
 $pmove = $pmove|0;
 var $$0$lcssa = 0, $$065 = 0, $$1$lcssa = 0, $$10$lcssa = 0, $$101 = 0, $$158 = 0, $$2$lcssa = 0, $$252 = 0, $$3$lcssa = 0, $$346 = 0, $$4$lcssa = 0, $$438 = 0, $$5$lcssa = 0, $$531 = 0, $$6$lcssa = 0, $$625 = 0, $$7$lcssa = 0, $$719 = 0, $$8$lcssa = 0, $$811 = 0;
 var $$9$lcssa = 0, $$93 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $bb_move$sroa$0$041 = 0, $bb_move$sroa$0$114 = 0, $bb_move$sroa$1$040 = 0, $bb_move$sroa$1$113 = 0, $bb_move$sroa$2$039 = 0, $bb_move$sroa$2$112 = 0, $bb_piece$sroa$0$06 = 0, $bb_piece$sroa$1$05 = 0, $bb_piece$sroa$2$04 = 0, $ubb_move2$066 = 0, $ubb_move2$153 = 0, $ubb_move2$226 = 0, $ubb_move2$32 = 0, $ubb_piece0$059 = 0, $ubb_piece0$132 = 0, $ubb_piece1$060 = 0, $ubb_piece1$133 = 0, $ubb_piece2$047 = 0;
 var $ubb_piece2$120 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ptree) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ptree) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($ptree) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($ptree) + 184|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $5 & 134217216;
 $9 = $8 & $7;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0$lcssa = $pmove;
 } else {
  $$065 = $pmove;$ubb_move2$066 = $9;
  while(1) {
   $11 = (_first_one2($ubb_move2$066)|0);
   $12 = $11 << 7;
   $13 = (($12) + -1152)|0;
   $14 = ((($ptree) + ($11)|0) + 512|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 << 24 >> 24;
   $17 = $16 << 19;
   $18 = $11 | $13;
   $19 = $18 | $17;
   $20 = $19 | 32768;
   $21 = (($$065) + 4|0);
   HEAP32[$$065>>2] = $20;
   $22 = ((34156304 + (($11*12)|0)|0) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $23 ^ $ubb_move2$066;
   $25 = ($23|0)==($ubb_move2$066|0);
   if ($25) {
    $$0$lcssa = $21;
    break;
   } else {
    $$065 = $21;$ubb_move2$066 = $24;
   }
  }
 }
 $26 = (($ptree) + 272|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($ptree) + 276|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 | $27;
 $31 = ($30|0)==(0);
 if ($31) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$158 = $$0$lcssa;$ubb_piece0$059 = $27;$ubb_piece1$060 = $29;
  while(1) {
   $32 = (_first_one01($ubb_piece0$059,$ubb_piece1$060)|0);
   $33 = ((33572424 + ($32<<3)|0) + 6|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = ((($ptree) + ($35<<2)|0) + 56|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((33572424 + ($32<<3)|0) + 7|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = $37 >>> $40;
   $42 = $41 & 127;
   $43 = (((33704320 + (($32*1536)|0)|0) + (($42*12)|0)|0) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((33572424 + ($32<<3)|0) + 4|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = ((($ptree) + ($47<<2)|0) + 44|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((33572424 + ($32<<3)|0) + 5|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $53 = $49 >>> $52;
   $54 = $53 & 127;
   $55 = (((33579904 + (($32*1536)|0)|0) + (($54*12)|0)|0) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $56 | $44;
   $58 = $57 & $5;
   $59 = $32 << 7;
   $60 = ($58|0)==(0);
   if ($60) {
    $$2$lcssa = $$158;
   } else {
    $$252 = $$158;$ubb_move2$153 = $58;
    while(1) {
     $61 = (_first_one2($ubb_move2$153)|0);
     $62 = ((($ptree) + ($61)|0) + 512|0);
     $63 = HEAP8[$62>>0]|0;
     $64 = $63 << 24 >> 24;
     $65 = $64 << 19;
     $66 = $59 | $61;
     $67 = $66 | $65;
     $68 = $67 | 196608;
     $69 = (($$252) + 4|0);
     HEAP32[$$252>>2] = $68;
     $70 = ((34156304 + (($61*12)|0)|0) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = $71 ^ $ubb_move2$153;
     $73 = ($71|0)==($ubb_move2$153|0);
     if ($73) {
      $$2$lcssa = $69;
      break;
     } else {
      $$252 = $69;$ubb_move2$153 = $72;
     }
    }
   }
   $74 = (34156304 + (($32*12)|0)|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $75 ^ $ubb_piece0$059;
   $77 = ((34156304 + (($32*12)|0)|0) + 4|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $78 ^ $ubb_piece1$060;
   $80 = $79 | $76;
   $81 = ($80|0)==(0);
   if ($81) {
    $$1$lcssa = $$2$lcssa;
    break;
   } else {
    $$158 = $$2$lcssa;$ubb_piece0$059 = $76;$ubb_piece1$060 = $79;
   }
  }
 }
 $82 = (($ptree) + 280|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)==(0);
 if ($84) {
  $$3$lcssa = $$1$lcssa;
 } else {
  $$346 = $$1$lcssa;$ubb_piece2$047 = $83;
  while(1) {
   $85 = (_first_one2($ubb_piece2$047)|0);
   $86 = ((33572424 + ($85<<3)|0) + 6|0);
   $87 = HEAP8[$86>>0]|0;
   $88 = $87&255;
   $89 = ((($ptree) + ($88<<2)|0) + 56|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = ((33572424 + ($85<<3)|0) + 7|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = $92&255;
   $94 = $90 >>> $93;
   $95 = $94 & 127;
   $96 = ((33704320 + (($85*1536)|0)|0) + (($95*12)|0)|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ((33572424 + ($85<<3)|0) + 4|0);
   $99 = HEAP8[$98>>0]|0;
   $100 = $99&255;
   $101 = ((($ptree) + ($100<<2)|0) + 44|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ((33572424 + ($85<<3)|0) + 5|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = $104&255;
   $106 = $102 >>> $105;
   $107 = $106 & 127;
   $108 = ((33579904 + (($85*1536)|0)|0) + (($107*12)|0)|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $109 | $97;
   $111 = (((33704320 + (($85*1536)|0)|0) + (($95*12)|0)|0) + 4|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (((33579904 + (($85*1536)|0)|0) + (($107*12)|0)|0) + 4|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = $114 | $112;
   $116 = (((33704320 + (($85*1536)|0)|0) + (($95*12)|0)|0) + 8|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (((33579904 + (($85*1536)|0)|0) + (($107*12)|0)|0) + 8|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $119 | $117;
   $121 = $110 & $1;
   $122 = $115 & $3;
   $123 = $120 & $5;
   $124 = $85 << 7;
   $125 = $122 | $123;
   $126 = $125 | $121;
   $127 = ($126|0)==(0);
   if ($127) {
    $$4$lcssa = $$346;
   } else {
    $$438 = $$346;$bb_move$sroa$0$041 = $121;$bb_move$sroa$1$040 = $122;$bb_move$sroa$2$039 = $123;
    while(1) {
     $128 = (_first_one012($bb_move$sroa$0$041,$bb_move$sroa$1$040,$bb_move$sroa$2$039)|0);
     $129 = ((($ptree) + ($128)|0) + 512|0);
     $130 = HEAP8[$129>>0]|0;
     $131 = $130 << 24 >> 24;
     $132 = $131 << 19;
     $133 = $124 | $128;
     $134 = $133 | $132;
     $135 = $134 | 196608;
     $136 = (($$438) + 4|0);
     HEAP32[$$438>>2] = $135;
     $137 = (34156304 + (($128*12)|0)|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = $138 ^ $bb_move$sroa$0$041;
     $140 = ((34156304 + (($128*12)|0)|0) + 4|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $141 ^ $bb_move$sroa$1$040;
     $143 = ((34156304 + (($128*12)|0)|0) + 8|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = $144 ^ $bb_move$sroa$2$039;
     $146 = $142 | $145;
     $147 = $146 | $139;
     $148 = ($147|0)==(0);
     if ($148) {
      $$4$lcssa = $136;
      break;
     } else {
      $$438 = $136;$bb_move$sroa$0$041 = $139;$bb_move$sroa$1$040 = $142;$bb_move$sroa$2$039 = $145;
     }
    }
   }
   $149 = ((34156304 + (($85*12)|0)|0) + 8|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = $150 ^ $ubb_piece2$047;
   $152 = ($150|0)==($ubb_piece2$047|0);
   if ($152) {
    $$3$lcssa = $$4$lcssa;
    break;
   } else {
    $$346 = $$4$lcssa;$ubb_piece2$047 = $151;
   }
  }
 }
 $153 = (($ptree) + 296|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = (($ptree) + 300|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $156 | $154;
 $158 = ($157|0)==(0);
 if ($158) {
  $$5$lcssa = $$3$lcssa;
 } else {
  $$531 = $$3$lcssa;$ubb_piece0$132 = $154;$ubb_piece1$133 = $156;
  while(1) {
   $159 = (_first_one01($ubb_piece0$132,$ubb_piece1$133)|0);
   $160 = ((33572424 + ($159<<3)|0) + 2|0);
   $161 = HEAP8[$160>>0]|0;
   $162 = $161&255;
   $163 = ((($ptree) + ($162<<2)|0) + 32|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = ((33572424 + ($159<<3)|0) + 3|0);
   $166 = HEAP8[$165>>0]|0;
   $167 = $166&255;
   $168 = $164 >>> $167;
   $169 = $168 & 127;
   $170 = (33572424 + ($159<<3)|0);
   $171 = HEAP8[$170>>0]|0;
   $172 = $171&255;
   $173 = ((($ptree) + ($172<<2)|0) + 8|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = ((($ptree) + ($172<<2)|0) + 20|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = $176 | $174;
   $178 = ((33572424 + ($159<<3)|0) + 1|0);
   $179 = HEAP8[$178>>0]|0;
   $180 = $179&255;
   $181 = $177 >>> $180;
   $182 = $181 & 127;
   $183 = (((33953152 + (($159*1536)|0)|0) + (($169*12)|0)|0) + 8|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (((33828736 + (($159*1536)|0)|0) + (($182*12)|0)|0) + 8|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = $186 | $184;
   $188 = $187 & $5;
   $189 = $159 << 7;
   $190 = ($188|0)==(0);
   if ($190) {
    $$6$lcssa = $$531;
   } else {
    $$625 = $$531;$ubb_move2$226 = $188;
    while(1) {
     $191 = (_first_one2($ubb_move2$226)|0);
     $192 = ((($ptree) + ($191)|0) + 512|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193 << 24 >> 24;
     $195 = $194 << 19;
     $196 = $189 | $191;
     $197 = $196 | $195;
     $198 = $197 | 229376;
     $199 = (($$625) + 4|0);
     HEAP32[$$625>>2] = $198;
     $200 = ((34156304 + (($191*12)|0)|0) + 8|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = $201 ^ $ubb_move2$226;
     $203 = ($201|0)==($ubb_move2$226|0);
     if ($203) {
      $$6$lcssa = $199;
      break;
     } else {
      $$625 = $199;$ubb_move2$226 = $202;
     }
    }
   }
   $204 = (34156304 + (($159*12)|0)|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = $205 ^ $ubb_piece0$132;
   $207 = ((34156304 + (($159*12)|0)|0) + 4|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = $208 ^ $ubb_piece1$133;
   $210 = $209 | $206;
   $211 = ($210|0)==(0);
   if ($211) {
    $$5$lcssa = $$6$lcssa;
    break;
   } else {
    $$531 = $$6$lcssa;$ubb_piece0$132 = $206;$ubb_piece1$133 = $209;
   }
  }
 }
 $212 = (($ptree) + 304|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = ($213|0)==(0);
 if ($214) {
  $$7$lcssa = $$5$lcssa;
 } else {
  $$719 = $$5$lcssa;$ubb_piece2$120 = $213;
  while(1) {
   $215 = (_first_one2($ubb_piece2$120)|0);
   $216 = ((33572424 + ($215<<3)|0) + 2|0);
   $217 = HEAP8[$216>>0]|0;
   $218 = $217&255;
   $219 = ((($ptree) + ($218<<2)|0) + 32|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = ((33572424 + ($215<<3)|0) + 3|0);
   $222 = HEAP8[$221>>0]|0;
   $223 = $222&255;
   $224 = $220 >>> $223;
   $225 = $224 & 127;
   $226 = ((33953152 + (($215*1536)|0)|0) + (($225*12)|0)|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = (33572424 + ($215<<3)|0);
   $229 = HEAP8[$228>>0]|0;
   $230 = $229&255;
   $231 = ((($ptree) + ($230<<2)|0) + 8|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = ((($ptree) + ($230<<2)|0) + 20|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 | $232;
   $236 = ((33572424 + ($215<<3)|0) + 1|0);
   $237 = HEAP8[$236>>0]|0;
   $238 = $237&255;
   $239 = $235 >>> $238;
   $240 = $239 & 127;
   $241 = ((33828736 + (($215*1536)|0)|0) + (($240*12)|0)|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = $242 | $227;
   $244 = (((33953152 + (($215*1536)|0)|0) + (($225*12)|0)|0) + 4|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = (((33828736 + (($215*1536)|0)|0) + (($240*12)|0)|0) + 4|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = $247 | $245;
   $249 = (((33953152 + (($215*1536)|0)|0) + (($225*12)|0)|0) + 8|0);
   $250 = HEAP32[$249>>2]|0;
   $251 = (((33828736 + (($215*1536)|0)|0) + (($240*12)|0)|0) + 8|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = $252 | $250;
   $254 = $243 & $1;
   $255 = $248 & $3;
   $256 = $253 & $5;
   $257 = $215 << 7;
   $258 = $255 | $256;
   $259 = $258 | $254;
   $260 = ($259|0)==(0);
   if ($260) {
    $$8$lcssa = $$719;
   } else {
    $$811 = $$719;$bb_move$sroa$0$114 = $254;$bb_move$sroa$1$113 = $255;$bb_move$sroa$2$112 = $256;
    while(1) {
     $261 = (_first_one012($bb_move$sroa$0$114,$bb_move$sroa$1$113,$bb_move$sroa$2$112)|0);
     $262 = ((($ptree) + ($261)|0) + 512|0);
     $263 = HEAP8[$262>>0]|0;
     $264 = $263 << 24 >> 24;
     $265 = $264 << 19;
     $266 = $257 | $261;
     $267 = $266 | $265;
     $268 = $267 | 229376;
     $269 = (($$811) + 4|0);
     HEAP32[$$811>>2] = $268;
     $270 = (34156304 + (($261*12)|0)|0);
     $271 = HEAP32[$270>>2]|0;
     $272 = $271 ^ $bb_move$sroa$0$114;
     $273 = ((34156304 + (($261*12)|0)|0) + 4|0);
     $274 = HEAP32[$273>>2]|0;
     $275 = $274 ^ $bb_move$sroa$1$113;
     $276 = ((34156304 + (($261*12)|0)|0) + 8|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = $277 ^ $bb_move$sroa$2$112;
     $279 = $275 | $278;
     $280 = $279 | $272;
     $281 = ($280|0)==(0);
     if ($281) {
      $$8$lcssa = $269;
      break;
     } else {
      $$811 = $269;$bb_move$sroa$0$114 = $272;$bb_move$sroa$1$113 = $275;$bb_move$sroa$2$112 = $278;
     }
    }
   }
   $282 = ((34156304 + (($215*12)|0)|0) + 8|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = $283 ^ $ubb_piece2$120;
   $285 = ($283|0)==($ubb_piece2$120|0);
   if ($285) {
    $$7$lcssa = $$8$lcssa;
    break;
   } else {
    $$719 = $$8$lcssa;$ubb_piece2$120 = $284;
   }
  }
 }
 $286 = (($ptree) + 200|0);
 $287 = HEAP32[$286>>2]|0;
 $288 = (($ptree) + 204|0);
 $289 = HEAP32[$288>>2]|0;
 $290 = (($ptree) + 208|0);
 $291 = HEAP32[$290>>2]|0;
 $292 = $5 & 261632;
 $293 = $289 | $291;
 $294 = $293 | $287;
 $295 = ($294|0)==(0);
 if ($295) {
  $$9$lcssa = $$7$lcssa;
  STACKTOP = sp;return ($$9$lcssa|0);
 } else {
  $$93 = $$7$lcssa;$bb_piece$sroa$0$06 = $287;$bb_piece$sroa$1$05 = $289;$bb_piece$sroa$2$04 = $291;
 }
 while(1) {
  $296 = (_first_one012($bb_piece$sroa$0$06,$bb_piece$sroa$1$05,$bb_piece$sroa$2$04)|0);
  $297 = ((33572424 + ($296<<3)|0) + 2|0);
  $298 = HEAP8[$297>>0]|0;
  $299 = $298&255;
  $300 = ((($ptree) + ($299<<2)|0) + 32|0);
  $301 = HEAP32[$300>>2]|0;
  $302 = ((33572424 + ($296<<3)|0) + 3|0);
  $303 = HEAP8[$302>>0]|0;
  $304 = $303&255;
  $305 = $301 >>> $304;
  $306 = $305 & 127;
  $307 = (((33953152 + (($296*1536)|0)|0) + (($306*12)|0)|0) + 8|0);
  $308 = HEAP32[$307>>2]|0;
  $309 = ((34160208 + (($296*12)|0)|0) + 8|0);
  $310 = HEAP32[$309>>2]|0;
  $311 = $292 & $308;
  $312 = $311 & $310;
  $313 = $296 << 7;
  $314 = ($312|0)==(0);
  if ($314) {
   $$10$lcssa = $$93;
  } else {
   $$101 = $$93;$ubb_move2$32 = $312;
   while(1) {
    $315 = (_first_one2($ubb_move2$32)|0);
    $316 = ((($ptree) + ($315)|0) + 512|0);
    $317 = HEAP8[$316>>0]|0;
    $318 = $317 << 24 >> 24;
    $319 = $318 << 19;
    $320 = $313 | $315;
    $321 = $320 | $319;
    $322 = $321 | 65536;
    $323 = (($$101) + 4|0);
    HEAP32[$$101>>2] = $322;
    $324 = ((34156304 + (($315*12)|0)|0) + 8|0);
    $325 = HEAP32[$324>>2]|0;
    $326 = $325 ^ $ubb_move2$32;
    $327 = ($325|0)==($ubb_move2$32|0);
    if ($327) {
     $$10$lcssa = $323;
     break;
    } else {
     $$101 = $323;$ubb_move2$32 = $326;
    }
   }
  }
  $328 = (34156304 + (($296*12)|0)|0);
  $329 = HEAP32[$328>>2]|0;
  $330 = $329 ^ $bb_piece$sroa$0$06;
  $331 = ((34156304 + (($296*12)|0)|0) + 4|0);
  $332 = HEAP32[$331>>2]|0;
  $333 = $332 ^ $bb_piece$sroa$1$05;
  $334 = ((34156304 + (($296*12)|0)|0) + 8|0);
  $335 = HEAP32[$334>>2]|0;
  $336 = $335 ^ $bb_piece$sroa$2$04;
  $337 = $333 | $336;
  $338 = $337 | $330;
  $339 = ($338|0)==(0);
  if ($339) {
   $$9$lcssa = $$10$lcssa;
   break;
  } else {
   $$93 = $$10$lcssa;$bb_piece$sroa$0$06 = $330;$bb_piece$sroa$1$05 = $333;$bb_piece$sroa$2$04 = $336;
  }
 }
 STACKTOP = sp;return ($$9$lcssa|0);
}
function _w_gen_nocap_nopro_ex2($ptree,$pmove) {
 $ptree = $ptree|0;
 $pmove = $pmove|0;
 var $$0$lcssa = 0, $$066 = 0, $$1$lcssa = 0, $$10$lcssa = 0, $$102 = 0, $$160 = 0, $$2$lcssa = 0, $$253 = 0, $$3$lcssa = 0, $$347 = 0, $$4$lcssa = 0, $$441 = 0, $$5$lcssa = 0, $$533 = 0, $$6$lcssa = 0, $$626 = 0, $$7$lcssa = 0, $$720 = 0, $$8$lcssa = 0, $$814 = 0;
 var $$9$lcssa = 0, $$96 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bb_move$sroa$0$040 = 0, $bb_move$sroa$0$113 = 0, $bb_move$sroa$1$039 = 0, $bb_move$sroa$1$112 = 0, $bb_move$sroa$2$038 = 0, $bb_move$sroa$2$111 = 0, $bb_piece$sroa$0$05 = 0, $bb_piece$sroa$1$04 = 0, $bb_piece$sroa$2$03 = 0, $ubb_move2$065 = 0, $ubb_move2$152 = 0, $ubb_move2$225 = 0, $ubb_move2$31 = 0, $ubb_piece0$058 = 0, $ubb_piece0$131 = 0, $ubb_piece1$059 = 0;
 var $ubb_piece1$132 = 0, $ubb_piece2$046 = 0, $ubb_piece2$119 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ptree) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ptree) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | $1;
 $5 = (($ptree) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($ptree) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 | $6;
 $10 = (($ptree) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($ptree) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 | $11;
 $15 = $4 ^ -1;
 $16 = $9 ^ -1;
 $17 = $14 ^ -1;
 $18 = (($ptree) + 184|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $17 & 134217216;
 $21 = $20 & $19;
 $22 = ($21|0)==(0);
 if ($22) {
  $$0$lcssa = $pmove;
 } else {
  $$066 = $pmove;$ubb_move2$065 = $21;
  while(1) {
   $23 = (_first_one2($ubb_move2$065)|0);
   $24 = $23 << 7;
   $25 = (($24) + -1152)|0;
   $26 = $23 | $25;
   $27 = $26 | 32768;
   $28 = (($$066) + 4|0);
   HEAP32[$$066>>2] = $27;
   $29 = ((34156304 + (($23*12)|0)|0) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 ^ $ubb_move2$065;
   $32 = ($30|0)==($ubb_move2$065|0);
   if ($32) {
    $$0$lcssa = $28;
    break;
   } else {
    $$066 = $28;$ubb_move2$065 = $31;
   }
  }
 }
 $33 = (($ptree) + 272|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($ptree) + 276|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 | $34;
 $38 = ($37|0)==(0);
 if ($38) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$160 = $$0$lcssa;$ubb_piece0$058 = $34;$ubb_piece1$059 = $36;
  while(1) {
   $39 = (_first_one01($ubb_piece0$058,$ubb_piece1$059)|0);
   $40 = ((33572424 + ($39<<3)|0) + 6|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = ((($ptree) + ($42<<2)|0) + 56|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((33572424 + ($39<<3)|0) + 7|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = $44 >>> $47;
   $49 = $48 & 127;
   $50 = (((33704320 + (($39*1536)|0)|0) + (($49*12)|0)|0) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((33572424 + ($39<<3)|0) + 4|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $55 = ((($ptree) + ($54<<2)|0) + 44|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ((33572424 + ($39<<3)|0) + 5|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = $56 >>> $59;
   $61 = $60 & 127;
   $62 = (((33579904 + (($39*1536)|0)|0) + (($61*12)|0)|0) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | $51;
   $65 = $64 & $17;
   $66 = $39 << 7;
   $67 = ($65|0)==(0);
   if ($67) {
    $$2$lcssa = $$160;
   } else {
    $$253 = $$160;$ubb_move2$152 = $65;
    while(1) {
     $68 = (_first_one2($ubb_move2$152)|0);
     $69 = $66 | $68;
     $70 = $69 | 196608;
     $71 = (($$253) + 4|0);
     HEAP32[$$253>>2] = $70;
     $72 = ((34156304 + (($68*12)|0)|0) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = $73 ^ $ubb_move2$152;
     $75 = ($73|0)==($ubb_move2$152|0);
     if ($75) {
      $$2$lcssa = $71;
      break;
     } else {
      $$253 = $71;$ubb_move2$152 = $74;
     }
    }
   }
   $76 = (34156304 + (($39*12)|0)|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $77 ^ $ubb_piece0$058;
   $79 = ((34156304 + (($39*12)|0)|0) + 4|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $80 ^ $ubb_piece1$059;
   $82 = $81 | $78;
   $83 = ($82|0)==(0);
   if ($83) {
    $$1$lcssa = $$2$lcssa;
    break;
   } else {
    $$160 = $$2$lcssa;$ubb_piece0$058 = $78;$ubb_piece1$059 = $81;
   }
  }
 }
 $84 = (($ptree) + 280|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85|0)==(0);
 if ($86) {
  $$3$lcssa = $$1$lcssa;
 } else {
  $$347 = $$1$lcssa;$ubb_piece2$046 = $85;
  while(1) {
   $87 = (_first_one2($ubb_piece2$046)|0);
   $88 = ((33572424 + ($87<<3)|0) + 6|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = $89&255;
   $91 = ((($ptree) + ($90<<2)|0) + 56|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ((33572424 + ($87<<3)|0) + 7|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = $94&255;
   $96 = $92 >>> $95;
   $97 = $96 & 127;
   $98 = ((33704320 + (($87*1536)|0)|0) + (($97*12)|0)|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ((33572424 + ($87<<3)|0) + 4|0);
   $101 = HEAP8[$100>>0]|0;
   $102 = $101&255;
   $103 = ((($ptree) + ($102<<2)|0) + 44|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((33572424 + ($87<<3)|0) + 5|0);
   $106 = HEAP8[$105>>0]|0;
   $107 = $106&255;
   $108 = $104 >>> $107;
   $109 = $108 & 127;
   $110 = ((33579904 + (($87*1536)|0)|0) + (($109*12)|0)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $111 | $99;
   $113 = (((33704320 + (($87*1536)|0)|0) + (($97*12)|0)|0) + 4|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (((33579904 + (($87*1536)|0)|0) + (($109*12)|0)|0) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $116 | $114;
   $118 = (((33704320 + (($87*1536)|0)|0) + (($97*12)|0)|0) + 8|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (((33579904 + (($87*1536)|0)|0) + (($109*12)|0)|0) + 8|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $121 | $119;
   $123 = $112 & $15;
   $124 = $117 & $16;
   $125 = $122 & $17;
   $126 = $87 << 7;
   $127 = $124 | $125;
   $128 = $127 | $123;
   $129 = ($128|0)==(0);
   if ($129) {
    $$4$lcssa = $$347;
   } else {
    $$441 = $$347;$bb_move$sroa$0$040 = $123;$bb_move$sroa$1$039 = $124;$bb_move$sroa$2$038 = $125;
    while(1) {
     $130 = (_first_one012($bb_move$sroa$0$040,$bb_move$sroa$1$039,$bb_move$sroa$2$038)|0);
     $131 = $126 | $130;
     $132 = $131 | 196608;
     $133 = (($$441) + 4|0);
     HEAP32[$$441>>2] = $132;
     $134 = (34156304 + (($130*12)|0)|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 ^ $bb_move$sroa$0$040;
     $137 = ((34156304 + (($130*12)|0)|0) + 4|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = $138 ^ $bb_move$sroa$1$039;
     $140 = ((34156304 + (($130*12)|0)|0) + 8|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $141 ^ $bb_move$sroa$2$038;
     $143 = $139 | $142;
     $144 = $143 | $136;
     $145 = ($144|0)==(0);
     if ($145) {
      $$4$lcssa = $133;
      break;
     } else {
      $$441 = $133;$bb_move$sroa$0$040 = $136;$bb_move$sroa$1$039 = $139;$bb_move$sroa$2$038 = $142;
     }
    }
   }
   $146 = ((34156304 + (($87*12)|0)|0) + 8|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = $147 ^ $ubb_piece2$046;
   $149 = ($147|0)==($ubb_piece2$046|0);
   if ($149) {
    $$3$lcssa = $$4$lcssa;
    break;
   } else {
    $$347 = $$4$lcssa;$ubb_piece2$046 = $148;
   }
  }
 }
 $150 = (($ptree) + 296|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = (($ptree) + 300|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = $153 | $151;
 $155 = ($154|0)==(0);
 if ($155) {
  $$5$lcssa = $$3$lcssa;
 } else {
  $$533 = $$3$lcssa;$ubb_piece0$131 = $151;$ubb_piece1$132 = $153;
  while(1) {
   $156 = (_first_one01($ubb_piece0$131,$ubb_piece1$132)|0);
   $157 = ((33572424 + ($156<<3)|0) + 2|0);
   $158 = HEAP8[$157>>0]|0;
   $159 = $158&255;
   $160 = ((($ptree) + ($159<<2)|0) + 32|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = ((33572424 + ($156<<3)|0) + 3|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = $161 >>> $164;
   $166 = $165 & 127;
   $167 = (33572424 + ($156<<3)|0);
   $168 = HEAP8[$167>>0]|0;
   $169 = $168&255;
   $170 = ((($ptree) + ($169<<2)|0) + 8|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ((($ptree) + ($169<<2)|0) + 20|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $173 | $171;
   $175 = ((33572424 + ($156<<3)|0) + 1|0);
   $176 = HEAP8[$175>>0]|0;
   $177 = $176&255;
   $178 = $174 >>> $177;
   $179 = $178 & 127;
   $180 = (((33953152 + (($156*1536)|0)|0) + (($166*12)|0)|0) + 8|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = (((33828736 + (($156*1536)|0)|0) + (($179*12)|0)|0) + 8|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = $183 | $181;
   $185 = $184 & $17;
   $186 = $156 << 7;
   $187 = ($185|0)==(0);
   if ($187) {
    $$6$lcssa = $$533;
   } else {
    $$626 = $$533;$ubb_move2$225 = $185;
    while(1) {
     $188 = (_first_one2($ubb_move2$225)|0);
     $189 = $186 | $188;
     $190 = $189 | 229376;
     $191 = (($$626) + 4|0);
     HEAP32[$$626>>2] = $190;
     $192 = ((34156304 + (($188*12)|0)|0) + 8|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = $193 ^ $ubb_move2$225;
     $195 = ($193|0)==($ubb_move2$225|0);
     if ($195) {
      $$6$lcssa = $191;
      break;
     } else {
      $$626 = $191;$ubb_move2$225 = $194;
     }
    }
   }
   $196 = (34156304 + (($156*12)|0)|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $197 ^ $ubb_piece0$131;
   $199 = ((34156304 + (($156*12)|0)|0) + 4|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = $200 ^ $ubb_piece1$132;
   $202 = $201 | $198;
   $203 = ($202|0)==(0);
   if ($203) {
    $$5$lcssa = $$6$lcssa;
    break;
   } else {
    $$533 = $$6$lcssa;$ubb_piece0$131 = $198;$ubb_piece1$132 = $201;
   }
  }
 }
 $204 = (($ptree) + 304|0);
 $205 = HEAP32[$204>>2]|0;
 $206 = ($205|0)==(0);
 if ($206) {
  $$7$lcssa = $$5$lcssa;
 } else {
  $$720 = $$5$lcssa;$ubb_piece2$119 = $205;
  while(1) {
   $207 = (_first_one2($ubb_piece2$119)|0);
   $208 = ((33572424 + ($207<<3)|0) + 2|0);
   $209 = HEAP8[$208>>0]|0;
   $210 = $209&255;
   $211 = ((($ptree) + ($210<<2)|0) + 32|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = ((33572424 + ($207<<3)|0) + 3|0);
   $214 = HEAP8[$213>>0]|0;
   $215 = $214&255;
   $216 = $212 >>> $215;
   $217 = $216 & 127;
   $218 = ((33953152 + (($207*1536)|0)|0) + (($217*12)|0)|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = (33572424 + ($207<<3)|0);
   $221 = HEAP8[$220>>0]|0;
   $222 = $221&255;
   $223 = ((($ptree) + ($222<<2)|0) + 8|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = ((($ptree) + ($222<<2)|0) + 20|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = $226 | $224;
   $228 = ((33572424 + ($207<<3)|0) + 1|0);
   $229 = HEAP8[$228>>0]|0;
   $230 = $229&255;
   $231 = $227 >>> $230;
   $232 = $231 & 127;
   $233 = ((33828736 + (($207*1536)|0)|0) + (($232*12)|0)|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 | $219;
   $236 = (((33953152 + (($207*1536)|0)|0) + (($217*12)|0)|0) + 4|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = (((33828736 + (($207*1536)|0)|0) + (($232*12)|0)|0) + 4|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = $239 | $237;
   $241 = (((33953152 + (($207*1536)|0)|0) + (($217*12)|0)|0) + 8|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = (((33828736 + (($207*1536)|0)|0) + (($232*12)|0)|0) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = $244 | $242;
   $246 = $235 & $15;
   $247 = $240 & $16;
   $248 = $245 & $17;
   $249 = $207 << 7;
   $250 = $247 | $248;
   $251 = $250 | $246;
   $252 = ($251|0)==(0);
   if ($252) {
    $$8$lcssa = $$720;
   } else {
    $$814 = $$720;$bb_move$sroa$0$113 = $246;$bb_move$sroa$1$112 = $247;$bb_move$sroa$2$111 = $248;
    while(1) {
     $253 = (_first_one012($bb_move$sroa$0$113,$bb_move$sroa$1$112,$bb_move$sroa$2$111)|0);
     $254 = $249 | $253;
     $255 = $254 | 229376;
     $256 = (($$814) + 4|0);
     HEAP32[$$814>>2] = $255;
     $257 = (34156304 + (($253*12)|0)|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = $258 ^ $bb_move$sroa$0$113;
     $260 = ((34156304 + (($253*12)|0)|0) + 4|0);
     $261 = HEAP32[$260>>2]|0;
     $262 = $261 ^ $bb_move$sroa$1$112;
     $263 = ((34156304 + (($253*12)|0)|0) + 8|0);
     $264 = HEAP32[$263>>2]|0;
     $265 = $264 ^ $bb_move$sroa$2$111;
     $266 = $262 | $265;
     $267 = $266 | $259;
     $268 = ($267|0)==(0);
     if ($268) {
      $$8$lcssa = $256;
      break;
     } else {
      $$814 = $256;$bb_move$sroa$0$113 = $259;$bb_move$sroa$1$112 = $262;$bb_move$sroa$2$111 = $265;
     }
    }
   }
   $269 = ((34156304 + (($207*12)|0)|0) + 8|0);
   $270 = HEAP32[$269>>2]|0;
   $271 = $270 ^ $ubb_piece2$119;
   $272 = ($270|0)==($ubb_piece2$119|0);
   if ($272) {
    $$7$lcssa = $$8$lcssa;
    break;
   } else {
    $$720 = $$8$lcssa;$ubb_piece2$119 = $271;
   }
  }
 }
 $273 = (($ptree) + 200|0);
 $274 = HEAP32[$273>>2]|0;
 $275 = (($ptree) + 204|0);
 $276 = HEAP32[$275>>2]|0;
 $277 = (($ptree) + 208|0);
 $278 = HEAP32[$277>>2]|0;
 $279 = $17 & 261632;
 $280 = $276 | $278;
 $281 = $280 | $274;
 $282 = ($281|0)==(0);
 if ($282) {
  $$9$lcssa = $$7$lcssa;
  STACKTOP = sp;return ($$9$lcssa|0);
 } else {
  $$96 = $$7$lcssa;$bb_piece$sroa$0$05 = $274;$bb_piece$sroa$1$04 = $276;$bb_piece$sroa$2$03 = $278;
 }
 while(1) {
  $283 = (_first_one012($bb_piece$sroa$0$05,$bb_piece$sroa$1$04,$bb_piece$sroa$2$03)|0);
  $284 = ((33572424 + ($283<<3)|0) + 2|0);
  $285 = HEAP8[$284>>0]|0;
  $286 = $285&255;
  $287 = ((($ptree) + ($286<<2)|0) + 32|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = ((33572424 + ($283<<3)|0) + 3|0);
  $290 = HEAP8[$289>>0]|0;
  $291 = $290&255;
  $292 = $288 >>> $291;
  $293 = $292 & 127;
  $294 = (((33953152 + (($283*1536)|0)|0) + (($293*12)|0)|0) + 8|0);
  $295 = HEAP32[$294>>2]|0;
  $296 = ((34160208 + (($283*12)|0)|0) + 8|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = $279 & $295;
  $299 = $298 & $297;
  $300 = $283 << 7;
  $301 = ($299|0)==(0);
  if ($301) {
   $$10$lcssa = $$96;
  } else {
   $$102 = $$96;$ubb_move2$31 = $299;
   while(1) {
    $302 = (_first_one2($ubb_move2$31)|0);
    $303 = $300 | $302;
    $304 = $303 | 65536;
    $305 = (($$102) + 4|0);
    HEAP32[$$102>>2] = $304;
    $306 = ((34156304 + (($302*12)|0)|0) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = $307 ^ $ubb_move2$31;
    $309 = ($307|0)==($ubb_move2$31|0);
    if ($309) {
     $$10$lcssa = $305;
     break;
    } else {
     $$102 = $305;$ubb_move2$31 = $308;
    }
   }
  }
  $310 = (34156304 + (($283*12)|0)|0);
  $311 = HEAP32[$310>>2]|0;
  $312 = $311 ^ $bb_piece$sroa$0$05;
  $313 = ((34156304 + (($283*12)|0)|0) + 4|0);
  $314 = HEAP32[$313>>2]|0;
  $315 = $314 ^ $bb_piece$sroa$1$04;
  $316 = ((34156304 + (($283*12)|0)|0) + 8|0);
  $317 = HEAP32[$316>>2]|0;
  $318 = $317 ^ $bb_piece$sroa$2$03;
  $319 = $315 | $318;
  $320 = $319 | $312;
  $321 = ($320|0)==(0);
  if ($321) {
   $$9$lcssa = $$10$lcssa;
   break;
  } else {
   $$96 = $$10$lcssa;$bb_piece$sroa$0$05 = $312;$bb_piece$sroa$1$04 = $315;$bb_piece$sroa$2$03 = $318;
  }
 }
 STACKTOP = sp;return ($$9$lcssa|0);
}
function _b_gen_evasion($ptree,$pmove) {
 $ptree = $ptree|0;
 $pmove = $pmove|0;
 var $$ = 0, $$$v = 0, $$0 = 0, $$01$lcssa = 0, $$01198 = 0, $$1 = 0, $$10 = 0, $$11 = 0, $$12$ph237 = 0, $$12$ph241 = 0, $$13 = 0, $$14$ph229 = 0, $$14$ph233 = 0, $$15 = 0, $$16$ph221 = 0, $$16$ph225 = 0, $$17 = 0, $$18$ph213 = 0, $$18$ph217 = 0, $$19 = 0;
 var $$2$ph = 0, $$20$ph205 = 0, $$20$ph209 = 0, $$21 = 0, $$22$lcssa = 0, $$2256 = 0, $$24$lcssa = 0, $$24$ph = 0, $$2449 = 0, $$2544 = 0, $$27$lcssa = 0, $$27$ph = 0, $$2737 = 0, $$28$lcssa = 0, $$2832$us = 0, $$2923$us = 0, $$3$ph$be = 0, $$3$ph261 = 0, $$3$ph265 = 0, $$3019$us = 0;
 var $$3112$us = 0, $$32$ph = 0, $$328$us = 0, $$336$us = 0, $$42 = 0, $$5$ph253 = 0, $$5$ph257 = 0, $$6 = 0, $$74 = 0, $$8 = 0, $$9$ph245 = 0, $$9$ph249 = 0, $$pre = 0, $$pre408 = 0, $$pre409 = 0, $$pre410 = 0, $$pre411 = 0, $$pre412 = 0, $$pre413 = 0, $$pre414 = 0;
 var $$pre415 = 0, $$pre416 = 0, $$pre417 = 0, $$pre418 = 0, $$pre419 = 0, $$pre420 = 0, $$pre421 = 0, $$pre422 = 0, $$pre423 = 0, $$pre424 = 0, $$pre425 = 0, $$pre426 = 0, $$pre427 = 0, $$pre428 = 0, $$pre429 = 0, $$pre430 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0;
 var $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0;
 var $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0;
 var $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0;
 var $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $ahand = 0, $ais_pawn = 0, $bb_desti$sroa$0$0195 = 0, $bb_desti$sroa$0$1 = 0, $bb_desti$sroa$0$1$ph = 0, $bb_desti$sroa$0$2 = 0, $bb_desti$sroa$0$3 = 0, $bb_desti$sroa$0$4 = 0, $bb_desti$sroa$0$5 = 0, $bb_desti$sroa$0$6 = 0, $bb_desti$sroa$0$7 = 0, $bb_desti$sroa$0$8 = 0, $bb_desti$sroa$1$0196 = 0, $bb_desti$sroa$1$1 = 0, $bb_desti$sroa$1$1$ph = 0, $bb_desti$sroa$1$2 = 0, $bb_desti$sroa$1$3 = 0, $bb_desti$sroa$1$4 = 0, $bb_desti$sroa$1$5 = 0, $bb_desti$sroa$1$6 = 0;
 var $bb_desti$sroa$1$7 = 0, $bb_desti$sroa$1$8 = 0, $bb_desti$sroa$2$0197 = 0, $bb_desti$sroa$2$1 = 0, $bb_desti$sroa$2$1$ph = 0, $bb_desti$sroa$2$2 = 0, $bb_desti$sroa$2$3 = 0, $bb_desti$sroa$2$4 = 0, $bb_desti$sroa$2$5 = 0, $bb_desti$sroa$2$6 = 0, $bb_desti$sroa$2$7 = 0, $bb_desti$sroa$2$8 = 0, $bb_piece$sroa$0$0$ph264 = 0, $bb_piece$sroa$0$0186 = 0, $bb_piece$sroa$0$1$ph256 = 0, $bb_piece$sroa$0$1172 = 0, $bb_piece$sroa$0$2$ph248 = 0, $bb_piece$sroa$0$2156 = 0, $bb_piece$sroa$0$3$ph240 = 0, $bb_piece$sroa$0$3139 = 0;
 var $bb_piece$sroa$0$4$ph232 = 0, $bb_piece$sroa$0$4122 = 0, $bb_piece$sroa$0$5$ph224 = 0, $bb_piece$sroa$0$5105 = 0, $bb_piece$sroa$0$6$ph216 = 0, $bb_piece$sroa$0$688 = 0, $bb_piece$sroa$0$7$ph208 = 0, $bb_piece$sroa$0$771 = 0, $bb_piece$sroa$1$0$ph263 = 0, $bb_piece$sroa$1$0185 = 0, $bb_piece$sroa$1$1$ph255 = 0, $bb_piece$sroa$1$1171 = 0, $bb_piece$sroa$1$2$ph247 = 0, $bb_piece$sroa$1$2155 = 0, $bb_piece$sroa$1$3$ph239 = 0, $bb_piece$sroa$1$3138 = 0, $bb_piece$sroa$1$4$ph231 = 0, $bb_piece$sroa$1$4121 = 0, $bb_piece$sroa$1$5$ph223 = 0, $bb_piece$sroa$1$5104 = 0;
 var $bb_piece$sroa$1$6$ph215 = 0, $bb_piece$sroa$1$687 = 0, $bb_piece$sroa$1$7$ph207 = 0, $bb_piece$sroa$1$770 = 0, $bb_piece$sroa$2$0$ph262 = 0, $bb_piece$sroa$2$0184 = 0, $bb_piece$sroa$2$1$ph254 = 0, $bb_piece$sroa$2$1170 = 0, $bb_piece$sroa$2$2$ph246 = 0, $bb_piece$sroa$2$2154 = 0, $bb_piece$sroa$2$3$ph238 = 0, $bb_piece$sroa$2$3137 = 0, $bb_piece$sroa$2$4$ph230 = 0, $bb_piece$sroa$2$4120 = 0, $bb_piece$sroa$2$5$ph222 = 0, $bb_piece$sroa$2$5103 = 0, $bb_piece$sroa$2$6$ph214 = 0, $bb_piece$sroa$2$686 = 0, $bb_piece$sroa$2$7$ph206 = 0, $bb_piece$sroa$2$769 = 0;
 var $bb_target$sroa$0$053 = 0, $bb_target$sroa$0$129 = 0, $bb_target$sroa$0$129$us = 0, $bb_target$sroa$1$054 = 0, $bb_target$sroa$1$130 = 0, $bb_target$sroa$1$130$us = 0, $bb_target$sroa$2$055 = 0, $bb_target$sroa$2$131 = 0, $bb_target$sroa$2$131$us = 0, $exitcond = 0, $exitcond268 = 0, $exitcond401 = 0, $exitcond404 = 0, $exitcond407 = 0, $i$048 = 0, $i$136 = 0, $i$222$us = 0, $i$311$us = 0, $i$45$us = 0, $nhand$0 = 0;
 var $nhand$1 = 0, $nhand$2 = 0, $nhand$3 = 0, $nhand$4 = 0, $nhand$5 = 0, $or$cond = 0, $scevgep = 0, $scevgep267 = 0, $scevgep400 = 0, $scevgep403 = 0, $scevgep406 = 0, $ubb_target0a$07 = 0, $ubb_target0a$07$us = 0, $ubb_target0b$043 = 0, $ubb_target0b$118 = 0, $ubb_target0b$118$us = 0, $utemp$1 = 0, $utemp$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ais_pawn = sp + 40|0;
 $ahand = sp + 16|0;
 $0 = sp;
 $1 = (($ptree) + 593|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = (34156304 + (($3*12)|0)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($ptree) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 ^ $5;
 HEAP32[$6>>2] = $8;
 $9 = ((34156304 + (($3*12)|0)|0) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($ptree) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 ^ $10;
 HEAP32[$11>>2] = $13;
 $14 = ((34156304 + (($3*12)|0)|0) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($ptree) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 ^ $15;
 HEAP32[$16>>2] = $18;
 $19 = (34157280 + (($3*12)|0)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($ptree) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 ^ $20;
 HEAP32[$21>>2] = $23;
 $24 = ((34157280 + (($3*12)|0)|0) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($ptree) + 36|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 ^ $25;
 HEAP32[$26>>2] = $28;
 $29 = ((34157280 + (($3*12)|0)|0) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($ptree) + 40|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 ^ $30;
 HEAP32[$31>>2] = $33;
 $34 = (34158256 + (($3*12)|0)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($ptree) + 44|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 ^ $35;
 HEAP32[$36>>2] = $38;
 $39 = ((34158256 + (($3*12)|0)|0) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($ptree) + 48|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 ^ $40;
 HEAP32[$41>>2] = $43;
 $44 = ((34158256 + (($3*12)|0)|0) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($ptree) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 ^ $45;
 HEAP32[$46>>2] = $48;
 $49 = (34159232 + (($3*12)|0)|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($ptree) + 56|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $52 ^ $50;
 HEAP32[$51>>2] = $53;
 $54 = ((34159232 + (($3*12)|0)|0) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($ptree) + 60|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $57 ^ $55;
 HEAP32[$56>>2] = $58;
 $59 = ((34159232 + (($3*12)|0)|0) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($ptree) + 64|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62 ^ $60;
 HEAP32[$61>>2] = $63;
 $64 = (33578928 + (($3*12)|0)|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $8 ^ -1;
 $67 = $65 & $66;
 $68 = ((33578928 + (($3*12)|0)|0) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $13 ^ -1;
 $71 = $69 & $70;
 $72 = ((33578928 + (($3*12)|0)|0) + 8|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $18 ^ -1;
 $75 = $73 & $74;
 $76 = $3 << 7;
 $77 = $71 | $67;
 $78 = $77 | $75;
 $79 = ($78|0)==(0);
 if ($79) {
  $$01$lcssa = $pmove;$105 = $8;$106 = $5;$108 = $13;$109 = $10;$111 = $18;$112 = $15;$114 = $23;$115 = $20;$117 = $28;$118 = $25;$120 = $33;$121 = $30;$123 = $38;$124 = $35;$126 = $43;$127 = $40;$129 = $48;$130 = $45;$132 = $53;$133 = $50;$135 = $58;$136 = $55;$138 = $63;$139 = $60;
 } else {
  $$01198 = $pmove;$bb_desti$sroa$0$0195 = $67;$bb_desti$sroa$1$0196 = $71;$bb_desti$sroa$2$0197 = $75;
  while(1) {
   $80 = (_last_one210($bb_desti$sroa$2$0197,$bb_desti$sroa$1$0196,$bb_desti$sroa$0$0195)|0);
   $81 = (_is_black_attacked($ptree,$80)|0);
   $82 = ($81|0)==(0);
   if ($82) {
    $83 = ((($ptree) + ($80)|0) + 512|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84 << 24 >> 24;
    $86 = (0 - ($85))|0;
    $87 = $86 << 19;
    $88 = $76 | $80;
    $89 = $88 | $87;
    $90 = $89 | 262144;
    $91 = (($$01198) + 4|0);
    HEAP32[$$01198>>2] = $90;
    $$1 = $91;
   } else {
    $$1 = $$01198;
   }
   $92 = (34156304 + (($80*12)|0)|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $93 ^ $bb_desti$sroa$0$0195;
   $95 = ((34156304 + (($80*12)|0)|0) + 4|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $96 ^ $bb_desti$sroa$1$0196;
   $98 = ((34156304 + (($80*12)|0)|0) + 8|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $99 ^ $bb_desti$sroa$2$0197;
   $101 = $97 | $94;
   $102 = $101 | $100;
   $103 = ($102|0)==(0);
   if ($103) {
    break;
   } else {
    $$01198 = $$1;$bb_desti$sroa$0$0195 = $94;$bb_desti$sroa$1$0196 = $97;$bb_desti$sroa$2$0197 = $100;
   }
  }
  $$pre = HEAP32[$4>>2]|0;
  $$pre408 = HEAP32[$6>>2]|0;
  $$pre409 = HEAP32[$9>>2]|0;
  $$pre410 = HEAP32[$11>>2]|0;
  $$pre411 = HEAP32[$14>>2]|0;
  $$pre412 = HEAP32[$16>>2]|0;
  $$pre413 = HEAP32[$19>>2]|0;
  $$pre414 = HEAP32[$21>>2]|0;
  $$pre415 = HEAP32[$24>>2]|0;
  $$pre416 = HEAP32[$26>>2]|0;
  $$pre417 = HEAP32[$29>>2]|0;
  $$pre418 = HEAP32[$31>>2]|0;
  $$pre419 = HEAP32[$34>>2]|0;
  $$pre420 = HEAP32[$36>>2]|0;
  $$pre421 = HEAP32[$39>>2]|0;
  $$pre422 = HEAP32[$41>>2]|0;
  $$pre423 = HEAP32[$44>>2]|0;
  $$pre424 = HEAP32[$46>>2]|0;
  $$pre425 = HEAP32[$49>>2]|0;
  $$pre426 = HEAP32[$51>>2]|0;
  $$pre427 = HEAP32[$54>>2]|0;
  $$pre428 = HEAP32[$56>>2]|0;
  $$pre429 = HEAP32[$59>>2]|0;
  $$pre430 = HEAP32[$61>>2]|0;
  $$01$lcssa = $$1;$105 = $$pre408;$106 = $$pre;$108 = $$pre410;$109 = $$pre409;$111 = $$pre412;$112 = $$pre411;$114 = $$pre414;$115 = $$pre413;$117 = $$pre416;$118 = $$pre415;$120 = $$pre418;$121 = $$pre417;$123 = $$pre420;$124 = $$pre419;$126 = $$pre422;$127 = $$pre421;$129 = $$pre424;$130 = $$pre423;$132 = $$pre426;$133 = $$pre425;$135 = $$pre428;$136 = $$pre427;$138 = $$pre430;$139 = $$pre429;
 }
 $104 = $105 ^ $106;
 HEAP32[$6>>2] = $104;
 $107 = $108 ^ $109;
 HEAP32[$11>>2] = $107;
 $110 = $111 ^ $112;
 HEAP32[$16>>2] = $110;
 $113 = $114 ^ $115;
 HEAP32[$21>>2] = $113;
 $116 = $117 ^ $118;
 HEAP32[$26>>2] = $116;
 $119 = $120 ^ $121;
 HEAP32[$31>>2] = $119;
 $122 = $123 ^ $124;
 HEAP32[$36>>2] = $122;
 $125 = $126 ^ $127;
 HEAP32[$41>>2] = $125;
 $128 = $129 ^ $130;
 HEAP32[$46>>2] = $128;
 $131 = $132 ^ $133;
 HEAP32[$51>>2] = $131;
 $134 = $135 ^ $136;
 HEAP32[$56>>2] = $134;
 $137 = $138 ^ $139;
 HEAP32[$61>>2] = $137;
 _w_attacks_to_piece($0,$ptree,$3);
 $140 = HEAP32[$0>>2]|0;
 $141 = (($0) + 4|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = (($0) + 8|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = (_popu_count012($140,$142,$144)|0);
 $146 = ($145|0)==(2);
 if ($146) {
  $$0 = $$01$lcssa;
  STACKTOP = sp;return ($$0|0);
 }
 $147 = (_last_one210($144,$142,$140)|0);
 $148 = ((34077568 + (($3*972)|0)|0) + (($147*12)|0)|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = (((34077568 + (($3*972)|0)|0) + (($147*12)|0)|0) + 4|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = (((34077568 + (($3*972)|0)|0) + (($147*12)|0)|0) + 8|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = $149 | $140;
 $155 = $151 | $142;
 $156 = $153 | $144;
 $157 = (($ptree) + 164|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = $158 & $154;
 $160 = (($ptree) + 168|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = $161 & $155;
 $163 = (($ptree) + 172|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = $164 & $156;
 $$2$ph = $$01$lcssa;$bb_desti$sroa$0$1$ph = $159;$bb_desti$sroa$1$1$ph = $162;$bb_desti$sroa$2$1$ph = $165;
 L12: while(1) {
  $bb_desti$sroa$0$1 = $bb_desti$sroa$0$1$ph;$bb_desti$sroa$1$1 = $bb_desti$sroa$1$1$ph;$bb_desti$sroa$2$1 = $bb_desti$sroa$2$1$ph;
  while(1) {
   $166 = $bb_desti$sroa$1$1 | $bb_desti$sroa$0$1;
   $167 = $166 | $bb_desti$sroa$2$1;
   $168 = ($167|0)==(0);
   if ($168) {
    break L12;
   }
   $169 = (_last_one210($bb_desti$sroa$2$1,$bb_desti$sroa$1$1,$bb_desti$sroa$0$1)|0);
   $170 = (34156304 + (($169*12)|0)|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = $171 ^ $bb_desti$sroa$0$1;
   $173 = ((34156304 + (($169*12)|0)|0) + 4|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = $174 ^ $bb_desti$sroa$1$1;
   $176 = ((34156304 + (($169*12)|0)|0) + 8|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = $177 ^ $bb_desti$sroa$2$1;
   $179 = (($169) + 9)|0;
   $180 = ((220518304 + (($3*81)|0)|0) + ($179)|0);
   $181 = HEAP8[$180>>0]|0;
   $182 = ($181<<24>>24)==(0);
   if ($182) {
    break;
   }
   $183 = $181&255;
   $184 = (_is_pinned_on_black_king($ptree,$179,$183)|0);
   $185 = ($184|0)==(0);
   if ($185) {
    break;
   } else {
    $bb_desti$sroa$0$1 = $172;$bb_desti$sroa$1$1 = $175;$bb_desti$sroa$2$1 = $178;
   }
  }
  $186 = $179 << 7;
  $187 = $186 | $169;
  $188 = ((($ptree) + ($169)|0) + 512|0);
  $189 = HEAP8[$188>>0]|0;
  $190 = $189 << 24 >> 24;
  $191 = (0 - ($190))|0;
  $192 = $191 << 19;
  $193 = ($169|0)<(27);
  $$$v = $193 ? 49152 : 32768;
  $194 = $187 | $$$v;
  $$ = $194 | $192;
  $195 = (($$2$ph) + 4|0);
  HEAP32[$$2$ph>>2] = $$;
  $$2$ph = $195;$bb_desti$sroa$0$1$ph = $172;$bb_desti$sroa$1$1$ph = $175;$bb_desti$sroa$2$1$ph = $178;
 }
 $196 = (($ptree) + 188|0);
 $197 = HEAP32[$196>>2]|0;
 $198 = (($ptree) + 192|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = (($ptree) + 196|0);
 $201 = HEAP32[$200>>2]|0;
 $202 = $199 | $201;
 $203 = $202 | $197;
 $204 = ($203|0)==(0);
 L20: do {
  if ($204) {
   $$3$ph261 = $$2$ph;
  } else {
   $$3$ph265 = $$2$ph;$bb_piece$sroa$0$0$ph264 = $197;$bb_piece$sroa$1$0$ph263 = $199;$bb_piece$sroa$2$0$ph262 = $201;
   while(1) {
    $bb_piece$sroa$0$0186 = $bb_piece$sroa$0$0$ph264;$bb_piece$sroa$1$0185 = $bb_piece$sroa$1$0$ph263;$bb_piece$sroa$2$0184 = $bb_piece$sroa$2$0$ph262;
    while(1) {
     $205 = (_last_one210($bb_piece$sroa$2$0184,$bb_piece$sroa$1$0185,$bb_piece$sroa$0$0186)|0);
     $206 = (34156304 + (($205*12)|0)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = $207 ^ $bb_piece$sroa$0$0186;
     $209 = ((34156304 + (($205*12)|0)|0) + 4|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = $210 ^ $bb_piece$sroa$1$0185;
     $212 = ((34156304 + (($205*12)|0)|0) + 8|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = $213 ^ $bb_piece$sroa$2$0184;
     $215 = ((33572424 + ($205<<3)|0) + 2|0);
     $216 = HEAP8[$215>>0]|0;
     $217 = $216&255;
     $218 = ((($ptree) + ($217<<2)|0) + 32|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ((33572424 + ($205<<3)|0) + 3|0);
     $221 = HEAP8[$220>>0]|0;
     $222 = $221&255;
     $223 = $219 >>> $222;
     $224 = $223 & 127;
     $225 = ((33953152 + (($205*1536)|0)|0) + (($224*12)|0)|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = (((33953152 + (($205*1536)|0)|0) + (($224*12)|0)|0) + 4|0);
     $228 = HEAP32[$227>>2]|0;
     $229 = (((33953152 + (($205*1536)|0)|0) + (($224*12)|0)|0) + 8|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = (34161184 + (($205*12)|0)|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = ((34161184 + (($205*12)|0)|0) + 4|0);
     $234 = HEAP32[$233>>2]|0;
     $235 = ((34161184 + (($205*12)|0)|0) + 8|0);
     $236 = HEAP32[$235>>2]|0;
     $237 = $226 & $154;
     $238 = $237 & $232;
     $239 = $228 & $155;
     $240 = $239 & $234;
     $241 = $230 & $156;
     $242 = $241 & $236;
     $243 = $240 | $238;
     $244 = $243 | $242;
     $245 = ($244|0)==(0);
     if (!($245)) {
      $249 = ((220518304 + (($3*81)|0)|0) + ($205)|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = ($250<<24>>24)==(0);
      if ($251) {
       break;
      }
      $252 = $250&255;
      $253 = (_is_pinned_on_black_king($ptree,$205,$252)|0);
      $254 = ($253|0)==(0);
      if ($254) {
       break;
      }
     }
     $246 = $211 | $214;
     $247 = $246 | $208;
     $248 = ($247|0)==(0);
     if ($248) {
      $$3$ph261 = $$3$ph265;
      break L20;
     } else {
      $bb_piece$sroa$0$0186 = $208;$bb_piece$sroa$1$0185 = $211;$bb_piece$sroa$2$0184 = $214;
     }
    }
    $255 = (_last_one210($242,$240,$238)|0);
    $256 = $205 << 7;
    $257 = $255 | $256;
    $258 = ((($ptree) + ($255)|0) + 512|0);
    $259 = HEAP8[$258>>0]|0;
    $260 = $259 << 24 >> 24;
    $261 = (0 - ($260))|0;
    $262 = $261 << 19;
    $263 = $257 | $262;
    $264 = $263 | 65536;
    $265 = ($255|0)<(27);
    if ($265) {
     $266 = $263 | 81920;
     $267 = (($$3$ph265) + 4|0);
     HEAP32[$$3$ph265>>2] = $266;
     $268 = ($255|0)>(17);
     if ($268) {
      $$42 = $267;
      label = 21;
     } else {
      $$3$ph$be = $267;
     }
    } else {
     $$42 = $$3$ph265;
     label = 21;
    }
    if ((label|0) == 21) {
     label = 0;
     $269 = (($$42) + 4|0);
     HEAP32[$$42>>2] = $264;
     $$3$ph$be = $269;
    }
    $270 = $211 | $214;
    $271 = $270 | $208;
    $272 = ($271|0)==(0);
    if ($272) {
     $$3$ph261 = $$3$ph$be;
     break;
    } else {
     $$3$ph265 = $$3$ph$be;$bb_piece$sroa$0$0$ph264 = $208;$bb_piece$sroa$1$0$ph263 = $211;$bb_piece$sroa$2$0$ph262 = $214;
    }
   }
  }
 } while(0);
 $273 = (($ptree) + 212|0);
 $274 = HEAP32[$273>>2]|0;
 $275 = (($ptree) + 216|0);
 $276 = HEAP32[$275>>2]|0;
 $277 = (($ptree) + 220|0);
 $278 = HEAP32[$277>>2]|0;
 $279 = $276 | $278;
 $280 = $279 | $274;
 $281 = ($280|0)==(0);
 L36: do {
  if ($281) {
   $$5$ph253 = $$3$ph261;
  } else {
   $$5$ph257 = $$3$ph261;$bb_piece$sroa$0$1$ph256 = $274;$bb_piece$sroa$1$1$ph255 = $276;$bb_piece$sroa$2$1$ph254 = $278;
   while(1) {
    $bb_piece$sroa$0$1172 = $bb_piece$sroa$0$1$ph256;$bb_piece$sroa$1$1171 = $bb_piece$sroa$1$1$ph255;$bb_piece$sroa$2$1170 = $bb_piece$sroa$2$1$ph254;
    while(1) {
     $288 = (_last_one210($bb_piece$sroa$2$1170,$bb_piece$sroa$1$1171,$bb_piece$sroa$0$1172)|0);
     $289 = (34156304 + (($288*12)|0)|0);
     $290 = HEAP32[$289>>2]|0;
     $286 = $290 ^ $bb_piece$sroa$0$1172;
     $291 = ((34156304 + (($288*12)|0)|0) + 4|0);
     $292 = HEAP32[$291>>2]|0;
     $283 = $292 ^ $bb_piece$sroa$1$1171;
     $293 = ((34156304 + (($288*12)|0)|0) + 8|0);
     $294 = HEAP32[$293>>2]|0;
     $284 = $294 ^ $bb_piece$sroa$2$1170;
     $295 = (33573072 + (($288*12)|0)|0);
     $296 = HEAP32[$295>>2]|0;
     $297 = $296 & $154;
     $298 = ((33573072 + (($288*12)|0)|0) + 4|0);
     $299 = HEAP32[$298>>2]|0;
     $300 = $299 & $155;
     $301 = ((33573072 + (($288*12)|0)|0) + 8|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = $302 & $156;
     $304 = $300 | $297;
     $305 = $304 | $303;
     $306 = ($305|0)==(0);
     if (!($306)) {
      $310 = ((220518304 + (($3*81)|0)|0) + ($288)|0);
      $311 = HEAP8[$310>>0]|0;
      $312 = ($311<<24>>24)==(0);
      if ($312) {
       break;
      }
      $313 = $311&255;
      $314 = (_is_pinned_on_black_king($ptree,$288,$313)|0);
      $315 = ($314|0)==(0);
      if ($315) {
       break;
      }
     }
     $307 = $283 | $284;
     $308 = $307 | $286;
     $309 = ($308|0)==(0);
     if ($309) {
      $$5$ph253 = $$5$ph257;
      break L36;
     } else {
      $bb_piece$sroa$0$1172 = $286;$bb_piece$sroa$1$1171 = $283;$bb_piece$sroa$2$1170 = $284;
     }
    }
    $316 = $288 << 7;
    $$6 = $$5$ph257;$bb_desti$sroa$0$2 = $297;$bb_desti$sroa$1$2 = $300;$bb_desti$sroa$2$2 = $303;
    while(1) {
     $317 = (_last_one210($bb_desti$sroa$2$2,$bb_desti$sroa$1$2,$bb_desti$sroa$0$2)|0);
     $318 = (34156304 + (($317*12)|0)|0);
     $319 = HEAP32[$318>>2]|0;
     $320 = $319 ^ $bb_desti$sroa$0$2;
     $321 = ((34156304 + (($317*12)|0)|0) + 4|0);
     $322 = HEAP32[$321>>2]|0;
     $323 = $322 ^ $bb_desti$sroa$1$2;
     $324 = ((34156304 + (($317*12)|0)|0) + 8|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = $325 ^ $bb_desti$sroa$2$2;
     $327 = $317 | $316;
     $328 = ((($ptree) + ($317)|0) + 512|0);
     $329 = HEAP8[$328>>0]|0;
     $330 = $329 << 24 >> 24;
     $331 = (0 - ($330))|0;
     $332 = $331 << 19;
     $333 = $327 | $332;
     $334 = $333 | 98304;
     $335 = ($317|0)<(27);
     if ($335) {
      $336 = $333 | 114688;
      $337 = (($$6) + 4|0);
      HEAP32[$$6>>2] = $336;
      $338 = ($317|0)>(17);
      if ($338) {
       $$74 = $337;
       label = 33;
      } else {
       $$8 = $337;
      }
     } else {
      $$74 = $$6;
      label = 33;
     }
     if ((label|0) == 33) {
      label = 0;
      $339 = (($$74) + 4|0);
      HEAP32[$$74>>2] = $334;
      $$8 = $339;
     }
     $340 = $323 | $320;
     $341 = $340 | $326;
     $342 = ($341|0)==(0);
     if ($342) {
      break;
     } else {
      $$6 = $$8;$bb_desti$sroa$0$2 = $320;$bb_desti$sroa$1$2 = $323;$bb_desti$sroa$2$2 = $326;
     }
    }
    $282 = $283 | $284;
    $285 = $282 | $286;
    $287 = ($285|0)==(0);
    if ($287) {
     $$5$ph253 = $$8;
     break;
    } else {
     $$5$ph257 = $$8;$bb_piece$sroa$0$1$ph256 = $286;$bb_piece$sroa$1$1$ph255 = $283;$bb_piece$sroa$2$1$ph254 = $284;
    }
   }
  }
 } while(0);
 $343 = (($ptree) + 236|0);
 $344 = HEAP32[$343>>2]|0;
 $345 = (($ptree) + 240|0);
 $346 = HEAP32[$345>>2]|0;
 $347 = (($ptree) + 244|0);
 $348 = HEAP32[$347>>2]|0;
 $349 = $346 | $348;
 $350 = $349 | $344;
 $351 = ($350|0)==(0);
 L55: do {
  if ($351) {
   $$9$ph245 = $$5$ph253;
  } else {
   $$9$ph249 = $$5$ph253;$bb_piece$sroa$0$2$ph248 = $344;$bb_piece$sroa$1$2$ph247 = $346;$bb_piece$sroa$2$2$ph246 = $348;
   while(1) {
    $bb_piece$sroa$0$2156 = $bb_piece$sroa$0$2$ph248;$bb_piece$sroa$1$2155 = $bb_piece$sroa$1$2$ph247;$bb_piece$sroa$2$2154 = $bb_piece$sroa$2$2$ph246;
    while(1) {
     $358 = (_last_one210($bb_piece$sroa$2$2154,$bb_piece$sroa$1$2155,$bb_piece$sroa$0$2156)|0);
     $359 = (34156304 + (($358*12)|0)|0);
     $360 = HEAP32[$359>>2]|0;
     $356 = $360 ^ $bb_piece$sroa$0$2156;
     $361 = ((34156304 + (($358*12)|0)|0) + 4|0);
     $362 = HEAP32[$361>>2]|0;
     $353 = $362 ^ $bb_piece$sroa$1$2155;
     $363 = ((34156304 + (($358*12)|0)|0) + 8|0);
     $364 = HEAP32[$363>>2]|0;
     $354 = $364 ^ $bb_piece$sroa$2$2154;
     $365 = (33574048 + (($358*12)|0)|0);
     $366 = HEAP32[$365>>2]|0;
     $367 = $366 & $154;
     $368 = ((33574048 + (($358*12)|0)|0) + 4|0);
     $369 = HEAP32[$368>>2]|0;
     $370 = $369 & $155;
     $371 = ((33574048 + (($358*12)|0)|0) + 8|0);
     $372 = HEAP32[$371>>2]|0;
     $373 = $372 & $156;
     $374 = $370 | $367;
     $375 = $374 | $373;
     $376 = ($375|0)==(0);
     if (!($376)) {
      $380 = ((220518304 + (($3*81)|0)|0) + ($358)|0);
      $381 = HEAP8[$380>>0]|0;
      $382 = ($381<<24>>24)==(0);
      if ($382) {
       break;
      }
      $383 = $381&255;
      $384 = (_is_pinned_on_black_king($ptree,$358,$383)|0);
      $385 = ($384|0)==(0);
      if ($385) {
       break;
      }
     }
     $377 = $353 | $354;
     $378 = $377 | $356;
     $379 = ($378|0)==(0);
     if ($379) {
      $$9$ph245 = $$9$ph249;
      break L55;
     } else {
      $bb_piece$sroa$0$2156 = $356;$bb_piece$sroa$1$2155 = $353;$bb_piece$sroa$2$2154 = $354;
     }
    }
    $386 = $358 << 7;
    $387 = ($358|0)<(27);
    $$10 = $$9$ph249;$bb_desti$sroa$0$3 = $367;$bb_desti$sroa$1$3 = $370;$bb_desti$sroa$2$3 = $373;
    while(1) {
     $388 = (_last_one210($bb_desti$sroa$2$3,$bb_desti$sroa$1$3,$bb_desti$sroa$0$3)|0);
     $389 = (34156304 + (($388*12)|0)|0);
     $390 = HEAP32[$389>>2]|0;
     $391 = $390 ^ $bb_desti$sroa$0$3;
     $392 = ((34156304 + (($388*12)|0)|0) + 4|0);
     $393 = HEAP32[$392>>2]|0;
     $394 = $393 ^ $bb_desti$sroa$1$3;
     $395 = ((34156304 + (($388*12)|0)|0) + 8|0);
     $396 = HEAP32[$395>>2]|0;
     $397 = $396 ^ $bb_desti$sroa$2$3;
     $398 = $388 | $386;
     $399 = ((($ptree) + ($388)|0) + 512|0);
     $400 = HEAP8[$399>>0]|0;
     $401 = $400 << 24 >> 24;
     $402 = (0 - ($401))|0;
     $403 = $402 << 19;
     $404 = $398 | $403;
     $405 = $404 | 131072;
     $406 = ($388|0)<(27);
     $or$cond = $387 | $406;
     if ($or$cond) {
      $407 = $404 | 147456;
      $408 = (($$10) + 4|0);
      HEAP32[$$10>>2] = $407;
      $$11 = $408;
     } else {
      $$11 = $$10;
     }
     $409 = (($$11) + 4|0);
     HEAP32[$$11>>2] = $405;
     $410 = $394 | $391;
     $411 = $410 | $397;
     $412 = ($411|0)==(0);
     if ($412) {
      break;
     } else {
      $$10 = $409;$bb_desti$sroa$0$3 = $391;$bb_desti$sroa$1$3 = $394;$bb_desti$sroa$2$3 = $397;
     }
    }
    $352 = $353 | $354;
    $355 = $352 | $356;
    $357 = ($355|0)==(0);
    if ($357) {
     $$9$ph245 = $409;
     break;
    } else {
     $$9$ph249 = $409;$bb_piece$sroa$0$2$ph248 = $356;$bb_piece$sroa$1$2$ph247 = $353;$bb_piece$sroa$2$2$ph246 = $354;
    }
   }
  }
 } while(0);
 $413 = (($ptree) + 92|0);
 $414 = HEAP32[$413>>2]|0;
 $415 = (($ptree) + 96|0);
 $416 = HEAP32[$415>>2]|0;
 $417 = (($ptree) + 100|0);
 $418 = HEAP32[$417>>2]|0;
 $419 = $416 | $418;
 $420 = $419 | $414;
 $421 = ($420|0)==(0);
 L72: do {
  if ($421) {
   $$12$ph237 = $$9$ph245;
  } else {
   $$12$ph241 = $$9$ph245;$bb_piece$sroa$0$3$ph240 = $414;$bb_piece$sroa$1$3$ph239 = $416;$bb_piece$sroa$2$3$ph238 = $418;
   while(1) {
    $bb_piece$sroa$0$3139 = $bb_piece$sroa$0$3$ph240;$bb_piece$sroa$1$3138 = $bb_piece$sroa$1$3$ph239;$bb_piece$sroa$2$3137 = $bb_piece$sroa$2$3$ph238;
    while(1) {
     $428 = (_last_one210($bb_piece$sroa$2$3137,$bb_piece$sroa$1$3138,$bb_piece$sroa$0$3139)|0);
     $429 = (34156304 + (($428*12)|0)|0);
     $430 = HEAP32[$429>>2]|0;
     $426 = $430 ^ $bb_piece$sroa$0$3139;
     $431 = ((34156304 + (($428*12)|0)|0) + 4|0);
     $432 = HEAP32[$431>>2]|0;
     $423 = $432 ^ $bb_piece$sroa$1$3138;
     $433 = ((34156304 + (($428*12)|0)|0) + 8|0);
     $434 = HEAP32[$433>>2]|0;
     $424 = $434 ^ $bb_piece$sroa$2$3137;
     $435 = (33575024 + (($428*12)|0)|0);
     $436 = HEAP32[$435>>2]|0;
     $437 = $436 & $154;
     $438 = ((33575024 + (($428*12)|0)|0) + 4|0);
     $439 = HEAP32[$438>>2]|0;
     $440 = $439 & $155;
     $441 = ((33575024 + (($428*12)|0)|0) + 8|0);
     $442 = HEAP32[$441>>2]|0;
     $443 = $442 & $156;
     $444 = $440 | $437;
     $445 = $444 | $443;
     $446 = ($445|0)==(0);
     if (!($446)) {
      $450 = ((220518304 + (($3*81)|0)|0) + ($428)|0);
      $451 = HEAP8[$450>>0]|0;
      $452 = ($451<<24>>24)==(0);
      if ($452) {
       break;
      }
      $453 = $451&255;
      $454 = (_is_pinned_on_black_king($ptree,$428,$453)|0);
      $455 = ($454|0)==(0);
      if ($455) {
       break;
      }
     }
     $447 = $423 | $424;
     $448 = $447 | $426;
     $449 = ($448|0)==(0);
     if ($449) {
      $$12$ph237 = $$12$ph241;
      break L72;
     } else {
      $bb_piece$sroa$0$3139 = $426;$bb_piece$sroa$1$3138 = $423;$bb_piece$sroa$2$3137 = $424;
     }
    }
    $456 = $428 << 7;
    $457 = ((($ptree) + ($428)|0) + 512|0);
    $$13 = $$12$ph241;$bb_desti$sroa$0$4 = $437;$bb_desti$sroa$1$4 = $440;$bb_desti$sroa$2$4 = $443;
    while(1) {
     $458 = (_last_one210($bb_desti$sroa$2$4,$bb_desti$sroa$1$4,$bb_desti$sroa$0$4)|0);
     $459 = (34156304 + (($458*12)|0)|0);
     $460 = HEAP32[$459>>2]|0;
     $461 = $460 ^ $bb_desti$sroa$0$4;
     $462 = ((34156304 + (($458*12)|0)|0) + 4|0);
     $463 = HEAP32[$462>>2]|0;
     $464 = $463 ^ $bb_desti$sroa$1$4;
     $465 = ((34156304 + (($458*12)|0)|0) + 8|0);
     $466 = HEAP32[$465>>2]|0;
     $467 = $466 ^ $bb_desti$sroa$2$4;
     $468 = $458 | $456;
     $469 = HEAP8[$457>>0]|0;
     $470 = $469 << 24 >> 24;
     $471 = $470 << 15;
     $472 = $468 | $471;
     $473 = ((($ptree) + ($458)|0) + 512|0);
     $474 = HEAP8[$473>>0]|0;
     $475 = $474 << 24 >> 24;
     $476 = (0 - ($475))|0;
     $477 = $476 << 19;
     $478 = $472 | $477;
     $479 = (($$13) + 4|0);
     HEAP32[$$13>>2] = $478;
     $480 = $464 | $461;
     $481 = $480 | $467;
     $482 = ($481|0)==(0);
     if ($482) {
      break;
     } else {
      $$13 = $479;$bb_desti$sroa$0$4 = $461;$bb_desti$sroa$1$4 = $464;$bb_desti$sroa$2$4 = $467;
     }
    }
    $422 = $423 | $424;
    $425 = $422 | $426;
    $427 = ($425|0)==(0);
    if ($427) {
     $$12$ph237 = $479;
     break;
    } else {
     $$12$ph241 = $479;$bb_piece$sroa$0$3$ph240 = $426;$bb_piece$sroa$1$3$ph239 = $423;$bb_piece$sroa$2$3$ph238 = $424;
    }
   }
  }
 } while(0);
 $483 = (($ptree) + 260|0);
 $484 = HEAP32[$483>>2]|0;
 $485 = (($ptree) + 264|0);
 $486 = HEAP32[$485>>2]|0;
 $487 = (($ptree) + 268|0);
 $488 = HEAP32[$487>>2]|0;
 $489 = $486 | $488;
 $490 = $489 | $484;
 $491 = ($490|0)==(0);
 L86: do {
  if ($491) {
   $$14$ph229 = $$12$ph237;
  } else {
   $$14$ph233 = $$12$ph237;$bb_piece$sroa$0$4$ph232 = $484;$bb_piece$sroa$1$4$ph231 = $486;$bb_piece$sroa$2$4$ph230 = $488;
   while(1) {
    $bb_piece$sroa$0$4122 = $bb_piece$sroa$0$4$ph232;$bb_piece$sroa$1$4121 = $bb_piece$sroa$1$4$ph231;$bb_piece$sroa$2$4120 = $bb_piece$sroa$2$4$ph230;
    while(1) {
     $498 = (_last_one210($bb_piece$sroa$2$4120,$bb_piece$sroa$1$4121,$bb_piece$sroa$0$4122)|0);
     $499 = (34156304 + (($498*12)|0)|0);
     $500 = HEAP32[$499>>2]|0;
     $496 = $500 ^ $bb_piece$sroa$0$4122;
     $501 = ((34156304 + (($498*12)|0)|0) + 4|0);
     $502 = HEAP32[$501>>2]|0;
     $493 = $502 ^ $bb_piece$sroa$1$4121;
     $503 = ((34156304 + (($498*12)|0)|0) + 8|0);
     $504 = HEAP32[$503>>2]|0;
     $494 = $504 ^ $bb_piece$sroa$2$4120;
     $505 = ((33572424 + ($498<<3)|0) + 6|0);
     $506 = HEAP8[$505>>0]|0;
     $507 = $506&255;
     $508 = ((($ptree) + ($507<<2)|0) + 56|0);
     $509 = HEAP32[$508>>2]|0;
     $510 = ((33572424 + ($498<<3)|0) + 7|0);
     $511 = HEAP8[$510>>0]|0;
     $512 = $511&255;
     $513 = $509 >>> $512;
     $514 = $513 & 127;
     $515 = ((33704320 + (($498*1536)|0)|0) + (($514*12)|0)|0);
     $516 = HEAP32[$515>>2]|0;
     $517 = ((33572424 + ($498<<3)|0) + 4|0);
     $518 = HEAP8[$517>>0]|0;
     $519 = $518&255;
     $520 = ((($ptree) + ($519<<2)|0) + 44|0);
     $521 = HEAP32[$520>>2]|0;
     $522 = ((33572424 + ($498<<3)|0) + 5|0);
     $523 = HEAP8[$522>>0]|0;
     $524 = $523&255;
     $525 = $521 >>> $524;
     $526 = $525 & 127;
     $527 = ((33579904 + (($498*1536)|0)|0) + (($526*12)|0)|0);
     $528 = HEAP32[$527>>2]|0;
     $529 = $528 | $516;
     $530 = (((33704320 + (($498*1536)|0)|0) + (($514*12)|0)|0) + 4|0);
     $531 = HEAP32[$530>>2]|0;
     $532 = (((33579904 + (($498*1536)|0)|0) + (($526*12)|0)|0) + 4|0);
     $533 = HEAP32[$532>>2]|0;
     $534 = $533 | $531;
     $535 = (((33704320 + (($498*1536)|0)|0) + (($514*12)|0)|0) + 8|0);
     $536 = HEAP32[$535>>2]|0;
     $537 = (((33579904 + (($498*1536)|0)|0) + (($526*12)|0)|0) + 8|0);
     $538 = HEAP32[$537>>2]|0;
     $539 = $538 | $536;
     $540 = $529 & $154;
     $541 = $534 & $155;
     $542 = $539 & $156;
     $543 = $541 | $540;
     $544 = $543 | $542;
     $545 = ($544|0)==(0);
     if (!($545)) {
      $549 = ((220518304 + (($3*81)|0)|0) + ($498)|0);
      $550 = HEAP8[$549>>0]|0;
      $551 = ($550<<24>>24)==(0);
      if ($551) {
       break;
      }
      $552 = $550&255;
      $553 = (_is_pinned_on_black_king($ptree,$498,$552)|0);
      $554 = ($553|0)==(0);
      if ($554) {
       break;
      }
     }
     $546 = $493 | $494;
     $547 = $546 | $496;
     $548 = ($547|0)==(0);
     if ($548) {
      $$14$ph229 = $$14$ph233;
      break L86;
     } else {
      $bb_piece$sroa$0$4122 = $496;$bb_piece$sroa$1$4121 = $493;$bb_piece$sroa$2$4120 = $494;
     }
    }
    $555 = $498 << 7;
    $556 = ($498|0)<(27);
    $$15 = $$14$ph233;$bb_desti$sroa$0$5 = $540;$bb_desti$sroa$1$5 = $541;$bb_desti$sroa$2$5 = $542;
    while(1) {
     $557 = (_last_one210($bb_desti$sroa$2$5,$bb_desti$sroa$1$5,$bb_desti$sroa$0$5)|0);
     $558 = (34156304 + (($557*12)|0)|0);
     $559 = HEAP32[$558>>2]|0;
     $560 = $559 ^ $bb_desti$sroa$0$5;
     $561 = ((34156304 + (($557*12)|0)|0) + 4|0);
     $562 = HEAP32[$561>>2]|0;
     $563 = $562 ^ $bb_desti$sroa$1$5;
     $564 = ((34156304 + (($557*12)|0)|0) + 8|0);
     $565 = HEAP32[$564>>2]|0;
     $566 = $565 ^ $bb_desti$sroa$2$5;
     $567 = $557 | $555;
     $568 = ((($ptree) + ($557)|0) + 512|0);
     $569 = HEAP8[$568>>0]|0;
     $570 = $569 << 24 >> 24;
     $571 = (0 - ($570))|0;
     $572 = $571 << 19;
     $573 = $567 | $572;
     if ($556) {
      label = 65;
     } else {
      $574 = $573 | 196608;
      $575 = ($557|0)<(27);
      if ($575) {
       label = 65;
      } else {
       $utemp$1 = $574;
      }
     }
     if ((label|0) == 65) {
      label = 0;
      $576 = $573 | 212992;
      $utemp$1 = $576;
     }
     $577 = (($$15) + 4|0);
     HEAP32[$$15>>2] = $utemp$1;
     $578 = $563 | $560;
     $579 = $578 | $566;
     $580 = ($579|0)==(0);
     if ($580) {
      break;
     } else {
      $$15 = $577;$bb_desti$sroa$0$5 = $560;$bb_desti$sroa$1$5 = $563;$bb_desti$sroa$2$5 = $566;
     }
    }
    $492 = $493 | $494;
    $495 = $492 | $496;
    $497 = ($495|0)==(0);
    if ($497) {
     $$14$ph229 = $577;
     break;
    } else {
     $$14$ph233 = $577;$bb_piece$sroa$0$4$ph232 = $496;$bb_piece$sroa$1$4$ph231 = $493;$bb_piece$sroa$2$4$ph230 = $494;
    }
   }
  }
 } while(0);
 $581 = (($ptree) + 284|0);
 $582 = HEAP32[$581>>2]|0;
 $583 = (($ptree) + 288|0);
 $584 = HEAP32[$583>>2]|0;
 $585 = (($ptree) + 292|0);
 $586 = HEAP32[$585>>2]|0;
 $587 = $584 | $586;
 $588 = $587 | $582;
 $589 = ($588|0)==(0);
 L105: do {
  if ($589) {
   $$16$ph221 = $$14$ph229;
  } else {
   $$16$ph225 = $$14$ph229;$bb_piece$sroa$0$5$ph224 = $582;$bb_piece$sroa$1$5$ph223 = $584;$bb_piece$sroa$2$5$ph222 = $586;
   while(1) {
    $bb_piece$sroa$0$5105 = $bb_piece$sroa$0$5$ph224;$bb_piece$sroa$1$5104 = $bb_piece$sroa$1$5$ph223;$bb_piece$sroa$2$5103 = $bb_piece$sroa$2$5$ph222;
    while(1) {
     $596 = (_last_one210($bb_piece$sroa$2$5103,$bb_piece$sroa$1$5104,$bb_piece$sroa$0$5105)|0);
     $597 = (34156304 + (($596*12)|0)|0);
     $598 = HEAP32[$597>>2]|0;
     $594 = $598 ^ $bb_piece$sroa$0$5105;
     $599 = ((34156304 + (($596*12)|0)|0) + 4|0);
     $600 = HEAP32[$599>>2]|0;
     $591 = $600 ^ $bb_piece$sroa$1$5104;
     $601 = ((34156304 + (($596*12)|0)|0) + 8|0);
     $602 = HEAP32[$601>>2]|0;
     $592 = $602 ^ $bb_piece$sroa$2$5103;
     $603 = ((33572424 + ($596<<3)|0) + 2|0);
     $604 = HEAP8[$603>>0]|0;
     $605 = $604&255;
     $606 = ((($ptree) + ($605<<2)|0) + 32|0);
     $607 = HEAP32[$606>>2]|0;
     $608 = ((33572424 + ($596<<3)|0) + 3|0);
     $609 = HEAP8[$608>>0]|0;
     $610 = $609&255;
     $611 = $607 >>> $610;
     $612 = $611 & 127;
     $613 = ((33953152 + (($596*1536)|0)|0) + (($612*12)|0)|0);
     $614 = HEAP32[$613>>2]|0;
     $615 = (33572424 + ($596<<3)|0);
     $616 = HEAP8[$615>>0]|0;
     $617 = $616&255;
     $618 = ((($ptree) + ($617<<2)|0) + 8|0);
     $619 = HEAP32[$618>>2]|0;
     $620 = ((($ptree) + ($617<<2)|0) + 20|0);
     $621 = HEAP32[$620>>2]|0;
     $622 = $621 | $619;
     $623 = ((33572424 + ($596<<3)|0) + 1|0);
     $624 = HEAP8[$623>>0]|0;
     $625 = $624&255;
     $626 = $622 >>> $625;
     $627 = $626 & 127;
     $628 = ((33828736 + (($596*1536)|0)|0) + (($627*12)|0)|0);
     $629 = HEAP32[$628>>2]|0;
     $630 = $629 | $614;
     $631 = (((33953152 + (($596*1536)|0)|0) + (($612*12)|0)|0) + 4|0);
     $632 = HEAP32[$631>>2]|0;
     $633 = (((33828736 + (($596*1536)|0)|0) + (($627*12)|0)|0) + 4|0);
     $634 = HEAP32[$633>>2]|0;
     $635 = $634 | $632;
     $636 = (((33953152 + (($596*1536)|0)|0) + (($612*12)|0)|0) + 8|0);
     $637 = HEAP32[$636>>2]|0;
     $638 = (((33828736 + (($596*1536)|0)|0) + (($627*12)|0)|0) + 8|0);
     $639 = HEAP32[$638>>2]|0;
     $640 = $639 | $637;
     $641 = $630 & $154;
     $642 = $635 & $155;
     $643 = $640 & $156;
     $644 = $642 | $641;
     $645 = $644 | $643;
     $646 = ($645|0)==(0);
     if (!($646)) {
      $650 = ((220518304 + (($3*81)|0)|0) + ($596)|0);
      $651 = HEAP8[$650>>0]|0;
      $652 = ($651<<24>>24)==(0);
      if ($652) {
       break;
      }
      $653 = $651&255;
      $654 = (_is_pinned_on_black_king($ptree,$596,$653)|0);
      $655 = ($654|0)==(0);
      if ($655) {
       break;
      }
     }
     $647 = $591 | $592;
     $648 = $647 | $594;
     $649 = ($648|0)==(0);
     if ($649) {
      $$16$ph221 = $$16$ph225;
      break L105;
     } else {
      $bb_piece$sroa$0$5105 = $594;$bb_piece$sroa$1$5104 = $591;$bb_piece$sroa$2$5103 = $592;
     }
    }
    $656 = $596 << 7;
    $657 = ($596|0)<(27);
    $$17 = $$16$ph225;$bb_desti$sroa$0$6 = $641;$bb_desti$sroa$1$6 = $642;$bb_desti$sroa$2$6 = $643;
    while(1) {
     $658 = (_last_one210($bb_desti$sroa$2$6,$bb_desti$sroa$1$6,$bb_desti$sroa$0$6)|0);
     $659 = (34156304 + (($658*12)|0)|0);
     $660 = HEAP32[$659>>2]|0;
     $661 = $660 ^ $bb_desti$sroa$0$6;
     $662 = ((34156304 + (($658*12)|0)|0) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = $663 ^ $bb_desti$sroa$1$6;
     $665 = ((34156304 + (($658*12)|0)|0) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = $666 ^ $bb_desti$sroa$2$6;
     $668 = $658 | $656;
     $669 = ((($ptree) + ($658)|0) + 512|0);
     $670 = HEAP8[$669>>0]|0;
     $671 = $670 << 24 >> 24;
     $672 = (0 - ($671))|0;
     $673 = $672 << 19;
     $674 = $668 | $673;
     if ($657) {
      label = 77;
     } else {
      $675 = $674 | 229376;
      $676 = ($658|0)<(27);
      if ($676) {
       label = 77;
      } else {
       $utemp$2 = $675;
      }
     }
     if ((label|0) == 77) {
      label = 0;
      $677 = $674 | 245760;
      $utemp$2 = $677;
     }
     $678 = (($$17) + 4|0);
     HEAP32[$$17>>2] = $utemp$2;
     $679 = $664 | $661;
     $680 = $679 | $667;
     $681 = ($680|0)==(0);
     if ($681) {
      break;
     } else {
      $$17 = $678;$bb_desti$sroa$0$6 = $661;$bb_desti$sroa$1$6 = $664;$bb_desti$sroa$2$6 = $667;
     }
    }
    $590 = $591 | $592;
    $593 = $590 | $594;
    $595 = ($593|0)==(0);
    if ($595) {
     $$16$ph221 = $678;
     break;
    } else {
     $$16$ph225 = $678;$bb_piece$sroa$0$5$ph224 = $594;$bb_piece$sroa$1$5$ph223 = $591;$bb_piece$sroa$2$5$ph222 = $592;
    }
   }
  }
 } while(0);
 $682 = (($ptree) + 308|0);
 $683 = HEAP32[$682>>2]|0;
 $684 = (($ptree) + 312|0);
 $685 = HEAP32[$684>>2]|0;
 $686 = (($ptree) + 316|0);
 $687 = HEAP32[$686>>2]|0;
 $688 = $685 | $687;
 $689 = $688 | $683;
 $690 = ($689|0)==(0);
 L124: do {
  if ($690) {
   $$18$ph213 = $$16$ph221;
  } else {
   $$18$ph217 = $$16$ph221;$bb_piece$sroa$0$6$ph216 = $683;$bb_piece$sroa$1$6$ph215 = $685;$bb_piece$sroa$2$6$ph214 = $687;
   while(1) {
    $bb_piece$sroa$0$688 = $bb_piece$sroa$0$6$ph216;$bb_piece$sroa$1$687 = $bb_piece$sroa$1$6$ph215;$bb_piece$sroa$2$686 = $bb_piece$sroa$2$6$ph214;
    while(1) {
     $697 = (_last_one210($bb_piece$sroa$2$686,$bb_piece$sroa$1$687,$bb_piece$sroa$0$688)|0);
     $698 = (34156304 + (($697*12)|0)|0);
     $699 = HEAP32[$698>>2]|0;
     $695 = $699 ^ $bb_piece$sroa$0$688;
     $700 = ((34156304 + (($697*12)|0)|0) + 4|0);
     $701 = HEAP32[$700>>2]|0;
     $692 = $701 ^ $bb_piece$sroa$1$687;
     $702 = ((34156304 + (($697*12)|0)|0) + 8|0);
     $703 = HEAP32[$702>>2]|0;
     $693 = $703 ^ $bb_piece$sroa$2$686;
     $704 = ((33572424 + ($697<<3)|0) + 6|0);
     $705 = HEAP8[$704>>0]|0;
     $706 = $705&255;
     $707 = ((($ptree) + ($706<<2)|0) + 56|0);
     $708 = HEAP32[$707>>2]|0;
     $709 = ((33572424 + ($697<<3)|0) + 7|0);
     $710 = HEAP8[$709>>0]|0;
     $711 = $710&255;
     $712 = $708 >>> $711;
     $713 = $712 & 127;
     $714 = ((33704320 + (($697*1536)|0)|0) + (($713*12)|0)|0);
     $715 = HEAP32[$714>>2]|0;
     $716 = ((33572424 + ($697<<3)|0) + 4|0);
     $717 = HEAP8[$716>>0]|0;
     $718 = $717&255;
     $719 = ((($ptree) + ($718<<2)|0) + 44|0);
     $720 = HEAP32[$719>>2]|0;
     $721 = ((33572424 + ($697<<3)|0) + 5|0);
     $722 = HEAP8[$721>>0]|0;
     $723 = $722&255;
     $724 = $720 >>> $723;
     $725 = $724 & 127;
     $726 = ((33579904 + (($697*1536)|0)|0) + (($725*12)|0)|0);
     $727 = HEAP32[$726>>2]|0;
     $728 = $727 | $715;
     $729 = (((33704320 + (($697*1536)|0)|0) + (($713*12)|0)|0) + 4|0);
     $730 = HEAP32[$729>>2]|0;
     $731 = (((33579904 + (($697*1536)|0)|0) + (($725*12)|0)|0) + 4|0);
     $732 = HEAP32[$731>>2]|0;
     $733 = $732 | $730;
     $734 = (((33704320 + (($697*1536)|0)|0) + (($713*12)|0)|0) + 8|0);
     $735 = HEAP32[$734>>2]|0;
     $736 = (((33579904 + (($697*1536)|0)|0) + (($725*12)|0)|0) + 8|0);
     $737 = HEAP32[$736>>2]|0;
     $738 = $737 | $735;
     $739 = (33578928 + (($697*12)|0)|0);
     $740 = HEAP32[$739>>2]|0;
     $741 = $728 | $740;
     $742 = ((33578928 + (($697*12)|0)|0) + 4|0);
     $743 = HEAP32[$742>>2]|0;
     $744 = $733 | $743;
     $745 = ((33578928 + (($697*12)|0)|0) + 8|0);
     $746 = HEAP32[$745>>2]|0;
     $747 = $738 | $746;
     $748 = $741 & $154;
     $749 = $744 & $155;
     $750 = $747 & $156;
     $751 = $749 | $748;
     $752 = $751 | $750;
     $753 = ($752|0)==(0);
     if (!($753)) {
      $757 = ((220518304 + (($3*81)|0)|0) + ($697)|0);
      $758 = HEAP8[$757>>0]|0;
      $759 = ($758<<24>>24)==(0);
      if ($759) {
       break;
      }
      $760 = $758&255;
      $761 = (_is_pinned_on_black_king($ptree,$697,$760)|0);
      $762 = ($761|0)==(0);
      if ($762) {
       break;
      }
     }
     $754 = $692 | $693;
     $755 = $754 | $695;
     $756 = ($755|0)==(0);
     if ($756) {
      $$18$ph213 = $$18$ph217;
      break L124;
     } else {
      $bb_piece$sroa$0$688 = $695;$bb_piece$sroa$1$687 = $692;$bb_piece$sroa$2$686 = $693;
     }
    }
    $763 = $697 << 7;
    $$19 = $$18$ph217;$bb_desti$sroa$0$7 = $748;$bb_desti$sroa$1$7 = $749;$bb_desti$sroa$2$7 = $750;
    while(1) {
     $764 = (_last_one210($bb_desti$sroa$2$7,$bb_desti$sroa$1$7,$bb_desti$sroa$0$7)|0);
     $765 = (34156304 + (($764*12)|0)|0);
     $766 = HEAP32[$765>>2]|0;
     $767 = $766 ^ $bb_desti$sroa$0$7;
     $768 = ((34156304 + (($764*12)|0)|0) + 4|0);
     $769 = HEAP32[$768>>2]|0;
     $770 = $769 ^ $bb_desti$sroa$1$7;
     $771 = ((34156304 + (($764*12)|0)|0) + 8|0);
     $772 = HEAP32[$771>>2]|0;
     $773 = $772 ^ $bb_desti$sroa$2$7;
     $774 = ((($ptree) + ($764)|0) + 512|0);
     $775 = HEAP8[$774>>0]|0;
     $776 = $775 << 24 >> 24;
     $777 = (0 - ($776))|0;
     $778 = $777 << 19;
     $779 = $763 | $764;
     $780 = $779 | $778;
     $781 = $780 | 458752;
     $782 = (($$19) + 4|0);
     HEAP32[$$19>>2] = $781;
     $783 = $770 | $767;
     $784 = $783 | $773;
     $785 = ($784|0)==(0);
     if ($785) {
      break;
     } else {
      $$19 = $782;$bb_desti$sroa$0$7 = $767;$bb_desti$sroa$1$7 = $770;$bb_desti$sroa$2$7 = $773;
     }
    }
    $691 = $692 | $693;
    $694 = $691 | $695;
    $696 = ($694|0)==(0);
    if ($696) {
     $$18$ph213 = $782;
     break;
    } else {
     $$18$ph217 = $782;$bb_piece$sroa$0$6$ph216 = $695;$bb_piece$sroa$1$6$ph215 = $692;$bb_piece$sroa$2$6$ph214 = $693;
    }
   }
  }
 } while(0);
 $786 = (($ptree) + 332|0);
 $787 = HEAP32[$786>>2]|0;
 $788 = (($ptree) + 336|0);
 $789 = HEAP32[$788>>2]|0;
 $790 = (($ptree) + 340|0);
 $791 = HEAP32[$790>>2]|0;
 $792 = $789 | $791;
 $793 = $792 | $787;
 $794 = ($793|0)==(0);
 L138: do {
  if ($794) {
   $$20$ph205 = $$18$ph213;
  } else {
   $$20$ph209 = $$18$ph213;$bb_piece$sroa$0$7$ph208 = $787;$bb_piece$sroa$1$7$ph207 = $789;$bb_piece$sroa$2$7$ph206 = $791;
   while(1) {
    $bb_piece$sroa$0$771 = $bb_piece$sroa$0$7$ph208;$bb_piece$sroa$1$770 = $bb_piece$sroa$1$7$ph207;$bb_piece$sroa$2$769 = $bb_piece$sroa$2$7$ph206;
    while(1) {
     $801 = (_last_one210($bb_piece$sroa$2$769,$bb_piece$sroa$1$770,$bb_piece$sroa$0$771)|0);
     $802 = (34156304 + (($801*12)|0)|0);
     $803 = HEAP32[$802>>2]|0;
     $799 = $803 ^ $bb_piece$sroa$0$771;
     $804 = ((34156304 + (($801*12)|0)|0) + 4|0);
     $805 = HEAP32[$804>>2]|0;
     $796 = $805 ^ $bb_piece$sroa$1$770;
     $806 = ((34156304 + (($801*12)|0)|0) + 8|0);
     $807 = HEAP32[$806>>2]|0;
     $797 = $807 ^ $bb_piece$sroa$2$769;
     $808 = ((33572424 + ($801<<3)|0) + 2|0);
     $809 = HEAP8[$808>>0]|0;
     $810 = $809&255;
     $811 = ((($ptree) + ($810<<2)|0) + 32|0);
     $812 = HEAP32[$811>>2]|0;
     $813 = ((33572424 + ($801<<3)|0) + 3|0);
     $814 = HEAP8[$813>>0]|0;
     $815 = $814&255;
     $816 = $812 >>> $815;
     $817 = $816 & 127;
     $818 = ((33953152 + (($801*1536)|0)|0) + (($817*12)|0)|0);
     $819 = HEAP32[$818>>2]|0;
     $820 = (33572424 + ($801<<3)|0);
     $821 = HEAP8[$820>>0]|0;
     $822 = $821&255;
     $823 = ((($ptree) + ($822<<2)|0) + 8|0);
     $824 = HEAP32[$823>>2]|0;
     $825 = ((($ptree) + ($822<<2)|0) + 20|0);
     $826 = HEAP32[$825>>2]|0;
     $827 = $826 | $824;
     $828 = ((33572424 + ($801<<3)|0) + 1|0);
     $829 = HEAP8[$828>>0]|0;
     $830 = $829&255;
     $831 = $827 >>> $830;
     $832 = $831 & 127;
     $833 = ((33828736 + (($801*1536)|0)|0) + (($832*12)|0)|0);
     $834 = HEAP32[$833>>2]|0;
     $835 = $834 | $819;
     $836 = (((33953152 + (($801*1536)|0)|0) + (($817*12)|0)|0) + 4|0);
     $837 = HEAP32[$836>>2]|0;
     $838 = (((33828736 + (($801*1536)|0)|0) + (($832*12)|0)|0) + 4|0);
     $839 = HEAP32[$838>>2]|0;
     $840 = $839 | $837;
     $841 = (((33953152 + (($801*1536)|0)|0) + (($817*12)|0)|0) + 8|0);
     $842 = HEAP32[$841>>2]|0;
     $843 = (((33828736 + (($801*1536)|0)|0) + (($832*12)|0)|0) + 8|0);
     $844 = HEAP32[$843>>2]|0;
     $845 = $844 | $842;
     $846 = (33578928 + (($801*12)|0)|0);
     $847 = HEAP32[$846>>2]|0;
     $848 = $835 | $847;
     $849 = ((33578928 + (($801*12)|0)|0) + 4|0);
     $850 = HEAP32[$849>>2]|0;
     $851 = $840 | $850;
     $852 = ((33578928 + (($801*12)|0)|0) + 8|0);
     $853 = HEAP32[$852>>2]|0;
     $854 = $845 | $853;
     $855 = $848 & $154;
     $856 = $851 & $155;
     $857 = $854 & $156;
     $858 = $856 | $855;
     $859 = $858 | $857;
     $860 = ($859|0)==(0);
     if (!($860)) {
      $864 = ((220518304 + (($3*81)|0)|0) + ($801)|0);
      $865 = HEAP8[$864>>0]|0;
      $866 = ($865<<24>>24)==(0);
      if ($866) {
       break;
      }
      $867 = $865&255;
      $868 = (_is_pinned_on_black_king($ptree,$801,$867)|0);
      $869 = ($868|0)==(0);
      if ($869) {
       break;
      }
     }
     $861 = $796 | $797;
     $862 = $861 | $799;
     $863 = ($862|0)==(0);
     if ($863) {
      $$20$ph205 = $$20$ph209;
      break L138;
     } else {
      $bb_piece$sroa$0$771 = $799;$bb_piece$sroa$1$770 = $796;$bb_piece$sroa$2$769 = $797;
     }
    }
    $870 = $801 << 7;
    $$21 = $$20$ph209;$bb_desti$sroa$0$8 = $855;$bb_desti$sroa$1$8 = $856;$bb_desti$sroa$2$8 = $857;
    while(1) {
     $871 = (_last_one210($bb_desti$sroa$2$8,$bb_desti$sroa$1$8,$bb_desti$sroa$0$8)|0);
     $872 = (34156304 + (($871*12)|0)|0);
     $873 = HEAP32[$872>>2]|0;
     $874 = $873 ^ $bb_desti$sroa$0$8;
     $875 = ((34156304 + (($871*12)|0)|0) + 4|0);
     $876 = HEAP32[$875>>2]|0;
     $877 = $876 ^ $bb_desti$sroa$1$8;
     $878 = ((34156304 + (($871*12)|0)|0) + 8|0);
     $879 = HEAP32[$878>>2]|0;
     $880 = $879 ^ $bb_desti$sroa$2$8;
     $881 = ((($ptree) + ($871)|0) + 512|0);
     $882 = HEAP8[$881>>0]|0;
     $883 = $882 << 24 >> 24;
     $884 = (0 - ($883))|0;
     $885 = $884 << 19;
     $886 = $870 | $871;
     $887 = $886 | $885;
     $888 = $887 | 491520;
     $889 = (($$21) + 4|0);
     HEAP32[$$21>>2] = $888;
     $890 = $877 | $874;
     $891 = $890 | $880;
     $892 = ($891|0)==(0);
     if ($892) {
      break;
     } else {
      $$21 = $889;$bb_desti$sroa$0$8 = $874;$bb_desti$sroa$1$8 = $877;$bb_desti$sroa$2$8 = $880;
     }
    }
    $795 = $796 | $797;
    $798 = $795 | $799;
    $800 = ($798|0)==(0);
    if ($800) {
     $$20$ph205 = $889;
     break;
    } else {
     $$20$ph209 = $889;$bb_piece$sroa$0$7$ph208 = $799;$bb_piece$sroa$1$7$ph207 = $796;$bb_piece$sroa$2$7$ph206 = $797;
    }
   }
  }
 } while(0);
 $893 = (($ptree) + 500|0);
 $894 = HEAP32[$893>>2]|0;
 $895 = ($894|0)==(0);
 if ($895) {
  $$0 = $$20$ph205;
  STACKTOP = sp;return ($$0|0);
 }
 $896 = $151 | $149;
 $897 = $896 | $153;
 $898 = ($897|0)==(0);
 if ($898) {
  $$0 = $$20$ph205;
  STACKTOP = sp;return ($$0|0);
 }
 $899 = $149 & 133955584;
 $900 = $149 & 261632;
 $901 = $149 & 511;
 $902 = $151 & 134217727;
 $903 = $153 & 134217727;
 $904 = $894 & 1792;
 $905 = ($904|0)==(0);
 if ($905) {
  $nhand$0 = 0;
 } else {
  HEAP32[$ahand>>2] = 10624;
  $nhand$0 = 1;
 }
 $906 = $894 & 224;
 $907 = ($906|0)==(0);
 if ($907) {
  $nhand$1 = $nhand$0;
 } else {
  $908 = (($nhand$0) + 1)|0;
  $909 = (($ahand) + ($nhand$0<<2)|0);
  HEAP32[$909>>2] = 10496;
  $nhand$1 = $908;
 }
 $910 = $894 & 14336;
 $911 = ($910|0)==(0);
 if ($911) {
  $nhand$2 = $nhand$1;
 } else {
  $912 = (($nhand$1) + 1)|0;
  $913 = (($ahand) + ($nhand$1<<2)|0);
  HEAP32[$913>>2] = 10752;
  $nhand$2 = $912;
 }
 $914 = $894 & 114688;
 $915 = ($914|0)==(0);
 if ($915) {
  $nhand$3 = $nhand$2;
 } else {
  $916 = (($nhand$2) + 1)|0;
  $917 = (($ahand) + ($nhand$2<<2)|0);
  HEAP32[$917>>2] = 10880;
  $nhand$3 = $916;
 }
 $918 = $894 & 393216;
 $919 = ($918|0)==(0);
 if ($919) {
  $nhand$4 = $nhand$3;
 } else {
  $920 = (($nhand$3) + 1)|0;
  $921 = (($ahand) + ($nhand$3<<2)|0);
  HEAP32[$921>>2] = 11008;
  $nhand$4 = $920;
 }
 $922 = $894 & 1572864;
 $923 = ($922|0)==(0);
 if ($923) {
  $nhand$5 = $nhand$4;
 } else {
  $924 = (($nhand$4) + 1)|0;
  $925 = (($ahand) + ($nhand$4<<2)|0);
  HEAP32[$925>>2] = 11136;
  $nhand$5 = $924;
 }
 $926 = $894 & 31;
 $927 = ($926|0)==(0);
 L176: do {
  if ($927) {
   $928 = $902 | $901;
   $929 = $928 | $903;
   $930 = ($929|0)==(0);
   L178: do {
    if ($930) {
     $$28$lcssa = $$20$ph205;
    } else {
     $931 = ($nhand$5|0)>(0);
     if ($931) {
      $$2832$us = $$20$ph205;$bb_target$sroa$0$129$us = $901;$bb_target$sroa$1$130$us = $902;$bb_target$sroa$2$131$us = $903;
     } else {
      $bb_target$sroa$0$129 = $901;$bb_target$sroa$1$130 = $902;$bb_target$sroa$2$131 = $903;
      while(1) {
       $1061 = (_last_one210($bb_target$sroa$2$131,$bb_target$sroa$1$130,$bb_target$sroa$0$129)|0);
       $1062 = (34156304 + (($1061*12)|0)|0);
       $1063 = HEAP32[$1062>>2]|0;
       $1064 = $1063 ^ $bb_target$sroa$0$129;
       $1065 = ((34156304 + (($1061*12)|0)|0) + 4|0);
       $1066 = HEAP32[$1065>>2]|0;
       $1067 = $1066 ^ $bb_target$sroa$1$130;
       $1068 = ((34156304 + (($1061*12)|0)|0) + 8|0);
       $1069 = HEAP32[$1068>>2]|0;
       $1070 = $1069 ^ $bb_target$sroa$2$131;
       $1071 = $1067 | $1064;
       $1072 = $1071 | $1070;
       $1073 = ($1072|0)==(0);
       if ($1073) {
        $$28$lcssa = $$20$ph205;
        break L178;
       } else {
        $bb_target$sroa$0$129 = $1064;$bb_target$sroa$1$130 = $1067;$bb_target$sroa$2$131 = $1070;
       }
      }
     }
     while(1) {
      $933 = (_last_one210($bb_target$sroa$2$131$us,$bb_target$sroa$1$130$us,$bb_target$sroa$0$129$us)|0);
      $$2923$us = $$2832$us;$i$222$us = 0;
      while(1) {
       $945 = (($ahand) + ($i$222$us<<2)|0);
       $946 = HEAP32[$945>>2]|0;
       $947 = $946 | $933;
       HEAP32[$$2923$us>>2] = $947;
       $948 = (($i$222$us) + 1)|0;
       $exitcond407 = ($948|0)==($nhand$5|0);
       if ($exitcond407) {
        break;
       }
       $949 = (($$2923$us) + 4|0);
       $$2923$us = $949;$i$222$us = $948;
      }
      $scevgep406 = (($$2832$us) + ($nhand$5<<2)|0);
      $932 = (34156304 + (($933*12)|0)|0);
      $934 = HEAP32[$932>>2]|0;
      $935 = $934 ^ $bb_target$sroa$0$129$us;
      $936 = ((34156304 + (($933*12)|0)|0) + 4|0);
      $937 = HEAP32[$936>>2]|0;
      $938 = $937 ^ $bb_target$sroa$1$130$us;
      $939 = ((34156304 + (($933*12)|0)|0) + 8|0);
      $940 = HEAP32[$939>>2]|0;
      $941 = $940 ^ $bb_target$sroa$2$131$us;
      $942 = $938 | $935;
      $943 = $942 | $941;
      $944 = ($943|0)==(0);
      if ($944) {
       $$28$lcssa = $scevgep406;
       break;
      } else {
       $$2832$us = $scevgep406;$bb_target$sroa$0$129$us = $935;$bb_target$sroa$1$130$us = $938;$bb_target$sroa$2$131$us = $941;
      }
     }
    }
   } while(0);
   $1048 = ($900|0)==(0);
   if ($1048) {
    $$32$ph = $$28$lcssa;
    break;
   }
   $1049 = ($nhand$0|0)<($nhand$5|0);
   if (!($1049)) {
    $ubb_target0b$118 = $900;
    while(1) {
     $1074 = (_last_one0($ubb_target0b$118)|0);
     $1075 = (34156304 + (($1074*12)|0)|0);
     $1076 = HEAP32[$1075>>2]|0;
     $1077 = $1076 ^ $ubb_target0b$118;
     $1078 = ($1076|0)==($ubb_target0b$118|0);
     if ($1078) {
      $$32$ph = $$28$lcssa;
      break L176;
     } else {
      $ubb_target0b$118 = $1077;
     }
    }
   }
   $1050 = (($nhand$5) - ($nhand$0))|0;
   $$3019$us = $$28$lcssa;$ubb_target0b$118$us = $900;
   while(1) {
    $1052 = (_last_one0($ubb_target0b$118$us)|0);
    $$3112$us = $$3019$us;$i$311$us = $nhand$0;
    while(1) {
     $1056 = (($ahand) + ($i$311$us<<2)|0);
     $1057 = HEAP32[$1056>>2]|0;
     $1058 = $1057 | $1052;
     HEAP32[$$3112$us>>2] = $1058;
     $1059 = (($i$311$us) + 1)|0;
     $exitcond404 = ($1059|0)==($nhand$5|0);
     if ($exitcond404) {
      break;
     }
     $1060 = (($$3112$us) + 4|0);
     $$3112$us = $1060;$i$311$us = $1059;
    }
    $scevgep403 = (($$3019$us) + ($1050<<2)|0);
    $1051 = (34156304 + (($1052*12)|0)|0);
    $1053 = HEAP32[$1051>>2]|0;
    $1054 = $1053 ^ $ubb_target0b$118$us;
    $1055 = ($1053|0)==($ubb_target0b$118$us|0);
    if ($1055) {
     $$32$ph = $scevgep403;
     break;
    } else {
     $$3019$us = $scevgep403;$ubb_target0b$118$us = $1054;
    }
   }
  } else {
   $950 = HEAP32[$157>>2]|0;
   $951 = HEAP32[$160>>2]|0;
   $952 = $951 | $950;
   $953 = HEAP32[$163>>2]|0;
   $954 = $952 | $953;
   $955 = $954 & 67240192;
   HEAP32[$ais_pawn>>2] = $955;
   $956 = $954 & 33620096;
   $957 = (($ais_pawn) + 4|0);
   HEAP32[$957>>2] = $956;
   $958 = $954 & 16810048;
   $959 = (($ais_pawn) + 8|0);
   HEAP32[$959>>2] = $958;
   $960 = $954 & 8405024;
   $961 = (($ais_pawn) + 12|0);
   HEAP32[$961>>2] = $960;
   $962 = $954 & 4202512;
   $963 = (($ais_pawn) + 16|0);
   HEAP32[$963>>2] = $962;
   $964 = $954 & 2101256;
   $965 = (($ais_pawn) + 20|0);
   HEAP32[$965>>2] = $964;
   $966 = $954 & 1050628;
   $967 = (($ais_pawn) + 24|0);
   HEAP32[$967>>2] = $966;
   $968 = $954 & 525314;
   $969 = (($ais_pawn) + 28|0);
   HEAP32[$969>>2] = $968;
   $970 = $954 & 262657;
   $971 = (($ais_pawn) + 32|0);
   HEAP32[$971>>2] = $970;
   $972 = $902 | $901;
   $973 = $972 | $903;
   $974 = ($973|0)==(0);
   if ($974) {
    $$22$lcssa = $$20$ph205;
   } else {
    $975 = ($nhand$5|0)>(0);
    $$2256 = $$20$ph205;$bb_target$sroa$0$053 = $901;$bb_target$sroa$1$054 = $902;$bb_target$sroa$2$055 = $903;
    while(1) {
     $979 = (_last_one210($bb_target$sroa$2$055,$bb_target$sroa$1$054,$bb_target$sroa$0$053)|0);
     $980 = (1248 + ($979)|0);
     $981 = HEAP8[$980>>0]|0;
     $982 = $981&255;
     $983 = (($ais_pawn) + ($982<<2)|0);
     $984 = HEAP32[$983>>2]|0;
     $985 = ($984|0)==(0);
     do {
      if ($985) {
       $986 = (($979) + -9)|0;
       $987 = ((($ptree) + ($986)|0) + 512|0);
       $988 = HEAP8[$987>>0]|0;
       $989 = ($988<<24>>24)==(-8);
       if ($989) {
        $990 = (_is_mate_b_pawn_drop($ptree,$979)|0);
        $991 = ($990|0)==(0);
        if (!($991)) {
         $$24$ph = $$2256;
         break;
        }
       }
       $992 = $979 | 10368;
       $993 = (($$2256) + 4|0);
       HEAP32[$$2256>>2] = $992;
       $$24$ph = $993;
      } else {
       $$24$ph = $$2256;
      }
     } while(0);
     if ($975) {
      $$2449 = $$24$ph;$i$048 = 0;
      while(1) {
       $994 = (($ahand) + ($i$048<<2)|0);
       $995 = HEAP32[$994>>2]|0;
       $996 = $995 | $979;
       HEAP32[$$2449>>2] = $996;
       $997 = (($i$048) + 1)|0;
       $exitcond268 = ($997|0)==($nhand$5|0);
       if ($exitcond268) {
        break;
       }
       $998 = (($$2449) + 4|0);
       $$2449 = $998;$i$048 = $997;
      }
      $scevgep267 = (($$24$ph) + ($nhand$5<<2)|0);
      $$24$lcssa = $scevgep267;
     } else {
      $$24$lcssa = $$24$ph;
     }
     $999 = (34156304 + (($979*12)|0)|0);
     $1000 = HEAP32[$999>>2]|0;
     $1001 = $1000 ^ $bb_target$sroa$0$053;
     $1002 = ((34156304 + (($979*12)|0)|0) + 4|0);
     $1003 = HEAP32[$1002>>2]|0;
     $1004 = $1003 ^ $bb_target$sroa$1$054;
     $1005 = ((34156304 + (($979*12)|0)|0) + 8|0);
     $1006 = HEAP32[$1005>>2]|0;
     $1007 = $1006 ^ $bb_target$sroa$2$055;
     $1008 = $1004 | $1001;
     $1009 = $1008 | $1007;
     $1010 = ($1009|0)==(0);
     if ($1010) {
      $$22$lcssa = $$24$lcssa;
      break;
     } else {
      $$2256 = $$24$lcssa;$bb_target$sroa$0$053 = $1001;$bb_target$sroa$1$054 = $1004;$bb_target$sroa$2$055 = $1007;
     }
    }
   }
   $976 = ($900|0)==(0);
   if ($976) {
    $$32$ph = $$22$lcssa;
    break;
   }
   $977 = ($nhand$0|0)<($nhand$5|0);
   $978 = (($nhand$5) - ($nhand$0))|0;
   $$2544 = $$22$lcssa;$ubb_target0b$043 = $900;
   while(1) {
    $1024 = (_last_one0($ubb_target0b$043)|0);
    $1025 = (1248 + ($1024)|0);
    $1026 = HEAP8[$1025>>0]|0;
    $1027 = $1026&255;
    $1028 = (($ais_pawn) + ($1027<<2)|0);
    $1029 = HEAP32[$1028>>2]|0;
    $1030 = ($1029|0)==(0);
    do {
     if ($1030) {
      $1031 = (($1024) + -9)|0;
      $1032 = ((($ptree) + ($1031)|0) + 512|0);
      $1033 = HEAP8[$1032>>0]|0;
      $1034 = ($1033<<24>>24)==(-8);
      if ($1034) {
       $1035 = (_is_mate_b_pawn_drop($ptree,$1024)|0);
       $1036 = ($1035|0)==(0);
       if (!($1036)) {
        $$27$ph = $$2544;
        break;
       }
      }
      $1037 = $1024 | 10368;
      $1038 = (($$2544) + 4|0);
      HEAP32[$$2544>>2] = $1037;
      $$27$ph = $1038;
     } else {
      $$27$ph = $$2544;
     }
    } while(0);
    if ($977) {
     $$2737 = $$27$ph;$i$136 = $nhand$0;
     while(1) {
      $1039 = (($ahand) + ($i$136<<2)|0);
      $1040 = HEAP32[$1039>>2]|0;
      $1041 = $1040 | $1024;
      HEAP32[$$2737>>2] = $1041;
      $1042 = (($i$136) + 1)|0;
      $exitcond = ($1042|0)==($nhand$5|0);
      if ($exitcond) {
       break;
      }
      $1043 = (($$2737) + 4|0);
      $$2737 = $1043;$i$136 = $1042;
     }
     $scevgep = (($$27$ph) + ($978<<2)|0);
     $$27$lcssa = $scevgep;
    } else {
     $$27$lcssa = $$27$ph;
    }
    $1044 = (34156304 + (($1024*12)|0)|0);
    $1045 = HEAP32[$1044>>2]|0;
    $1046 = $1045 ^ $ubb_target0b$043;
    $1047 = ($1045|0)==($ubb_target0b$043|0);
    if ($1047) {
     $$32$ph = $$27$lcssa;
     break;
    } else {
     $$2544 = $$27$lcssa;$ubb_target0b$043 = $1046;
    }
   }
  }
 } while(0);
 $1011 = ($899|0)==(0);
 if ($1011) {
  $$0 = $$32$ph;
  STACKTOP = sp;return ($$0|0);
 }
 $1012 = ($nhand$1|0)<($nhand$5|0);
 if (!($1012)) {
  $ubb_target0a$07 = $899;
  while(1) {
   $1079 = (_last_one0($ubb_target0a$07)|0);
   $1080 = (34156304 + (($1079*12)|0)|0);
   $1081 = HEAP32[$1080>>2]|0;
   $1082 = $1081 ^ $ubb_target0a$07;
   $1083 = ($1081|0)==($ubb_target0a$07|0);
   if ($1083) {
    $$0 = $$32$ph;
    break;
   } else {
    $ubb_target0a$07 = $1082;
   }
  }
  STACKTOP = sp;return ($$0|0);
 }
 $1013 = (($nhand$5) - ($nhand$1))|0;
 $$328$us = $$32$ph;$ubb_target0a$07$us = $899;
 while(1) {
  $1015 = (_last_one0($ubb_target0a$07$us)|0);
  $$336$us = $$328$us;$i$45$us = $nhand$1;
  while(1) {
   $1019 = (($ahand) + ($i$45$us<<2)|0);
   $1020 = HEAP32[$1019>>2]|0;
   $1021 = $1020 | $1015;
   HEAP32[$$336$us>>2] = $1021;
   $1022 = (($i$45$us) + 1)|0;
   $exitcond401 = ($1022|0)==($nhand$5|0);
   if ($exitcond401) {
    break;
   }
   $1023 = (($$336$us) + 4|0);
   $$336$us = $1023;$i$45$us = $1022;
  }
  $scevgep400 = (($$328$us) + ($1013<<2)|0);
  $1014 = (34156304 + (($1015*12)|0)|0);
  $1016 = HEAP32[$1014>>2]|0;
  $1017 = $1016 ^ $ubb_target0a$07$us;
  $1018 = ($1016|0)==($ubb_target0a$07$us|0);
  if ($1018) {
   $$0 = $scevgep400;
   break;
  } else {
   $$328$us = $scevgep400;$ubb_target0a$07$us = $1017;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _w_gen_evasion($ptree,$pmove) {
 $ptree = $ptree|0;
 $pmove = $pmove|0;
 var $$ = 0, $$$v = 0, $$0 = 0, $$01$lcssa = 0, $$01198 = 0, $$1 = 0, $$10 = 0, $$11 = 0, $$12$ph237 = 0, $$12$ph241 = 0, $$13 = 0, $$14$ph229 = 0, $$14$ph233 = 0, $$15 = 0, $$16$ph221 = 0, $$16$ph225 = 0, $$17 = 0, $$18$ph213 = 0, $$18$ph217 = 0, $$19 = 0;
 var $$2$ph = 0, $$20$ph205 = 0, $$20$ph209 = 0, $$21 = 0, $$22$lcssa = 0, $$2256 = 0, $$24$lcssa = 0, $$24$ph = 0, $$2449 = 0, $$2544 = 0, $$27$lcssa = 0, $$27$ph = 0, $$2737 = 0, $$28$lcssa = 0, $$2832 = 0, $$29$lcssa = 0, $$2923 = 0, $$3$ph$be = 0, $$3$ph261 = 0, $$3$ph265 = 0;
 var $$3019$us = 0, $$3112$us = 0, $$32$ph = 0, $$328$us = 0, $$336$us = 0, $$42 = 0, $$5$ph253 = 0, $$5$ph257 = 0, $$6 = 0, $$74 = 0, $$8 = 0, $$9$ph245 = 0, $$9$ph249 = 0, $$pre = 0, $$pre407 = 0, $$pre408 = 0, $$pre409 = 0, $$pre410 = 0, $$pre411 = 0, $$pre412 = 0;
 var $$pre413 = 0, $$pre414 = 0, $$pre415 = 0, $$pre416 = 0, $$pre417 = 0, $$pre418 = 0, $$pre419 = 0, $$pre420 = 0, $$pre421 = 0, $$pre422 = 0, $$pre423 = 0, $$pre424 = 0, $$pre425 = 0, $$pre426 = 0, $$pre427 = 0, $$pre428 = 0, $$pre429 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0;
 var $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0;
 var $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $ahand = 0;
 var $ais_pawn = 0, $bb_desti$sroa$0$0195 = 0, $bb_desti$sroa$0$1 = 0, $bb_desti$sroa$0$1$ph = 0, $bb_desti$sroa$0$2 = 0, $bb_desti$sroa$0$3 = 0, $bb_desti$sroa$0$4 = 0, $bb_desti$sroa$0$5 = 0, $bb_desti$sroa$0$6 = 0, $bb_desti$sroa$0$7 = 0, $bb_desti$sroa$0$8 = 0, $bb_desti$sroa$1$0196 = 0, $bb_desti$sroa$1$1 = 0, $bb_desti$sroa$1$1$ph = 0, $bb_desti$sroa$1$2 = 0, $bb_desti$sroa$1$3 = 0, $bb_desti$sroa$1$4 = 0, $bb_desti$sroa$1$5 = 0, $bb_desti$sroa$1$6 = 0, $bb_desti$sroa$1$7 = 0;
 var $bb_desti$sroa$1$8 = 0, $bb_desti$sroa$2$0197 = 0, $bb_desti$sroa$2$1 = 0, $bb_desti$sroa$2$1$ph = 0, $bb_desti$sroa$2$2 = 0, $bb_desti$sroa$2$3 = 0, $bb_desti$sroa$2$4 = 0, $bb_desti$sroa$2$5 = 0, $bb_desti$sroa$2$6 = 0, $bb_desti$sroa$2$7 = 0, $bb_desti$sroa$2$8 = 0, $bb_piece$sroa$0$0$ph264 = 0, $bb_piece$sroa$0$0186 = 0, $bb_piece$sroa$0$1$ph256 = 0, $bb_piece$sroa$0$1172 = 0, $bb_piece$sroa$0$2$ph248 = 0, $bb_piece$sroa$0$2156 = 0, $bb_piece$sroa$0$3$ph240 = 0, $bb_piece$sroa$0$3139 = 0, $bb_piece$sroa$0$4$ph232 = 0;
 var $bb_piece$sroa$0$4122 = 0, $bb_piece$sroa$0$5$ph224 = 0, $bb_piece$sroa$0$5105 = 0, $bb_piece$sroa$0$6$ph216 = 0, $bb_piece$sroa$0$688 = 0, $bb_piece$sroa$0$7$ph208 = 0, $bb_piece$sroa$0$771 = 0, $bb_piece$sroa$1$0$ph263 = 0, $bb_piece$sroa$1$0185 = 0, $bb_piece$sroa$1$1$ph255 = 0, $bb_piece$sroa$1$1171 = 0, $bb_piece$sroa$1$2$ph247 = 0, $bb_piece$sroa$1$2155 = 0, $bb_piece$sroa$1$3$ph239 = 0, $bb_piece$sroa$1$3138 = 0, $bb_piece$sroa$1$4$ph231 = 0, $bb_piece$sroa$1$4121 = 0, $bb_piece$sroa$1$5$ph223 = 0, $bb_piece$sroa$1$5104 = 0, $bb_piece$sroa$1$6$ph215 = 0;
 var $bb_piece$sroa$1$687 = 0, $bb_piece$sroa$1$7$ph207 = 0, $bb_piece$sroa$1$770 = 0, $bb_piece$sroa$2$0$ph262 = 0, $bb_piece$sroa$2$0184 = 0, $bb_piece$sroa$2$1$ph254 = 0, $bb_piece$sroa$2$1170 = 0, $bb_piece$sroa$2$2$ph246 = 0, $bb_piece$sroa$2$2154 = 0, $bb_piece$sroa$2$3$ph238 = 0, $bb_piece$sroa$2$3137 = 0, $bb_piece$sroa$2$4$ph230 = 0, $bb_piece$sroa$2$4120 = 0, $bb_piece$sroa$2$5$ph222 = 0, $bb_piece$sroa$2$5103 = 0, $bb_piece$sroa$2$6$ph214 = 0, $bb_piece$sroa$2$686 = 0, $bb_piece$sroa$2$7$ph206 = 0, $bb_piece$sroa$2$769 = 0, $bb_target$sroa$0$053 = 0;
 var $bb_target$sroa$0$129 = 0, $bb_target$sroa$1$054 = 0, $bb_target$sroa$1$130 = 0, $bb_target$sroa$2$055 = 0, $bb_target$sroa$2$131 = 0, $exitcond = 0, $exitcond268 = 0, $exitcond270 = 0, $exitcond403 = 0, $exitcond406 = 0, $i$048 = 0, $i$136 = 0, $i$222 = 0, $i$311$us = 0, $i$45$us = 0, $nhand$0 = 0, $nhand$1 = 0, $nhand$2 = 0, $nhand$3 = 0, $nhand$4 = 0;
 var $nhand$5 = 0, $or$cond = 0, $scevgep = 0, $scevgep267 = 0, $scevgep269 = 0, $scevgep402 = 0, $scevgep405 = 0, $ubb_target2a$07 = 0, $ubb_target2a$07$us = 0, $ubb_target2b$043 = 0, $ubb_target2b$118 = 0, $ubb_target2b$118$us = 0, $utemp$1 = 0, $utemp$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ais_pawn = sp + 40|0;
 $ahand = sp + 16|0;
 $0 = sp;
 $1 = (($ptree) + 594|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = (34156304 + (($3*12)|0)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($ptree) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 ^ $5;
 HEAP32[$6>>2] = $8;
 $9 = ((34156304 + (($3*12)|0)|0) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($ptree) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 ^ $10;
 HEAP32[$11>>2] = $13;
 $14 = ((34156304 + (($3*12)|0)|0) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($ptree) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 ^ $15;
 HEAP32[$16>>2] = $18;
 $19 = (34157280 + (($3*12)|0)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($ptree) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 ^ $20;
 HEAP32[$21>>2] = $23;
 $24 = ((34157280 + (($3*12)|0)|0) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($ptree) + 36|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 ^ $25;
 HEAP32[$26>>2] = $28;
 $29 = ((34157280 + (($3*12)|0)|0) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($ptree) + 40|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 ^ $30;
 HEAP32[$31>>2] = $33;
 $34 = (34158256 + (($3*12)|0)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($ptree) + 44|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 ^ $35;
 HEAP32[$36>>2] = $38;
 $39 = ((34158256 + (($3*12)|0)|0) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($ptree) + 48|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 ^ $40;
 HEAP32[$41>>2] = $43;
 $44 = ((34158256 + (($3*12)|0)|0) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($ptree) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 ^ $45;
 HEAP32[$46>>2] = $48;
 $49 = (34159232 + (($3*12)|0)|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($ptree) + 56|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $52 ^ $50;
 HEAP32[$51>>2] = $53;
 $54 = ((34159232 + (($3*12)|0)|0) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($ptree) + 60|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $57 ^ $55;
 HEAP32[$56>>2] = $58;
 $59 = ((34159232 + (($3*12)|0)|0) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($ptree) + 64|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62 ^ $60;
 HEAP32[$61>>2] = $63;
 $64 = (33578928 + (($3*12)|0)|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $8 ^ -1;
 $67 = $65 & $66;
 $68 = ((33578928 + (($3*12)|0)|0) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $13 ^ -1;
 $71 = $69 & $70;
 $72 = ((33578928 + (($3*12)|0)|0) + 8|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $18 ^ -1;
 $75 = $73 & $74;
 $76 = $3 << 7;
 $77 = $71 | $67;
 $78 = $77 | $75;
 $79 = ($78|0)==(0);
 if ($79) {
  $$01$lcssa = $pmove;$104 = $8;$105 = $5;$107 = $13;$108 = $10;$110 = $18;$111 = $15;$113 = $23;$114 = $20;$116 = $28;$117 = $25;$119 = $33;$120 = $30;$122 = $38;$123 = $35;$125 = $43;$126 = $40;$128 = $48;$129 = $45;$131 = $53;$132 = $50;$134 = $58;$135 = $55;$137 = $63;$138 = $60;
 } else {
  $$01198 = $pmove;$bb_desti$sroa$0$0195 = $67;$bb_desti$sroa$1$0196 = $71;$bb_desti$sroa$2$0197 = $75;
  while(1) {
   $80 = (_first_one012($bb_desti$sroa$0$0195,$bb_desti$sroa$1$0196,$bb_desti$sroa$2$0197)|0);
   $81 = (_is_white_attacked($ptree,$80)|0);
   $82 = ($81|0)==(0);
   if ($82) {
    $83 = ((($ptree) + ($80)|0) + 512|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84 << 24 >> 24;
    $86 = $85 << 19;
    $87 = $76 | $80;
    $88 = $87 | $86;
    $89 = $88 | 262144;
    $90 = (($$01198) + 4|0);
    HEAP32[$$01198>>2] = $89;
    $$1 = $90;
   } else {
    $$1 = $$01198;
   }
   $91 = (34156304 + (($80*12)|0)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $92 ^ $bb_desti$sroa$0$0195;
   $94 = ((34156304 + (($80*12)|0)|0) + 4|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $95 ^ $bb_desti$sroa$1$0196;
   $97 = ((34156304 + (($80*12)|0)|0) + 8|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $98 ^ $bb_desti$sroa$2$0197;
   $100 = $96 | $93;
   $101 = $100 | $99;
   $102 = ($101|0)==(0);
   if ($102) {
    break;
   } else {
    $$01198 = $$1;$bb_desti$sroa$0$0195 = $93;$bb_desti$sroa$1$0196 = $96;$bb_desti$sroa$2$0197 = $99;
   }
  }
  $$pre = HEAP32[$4>>2]|0;
  $$pre407 = HEAP32[$6>>2]|0;
  $$pre408 = HEAP32[$9>>2]|0;
  $$pre409 = HEAP32[$11>>2]|0;
  $$pre410 = HEAP32[$14>>2]|0;
  $$pre411 = HEAP32[$16>>2]|0;
  $$pre412 = HEAP32[$19>>2]|0;
  $$pre413 = HEAP32[$21>>2]|0;
  $$pre414 = HEAP32[$24>>2]|0;
  $$pre415 = HEAP32[$26>>2]|0;
  $$pre416 = HEAP32[$29>>2]|0;
  $$pre417 = HEAP32[$31>>2]|0;
  $$pre418 = HEAP32[$34>>2]|0;
  $$pre419 = HEAP32[$36>>2]|0;
  $$pre420 = HEAP32[$39>>2]|0;
  $$pre421 = HEAP32[$41>>2]|0;
  $$pre422 = HEAP32[$44>>2]|0;
  $$pre423 = HEAP32[$46>>2]|0;
  $$pre424 = HEAP32[$49>>2]|0;
  $$pre425 = HEAP32[$51>>2]|0;
  $$pre426 = HEAP32[$54>>2]|0;
  $$pre427 = HEAP32[$56>>2]|0;
  $$pre428 = HEAP32[$59>>2]|0;
  $$pre429 = HEAP32[$61>>2]|0;
  $$01$lcssa = $$1;$104 = $$pre407;$105 = $$pre;$107 = $$pre409;$108 = $$pre408;$110 = $$pre411;$111 = $$pre410;$113 = $$pre413;$114 = $$pre412;$116 = $$pre415;$117 = $$pre414;$119 = $$pre417;$120 = $$pre416;$122 = $$pre419;$123 = $$pre418;$125 = $$pre421;$126 = $$pre420;$128 = $$pre423;$129 = $$pre422;$131 = $$pre425;$132 = $$pre424;$134 = $$pre427;$135 = $$pre426;$137 = $$pre429;$138 = $$pre428;
 }
 $103 = $104 ^ $105;
 HEAP32[$6>>2] = $103;
 $106 = $107 ^ $108;
 HEAP32[$11>>2] = $106;
 $109 = $110 ^ $111;
 HEAP32[$16>>2] = $109;
 $112 = $113 ^ $114;
 HEAP32[$21>>2] = $112;
 $115 = $116 ^ $117;
 HEAP32[$26>>2] = $115;
 $118 = $119 ^ $120;
 HEAP32[$31>>2] = $118;
 $121 = $122 ^ $123;
 HEAP32[$36>>2] = $121;
 $124 = $125 ^ $126;
 HEAP32[$41>>2] = $124;
 $127 = $128 ^ $129;
 HEAP32[$46>>2] = $127;
 $130 = $131 ^ $132;
 HEAP32[$51>>2] = $130;
 $133 = $134 ^ $135;
 HEAP32[$56>>2] = $133;
 $136 = $137 ^ $138;
 HEAP32[$61>>2] = $136;
 _b_attacks_to_piece($0,$ptree,$3);
 $139 = HEAP32[$0>>2]|0;
 $140 = (($0) + 4|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = (($0) + 8|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = (_popu_count012($139,$141,$143)|0);
 $145 = ($144|0)==(2);
 if ($145) {
  $$0 = $$01$lcssa;
  STACKTOP = sp;return ($$0|0);
 }
 $146 = (_first_one012($139,$141,$143)|0);
 $147 = ((34077568 + (($3*972)|0)|0) + (($146*12)|0)|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = (((34077568 + (($3*972)|0)|0) + (($146*12)|0)|0) + 4|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = (((34077568 + (($3*972)|0)|0) + (($146*12)|0)|0) + 8|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = $148 | $139;
 $154 = $150 | $141;
 $155 = $152 | $143;
 $156 = (($ptree) + 176|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = $157 & $153;
 $159 = (($ptree) + 180|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = $160 & $154;
 $162 = (($ptree) + 184|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = $163 & $155;
 $$2$ph = $$01$lcssa;$bb_desti$sroa$0$1$ph = $158;$bb_desti$sroa$1$1$ph = $161;$bb_desti$sroa$2$1$ph = $164;
 L12: while(1) {
  $bb_desti$sroa$0$1 = $bb_desti$sroa$0$1$ph;$bb_desti$sroa$1$1 = $bb_desti$sroa$1$1$ph;$bb_desti$sroa$2$1 = $bb_desti$sroa$2$1$ph;
  while(1) {
   $165 = $bb_desti$sroa$1$1 | $bb_desti$sroa$0$1;
   $166 = $165 | $bb_desti$sroa$2$1;
   $167 = ($166|0)==(0);
   if ($167) {
    break L12;
   }
   $168 = (_first_one012($bb_desti$sroa$0$1,$bb_desti$sroa$1$1,$bb_desti$sroa$2$1)|0);
   $169 = (34156304 + (($168*12)|0)|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = $170 ^ $bb_desti$sroa$0$1;
   $172 = ((34156304 + (($168*12)|0)|0) + 4|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $173 ^ $bb_desti$sroa$1$1;
   $175 = ((34156304 + (($168*12)|0)|0) + 8|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = $176 ^ $bb_desti$sroa$2$1;
   $178 = (($168) + -9)|0;
   $179 = ((220518304 + (($3*81)|0)|0) + ($178)|0);
   $180 = HEAP8[$179>>0]|0;
   $181 = ($180<<24>>24)==(0);
   if ($181) {
    break;
   }
   $182 = $180&255;
   $183 = (_is_pinned_on_white_king($ptree,$178,$182)|0);
   $184 = ($183|0)==(0);
   if ($184) {
    break;
   } else {
    $bb_desti$sroa$0$1 = $171;$bb_desti$sroa$1$1 = $174;$bb_desti$sroa$2$1 = $177;
   }
  }
  $185 = $178 << 7;
  $186 = $185 | $168;
  $187 = ((($ptree) + ($168)|0) + 512|0);
  $188 = HEAP8[$187>>0]|0;
  $189 = $188 << 24 >> 24;
  $190 = $189 << 19;
  $191 = ($168|0)>(53);
  $$$v = $191 ? 49152 : 32768;
  $192 = $186 | $$$v;
  $$ = $192 | $190;
  $193 = (($$2$ph) + 4|0);
  HEAP32[$$2$ph>>2] = $$;
  $$2$ph = $193;$bb_desti$sroa$0$1$ph = $171;$bb_desti$sroa$1$1$ph = $174;$bb_desti$sroa$2$1$ph = $177;
 }
 $194 = (($ptree) + 200|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = (($ptree) + 204|0);
 $197 = HEAP32[$196>>2]|0;
 $198 = (($ptree) + 208|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = $197 | $199;
 $201 = $200 | $195;
 $202 = ($201|0)==(0);
 L20: do {
  if ($202) {
   $$3$ph261 = $$2$ph;
  } else {
   $$3$ph265 = $$2$ph;$bb_piece$sroa$0$0$ph264 = $195;$bb_piece$sroa$1$0$ph263 = $197;$bb_piece$sroa$2$0$ph262 = $199;
   while(1) {
    $bb_piece$sroa$0$0186 = $bb_piece$sroa$0$0$ph264;$bb_piece$sroa$1$0185 = $bb_piece$sroa$1$0$ph263;$bb_piece$sroa$2$0184 = $bb_piece$sroa$2$0$ph262;
    while(1) {
     $203 = (_first_one012($bb_piece$sroa$0$0186,$bb_piece$sroa$1$0185,$bb_piece$sroa$2$0184)|0);
     $204 = (34156304 + (($203*12)|0)|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = $205 ^ $bb_piece$sroa$0$0186;
     $207 = ((34156304 + (($203*12)|0)|0) + 4|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = $208 ^ $bb_piece$sroa$1$0185;
     $210 = ((34156304 + (($203*12)|0)|0) + 8|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = $211 ^ $bb_piece$sroa$2$0184;
     $213 = ((33572424 + ($203<<3)|0) + 2|0);
     $214 = HEAP8[$213>>0]|0;
     $215 = $214&255;
     $216 = ((($ptree) + ($215<<2)|0) + 32|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = ((33572424 + ($203<<3)|0) + 3|0);
     $219 = HEAP8[$218>>0]|0;
     $220 = $219&255;
     $221 = $217 >>> $220;
     $222 = $221 & 127;
     $223 = ((33953152 + (($203*1536)|0)|0) + (($222*12)|0)|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = (((33953152 + (($203*1536)|0)|0) + (($222*12)|0)|0) + 4|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = (((33953152 + (($203*1536)|0)|0) + (($222*12)|0)|0) + 8|0);
     $228 = HEAP32[$227>>2]|0;
     $229 = (34160208 + (($203*12)|0)|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = ((34160208 + (($203*12)|0)|0) + 4|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = ((34160208 + (($203*12)|0)|0) + 8|0);
     $234 = HEAP32[$233>>2]|0;
     $235 = $224 & $153;
     $236 = $235 & $230;
     $237 = $226 & $154;
     $238 = $237 & $232;
     $239 = $228 & $155;
     $240 = $239 & $234;
     $241 = $238 | $236;
     $242 = $241 | $240;
     $243 = ($242|0)==(0);
     if (!($243)) {
      $247 = ((220518304 + (($3*81)|0)|0) + ($203)|0);
      $248 = HEAP8[$247>>0]|0;
      $249 = ($248<<24>>24)==(0);
      if ($249) {
       break;
      }
      $250 = $248&255;
      $251 = (_is_pinned_on_white_king($ptree,$203,$250)|0);
      $252 = ($251|0)==(0);
      if ($252) {
       break;
      }
     }
     $244 = $209 | $212;
     $245 = $244 | $206;
     $246 = ($245|0)==(0);
     if ($246) {
      $$3$ph261 = $$3$ph265;
      break L20;
     } else {
      $bb_piece$sroa$0$0186 = $206;$bb_piece$sroa$1$0185 = $209;$bb_piece$sroa$2$0184 = $212;
     }
    }
    $253 = (_first_one012($236,$238,$240)|0);
    $254 = $203 << 7;
    $255 = $253 | $254;
    $256 = ((($ptree) + ($253)|0) + 512|0);
    $257 = HEAP8[$256>>0]|0;
    $258 = $257 << 24 >> 24;
    $259 = $258 << 19;
    $260 = $255 | $259;
    $261 = $260 | 65536;
    $262 = ($253|0)>(53);
    if ($262) {
     $263 = $260 | 81920;
     $264 = (($$3$ph265) + 4|0);
     HEAP32[$$3$ph265>>2] = $263;
     $265 = ($253|0)<(63);
     if ($265) {
      $$42 = $264;
      label = 21;
     } else {
      $$3$ph$be = $264;
     }
    } else {
     $$42 = $$3$ph265;
     label = 21;
    }
    if ((label|0) == 21) {
     label = 0;
     $266 = (($$42) + 4|0);
     HEAP32[$$42>>2] = $261;
     $$3$ph$be = $266;
    }
    $267 = $209 | $212;
    $268 = $267 | $206;
    $269 = ($268|0)==(0);
    if ($269) {
     $$3$ph261 = $$3$ph$be;
     break;
    } else {
     $$3$ph265 = $$3$ph$be;$bb_piece$sroa$0$0$ph264 = $206;$bb_piece$sroa$1$0$ph263 = $209;$bb_piece$sroa$2$0$ph262 = $212;
    }
   }
  }
 } while(0);
 $270 = (($ptree) + 224|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = (($ptree) + 228|0);
 $273 = HEAP32[$272>>2]|0;
 $274 = (($ptree) + 232|0);
 $275 = HEAP32[$274>>2]|0;
 $276 = $273 | $275;
 $277 = $276 | $271;
 $278 = ($277|0)==(0);
 L36: do {
  if ($278) {
   $$5$ph253 = $$3$ph261;
  } else {
   $$5$ph257 = $$3$ph261;$bb_piece$sroa$0$1$ph256 = $271;$bb_piece$sroa$1$1$ph255 = $273;$bb_piece$sroa$2$1$ph254 = $275;
   while(1) {
    $bb_piece$sroa$0$1172 = $bb_piece$sroa$0$1$ph256;$bb_piece$sroa$1$1171 = $bb_piece$sroa$1$1$ph255;$bb_piece$sroa$2$1170 = $bb_piece$sroa$2$1$ph254;
    while(1) {
     $285 = (_first_one012($bb_piece$sroa$0$1172,$bb_piece$sroa$1$1171,$bb_piece$sroa$2$1170)|0);
     $286 = (34156304 + (($285*12)|0)|0);
     $287 = HEAP32[$286>>2]|0;
     $283 = $287 ^ $bb_piece$sroa$0$1172;
     $288 = ((34156304 + (($285*12)|0)|0) + 4|0);
     $289 = HEAP32[$288>>2]|0;
     $280 = $289 ^ $bb_piece$sroa$1$1171;
     $290 = ((34156304 + (($285*12)|0)|0) + 8|0);
     $291 = HEAP32[$290>>2]|0;
     $281 = $291 ^ $bb_piece$sroa$2$1170;
     $292 = (33576000 + (($285*12)|0)|0);
     $293 = HEAP32[$292>>2]|0;
     $294 = $293 & $153;
     $295 = ((33576000 + (($285*12)|0)|0) + 4|0);
     $296 = HEAP32[$295>>2]|0;
     $297 = $296 & $154;
     $298 = ((33576000 + (($285*12)|0)|0) + 8|0);
     $299 = HEAP32[$298>>2]|0;
     $300 = $299 & $155;
     $301 = $297 | $294;
     $302 = $301 | $300;
     $303 = ($302|0)==(0);
     if (!($303)) {
      $307 = ((220518304 + (($3*81)|0)|0) + ($285)|0);
      $308 = HEAP8[$307>>0]|0;
      $309 = ($308<<24>>24)==(0);
      if ($309) {
       break;
      }
      $310 = $308&255;
      $311 = (_is_pinned_on_white_king($ptree,$285,$310)|0);
      $312 = ($311|0)==(0);
      if ($312) {
       break;
      }
     }
     $304 = $280 | $281;
     $305 = $304 | $283;
     $306 = ($305|0)==(0);
     if ($306) {
      $$5$ph253 = $$5$ph257;
      break L36;
     } else {
      $bb_piece$sroa$0$1172 = $283;$bb_piece$sroa$1$1171 = $280;$bb_piece$sroa$2$1170 = $281;
     }
    }
    $313 = $285 << 7;
    $$6 = $$5$ph257;$bb_desti$sroa$0$2 = $294;$bb_desti$sroa$1$2 = $297;$bb_desti$sroa$2$2 = $300;
    while(1) {
     $314 = (_first_one012($bb_desti$sroa$0$2,$bb_desti$sroa$1$2,$bb_desti$sroa$2$2)|0);
     $315 = (34156304 + (($314*12)|0)|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = $316 ^ $bb_desti$sroa$0$2;
     $318 = ((34156304 + (($314*12)|0)|0) + 4|0);
     $319 = HEAP32[$318>>2]|0;
     $320 = $319 ^ $bb_desti$sroa$1$2;
     $321 = ((34156304 + (($314*12)|0)|0) + 8|0);
     $322 = HEAP32[$321>>2]|0;
     $323 = $322 ^ $bb_desti$sroa$2$2;
     $324 = $314 | $313;
     $325 = ((($ptree) + ($314)|0) + 512|0);
     $326 = HEAP8[$325>>0]|0;
     $327 = $326 << 24 >> 24;
     $328 = $327 << 19;
     $329 = $324 | $328;
     $330 = $329 | 98304;
     $331 = ($314|0)>(53);
     if ($331) {
      $332 = $329 | 114688;
      $333 = (($$6) + 4|0);
      HEAP32[$$6>>2] = $332;
      $334 = ($314|0)<(63);
      if ($334) {
       $$74 = $333;
       label = 33;
      } else {
       $$8 = $333;
      }
     } else {
      $$74 = $$6;
      label = 33;
     }
     if ((label|0) == 33) {
      label = 0;
      $335 = (($$74) + 4|0);
      HEAP32[$$74>>2] = $330;
      $$8 = $335;
     }
     $336 = $320 | $317;
     $337 = $336 | $323;
     $338 = ($337|0)==(0);
     if ($338) {
      break;
     } else {
      $$6 = $$8;$bb_desti$sroa$0$2 = $317;$bb_desti$sroa$1$2 = $320;$bb_desti$sroa$2$2 = $323;
     }
    }
    $279 = $280 | $281;
    $282 = $279 | $283;
    $284 = ($282|0)==(0);
    if ($284) {
     $$5$ph253 = $$8;
     break;
    } else {
     $$5$ph257 = $$8;$bb_piece$sroa$0$1$ph256 = $283;$bb_piece$sroa$1$1$ph255 = $280;$bb_piece$sroa$2$1$ph254 = $281;
    }
   }
  }
 } while(0);
 $339 = (($ptree) + 248|0);
 $340 = HEAP32[$339>>2]|0;
 $341 = (($ptree) + 252|0);
 $342 = HEAP32[$341>>2]|0;
 $343 = (($ptree) + 256|0);
 $344 = HEAP32[$343>>2]|0;
 $345 = $342 | $344;
 $346 = $345 | $340;
 $347 = ($346|0)==(0);
 L55: do {
  if ($347) {
   $$9$ph245 = $$5$ph253;
  } else {
   $$9$ph249 = $$5$ph253;$bb_piece$sroa$0$2$ph248 = $340;$bb_piece$sroa$1$2$ph247 = $342;$bb_piece$sroa$2$2$ph246 = $344;
   while(1) {
    $bb_piece$sroa$0$2156 = $bb_piece$sroa$0$2$ph248;$bb_piece$sroa$1$2155 = $bb_piece$sroa$1$2$ph247;$bb_piece$sroa$2$2154 = $bb_piece$sroa$2$2$ph246;
    while(1) {
     $354 = (_first_one012($bb_piece$sroa$0$2156,$bb_piece$sroa$1$2155,$bb_piece$sroa$2$2154)|0);
     $355 = (34156304 + (($354*12)|0)|0);
     $356 = HEAP32[$355>>2]|0;
     $352 = $356 ^ $bb_piece$sroa$0$2156;
     $357 = ((34156304 + (($354*12)|0)|0) + 4|0);
     $358 = HEAP32[$357>>2]|0;
     $349 = $358 ^ $bb_piece$sroa$1$2155;
     $359 = ((34156304 + (($354*12)|0)|0) + 8|0);
     $360 = HEAP32[$359>>2]|0;
     $350 = $360 ^ $bb_piece$sroa$2$2154;
     $361 = (33576976 + (($354*12)|0)|0);
     $362 = HEAP32[$361>>2]|0;
     $363 = $362 & $153;
     $364 = ((33576976 + (($354*12)|0)|0) + 4|0);
     $365 = HEAP32[$364>>2]|0;
     $366 = $365 & $154;
     $367 = ((33576976 + (($354*12)|0)|0) + 8|0);
     $368 = HEAP32[$367>>2]|0;
     $369 = $368 & $155;
     $370 = $366 | $363;
     $371 = $370 | $369;
     $372 = ($371|0)==(0);
     if (!($372)) {
      $376 = ((220518304 + (($3*81)|0)|0) + ($354)|0);
      $377 = HEAP8[$376>>0]|0;
      $378 = ($377<<24>>24)==(0);
      if ($378) {
       break;
      }
      $379 = $377&255;
      $380 = (_is_pinned_on_white_king($ptree,$354,$379)|0);
      $381 = ($380|0)==(0);
      if ($381) {
       break;
      }
     }
     $373 = $349 | $350;
     $374 = $373 | $352;
     $375 = ($374|0)==(0);
     if ($375) {
      $$9$ph245 = $$9$ph249;
      break L55;
     } else {
      $bb_piece$sroa$0$2156 = $352;$bb_piece$sroa$1$2155 = $349;$bb_piece$sroa$2$2154 = $350;
     }
    }
    $382 = $354 << 7;
    $383 = ($354|0)>(53);
    $$10 = $$9$ph249;$bb_desti$sroa$0$3 = $363;$bb_desti$sroa$1$3 = $366;$bb_desti$sroa$2$3 = $369;
    while(1) {
     $384 = (_first_one012($bb_desti$sroa$0$3,$bb_desti$sroa$1$3,$bb_desti$sroa$2$3)|0);
     $385 = (34156304 + (($384*12)|0)|0);
     $386 = HEAP32[$385>>2]|0;
     $387 = $386 ^ $bb_desti$sroa$0$3;
     $388 = ((34156304 + (($384*12)|0)|0) + 4|0);
     $389 = HEAP32[$388>>2]|0;
     $390 = $389 ^ $bb_desti$sroa$1$3;
     $391 = ((34156304 + (($384*12)|0)|0) + 8|0);
     $392 = HEAP32[$391>>2]|0;
     $393 = $392 ^ $bb_desti$sroa$2$3;
     $394 = $384 | $382;
     $395 = ((($ptree) + ($384)|0) + 512|0);
     $396 = HEAP8[$395>>0]|0;
     $397 = $396 << 24 >> 24;
     $398 = $397 << 19;
     $399 = $394 | $398;
     $400 = $399 | 131072;
     $401 = ($384|0)>(53);
     $or$cond = $383 | $401;
     if ($or$cond) {
      $402 = $399 | 147456;
      $403 = (($$10) + 4|0);
      HEAP32[$$10>>2] = $402;
      $$11 = $403;
     } else {
      $$11 = $$10;
     }
     $404 = (($$11) + 4|0);
     HEAP32[$$11>>2] = $400;
     $405 = $390 | $387;
     $406 = $405 | $393;
     $407 = ($406|0)==(0);
     if ($407) {
      break;
     } else {
      $$10 = $404;$bb_desti$sroa$0$3 = $387;$bb_desti$sroa$1$3 = $390;$bb_desti$sroa$2$3 = $393;
     }
    }
    $348 = $349 | $350;
    $351 = $348 | $352;
    $353 = ($351|0)==(0);
    if ($353) {
     $$9$ph245 = $404;
     break;
    } else {
     $$9$ph249 = $404;$bb_piece$sroa$0$2$ph248 = $352;$bb_piece$sroa$1$2$ph247 = $349;$bb_piece$sroa$2$2$ph246 = $350;
    }
   }
  }
 } while(0);
 $408 = (($ptree) + 104|0);
 $409 = HEAP32[$408>>2]|0;
 $410 = (($ptree) + 108|0);
 $411 = HEAP32[$410>>2]|0;
 $412 = (($ptree) + 112|0);
 $413 = HEAP32[$412>>2]|0;
 $414 = $411 | $413;
 $415 = $414 | $409;
 $416 = ($415|0)==(0);
 L72: do {
  if ($416) {
   $$12$ph237 = $$9$ph245;
  } else {
   $$12$ph241 = $$9$ph245;$bb_piece$sroa$0$3$ph240 = $409;$bb_piece$sroa$1$3$ph239 = $411;$bb_piece$sroa$2$3$ph238 = $413;
   while(1) {
    $bb_piece$sroa$0$3139 = $bb_piece$sroa$0$3$ph240;$bb_piece$sroa$1$3138 = $bb_piece$sroa$1$3$ph239;$bb_piece$sroa$2$3137 = $bb_piece$sroa$2$3$ph238;
    while(1) {
     $423 = (_first_one012($bb_piece$sroa$0$3139,$bb_piece$sroa$1$3138,$bb_piece$sroa$2$3137)|0);
     $424 = (34156304 + (($423*12)|0)|0);
     $425 = HEAP32[$424>>2]|0;
     $421 = $425 ^ $bb_piece$sroa$0$3139;
     $426 = ((34156304 + (($423*12)|0)|0) + 4|0);
     $427 = HEAP32[$426>>2]|0;
     $418 = $427 ^ $bb_piece$sroa$1$3138;
     $428 = ((34156304 + (($423*12)|0)|0) + 8|0);
     $429 = HEAP32[$428>>2]|0;
     $419 = $429 ^ $bb_piece$sroa$2$3137;
     $430 = (33577952 + (($423*12)|0)|0);
     $431 = HEAP32[$430>>2]|0;
     $432 = $431 & $153;
     $433 = ((33577952 + (($423*12)|0)|0) + 4|0);
     $434 = HEAP32[$433>>2]|0;
     $435 = $434 & $154;
     $436 = ((33577952 + (($423*12)|0)|0) + 8|0);
     $437 = HEAP32[$436>>2]|0;
     $438 = $437 & $155;
     $439 = $435 | $432;
     $440 = $439 | $438;
     $441 = ($440|0)==(0);
     if (!($441)) {
      $445 = ((220518304 + (($3*81)|0)|0) + ($423)|0);
      $446 = HEAP8[$445>>0]|0;
      $447 = ($446<<24>>24)==(0);
      if ($447) {
       break;
      }
      $448 = $446&255;
      $449 = (_is_pinned_on_white_king($ptree,$423,$448)|0);
      $450 = ($449|0)==(0);
      if ($450) {
       break;
      }
     }
     $442 = $418 | $419;
     $443 = $442 | $421;
     $444 = ($443|0)==(0);
     if ($444) {
      $$12$ph237 = $$12$ph241;
      break L72;
     } else {
      $bb_piece$sroa$0$3139 = $421;$bb_piece$sroa$1$3138 = $418;$bb_piece$sroa$2$3137 = $419;
     }
    }
    $451 = $423 << 7;
    $452 = ((($ptree) + ($423)|0) + 512|0);
    $$13 = $$12$ph241;$bb_desti$sroa$0$4 = $432;$bb_desti$sroa$1$4 = $435;$bb_desti$sroa$2$4 = $438;
    while(1) {
     $453 = (_first_one012($bb_desti$sroa$0$4,$bb_desti$sroa$1$4,$bb_desti$sroa$2$4)|0);
     $454 = (34156304 + (($453*12)|0)|0);
     $455 = HEAP32[$454>>2]|0;
     $456 = $455 ^ $bb_desti$sroa$0$4;
     $457 = ((34156304 + (($453*12)|0)|0) + 4|0);
     $458 = HEAP32[$457>>2]|0;
     $459 = $458 ^ $bb_desti$sroa$1$4;
     $460 = ((34156304 + (($453*12)|0)|0) + 8|0);
     $461 = HEAP32[$460>>2]|0;
     $462 = $461 ^ $bb_desti$sroa$2$4;
     $463 = $453 | $451;
     $464 = HEAP8[$452>>0]|0;
     $465 = $464 << 24 >> 24;
     $466 = (0 - ($465))|0;
     $467 = $466 << 15;
     $468 = $463 | $467;
     $469 = ((($ptree) + ($453)|0) + 512|0);
     $470 = HEAP8[$469>>0]|0;
     $471 = $470 << 24 >> 24;
     $472 = $471 << 19;
     $473 = $468 | $472;
     $474 = (($$13) + 4|0);
     HEAP32[$$13>>2] = $473;
     $475 = $459 | $456;
     $476 = $475 | $462;
     $477 = ($476|0)==(0);
     if ($477) {
      break;
     } else {
      $$13 = $474;$bb_desti$sroa$0$4 = $456;$bb_desti$sroa$1$4 = $459;$bb_desti$sroa$2$4 = $462;
     }
    }
    $417 = $418 | $419;
    $420 = $417 | $421;
    $422 = ($420|0)==(0);
    if ($422) {
     $$12$ph237 = $474;
     break;
    } else {
     $$12$ph241 = $474;$bb_piece$sroa$0$3$ph240 = $421;$bb_piece$sroa$1$3$ph239 = $418;$bb_piece$sroa$2$3$ph238 = $419;
    }
   }
  }
 } while(0);
 $478 = (($ptree) + 272|0);
 $479 = HEAP32[$478>>2]|0;
 $480 = (($ptree) + 276|0);
 $481 = HEAP32[$480>>2]|0;
 $482 = (($ptree) + 280|0);
 $483 = HEAP32[$482>>2]|0;
 $484 = $481 | $483;
 $485 = $484 | $479;
 $486 = ($485|0)==(0);
 L86: do {
  if ($486) {
   $$14$ph229 = $$12$ph237;
  } else {
   $$14$ph233 = $$12$ph237;$bb_piece$sroa$0$4$ph232 = $479;$bb_piece$sroa$1$4$ph231 = $481;$bb_piece$sroa$2$4$ph230 = $483;
   while(1) {
    $bb_piece$sroa$0$4122 = $bb_piece$sroa$0$4$ph232;$bb_piece$sroa$1$4121 = $bb_piece$sroa$1$4$ph231;$bb_piece$sroa$2$4120 = $bb_piece$sroa$2$4$ph230;
    while(1) {
     $493 = (_first_one012($bb_piece$sroa$0$4122,$bb_piece$sroa$1$4121,$bb_piece$sroa$2$4120)|0);
     $494 = (34156304 + (($493*12)|0)|0);
     $495 = HEAP32[$494>>2]|0;
     $491 = $495 ^ $bb_piece$sroa$0$4122;
     $496 = ((34156304 + (($493*12)|0)|0) + 4|0);
     $497 = HEAP32[$496>>2]|0;
     $488 = $497 ^ $bb_piece$sroa$1$4121;
     $498 = ((34156304 + (($493*12)|0)|0) + 8|0);
     $499 = HEAP32[$498>>2]|0;
     $489 = $499 ^ $bb_piece$sroa$2$4120;
     $500 = ((33572424 + ($493<<3)|0) + 6|0);
     $501 = HEAP8[$500>>0]|0;
     $502 = $501&255;
     $503 = ((($ptree) + ($502<<2)|0) + 56|0);
     $504 = HEAP32[$503>>2]|0;
     $505 = ((33572424 + ($493<<3)|0) + 7|0);
     $506 = HEAP8[$505>>0]|0;
     $507 = $506&255;
     $508 = $504 >>> $507;
     $509 = $508 & 127;
     $510 = ((33704320 + (($493*1536)|0)|0) + (($509*12)|0)|0);
     $511 = HEAP32[$510>>2]|0;
     $512 = ((33572424 + ($493<<3)|0) + 4|0);
     $513 = HEAP8[$512>>0]|0;
     $514 = $513&255;
     $515 = ((($ptree) + ($514<<2)|0) + 44|0);
     $516 = HEAP32[$515>>2]|0;
     $517 = ((33572424 + ($493<<3)|0) + 5|0);
     $518 = HEAP8[$517>>0]|0;
     $519 = $518&255;
     $520 = $516 >>> $519;
     $521 = $520 & 127;
     $522 = ((33579904 + (($493*1536)|0)|0) + (($521*12)|0)|0);
     $523 = HEAP32[$522>>2]|0;
     $524 = $523 | $511;
     $525 = (((33704320 + (($493*1536)|0)|0) + (($509*12)|0)|0) + 4|0);
     $526 = HEAP32[$525>>2]|0;
     $527 = (((33579904 + (($493*1536)|0)|0) + (($521*12)|0)|0) + 4|0);
     $528 = HEAP32[$527>>2]|0;
     $529 = $528 | $526;
     $530 = (((33704320 + (($493*1536)|0)|0) + (($509*12)|0)|0) + 8|0);
     $531 = HEAP32[$530>>2]|0;
     $532 = (((33579904 + (($493*1536)|0)|0) + (($521*12)|0)|0) + 8|0);
     $533 = HEAP32[$532>>2]|0;
     $534 = $533 | $531;
     $535 = $524 & $153;
     $536 = $529 & $154;
     $537 = $534 & $155;
     $538 = $536 | $535;
     $539 = $538 | $537;
     $540 = ($539|0)==(0);
     if (!($540)) {
      $544 = ((220518304 + (($3*81)|0)|0) + ($493)|0);
      $545 = HEAP8[$544>>0]|0;
      $546 = ($545<<24>>24)==(0);
      if ($546) {
       break;
      }
      $547 = $545&255;
      $548 = (_is_pinned_on_white_king($ptree,$493,$547)|0);
      $549 = ($548|0)==(0);
      if ($549) {
       break;
      }
     }
     $541 = $488 | $489;
     $542 = $541 | $491;
     $543 = ($542|0)==(0);
     if ($543) {
      $$14$ph229 = $$14$ph233;
      break L86;
     } else {
      $bb_piece$sroa$0$4122 = $491;$bb_piece$sroa$1$4121 = $488;$bb_piece$sroa$2$4120 = $489;
     }
    }
    $550 = $493 << 7;
    $551 = ($493|0)>(53);
    $$15 = $$14$ph233;$bb_desti$sroa$0$5 = $535;$bb_desti$sroa$1$5 = $536;$bb_desti$sroa$2$5 = $537;
    while(1) {
     $552 = (_first_one012($bb_desti$sroa$0$5,$bb_desti$sroa$1$5,$bb_desti$sroa$2$5)|0);
     $553 = (34156304 + (($552*12)|0)|0);
     $554 = HEAP32[$553>>2]|0;
     $555 = $554 ^ $bb_desti$sroa$0$5;
     $556 = ((34156304 + (($552*12)|0)|0) + 4|0);
     $557 = HEAP32[$556>>2]|0;
     $558 = $557 ^ $bb_desti$sroa$1$5;
     $559 = ((34156304 + (($552*12)|0)|0) + 8|0);
     $560 = HEAP32[$559>>2]|0;
     $561 = $560 ^ $bb_desti$sroa$2$5;
     $562 = $552 | $550;
     $563 = ((($ptree) + ($552)|0) + 512|0);
     $564 = HEAP8[$563>>0]|0;
     $565 = $564 << 24 >> 24;
     $566 = $565 << 19;
     $567 = $562 | $566;
     if ($551) {
      label = 65;
     } else {
      $568 = $567 | 196608;
      $569 = ($552|0)>(53);
      if ($569) {
       label = 65;
      } else {
       $utemp$1 = $568;
      }
     }
     if ((label|0) == 65) {
      label = 0;
      $570 = $567 | 212992;
      $utemp$1 = $570;
     }
     $571 = (($$15) + 4|0);
     HEAP32[$$15>>2] = $utemp$1;
     $572 = $558 | $555;
     $573 = $572 | $561;
     $574 = ($573|0)==(0);
     if ($574) {
      break;
     } else {
      $$15 = $571;$bb_desti$sroa$0$5 = $555;$bb_desti$sroa$1$5 = $558;$bb_desti$sroa$2$5 = $561;
     }
    }
    $487 = $488 | $489;
    $490 = $487 | $491;
    $492 = ($490|0)==(0);
    if ($492) {
     $$14$ph229 = $571;
     break;
    } else {
     $$14$ph233 = $571;$bb_piece$sroa$0$4$ph232 = $491;$bb_piece$sroa$1$4$ph231 = $488;$bb_piece$sroa$2$4$ph230 = $489;
    }
   }
  }
 } while(0);
 $575 = (($ptree) + 296|0);
 $576 = HEAP32[$575>>2]|0;
 $577 = (($ptree) + 300|0);
 $578 = HEAP32[$577>>2]|0;
 $579 = (($ptree) + 304|0);
 $580 = HEAP32[$579>>2]|0;
 $581 = $578 | $580;
 $582 = $581 | $576;
 $583 = ($582|0)==(0);
 L105: do {
  if ($583) {
   $$16$ph221 = $$14$ph229;
  } else {
   $$16$ph225 = $$14$ph229;$bb_piece$sroa$0$5$ph224 = $576;$bb_piece$sroa$1$5$ph223 = $578;$bb_piece$sroa$2$5$ph222 = $580;
   while(1) {
    $bb_piece$sroa$0$5105 = $bb_piece$sroa$0$5$ph224;$bb_piece$sroa$1$5104 = $bb_piece$sroa$1$5$ph223;$bb_piece$sroa$2$5103 = $bb_piece$sroa$2$5$ph222;
    while(1) {
     $590 = (_first_one012($bb_piece$sroa$0$5105,$bb_piece$sroa$1$5104,$bb_piece$sroa$2$5103)|0);
     $591 = (34156304 + (($590*12)|0)|0);
     $592 = HEAP32[$591>>2]|0;
     $588 = $592 ^ $bb_piece$sroa$0$5105;
     $593 = ((34156304 + (($590*12)|0)|0) + 4|0);
     $594 = HEAP32[$593>>2]|0;
     $585 = $594 ^ $bb_piece$sroa$1$5104;
     $595 = ((34156304 + (($590*12)|0)|0) + 8|0);
     $596 = HEAP32[$595>>2]|0;
     $586 = $596 ^ $bb_piece$sroa$2$5103;
     $597 = ((33572424 + ($590<<3)|0) + 2|0);
     $598 = HEAP8[$597>>0]|0;
     $599 = $598&255;
     $600 = ((($ptree) + ($599<<2)|0) + 32|0);
     $601 = HEAP32[$600>>2]|0;
     $602 = ((33572424 + ($590<<3)|0) + 3|0);
     $603 = HEAP8[$602>>0]|0;
     $604 = $603&255;
     $605 = $601 >>> $604;
     $606 = $605 & 127;
     $607 = ((33953152 + (($590*1536)|0)|0) + (($606*12)|0)|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = (33572424 + ($590<<3)|0);
     $610 = HEAP8[$609>>0]|0;
     $611 = $610&255;
     $612 = ((($ptree) + ($611<<2)|0) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ((($ptree) + ($611<<2)|0) + 20|0);
     $615 = HEAP32[$614>>2]|0;
     $616 = $615 | $613;
     $617 = ((33572424 + ($590<<3)|0) + 1|0);
     $618 = HEAP8[$617>>0]|0;
     $619 = $618&255;
     $620 = $616 >>> $619;
     $621 = $620 & 127;
     $622 = ((33828736 + (($590*1536)|0)|0) + (($621*12)|0)|0);
     $623 = HEAP32[$622>>2]|0;
     $624 = $623 | $608;
     $625 = (((33953152 + (($590*1536)|0)|0) + (($606*12)|0)|0) + 4|0);
     $626 = HEAP32[$625>>2]|0;
     $627 = (((33828736 + (($590*1536)|0)|0) + (($621*12)|0)|0) + 4|0);
     $628 = HEAP32[$627>>2]|0;
     $629 = $628 | $626;
     $630 = (((33953152 + (($590*1536)|0)|0) + (($606*12)|0)|0) + 8|0);
     $631 = HEAP32[$630>>2]|0;
     $632 = (((33828736 + (($590*1536)|0)|0) + (($621*12)|0)|0) + 8|0);
     $633 = HEAP32[$632>>2]|0;
     $634 = $633 | $631;
     $635 = $624 & $153;
     $636 = $629 & $154;
     $637 = $634 & $155;
     $638 = $636 | $635;
     $639 = $638 | $637;
     $640 = ($639|0)==(0);
     if (!($640)) {
      $644 = ((220518304 + (($3*81)|0)|0) + ($590)|0);
      $645 = HEAP8[$644>>0]|0;
      $646 = ($645<<24>>24)==(0);
      if ($646) {
       break;
      }
      $647 = $645&255;
      $648 = (_is_pinned_on_white_king($ptree,$590,$647)|0);
      $649 = ($648|0)==(0);
      if ($649) {
       break;
      }
     }
     $641 = $585 | $586;
     $642 = $641 | $588;
     $643 = ($642|0)==(0);
     if ($643) {
      $$16$ph221 = $$16$ph225;
      break L105;
     } else {
      $bb_piece$sroa$0$5105 = $588;$bb_piece$sroa$1$5104 = $585;$bb_piece$sroa$2$5103 = $586;
     }
    }
    $650 = $590 << 7;
    $651 = ($590|0)>(53);
    $$17 = $$16$ph225;$bb_desti$sroa$0$6 = $635;$bb_desti$sroa$1$6 = $636;$bb_desti$sroa$2$6 = $637;
    while(1) {
     $652 = (_first_one012($bb_desti$sroa$0$6,$bb_desti$sroa$1$6,$bb_desti$sroa$2$6)|0);
     $653 = (34156304 + (($652*12)|0)|0);
     $654 = HEAP32[$653>>2]|0;
     $655 = $654 ^ $bb_desti$sroa$0$6;
     $656 = ((34156304 + (($652*12)|0)|0) + 4|0);
     $657 = HEAP32[$656>>2]|0;
     $658 = $657 ^ $bb_desti$sroa$1$6;
     $659 = ((34156304 + (($652*12)|0)|0) + 8|0);
     $660 = HEAP32[$659>>2]|0;
     $661 = $660 ^ $bb_desti$sroa$2$6;
     $662 = $652 | $650;
     $663 = ((($ptree) + ($652)|0) + 512|0);
     $664 = HEAP8[$663>>0]|0;
     $665 = $664 << 24 >> 24;
     $666 = $665 << 19;
     $667 = $662 | $666;
     if ($651) {
      label = 77;
     } else {
      $668 = $667 | 229376;
      $669 = ($652|0)>(53);
      if ($669) {
       label = 77;
      } else {
       $utemp$2 = $668;
      }
     }
     if ((label|0) == 77) {
      label = 0;
      $670 = $667 | 245760;
      $utemp$2 = $670;
     }
     $671 = (($$17) + 4|0);
     HEAP32[$$17>>2] = $utemp$2;
     $672 = $658 | $655;
     $673 = $672 | $661;
     $674 = ($673|0)==(0);
     if ($674) {
      break;
     } else {
      $$17 = $671;$bb_desti$sroa$0$6 = $655;$bb_desti$sroa$1$6 = $658;$bb_desti$sroa$2$6 = $661;
     }
    }
    $584 = $585 | $586;
    $587 = $584 | $588;
    $589 = ($587|0)==(0);
    if ($589) {
     $$16$ph221 = $671;
     break;
    } else {
     $$16$ph225 = $671;$bb_piece$sroa$0$5$ph224 = $588;$bb_piece$sroa$1$5$ph223 = $585;$bb_piece$sroa$2$5$ph222 = $586;
    }
   }
  }
 } while(0);
 $675 = (($ptree) + 320|0);
 $676 = HEAP32[$675>>2]|0;
 $677 = (($ptree) + 324|0);
 $678 = HEAP32[$677>>2]|0;
 $679 = (($ptree) + 328|0);
 $680 = HEAP32[$679>>2]|0;
 $681 = $678 | $680;
 $682 = $681 | $676;
 $683 = ($682|0)==(0);
 L124: do {
  if ($683) {
   $$18$ph213 = $$16$ph221;
  } else {
   $$18$ph217 = $$16$ph221;$bb_piece$sroa$0$6$ph216 = $676;$bb_piece$sroa$1$6$ph215 = $678;$bb_piece$sroa$2$6$ph214 = $680;
   while(1) {
    $bb_piece$sroa$0$688 = $bb_piece$sroa$0$6$ph216;$bb_piece$sroa$1$687 = $bb_piece$sroa$1$6$ph215;$bb_piece$sroa$2$686 = $bb_piece$sroa$2$6$ph214;
    while(1) {
     $690 = (_first_one012($bb_piece$sroa$0$688,$bb_piece$sroa$1$687,$bb_piece$sroa$2$686)|0);
     $691 = (34156304 + (($690*12)|0)|0);
     $692 = HEAP32[$691>>2]|0;
     $688 = $692 ^ $bb_piece$sroa$0$688;
     $693 = ((34156304 + (($690*12)|0)|0) + 4|0);
     $694 = HEAP32[$693>>2]|0;
     $685 = $694 ^ $bb_piece$sroa$1$687;
     $695 = ((34156304 + (($690*12)|0)|0) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $686 = $696 ^ $bb_piece$sroa$2$686;
     $697 = ((33572424 + ($690<<3)|0) + 6|0);
     $698 = HEAP8[$697>>0]|0;
     $699 = $698&255;
     $700 = ((($ptree) + ($699<<2)|0) + 56|0);
     $701 = HEAP32[$700>>2]|0;
     $702 = ((33572424 + ($690<<3)|0) + 7|0);
     $703 = HEAP8[$702>>0]|0;
     $704 = $703&255;
     $705 = $701 >>> $704;
     $706 = $705 & 127;
     $707 = ((33704320 + (($690*1536)|0)|0) + (($706*12)|0)|0);
     $708 = HEAP32[$707>>2]|0;
     $709 = ((33572424 + ($690<<3)|0) + 4|0);
     $710 = HEAP8[$709>>0]|0;
     $711 = $710&255;
     $712 = ((($ptree) + ($711<<2)|0) + 44|0);
     $713 = HEAP32[$712>>2]|0;
     $714 = ((33572424 + ($690<<3)|0) + 5|0);
     $715 = HEAP8[$714>>0]|0;
     $716 = $715&255;
     $717 = $713 >>> $716;
     $718 = $717 & 127;
     $719 = ((33579904 + (($690*1536)|0)|0) + (($718*12)|0)|0);
     $720 = HEAP32[$719>>2]|0;
     $721 = $720 | $708;
     $722 = (((33704320 + (($690*1536)|0)|0) + (($706*12)|0)|0) + 4|0);
     $723 = HEAP32[$722>>2]|0;
     $724 = (((33579904 + (($690*1536)|0)|0) + (($718*12)|0)|0) + 4|0);
     $725 = HEAP32[$724>>2]|0;
     $726 = $725 | $723;
     $727 = (((33704320 + (($690*1536)|0)|0) + (($706*12)|0)|0) + 8|0);
     $728 = HEAP32[$727>>2]|0;
     $729 = (((33579904 + (($690*1536)|0)|0) + (($718*12)|0)|0) + 8|0);
     $730 = HEAP32[$729>>2]|0;
     $731 = $730 | $728;
     $732 = (33578928 + (($690*12)|0)|0);
     $733 = HEAP32[$732>>2]|0;
     $734 = $721 | $733;
     $735 = ((33578928 + (($690*12)|0)|0) + 4|0);
     $736 = HEAP32[$735>>2]|0;
     $737 = $726 | $736;
     $738 = ((33578928 + (($690*12)|0)|0) + 8|0);
     $739 = HEAP32[$738>>2]|0;
     $740 = $731 | $739;
     $741 = $734 & $153;
     $742 = $737 & $154;
     $743 = $740 & $155;
     $744 = $742 | $741;
     $745 = $744 | $743;
     $746 = ($745|0)==(0);
     if (!($746)) {
      $750 = ((220518304 + (($3*81)|0)|0) + ($690)|0);
      $751 = HEAP8[$750>>0]|0;
      $752 = ($751<<24>>24)==(0);
      if ($752) {
       break;
      }
      $753 = $751&255;
      $754 = (_is_pinned_on_white_king($ptree,$690,$753)|0);
      $755 = ($754|0)==(0);
      if ($755) {
       break;
      }
     }
     $747 = $685 | $686;
     $748 = $747 | $688;
     $749 = ($748|0)==(0);
     if ($749) {
      $$18$ph213 = $$18$ph217;
      break L124;
     } else {
      $bb_piece$sroa$0$688 = $688;$bb_piece$sroa$1$687 = $685;$bb_piece$sroa$2$686 = $686;
     }
    }
    $756 = $690 << 7;
    $$19 = $$18$ph217;$bb_desti$sroa$0$7 = $741;$bb_desti$sroa$1$7 = $742;$bb_desti$sroa$2$7 = $743;
    while(1) {
     $757 = (_first_one012($bb_desti$sroa$0$7,$bb_desti$sroa$1$7,$bb_desti$sroa$2$7)|0);
     $758 = (34156304 + (($757*12)|0)|0);
     $759 = HEAP32[$758>>2]|0;
     $760 = $759 ^ $bb_desti$sroa$0$7;
     $761 = ((34156304 + (($757*12)|0)|0) + 4|0);
     $762 = HEAP32[$761>>2]|0;
     $763 = $762 ^ $bb_desti$sroa$1$7;
     $764 = ((34156304 + (($757*12)|0)|0) + 8|0);
     $765 = HEAP32[$764>>2]|0;
     $766 = $765 ^ $bb_desti$sroa$2$7;
     $767 = ((($ptree) + ($757)|0) + 512|0);
     $768 = HEAP8[$767>>0]|0;
     $769 = $768 << 24 >> 24;
     $770 = $769 << 19;
     $771 = $756 | $757;
     $772 = $771 | $770;
     $773 = $772 | 458752;
     $774 = (($$19) + 4|0);
     HEAP32[$$19>>2] = $773;
     $775 = $763 | $760;
     $776 = $775 | $766;
     $777 = ($776|0)==(0);
     if ($777) {
      break;
     } else {
      $$19 = $774;$bb_desti$sroa$0$7 = $760;$bb_desti$sroa$1$7 = $763;$bb_desti$sroa$2$7 = $766;
     }
    }
    $684 = $685 | $686;
    $687 = $684 | $688;
    $689 = ($687|0)==(0);
    if ($689) {
     $$18$ph213 = $774;
     break;
    } else {
     $$18$ph217 = $774;$bb_piece$sroa$0$6$ph216 = $688;$bb_piece$sroa$1$6$ph215 = $685;$bb_piece$sroa$2$6$ph214 = $686;
    }
   }
  }
 } while(0);
 $778 = (($ptree) + 344|0);
 $779 = HEAP32[$778>>2]|0;
 $780 = (($ptree) + 348|0);
 $781 = HEAP32[$780>>2]|0;
 $782 = (($ptree) + 352|0);
 $783 = HEAP32[$782>>2]|0;
 $784 = $781 | $783;
 $785 = $784 | $779;
 $786 = ($785|0)==(0);
 L138: do {
  if ($786) {
   $$20$ph205 = $$18$ph213;
  } else {
   $$20$ph209 = $$18$ph213;$bb_piece$sroa$0$7$ph208 = $779;$bb_piece$sroa$1$7$ph207 = $781;$bb_piece$sroa$2$7$ph206 = $783;
   while(1) {
    $bb_piece$sroa$0$771 = $bb_piece$sroa$0$7$ph208;$bb_piece$sroa$1$770 = $bb_piece$sroa$1$7$ph207;$bb_piece$sroa$2$769 = $bb_piece$sroa$2$7$ph206;
    while(1) {
     $793 = (_first_one012($bb_piece$sroa$0$771,$bb_piece$sroa$1$770,$bb_piece$sroa$2$769)|0);
     $794 = (34156304 + (($793*12)|0)|0);
     $795 = HEAP32[$794>>2]|0;
     $791 = $795 ^ $bb_piece$sroa$0$771;
     $796 = ((34156304 + (($793*12)|0)|0) + 4|0);
     $797 = HEAP32[$796>>2]|0;
     $788 = $797 ^ $bb_piece$sroa$1$770;
     $798 = ((34156304 + (($793*12)|0)|0) + 8|0);
     $799 = HEAP32[$798>>2]|0;
     $789 = $799 ^ $bb_piece$sroa$2$769;
     $800 = ((33572424 + ($793<<3)|0) + 2|0);
     $801 = HEAP8[$800>>0]|0;
     $802 = $801&255;
     $803 = ((($ptree) + ($802<<2)|0) + 32|0);
     $804 = HEAP32[$803>>2]|0;
     $805 = ((33572424 + ($793<<3)|0) + 3|0);
     $806 = HEAP8[$805>>0]|0;
     $807 = $806&255;
     $808 = $804 >>> $807;
     $809 = $808 & 127;
     $810 = ((33953152 + (($793*1536)|0)|0) + (($809*12)|0)|0);
     $811 = HEAP32[$810>>2]|0;
     $812 = (33572424 + ($793<<3)|0);
     $813 = HEAP8[$812>>0]|0;
     $814 = $813&255;
     $815 = ((($ptree) + ($814<<2)|0) + 8|0);
     $816 = HEAP32[$815>>2]|0;
     $817 = ((($ptree) + ($814<<2)|0) + 20|0);
     $818 = HEAP32[$817>>2]|0;
     $819 = $818 | $816;
     $820 = ((33572424 + ($793<<3)|0) + 1|0);
     $821 = HEAP8[$820>>0]|0;
     $822 = $821&255;
     $823 = $819 >>> $822;
     $824 = $823 & 127;
     $825 = ((33828736 + (($793*1536)|0)|0) + (($824*12)|0)|0);
     $826 = HEAP32[$825>>2]|0;
     $827 = $826 | $811;
     $828 = (((33953152 + (($793*1536)|0)|0) + (($809*12)|0)|0) + 4|0);
     $829 = HEAP32[$828>>2]|0;
     $830 = (((33828736 + (($793*1536)|0)|0) + (($824*12)|0)|0) + 4|0);
     $831 = HEAP32[$830>>2]|0;
     $832 = $831 | $829;
     $833 = (((33953152 + (($793*1536)|0)|0) + (($809*12)|0)|0) + 8|0);
     $834 = HEAP32[$833>>2]|0;
     $835 = (((33828736 + (($793*1536)|0)|0) + (($824*12)|0)|0) + 8|0);
     $836 = HEAP32[$835>>2]|0;
     $837 = $836 | $834;
     $838 = (33578928 + (($793*12)|0)|0);
     $839 = HEAP32[$838>>2]|0;
     $840 = $827 | $839;
     $841 = ((33578928 + (($793*12)|0)|0) + 4|0);
     $842 = HEAP32[$841>>2]|0;
     $843 = $832 | $842;
     $844 = ((33578928 + (($793*12)|0)|0) + 8|0);
     $845 = HEAP32[$844>>2]|0;
     $846 = $837 | $845;
     $847 = $840 & $153;
     $848 = $843 & $154;
     $849 = $846 & $155;
     $850 = $848 | $847;
     $851 = $850 | $849;
     $852 = ($851|0)==(0);
     if (!($852)) {
      $856 = ((220518304 + (($3*81)|0)|0) + ($793)|0);
      $857 = HEAP8[$856>>0]|0;
      $858 = ($857<<24>>24)==(0);
      if ($858) {
       break;
      }
      $859 = $857&255;
      $860 = (_is_pinned_on_white_king($ptree,$793,$859)|0);
      $861 = ($860|0)==(0);
      if ($861) {
       break;
      }
     }
     $853 = $788 | $789;
     $854 = $853 | $791;
     $855 = ($854|0)==(0);
     if ($855) {
      $$20$ph205 = $$20$ph209;
      break L138;
     } else {
      $bb_piece$sroa$0$771 = $791;$bb_piece$sroa$1$770 = $788;$bb_piece$sroa$2$769 = $789;
     }
    }
    $862 = $793 << 7;
    $$21 = $$20$ph209;$bb_desti$sroa$0$8 = $847;$bb_desti$sroa$1$8 = $848;$bb_desti$sroa$2$8 = $849;
    while(1) {
     $863 = (_first_one012($bb_desti$sroa$0$8,$bb_desti$sroa$1$8,$bb_desti$sroa$2$8)|0);
     $864 = (34156304 + (($863*12)|0)|0);
     $865 = HEAP32[$864>>2]|0;
     $866 = $865 ^ $bb_desti$sroa$0$8;
     $867 = ((34156304 + (($863*12)|0)|0) + 4|0);
     $868 = HEAP32[$867>>2]|0;
     $869 = $868 ^ $bb_desti$sroa$1$8;
     $870 = ((34156304 + (($863*12)|0)|0) + 8|0);
     $871 = HEAP32[$870>>2]|0;
     $872 = $871 ^ $bb_desti$sroa$2$8;
     $873 = ((($ptree) + ($863)|0) + 512|0);
     $874 = HEAP8[$873>>0]|0;
     $875 = $874 << 24 >> 24;
     $876 = $875 << 19;
     $877 = $862 | $863;
     $878 = $877 | $876;
     $879 = $878 | 491520;
     $880 = (($$21) + 4|0);
     HEAP32[$$21>>2] = $879;
     $881 = $869 | $866;
     $882 = $881 | $872;
     $883 = ($882|0)==(0);
     if ($883) {
      break;
     } else {
      $$21 = $880;$bb_desti$sroa$0$8 = $866;$bb_desti$sroa$1$8 = $869;$bb_desti$sroa$2$8 = $872;
     }
    }
    $787 = $788 | $789;
    $790 = $787 | $791;
    $792 = ($790|0)==(0);
    if ($792) {
     $$20$ph205 = $880;
     break;
    } else {
     $$20$ph209 = $880;$bb_piece$sroa$0$7$ph208 = $791;$bb_piece$sroa$1$7$ph207 = $788;$bb_piece$sroa$2$7$ph206 = $789;
    }
   }
  }
 } while(0);
 $884 = (($ptree) + 504|0);
 $885 = HEAP32[$884>>2]|0;
 $886 = ($885|0)==(0);
 if ($886) {
  $$0 = $$20$ph205;
  STACKTOP = sp;return ($$0|0);
 }
 $887 = $150 | $148;
 $888 = $887 | $152;
 $889 = ($888|0)==(0);
 if ($889) {
  $$0 = $$20$ph205;
  STACKTOP = sp;return ($$0|0);
 }
 $890 = $152 & 511;
 $891 = $152 & 261632;
 $892 = $148 & 134217727;
 $893 = $150 & 134217727;
 $894 = $152 & 133955584;
 $895 = $885 & 1792;
 $896 = ($895|0)==(0);
 if ($896) {
  $nhand$0 = 0;
 } else {
  HEAP32[$ahand>>2] = 10624;
  $nhand$0 = 1;
 }
 $897 = $885 & 224;
 $898 = ($897|0)==(0);
 if ($898) {
  $nhand$1 = $nhand$0;
 } else {
  $899 = (($nhand$0) + 1)|0;
  $900 = (($ahand) + ($nhand$0<<2)|0);
  HEAP32[$900>>2] = 10496;
  $nhand$1 = $899;
 }
 $901 = $885 & 14336;
 $902 = ($901|0)==(0);
 if ($902) {
  $nhand$2 = $nhand$1;
 } else {
  $903 = (($nhand$1) + 1)|0;
  $904 = (($ahand) + ($nhand$1<<2)|0);
  HEAP32[$904>>2] = 10752;
  $nhand$2 = $903;
 }
 $905 = $885 & 114688;
 $906 = ($905|0)==(0);
 if ($906) {
  $nhand$3 = $nhand$2;
 } else {
  $907 = (($nhand$2) + 1)|0;
  $908 = (($ahand) + ($nhand$2<<2)|0);
  HEAP32[$908>>2] = 10880;
  $nhand$3 = $907;
 }
 $909 = $885 & 393216;
 $910 = ($909|0)==(0);
 if ($910) {
  $nhand$4 = $nhand$3;
 } else {
  $911 = (($nhand$3) + 1)|0;
  $912 = (($ahand) + ($nhand$3<<2)|0);
  HEAP32[$912>>2] = 11008;
  $nhand$4 = $911;
 }
 $913 = $885 & 1572864;
 $914 = ($913|0)==(0);
 if ($914) {
  $nhand$5 = $nhand$4;
 } else {
  $915 = (($nhand$4) + 1)|0;
  $916 = (($ahand) + ($nhand$4<<2)|0);
  HEAP32[$916>>2] = 11136;
  $nhand$5 = $915;
 }
 $917 = $885 & 31;
 $918 = ($917|0)==(0);
 L176: do {
  if ($918) {
   $919 = $893 | $892;
   $920 = $919 | $894;
   $921 = ($920|0)==(0);
   if ($921) {
    $$28$lcssa = $$20$ph205;
   } else {
    $922 = ($nhand$5|0)>(0);
    $$2832 = $$20$ph205;$bb_target$sroa$0$129 = $892;$bb_target$sroa$1$130 = $893;$bb_target$sroa$2$131 = $894;
    while(1) {
     $1034 = (_first_one012($bb_target$sroa$0$129,$bb_target$sroa$1$130,$bb_target$sroa$2$131)|0);
     if ($922) {
      $$2923 = $$2832;$i$222 = 0;
      while(1) {
       $1035 = (($ahand) + ($i$222<<2)|0);
       $1036 = HEAP32[$1035>>2]|0;
       $1037 = $1036 | $1034;
       HEAP32[$$2923>>2] = $1037;
       $1038 = (($i$222) + 1)|0;
       $exitcond = ($1038|0)==($nhand$5|0);
       if ($exitcond) {
        break;
       }
       $1039 = (($$2923) + 4|0);
       $$2923 = $1039;$i$222 = $1038;
      }
      $scevgep = (($$2832) + ($nhand$5<<2)|0);
      $$29$lcssa = $scevgep;
     } else {
      $$29$lcssa = $$2832;
     }
     $1040 = (34156304 + (($1034*12)|0)|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 ^ $bb_target$sroa$0$129;
     $1043 = ((34156304 + (($1034*12)|0)|0) + 4|0);
     $1044 = HEAP32[$1043>>2]|0;
     $1045 = $1044 ^ $bb_target$sroa$1$130;
     $1046 = ((34156304 + (($1034*12)|0)|0) + 8|0);
     $1047 = HEAP32[$1046>>2]|0;
     $1048 = $1047 ^ $bb_target$sroa$2$131;
     $1049 = $1045 | $1042;
     $1050 = $1049 | $1048;
     $1051 = ($1050|0)==(0);
     if ($1051) {
      $$28$lcssa = $$29$lcssa;
      break;
     } else {
      $$2832 = $$29$lcssa;$bb_target$sroa$0$129 = $1042;$bb_target$sroa$1$130 = $1045;$bb_target$sroa$2$131 = $1048;
     }
    }
   }
   $1021 = ($891|0)==(0);
   if ($1021) {
    $$32$ph = $$28$lcssa;
    break;
   }
   $1022 = ($nhand$0|0)<($nhand$5|0);
   if (!($1022)) {
    $ubb_target2b$118 = $891;
    while(1) {
     $1052 = (_first_one2($ubb_target2b$118)|0);
     $1053 = ((34156304 + (($1052*12)|0)|0) + 8|0);
     $1054 = HEAP32[$1053>>2]|0;
     $1055 = $1054 ^ $ubb_target2b$118;
     $1056 = ($1054|0)==($ubb_target2b$118|0);
     if ($1056) {
      $$32$ph = $$28$lcssa;
      break L176;
     } else {
      $ubb_target2b$118 = $1055;
     }
    }
   }
   $1023 = (($nhand$5) - ($nhand$0))|0;
   $$3019$us = $$28$lcssa;$ubb_target2b$118$us = $891;
   while(1) {
    $1025 = (_first_one2($ubb_target2b$118$us)|0);
    $$3112$us = $$3019$us;$i$311$us = $nhand$0;
    while(1) {
     $1029 = (($ahand) + ($i$311$us<<2)|0);
     $1030 = HEAP32[$1029>>2]|0;
     $1031 = $1030 | $1025;
     HEAP32[$$3112$us>>2] = $1031;
     $1032 = (($i$311$us) + 1)|0;
     $exitcond406 = ($1032|0)==($nhand$5|0);
     if ($exitcond406) {
      break;
     }
     $1033 = (($$3112$us) + 4|0);
     $$3112$us = $1033;$i$311$us = $1032;
    }
    $scevgep405 = (($$3019$us) + ($1023<<2)|0);
    $1024 = ((34156304 + (($1025*12)|0)|0) + 8|0);
    $1026 = HEAP32[$1024>>2]|0;
    $1027 = $1026 ^ $ubb_target2b$118$us;
    $1028 = ($1026|0)==($ubb_target2b$118$us|0);
    if ($1028) {
     $$32$ph = $scevgep405;
     break;
    } else {
     $$3019$us = $scevgep405;$ubb_target2b$118$us = $1027;
    }
   }
  } else {
   $923 = HEAP32[$156>>2]|0;
   $924 = HEAP32[$159>>2]|0;
   $925 = $924 | $923;
   $926 = HEAP32[$162>>2]|0;
   $927 = $925 | $926;
   $928 = $927 & 67240192;
   HEAP32[$ais_pawn>>2] = $928;
   $929 = $927 & 33620096;
   $930 = (($ais_pawn) + 4|0);
   HEAP32[$930>>2] = $929;
   $931 = $927 & 16810048;
   $932 = (($ais_pawn) + 8|0);
   HEAP32[$932>>2] = $931;
   $933 = $927 & 8405024;
   $934 = (($ais_pawn) + 12|0);
   HEAP32[$934>>2] = $933;
   $935 = $927 & 4202512;
   $936 = (($ais_pawn) + 16|0);
   HEAP32[$936>>2] = $935;
   $937 = $927 & 2101256;
   $938 = (($ais_pawn) + 20|0);
   HEAP32[$938>>2] = $937;
   $939 = $927 & 1050628;
   $940 = (($ais_pawn) + 24|0);
   HEAP32[$940>>2] = $939;
   $941 = $927 & 525314;
   $942 = (($ais_pawn) + 28|0);
   HEAP32[$942>>2] = $941;
   $943 = $927 & 262657;
   $944 = (($ais_pawn) + 32|0);
   HEAP32[$944>>2] = $943;
   $945 = $893 | $892;
   $946 = $945 | $894;
   $947 = ($946|0)==(0);
   if ($947) {
    $$22$lcssa = $$20$ph205;
   } else {
    $948 = ($nhand$5|0)>(0);
    $$2256 = $$20$ph205;$bb_target$sroa$0$053 = $892;$bb_target$sroa$1$054 = $893;$bb_target$sroa$2$055 = $894;
    while(1) {
     $952 = (_first_one012($bb_target$sroa$0$053,$bb_target$sroa$1$054,$bb_target$sroa$2$055)|0);
     $953 = (1248 + ($952)|0);
     $954 = HEAP8[$953>>0]|0;
     $955 = $954&255;
     $956 = (($ais_pawn) + ($955<<2)|0);
     $957 = HEAP32[$956>>2]|0;
     $958 = ($957|0)==(0);
     do {
      if ($958) {
       $959 = (($952) + 9)|0;
       $960 = ((($ptree) + ($959)|0) + 512|0);
       $961 = HEAP8[$960>>0]|0;
       $962 = ($961<<24>>24)==(8);
       if ($962) {
        $963 = (_is_mate_w_pawn_drop($ptree,$952)|0);
        $964 = ($963|0)==(0);
        if (!($964)) {
         $$24$ph = $$2256;
         break;
        }
       }
       $965 = $952 | 10368;
       $966 = (($$2256) + 4|0);
       HEAP32[$$2256>>2] = $965;
       $$24$ph = $966;
      } else {
       $$24$ph = $$2256;
      }
     } while(0);
     if ($948) {
      $$2449 = $$24$ph;$i$048 = 0;
      while(1) {
       $967 = (($ahand) + ($i$048<<2)|0);
       $968 = HEAP32[$967>>2]|0;
       $969 = $968 | $952;
       HEAP32[$$2449>>2] = $969;
       $970 = (($i$048) + 1)|0;
       $exitcond270 = ($970|0)==($nhand$5|0);
       if ($exitcond270) {
        break;
       }
       $971 = (($$2449) + 4|0);
       $$2449 = $971;$i$048 = $970;
      }
      $scevgep269 = (($$24$ph) + ($nhand$5<<2)|0);
      $$24$lcssa = $scevgep269;
     } else {
      $$24$lcssa = $$24$ph;
     }
     $972 = (34156304 + (($952*12)|0)|0);
     $973 = HEAP32[$972>>2]|0;
     $974 = $973 ^ $bb_target$sroa$0$053;
     $975 = ((34156304 + (($952*12)|0)|0) + 4|0);
     $976 = HEAP32[$975>>2]|0;
     $977 = $976 ^ $bb_target$sroa$1$054;
     $978 = ((34156304 + (($952*12)|0)|0) + 8|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 ^ $bb_target$sroa$2$055;
     $981 = $977 | $974;
     $982 = $981 | $980;
     $983 = ($982|0)==(0);
     if ($983) {
      $$22$lcssa = $$24$lcssa;
      break;
     } else {
      $$2256 = $$24$lcssa;$bb_target$sroa$0$053 = $974;$bb_target$sroa$1$054 = $977;$bb_target$sroa$2$055 = $980;
     }
    }
   }
   $949 = ($891|0)==(0);
   if ($949) {
    $$32$ph = $$22$lcssa;
    break;
   }
   $950 = ($nhand$0|0)<($nhand$5|0);
   $951 = (($nhand$5) - ($nhand$0))|0;
   $$2544 = $$22$lcssa;$ubb_target2b$043 = $891;
   while(1) {
    $997 = (_first_one2($ubb_target2b$043)|0);
    $998 = (1248 + ($997)|0);
    $999 = HEAP8[$998>>0]|0;
    $1000 = $999&255;
    $1001 = (($ais_pawn) + ($1000<<2)|0);
    $1002 = HEAP32[$1001>>2]|0;
    $1003 = ($1002|0)==(0);
    do {
     if ($1003) {
      $1004 = (($997) + 9)|0;
      $1005 = ((($ptree) + ($1004)|0) + 512|0);
      $1006 = HEAP8[$1005>>0]|0;
      $1007 = ($1006<<24>>24)==(8);
      if ($1007) {
       $1008 = (_is_mate_w_pawn_drop($ptree,$997)|0);
       $1009 = ($1008|0)==(0);
       if (!($1009)) {
        $$27$ph = $$2544;
        break;
       }
      }
      $1010 = $997 | 10368;
      $1011 = (($$2544) + 4|0);
      HEAP32[$$2544>>2] = $1010;
      $$27$ph = $1011;
     } else {
      $$27$ph = $$2544;
     }
    } while(0);
    if ($950) {
     $$2737 = $$27$ph;$i$136 = $nhand$0;
     while(1) {
      $1012 = (($ahand) + ($i$136<<2)|0);
      $1013 = HEAP32[$1012>>2]|0;
      $1014 = $1013 | $997;
      HEAP32[$$2737>>2] = $1014;
      $1015 = (($i$136) + 1)|0;
      $exitcond268 = ($1015|0)==($nhand$5|0);
      if ($exitcond268) {
       break;
      }
      $1016 = (($$2737) + 4|0);
      $$2737 = $1016;$i$136 = $1015;
     }
     $scevgep267 = (($$27$ph) + ($951<<2)|0);
     $$27$lcssa = $scevgep267;
    } else {
     $$27$lcssa = $$27$ph;
    }
    $1017 = ((34156304 + (($997*12)|0)|0) + 8|0);
    $1018 = HEAP32[$1017>>2]|0;
    $1019 = $1018 ^ $ubb_target2b$043;
    $1020 = ($1018|0)==($ubb_target2b$043|0);
    if ($1020) {
     $$32$ph = $$27$lcssa;
     break;
    } else {
     $$2544 = $$27$lcssa;$ubb_target2b$043 = $1019;
    }
   }
  }
 } while(0);
 $984 = ($890|0)==(0);
 if ($984) {
  $$0 = $$32$ph;
  STACKTOP = sp;return ($$0|0);
 }
 $985 = ($nhand$1|0)<($nhand$5|0);
 if (!($985)) {
  $ubb_target2a$07 = $890;
  while(1) {
   $1057 = (_first_one2($ubb_target2a$07)|0);
   $1058 = ((34156304 + (($1057*12)|0)|0) + 8|0);
   $1059 = HEAP32[$1058>>2]|0;
   $1060 = $1059 ^ $ubb_target2a$07;
   $1061 = ($1059|0)==($ubb_target2a$07|0);
   if ($1061) {
    $$0 = $$32$ph;
    break;
   } else {
    $ubb_target2a$07 = $1060;
   }
  }
  STACKTOP = sp;return ($$0|0);
 }
 $986 = (($nhand$5) - ($nhand$1))|0;
 $$328$us = $$32$ph;$ubb_target2a$07$us = $890;
 while(1) {
  $988 = (_first_one2($ubb_target2a$07$us)|0);
  $$336$us = $$328$us;$i$45$us = $nhand$1;
  while(1) {
   $992 = (($ahand) + ($i$45$us<<2)|0);
   $993 = HEAP32[$992>>2]|0;
   $994 = $993 | $988;
   HEAP32[$$336$us>>2] = $994;
   $995 = (($i$45$us) + 1)|0;
   $exitcond403 = ($995|0)==($nhand$5|0);
   if ($exitcond403) {
    break;
   }
   $996 = (($$336$us) + 4|0);
   $$336$us = $996;$i$45$us = $995;
  }
  $scevgep402 = (($$328$us) + ($986<<2)|0);
  $987 = ((34156304 + (($988*12)|0)|0) + 8|0);
  $989 = HEAP32[$987>>2]|0;
  $990 = $989 ^ $ubb_target2a$07$us;
  $991 = ($989|0)==($ubb_target2a$07$us|0);
  if ($991) {
   $$0 = $scevgep402;
   break;
  } else {
   $$328$us = $scevgep402;$ubb_target2a$07$us = $990;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _b_have_evasion($ptree) {
 $ptree = $ptree|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ais_pawn = 0, $bb_desti$sroa$0$0 = 0, $bb_desti$sroa$0$1 = 0, $bb_desti$sroa$1$0 = 0, $bb_desti$sroa$1$1 = 0, $bb_desti$sroa$2$0 = 0, $bb_desti$sroa$2$1 = 0, $bb_piece$sroa$0$062 = 0, $bb_piece$sroa$0$154 = 0, $bb_piece$sroa$0$246 = 0, $bb_piece$sroa$0$338 = 0, $bb_piece$sroa$0$430 = 0, $bb_piece$sroa$0$522 = 0, $bb_piece$sroa$0$614 = 0, $bb_piece$sroa$0$78 = 0, $bb_piece$sroa$1$061 = 0;
 var $bb_piece$sroa$1$153 = 0, $bb_piece$sroa$1$245 = 0, $bb_piece$sroa$1$337 = 0, $bb_piece$sroa$1$429 = 0, $bb_piece$sroa$1$521 = 0, $bb_piece$sroa$1$613 = 0, $bb_piece$sroa$1$77 = 0, $bb_piece$sroa$2$060 = 0, $bb_piece$sroa$2$152 = 0, $bb_piece$sroa$2$244 = 0, $bb_piece$sroa$2$336 = 0, $bb_piece$sroa$2$428 = 0, $bb_piece$sroa$2$520 = 0, $bb_piece$sroa$2$612 = 0, $bb_piece$sroa$2$76 = 0, $bb_target$sroa$0$03 = 0, $bb_target$sroa$1$02 = 0, $bb_target$sroa$2$01 = 0, $flag$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ais_pawn = sp + 12|0;
 $0 = sp;
 $1 = (($ptree) + 593|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = (34156304 + (($3*12)|0)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($ptree) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 ^ $5;
 HEAP32[$6>>2] = $8;
 $9 = ((34156304 + (($3*12)|0)|0) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($ptree) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 ^ $10;
 HEAP32[$11>>2] = $13;
 $14 = ((34156304 + (($3*12)|0)|0) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($ptree) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 ^ $15;
 HEAP32[$16>>2] = $18;
 $19 = (34157280 + (($3*12)|0)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($ptree) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 ^ $20;
 HEAP32[$21>>2] = $23;
 $24 = ((34157280 + (($3*12)|0)|0) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($ptree) + 36|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 ^ $25;
 HEAP32[$26>>2] = $28;
 $29 = ((34157280 + (($3*12)|0)|0) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($ptree) + 40|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 ^ $30;
 HEAP32[$31>>2] = $33;
 $34 = (34158256 + (($3*12)|0)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($ptree) + 44|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 ^ $35;
 HEAP32[$36>>2] = $38;
 $39 = ((34158256 + (($3*12)|0)|0) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($ptree) + 48|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 ^ $40;
 HEAP32[$41>>2] = $43;
 $44 = ((34158256 + (($3*12)|0)|0) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($ptree) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 ^ $45;
 HEAP32[$46>>2] = $48;
 $49 = (34159232 + (($3*12)|0)|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($ptree) + 56|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $52 ^ $50;
 HEAP32[$51>>2] = $53;
 $54 = ((34159232 + (($3*12)|0)|0) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($ptree) + 60|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $57 ^ $55;
 HEAP32[$56>>2] = $58;
 $59 = ((34159232 + (($3*12)|0)|0) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($ptree) + 64|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62 ^ $60;
 HEAP32[$61>>2] = $63;
 $64 = (33578928 + (($3*12)|0)|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $8 ^ -1;
 $67 = $65 & $66;
 $68 = ((33578928 + (($3*12)|0)|0) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $13 ^ -1;
 $71 = $69 & $70;
 $72 = ((33578928 + (($3*12)|0)|0) + 8|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $18 ^ -1;
 $75 = $73 & $74;
 $bb_desti$sroa$0$0 = $67;$bb_desti$sroa$1$0 = $71;$bb_desti$sroa$2$0 = $75;
 while(1) {
  $76 = $bb_desti$sroa$1$0 | $bb_desti$sroa$0$0;
  $77 = $76 | $bb_desti$sroa$2$0;
  $78 = ($77|0)==(0);
  if ($78) {
   $flag$0 = 0;
   break;
  }
  $79 = (_last_one210($bb_desti$sroa$2$0,$bb_desti$sroa$1$0,$bb_desti$sroa$0$0)|0);
  $80 = (34156304 + (($79*12)|0)|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $81 ^ $bb_desti$sroa$0$0;
  $83 = ((34156304 + (($79*12)|0)|0) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $84 ^ $bb_desti$sroa$1$0;
  $86 = ((34156304 + (($79*12)|0)|0) + 8|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $87 ^ $bb_desti$sroa$2$0;
  $89 = (_is_black_attacked($ptree,$79)|0);
  $90 = ($89|0)==(0);
  if ($90) {
   $flag$0 = 1;
   break;
  } else {
   $bb_desti$sroa$0$0 = $82;$bb_desti$sroa$1$0 = $85;$bb_desti$sroa$2$0 = $88;
  }
 }
 $91 = HEAP32[$4>>2]|0;
 $92 = HEAP32[$6>>2]|0;
 $93 = $92 ^ $91;
 HEAP32[$6>>2] = $93;
 $94 = HEAP32[$9>>2]|0;
 $95 = HEAP32[$11>>2]|0;
 $96 = $95 ^ $94;
 HEAP32[$11>>2] = $96;
 $97 = HEAP32[$14>>2]|0;
 $98 = HEAP32[$16>>2]|0;
 $99 = $98 ^ $97;
 HEAP32[$16>>2] = $99;
 $100 = HEAP32[$19>>2]|0;
 $101 = HEAP32[$21>>2]|0;
 $102 = $101 ^ $100;
 HEAP32[$21>>2] = $102;
 $103 = HEAP32[$24>>2]|0;
 $104 = HEAP32[$26>>2]|0;
 $105 = $104 ^ $103;
 HEAP32[$26>>2] = $105;
 $106 = HEAP32[$29>>2]|0;
 $107 = HEAP32[$31>>2]|0;
 $108 = $107 ^ $106;
 HEAP32[$31>>2] = $108;
 $109 = HEAP32[$34>>2]|0;
 $110 = HEAP32[$36>>2]|0;
 $111 = $110 ^ $109;
 HEAP32[$36>>2] = $111;
 $112 = HEAP32[$39>>2]|0;
 $113 = HEAP32[$41>>2]|0;
 $114 = $113 ^ $112;
 HEAP32[$41>>2] = $114;
 $115 = HEAP32[$44>>2]|0;
 $116 = HEAP32[$46>>2]|0;
 $117 = $116 ^ $115;
 HEAP32[$46>>2] = $117;
 $118 = HEAP32[$49>>2]|0;
 $119 = HEAP32[$51>>2]|0;
 $120 = $119 ^ $118;
 HEAP32[$51>>2] = $120;
 $121 = HEAP32[$54>>2]|0;
 $122 = HEAP32[$56>>2]|0;
 $123 = $122 ^ $121;
 HEAP32[$56>>2] = $123;
 $124 = HEAP32[$59>>2]|0;
 $125 = HEAP32[$61>>2]|0;
 $126 = $125 ^ $124;
 HEAP32[$61>>2] = $126;
 if ($flag$0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _w_attacks_to_piece($0,$ptree,$3);
 $127 = HEAP32[$0>>2]|0;
 $128 = (($0) + 4|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = (($0) + 8|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (_popu_count012($127,$129,$131)|0);
 $133 = ($132|0)==(2);
 if ($133) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $134 = (_last_one210($131,$129,$127)|0);
 $135 = ((34077568 + (($3*972)|0)|0) + (($134*12)|0)|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = (((34077568 + (($3*972)|0)|0) + (($134*12)|0)|0) + 4|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = (((34077568 + (($3*972)|0)|0) + (($134*12)|0)|0) + 8|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = $136 | $127;
 $142 = $138 | $129;
 $143 = $140 | $131;
 $144 = (($ptree) + 164|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = $145 & $141;
 $147 = (($ptree) + 168|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = $148 & $142;
 $150 = (($ptree) + 172|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $151 & $143;
 $bb_desti$sroa$0$1 = $146;$bb_desti$sroa$1$1 = $149;$bb_desti$sroa$2$1 = $152;
 while(1) {
  $153 = $bb_desti$sroa$1$1 | $bb_desti$sroa$0$1;
  $154 = $153 | $bb_desti$sroa$2$1;
  $155 = ($154|0)==(0);
  if ($155) {
   label = 10;
   break;
  }
  $156 = (_last_one210($bb_desti$sroa$2$1,$bb_desti$sroa$1$1,$bb_desti$sroa$0$1)|0);
  $157 = (($156) + 9)|0;
  $158 = ((220518304 + (($3*81)|0)|0) + ($157)|0);
  $159 = HEAP8[$158>>0]|0;
  $160 = ($159<<24>>24)==(0);
  if ($160) {
   $$0 = 1;
   label = 62;
   break;
  }
  $161 = ((34156304 + (($156*12)|0)|0) + 8|0);
  $162 = ((34156304 + (($156*12)|0)|0) + 4|0);
  $163 = (34156304 + (($156*12)|0)|0);
  $164 = HEAP32[$161>>2]|0;
  $165 = HEAP32[$162>>2]|0;
  $166 = HEAP32[$163>>2]|0;
  $167 = $159&255;
  $168 = $164 ^ $bb_desti$sroa$2$1;
  $169 = $165 ^ $bb_desti$sroa$1$1;
  $170 = $166 ^ $bb_desti$sroa$0$1;
  $171 = (_is_pinned_on_black_king($ptree,$157,$167)|0);
  $172 = ($171|0)==(0);
  if ($172) {
   $$0 = 1;
   label = 62;
   break;
  } else {
   $bb_desti$sroa$0$1 = $170;$bb_desti$sroa$1$1 = $169;$bb_desti$sroa$2$1 = $168;
  }
 }
 if ((label|0) == 10) {
  $173 = (($ptree) + 188|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = (($ptree) + 192|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = (($ptree) + 196|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = $176 | $178;
  $180 = $179 | $174;
  $181 = ($180|0)==(0);
  L19: do {
   if (!($181)) {
    $bb_piece$sroa$0$062 = $174;$bb_piece$sroa$1$061 = $176;$bb_piece$sroa$2$060 = $178;
    while(1) {
     $182 = (_last_one210($bb_piece$sroa$2$060,$bb_piece$sroa$1$061,$bb_piece$sroa$0$062)|0);
     $183 = (34156304 + (($182*12)|0)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = $184 ^ $bb_piece$sroa$0$062;
     $186 = ((34156304 + (($182*12)|0)|0) + 4|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = $187 ^ $bb_piece$sroa$1$061;
     $189 = ((34156304 + (($182*12)|0)|0) + 8|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = $190 ^ $bb_piece$sroa$2$060;
     $192 = ((33572424 + ($182<<3)|0) + 2|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = ((($ptree) + ($194<<2)|0) + 32|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ((33572424 + ($182<<3)|0) + 3|0);
     $198 = HEAP8[$197>>0]|0;
     $199 = $198&255;
     $200 = $196 >>> $199;
     $201 = $200 & 127;
     $202 = ((33953152 + (($182*1536)|0)|0) + (($201*12)|0)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = (((33953152 + (($182*1536)|0)|0) + (($201*12)|0)|0) + 4|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = (((33953152 + (($182*1536)|0)|0) + (($201*12)|0)|0) + 8|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = (34161184 + (($182*12)|0)|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = ((34161184 + (($182*12)|0)|0) + 4|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ((34161184 + (($182*12)|0)|0) + 8|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = $203 & $141;
     $215 = $214 & $209;
     $216 = $205 & $142;
     $217 = $216 & $211;
     $218 = $207 & $143;
     $219 = $218 & $213;
     $220 = $217 | $215;
     $221 = $220 | $219;
     $222 = ($221|0)==(0);
     if (!($222)) {
      $226 = ((220518304 + (($3*81)|0)|0) + ($182)|0);
      $227 = HEAP8[$226>>0]|0;
      $228 = ($227<<24>>24)==(0);
      if ($228) {
       $$0 = 1;
       label = 62;
       break;
      }
      $229 = $227&255;
      $230 = (_is_pinned_on_black_king($ptree,$182,$229)|0);
      $231 = ($230|0)==(0);
      if ($231) {
       $$0 = 1;
       label = 62;
       break;
      }
     }
     $223 = $188 | $191;
     $224 = $223 | $185;
     $225 = ($224|0)==(0);
     if ($225) {
      break L19;
     } else {
      $bb_piece$sroa$0$062 = $185;$bb_piece$sroa$1$061 = $188;$bb_piece$sroa$2$060 = $191;
     }
    }
    if ((label|0) == 62) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $232 = (($ptree) + 212|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = (($ptree) + 216|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = (($ptree) + 220|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = $235 | $237;
  $239 = $238 | $233;
  $240 = ($239|0)==(0);
  L30: do {
   if (!($240)) {
    $bb_piece$sroa$0$154 = $233;$bb_piece$sroa$1$153 = $235;$bb_piece$sroa$2$152 = $237;
    while(1) {
     $241 = (_last_one210($bb_piece$sroa$2$152,$bb_piece$sroa$1$153,$bb_piece$sroa$0$154)|0);
     $242 = (34156304 + (($241*12)|0)|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = $243 ^ $bb_piece$sroa$0$154;
     $245 = ((34156304 + (($241*12)|0)|0) + 4|0);
     $246 = HEAP32[$245>>2]|0;
     $247 = $246 ^ $bb_piece$sroa$1$153;
     $248 = ((34156304 + (($241*12)|0)|0) + 8|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = $249 ^ $bb_piece$sroa$2$152;
     $251 = (33573072 + (($241*12)|0)|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = $252 & $141;
     $254 = ((33573072 + (($241*12)|0)|0) + 4|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = $255 & $142;
     $257 = ((33573072 + (($241*12)|0)|0) + 8|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = $258 & $143;
     $260 = $256 | $253;
     $261 = $260 | $259;
     $262 = ($261|0)==(0);
     if (!($262)) {
      $266 = ((220518304 + (($3*81)|0)|0) + ($241)|0);
      $267 = HEAP8[$266>>0]|0;
      $268 = ($267<<24>>24)==(0);
      if ($268) {
       $$0 = 1;
       label = 62;
       break;
      }
      $269 = $267&255;
      $270 = (_is_pinned_on_black_king($ptree,$241,$269)|0);
      $271 = ($270|0)==(0);
      if ($271) {
       $$0 = 1;
       label = 62;
       break;
      }
     }
     $263 = $247 | $250;
     $264 = $263 | $244;
     $265 = ($264|0)==(0);
     if ($265) {
      break L30;
     } else {
      $bb_piece$sroa$0$154 = $244;$bb_piece$sroa$1$153 = $247;$bb_piece$sroa$2$152 = $250;
     }
    }
    if ((label|0) == 62) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $272 = (($ptree) + 236|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = (($ptree) + 240|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = (($ptree) + 244|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = $275 | $277;
  $279 = $278 | $273;
  $280 = ($279|0)==(0);
  L41: do {
   if (!($280)) {
    $bb_piece$sroa$0$246 = $273;$bb_piece$sroa$1$245 = $275;$bb_piece$sroa$2$244 = $277;
    while(1) {
     $281 = (_last_one210($bb_piece$sroa$2$244,$bb_piece$sroa$1$245,$bb_piece$sroa$0$246)|0);
     $282 = (34156304 + (($281*12)|0)|0);
     $283 = HEAP32[$282>>2]|0;
     $284 = $283 ^ $bb_piece$sroa$0$246;
     $285 = ((34156304 + (($281*12)|0)|0) + 4|0);
     $286 = HEAP32[$285>>2]|0;
     $287 = $286 ^ $bb_piece$sroa$1$245;
     $288 = ((34156304 + (($281*12)|0)|0) + 8|0);
     $289 = HEAP32[$288>>2]|0;
     $290 = $289 ^ $bb_piece$sroa$2$244;
     $291 = (33574048 + (($281*12)|0)|0);
     $292 = HEAP32[$291>>2]|0;
     $293 = $292 & $141;
     $294 = ((33574048 + (($281*12)|0)|0) + 4|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = $295 & $142;
     $297 = ((33574048 + (($281*12)|0)|0) + 8|0);
     $298 = HEAP32[$297>>2]|0;
     $299 = $298 & $143;
     $300 = $296 | $293;
     $301 = $300 | $299;
     $302 = ($301|0)==(0);
     if (!($302)) {
      $306 = ((220518304 + (($3*81)|0)|0) + ($281)|0);
      $307 = HEAP8[$306>>0]|0;
      $308 = ($307<<24>>24)==(0);
      if ($308) {
       $$0 = 1;
       label = 62;
       break;
      }
      $309 = $307&255;
      $310 = (_is_pinned_on_black_king($ptree,$281,$309)|0);
      $311 = ($310|0)==(0);
      if ($311) {
       $$0 = 1;
       label = 62;
       break;
      }
     }
     $303 = $287 | $290;
     $304 = $303 | $284;
     $305 = ($304|0)==(0);
     if ($305) {
      break L41;
     } else {
      $bb_piece$sroa$0$246 = $284;$bb_piece$sroa$1$245 = $287;$bb_piece$sroa$2$244 = $290;
     }
    }
    if ((label|0) == 62) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $312 = (($ptree) + 92|0);
  $313 = HEAP32[$312>>2]|0;
  $314 = (($ptree) + 96|0);
  $315 = HEAP32[$314>>2]|0;
  $316 = (($ptree) + 100|0);
  $317 = HEAP32[$316>>2]|0;
  $318 = $315 | $317;
  $319 = $318 | $313;
  $320 = ($319|0)==(0);
  L52: do {
   if (!($320)) {
    $bb_piece$sroa$0$338 = $313;$bb_piece$sroa$1$337 = $315;$bb_piece$sroa$2$336 = $317;
    while(1) {
     $321 = (_last_one210($bb_piece$sroa$2$336,$bb_piece$sroa$1$337,$bb_piece$sroa$0$338)|0);
     $322 = (34156304 + (($321*12)|0)|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = $323 ^ $bb_piece$sroa$0$338;
     $325 = ((34156304 + (($321*12)|0)|0) + 4|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = $326 ^ $bb_piece$sroa$1$337;
     $328 = ((34156304 + (($321*12)|0)|0) + 8|0);
     $329 = HEAP32[$328>>2]|0;
     $330 = $329 ^ $bb_piece$sroa$2$336;
     $331 = (33575024 + (($321*12)|0)|0);
     $332 = HEAP32[$331>>2]|0;
     $333 = $332 & $141;
     $334 = ((33575024 + (($321*12)|0)|0) + 4|0);
     $335 = HEAP32[$334>>2]|0;
     $336 = $335 & $142;
     $337 = ((33575024 + (($321*12)|0)|0) + 8|0);
     $338 = HEAP32[$337>>2]|0;
     $339 = $338 & $143;
     $340 = $336 | $333;
     $341 = $340 | $339;
     $342 = ($341|0)==(0);
     if (!($342)) {
      $346 = ((220518304 + (($3*81)|0)|0) + ($321)|0);
      $347 = HEAP8[$346>>0]|0;
      $348 = ($347<<24>>24)==(0);
      if ($348) {
       $$0 = 1;
       label = 62;
       break;
      }
      $349 = $347&255;
      $350 = (_is_pinned_on_black_king($ptree,$321,$349)|0);
      $351 = ($350|0)==(0);
      if ($351) {
       $$0 = 1;
       label = 62;
       break;
      }
     }
     $343 = $327 | $330;
     $344 = $343 | $324;
     $345 = ($344|0)==(0);
     if ($345) {
      break L52;
     } else {
      $bb_piece$sroa$0$338 = $324;$bb_piece$sroa$1$337 = $327;$bb_piece$sroa$2$336 = $330;
     }
    }
    if ((label|0) == 62) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $352 = (($ptree) + 260|0);
  $353 = HEAP32[$352>>2]|0;
  $354 = (($ptree) + 264|0);
  $355 = HEAP32[$354>>2]|0;
  $356 = (($ptree) + 268|0);
  $357 = HEAP32[$356>>2]|0;
  $358 = $355 | $357;
  $359 = $358 | $353;
  $360 = ($359|0)==(0);
  L63: do {
   if (!($360)) {
    $bb_piece$sroa$0$430 = $353;$bb_piece$sroa$1$429 = $355;$bb_piece$sroa$2$428 = $357;
    while(1) {
     $361 = (_last_one210($bb_piece$sroa$2$428,$bb_piece$sroa$1$429,$bb_piece$sroa$0$430)|0);
     $362 = (34156304 + (($361*12)|0)|0);
     $363 = HEAP32[$362>>2]|0;
     $364 = $363 ^ $bb_piece$sroa$0$430;
     $365 = ((34156304 + (($361*12)|0)|0) + 4|0);
     $366 = HEAP32[$365>>2]|0;
     $367 = $366 ^ $bb_piece$sroa$1$429;
     $368 = ((34156304 + (($361*12)|0)|0) + 8|0);
     $369 = HEAP32[$368>>2]|0;
     $370 = $369 ^ $bb_piece$sroa$2$428;
     $371 = ((33572424 + ($361<<3)|0) + 6|0);
     $372 = HEAP8[$371>>0]|0;
     $373 = $372&255;
     $374 = ((($ptree) + ($373<<2)|0) + 56|0);
     $375 = HEAP32[$374>>2]|0;
     $376 = ((33572424 + ($361<<3)|0) + 7|0);
     $377 = HEAP8[$376>>0]|0;
     $378 = $377&255;
     $379 = $375 >>> $378;
     $380 = $379 & 127;
     $381 = ((33704320 + (($361*1536)|0)|0) + (($380*12)|0)|0);
     $382 = HEAP32[$381>>2]|0;
     $383 = ((33572424 + ($361<<3)|0) + 4|0);
     $384 = HEAP8[$383>>0]|0;
     $385 = $384&255;
     $386 = ((($ptree) + ($385<<2)|0) + 44|0);
     $387 = HEAP32[$386>>2]|0;
     $388 = ((33572424 + ($361<<3)|0) + 5|0);
     $389 = HEAP8[$388>>0]|0;
     $390 = $389&255;
     $391 = $387 >>> $390;
     $392 = $391 & 127;
     $393 = ((33579904 + (($361*1536)|0)|0) + (($392*12)|0)|0);
     $394 = HEAP32[$393>>2]|0;
     $395 = $394 | $382;
     $396 = (((33704320 + (($361*1536)|0)|0) + (($380*12)|0)|0) + 4|0);
     $397 = HEAP32[$396>>2]|0;
     $398 = (((33579904 + (($361*1536)|0)|0) + (($392*12)|0)|0) + 4|0);
     $399 = HEAP32[$398>>2]|0;
     $400 = $399 | $397;
     $401 = (((33704320 + (($361*1536)|0)|0) + (($380*12)|0)|0) + 8|0);
     $402 = HEAP32[$401>>2]|0;
     $403 = (((33579904 + (($361*1536)|0)|0) + (($392*12)|0)|0) + 8|0);
     $404 = HEAP32[$403>>2]|0;
     $405 = $404 | $402;
     $406 = $395 & $141;
     $407 = $400 & $142;
     $408 = $405 & $143;
     $409 = $407 | $406;
     $410 = $409 | $408;
     $411 = ($410|0)==(0);
     if (!($411)) {
      $415 = ((220518304 + (($3*81)|0)|0) + ($361)|0);
      $416 = HEAP8[$415>>0]|0;
      $417 = ($416<<24>>24)==(0);
      if ($417) {
       $$0 = 1;
       label = 62;
       break;
      }
      $418 = $416&255;
      $419 = (_is_pinned_on_black_king($ptree,$361,$418)|0);
      $420 = ($419|0)==(0);
      if ($420) {
       $$0 = 1;
       label = 62;
       break;
      }
     }
     $412 = $367 | $370;
     $413 = $412 | $364;
     $414 = ($413|0)==(0);
     if ($414) {
      break L63;
     } else {
      $bb_piece$sroa$0$430 = $364;$bb_piece$sroa$1$429 = $367;$bb_piece$sroa$2$428 = $370;
     }
    }
    if ((label|0) == 62) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $421 = (($ptree) + 284|0);
  $422 = HEAP32[$421>>2]|0;
  $423 = (($ptree) + 288|0);
  $424 = HEAP32[$423>>2]|0;
  $425 = (($ptree) + 292|0);
  $426 = HEAP32[$425>>2]|0;
  $427 = $424 | $426;
  $428 = $427 | $422;
  $429 = ($428|0)==(0);
  L74: do {
   if (!($429)) {
    $bb_piece$sroa$0$522 = $422;$bb_piece$sroa$1$521 = $424;$bb_piece$sroa$2$520 = $426;
    while(1) {
     $430 = (_last_one210($bb_piece$sroa$2$520,$bb_piece$sroa$1$521,$bb_piece$sroa$0$522)|0);
     $431 = (34156304 + (($430*12)|0)|0);
     $432 = HEAP32[$431>>2]|0;
     $433 = $432 ^ $bb_piece$sroa$0$522;
     $434 = ((34156304 + (($430*12)|0)|0) + 4|0);
     $435 = HEAP32[$434>>2]|0;
     $436 = $435 ^ $bb_piece$sroa$1$521;
     $437 = ((34156304 + (($430*12)|0)|0) + 8|0);
     $438 = HEAP32[$437>>2]|0;
     $439 = $438 ^ $bb_piece$sroa$2$520;
     $440 = ((33572424 + ($430<<3)|0) + 2|0);
     $441 = HEAP8[$440>>0]|0;
     $442 = $441&255;
     $443 = ((($ptree) + ($442<<2)|0) + 32|0);
     $444 = HEAP32[$443>>2]|0;
     $445 = ((33572424 + ($430<<3)|0) + 3|0);
     $446 = HEAP8[$445>>0]|0;
     $447 = $446&255;
     $448 = $444 >>> $447;
     $449 = $448 & 127;
     $450 = ((33953152 + (($430*1536)|0)|0) + (($449*12)|0)|0);
     $451 = HEAP32[$450>>2]|0;
     $452 = (33572424 + ($430<<3)|0);
     $453 = HEAP8[$452>>0]|0;
     $454 = $453&255;
     $455 = ((($ptree) + ($454<<2)|0) + 8|0);
     $456 = HEAP32[$455>>2]|0;
     $457 = ((($ptree) + ($454<<2)|0) + 20|0);
     $458 = HEAP32[$457>>2]|0;
     $459 = $458 | $456;
     $460 = ((33572424 + ($430<<3)|0) + 1|0);
     $461 = HEAP8[$460>>0]|0;
     $462 = $461&255;
     $463 = $459 >>> $462;
     $464 = $463 & 127;
     $465 = ((33828736 + (($430*1536)|0)|0) + (($464*12)|0)|0);
     $466 = HEAP32[$465>>2]|0;
     $467 = $466 | $451;
     $468 = (((33953152 + (($430*1536)|0)|0) + (($449*12)|0)|0) + 4|0);
     $469 = HEAP32[$468>>2]|0;
     $470 = (((33828736 + (($430*1536)|0)|0) + (($464*12)|0)|0) + 4|0);
     $471 = HEAP32[$470>>2]|0;
     $472 = $471 | $469;
     $473 = (((33953152 + (($430*1536)|0)|0) + (($449*12)|0)|0) + 8|0);
     $474 = HEAP32[$473>>2]|0;
     $475 = (((33828736 + (($430*1536)|0)|0) + (($464*12)|0)|0) + 8|0);
     $476 = HEAP32[$475>>2]|0;
     $477 = $476 | $474;
     $478 = $467 & $141;
     $479 = $472 & $142;
     $480 = $477 & $143;
     $481 = $479 | $478;
     $482 = $481 | $480;
     $483 = ($482|0)==(0);
     if (!($483)) {
      $487 = ((220518304 + (($3*81)|0)|0) + ($430)|0);
      $488 = HEAP8[$487>>0]|0;
      $489 = ($488<<24>>24)==(0);
      if ($489) {
       $$0 = 1;
       label = 62;
       break;
      }
      $490 = $488&255;
      $491 = (_is_pinned_on_black_king($ptree,$430,$490)|0);
      $492 = ($491|0)==(0);
      if ($492) {
       $$0 = 1;
       label = 62;
       break;
      }
     }
     $484 = $436 | $439;
     $485 = $484 | $433;
     $486 = ($485|0)==(0);
     if ($486) {
      break L74;
     } else {
      $bb_piece$sroa$0$522 = $433;$bb_piece$sroa$1$521 = $436;$bb_piece$sroa$2$520 = $439;
     }
    }
    if ((label|0) == 62) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $493 = (($ptree) + 308|0);
  $494 = HEAP32[$493>>2]|0;
  $495 = (($ptree) + 312|0);
  $496 = HEAP32[$495>>2]|0;
  $497 = (($ptree) + 316|0);
  $498 = HEAP32[$497>>2]|0;
  $499 = $496 | $498;
  $500 = $499 | $494;
  $501 = ($500|0)==(0);
  L85: do {
   if (!($501)) {
    $bb_piece$sroa$0$614 = $494;$bb_piece$sroa$1$613 = $496;$bb_piece$sroa$2$612 = $498;
    while(1) {
     $502 = (_last_one210($bb_piece$sroa$2$612,$bb_piece$sroa$1$613,$bb_piece$sroa$0$614)|0);
     $503 = (34156304 + (($502*12)|0)|0);
     $504 = HEAP32[$503>>2]|0;
     $505 = $504 ^ $bb_piece$sroa$0$614;
     $506 = ((34156304 + (($502*12)|0)|0) + 4|0);
     $507 = HEAP32[$506>>2]|0;
     $508 = $507 ^ $bb_piece$sroa$1$613;
     $509 = ((34156304 + (($502*12)|0)|0) + 8|0);
     $510 = HEAP32[$509>>2]|0;
     $511 = $510 ^ $bb_piece$sroa$2$612;
     $512 = ((33572424 + ($502<<3)|0) + 6|0);
     $513 = HEAP8[$512>>0]|0;
     $514 = $513&255;
     $515 = ((($ptree) + ($514<<2)|0) + 56|0);
     $516 = HEAP32[$515>>2]|0;
     $517 = ((33572424 + ($502<<3)|0) + 7|0);
     $518 = HEAP8[$517>>0]|0;
     $519 = $518&255;
     $520 = $516 >>> $519;
     $521 = $520 & 127;
     $522 = ((33704320 + (($502*1536)|0)|0) + (($521*12)|0)|0);
     $523 = HEAP32[$522>>2]|0;
     $524 = ((33572424 + ($502<<3)|0) + 4|0);
     $525 = HEAP8[$524>>0]|0;
     $526 = $525&255;
     $527 = ((($ptree) + ($526<<2)|0) + 44|0);
     $528 = HEAP32[$527>>2]|0;
     $529 = ((33572424 + ($502<<3)|0) + 5|0);
     $530 = HEAP8[$529>>0]|0;
     $531 = $530&255;
     $532 = $528 >>> $531;
     $533 = $532 & 127;
     $534 = ((33579904 + (($502*1536)|0)|0) + (($533*12)|0)|0);
     $535 = HEAP32[$534>>2]|0;
     $536 = $535 | $523;
     $537 = (((33704320 + (($502*1536)|0)|0) + (($521*12)|0)|0) + 4|0);
     $538 = HEAP32[$537>>2]|0;
     $539 = (((33579904 + (($502*1536)|0)|0) + (($533*12)|0)|0) + 4|0);
     $540 = HEAP32[$539>>2]|0;
     $541 = $540 | $538;
     $542 = (((33704320 + (($502*1536)|0)|0) + (($521*12)|0)|0) + 8|0);
     $543 = HEAP32[$542>>2]|0;
     $544 = (((33579904 + (($502*1536)|0)|0) + (($533*12)|0)|0) + 8|0);
     $545 = HEAP32[$544>>2]|0;
     $546 = $545 | $543;
     $547 = (33578928 + (($502*12)|0)|0);
     $548 = HEAP32[$547>>2]|0;
     $549 = $536 | $548;
     $550 = ((33578928 + (($502*12)|0)|0) + 4|0);
     $551 = HEAP32[$550>>2]|0;
     $552 = $541 | $551;
     $553 = ((33578928 + (($502*12)|0)|0) + 8|0);
     $554 = HEAP32[$553>>2]|0;
     $555 = $546 | $554;
     $556 = $549 & $141;
     $557 = $552 & $142;
     $558 = $555 & $143;
     $559 = $557 | $556;
     $560 = $559 | $558;
     $561 = ($560|0)==(0);
     if (!($561)) {
      $565 = ((220518304 + (($3*81)|0)|0) + ($502)|0);
      $566 = HEAP8[$565>>0]|0;
      $567 = ($566<<24>>24)==(0);
      if ($567) {
       $$0 = 1;
       label = 62;
       break;
      }
      $568 = $566&255;
      $569 = (_is_pinned_on_black_king($ptree,$502,$568)|0);
      $570 = ($569|0)==(0);
      if ($570) {
       $$0 = 1;
       label = 62;
       break;
      }
     }
     $562 = $508 | $511;
     $563 = $562 | $505;
     $564 = ($563|0)==(0);
     if ($564) {
      break L85;
     } else {
      $bb_piece$sroa$0$614 = $505;$bb_piece$sroa$1$613 = $508;$bb_piece$sroa$2$612 = $511;
     }
    }
    if ((label|0) == 62) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $571 = (($ptree) + 332|0);
  $572 = HEAP32[$571>>2]|0;
  $573 = (($ptree) + 336|0);
  $574 = HEAP32[$573>>2]|0;
  $575 = (($ptree) + 340|0);
  $576 = HEAP32[$575>>2]|0;
  $577 = $574 | $576;
  $578 = $577 | $572;
  $579 = ($578|0)==(0);
  L96: do {
   if (!($579)) {
    $bb_piece$sroa$0$78 = $572;$bb_piece$sroa$1$77 = $574;$bb_piece$sroa$2$76 = $576;
    while(1) {
     $580 = (_last_one210($bb_piece$sroa$2$76,$bb_piece$sroa$1$77,$bb_piece$sroa$0$78)|0);
     $581 = (34156304 + (($580*12)|0)|0);
     $582 = HEAP32[$581>>2]|0;
     $583 = $582 ^ $bb_piece$sroa$0$78;
     $584 = ((34156304 + (($580*12)|0)|0) + 4|0);
     $585 = HEAP32[$584>>2]|0;
     $586 = $585 ^ $bb_piece$sroa$1$77;
     $587 = ((34156304 + (($580*12)|0)|0) + 8|0);
     $588 = HEAP32[$587>>2]|0;
     $589 = $588 ^ $bb_piece$sroa$2$76;
     $590 = ((33572424 + ($580<<3)|0) + 2|0);
     $591 = HEAP8[$590>>0]|0;
     $592 = $591&255;
     $593 = ((($ptree) + ($592<<2)|0) + 32|0);
     $594 = HEAP32[$593>>2]|0;
     $595 = ((33572424 + ($580<<3)|0) + 3|0);
     $596 = HEAP8[$595>>0]|0;
     $597 = $596&255;
     $598 = $594 >>> $597;
     $599 = $598 & 127;
     $600 = ((33953152 + (($580*1536)|0)|0) + (($599*12)|0)|0);
     $601 = HEAP32[$600>>2]|0;
     $602 = (33572424 + ($580<<3)|0);
     $603 = HEAP8[$602>>0]|0;
     $604 = $603&255;
     $605 = ((($ptree) + ($604<<2)|0) + 8|0);
     $606 = HEAP32[$605>>2]|0;
     $607 = ((($ptree) + ($604<<2)|0) + 20|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = $608 | $606;
     $610 = ((33572424 + ($580<<3)|0) + 1|0);
     $611 = HEAP8[$610>>0]|0;
     $612 = $611&255;
     $613 = $609 >>> $612;
     $614 = $613 & 127;
     $615 = ((33828736 + (($580*1536)|0)|0) + (($614*12)|0)|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 | $601;
     $618 = (((33953152 + (($580*1536)|0)|0) + (($599*12)|0)|0) + 4|0);
     $619 = HEAP32[$618>>2]|0;
     $620 = (((33828736 + (($580*1536)|0)|0) + (($614*12)|0)|0) + 4|0);
     $621 = HEAP32[$620>>2]|0;
     $622 = $621 | $619;
     $623 = (((33953152 + (($580*1536)|0)|0) + (($599*12)|0)|0) + 8|0);
     $624 = HEAP32[$623>>2]|0;
     $625 = (((33828736 + (($580*1536)|0)|0) + (($614*12)|0)|0) + 8|0);
     $626 = HEAP32[$625>>2]|0;
     $627 = $626 | $624;
     $628 = (33578928 + (($580*12)|0)|0);
     $629 = HEAP32[$628>>2]|0;
     $630 = $617 | $629;
     $631 = ((33578928 + (($580*12)|0)|0) + 4|0);
     $632 = HEAP32[$631>>2]|0;
     $633 = $622 | $632;
     $634 = ((33578928 + (($580*12)|0)|0) + 8|0);
     $635 = HEAP32[$634>>2]|0;
     $636 = $627 | $635;
     $637 = $630 & $141;
     $638 = $633 & $142;
     $639 = $636 & $143;
     $640 = $638 | $637;
     $641 = $640 | $639;
     $642 = ($641|0)==(0);
     if (!($642)) {
      $646 = ((220518304 + (($3*81)|0)|0) + ($580)|0);
      $647 = HEAP8[$646>>0]|0;
      $648 = ($647<<24>>24)==(0);
      if ($648) {
       $$0 = 1;
       label = 62;
       break;
      }
      $649 = $647&255;
      $650 = (_is_pinned_on_black_king($ptree,$580,$649)|0);
      $651 = ($650|0)==(0);
      if ($651) {
       $$0 = 1;
       label = 62;
       break;
      }
     }
     $643 = $586 | $589;
     $644 = $643 | $583;
     $645 = ($644|0)==(0);
     if ($645) {
      break L96;
     } else {
      $bb_piece$sroa$0$78 = $583;$bb_piece$sroa$1$77 = $586;$bb_piece$sroa$2$76 = $589;
     }
    }
    if ((label|0) == 62) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $652 = $138 | $136;
  $653 = $652 | $140;
  $654 = ($653|0)==(0);
  if ($654) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $655 = (($ptree) + 500|0);
  $656 = HEAP32[$655>>2]|0;
  $657 = $656 & 2095104;
  $658 = ($657|0)==(0);
  if (!($658)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $659 = $136 & 262143;
  $660 = $659 | $138;
  $661 = $660 | $140;
  $662 = ($661|0)==(0);
  if ($662) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $663 = $656 & 224;
  $664 = ($663|0)==(0);
  if (!($664)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $665 = $656 & 1792;
  $666 = ($665|0)==(0);
  if (!($666)) {
   $667 = $136 & 511;
   $668 = $667 | $138;
   $669 = $668 | $140;
   $670 = ($669|0)==(0);
   if (!($670)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $671 = $656 & 31;
  $672 = ($671|0)==(0);
  if ($672) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $673 = HEAP32[$144>>2]|0;
  $674 = HEAP32[$147>>2]|0;
  $675 = $674 | $673;
  $676 = HEAP32[$150>>2]|0;
  $677 = $675 | $676;
  $678 = $677 & 67240192;
  HEAP32[$ais_pawn>>2] = $678;
  $679 = $677 & 33620096;
  $680 = (($ais_pawn) + 4|0);
  HEAP32[$680>>2] = $679;
  $681 = $677 & 16810048;
  $682 = (($ais_pawn) + 8|0);
  HEAP32[$682>>2] = $681;
  $683 = $677 & 8405024;
  $684 = (($ais_pawn) + 12|0);
  HEAP32[$684>>2] = $683;
  $685 = $677 & 4202512;
  $686 = (($ais_pawn) + 16|0);
  HEAP32[$686>>2] = $685;
  $687 = $677 & 2101256;
  $688 = (($ais_pawn) + 20|0);
  HEAP32[$688>>2] = $687;
  $689 = $677 & 1050628;
  $690 = (($ais_pawn) + 24|0);
  HEAP32[$690>>2] = $689;
  $691 = $677 & 525314;
  $692 = (($ais_pawn) + 28|0);
  HEAP32[$692>>2] = $691;
  $693 = $677 & 262657;
  $694 = (($ais_pawn) + 32|0);
  HEAP32[$694>>2] = $693;
  $695 = $138 | $140;
  $696 = $695 | $659;
  $697 = ($696|0)==(0);
  if ($697) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $bb_target$sroa$0$03 = $659;$bb_target$sroa$1$02 = $138;$bb_target$sroa$2$01 = $140;
  }
  while(1) {
   $698 = (_last_one210($bb_target$sroa$2$01,$bb_target$sroa$1$02,$bb_target$sroa$0$03)|0);
   $699 = (34156304 + (($698*12)|0)|0);
   $700 = HEAP32[$699>>2]|0;
   $701 = $700 ^ $bb_target$sroa$0$03;
   $702 = ((34156304 + (($698*12)|0)|0) + 4|0);
   $703 = HEAP32[$702>>2]|0;
   $704 = $703 ^ $bb_target$sroa$1$02;
   $705 = ((34156304 + (($698*12)|0)|0) + 8|0);
   $706 = HEAP32[$705>>2]|0;
   $707 = $706 ^ $bb_target$sroa$2$01;
   $708 = (1248 + ($698)|0);
   $709 = HEAP8[$708>>0]|0;
   $710 = $709&255;
   $711 = (($ais_pawn) + ($710<<2)|0);
   $712 = HEAP32[$711>>2]|0;
   $713 = ($712|0)==(0);
   if ($713) {
    $717 = (($698) + -9)|0;
    $718 = ((($ptree) + ($717)|0) + 512|0);
    $719 = HEAP8[$718>>0]|0;
    $720 = ($719<<24>>24)==(-8);
    if (!($720)) {
     $$0 = 1;
     label = 62;
     break;
    }
    $721 = (_is_mate_b_pawn_drop($ptree,$698)|0);
    $722 = ($721|0)==(0);
    if ($722) {
     $$0 = 1;
     label = 62;
     break;
    }
   }
   $714 = $704 | $707;
   $715 = $714 | $701;
   $716 = ($715|0)==(0);
   if ($716) {
    $$0 = 0;
    label = 62;
    break;
   } else {
    $bb_target$sroa$0$03 = $701;$bb_target$sroa$1$02 = $704;$bb_target$sroa$2$01 = $707;
   }
  }
  if ((label|0) == 62) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 62) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _w_have_evasion($ptree) {
 $ptree = $ptree|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $ais_pawn = 0, $bb_desti$sroa$0$0 = 0, $bb_desti$sroa$0$1 = 0, $bb_desti$sroa$1$0 = 0, $bb_desti$sroa$1$1 = 0, $bb_desti$sroa$2$0 = 0, $bb_desti$sroa$2$1 = 0, $bb_piece$sroa$0$062 = 0, $bb_piece$sroa$0$154 = 0, $bb_piece$sroa$0$246 = 0, $bb_piece$sroa$0$338 = 0, $bb_piece$sroa$0$430 = 0, $bb_piece$sroa$0$522 = 0, $bb_piece$sroa$0$614 = 0, $bb_piece$sroa$0$78 = 0, $bb_piece$sroa$1$061 = 0, $bb_piece$sroa$1$153 = 0, $bb_piece$sroa$1$245 = 0;
 var $bb_piece$sroa$1$337 = 0, $bb_piece$sroa$1$429 = 0, $bb_piece$sroa$1$521 = 0, $bb_piece$sroa$1$613 = 0, $bb_piece$sroa$1$77 = 0, $bb_piece$sroa$2$060 = 0, $bb_piece$sroa$2$152 = 0, $bb_piece$sroa$2$244 = 0, $bb_piece$sroa$2$336 = 0, $bb_piece$sroa$2$428 = 0, $bb_piece$sroa$2$520 = 0, $bb_piece$sroa$2$612 = 0, $bb_piece$sroa$2$76 = 0, $bb_target$sroa$0$03 = 0, $bb_target$sroa$1$02 = 0, $bb_target$sroa$2$01 = 0, $flag$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ais_pawn = sp + 12|0;
 $0 = sp;
 $1 = (($ptree) + 594|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = (34156304 + (($3*12)|0)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($ptree) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 ^ $5;
 HEAP32[$6>>2] = $8;
 $9 = ((34156304 + (($3*12)|0)|0) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($ptree) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 ^ $10;
 HEAP32[$11>>2] = $13;
 $14 = ((34156304 + (($3*12)|0)|0) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($ptree) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 ^ $15;
 HEAP32[$16>>2] = $18;
 $19 = (34157280 + (($3*12)|0)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($ptree) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 ^ $20;
 HEAP32[$21>>2] = $23;
 $24 = ((34157280 + (($3*12)|0)|0) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($ptree) + 36|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 ^ $25;
 HEAP32[$26>>2] = $28;
 $29 = ((34157280 + (($3*12)|0)|0) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($ptree) + 40|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 ^ $30;
 HEAP32[$31>>2] = $33;
 $34 = (34158256 + (($3*12)|0)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($ptree) + 44|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 ^ $35;
 HEAP32[$36>>2] = $38;
 $39 = ((34158256 + (($3*12)|0)|0) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($ptree) + 48|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 ^ $40;
 HEAP32[$41>>2] = $43;
 $44 = ((34158256 + (($3*12)|0)|0) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($ptree) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 ^ $45;
 HEAP32[$46>>2] = $48;
 $49 = (34159232 + (($3*12)|0)|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($ptree) + 56|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $52 ^ $50;
 HEAP32[$51>>2] = $53;
 $54 = ((34159232 + (($3*12)|0)|0) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($ptree) + 60|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $57 ^ $55;
 HEAP32[$56>>2] = $58;
 $59 = ((34159232 + (($3*12)|0)|0) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($ptree) + 64|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62 ^ $60;
 HEAP32[$61>>2] = $63;
 $64 = (33578928 + (($3*12)|0)|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $8 ^ -1;
 $67 = $65 & $66;
 $68 = ((33578928 + (($3*12)|0)|0) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $13 ^ -1;
 $71 = $69 & $70;
 $72 = ((33578928 + (($3*12)|0)|0) + 8|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $18 ^ -1;
 $75 = $73 & $74;
 $bb_desti$sroa$0$0 = $67;$bb_desti$sroa$1$0 = $71;$bb_desti$sroa$2$0 = $75;
 while(1) {
  $76 = $bb_desti$sroa$1$0 | $bb_desti$sroa$0$0;
  $77 = $76 | $bb_desti$sroa$2$0;
  $78 = ($77|0)==(0);
  if ($78) {
   $flag$0 = 0;
   break;
  }
  $79 = (_first_one012($bb_desti$sroa$0$0,$bb_desti$sroa$1$0,$bb_desti$sroa$2$0)|0);
  $80 = (34156304 + (($79*12)|0)|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $81 ^ $bb_desti$sroa$0$0;
  $83 = ((34156304 + (($79*12)|0)|0) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $84 ^ $bb_desti$sroa$1$0;
  $86 = ((34156304 + (($79*12)|0)|0) + 8|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $87 ^ $bb_desti$sroa$2$0;
  $89 = (_is_white_attacked($ptree,$79)|0);
  $90 = ($89|0)==(0);
  if ($90) {
   $flag$0 = 1;
   break;
  } else {
   $bb_desti$sroa$0$0 = $82;$bb_desti$sroa$1$0 = $85;$bb_desti$sroa$2$0 = $88;
  }
 }
 $91 = HEAP32[$4>>2]|0;
 $92 = HEAP32[$6>>2]|0;
 $93 = $92 ^ $91;
 HEAP32[$6>>2] = $93;
 $94 = HEAP32[$9>>2]|0;
 $95 = HEAP32[$11>>2]|0;
 $96 = $95 ^ $94;
 HEAP32[$11>>2] = $96;
 $97 = HEAP32[$14>>2]|0;
 $98 = HEAP32[$16>>2]|0;
 $99 = $98 ^ $97;
 HEAP32[$16>>2] = $99;
 $100 = HEAP32[$19>>2]|0;
 $101 = HEAP32[$21>>2]|0;
 $102 = $101 ^ $100;
 HEAP32[$21>>2] = $102;
 $103 = HEAP32[$24>>2]|0;
 $104 = HEAP32[$26>>2]|0;
 $105 = $104 ^ $103;
 HEAP32[$26>>2] = $105;
 $106 = HEAP32[$29>>2]|0;
 $107 = HEAP32[$31>>2]|0;
 $108 = $107 ^ $106;
 HEAP32[$31>>2] = $108;
 $109 = HEAP32[$34>>2]|0;
 $110 = HEAP32[$36>>2]|0;
 $111 = $110 ^ $109;
 HEAP32[$36>>2] = $111;
 $112 = HEAP32[$39>>2]|0;
 $113 = HEAP32[$41>>2]|0;
 $114 = $113 ^ $112;
 HEAP32[$41>>2] = $114;
 $115 = HEAP32[$44>>2]|0;
 $116 = HEAP32[$46>>2]|0;
 $117 = $116 ^ $115;
 HEAP32[$46>>2] = $117;
 $118 = HEAP32[$49>>2]|0;
 $119 = HEAP32[$51>>2]|0;
 $120 = $119 ^ $118;
 HEAP32[$51>>2] = $120;
 $121 = HEAP32[$54>>2]|0;
 $122 = HEAP32[$56>>2]|0;
 $123 = $122 ^ $121;
 HEAP32[$56>>2] = $123;
 $124 = HEAP32[$59>>2]|0;
 $125 = HEAP32[$61>>2]|0;
 $126 = $125 ^ $124;
 HEAP32[$61>>2] = $126;
 if ($flag$0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _b_attacks_to_piece($0,$ptree,$3);
 $127 = HEAP32[$0>>2]|0;
 $128 = (($0) + 4|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = (($0) + 8|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (_popu_count012($127,$129,$131)|0);
 $133 = ($132|0)==(2);
 if ($133) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $134 = (_first_one012($127,$129,$131)|0);
 $135 = ((34077568 + (($3*972)|0)|0) + (($134*12)|0)|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = (((34077568 + (($3*972)|0)|0) + (($134*12)|0)|0) + 4|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = (((34077568 + (($3*972)|0)|0) + (($134*12)|0)|0) + 8|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = $136 | $127;
 $142 = $138 | $129;
 $143 = $140 | $131;
 $144 = (($ptree) + 176|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = $145 & $141;
 $147 = (($ptree) + 180|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = $148 & $142;
 $150 = (($ptree) + 184|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $151 & $143;
 $bb_desti$sroa$0$1 = $146;$bb_desti$sroa$1$1 = $149;$bb_desti$sroa$2$1 = $152;
 while(1) {
  $153 = $bb_desti$sroa$1$1 | $bb_desti$sroa$0$1;
  $154 = $153 | $bb_desti$sroa$2$1;
  $155 = ($154|0)==(0);
  if ($155) {
   label = 10;
   break;
  }
  $156 = (_first_one012($bb_desti$sroa$0$1,$bb_desti$sroa$1$1,$bb_desti$sroa$2$1)|0);
  $157 = (($156) + -9)|0;
  $158 = ((220518304 + (($3*81)|0)|0) + ($157)|0);
  $159 = HEAP8[$158>>0]|0;
  $160 = ($159<<24>>24)==(0);
  if ($160) {
   $$0 = 1;
   label = 62;
   break;
  }
  $161 = ((34156304 + (($156*12)|0)|0) + 8|0);
  $162 = ((34156304 + (($156*12)|0)|0) + 4|0);
  $163 = (34156304 + (($156*12)|0)|0);
  $164 = HEAP32[$161>>2]|0;
  $165 = HEAP32[$162>>2]|0;
  $166 = HEAP32[$163>>2]|0;
  $167 = $159&255;
  $168 = $164 ^ $bb_desti$sroa$2$1;
  $169 = $165 ^ $bb_desti$sroa$1$1;
  $170 = $166 ^ $bb_desti$sroa$0$1;
  $171 = (_is_pinned_on_white_king($ptree,$157,$167)|0);
  $172 = ($171|0)==(0);
  if ($172) {
   $$0 = 1;
   label = 62;
   break;
  } else {
   $bb_desti$sroa$0$1 = $170;$bb_desti$sroa$1$1 = $169;$bb_desti$sroa$2$1 = $168;
  }
 }
 if ((label|0) == 10) {
  $173 = (($ptree) + 200|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = (($ptree) + 204|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = (($ptree) + 208|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = $176 | $178;
  $180 = $179 | $174;
  $181 = ($180|0)==(0);
  L19: do {
   if (!($181)) {
    $bb_piece$sroa$0$062 = $174;$bb_piece$sroa$1$061 = $176;$bb_piece$sroa$2$060 = $178;
    while(1) {
     $182 = (_first_one012($bb_piece$sroa$0$062,$bb_piece$sroa$1$061,$bb_piece$sroa$2$060)|0);
     $183 = (34156304 + (($182*12)|0)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = $184 ^ $bb_piece$sroa$0$062;
     $186 = ((34156304 + (($182*12)|0)|0) + 4|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = $187 ^ $bb_piece$sroa$1$061;
     $189 = ((34156304 + (($182*12)|0)|0) + 8|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = $190 ^ $bb_piece$sroa$2$060;
     $192 = ((33572424 + ($182<<3)|0) + 2|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = ((($ptree) + ($194<<2)|0) + 32|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ((33572424 + ($182<<3)|0) + 3|0);
     $198 = HEAP8[$197>>0]|0;
     $199 = $198&255;
     $200 = $196 >>> $199;
     $201 = $200 & 127;
     $202 = ((33953152 + (($182*1536)|0)|0) + (($201*12)|0)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = (((33953152 + (($182*1536)|0)|0) + (($201*12)|0)|0) + 4|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = (((33953152 + (($182*1536)|0)|0) + (($201*12)|0)|0) + 8|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = (34160208 + (($182*12)|0)|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = ((34160208 + (($182*12)|0)|0) + 4|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ((34160208 + (($182*12)|0)|0) + 8|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = $203 & $141;
     $215 = $214 & $209;
     $216 = $205 & $142;
     $217 = $216 & $211;
     $218 = $207 & $143;
     $219 = $218 & $213;
     $220 = $217 | $215;
     $221 = $220 | $219;
     $222 = ($221|0)==(0);
     if (!($222)) {
      $226 = ((220518304 + (($3*81)|0)|0) + ($182)|0);
      $227 = HEAP8[$226>>0]|0;
      $228 = ($227<<24>>24)==(0);
      if ($228) {
       $$0 = 1;
       label = 62;
       break;
      }
      $229 = $227&255;
      $230 = (_is_pinned_on_white_king($ptree,$182,$229)|0);
      $231 = ($230|0)==(0);
      if ($231) {
       $$0 = 1;
       label = 62;
       break;
      }
     }
     $223 = $188 | $191;
     $224 = $223 | $185;
     $225 = ($224|0)==(0);
     if ($225) {
      break L19;
     } else {
      $bb_piece$sroa$0$062 = $185;$bb_piece$sroa$1$061 = $188;$bb_piece$sroa$2$060 = $191;
     }
    }
    if ((label|0) == 62) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $232 = (($ptree) + 224|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = (($ptree) + 228|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = (($ptree) + 232|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = $235 | $237;
  $239 = $238 | $233;
  $240 = ($239|0)==(0);
  L30: do {
   if (!($240)) {
    $bb_piece$sroa$0$154 = $233;$bb_piece$sroa$1$153 = $235;$bb_piece$sroa$2$152 = $237;
    while(1) {
     $241 = (_first_one012($bb_piece$sroa$0$154,$bb_piece$sroa$1$153,$bb_piece$sroa$2$152)|0);
     $242 = (34156304 + (($241*12)|0)|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = $243 ^ $bb_piece$sroa$0$154;
     $245 = ((34156304 + (($241*12)|0)|0) + 4|0);
     $246 = HEAP32[$245>>2]|0;
     $247 = $246 ^ $bb_piece$sroa$1$153;
     $248 = ((34156304 + (($241*12)|0)|0) + 8|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = $249 ^ $bb_piece$sroa$2$152;
     $251 = (33576000 + (($241*12)|0)|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = $252 & $141;
     $254 = ((33576000 + (($241*12)|0)|0) + 4|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = $255 & $142;
     $257 = ((33576000 + (($241*12)|0)|0) + 8|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = $258 & $143;
     $260 = $256 | $253;
     $261 = $260 | $259;
     $262 = ($261|0)==(0);
     if (!($262)) {
      $266 = ((220518304 + (($3*81)|0)|0) + ($241)|0);
      $267 = HEAP8[$266>>0]|0;
      $268 = ($267<<24>>24)==(0);
      if ($268) {
       $$0 = 1;
       label = 62;
       break;
      }
      $269 = $267&255;
      $270 = (_is_pinned_on_white_king($ptree,$241,$269)|0);
      $271 = ($270|0)==(0);
      if ($271) {
       $$0 = 1;
       label = 62;
       break;
      }
     }
     $263 = $247 | $250;
     $264 = $263 | $244;
     $265 = ($264|0)==(0);
     if ($265) {
      break L30;
     } else {
      $bb_piece$sroa$0$154 = $244;$bb_piece$sroa$1$153 = $247;$bb_piece$sroa$2$152 = $250;
     }
    }
    if ((label|0) == 62) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $272 = (($ptree) + 248|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = (($ptree) + 252|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = (($ptree) + 256|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = $275 | $277;
  $279 = $278 | $273;
  $280 = ($279|0)==(0);
  L41: do {
   if (!($280)) {
    $bb_piece$sroa$0$246 = $273;$bb_piece$sroa$1$245 = $275;$bb_piece$sroa$2$244 = $277;
    while(1) {
     $281 = (_first_one012($bb_piece$sroa$0$246,$bb_piece$sroa$1$245,$bb_piece$sroa$2$244)|0);
     $282 = (34156304 + (($281*12)|0)|0);
     $283 = HEAP32[$282>>2]|0;
     $284 = $283 ^ $bb_piece$sroa$0$246;
     $285 = ((34156304 + (($281*12)|0)|0) + 4|0);
     $286 = HEAP32[$285>>2]|0;
     $287 = $286 ^ $bb_piece$sroa$1$245;
     $288 = ((34156304 + (($281*12)|0)|0) + 8|0);
     $289 = HEAP32[$288>>2]|0;
     $290 = $289 ^ $bb_piece$sroa$2$244;
     $291 = (33576976 + (($281*12)|0)|0);
     $292 = HEAP32[$291>>2]|0;
     $293 = $292 & $141;
     $294 = ((33576976 + (($281*12)|0)|0) + 4|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = $295 & $142;
     $297 = ((33576976 + (($281*12)|0)|0) + 8|0);
     $298 = HEAP32[$297>>2]|0;
     $299 = $298 & $143;
     $300 = $296 | $293;
     $301 = $300 | $299;
     $302 = ($301|0)==(0);
     if (!($302)) {
      $306 = ((220518304 + (($3*81)|0)|0) + ($281)|0);
      $307 = HEAP8[$306>>0]|0;
      $308 = ($307<<24>>24)==(0);
      if ($308) {
       $$0 = 1;
       label = 62;
       break;
      }
      $309 = $307&255;
      $310 = (_is_pinned_on_white_king($ptree,$281,$309)|0);
      $311 = ($310|0)==(0);
      if ($311) {
       $$0 = 1;
       label = 62;
       break;
      }
     }
     $303 = $287 | $290;
     $304 = $303 | $284;
     $305 = ($304|0)==(0);
     if ($305) {
      break L41;
     } else {
      $bb_piece$sroa$0$246 = $284;$bb_piece$sroa$1$245 = $287;$bb_piece$sroa$2$244 = $290;
     }
    }
    if ((label|0) == 62) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $312 = (($ptree) + 104|0);
  $313 = HEAP32[$312>>2]|0;
  $314 = (($ptree) + 108|0);
  $315 = HEAP32[$314>>2]|0;
  $316 = (($ptree) + 112|0);
  $317 = HEAP32[$316>>2]|0;
  $318 = $315 | $317;
  $319 = $318 | $313;
  $320 = ($319|0)==(0);
  L52: do {
   if (!($320)) {
    $bb_piece$sroa$0$338 = $313;$bb_piece$sroa$1$337 = $315;$bb_piece$sroa$2$336 = $317;
    while(1) {
     $321 = (_first_one012($bb_piece$sroa$0$338,$bb_piece$sroa$1$337,$bb_piece$sroa$2$336)|0);
     $322 = (34156304 + (($321*12)|0)|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = $323 ^ $bb_piece$sroa$0$338;
     $325 = ((34156304 + (($321*12)|0)|0) + 4|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = $326 ^ $bb_piece$sroa$1$337;
     $328 = ((34156304 + (($321*12)|0)|0) + 8|0);
     $329 = HEAP32[$328>>2]|0;
     $330 = $329 ^ $bb_piece$sroa$2$336;
     $331 = (33577952 + (($321*12)|0)|0);
     $332 = HEAP32[$331>>2]|0;
     $333 = $332 & $141;
     $334 = ((33577952 + (($321*12)|0)|0) + 4|0);
     $335 = HEAP32[$334>>2]|0;
     $336 = $335 & $142;
     $337 = ((33577952 + (($321*12)|0)|0) + 8|0);
     $338 = HEAP32[$337>>2]|0;
     $339 = $338 & $143;
     $340 = $336 | $333;
     $341 = $340 | $339;
     $342 = ($341|0)==(0);
     if (!($342)) {
      $346 = ((220518304 + (($3*81)|0)|0) + ($321)|0);
      $347 = HEAP8[$346>>0]|0;
      $348 = ($347<<24>>24)==(0);
      if ($348) {
       $$0 = 1;
       label = 62;
       break;
      }
      $349 = $347&255;
      $350 = (_is_pinned_on_white_king($ptree,$321,$349)|0);
      $351 = ($350|0)==(0);
      if ($351) {
       $$0 = 1;
       label = 62;
       break;
      }
     }
     $343 = $327 | $330;
     $344 = $343 | $324;
     $345 = ($344|0)==(0);
     if ($345) {
      break L52;
     } else {
      $bb_piece$sroa$0$338 = $324;$bb_piece$sroa$1$337 = $327;$bb_piece$sroa$2$336 = $330;
     }
    }
    if ((label|0) == 62) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $352 = (($ptree) + 272|0);
  $353 = HEAP32[$352>>2]|0;
  $354 = (($ptree) + 276|0);
  $355 = HEAP32[$354>>2]|0;
  $356 = (($ptree) + 280|0);
  $357 = HEAP32[$356>>2]|0;
  $358 = $355 | $357;
  $359 = $358 | $353;
  $360 = ($359|0)==(0);
  L63: do {
   if (!($360)) {
    $bb_piece$sroa$0$430 = $353;$bb_piece$sroa$1$429 = $355;$bb_piece$sroa$2$428 = $357;
    while(1) {
     $361 = (_first_one012($bb_piece$sroa$0$430,$bb_piece$sroa$1$429,$bb_piece$sroa$2$428)|0);
     $362 = (34156304 + (($361*12)|0)|0);
     $363 = HEAP32[$362>>2]|0;
     $364 = $363 ^ $bb_piece$sroa$0$430;
     $365 = ((34156304 + (($361*12)|0)|0) + 4|0);
     $366 = HEAP32[$365>>2]|0;
     $367 = $366 ^ $bb_piece$sroa$1$429;
     $368 = ((34156304 + (($361*12)|0)|0) + 8|0);
     $369 = HEAP32[$368>>2]|0;
     $370 = $369 ^ $bb_piece$sroa$2$428;
     $371 = ((33572424 + ($361<<3)|0) + 6|0);
     $372 = HEAP8[$371>>0]|0;
     $373 = $372&255;
     $374 = ((($ptree) + ($373<<2)|0) + 56|0);
     $375 = HEAP32[$374>>2]|0;
     $376 = ((33572424 + ($361<<3)|0) + 7|0);
     $377 = HEAP8[$376>>0]|0;
     $378 = $377&255;
     $379 = $375 >>> $378;
     $380 = $379 & 127;
     $381 = ((33704320 + (($361*1536)|0)|0) + (($380*12)|0)|0);
     $382 = HEAP32[$381>>2]|0;
     $383 = ((33572424 + ($361<<3)|0) + 4|0);
     $384 = HEAP8[$383>>0]|0;
     $385 = $384&255;
     $386 = ((($ptree) + ($385<<2)|0) + 44|0);
     $387 = HEAP32[$386>>2]|0;
     $388 = ((33572424 + ($361<<3)|0) + 5|0);
     $389 = HEAP8[$388>>0]|0;
     $390 = $389&255;
     $391 = $387 >>> $390;
     $392 = $391 & 127;
     $393 = ((33579904 + (($361*1536)|0)|0) + (($392*12)|0)|0);
     $394 = HEAP32[$393>>2]|0;
     $395 = $394 | $382;
     $396 = (((33704320 + (($361*1536)|0)|0) + (($380*12)|0)|0) + 4|0);
     $397 = HEAP32[$396>>2]|0;
     $398 = (((33579904 + (($361*1536)|0)|0) + (($392*12)|0)|0) + 4|0);
     $399 = HEAP32[$398>>2]|0;
     $400 = $399 | $397;
     $401 = (((33704320 + (($361*1536)|0)|0) + (($380*12)|0)|0) + 8|0);
     $402 = HEAP32[$401>>2]|0;
     $403 = (((33579904 + (($361*1536)|0)|0) + (($392*12)|0)|0) + 8|0);
     $404 = HEAP32[$403>>2]|0;
     $405 = $404 | $402;
     $406 = $395 & $141;
     $407 = $400 & $142;
     $408 = $405 & $143;
     $409 = $407 | $406;
     $410 = $409 | $408;
     $411 = ($410|0)==(0);
     if (!($411)) {
      $415 = ((220518304 + (($3*81)|0)|0) + ($361)|0);
      $416 = HEAP8[$415>>0]|0;
      $417 = ($416<<24>>24)==(0);
      if ($417) {
       $$0 = 1;
       label = 62;
       break;
      }
      $418 = $416&255;
      $419 = (_is_pinned_on_white_king($ptree,$361,$418)|0);
      $420 = ($419|0)==(0);
      if ($420) {
       $$0 = 1;
       label = 62;
       break;
      }
     }
     $412 = $367 | $370;
     $413 = $412 | $364;
     $414 = ($413|0)==(0);
     if ($414) {
      break L63;
     } else {
      $bb_piece$sroa$0$430 = $364;$bb_piece$sroa$1$429 = $367;$bb_piece$sroa$2$428 = $370;
     }
    }
    if ((label|0) == 62) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $421 = (($ptree) + 296|0);
  $422 = HEAP32[$421>>2]|0;
  $423 = (($ptree) + 300|0);
  $424 = HEAP32[$423>>2]|0;
  $425 = (($ptree) + 304|0);
  $426 = HEAP32[$425>>2]|0;
  $427 = $424 | $426;
  $428 = $427 | $422;
  $429 = ($428|0)==(0);
  L74: do {
   if (!($429)) {
    $bb_piece$sroa$0$522 = $422;$bb_piece$sroa$1$521 = $424;$bb_piece$sroa$2$520 = $426;
    while(1) {
     $430 = (_first_one012($bb_piece$sroa$0$522,$bb_piece$sroa$1$521,$bb_piece$sroa$2$520)|0);
     $431 = (34156304 + (($430*12)|0)|0);
     $432 = HEAP32[$431>>2]|0;
     $433 = $432 ^ $bb_piece$sroa$0$522;
     $434 = ((34156304 + (($430*12)|0)|0) + 4|0);
     $435 = HEAP32[$434>>2]|0;
     $436 = $435 ^ $bb_piece$sroa$1$521;
     $437 = ((34156304 + (($430*12)|0)|0) + 8|0);
     $438 = HEAP32[$437>>2]|0;
     $439 = $438 ^ $bb_piece$sroa$2$520;
     $440 = ((33572424 + ($430<<3)|0) + 2|0);
     $441 = HEAP8[$440>>0]|0;
     $442 = $441&255;
     $443 = ((($ptree) + ($442<<2)|0) + 32|0);
     $444 = HEAP32[$443>>2]|0;
     $445 = ((33572424 + ($430<<3)|0) + 3|0);
     $446 = HEAP8[$445>>0]|0;
     $447 = $446&255;
     $448 = $444 >>> $447;
     $449 = $448 & 127;
     $450 = ((33953152 + (($430*1536)|0)|0) + (($449*12)|0)|0);
     $451 = HEAP32[$450>>2]|0;
     $452 = (33572424 + ($430<<3)|0);
     $453 = HEAP8[$452>>0]|0;
     $454 = $453&255;
     $455 = ((($ptree) + ($454<<2)|0) + 8|0);
     $456 = HEAP32[$455>>2]|0;
     $457 = ((($ptree) + ($454<<2)|0) + 20|0);
     $458 = HEAP32[$457>>2]|0;
     $459 = $458 | $456;
     $460 = ((33572424 + ($430<<3)|0) + 1|0);
     $461 = HEAP8[$460>>0]|0;
     $462 = $461&255;
     $463 = $459 >>> $462;
     $464 = $463 & 127;
     $465 = ((33828736 + (($430*1536)|0)|0) + (($464*12)|0)|0);
     $466 = HEAP32[$465>>2]|0;
     $467 = $466 | $451;
     $468 = (((33953152 + (($430*1536)|0)|0) + (($449*12)|0)|0) + 4|0);
     $469 = HEAP32[$468>>2]|0;
     $470 = (((33828736 + (($430*1536)|0)|0) + (($464*12)|0)|0) + 4|0);
     $471 = HEAP32[$470>>2]|0;
     $472 = $471 | $469;
     $473 = (((33953152 + (($430*1536)|0)|0) + (($449*12)|0)|0) + 8|0);
     $474 = HEAP32[$473>>2]|0;
     $475 = (((33828736 + (($430*1536)|0)|0) + (($464*12)|0)|0) + 8|0);
     $476 = HEAP32[$475>>2]|0;
     $477 = $476 | $474;
     $478 = $467 & $141;
     $479 = $472 & $142;
     $480 = $477 & $143;
     $481 = $479 | $478;
     $482 = $481 | $480;
     $483 = ($482|0)==(0);
     if (!($483)) {
      $487 = ((220518304 + (($3*81)|0)|0) + ($430)|0);
      $488 = HEAP8[$487>>0]|0;
      $489 = ($488<<24>>24)==(0);
      if ($489) {
       $$0 = 1;
       label = 62;
       break;
      }
      $490 = $488&255;
      $491 = (_is_pinned_on_white_king($ptree,$430,$490)|0);
      $492 = ($491|0)==(0);
      if ($492) {
       $$0 = 1;
       label = 62;
       break;
      }
     }
     $484 = $436 | $439;
     $485 = $484 | $433;
     $486 = ($485|0)==(0);
     if ($486) {
      break L74;
     } else {
      $bb_piece$sroa$0$522 = $433;$bb_piece$sroa$1$521 = $436;$bb_piece$sroa$2$520 = $439;
     }
    }
    if ((label|0) == 62) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $493 = (($ptree) + 320|0);
  $494 = HEAP32[$493>>2]|0;
  $495 = (($ptree) + 324|0);
  $496 = HEAP32[$495>>2]|0;
  $497 = (($ptree) + 328|0);
  $498 = HEAP32[$497>>2]|0;
  $499 = $496 | $498;
  $500 = $499 | $494;
  $501 = ($500|0)==(0);
  L85: do {
   if (!($501)) {
    $bb_piece$sroa$0$614 = $494;$bb_piece$sroa$1$613 = $496;$bb_piece$sroa$2$612 = $498;
    while(1) {
     $502 = (_first_one012($bb_piece$sroa$0$614,$bb_piece$sroa$1$613,$bb_piece$sroa$2$612)|0);
     $503 = (34156304 + (($502*12)|0)|0);
     $504 = HEAP32[$503>>2]|0;
     $505 = $504 ^ $bb_piece$sroa$0$614;
     $506 = ((34156304 + (($502*12)|0)|0) + 4|0);
     $507 = HEAP32[$506>>2]|0;
     $508 = $507 ^ $bb_piece$sroa$1$613;
     $509 = ((34156304 + (($502*12)|0)|0) + 8|0);
     $510 = HEAP32[$509>>2]|0;
     $511 = $510 ^ $bb_piece$sroa$2$612;
     $512 = ((33572424 + ($502<<3)|0) + 6|0);
     $513 = HEAP8[$512>>0]|0;
     $514 = $513&255;
     $515 = ((($ptree) + ($514<<2)|0) + 56|0);
     $516 = HEAP32[$515>>2]|0;
     $517 = ((33572424 + ($502<<3)|0) + 7|0);
     $518 = HEAP8[$517>>0]|0;
     $519 = $518&255;
     $520 = $516 >>> $519;
     $521 = $520 & 127;
     $522 = ((33704320 + (($502*1536)|0)|0) + (($521*12)|0)|0);
     $523 = HEAP32[$522>>2]|0;
     $524 = ((33572424 + ($502<<3)|0) + 4|0);
     $525 = HEAP8[$524>>0]|0;
     $526 = $525&255;
     $527 = ((($ptree) + ($526<<2)|0) + 44|0);
     $528 = HEAP32[$527>>2]|0;
     $529 = ((33572424 + ($502<<3)|0) + 5|0);
     $530 = HEAP8[$529>>0]|0;
     $531 = $530&255;
     $532 = $528 >>> $531;
     $533 = $532 & 127;
     $534 = ((33579904 + (($502*1536)|0)|0) + (($533*12)|0)|0);
     $535 = HEAP32[$534>>2]|0;
     $536 = $535 | $523;
     $537 = (((33704320 + (($502*1536)|0)|0) + (($521*12)|0)|0) + 4|0);
     $538 = HEAP32[$537>>2]|0;
     $539 = (((33579904 + (($502*1536)|0)|0) + (($533*12)|0)|0) + 4|0);
     $540 = HEAP32[$539>>2]|0;
     $541 = $540 | $538;
     $542 = (((33704320 + (($502*1536)|0)|0) + (($521*12)|0)|0) + 8|0);
     $543 = HEAP32[$542>>2]|0;
     $544 = (((33579904 + (($502*1536)|0)|0) + (($533*12)|0)|0) + 8|0);
     $545 = HEAP32[$544>>2]|0;
     $546 = $545 | $543;
     $547 = (33578928 + (($502*12)|0)|0);
     $548 = HEAP32[$547>>2]|0;
     $549 = $536 | $548;
     $550 = ((33578928 + (($502*12)|0)|0) + 4|0);
     $551 = HEAP32[$550>>2]|0;
     $552 = $541 | $551;
     $553 = ((33578928 + (($502*12)|0)|0) + 8|0);
     $554 = HEAP32[$553>>2]|0;
     $555 = $546 | $554;
     $556 = $549 & $141;
     $557 = $552 & $142;
     $558 = $555 & $143;
     $559 = $557 | $556;
     $560 = $559 | $558;
     $561 = ($560|0)==(0);
     if (!($561)) {
      $565 = ((220518304 + (($3*81)|0)|0) + ($502)|0);
      $566 = HEAP8[$565>>0]|0;
      $567 = ($566<<24>>24)==(0);
      if ($567) {
       $$0 = 1;
       label = 62;
       break;
      }
      $568 = $566&255;
      $569 = (_is_pinned_on_white_king($ptree,$502,$568)|0);
      $570 = ($569|0)==(0);
      if ($570) {
       $$0 = 1;
       label = 62;
       break;
      }
     }
     $562 = $508 | $511;
     $563 = $562 | $505;
     $564 = ($563|0)==(0);
     if ($564) {
      break L85;
     } else {
      $bb_piece$sroa$0$614 = $505;$bb_piece$sroa$1$613 = $508;$bb_piece$sroa$2$612 = $511;
     }
    }
    if ((label|0) == 62) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $571 = (($ptree) + 344|0);
  $572 = HEAP32[$571>>2]|0;
  $573 = (($ptree) + 348|0);
  $574 = HEAP32[$573>>2]|0;
  $575 = (($ptree) + 352|0);
  $576 = HEAP32[$575>>2]|0;
  $577 = $574 | $576;
  $578 = $577 | $572;
  $579 = ($578|0)==(0);
  L96: do {
   if (!($579)) {
    $bb_piece$sroa$0$78 = $572;$bb_piece$sroa$1$77 = $574;$bb_piece$sroa$2$76 = $576;
    while(1) {
     $580 = (_first_one012($bb_piece$sroa$0$78,$bb_piece$sroa$1$77,$bb_piece$sroa$2$76)|0);
     $581 = (34156304 + (($580*12)|0)|0);
     $582 = HEAP32[$581>>2]|0;
     $583 = $582 ^ $bb_piece$sroa$0$78;
     $584 = ((34156304 + (($580*12)|0)|0) + 4|0);
     $585 = HEAP32[$584>>2]|0;
     $586 = $585 ^ $bb_piece$sroa$1$77;
     $587 = ((34156304 + (($580*12)|0)|0) + 8|0);
     $588 = HEAP32[$587>>2]|0;
     $589 = $588 ^ $bb_piece$sroa$2$76;
     $590 = ((33572424 + ($580<<3)|0) + 2|0);
     $591 = HEAP8[$590>>0]|0;
     $592 = $591&255;
     $593 = ((($ptree) + ($592<<2)|0) + 32|0);
     $594 = HEAP32[$593>>2]|0;
     $595 = ((33572424 + ($580<<3)|0) + 3|0);
     $596 = HEAP8[$595>>0]|0;
     $597 = $596&255;
     $598 = $594 >>> $597;
     $599 = $598 & 127;
     $600 = ((33953152 + (($580*1536)|0)|0) + (($599*12)|0)|0);
     $601 = HEAP32[$600>>2]|0;
     $602 = (33572424 + ($580<<3)|0);
     $603 = HEAP8[$602>>0]|0;
     $604 = $603&255;
     $605 = ((($ptree) + ($604<<2)|0) + 8|0);
     $606 = HEAP32[$605>>2]|0;
     $607 = ((($ptree) + ($604<<2)|0) + 20|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = $608 | $606;
     $610 = ((33572424 + ($580<<3)|0) + 1|0);
     $611 = HEAP8[$610>>0]|0;
     $612 = $611&255;
     $613 = $609 >>> $612;
     $614 = $613 & 127;
     $615 = ((33828736 + (($580*1536)|0)|0) + (($614*12)|0)|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 | $601;
     $618 = (((33953152 + (($580*1536)|0)|0) + (($599*12)|0)|0) + 4|0);
     $619 = HEAP32[$618>>2]|0;
     $620 = (((33828736 + (($580*1536)|0)|0) + (($614*12)|0)|0) + 4|0);
     $621 = HEAP32[$620>>2]|0;
     $622 = $621 | $619;
     $623 = (((33953152 + (($580*1536)|0)|0) + (($599*12)|0)|0) + 8|0);
     $624 = HEAP32[$623>>2]|0;
     $625 = (((33828736 + (($580*1536)|0)|0) + (($614*12)|0)|0) + 8|0);
     $626 = HEAP32[$625>>2]|0;
     $627 = $626 | $624;
     $628 = (33578928 + (($580*12)|0)|0);
     $629 = HEAP32[$628>>2]|0;
     $630 = $617 | $629;
     $631 = ((33578928 + (($580*12)|0)|0) + 4|0);
     $632 = HEAP32[$631>>2]|0;
     $633 = $622 | $632;
     $634 = ((33578928 + (($580*12)|0)|0) + 8|0);
     $635 = HEAP32[$634>>2]|0;
     $636 = $627 | $635;
     $637 = $630 & $141;
     $638 = $633 & $142;
     $639 = $636 & $143;
     $640 = $638 | $637;
     $641 = $640 | $639;
     $642 = ($641|0)==(0);
     if (!($642)) {
      $646 = ((220518304 + (($3*81)|0)|0) + ($580)|0);
      $647 = HEAP8[$646>>0]|0;
      $648 = ($647<<24>>24)==(0);
      if ($648) {
       $$0 = 1;
       label = 62;
       break;
      }
      $649 = $647&255;
      $650 = (_is_pinned_on_white_king($ptree,$580,$649)|0);
      $651 = ($650|0)==(0);
      if ($651) {
       $$0 = 1;
       label = 62;
       break;
      }
     }
     $643 = $586 | $589;
     $644 = $643 | $583;
     $645 = ($644|0)==(0);
     if ($645) {
      break L96;
     } else {
      $bb_piece$sroa$0$78 = $583;$bb_piece$sroa$1$77 = $586;$bb_piece$sroa$2$76 = $589;
     }
    }
    if ((label|0) == 62) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $652 = $138 | $136;
  $653 = $652 | $140;
  $654 = ($653|0)==(0);
  if ($654) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $655 = (($ptree) + 504|0);
  $656 = HEAP32[$655>>2]|0;
  $657 = $656 & 2095104;
  $658 = ($657|0)==(0);
  if (!($658)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $659 = $140 & 134217216;
  $660 = $659 | $652;
  $661 = ($660|0)==(0);
  if ($661) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $662 = $656 & 224;
  $663 = ($662|0)==(0);
  if (!($663)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $664 = $656 & 1792;
  $665 = ($664|0)==(0);
  if (!($665)) {
   $666 = $140 & 133955584;
   $667 = $666 | $652;
   $668 = ($667|0)==(0);
   if (!($668)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $669 = $656 & 31;
  $670 = ($669|0)==(0);
  if ($670) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $671 = HEAP32[$144>>2]|0;
  $672 = HEAP32[$147>>2]|0;
  $673 = $672 | $671;
  $674 = HEAP32[$150>>2]|0;
  $675 = $673 | $674;
  $676 = $675 & 67240192;
  HEAP32[$ais_pawn>>2] = $676;
  $677 = $675 & 33620096;
  $678 = (($ais_pawn) + 4|0);
  HEAP32[$678>>2] = $677;
  $679 = $675 & 16810048;
  $680 = (($ais_pawn) + 8|0);
  HEAP32[$680>>2] = $679;
  $681 = $675 & 8405024;
  $682 = (($ais_pawn) + 12|0);
  HEAP32[$682>>2] = $681;
  $683 = $675 & 4202512;
  $684 = (($ais_pawn) + 16|0);
  HEAP32[$684>>2] = $683;
  $685 = $675 & 2101256;
  $686 = (($ais_pawn) + 20|0);
  HEAP32[$686>>2] = $685;
  $687 = $675 & 1050628;
  $688 = (($ais_pawn) + 24|0);
  HEAP32[$688>>2] = $687;
  $689 = $675 & 525314;
  $690 = (($ais_pawn) + 28|0);
  HEAP32[$690>>2] = $689;
  $691 = $675 & 262657;
  $692 = (($ais_pawn) + 32|0);
  HEAP32[$692>>2] = $691;
  $693 = $138 | $659;
  $694 = $693 | $136;
  $695 = ($694|0)==(0);
  if ($695) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $bb_target$sroa$0$03 = $136;$bb_target$sroa$1$02 = $138;$bb_target$sroa$2$01 = $659;
  }
  while(1) {
   $696 = (_first_one012($bb_target$sroa$0$03,$bb_target$sroa$1$02,$bb_target$sroa$2$01)|0);
   $697 = (34156304 + (($696*12)|0)|0);
   $698 = HEAP32[$697>>2]|0;
   $699 = $698 ^ $bb_target$sroa$0$03;
   $700 = ((34156304 + (($696*12)|0)|0) + 4|0);
   $701 = HEAP32[$700>>2]|0;
   $702 = $701 ^ $bb_target$sroa$1$02;
   $703 = ((34156304 + (($696*12)|0)|0) + 8|0);
   $704 = HEAP32[$703>>2]|0;
   $705 = $704 ^ $bb_target$sroa$2$01;
   $706 = (1248 + ($696)|0);
   $707 = HEAP8[$706>>0]|0;
   $708 = $707&255;
   $709 = (($ais_pawn) + ($708<<2)|0);
   $710 = HEAP32[$709>>2]|0;
   $711 = ($710|0)==(0);
   if ($711) {
    $715 = (($696) + 9)|0;
    $716 = ((($ptree) + ($715)|0) + 512|0);
    $717 = HEAP8[$716>>0]|0;
    $718 = ($717<<24>>24)==(8);
    if (!($718)) {
     $$0 = 1;
     label = 62;
     break;
    }
    $719 = (_is_mate_w_pawn_drop($ptree,$696)|0);
    $720 = ($719|0)==(0);
    if ($720) {
     $$0 = 1;
     label = 62;
     break;
    }
   }
   $712 = $702 | $705;
   $713 = $712 | $699;
   $714 = ($713|0)==(0);
   if ($714) {
    $$0 = 0;
    label = 62;
    break;
   } else {
    $bb_target$sroa$0$03 = $699;$bb_target$sroa$1$02 = $702;$bb_target$sroa$2$01 = $705;
   }
  }
  if ((label|0) == 62) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 62) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _b_gen_captures($ptree,$pmove) {
 $ptree = $ptree|0;
 $pmove = $pmove|0;
 var $$ = 0, $$$v = 0, $$0$lcssa = 0, $$0131 = 0, $$1$lcssa = 0, $$10$lcssa = 0, $$1061 = 0, $$1061$us = 0, $$11$lcssa = 0, $$1123 = 0, $$1152 = 0, $$12$lcssa = 0, $$1245 = 0, $$13$lcssa = 0, $$1336 = 0, $$14$lcssa = 0, $$1429 = 0, $$15$lcssa = 0, $$152 = 0, $$1520 = 0;
 var $$153 = 0, $$154 = 0, $$155 = 0, $$16$be = 0, $$16$lcssa = 0, $$1613 = 0, $$17$lcssa = 0, $$175 = 0, $$18$be = 0, $$18$lcssa = 0, $$181 = 0, $$2$lcssa = 0, $$2116 = 0, $$2116$us = 0, $$3 = 0, $$4$lcssa = 0, $$4107 = 0, $$5$lcssa = 0, $$5100 = 0, $$6$lcssa = 0;
 var $$691 = 0, $$7$lcssa = 0, $$783 = 0, $$8$lcssa = 0, $$877 = 0, $$877$us = 0, $$9$lcssa = 0, $$967 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bb_desti$sroa$0$0134 = 0, $bb_desti$sroa$0$1119 = 0, $bb_desti$sroa$0$1119$us = 0, $bb_desti$sroa$0$2103 = 0, $bb_desti$sroa$0$394 = 0, $bb_desti$sroa$0$480 = 0, $bb_desti$sroa$0$480$us = 0, $bb_desti$sroa$0$564 = 0, $bb_desti$sroa$0$564$us = 0, $bb_desti$sroa$0$648 = 0, $bb_desti$sroa$0$732 = 0, $bb_desti$sroa$0$816 = 0, $bb_desti$sroa$0$94 = 0, $bb_desti$sroa$1$0133 = 0, $bb_desti$sroa$1$1118 = 0, $bb_desti$sroa$1$1118$us = 0;
 var $bb_desti$sroa$1$2102 = 0, $bb_desti$sroa$1$393 = 0, $bb_desti$sroa$1$4$ph = 0, $bb_desti$sroa$1$479 = 0, $bb_desti$sroa$1$479$us = 0, $bb_desti$sroa$1$5$ph = 0, $bb_desti$sroa$1$563 = 0, $bb_desti$sroa$1$563$us = 0, $bb_desti$sroa$1$647 = 0, $bb_desti$sroa$1$731 = 0, $bb_desti$sroa$1$815 = 0, $bb_desti$sroa$1$93 = 0, $bb_desti$sroa$2$0132 = 0, $bb_desti$sroa$2$1117 = 0, $bb_desti$sroa$2$1117$us = 0, $bb_desti$sroa$2$2101 = 0, $bb_desti$sroa$2$392 = 0, $bb_desti$sroa$2$4$ph = 0, $bb_desti$sroa$2$478 = 0, $bb_desti$sroa$2$478$us = 0;
 var $bb_desti$sroa$2$5$ph = 0, $bb_desti$sroa$2$562 = 0, $bb_desti$sroa$2$562$us = 0, $bb_desti$sroa$2$646 = 0, $bb_desti$sroa$2$730 = 0, $bb_desti$sroa$2$814 = 0, $bb_desti$sroa$2$92 = 0, $bb_piece$sroa$0$0126 = 0, $bb_piece$sroa$0$1110 = 0, $bb_piece$sroa$0$286 = 0, $bb_piece$sroa$0$370 = 0, $bb_piece$sroa$0$455 = 0, $bb_piece$sroa$0$539 = 0, $bb_piece$sroa$0$623 = 0, $bb_piece$sroa$0$78 = 0, $bb_piece$sroa$1$0125 = 0, $bb_piece$sroa$1$1109 = 0, $bb_piece$sroa$1$285 = 0, $bb_piece$sroa$1$369 = 0, $bb_piece$sroa$1$454 = 0;
 var $bb_piece$sroa$1$538 = 0, $bb_piece$sroa$1$622 = 0, $bb_piece$sroa$1$77 = 0, $bb_piece$sroa$2$0124 = 0, $bb_piece$sroa$2$1108 = 0, $bb_piece$sroa$2$284 = 0, $bb_piece$sroa$2$368 = 0, $bb_piece$sroa$2$453 = 0, $bb_piece$sroa$2$537 = 0, $bb_piece$sroa$2$621 = 0, $bb_piece$sroa$2$76 = 0, $utemp$1 = 0, $utemp$1$v = 0, $utemp$2 = 0, $utemp$2$v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ptree) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ptree) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($ptree) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($ptree) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 ^ -1;
 $9 = (($ptree) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 ^ -1;
 $12 = (($ptree) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 ^ -1;
 $15 = (($ptree) + 164|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & $8;
 $18 = (($ptree) + 168|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & $3;
 $21 = (($ptree) + 172|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & $5;
 $24 = $20 | $23;
 $25 = $24 | $17;
 $26 = ($25|0)==(0);
 if ($26) {
  $$0$lcssa = $pmove;
 } else {
  $$0131 = $pmove;$bb_desti$sroa$0$0134 = $17;$bb_desti$sroa$1$0133 = $20;$bb_desti$sroa$2$0132 = $23;
  while(1) {
   $27 = (_last_one210($bb_desti$sroa$2$0132,$bb_desti$sroa$1$0133,$bb_desti$sroa$0$0134)|0);
   $28 = (34156304 + (($27*12)|0)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $29 ^ $bb_desti$sroa$0$0134;
   $31 = ((34156304 + (($27*12)|0)|0) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $32 ^ $bb_desti$sroa$1$0133;
   $34 = ((34156304 + (($27*12)|0)|0) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $35 ^ $bb_desti$sroa$2$0132;
   $37 = $27 << 7;
   $38 = (($37) + 1152)|0;
   $39 = $38 | $27;
   $40 = ((($ptree) + ($27)|0) + 512|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41 << 24 >> 24;
   $43 = (0 - ($42))|0;
   $44 = $43 << 19;
   $45 = ($27|0)<(27);
   $$$v = $45 ? 49152 : 32768;
   $46 = $39 | $$$v;
   $$ = $46 | $44;
   $47 = (($$0131) + 4|0);
   HEAP32[$$0131>>2] = $$;
   $48 = $33 | $36;
   $49 = $48 | $30;
   $50 = ($49|0)==(0);
   if ($50) {
    $$0$lcssa = $47;
    break;
   } else {
    $$0131 = $47;$bb_desti$sroa$0$0134 = $30;$bb_desti$sroa$1$0133 = $33;$bb_desti$sroa$2$0132 = $36;
   }
  }
 }
 $51 = (($ptree) + 236|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($ptree) + 240|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($ptree) + 244|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $54 | $56;
 $58 = $57 | $52;
 $59 = ($58|0)==(0);
 if ($59) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$1123 = $$0$lcssa;$bb_piece$sroa$0$0126 = $52;$bb_piece$sroa$1$0125 = $54;$bb_piece$sroa$2$0124 = $56;
  while(1) {
   $66 = (_last_one210($bb_piece$sroa$2$0124,$bb_piece$sroa$1$0125,$bb_piece$sroa$0$0126)|0);
   $67 = (34156304 + (($66*12)|0)|0);
   $68 = HEAP32[$67>>2]|0;
   $64 = $68 ^ $bb_piece$sroa$0$0126;
   $69 = ((34156304 + (($66*12)|0)|0) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   $61 = $70 ^ $bb_piece$sroa$1$0125;
   $71 = ((34156304 + (($66*12)|0)|0) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   $62 = $72 ^ $bb_piece$sroa$2$0124;
   $73 = (33574048 + (($66*12)|0)|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $74 & $1;
   $76 = ((33574048 + (($66*12)|0)|0) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $77 & $3;
   $79 = ((33574048 + (($66*12)|0)|0) + 8|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $80 & $5;
   $82 = $78 | $81;
   $83 = $82 | $75;
   $84 = ($83|0)==(0);
   L8: do {
    if ($84) {
     $$2$lcssa = $$1123;
    } else {
     $85 = $66 << 7;
     $86 = ($66|0)<(27);
     if ($86) {
      $$2116$us = $$1123;$bb_desti$sroa$0$1119$us = $75;$bb_desti$sroa$1$1118$us = $78;$bb_desti$sroa$2$1117$us = $81;
      while(1) {
       $87 = (_last_one210($bb_desti$sroa$2$1117$us,$bb_desti$sroa$1$1118$us,$bb_desti$sroa$0$1119$us)|0);
       $88 = (34156304 + (($87*12)|0)|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = $89 ^ $bb_desti$sroa$0$1119$us;
       $91 = ((34156304 + (($87*12)|0)|0) + 4|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = $92 ^ $bb_desti$sroa$1$1118$us;
       $94 = ((34156304 + (($87*12)|0)|0) + 8|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = $95 ^ $bb_desti$sroa$2$1117$us;
       $97 = $87 | $85;
       $98 = ((($ptree) + ($87)|0) + 512|0);
       $99 = HEAP8[$98>>0]|0;
       $100 = $99 << 24 >> 24;
       $101 = (0 - ($100))|0;
       $102 = $101 << 19;
       $103 = $97 | $102;
       $104 = $103 | 131072;
       $105 = $103 | 147456;
       $106 = (($$2116$us) + 4|0);
       HEAP32[$$2116$us>>2] = $105;
       $107 = (($$2116$us) + 8|0);
       HEAP32[$106>>2] = $104;
       $108 = $93 | $96;
       $109 = $108 | $90;
       $110 = ($109|0)==(0);
       if ($110) {
        $$2$lcssa = $107;
        break L8;
       } else {
        $$2116$us = $107;$bb_desti$sroa$0$1119$us = $90;$bb_desti$sroa$1$1118$us = $93;$bb_desti$sroa$2$1117$us = $96;
       }
      }
     } else {
      $$2116 = $$1123;$bb_desti$sroa$0$1119 = $75;$bb_desti$sroa$1$1118 = $78;$bb_desti$sroa$2$1117 = $81;
     }
     while(1) {
      $111 = (_last_one210($bb_desti$sroa$2$1117,$bb_desti$sroa$1$1118,$bb_desti$sroa$0$1119)|0);
      $112 = (34156304 + (($111*12)|0)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = $113 ^ $bb_desti$sroa$0$1119;
      $115 = ((34156304 + (($111*12)|0)|0) + 4|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = $116 ^ $bb_desti$sroa$1$1118;
      $118 = ((34156304 + (($111*12)|0)|0) + 8|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = $119 ^ $bb_desti$sroa$2$1117;
      $121 = $111 | $85;
      $122 = ((($ptree) + ($111)|0) + 512|0);
      $123 = HEAP8[$122>>0]|0;
      $124 = $123 << 24 >> 24;
      $125 = (0 - ($124))|0;
      $126 = $125 << 19;
      $127 = $121 | $126;
      $128 = $127 | 131072;
      $129 = ($111|0)<(27);
      if ($129) {
       $130 = $127 | 147456;
       $131 = (($$2116) + 4|0);
       HEAP32[$$2116>>2] = $130;
       $$3 = $131;
      } else {
       $$3 = $$2116;
      }
      $132 = (($$3) + 4|0);
      HEAP32[$$3>>2] = $128;
      $133 = $117 | $120;
      $134 = $133 | $114;
      $135 = ($134|0)==(0);
      if ($135) {
       $$2$lcssa = $132;
       break;
      } else {
       $$2116 = $132;$bb_desti$sroa$0$1119 = $114;$bb_desti$sroa$1$1118 = $117;$bb_desti$sroa$2$1117 = $120;
      }
     }
    }
   } while(0);
   $60 = $61 | $62;
   $63 = $60 | $64;
   $65 = ($63|0)==(0);
   if ($65) {
    $$1$lcssa = $$2$lcssa;
    break;
   } else {
    $$1123 = $$2$lcssa;$bb_piece$sroa$0$0126 = $64;$bb_piece$sroa$1$0125 = $61;$bb_piece$sroa$2$0124 = $62;
   }
  }
 }
 $136 = (($ptree) + 92|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = (($ptree) + 96|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = (($ptree) + 100|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = $139 | $141;
 $143 = $142 | $137;
 $144 = ($143|0)==(0);
 if ($144) {
  $$4$lcssa = $$1$lcssa;
 } else {
  $$4107 = $$1$lcssa;$bb_piece$sroa$0$1110 = $137;$bb_piece$sroa$1$1109 = $139;$bb_piece$sroa$2$1108 = $141;
  while(1) {
   $151 = (_last_one210($bb_piece$sroa$2$1108,$bb_piece$sroa$1$1109,$bb_piece$sroa$0$1110)|0);
   $152 = (34156304 + (($151*12)|0)|0);
   $153 = HEAP32[$152>>2]|0;
   $149 = $153 ^ $bb_piece$sroa$0$1110;
   $154 = ((34156304 + (($151*12)|0)|0) + 4|0);
   $155 = HEAP32[$154>>2]|0;
   $146 = $155 ^ $bb_piece$sroa$1$1109;
   $156 = ((34156304 + (($151*12)|0)|0) + 8|0);
   $157 = HEAP32[$156>>2]|0;
   $147 = $157 ^ $bb_piece$sroa$2$1108;
   $158 = (33575024 + (($151*12)|0)|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = $159 & $1;
   $161 = ((33575024 + (($151*12)|0)|0) + 4|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = $162 & $3;
   $164 = ((33575024 + (($151*12)|0)|0) + 8|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = $165 & $5;
   $167 = $163 | $166;
   $168 = $167 | $160;
   $169 = ($168|0)==(0);
   if ($169) {
    $$5$lcssa = $$4107;
   } else {
    $170 = $151 << 7;
    $171 = ((($ptree) + ($151)|0) + 512|0);
    $$5100 = $$4107;$bb_desti$sroa$0$2103 = $160;$bb_desti$sroa$1$2102 = $163;$bb_desti$sroa$2$2101 = $166;
    while(1) {
     $172 = (_last_one210($bb_desti$sroa$2$2101,$bb_desti$sroa$1$2102,$bb_desti$sroa$0$2103)|0);
     $173 = (34156304 + (($172*12)|0)|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = $174 ^ $bb_desti$sroa$0$2103;
     $176 = ((34156304 + (($172*12)|0)|0) + 4|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = $177 ^ $bb_desti$sroa$1$2102;
     $179 = ((34156304 + (($172*12)|0)|0) + 8|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = $180 ^ $bb_desti$sroa$2$2101;
     $182 = $172 | $170;
     $183 = ((($ptree) + ($172)|0) + 512|0);
     $184 = HEAP8[$183>>0]|0;
     $185 = $184 << 24 >> 24;
     $186 = (0 - ($185))|0;
     $187 = $186 << 19;
     $188 = $182 | $187;
     $189 = HEAP8[$171>>0]|0;
     $190 = $189 << 24 >> 24;
     $191 = $190 << 15;
     $192 = $188 | $191;
     $193 = (($$5100) + 4|0);
     HEAP32[$$5100>>2] = $192;
     $194 = $178 | $181;
     $195 = $194 | $175;
     $196 = ($195|0)==(0);
     if ($196) {
      $$5$lcssa = $193;
      break;
     } else {
      $$5100 = $193;$bb_desti$sroa$0$2103 = $175;$bb_desti$sroa$1$2102 = $178;$bb_desti$sroa$2$2101 = $181;
     }
    }
   }
   $145 = $146 | $147;
   $148 = $145 | $149;
   $150 = ($148|0)==(0);
   if ($150) {
    $$4$lcssa = $$5$lcssa;
    break;
   } else {
    $$4107 = $$5$lcssa;$bb_piece$sroa$0$1110 = $149;$bb_piece$sroa$1$1109 = $146;$bb_piece$sroa$2$1108 = $147;
   }
  }
 }
 $197 = (($ptree) + 593|0);
 $198 = HEAP8[$197>>0]|0;
 $199 = $198&255;
 $200 = (33578928 + (($199*12)|0)|0);
 $201 = HEAP32[$200>>2]|0;
 $202 = $201 & $1;
 $203 = ((33578928 + (($199*12)|0)|0) + 4|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = $204 & $3;
 $206 = ((33578928 + (($199*12)|0)|0) + 8|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = $207 & $5;
 $209 = $205 | $208;
 $210 = $209 | $202;
 $211 = ($210|0)==(0);
 if ($211) {
  $$6$lcssa = $$4$lcssa;
 } else {
  $212 = $199 << 7;
  $$691 = $$4$lcssa;$bb_desti$sroa$0$394 = $202;$bb_desti$sroa$1$393 = $205;$bb_desti$sroa$2$392 = $208;
  while(1) {
   $213 = (_last_one210($bb_desti$sroa$2$392,$bb_desti$sroa$1$393,$bb_desti$sroa$0$394)|0);
   $214 = (34156304 + (($213*12)|0)|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = $215 ^ $bb_desti$sroa$0$394;
   $217 = ((34156304 + (($213*12)|0)|0) + 4|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = $218 ^ $bb_desti$sroa$1$393;
   $220 = ((34156304 + (($213*12)|0)|0) + 8|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = $221 ^ $bb_desti$sroa$2$392;
   $223 = ((($ptree) + ($213)|0) + 512|0);
   $224 = HEAP8[$223>>0]|0;
   $225 = $224 << 24 >> 24;
   $226 = (0 - ($225))|0;
   $227 = $226 << 19;
   $228 = $212 | $213;
   $229 = $228 | $227;
   $230 = $229 | 262144;
   $231 = (($$691) + 4|0);
   HEAP32[$$691>>2] = $230;
   $232 = $219 | $222;
   $233 = $232 | $216;
   $234 = ($233|0)==(0);
   if ($234) {
    $$6$lcssa = $231;
    break;
   } else {
    $$691 = $231;$bb_desti$sroa$0$394 = $216;$bb_desti$sroa$1$393 = $219;$bb_desti$sroa$2$392 = $222;
   }
  }
 }
 $235 = (($ptree) + 260|0);
 $236 = HEAP32[$235>>2]|0;
 $237 = (($ptree) + 264|0);
 $238 = HEAP32[$237>>2]|0;
 $239 = (($ptree) + 268|0);
 $240 = HEAP32[$239>>2]|0;
 $241 = $238 | $240;
 $242 = $241 | $236;
 $243 = ($242|0)==(0);
 if ($243) {
  $$7$lcssa = $$6$lcssa;
 } else {
  $$783 = $$6$lcssa;$bb_piece$sroa$0$286 = $236;$bb_piece$sroa$1$285 = $238;$bb_piece$sroa$2$284 = $240;
  while(1) {
   $250 = (_last_one210($bb_piece$sroa$2$284,$bb_piece$sroa$1$285,$bb_piece$sroa$0$286)|0);
   $251 = (34156304 + (($250*12)|0)|0);
   $252 = HEAP32[$251>>2]|0;
   $248 = $252 ^ $bb_piece$sroa$0$286;
   $253 = ((34156304 + (($250*12)|0)|0) + 4|0);
   $254 = HEAP32[$253>>2]|0;
   $245 = $254 ^ $bb_piece$sroa$1$285;
   $255 = ((34156304 + (($250*12)|0)|0) + 8|0);
   $256 = HEAP32[$255>>2]|0;
   $246 = $256 ^ $bb_piece$sroa$2$284;
   $257 = ((33572424 + ($250<<3)|0) + 6|0);
   $258 = HEAP8[$257>>0]|0;
   $259 = $258&255;
   $260 = ((($ptree) + ($259<<2)|0) + 56|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = ((33572424 + ($250<<3)|0) + 7|0);
   $263 = HEAP8[$262>>0]|0;
   $264 = $263&255;
   $265 = $261 >>> $264;
   $266 = $265 & 127;
   $267 = ((33704320 + (($250*1536)|0)|0) + (($266*12)|0)|0);
   $268 = HEAP32[$267>>2]|0;
   $269 = ((33572424 + ($250<<3)|0) + 4|0);
   $270 = HEAP8[$269>>0]|0;
   $271 = $270&255;
   $272 = ((($ptree) + ($271<<2)|0) + 44|0);
   $273 = HEAP32[$272>>2]|0;
   $274 = ((33572424 + ($250<<3)|0) + 5|0);
   $275 = HEAP8[$274>>0]|0;
   $276 = $275&255;
   $277 = $273 >>> $276;
   $278 = $277 & 127;
   $279 = ((33579904 + (($250*1536)|0)|0) + (($278*12)|0)|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = $280 | $268;
   $282 = (((33704320 + (($250*1536)|0)|0) + (($266*12)|0)|0) + 4|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = (((33579904 + (($250*1536)|0)|0) + (($278*12)|0)|0) + 4|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = $285 | $283;
   $287 = (((33704320 + (($250*1536)|0)|0) + (($266*12)|0)|0) + 8|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = (((33579904 + (($250*1536)|0)|0) + (($278*12)|0)|0) + 8|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = $290 | $288;
   $292 = $281 & $8;
   $293 = ($250|0)<(27);
   $$152 = $293 ? $14 : $5;
   $$153 = $293 ? $11 : $3;
   $bb_desti$sroa$1$4$ph = $286 & $$153;
   $bb_desti$sroa$2$4$ph = $291 & $$152;
   $294 = $bb_desti$sroa$1$4$ph | $bb_desti$sroa$2$4$ph;
   $295 = $294 | $292;
   $296 = ($295|0)==(0);
   if ($296) {
    $$8$lcssa = $$783;
   } else {
    $297 = $250 << 7;
    if ($293) {
     $$877$us = $$783;$bb_desti$sroa$0$480$us = $292;$bb_desti$sroa$1$479$us = $bb_desti$sroa$1$4$ph;$bb_desti$sroa$2$478$us = $bb_desti$sroa$2$4$ph;
     while(1) {
      $298 = (_last_one210($bb_desti$sroa$2$478$us,$bb_desti$sroa$1$479$us,$bb_desti$sroa$0$480$us)|0);
      $299 = (34156304 + (($298*12)|0)|0);
      $300 = HEAP32[$299>>2]|0;
      $301 = $300 ^ $bb_desti$sroa$0$480$us;
      $302 = ((34156304 + (($298*12)|0)|0) + 4|0);
      $303 = HEAP32[$302>>2]|0;
      $304 = $303 ^ $bb_desti$sroa$1$479$us;
      $305 = ((34156304 + (($298*12)|0)|0) + 8|0);
      $306 = HEAP32[$305>>2]|0;
      $307 = $306 ^ $bb_desti$sroa$2$478$us;
      $308 = $298 | $297;
      $309 = ((($ptree) + ($298)|0) + 512|0);
      $310 = HEAP8[$309>>0]|0;
      $311 = $310 << 24 >> 24;
      $312 = (0 - ($311))|0;
      $313 = $312 << 19;
      $314 = $308 | $313;
      $315 = $314 | 212992;
      $316 = (($$877$us) + 4|0);
      HEAP32[$$877$us>>2] = $315;
      $317 = $304 | $307;
      $318 = $317 | $301;
      $319 = ($318|0)==(0);
      if ($319) {
       $$8$lcssa = $316;
       break;
      } else {
       $$877$us = $316;$bb_desti$sroa$0$480$us = $301;$bb_desti$sroa$1$479$us = $304;$bb_desti$sroa$2$478$us = $307;
      }
     }
    } else {
     $$877 = $$783;$bb_desti$sroa$0$480 = $292;$bb_desti$sroa$1$479 = $bb_desti$sroa$1$4$ph;$bb_desti$sroa$2$478 = $bb_desti$sroa$2$4$ph;
     while(1) {
      $320 = (_last_one210($bb_desti$sroa$2$478,$bb_desti$sroa$1$479,$bb_desti$sroa$0$480)|0);
      $321 = (34156304 + (($320*12)|0)|0);
      $322 = HEAP32[$321>>2]|0;
      $323 = $322 ^ $bb_desti$sroa$0$480;
      $324 = ((34156304 + (($320*12)|0)|0) + 4|0);
      $325 = HEAP32[$324>>2]|0;
      $326 = $325 ^ $bb_desti$sroa$1$479;
      $327 = ((34156304 + (($320*12)|0)|0) + 8|0);
      $328 = HEAP32[$327>>2]|0;
      $329 = $328 ^ $bb_desti$sroa$2$478;
      $330 = $320 | $297;
      $331 = ((($ptree) + ($320)|0) + 512|0);
      $332 = HEAP8[$331>>0]|0;
      $333 = $332 << 24 >> 24;
      $334 = (0 - ($333))|0;
      $335 = $334 << 19;
      $336 = $330 | $335;
      $337 = ($320|0)<(27);
      $utemp$1$v = $337 ? 212992 : 196608;
      $utemp$1 = $336 | $utemp$1$v;
      $338 = (($$877) + 4|0);
      HEAP32[$$877>>2] = $utemp$1;
      $339 = $326 | $329;
      $340 = $339 | $323;
      $341 = ($340|0)==(0);
      if ($341) {
       $$8$lcssa = $338;
       break;
      } else {
       $$877 = $338;$bb_desti$sroa$0$480 = $323;$bb_desti$sroa$1$479 = $326;$bb_desti$sroa$2$478 = $329;
      }
     }
    }
   }
   $244 = $245 | $246;
   $247 = $244 | $248;
   $249 = ($247|0)==(0);
   if ($249) {
    $$7$lcssa = $$8$lcssa;
    break;
   } else {
    $$783 = $$8$lcssa;$bb_piece$sroa$0$286 = $248;$bb_piece$sroa$1$285 = $245;$bb_piece$sroa$2$284 = $246;
   }
  }
 }
 $342 = (($ptree) + 284|0);
 $343 = HEAP32[$342>>2]|0;
 $344 = (($ptree) + 288|0);
 $345 = HEAP32[$344>>2]|0;
 $346 = (($ptree) + 292|0);
 $347 = HEAP32[$346>>2]|0;
 $348 = $345 | $347;
 $349 = $348 | $343;
 $350 = ($349|0)==(0);
 if ($350) {
  $$9$lcssa = $$7$lcssa;
 } else {
  $$967 = $$7$lcssa;$bb_piece$sroa$0$370 = $343;$bb_piece$sroa$1$369 = $345;$bb_piece$sroa$2$368 = $347;
  while(1) {
   $357 = (_last_one210($bb_piece$sroa$2$368,$bb_piece$sroa$1$369,$bb_piece$sroa$0$370)|0);
   $358 = (34156304 + (($357*12)|0)|0);
   $359 = HEAP32[$358>>2]|0;
   $355 = $359 ^ $bb_piece$sroa$0$370;
   $360 = ((34156304 + (($357*12)|0)|0) + 4|0);
   $361 = HEAP32[$360>>2]|0;
   $352 = $361 ^ $bb_piece$sroa$1$369;
   $362 = ((34156304 + (($357*12)|0)|0) + 8|0);
   $363 = HEAP32[$362>>2]|0;
   $353 = $363 ^ $bb_piece$sroa$2$368;
   $364 = ((33572424 + ($357<<3)|0) + 2|0);
   $365 = HEAP8[$364>>0]|0;
   $366 = $365&255;
   $367 = ((($ptree) + ($366<<2)|0) + 32|0);
   $368 = HEAP32[$367>>2]|0;
   $369 = ((33572424 + ($357<<3)|0) + 3|0);
   $370 = HEAP8[$369>>0]|0;
   $371 = $370&255;
   $372 = $368 >>> $371;
   $373 = $372 & 127;
   $374 = ((33953152 + (($357*1536)|0)|0) + (($373*12)|0)|0);
   $375 = HEAP32[$374>>2]|0;
   $376 = (33572424 + ($357<<3)|0);
   $377 = HEAP8[$376>>0]|0;
   $378 = $377&255;
   $379 = ((($ptree) + ($378<<2)|0) + 8|0);
   $380 = HEAP32[$379>>2]|0;
   $381 = ((($ptree) + ($378<<2)|0) + 20|0);
   $382 = HEAP32[$381>>2]|0;
   $383 = $382 | $380;
   $384 = ((33572424 + ($357<<3)|0) + 1|0);
   $385 = HEAP8[$384>>0]|0;
   $386 = $385&255;
   $387 = $383 >>> $386;
   $388 = $387 & 127;
   $389 = ((33828736 + (($357*1536)|0)|0) + (($388*12)|0)|0);
   $390 = HEAP32[$389>>2]|0;
   $391 = $390 | $375;
   $392 = (((33953152 + (($357*1536)|0)|0) + (($373*12)|0)|0) + 4|0);
   $393 = HEAP32[$392>>2]|0;
   $394 = (((33828736 + (($357*1536)|0)|0) + (($388*12)|0)|0) + 4|0);
   $395 = HEAP32[$394>>2]|0;
   $396 = $395 | $393;
   $397 = (((33953152 + (($357*1536)|0)|0) + (($373*12)|0)|0) + 8|0);
   $398 = HEAP32[$397>>2]|0;
   $399 = (((33828736 + (($357*1536)|0)|0) + (($388*12)|0)|0) + 8|0);
   $400 = HEAP32[$399>>2]|0;
   $401 = $400 | $398;
   $402 = $391 & $8;
   $403 = ($357|0)<(27);
   $$154 = $403 ? $14 : $5;
   $$155 = $403 ? $11 : $3;
   $bb_desti$sroa$1$5$ph = $396 & $$155;
   $bb_desti$sroa$2$5$ph = $401 & $$154;
   $404 = $bb_desti$sroa$1$5$ph | $bb_desti$sroa$2$5$ph;
   $405 = $404 | $402;
   $406 = ($405|0)==(0);
   if ($406) {
    $$10$lcssa = $$967;
   } else {
    $407 = $357 << 7;
    if ($403) {
     $$1061$us = $$967;$bb_desti$sroa$0$564$us = $402;$bb_desti$sroa$1$563$us = $bb_desti$sroa$1$5$ph;$bb_desti$sroa$2$562$us = $bb_desti$sroa$2$5$ph;
     while(1) {
      $408 = (_last_one210($bb_desti$sroa$2$562$us,$bb_desti$sroa$1$563$us,$bb_desti$sroa$0$564$us)|0);
      $409 = (34156304 + (($408*12)|0)|0);
      $410 = HEAP32[$409>>2]|0;
      $411 = $410 ^ $bb_desti$sroa$0$564$us;
      $412 = ((34156304 + (($408*12)|0)|0) + 4|0);
      $413 = HEAP32[$412>>2]|0;
      $414 = $413 ^ $bb_desti$sroa$1$563$us;
      $415 = ((34156304 + (($408*12)|0)|0) + 8|0);
      $416 = HEAP32[$415>>2]|0;
      $417 = $416 ^ $bb_desti$sroa$2$562$us;
      $418 = $408 | $407;
      $419 = ((($ptree) + ($408)|0) + 512|0);
      $420 = HEAP8[$419>>0]|0;
      $421 = $420 << 24 >> 24;
      $422 = (0 - ($421))|0;
      $423 = $422 << 19;
      $424 = $418 | $423;
      $425 = $424 | 245760;
      $426 = (($$1061$us) + 4|0);
      HEAP32[$$1061$us>>2] = $425;
      $427 = $414 | $417;
      $428 = $427 | $411;
      $429 = ($428|0)==(0);
      if ($429) {
       $$10$lcssa = $426;
       break;
      } else {
       $$1061$us = $426;$bb_desti$sroa$0$564$us = $411;$bb_desti$sroa$1$563$us = $414;$bb_desti$sroa$2$562$us = $417;
      }
     }
    } else {
     $$1061 = $$967;$bb_desti$sroa$0$564 = $402;$bb_desti$sroa$1$563 = $bb_desti$sroa$1$5$ph;$bb_desti$sroa$2$562 = $bb_desti$sroa$2$5$ph;
     while(1) {
      $430 = (_last_one210($bb_desti$sroa$2$562,$bb_desti$sroa$1$563,$bb_desti$sroa$0$564)|0);
      $431 = (34156304 + (($430*12)|0)|0);
      $432 = HEAP32[$431>>2]|0;
      $433 = $432 ^ $bb_desti$sroa$0$564;
      $434 = ((34156304 + (($430*12)|0)|0) + 4|0);
      $435 = HEAP32[$434>>2]|0;
      $436 = $435 ^ $bb_desti$sroa$1$563;
      $437 = ((34156304 + (($430*12)|0)|0) + 8|0);
      $438 = HEAP32[$437>>2]|0;
      $439 = $438 ^ $bb_desti$sroa$2$562;
      $440 = $430 | $407;
      $441 = ((($ptree) + ($430)|0) + 512|0);
      $442 = HEAP8[$441>>0]|0;
      $443 = $442 << 24 >> 24;
      $444 = (0 - ($443))|0;
      $445 = $444 << 19;
      $446 = $440 | $445;
      $447 = ($430|0)<(27);
      $utemp$2$v = $447 ? 245760 : 229376;
      $utemp$2 = $446 | $utemp$2$v;
      $448 = (($$1061) + 4|0);
      HEAP32[$$1061>>2] = $utemp$2;
      $449 = $436 | $439;
      $450 = $449 | $433;
      $451 = ($450|0)==(0);
      if ($451) {
       $$10$lcssa = $448;
       break;
      } else {
       $$1061 = $448;$bb_desti$sroa$0$564 = $433;$bb_desti$sroa$1$563 = $436;$bb_desti$sroa$2$562 = $439;
      }
     }
    }
   }
   $351 = $352 | $353;
   $354 = $351 | $355;
   $356 = ($354|0)==(0);
   if ($356) {
    $$9$lcssa = $$10$lcssa;
    break;
   } else {
    $$967 = $$10$lcssa;$bb_piece$sroa$0$370 = $355;$bb_piece$sroa$1$369 = $352;$bb_piece$sroa$2$368 = $353;
   }
  }
 }
 $452 = (($ptree) + 308|0);
 $453 = HEAP32[$452>>2]|0;
 $454 = (($ptree) + 312|0);
 $455 = HEAP32[$454>>2]|0;
 $456 = (($ptree) + 316|0);
 $457 = HEAP32[$456>>2]|0;
 $458 = $455 | $457;
 $459 = $458 | $453;
 $460 = ($459|0)==(0);
 if ($460) {
  $$11$lcssa = $$9$lcssa;
 } else {
  $$1152 = $$9$lcssa;$bb_piece$sroa$0$455 = $453;$bb_piece$sroa$1$454 = $455;$bb_piece$sroa$2$453 = $457;
  while(1) {
   $467 = (_last_one210($bb_piece$sroa$2$453,$bb_piece$sroa$1$454,$bb_piece$sroa$0$455)|0);
   $468 = (34156304 + (($467*12)|0)|0);
   $469 = HEAP32[$468>>2]|0;
   $465 = $469 ^ $bb_piece$sroa$0$455;
   $470 = ((34156304 + (($467*12)|0)|0) + 4|0);
   $471 = HEAP32[$470>>2]|0;
   $462 = $471 ^ $bb_piece$sroa$1$454;
   $472 = ((34156304 + (($467*12)|0)|0) + 8|0);
   $473 = HEAP32[$472>>2]|0;
   $463 = $473 ^ $bb_piece$sroa$2$453;
   $474 = ((33572424 + ($467<<3)|0) + 6|0);
   $475 = HEAP8[$474>>0]|0;
   $476 = $475&255;
   $477 = ((($ptree) + ($476<<2)|0) + 56|0);
   $478 = HEAP32[$477>>2]|0;
   $479 = ((33572424 + ($467<<3)|0) + 7|0);
   $480 = HEAP8[$479>>0]|0;
   $481 = $480&255;
   $482 = $478 >>> $481;
   $483 = $482 & 127;
   $484 = ((33704320 + (($467*1536)|0)|0) + (($483*12)|0)|0);
   $485 = HEAP32[$484>>2]|0;
   $486 = ((33572424 + ($467<<3)|0) + 4|0);
   $487 = HEAP8[$486>>0]|0;
   $488 = $487&255;
   $489 = ((($ptree) + ($488<<2)|0) + 44|0);
   $490 = HEAP32[$489>>2]|0;
   $491 = ((33572424 + ($467<<3)|0) + 5|0);
   $492 = HEAP8[$491>>0]|0;
   $493 = $492&255;
   $494 = $490 >>> $493;
   $495 = $494 & 127;
   $496 = ((33579904 + (($467*1536)|0)|0) + (($495*12)|0)|0);
   $497 = HEAP32[$496>>2]|0;
   $498 = $497 | $485;
   $499 = (((33704320 + (($467*1536)|0)|0) + (($483*12)|0)|0) + 4|0);
   $500 = HEAP32[$499>>2]|0;
   $501 = (((33579904 + (($467*1536)|0)|0) + (($495*12)|0)|0) + 4|0);
   $502 = HEAP32[$501>>2]|0;
   $503 = $502 | $500;
   $504 = (((33704320 + (($467*1536)|0)|0) + (($483*12)|0)|0) + 8|0);
   $505 = HEAP32[$504>>2]|0;
   $506 = (((33579904 + (($467*1536)|0)|0) + (($495*12)|0)|0) + 8|0);
   $507 = HEAP32[$506>>2]|0;
   $508 = $507 | $505;
   $509 = (33578928 + (($467*12)|0)|0);
   $510 = HEAP32[$509>>2]|0;
   $511 = $498 | $510;
   $512 = ((33578928 + (($467*12)|0)|0) + 4|0);
   $513 = HEAP32[$512>>2]|0;
   $514 = $503 | $513;
   $515 = ((33578928 + (($467*12)|0)|0) + 8|0);
   $516 = HEAP32[$515>>2]|0;
   $517 = $508 | $516;
   $518 = $511 & $1;
   $519 = $514 & $3;
   $520 = $517 & $5;
   $521 = $519 | $520;
   $522 = $521 | $518;
   $523 = ($522|0)==(0);
   if ($523) {
    $$12$lcssa = $$1152;
   } else {
    $524 = $467 << 7;
    $$1245 = $$1152;$bb_desti$sroa$0$648 = $518;$bb_desti$sroa$1$647 = $519;$bb_desti$sroa$2$646 = $520;
    while(1) {
     $525 = (_last_one210($bb_desti$sroa$2$646,$bb_desti$sroa$1$647,$bb_desti$sroa$0$648)|0);
     $526 = (34156304 + (($525*12)|0)|0);
     $527 = HEAP32[$526>>2]|0;
     $528 = $527 ^ $bb_desti$sroa$0$648;
     $529 = ((34156304 + (($525*12)|0)|0) + 4|0);
     $530 = HEAP32[$529>>2]|0;
     $531 = $530 ^ $bb_desti$sroa$1$647;
     $532 = ((34156304 + (($525*12)|0)|0) + 8|0);
     $533 = HEAP32[$532>>2]|0;
     $534 = $533 ^ $bb_desti$sroa$2$646;
     $535 = ((($ptree) + ($525)|0) + 512|0);
     $536 = HEAP8[$535>>0]|0;
     $537 = $536 << 24 >> 24;
     $538 = (0 - ($537))|0;
     $539 = $538 << 19;
     $540 = $524 | $525;
     $541 = $540 | $539;
     $542 = $541 | 458752;
     $543 = (($$1245) + 4|0);
     HEAP32[$$1245>>2] = $542;
     $544 = $531 | $534;
     $545 = $544 | $528;
     $546 = ($545|0)==(0);
     if ($546) {
      $$12$lcssa = $543;
      break;
     } else {
      $$1245 = $543;$bb_desti$sroa$0$648 = $528;$bb_desti$sroa$1$647 = $531;$bb_desti$sroa$2$646 = $534;
     }
    }
   }
   $461 = $462 | $463;
   $464 = $461 | $465;
   $466 = ($464|0)==(0);
   if ($466) {
    $$11$lcssa = $$12$lcssa;
    break;
   } else {
    $$1152 = $$12$lcssa;$bb_piece$sroa$0$455 = $465;$bb_piece$sroa$1$454 = $462;$bb_piece$sroa$2$453 = $463;
   }
  }
 }
 $547 = (($ptree) + 332|0);
 $548 = HEAP32[$547>>2]|0;
 $549 = (($ptree) + 336|0);
 $550 = HEAP32[$549>>2]|0;
 $551 = (($ptree) + 340|0);
 $552 = HEAP32[$551>>2]|0;
 $553 = $550 | $552;
 $554 = $553 | $548;
 $555 = ($554|0)==(0);
 if ($555) {
  $$13$lcssa = $$11$lcssa;
 } else {
  $$1336 = $$11$lcssa;$bb_piece$sroa$0$539 = $548;$bb_piece$sroa$1$538 = $550;$bb_piece$sroa$2$537 = $552;
  while(1) {
   $562 = (_last_one210($bb_piece$sroa$2$537,$bb_piece$sroa$1$538,$bb_piece$sroa$0$539)|0);
   $563 = (34156304 + (($562*12)|0)|0);
   $564 = HEAP32[$563>>2]|0;
   $560 = $564 ^ $bb_piece$sroa$0$539;
   $565 = ((34156304 + (($562*12)|0)|0) + 4|0);
   $566 = HEAP32[$565>>2]|0;
   $557 = $566 ^ $bb_piece$sroa$1$538;
   $567 = ((34156304 + (($562*12)|0)|0) + 8|0);
   $568 = HEAP32[$567>>2]|0;
   $558 = $568 ^ $bb_piece$sroa$2$537;
   $569 = ((33572424 + ($562<<3)|0) + 2|0);
   $570 = HEAP8[$569>>0]|0;
   $571 = $570&255;
   $572 = ((($ptree) + ($571<<2)|0) + 32|0);
   $573 = HEAP32[$572>>2]|0;
   $574 = ((33572424 + ($562<<3)|0) + 3|0);
   $575 = HEAP8[$574>>0]|0;
   $576 = $575&255;
   $577 = $573 >>> $576;
   $578 = $577 & 127;
   $579 = ((33953152 + (($562*1536)|0)|0) + (($578*12)|0)|0);
   $580 = HEAP32[$579>>2]|0;
   $581 = (33572424 + ($562<<3)|0);
   $582 = HEAP8[$581>>0]|0;
   $583 = $582&255;
   $584 = ((($ptree) + ($583<<2)|0) + 8|0);
   $585 = HEAP32[$584>>2]|0;
   $586 = ((($ptree) + ($583<<2)|0) + 20|0);
   $587 = HEAP32[$586>>2]|0;
   $588 = $587 | $585;
   $589 = ((33572424 + ($562<<3)|0) + 1|0);
   $590 = HEAP8[$589>>0]|0;
   $591 = $590&255;
   $592 = $588 >>> $591;
   $593 = $592 & 127;
   $594 = ((33828736 + (($562*1536)|0)|0) + (($593*12)|0)|0);
   $595 = HEAP32[$594>>2]|0;
   $596 = $595 | $580;
   $597 = (((33953152 + (($562*1536)|0)|0) + (($578*12)|0)|0) + 4|0);
   $598 = HEAP32[$597>>2]|0;
   $599 = (((33828736 + (($562*1536)|0)|0) + (($593*12)|0)|0) + 4|0);
   $600 = HEAP32[$599>>2]|0;
   $601 = $600 | $598;
   $602 = (((33953152 + (($562*1536)|0)|0) + (($578*12)|0)|0) + 8|0);
   $603 = HEAP32[$602>>2]|0;
   $604 = (((33828736 + (($562*1536)|0)|0) + (($593*12)|0)|0) + 8|0);
   $605 = HEAP32[$604>>2]|0;
   $606 = $605 | $603;
   $607 = (33578928 + (($562*12)|0)|0);
   $608 = HEAP32[$607>>2]|0;
   $609 = $596 | $608;
   $610 = ((33578928 + (($562*12)|0)|0) + 4|0);
   $611 = HEAP32[$610>>2]|0;
   $612 = $601 | $611;
   $613 = ((33578928 + (($562*12)|0)|0) + 8|0);
   $614 = HEAP32[$613>>2]|0;
   $615 = $606 | $614;
   $616 = $609 & $1;
   $617 = $612 & $3;
   $618 = $615 & $5;
   $619 = $617 | $618;
   $620 = $619 | $616;
   $621 = ($620|0)==(0);
   if ($621) {
    $$14$lcssa = $$1336;
   } else {
    $622 = $562 << 7;
    $$1429 = $$1336;$bb_desti$sroa$0$732 = $616;$bb_desti$sroa$1$731 = $617;$bb_desti$sroa$2$730 = $618;
    while(1) {
     $623 = (_last_one210($bb_desti$sroa$2$730,$bb_desti$sroa$1$731,$bb_desti$sroa$0$732)|0);
     $624 = (34156304 + (($623*12)|0)|0);
     $625 = HEAP32[$624>>2]|0;
     $626 = $625 ^ $bb_desti$sroa$0$732;
     $627 = ((34156304 + (($623*12)|0)|0) + 4|0);
     $628 = HEAP32[$627>>2]|0;
     $629 = $628 ^ $bb_desti$sroa$1$731;
     $630 = ((34156304 + (($623*12)|0)|0) + 8|0);
     $631 = HEAP32[$630>>2]|0;
     $632 = $631 ^ $bb_desti$sroa$2$730;
     $633 = ((($ptree) + ($623)|0) + 512|0);
     $634 = HEAP8[$633>>0]|0;
     $635 = $634 << 24 >> 24;
     $636 = (0 - ($635))|0;
     $637 = $636 << 19;
     $638 = $622 | $623;
     $639 = $638 | $637;
     $640 = $639 | 491520;
     $641 = (($$1429) + 4|0);
     HEAP32[$$1429>>2] = $640;
     $642 = $629 | $632;
     $643 = $642 | $626;
     $644 = ($643|0)==(0);
     if ($644) {
      $$14$lcssa = $641;
      break;
     } else {
      $$1429 = $641;$bb_desti$sroa$0$732 = $626;$bb_desti$sroa$1$731 = $629;$bb_desti$sroa$2$730 = $632;
     }
    }
   }
   $556 = $557 | $558;
   $559 = $556 | $560;
   $561 = ($559|0)==(0);
   if ($561) {
    $$13$lcssa = $$14$lcssa;
    break;
   } else {
    $$1336 = $$14$lcssa;$bb_piece$sroa$0$539 = $560;$bb_piece$sroa$1$538 = $557;$bb_piece$sroa$2$537 = $558;
   }
  }
 }
 $645 = (($ptree) + 188|0);
 $646 = HEAP32[$645>>2]|0;
 $647 = (($ptree) + 192|0);
 $648 = HEAP32[$647>>2]|0;
 $649 = (($ptree) + 196|0);
 $650 = HEAP32[$649>>2]|0;
 $651 = $648 | $650;
 $652 = $651 | $646;
 $653 = ($652|0)==(0);
 if ($653) {
  $$15$lcssa = $$13$lcssa;
 } else {
  $$1520 = $$13$lcssa;$bb_piece$sroa$0$623 = $646;$bb_piece$sroa$1$622 = $648;$bb_piece$sroa$2$621 = $650;
  while(1) {
   $660 = (_last_one210($bb_piece$sroa$2$621,$bb_piece$sroa$1$622,$bb_piece$sroa$0$623)|0);
   $661 = (34156304 + (($660*12)|0)|0);
   $662 = HEAP32[$661>>2]|0;
   $658 = $662 ^ $bb_piece$sroa$0$623;
   $663 = ((34156304 + (($660*12)|0)|0) + 4|0);
   $664 = HEAP32[$663>>2]|0;
   $655 = $664 ^ $bb_piece$sroa$1$622;
   $665 = ((34156304 + (($660*12)|0)|0) + 8|0);
   $666 = HEAP32[$665>>2]|0;
   $656 = $666 ^ $bb_piece$sroa$2$621;
   $667 = ((33572424 + ($660<<3)|0) + 2|0);
   $668 = HEAP8[$667>>0]|0;
   $669 = $668&255;
   $670 = ((($ptree) + ($669<<2)|0) + 32|0);
   $671 = HEAP32[$670>>2]|0;
   $672 = ((33572424 + ($660<<3)|0) + 3|0);
   $673 = HEAP8[$672>>0]|0;
   $674 = $673&255;
   $675 = $671 >>> $674;
   $676 = $675 & 127;
   $677 = ((33953152 + (($660*1536)|0)|0) + (($676*12)|0)|0);
   $678 = HEAP32[$677>>2]|0;
   $679 = (((33953152 + (($660*1536)|0)|0) + (($676*12)|0)|0) + 4|0);
   $680 = HEAP32[$679>>2]|0;
   $681 = (((33953152 + (($660*1536)|0)|0) + (($676*12)|0)|0) + 8|0);
   $682 = HEAP32[$681>>2]|0;
   $683 = (34161184 + (($660*12)|0)|0);
   $684 = HEAP32[$683>>2]|0;
   $685 = ((34161184 + (($660*12)|0)|0) + 4|0);
   $686 = HEAP32[$685>>2]|0;
   $687 = ((34161184 + (($660*12)|0)|0) + 8|0);
   $688 = HEAP32[$687>>2]|0;
   $689 = $678 & $8;
   $690 = $689 & $684;
   $691 = $680 & $3;
   $692 = $691 & $686;
   $693 = $682 & $5;
   $694 = $693 & $688;
   $695 = $692 | $694;
   $696 = $695 | $690;
   $697 = ($696|0)==(0);
   if ($697) {
    $$16$lcssa = $$1520;
   } else {
    $698 = $660 << 7;
    $$1613 = $$1520;$bb_desti$sroa$0$816 = $690;$bb_desti$sroa$1$815 = $692;$bb_desti$sroa$2$814 = $694;
    while(1) {
     $699 = (_last_one210($bb_desti$sroa$2$814,$bb_desti$sroa$1$815,$bb_desti$sroa$0$816)|0);
     $700 = (34156304 + (($699*12)|0)|0);
     $701 = HEAP32[$700>>2]|0;
     $702 = $701 ^ $bb_desti$sroa$0$816;
     $703 = ((34156304 + (($699*12)|0)|0) + 4|0);
     $704 = HEAP32[$703>>2]|0;
     $705 = $704 ^ $bb_desti$sroa$1$815;
     $706 = ((34156304 + (($699*12)|0)|0) + 8|0);
     $707 = HEAP32[$706>>2]|0;
     $708 = $707 ^ $bb_desti$sroa$2$814;
     $709 = $699 | $698;
     $710 = ((($ptree) + ($699)|0) + 512|0);
     $711 = HEAP8[$710>>0]|0;
     $712 = $711 << 24 >> 24;
     $713 = (0 - ($712))|0;
     $714 = $713 << 19;
     $715 = $709 | $714;
     $716 = $715 | 65536;
     $717 = ($699|0)<(18);
     do {
      if ($717) {
       $718 = $715 | 81920;
       $719 = (($$1613) + 4|0);
       HEAP32[$$1613>>2] = $718;
       $$16$be = $719;
      } else {
       $720 = ($699|0)<(27);
       if (!($720)) {
        $726 = (($$1613) + 4|0);
        HEAP32[$$1613>>2] = $716;
        $$16$be = $726;
        break;
       }
       $721 = $715 | 81920;
       $722 = (($$1613) + 4|0);
       HEAP32[$$1613>>2] = $721;
       $723 = $715 & 7864320;
       $724 = ($723|0)==(0);
       if ($724) {
        $$16$be = $722;
       } else {
        $725 = (($$1613) + 8|0);
        HEAP32[$722>>2] = $716;
        $$16$be = $725;
       }
      }
     } while(0);
     $727 = $705 | $708;
     $728 = $727 | $702;
     $729 = ($728|0)==(0);
     if ($729) {
      $$16$lcssa = $$16$be;
      break;
     } else {
      $$1613 = $$16$be;$bb_desti$sroa$0$816 = $702;$bb_desti$sroa$1$815 = $705;$bb_desti$sroa$2$814 = $708;
     }
    }
   }
   $654 = $655 | $656;
   $657 = $654 | $658;
   $659 = ($657|0)==(0);
   if ($659) {
    $$15$lcssa = $$16$lcssa;
    break;
   } else {
    $$1520 = $$16$lcssa;$bb_piece$sroa$0$623 = $658;$bb_piece$sroa$1$622 = $655;$bb_piece$sroa$2$621 = $656;
   }
  }
 }
 $730 = (($ptree) + 212|0);
 $731 = HEAP32[$730>>2]|0;
 $732 = (($ptree) + 216|0);
 $733 = HEAP32[$732>>2]|0;
 $734 = (($ptree) + 220|0);
 $735 = HEAP32[$734>>2]|0;
 $736 = $733 | $735;
 $737 = $736 | $731;
 $738 = ($737|0)==(0);
 if ($738) {
  $$17$lcssa = $$15$lcssa;
  STACKTOP = sp;return ($$17$lcssa|0);
 } else {
  $$175 = $$15$lcssa;$bb_piece$sroa$0$78 = $731;$bb_piece$sroa$1$77 = $733;$bb_piece$sroa$2$76 = $735;
 }
 while(1) {
  $745 = (_last_one210($bb_piece$sroa$2$76,$bb_piece$sroa$1$77,$bb_piece$sroa$0$78)|0);
  $746 = (34156304 + (($745*12)|0)|0);
  $747 = HEAP32[$746>>2]|0;
  $743 = $747 ^ $bb_piece$sroa$0$78;
  $748 = ((34156304 + (($745*12)|0)|0) + 4|0);
  $749 = HEAP32[$748>>2]|0;
  $740 = $749 ^ $bb_piece$sroa$1$77;
  $750 = ((34156304 + (($745*12)|0)|0) + 8|0);
  $751 = HEAP32[$750>>2]|0;
  $741 = $751 ^ $bb_piece$sroa$2$76;
  $752 = (33573072 + (($745*12)|0)|0);
  $753 = HEAP32[$752>>2]|0;
  $754 = ((33573072 + (($745*12)|0)|0) + 4|0);
  $755 = HEAP32[$754>>2]|0;
  $756 = ((33573072 + (($745*12)|0)|0) + 8|0);
  $757 = HEAP32[$756>>2]|0;
  $758 = $753 & $8;
  $759 = $755 & $3;
  $760 = $757 & $5;
  $761 = $759 | $760;
  $762 = $761 | $758;
  $763 = ($762|0)==(0);
  if ($763) {
   $$18$lcssa = $$175;
  } else {
   $764 = $745 << 7;
   $$181 = $$175;$bb_desti$sroa$0$94 = $758;$bb_desti$sroa$1$93 = $759;$bb_desti$sroa$2$92 = $760;
   while(1) {
    $765 = (_last_one210($bb_desti$sroa$2$92,$bb_desti$sroa$1$93,$bb_desti$sroa$0$94)|0);
    $766 = (34156304 + (($765*12)|0)|0);
    $767 = HEAP32[$766>>2]|0;
    $768 = $767 ^ $bb_desti$sroa$0$94;
    $769 = ((34156304 + (($765*12)|0)|0) + 4|0);
    $770 = HEAP32[$769>>2]|0;
    $771 = $770 ^ $bb_desti$sroa$1$93;
    $772 = ((34156304 + (($765*12)|0)|0) + 8|0);
    $773 = HEAP32[$772>>2]|0;
    $774 = $773 ^ $bb_desti$sroa$2$92;
    $775 = $765 | $764;
    $776 = ((($ptree) + ($765)|0) + 512|0);
    $777 = HEAP8[$776>>0]|0;
    $778 = $777 << 24 >> 24;
    $779 = (0 - ($778))|0;
    $780 = $779 << 19;
    $781 = $775 | $780;
    $782 = $781 | 98304;
    $783 = ($765|0)<(18);
    do {
     if ($783) {
      $784 = $781 | 114688;
      $785 = (($$181) + 4|0);
      HEAP32[$$181>>2] = $784;
      $$18$be = $785;
     } else {
      $786 = ($765|0)<(27);
      if (!($786)) {
       $792 = (($$181) + 4|0);
       HEAP32[$$181>>2] = $782;
       $$18$be = $792;
       break;
      }
      $787 = $781 | 114688;
      $788 = (($$181) + 4|0);
      HEAP32[$$181>>2] = $787;
      $789 = $781 & 7864320;
      $790 = ($789|0)==(0);
      if ($790) {
       $$18$be = $788;
      } else {
       $791 = (($$181) + 8|0);
       HEAP32[$788>>2] = $782;
       $$18$be = $791;
      }
     }
    } while(0);
    $793 = $771 | $774;
    $794 = $793 | $768;
    $795 = ($794|0)==(0);
    if ($795) {
     $$18$lcssa = $$18$be;
     break;
    } else {
     $$181 = $$18$be;$bb_desti$sroa$0$94 = $768;$bb_desti$sroa$1$93 = $771;$bb_desti$sroa$2$92 = $774;
    }
   }
  }
  $739 = $740 | $741;
  $742 = $739 | $743;
  $744 = ($742|0)==(0);
  if ($744) {
   $$17$lcssa = $$18$lcssa;
   break;
  } else {
   $$175 = $$18$lcssa;$bb_piece$sroa$0$78 = $743;$bb_piece$sroa$1$77 = $740;$bb_piece$sroa$2$76 = $741;
  }
 }
 STACKTOP = sp;return ($$17$lcssa|0);
}
function _w_gen_captures($ptree,$pmove) {
 $ptree = $ptree|0;
 $pmove = $pmove|0;
 var $$ = 0, $$$v = 0, $$0$lcssa = 0, $$0131 = 0, $$1$lcssa = 0, $$10$lcssa = 0, $$1061 = 0, $$1061$us = 0, $$11$lcssa = 0, $$1123 = 0, $$1152 = 0, $$12$lcssa = 0, $$1245 = 0, $$13$lcssa = 0, $$1336 = 0, $$14$lcssa = 0, $$1429 = 0, $$15$lcssa = 0, $$151 = 0, $$152 = 0;
 var $$1520 = 0, $$153 = 0, $$154 = 0, $$16$be = 0, $$16$lcssa = 0, $$1613 = 0, $$17$lcssa = 0, $$175 = 0, $$18$be = 0, $$18$lcssa = 0, $$181 = 0, $$2$lcssa = 0, $$2116 = 0, $$3 = 0, $$4$lcssa = 0, $$4107 = 0, $$5$lcssa = 0, $$5100 = 0, $$6$lcssa = 0, $$691 = 0;
 var $$7$lcssa = 0, $$783 = 0, $$8$lcssa = 0, $$877 = 0, $$877$us = 0, $$9$lcssa = 0, $$967 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bb_desti$sroa$0$0134 = 0, $bb_desti$sroa$0$1119 = 0, $bb_desti$sroa$0$2103 = 0, $bb_desti$sroa$0$394 = 0, $bb_desti$sroa$0$4$ph = 0, $bb_desti$sroa$0$480 = 0, $bb_desti$sroa$0$480$us = 0, $bb_desti$sroa$0$5$ph = 0, $bb_desti$sroa$0$564 = 0, $bb_desti$sroa$0$564$us = 0, $bb_desti$sroa$0$648 = 0, $bb_desti$sroa$0$732 = 0;
 var $bb_desti$sroa$0$816 = 0, $bb_desti$sroa$0$94 = 0, $bb_desti$sroa$1$0133 = 0, $bb_desti$sroa$1$1118 = 0, $bb_desti$sroa$1$2102 = 0, $bb_desti$sroa$1$393 = 0, $bb_desti$sroa$1$4$ph = 0, $bb_desti$sroa$1$479 = 0, $bb_desti$sroa$1$479$us = 0, $bb_desti$sroa$1$5$ph = 0, $bb_desti$sroa$1$563 = 0, $bb_desti$sroa$1$563$us = 0, $bb_desti$sroa$1$647 = 0, $bb_desti$sroa$1$731 = 0, $bb_desti$sroa$1$815 = 0, $bb_desti$sroa$1$93 = 0, $bb_desti$sroa$2$0132 = 0, $bb_desti$sroa$2$1117 = 0, $bb_desti$sroa$2$2101 = 0, $bb_desti$sroa$2$392 = 0;
 var $bb_desti$sroa$2$478 = 0, $bb_desti$sroa$2$478$us = 0, $bb_desti$sroa$2$562 = 0, $bb_desti$sroa$2$562$us = 0, $bb_desti$sroa$2$646 = 0, $bb_desti$sroa$2$730 = 0, $bb_desti$sroa$2$814 = 0, $bb_desti$sroa$2$92 = 0, $bb_piece$sroa$0$0126 = 0, $bb_piece$sroa$0$1110 = 0, $bb_piece$sroa$0$286 = 0, $bb_piece$sroa$0$370 = 0, $bb_piece$sroa$0$455 = 0, $bb_piece$sroa$0$539 = 0, $bb_piece$sroa$0$623 = 0, $bb_piece$sroa$0$78 = 0, $bb_piece$sroa$1$0125 = 0, $bb_piece$sroa$1$1109 = 0, $bb_piece$sroa$1$285 = 0, $bb_piece$sroa$1$369 = 0;
 var $bb_piece$sroa$1$454 = 0, $bb_piece$sroa$1$538 = 0, $bb_piece$sroa$1$622 = 0, $bb_piece$sroa$1$77 = 0, $bb_piece$sroa$2$0124 = 0, $bb_piece$sroa$2$1108 = 0, $bb_piece$sroa$2$284 = 0, $bb_piece$sroa$2$368 = 0, $bb_piece$sroa$2$453 = 0, $bb_piece$sroa$2$537 = 0, $bb_piece$sroa$2$621 = 0, $bb_piece$sroa$2$76 = 0, $or$cond = 0, $utemp$1 = 0, $utemp$1$v = 0, $utemp$2 = 0, $utemp$2$v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ptree) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ptree) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($ptree) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($ptree) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 ^ -1;
 $9 = (($ptree) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 ^ -1;
 $12 = (($ptree) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 ^ -1;
 $15 = (($ptree) + 184|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & $14;
 $18 = (($ptree) + 180|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & $3;
 $21 = (($ptree) + 176|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & $1;
 $24 = $20 | $17;
 $25 = $24 | $23;
 $26 = ($25|0)==(0);
 if ($26) {
  $$0$lcssa = $pmove;
 } else {
  $$0131 = $pmove;$bb_desti$sroa$0$0134 = $23;$bb_desti$sroa$1$0133 = $20;$bb_desti$sroa$2$0132 = $17;
  while(1) {
   $27 = (_first_one012($bb_desti$sroa$0$0134,$bb_desti$sroa$1$0133,$bb_desti$sroa$2$0132)|0);
   $28 = (34156304 + (($27*12)|0)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $29 ^ $bb_desti$sroa$0$0134;
   $31 = ((34156304 + (($27*12)|0)|0) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $32 ^ $bb_desti$sroa$1$0133;
   $34 = ((34156304 + (($27*12)|0)|0) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $35 ^ $bb_desti$sroa$2$0132;
   $37 = $27 << 7;
   $38 = (($37) + -1152)|0;
   $39 = $38 | $27;
   $40 = ((($ptree) + ($27)|0) + 512|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41 << 24 >> 24;
   $43 = $42 << 19;
   $44 = ($27|0)>(53);
   $$$v = $44 ? 49152 : 32768;
   $45 = $39 | $$$v;
   $$ = $45 | $43;
   $46 = (($$0131) + 4|0);
   HEAP32[$$0131>>2] = $$;
   $47 = $33 | $36;
   $48 = $47 | $30;
   $49 = ($48|0)==(0);
   if ($49) {
    $$0$lcssa = $46;
    break;
   } else {
    $$0131 = $46;$bb_desti$sroa$0$0134 = $30;$bb_desti$sroa$1$0133 = $33;$bb_desti$sroa$2$0132 = $36;
   }
  }
 }
 $50 = (($ptree) + 248|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($ptree) + 252|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($ptree) + 256|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $53 | $55;
 $57 = $56 | $51;
 $58 = ($57|0)==(0);
 if ($58) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$1123 = $$0$lcssa;$bb_piece$sroa$0$0126 = $51;$bb_piece$sroa$1$0125 = $53;$bb_piece$sroa$2$0124 = $55;
  while(1) {
   $65 = (_first_one012($bb_piece$sroa$0$0126,$bb_piece$sroa$1$0125,$bb_piece$sroa$2$0124)|0);
   $66 = (34156304 + (($65*12)|0)|0);
   $67 = HEAP32[$66>>2]|0;
   $63 = $67 ^ $bb_piece$sroa$0$0126;
   $68 = ((34156304 + (($65*12)|0)|0) + 4|0);
   $69 = HEAP32[$68>>2]|0;
   $60 = $69 ^ $bb_piece$sroa$1$0125;
   $70 = ((34156304 + (($65*12)|0)|0) + 8|0);
   $71 = HEAP32[$70>>2]|0;
   $61 = $71 ^ $bb_piece$sroa$2$0124;
   $72 = (33576976 + (($65*12)|0)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $73 & $1;
   $75 = ((33576976 + (($65*12)|0)|0) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $76 & $3;
   $78 = ((33576976 + (($65*12)|0)|0) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $79 & $5;
   $81 = $77 | $80;
   $82 = $81 | $74;
   $83 = ($82|0)==(0);
   if ($83) {
    $$2$lcssa = $$1123;
   } else {
    $84 = $65 << 7;
    $85 = ($65|0)>(53);
    $$2116 = $$1123;$bb_desti$sroa$0$1119 = $74;$bb_desti$sroa$1$1118 = $77;$bb_desti$sroa$2$1117 = $80;
    while(1) {
     $86 = (_first_one012($bb_desti$sroa$0$1119,$bb_desti$sroa$1$1118,$bb_desti$sroa$2$1117)|0);
     $87 = (34156304 + (($86*12)|0)|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = $88 ^ $bb_desti$sroa$0$1119;
     $90 = ((34156304 + (($86*12)|0)|0) + 4|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = $91 ^ $bb_desti$sroa$1$1118;
     $93 = ((34156304 + (($86*12)|0)|0) + 8|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = $94 ^ $bb_desti$sroa$2$1117;
     $96 = $86 | $84;
     $97 = ((($ptree) + ($86)|0) + 512|0);
     $98 = HEAP8[$97>>0]|0;
     $99 = $98 << 24 >> 24;
     $100 = $99 << 19;
     $101 = $96 | $100;
     $102 = $101 | 131072;
     $103 = ($86|0)>(53);
     $or$cond = $103 | $85;
     if ($or$cond) {
      $104 = $101 | 147456;
      $105 = (($$2116) + 4|0);
      HEAP32[$$2116>>2] = $104;
      $$3 = $105;
     } else {
      $$3 = $$2116;
     }
     $106 = (($$3) + 4|0);
     HEAP32[$$3>>2] = $102;
     $107 = $92 | $95;
     $108 = $107 | $89;
     $109 = ($108|0)==(0);
     if ($109) {
      $$2$lcssa = $106;
      break;
     } else {
      $$2116 = $106;$bb_desti$sroa$0$1119 = $89;$bb_desti$sroa$1$1118 = $92;$bb_desti$sroa$2$1117 = $95;
     }
    }
   }
   $59 = $60 | $61;
   $62 = $59 | $63;
   $64 = ($62|0)==(0);
   if ($64) {
    $$1$lcssa = $$2$lcssa;
    break;
   } else {
    $$1123 = $$2$lcssa;$bb_piece$sroa$0$0126 = $63;$bb_piece$sroa$1$0125 = $60;$bb_piece$sroa$2$0124 = $61;
   }
  }
 }
 $110 = (($ptree) + 104|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = (($ptree) + 108|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = (($ptree) + 112|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $113 | $115;
 $117 = $116 | $111;
 $118 = ($117|0)==(0);
 if ($118) {
  $$4$lcssa = $$1$lcssa;
 } else {
  $$4107 = $$1$lcssa;$bb_piece$sroa$0$1110 = $111;$bb_piece$sroa$1$1109 = $113;$bb_piece$sroa$2$1108 = $115;
  while(1) {
   $125 = (_first_one012($bb_piece$sroa$0$1110,$bb_piece$sroa$1$1109,$bb_piece$sroa$2$1108)|0);
   $126 = (34156304 + (($125*12)|0)|0);
   $127 = HEAP32[$126>>2]|0;
   $123 = $127 ^ $bb_piece$sroa$0$1110;
   $128 = ((34156304 + (($125*12)|0)|0) + 4|0);
   $129 = HEAP32[$128>>2]|0;
   $120 = $129 ^ $bb_piece$sroa$1$1109;
   $130 = ((34156304 + (($125*12)|0)|0) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   $121 = $131 ^ $bb_piece$sroa$2$1108;
   $132 = (33577952 + (($125*12)|0)|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $133 & $1;
   $135 = ((33577952 + (($125*12)|0)|0) + 4|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = $136 & $3;
   $138 = ((33577952 + (($125*12)|0)|0) + 8|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $139 & $5;
   $141 = $137 | $140;
   $142 = $141 | $134;
   $143 = ($142|0)==(0);
   if ($143) {
    $$5$lcssa = $$4107;
   } else {
    $144 = $125 << 7;
    $145 = ((($ptree) + ($125)|0) + 512|0);
    $$5100 = $$4107;$bb_desti$sroa$0$2103 = $134;$bb_desti$sroa$1$2102 = $137;$bb_desti$sroa$2$2101 = $140;
    while(1) {
     $146 = (_first_one012($bb_desti$sroa$0$2103,$bb_desti$sroa$1$2102,$bb_desti$sroa$2$2101)|0);
     $147 = (34156304 + (($146*12)|0)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = $148 ^ $bb_desti$sroa$0$2103;
     $150 = ((34156304 + (($146*12)|0)|0) + 4|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = $151 ^ $bb_desti$sroa$1$2102;
     $153 = ((34156304 + (($146*12)|0)|0) + 8|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = $154 ^ $bb_desti$sroa$2$2101;
     $156 = $146 | $144;
     $157 = ((($ptree) + ($146)|0) + 512|0);
     $158 = HEAP8[$157>>0]|0;
     $159 = $158 << 24 >> 24;
     $160 = $159 << 19;
     $161 = $156 | $160;
     $162 = HEAP8[$145>>0]|0;
     $163 = $162 << 24 >> 24;
     $164 = (0 - ($163))|0;
     $165 = $164 << 15;
     $166 = $161 | $165;
     $167 = (($$5100) + 4|0);
     HEAP32[$$5100>>2] = $166;
     $168 = $152 | $155;
     $169 = $168 | $149;
     $170 = ($169|0)==(0);
     if ($170) {
      $$5$lcssa = $167;
      break;
     } else {
      $$5100 = $167;$bb_desti$sroa$0$2103 = $149;$bb_desti$sroa$1$2102 = $152;$bb_desti$sroa$2$2101 = $155;
     }
    }
   }
   $119 = $120 | $121;
   $122 = $119 | $123;
   $124 = ($122|0)==(0);
   if ($124) {
    $$4$lcssa = $$5$lcssa;
    break;
   } else {
    $$4107 = $$5$lcssa;$bb_piece$sroa$0$1110 = $123;$bb_piece$sroa$1$1109 = $120;$bb_piece$sroa$2$1108 = $121;
   }
  }
 }
 $171 = (($ptree) + 594|0);
 $172 = HEAP8[$171>>0]|0;
 $173 = $172&255;
 $174 = (33578928 + (($173*12)|0)|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = $175 & $1;
 $177 = ((33578928 + (($173*12)|0)|0) + 4|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = $178 & $3;
 $180 = ((33578928 + (($173*12)|0)|0) + 8|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = $181 & $5;
 $183 = $179 | $182;
 $184 = $183 | $176;
 $185 = ($184|0)==(0);
 if ($185) {
  $$6$lcssa = $$4$lcssa;
 } else {
  $186 = $173 << 7;
  $$691 = $$4$lcssa;$bb_desti$sroa$0$394 = $176;$bb_desti$sroa$1$393 = $179;$bb_desti$sroa$2$392 = $182;
  while(1) {
   $187 = (_first_one012($bb_desti$sroa$0$394,$bb_desti$sroa$1$393,$bb_desti$sroa$2$392)|0);
   $188 = (34156304 + (($187*12)|0)|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = $189 ^ $bb_desti$sroa$0$394;
   $191 = ((34156304 + (($187*12)|0)|0) + 4|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = $192 ^ $bb_desti$sroa$1$393;
   $194 = ((34156304 + (($187*12)|0)|0) + 8|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = $195 ^ $bb_desti$sroa$2$392;
   $197 = ((($ptree) + ($187)|0) + 512|0);
   $198 = HEAP8[$197>>0]|0;
   $199 = $198 << 24 >> 24;
   $200 = $199 << 19;
   $201 = $186 | $187;
   $202 = $201 | $200;
   $203 = $202 | 262144;
   $204 = (($$691) + 4|0);
   HEAP32[$$691>>2] = $203;
   $205 = $193 | $196;
   $206 = $205 | $190;
   $207 = ($206|0)==(0);
   if ($207) {
    $$6$lcssa = $204;
    break;
   } else {
    $$691 = $204;$bb_desti$sroa$0$394 = $190;$bb_desti$sroa$1$393 = $193;$bb_desti$sroa$2$392 = $196;
   }
  }
 }
 $208 = (($ptree) + 272|0);
 $209 = HEAP32[$208>>2]|0;
 $210 = (($ptree) + 276|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = (($ptree) + 280|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = $211 | $213;
 $215 = $214 | $209;
 $216 = ($215|0)==(0);
 if ($216) {
  $$7$lcssa = $$6$lcssa;
 } else {
  $$783 = $$6$lcssa;$bb_piece$sroa$0$286 = $209;$bb_piece$sroa$1$285 = $211;$bb_piece$sroa$2$284 = $213;
  while(1) {
   $223 = (_first_one012($bb_piece$sroa$0$286,$bb_piece$sroa$1$285,$bb_piece$sroa$2$284)|0);
   $224 = (34156304 + (($223*12)|0)|0);
   $225 = HEAP32[$224>>2]|0;
   $221 = $225 ^ $bb_piece$sroa$0$286;
   $226 = ((34156304 + (($223*12)|0)|0) + 4|0);
   $227 = HEAP32[$226>>2]|0;
   $218 = $227 ^ $bb_piece$sroa$1$285;
   $228 = ((34156304 + (($223*12)|0)|0) + 8|0);
   $229 = HEAP32[$228>>2]|0;
   $219 = $229 ^ $bb_piece$sroa$2$284;
   $230 = ((33572424 + ($223<<3)|0) + 6|0);
   $231 = HEAP8[$230>>0]|0;
   $232 = $231&255;
   $233 = ((($ptree) + ($232<<2)|0) + 56|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = ((33572424 + ($223<<3)|0) + 7|0);
   $236 = HEAP8[$235>>0]|0;
   $237 = $236&255;
   $238 = $234 >>> $237;
   $239 = $238 & 127;
   $240 = ((33704320 + (($223*1536)|0)|0) + (($239*12)|0)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = ((33572424 + ($223<<3)|0) + 4|0);
   $243 = HEAP8[$242>>0]|0;
   $244 = $243&255;
   $245 = ((($ptree) + ($244<<2)|0) + 44|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = ((33572424 + ($223<<3)|0) + 5|0);
   $248 = HEAP8[$247>>0]|0;
   $249 = $248&255;
   $250 = $246 >>> $249;
   $251 = $250 & 127;
   $252 = ((33579904 + (($223*1536)|0)|0) + (($251*12)|0)|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = $253 | $241;
   $255 = (((33704320 + (($223*1536)|0)|0) + (($239*12)|0)|0) + 4|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = (((33579904 + (($223*1536)|0)|0) + (($251*12)|0)|0) + 4|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = $258 | $256;
   $260 = (((33704320 + (($223*1536)|0)|0) + (($239*12)|0)|0) + 8|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = (((33579904 + (($223*1536)|0)|0) + (($251*12)|0)|0) + 8|0);
   $263 = HEAP32[$262>>2]|0;
   $264 = $263 | $261;
   $265 = $264 & $14;
   $266 = ($223|0)>(53);
   $$151 = $266 ? $11 : $3;
   $$152 = $266 ? $8 : $1;
   $bb_desti$sroa$0$4$ph = $254 & $$152;
   $bb_desti$sroa$1$4$ph = $259 & $$151;
   $267 = $bb_desti$sroa$1$4$ph | $265;
   $268 = $267 | $bb_desti$sroa$0$4$ph;
   $269 = ($268|0)==(0);
   if ($269) {
    $$8$lcssa = $$783;
   } else {
    $270 = $223 << 7;
    if ($266) {
     $$877$us = $$783;$bb_desti$sroa$0$480$us = $bb_desti$sroa$0$4$ph;$bb_desti$sroa$1$479$us = $bb_desti$sroa$1$4$ph;$bb_desti$sroa$2$478$us = $265;
     while(1) {
      $271 = (_first_one012($bb_desti$sroa$0$480$us,$bb_desti$sroa$1$479$us,$bb_desti$sroa$2$478$us)|0);
      $272 = (34156304 + (($271*12)|0)|0);
      $273 = HEAP32[$272>>2]|0;
      $274 = $273 ^ $bb_desti$sroa$0$480$us;
      $275 = ((34156304 + (($271*12)|0)|0) + 4|0);
      $276 = HEAP32[$275>>2]|0;
      $277 = $276 ^ $bb_desti$sroa$1$479$us;
      $278 = ((34156304 + (($271*12)|0)|0) + 8|0);
      $279 = HEAP32[$278>>2]|0;
      $280 = $279 ^ $bb_desti$sroa$2$478$us;
      $281 = $271 | $270;
      $282 = ((($ptree) + ($271)|0) + 512|0);
      $283 = HEAP8[$282>>0]|0;
      $284 = $283 << 24 >> 24;
      $285 = $284 << 19;
      $286 = $281 | $285;
      $287 = $286 | 212992;
      $288 = (($$877$us) + 4|0);
      HEAP32[$$877$us>>2] = $287;
      $289 = $277 | $280;
      $290 = $289 | $274;
      $291 = ($290|0)==(0);
      if ($291) {
       $$8$lcssa = $288;
       break;
      } else {
       $$877$us = $288;$bb_desti$sroa$0$480$us = $274;$bb_desti$sroa$1$479$us = $277;$bb_desti$sroa$2$478$us = $280;
      }
     }
    } else {
     $$877 = $$783;$bb_desti$sroa$0$480 = $bb_desti$sroa$0$4$ph;$bb_desti$sroa$1$479 = $bb_desti$sroa$1$4$ph;$bb_desti$sroa$2$478 = $265;
     while(1) {
      $292 = (_first_one012($bb_desti$sroa$0$480,$bb_desti$sroa$1$479,$bb_desti$sroa$2$478)|0);
      $293 = (34156304 + (($292*12)|0)|0);
      $294 = HEAP32[$293>>2]|0;
      $295 = $294 ^ $bb_desti$sroa$0$480;
      $296 = ((34156304 + (($292*12)|0)|0) + 4|0);
      $297 = HEAP32[$296>>2]|0;
      $298 = $297 ^ $bb_desti$sroa$1$479;
      $299 = ((34156304 + (($292*12)|0)|0) + 8|0);
      $300 = HEAP32[$299>>2]|0;
      $301 = $300 ^ $bb_desti$sroa$2$478;
      $302 = $292 | $270;
      $303 = ((($ptree) + ($292)|0) + 512|0);
      $304 = HEAP8[$303>>0]|0;
      $305 = $304 << 24 >> 24;
      $306 = $305 << 19;
      $307 = $302 | $306;
      $308 = ($292|0)>(53);
      $utemp$1$v = $308 ? 212992 : 196608;
      $utemp$1 = $307 | $utemp$1$v;
      $309 = (($$877) + 4|0);
      HEAP32[$$877>>2] = $utemp$1;
      $310 = $298 | $301;
      $311 = $310 | $295;
      $312 = ($311|0)==(0);
      if ($312) {
       $$8$lcssa = $309;
       break;
      } else {
       $$877 = $309;$bb_desti$sroa$0$480 = $295;$bb_desti$sroa$1$479 = $298;$bb_desti$sroa$2$478 = $301;
      }
     }
    }
   }
   $217 = $218 | $219;
   $220 = $217 | $221;
   $222 = ($220|0)==(0);
   if ($222) {
    $$7$lcssa = $$8$lcssa;
    break;
   } else {
    $$783 = $$8$lcssa;$bb_piece$sroa$0$286 = $221;$bb_piece$sroa$1$285 = $218;$bb_piece$sroa$2$284 = $219;
   }
  }
 }
 $313 = (($ptree) + 296|0);
 $314 = HEAP32[$313>>2]|0;
 $315 = (($ptree) + 300|0);
 $316 = HEAP32[$315>>2]|0;
 $317 = (($ptree) + 304|0);
 $318 = HEAP32[$317>>2]|0;
 $319 = $316 | $318;
 $320 = $319 | $314;
 $321 = ($320|0)==(0);
 if ($321) {
  $$9$lcssa = $$7$lcssa;
 } else {
  $$967 = $$7$lcssa;$bb_piece$sroa$0$370 = $314;$bb_piece$sroa$1$369 = $316;$bb_piece$sroa$2$368 = $318;
  while(1) {
   $328 = (_first_one012($bb_piece$sroa$0$370,$bb_piece$sroa$1$369,$bb_piece$sroa$2$368)|0);
   $329 = (34156304 + (($328*12)|0)|0);
   $330 = HEAP32[$329>>2]|0;
   $326 = $330 ^ $bb_piece$sroa$0$370;
   $331 = ((34156304 + (($328*12)|0)|0) + 4|0);
   $332 = HEAP32[$331>>2]|0;
   $323 = $332 ^ $bb_piece$sroa$1$369;
   $333 = ((34156304 + (($328*12)|0)|0) + 8|0);
   $334 = HEAP32[$333>>2]|0;
   $324 = $334 ^ $bb_piece$sroa$2$368;
   $335 = ((33572424 + ($328<<3)|0) + 2|0);
   $336 = HEAP8[$335>>0]|0;
   $337 = $336&255;
   $338 = ((($ptree) + ($337<<2)|0) + 32|0);
   $339 = HEAP32[$338>>2]|0;
   $340 = ((33572424 + ($328<<3)|0) + 3|0);
   $341 = HEAP8[$340>>0]|0;
   $342 = $341&255;
   $343 = $339 >>> $342;
   $344 = $343 & 127;
   $345 = ((33953152 + (($328*1536)|0)|0) + (($344*12)|0)|0);
   $346 = HEAP32[$345>>2]|0;
   $347 = (33572424 + ($328<<3)|0);
   $348 = HEAP8[$347>>0]|0;
   $349 = $348&255;
   $350 = ((($ptree) + ($349<<2)|0) + 8|0);
   $351 = HEAP32[$350>>2]|0;
   $352 = ((($ptree) + ($349<<2)|0) + 20|0);
   $353 = HEAP32[$352>>2]|0;
   $354 = $353 | $351;
   $355 = ((33572424 + ($328<<3)|0) + 1|0);
   $356 = HEAP8[$355>>0]|0;
   $357 = $356&255;
   $358 = $354 >>> $357;
   $359 = $358 & 127;
   $360 = ((33828736 + (($328*1536)|0)|0) + (($359*12)|0)|0);
   $361 = HEAP32[$360>>2]|0;
   $362 = $361 | $346;
   $363 = (((33953152 + (($328*1536)|0)|0) + (($344*12)|0)|0) + 4|0);
   $364 = HEAP32[$363>>2]|0;
   $365 = (((33828736 + (($328*1536)|0)|0) + (($359*12)|0)|0) + 4|0);
   $366 = HEAP32[$365>>2]|0;
   $367 = $366 | $364;
   $368 = (((33953152 + (($328*1536)|0)|0) + (($344*12)|0)|0) + 8|0);
   $369 = HEAP32[$368>>2]|0;
   $370 = (((33828736 + (($328*1536)|0)|0) + (($359*12)|0)|0) + 8|0);
   $371 = HEAP32[$370>>2]|0;
   $372 = $371 | $369;
   $373 = $372 & $14;
   $374 = ($328|0)>(53);
   $$153 = $374 ? $11 : $3;
   $$154 = $374 ? $8 : $1;
   $bb_desti$sroa$0$5$ph = $362 & $$154;
   $bb_desti$sroa$1$5$ph = $367 & $$153;
   $375 = $bb_desti$sroa$1$5$ph | $373;
   $376 = $375 | $bb_desti$sroa$0$5$ph;
   $377 = ($376|0)==(0);
   if ($377) {
    $$10$lcssa = $$967;
   } else {
    $378 = $328 << 7;
    if ($374) {
     $$1061$us = $$967;$bb_desti$sroa$0$564$us = $bb_desti$sroa$0$5$ph;$bb_desti$sroa$1$563$us = $bb_desti$sroa$1$5$ph;$bb_desti$sroa$2$562$us = $373;
     while(1) {
      $379 = (_first_one012($bb_desti$sroa$0$564$us,$bb_desti$sroa$1$563$us,$bb_desti$sroa$2$562$us)|0);
      $380 = (34156304 + (($379*12)|0)|0);
      $381 = HEAP32[$380>>2]|0;
      $382 = $381 ^ $bb_desti$sroa$0$564$us;
      $383 = ((34156304 + (($379*12)|0)|0) + 4|0);
      $384 = HEAP32[$383>>2]|0;
      $385 = $384 ^ $bb_desti$sroa$1$563$us;
      $386 = ((34156304 + (($379*12)|0)|0) + 8|0);
      $387 = HEAP32[$386>>2]|0;
      $388 = $387 ^ $bb_desti$sroa$2$562$us;
      $389 = $379 | $378;
      $390 = ((($ptree) + ($379)|0) + 512|0);
      $391 = HEAP8[$390>>0]|0;
      $392 = $391 << 24 >> 24;
      $393 = $392 << 19;
      $394 = $389 | $393;
      $395 = $394 | 245760;
      $396 = (($$1061$us) + 4|0);
      HEAP32[$$1061$us>>2] = $395;
      $397 = $385 | $388;
      $398 = $397 | $382;
      $399 = ($398|0)==(0);
      if ($399) {
       $$10$lcssa = $396;
       break;
      } else {
       $$1061$us = $396;$bb_desti$sroa$0$564$us = $382;$bb_desti$sroa$1$563$us = $385;$bb_desti$sroa$2$562$us = $388;
      }
     }
    } else {
     $$1061 = $$967;$bb_desti$sroa$0$564 = $bb_desti$sroa$0$5$ph;$bb_desti$sroa$1$563 = $bb_desti$sroa$1$5$ph;$bb_desti$sroa$2$562 = $373;
     while(1) {
      $400 = (_first_one012($bb_desti$sroa$0$564,$bb_desti$sroa$1$563,$bb_desti$sroa$2$562)|0);
      $401 = (34156304 + (($400*12)|0)|0);
      $402 = HEAP32[$401>>2]|0;
      $403 = $402 ^ $bb_desti$sroa$0$564;
      $404 = ((34156304 + (($400*12)|0)|0) + 4|0);
      $405 = HEAP32[$404>>2]|0;
      $406 = $405 ^ $bb_desti$sroa$1$563;
      $407 = ((34156304 + (($400*12)|0)|0) + 8|0);
      $408 = HEAP32[$407>>2]|0;
      $409 = $408 ^ $bb_desti$sroa$2$562;
      $410 = $400 | $378;
      $411 = ((($ptree) + ($400)|0) + 512|0);
      $412 = HEAP8[$411>>0]|0;
      $413 = $412 << 24 >> 24;
      $414 = $413 << 19;
      $415 = $410 | $414;
      $416 = ($400|0)>(53);
      $utemp$2$v = $416 ? 245760 : 229376;
      $utemp$2 = $415 | $utemp$2$v;
      $417 = (($$1061) + 4|0);
      HEAP32[$$1061>>2] = $utemp$2;
      $418 = $406 | $409;
      $419 = $418 | $403;
      $420 = ($419|0)==(0);
      if ($420) {
       $$10$lcssa = $417;
       break;
      } else {
       $$1061 = $417;$bb_desti$sroa$0$564 = $403;$bb_desti$sroa$1$563 = $406;$bb_desti$sroa$2$562 = $409;
      }
     }
    }
   }
   $322 = $323 | $324;
   $325 = $322 | $326;
   $327 = ($325|0)==(0);
   if ($327) {
    $$9$lcssa = $$10$lcssa;
    break;
   } else {
    $$967 = $$10$lcssa;$bb_piece$sroa$0$370 = $326;$bb_piece$sroa$1$369 = $323;$bb_piece$sroa$2$368 = $324;
   }
  }
 }
 $421 = (($ptree) + 320|0);
 $422 = HEAP32[$421>>2]|0;
 $423 = (($ptree) + 324|0);
 $424 = HEAP32[$423>>2]|0;
 $425 = (($ptree) + 328|0);
 $426 = HEAP32[$425>>2]|0;
 $427 = $424 | $426;
 $428 = $427 | $422;
 $429 = ($428|0)==(0);
 if ($429) {
  $$11$lcssa = $$9$lcssa;
 } else {
  $$1152 = $$9$lcssa;$bb_piece$sroa$0$455 = $422;$bb_piece$sroa$1$454 = $424;$bb_piece$sroa$2$453 = $426;
  while(1) {
   $436 = (_first_one012($bb_piece$sroa$0$455,$bb_piece$sroa$1$454,$bb_piece$sroa$2$453)|0);
   $437 = (34156304 + (($436*12)|0)|0);
   $438 = HEAP32[$437>>2]|0;
   $434 = $438 ^ $bb_piece$sroa$0$455;
   $439 = ((34156304 + (($436*12)|0)|0) + 4|0);
   $440 = HEAP32[$439>>2]|0;
   $431 = $440 ^ $bb_piece$sroa$1$454;
   $441 = ((34156304 + (($436*12)|0)|0) + 8|0);
   $442 = HEAP32[$441>>2]|0;
   $432 = $442 ^ $bb_piece$sroa$2$453;
   $443 = ((33572424 + ($436<<3)|0) + 6|0);
   $444 = HEAP8[$443>>0]|0;
   $445 = $444&255;
   $446 = ((($ptree) + ($445<<2)|0) + 56|0);
   $447 = HEAP32[$446>>2]|0;
   $448 = ((33572424 + ($436<<3)|0) + 7|0);
   $449 = HEAP8[$448>>0]|0;
   $450 = $449&255;
   $451 = $447 >>> $450;
   $452 = $451 & 127;
   $453 = ((33704320 + (($436*1536)|0)|0) + (($452*12)|0)|0);
   $454 = HEAP32[$453>>2]|0;
   $455 = ((33572424 + ($436<<3)|0) + 4|0);
   $456 = HEAP8[$455>>0]|0;
   $457 = $456&255;
   $458 = ((($ptree) + ($457<<2)|0) + 44|0);
   $459 = HEAP32[$458>>2]|0;
   $460 = ((33572424 + ($436<<3)|0) + 5|0);
   $461 = HEAP8[$460>>0]|0;
   $462 = $461&255;
   $463 = $459 >>> $462;
   $464 = $463 & 127;
   $465 = ((33579904 + (($436*1536)|0)|0) + (($464*12)|0)|0);
   $466 = HEAP32[$465>>2]|0;
   $467 = $466 | $454;
   $468 = (((33704320 + (($436*1536)|0)|0) + (($452*12)|0)|0) + 4|0);
   $469 = HEAP32[$468>>2]|0;
   $470 = (((33579904 + (($436*1536)|0)|0) + (($464*12)|0)|0) + 4|0);
   $471 = HEAP32[$470>>2]|0;
   $472 = $471 | $469;
   $473 = (((33704320 + (($436*1536)|0)|0) + (($452*12)|0)|0) + 8|0);
   $474 = HEAP32[$473>>2]|0;
   $475 = (((33579904 + (($436*1536)|0)|0) + (($464*12)|0)|0) + 8|0);
   $476 = HEAP32[$475>>2]|0;
   $477 = $476 | $474;
   $478 = (33578928 + (($436*12)|0)|0);
   $479 = HEAP32[$478>>2]|0;
   $480 = $467 | $479;
   $481 = ((33578928 + (($436*12)|0)|0) + 4|0);
   $482 = HEAP32[$481>>2]|0;
   $483 = $472 | $482;
   $484 = ((33578928 + (($436*12)|0)|0) + 8|0);
   $485 = HEAP32[$484>>2]|0;
   $486 = $477 | $485;
   $487 = $480 & $1;
   $488 = $483 & $3;
   $489 = $486 & $5;
   $490 = $488 | $489;
   $491 = $490 | $487;
   $492 = ($491|0)==(0);
   if ($492) {
    $$12$lcssa = $$1152;
   } else {
    $493 = $436 << 7;
    $$1245 = $$1152;$bb_desti$sroa$0$648 = $487;$bb_desti$sroa$1$647 = $488;$bb_desti$sroa$2$646 = $489;
    while(1) {
     $494 = (_first_one012($bb_desti$sroa$0$648,$bb_desti$sroa$1$647,$bb_desti$sroa$2$646)|0);
     $495 = (34156304 + (($494*12)|0)|0);
     $496 = HEAP32[$495>>2]|0;
     $497 = $496 ^ $bb_desti$sroa$0$648;
     $498 = ((34156304 + (($494*12)|0)|0) + 4|0);
     $499 = HEAP32[$498>>2]|0;
     $500 = $499 ^ $bb_desti$sroa$1$647;
     $501 = ((34156304 + (($494*12)|0)|0) + 8|0);
     $502 = HEAP32[$501>>2]|0;
     $503 = $502 ^ $bb_desti$sroa$2$646;
     $504 = ((($ptree) + ($494)|0) + 512|0);
     $505 = HEAP8[$504>>0]|0;
     $506 = $505 << 24 >> 24;
     $507 = $506 << 19;
     $508 = $493 | $494;
     $509 = $508 | $507;
     $510 = $509 | 458752;
     $511 = (($$1245) + 4|0);
     HEAP32[$$1245>>2] = $510;
     $512 = $500 | $503;
     $513 = $512 | $497;
     $514 = ($513|0)==(0);
     if ($514) {
      $$12$lcssa = $511;
      break;
     } else {
      $$1245 = $511;$bb_desti$sroa$0$648 = $497;$bb_desti$sroa$1$647 = $500;$bb_desti$sroa$2$646 = $503;
     }
    }
   }
   $430 = $431 | $432;
   $433 = $430 | $434;
   $435 = ($433|0)==(0);
   if ($435) {
    $$11$lcssa = $$12$lcssa;
    break;
   } else {
    $$1152 = $$12$lcssa;$bb_piece$sroa$0$455 = $434;$bb_piece$sroa$1$454 = $431;$bb_piece$sroa$2$453 = $432;
   }
  }
 }
 $515 = (($ptree) + 344|0);
 $516 = HEAP32[$515>>2]|0;
 $517 = (($ptree) + 348|0);
 $518 = HEAP32[$517>>2]|0;
 $519 = (($ptree) + 352|0);
 $520 = HEAP32[$519>>2]|0;
 $521 = $518 | $520;
 $522 = $521 | $516;
 $523 = ($522|0)==(0);
 if ($523) {
  $$13$lcssa = $$11$lcssa;
 } else {
  $$1336 = $$11$lcssa;$bb_piece$sroa$0$539 = $516;$bb_piece$sroa$1$538 = $518;$bb_piece$sroa$2$537 = $520;
  while(1) {
   $530 = (_first_one012($bb_piece$sroa$0$539,$bb_piece$sroa$1$538,$bb_piece$sroa$2$537)|0);
   $531 = (34156304 + (($530*12)|0)|0);
   $532 = HEAP32[$531>>2]|0;
   $528 = $532 ^ $bb_piece$sroa$0$539;
   $533 = ((34156304 + (($530*12)|0)|0) + 4|0);
   $534 = HEAP32[$533>>2]|0;
   $525 = $534 ^ $bb_piece$sroa$1$538;
   $535 = ((34156304 + (($530*12)|0)|0) + 8|0);
   $536 = HEAP32[$535>>2]|0;
   $526 = $536 ^ $bb_piece$sroa$2$537;
   $537 = ((33572424 + ($530<<3)|0) + 2|0);
   $538 = HEAP8[$537>>0]|0;
   $539 = $538&255;
   $540 = ((($ptree) + ($539<<2)|0) + 32|0);
   $541 = HEAP32[$540>>2]|0;
   $542 = ((33572424 + ($530<<3)|0) + 3|0);
   $543 = HEAP8[$542>>0]|0;
   $544 = $543&255;
   $545 = $541 >>> $544;
   $546 = $545 & 127;
   $547 = ((33953152 + (($530*1536)|0)|0) + (($546*12)|0)|0);
   $548 = HEAP32[$547>>2]|0;
   $549 = (33572424 + ($530<<3)|0);
   $550 = HEAP8[$549>>0]|0;
   $551 = $550&255;
   $552 = ((($ptree) + ($551<<2)|0) + 8|0);
   $553 = HEAP32[$552>>2]|0;
   $554 = ((($ptree) + ($551<<2)|0) + 20|0);
   $555 = HEAP32[$554>>2]|0;
   $556 = $555 | $553;
   $557 = ((33572424 + ($530<<3)|0) + 1|0);
   $558 = HEAP8[$557>>0]|0;
   $559 = $558&255;
   $560 = $556 >>> $559;
   $561 = $560 & 127;
   $562 = ((33828736 + (($530*1536)|0)|0) + (($561*12)|0)|0);
   $563 = HEAP32[$562>>2]|0;
   $564 = $563 | $548;
   $565 = (((33953152 + (($530*1536)|0)|0) + (($546*12)|0)|0) + 4|0);
   $566 = HEAP32[$565>>2]|0;
   $567 = (((33828736 + (($530*1536)|0)|0) + (($561*12)|0)|0) + 4|0);
   $568 = HEAP32[$567>>2]|0;
   $569 = $568 | $566;
   $570 = (((33953152 + (($530*1536)|0)|0) + (($546*12)|0)|0) + 8|0);
   $571 = HEAP32[$570>>2]|0;
   $572 = (((33828736 + (($530*1536)|0)|0) + (($561*12)|0)|0) + 8|0);
   $573 = HEAP32[$572>>2]|0;
   $574 = $573 | $571;
   $575 = (33578928 + (($530*12)|0)|0);
   $576 = HEAP32[$575>>2]|0;
   $577 = $564 | $576;
   $578 = ((33578928 + (($530*12)|0)|0) + 4|0);
   $579 = HEAP32[$578>>2]|0;
   $580 = $569 | $579;
   $581 = ((33578928 + (($530*12)|0)|0) + 8|0);
   $582 = HEAP32[$581>>2]|0;
   $583 = $574 | $582;
   $584 = $577 & $1;
   $585 = $580 & $3;
   $586 = $583 & $5;
   $587 = $585 | $586;
   $588 = $587 | $584;
   $589 = ($588|0)==(0);
   if ($589) {
    $$14$lcssa = $$1336;
   } else {
    $590 = $530 << 7;
    $$1429 = $$1336;$bb_desti$sroa$0$732 = $584;$bb_desti$sroa$1$731 = $585;$bb_desti$sroa$2$730 = $586;
    while(1) {
     $591 = (_first_one012($bb_desti$sroa$0$732,$bb_desti$sroa$1$731,$bb_desti$sroa$2$730)|0);
     $592 = (34156304 + (($591*12)|0)|0);
     $593 = HEAP32[$592>>2]|0;
     $594 = $593 ^ $bb_desti$sroa$0$732;
     $595 = ((34156304 + (($591*12)|0)|0) + 4|0);
     $596 = HEAP32[$595>>2]|0;
     $597 = $596 ^ $bb_desti$sroa$1$731;
     $598 = ((34156304 + (($591*12)|0)|0) + 8|0);
     $599 = HEAP32[$598>>2]|0;
     $600 = $599 ^ $bb_desti$sroa$2$730;
     $601 = ((($ptree) + ($591)|0) + 512|0);
     $602 = HEAP8[$601>>0]|0;
     $603 = $602 << 24 >> 24;
     $604 = $603 << 19;
     $605 = $590 | $591;
     $606 = $605 | $604;
     $607 = $606 | 491520;
     $608 = (($$1429) + 4|0);
     HEAP32[$$1429>>2] = $607;
     $609 = $597 | $600;
     $610 = $609 | $594;
     $611 = ($610|0)==(0);
     if ($611) {
      $$14$lcssa = $608;
      break;
     } else {
      $$1429 = $608;$bb_desti$sroa$0$732 = $594;$bb_desti$sroa$1$731 = $597;$bb_desti$sroa$2$730 = $600;
     }
    }
   }
   $524 = $525 | $526;
   $527 = $524 | $528;
   $529 = ($527|0)==(0);
   if ($529) {
    $$13$lcssa = $$14$lcssa;
    break;
   } else {
    $$1336 = $$14$lcssa;$bb_piece$sroa$0$539 = $528;$bb_piece$sroa$1$538 = $525;$bb_piece$sroa$2$537 = $526;
   }
  }
 }
 $612 = (($ptree) + 200|0);
 $613 = HEAP32[$612>>2]|0;
 $614 = (($ptree) + 204|0);
 $615 = HEAP32[$614>>2]|0;
 $616 = (($ptree) + 208|0);
 $617 = HEAP32[$616>>2]|0;
 $618 = $615 | $617;
 $619 = $618 | $613;
 $620 = ($619|0)==(0);
 if ($620) {
  $$15$lcssa = $$13$lcssa;
 } else {
  $$1520 = $$13$lcssa;$bb_piece$sroa$0$623 = $613;$bb_piece$sroa$1$622 = $615;$bb_piece$sroa$2$621 = $617;
  while(1) {
   $627 = (_first_one012($bb_piece$sroa$0$623,$bb_piece$sroa$1$622,$bb_piece$sroa$2$621)|0);
   $628 = (34156304 + (($627*12)|0)|0);
   $629 = HEAP32[$628>>2]|0;
   $625 = $629 ^ $bb_piece$sroa$0$623;
   $630 = ((34156304 + (($627*12)|0)|0) + 4|0);
   $631 = HEAP32[$630>>2]|0;
   $622 = $631 ^ $bb_piece$sroa$1$622;
   $632 = ((34156304 + (($627*12)|0)|0) + 8|0);
   $633 = HEAP32[$632>>2]|0;
   $623 = $633 ^ $bb_piece$sroa$2$621;
   $634 = ((33572424 + ($627<<3)|0) + 2|0);
   $635 = HEAP8[$634>>0]|0;
   $636 = $635&255;
   $637 = ((($ptree) + ($636<<2)|0) + 32|0);
   $638 = HEAP32[$637>>2]|0;
   $639 = ((33572424 + ($627<<3)|0) + 3|0);
   $640 = HEAP8[$639>>0]|0;
   $641 = $640&255;
   $642 = $638 >>> $641;
   $643 = $642 & 127;
   $644 = ((33953152 + (($627*1536)|0)|0) + (($643*12)|0)|0);
   $645 = HEAP32[$644>>2]|0;
   $646 = (((33953152 + (($627*1536)|0)|0) + (($643*12)|0)|0) + 4|0);
   $647 = HEAP32[$646>>2]|0;
   $648 = (((33953152 + (($627*1536)|0)|0) + (($643*12)|0)|0) + 8|0);
   $649 = HEAP32[$648>>2]|0;
   $650 = (34160208 + (($627*12)|0)|0);
   $651 = HEAP32[$650>>2]|0;
   $652 = ((34160208 + (($627*12)|0)|0) + 4|0);
   $653 = HEAP32[$652>>2]|0;
   $654 = ((34160208 + (($627*12)|0)|0) + 8|0);
   $655 = HEAP32[$654>>2]|0;
   $656 = $649 & $14;
   $657 = $656 & $655;
   $658 = $647 & $3;
   $659 = $658 & $653;
   $660 = $645 & $1;
   $661 = $660 & $651;
   $662 = $659 | $657;
   $663 = $662 | $661;
   $664 = ($663|0)==(0);
   if ($664) {
    $$16$lcssa = $$1520;
   } else {
    $665 = $627 << 7;
    $$1613 = $$1520;$bb_desti$sroa$0$816 = $661;$bb_desti$sroa$1$815 = $659;$bb_desti$sroa$2$814 = $657;
    while(1) {
     $666 = (_first_one012($bb_desti$sroa$0$816,$bb_desti$sroa$1$815,$bb_desti$sroa$2$814)|0);
     $667 = (34156304 + (($666*12)|0)|0);
     $668 = HEAP32[$667>>2]|0;
     $669 = $668 ^ $bb_desti$sroa$0$816;
     $670 = ((34156304 + (($666*12)|0)|0) + 4|0);
     $671 = HEAP32[$670>>2]|0;
     $672 = $671 ^ $bb_desti$sroa$1$815;
     $673 = ((34156304 + (($666*12)|0)|0) + 8|0);
     $674 = HEAP32[$673>>2]|0;
     $675 = $674 ^ $bb_desti$sroa$2$814;
     $676 = $666 | $665;
     $677 = ((($ptree) + ($666)|0) + 512|0);
     $678 = HEAP8[$677>>0]|0;
     $679 = $678 << 24 >> 24;
     $680 = $679 << 19;
     $681 = $676 | $680;
     $682 = $681 | 65536;
     $683 = ($666|0)>(62);
     do {
      if ($683) {
       $684 = $681 | 81920;
       $685 = (($$1613) + 4|0);
       HEAP32[$$1613>>2] = $684;
       $$16$be = $685;
      } else {
       $686 = ($666|0)>(53);
       if (!($686)) {
        $692 = (($$1613) + 4|0);
        HEAP32[$$1613>>2] = $682;
        $$16$be = $692;
        break;
       }
       $687 = $681 | 81920;
       $688 = (($$1613) + 4|0);
       HEAP32[$$1613>>2] = $687;
       $689 = $681 & 7864320;
       $690 = ($689|0)==(0);
       if ($690) {
        $$16$be = $688;
       } else {
        $691 = (($$1613) + 8|0);
        HEAP32[$688>>2] = $682;
        $$16$be = $691;
       }
      }
     } while(0);
     $693 = $672 | $675;
     $694 = $693 | $669;
     $695 = ($694|0)==(0);
     if ($695) {
      $$16$lcssa = $$16$be;
      break;
     } else {
      $$1613 = $$16$be;$bb_desti$sroa$0$816 = $669;$bb_desti$sroa$1$815 = $672;$bb_desti$sroa$2$814 = $675;
     }
    }
   }
   $621 = $622 | $623;
   $624 = $621 | $625;
   $626 = ($624|0)==(0);
   if ($626) {
    $$15$lcssa = $$16$lcssa;
    break;
   } else {
    $$1520 = $$16$lcssa;$bb_piece$sroa$0$623 = $625;$bb_piece$sroa$1$622 = $622;$bb_piece$sroa$2$621 = $623;
   }
  }
 }
 $696 = (($ptree) + 224|0);
 $697 = HEAP32[$696>>2]|0;
 $698 = (($ptree) + 228|0);
 $699 = HEAP32[$698>>2]|0;
 $700 = (($ptree) + 232|0);
 $701 = HEAP32[$700>>2]|0;
 $702 = $699 | $701;
 $703 = $702 | $697;
 $704 = ($703|0)==(0);
 if ($704) {
  $$17$lcssa = $$15$lcssa;
  STACKTOP = sp;return ($$17$lcssa|0);
 } else {
  $$175 = $$15$lcssa;$bb_piece$sroa$0$78 = $697;$bb_piece$sroa$1$77 = $699;$bb_piece$sroa$2$76 = $701;
 }
 while(1) {
  $711 = (_first_one012($bb_piece$sroa$0$78,$bb_piece$sroa$1$77,$bb_piece$sroa$2$76)|0);
  $712 = (34156304 + (($711*12)|0)|0);
  $713 = HEAP32[$712>>2]|0;
  $709 = $713 ^ $bb_piece$sroa$0$78;
  $714 = ((34156304 + (($711*12)|0)|0) + 4|0);
  $715 = HEAP32[$714>>2]|0;
  $706 = $715 ^ $bb_piece$sroa$1$77;
  $716 = ((34156304 + (($711*12)|0)|0) + 8|0);
  $717 = HEAP32[$716>>2]|0;
  $707 = $717 ^ $bb_piece$sroa$2$76;
  $718 = (33576000 + (($711*12)|0)|0);
  $719 = HEAP32[$718>>2]|0;
  $720 = ((33576000 + (($711*12)|0)|0) + 4|0);
  $721 = HEAP32[$720>>2]|0;
  $722 = ((33576000 + (($711*12)|0)|0) + 8|0);
  $723 = HEAP32[$722>>2]|0;
  $724 = $723 & $14;
  $725 = $721 & $3;
  $726 = $719 & $1;
  $727 = $725 | $724;
  $728 = $727 | $726;
  $729 = ($728|0)==(0);
  if ($729) {
   $$18$lcssa = $$175;
  } else {
   $730 = $711 << 7;
   $$181 = $$175;$bb_desti$sroa$0$94 = $726;$bb_desti$sroa$1$93 = $725;$bb_desti$sroa$2$92 = $724;
   while(1) {
    $731 = (_first_one012($bb_desti$sroa$0$94,$bb_desti$sroa$1$93,$bb_desti$sroa$2$92)|0);
    $732 = (34156304 + (($731*12)|0)|0);
    $733 = HEAP32[$732>>2]|0;
    $734 = $733 ^ $bb_desti$sroa$0$94;
    $735 = ((34156304 + (($731*12)|0)|0) + 4|0);
    $736 = HEAP32[$735>>2]|0;
    $737 = $736 ^ $bb_desti$sroa$1$93;
    $738 = ((34156304 + (($731*12)|0)|0) + 8|0);
    $739 = HEAP32[$738>>2]|0;
    $740 = $739 ^ $bb_desti$sroa$2$92;
    $741 = $731 | $730;
    $742 = ((($ptree) + ($731)|0) + 512|0);
    $743 = HEAP8[$742>>0]|0;
    $744 = $743 << 24 >> 24;
    $745 = $744 << 19;
    $746 = $741 | $745;
    $747 = $746 | 98304;
    $748 = ($731|0)>(62);
    do {
     if ($748) {
      $749 = $746 | 114688;
      $750 = (($$181) + 4|0);
      HEAP32[$$181>>2] = $749;
      $$18$be = $750;
     } else {
      $751 = ($731|0)>(53);
      if (!($751)) {
       $757 = (($$181) + 4|0);
       HEAP32[$$181>>2] = $747;
       $$18$be = $757;
       break;
      }
      $752 = $746 | 114688;
      $753 = (($$181) + 4|0);
      HEAP32[$$181>>2] = $752;
      $754 = $746 & 7864320;
      $755 = ($754|0)==(0);
      if ($755) {
       $$18$be = $753;
      } else {
       $756 = (($$181) + 8|0);
       HEAP32[$753>>2] = $747;
       $$18$be = $756;
      }
     }
    } while(0);
    $758 = $737 | $740;
    $759 = $758 | $734;
    $760 = ($759|0)==(0);
    if ($760) {
     $$18$lcssa = $$18$be;
     break;
    } else {
     $$181 = $$18$be;$bb_desti$sroa$0$94 = $734;$bb_desti$sroa$1$93 = $737;$bb_desti$sroa$2$92 = $740;
    }
   }
  }
  $705 = $706 | $707;
  $708 = $705 | $709;
  $710 = ($708|0)==(0);
  if ($710) {
   $$17$lcssa = $$18$lcssa;
   break;
  } else {
   $$175 = $$18$lcssa;$bb_piece$sroa$0$78 = $709;$bb_piece$sroa$1$77 = $706;$bb_piece$sroa$2$76 = $707;
  }
 }
 STACKTOP = sp;return ($$17$lcssa|0);
}
function _b_gen_nocaptures($ptree,$pmove) {
 $ptree = $ptree|0;
 $pmove = $pmove|0;
 var $$0$lcssa = 0, $$0127 = 0, $$1$lcssa = 0, $$10$lcssa = 0, $$1060 = 0, $$11$lcssa = 0, $$1119 = 0, $$1151 = 0, $$12$lcssa = 0, $$1244 = 0, $$13$lcssa = 0, $$1335 = 0, $$14$lcssa = 0, $$1428 = 0, $$15$lcssa = 0, $$1519 = 0, $$16$lcssa = 0, $$1612 = 0, $$17$lcssa = 0, $$175 = 0;
 var $$18$lcssa = 0, $$181 = 0, $$2$lcssa = 0, $$2112 = 0, $$2112$us = 0, $$3 = 0, $$4$lcssa = 0, $$4103 = 0, $$5$lcssa = 0, $$596 = 0, $$6$lcssa = 0, $$687 = 0, $$7$lcssa = 0, $$780 = 0, $$8$lcssa = 0, $$874 = 0, $$9$lcssa = 0, $$966 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bb_desti$sroa$0$0115 = 0, $bb_desti$sroa$0$0115$us = 0, $bb_desti$sroa$0$199 = 0, $bb_desti$sroa$0$290 = 0, $bb_desti$sroa$0$347 = 0, $bb_desti$sroa$0$431 = 0, $bb_desti$sroa$0$515 = 0, $bb_desti$sroa$0$64 = 0, $bb_desti$sroa$1$0114 = 0, $bb_desti$sroa$1$0114$us = 0, $bb_desti$sroa$1$198 = 0, $bb_desti$sroa$1$289 = 0;
 var $bb_desti$sroa$1$376 = 0, $bb_desti$sroa$1$462 = 0, $bb_desti$sroa$1$546 = 0, $bb_desti$sroa$1$630 = 0, $bb_desti$sroa$1$714 = 0, $bb_desti$sroa$1$83 = 0, $bb_desti$sroa$2$0113 = 0, $bb_desti$sroa$2$0113$us = 0, $bb_desti$sroa$2$197 = 0, $bb_desti$sroa$2$288 = 0, $bb_desti$sroa$2$375 = 0, $bb_desti$sroa$2$461 = 0, $bb_desti$sroa$2$545 = 0, $bb_desti$sroa$2$629 = 0, $bb_desti$sroa$2$713 = 0, $bb_desti$sroa$2$82 = 0, $bb_piece$sroa$0$0122 = 0, $bb_piece$sroa$0$1106 = 0, $bb_piece$sroa$0$254 = 0, $bb_piece$sroa$0$338 = 0;
 var $bb_piece$sroa$0$422 = 0, $bb_piece$sroa$0$58 = 0, $bb_piece$sroa$1$0129 = 0, $bb_piece$sroa$1$1121 = 0, $bb_piece$sroa$1$2105 = 0, $bb_piece$sroa$1$382 = 0, $bb_piece$sroa$1$468 = 0, $bb_piece$sroa$1$553 = 0, $bb_piece$sroa$1$637 = 0, $bb_piece$sroa$1$721 = 0, $bb_piece$sroa$1$87 = 0, $bb_piece$sroa$2$0128 = 0, $bb_piece$sroa$2$1120 = 0, $bb_piece$sroa$2$2104 = 0, $bb_piece$sroa$2$381 = 0, $bb_piece$sroa$2$467 = 0, $bb_piece$sroa$2$552 = 0, $bb_piece$sroa$2$636 = 0, $bb_piece$sroa$2$720 = 0, $bb_piece$sroa$2$86 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ptree) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ptree) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | $1;
 $5 = (($ptree) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($ptree) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 | $6;
 $10 = (($ptree) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($ptree) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 | $11;
 $15 = $4 ^ -1;
 $16 = $9 ^ -1;
 $17 = $14 ^ -1;
 $18 = (($ptree) + 168|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & $16;
 $21 = (($ptree) + 172|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & $17;
 $24 = $20 | $23;
 $25 = ($24|0)==(0);
 if ($25) {
  $$0$lcssa = $pmove;
 } else {
  $$0127 = $pmove;$bb_piece$sroa$1$0129 = $20;$bb_piece$sroa$2$0128 = $23;
  while(1) {
   $26 = (_last_one12($bb_piece$sroa$1$0129,$bb_piece$sroa$2$0128)|0);
   $27 = ((34156304 + (($26*12)|0)|0) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 ^ $bb_piece$sroa$1$0129;
   $30 = ((34156304 + (($26*12)|0)|0) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $31 ^ $bb_piece$sroa$2$0128;
   $33 = $26 << 7;
   $34 = (($33) + 1152)|0;
   $35 = $26 | $34;
   $36 = $35 | 32768;
   $37 = (($$0127) + 4|0);
   HEAP32[$$0127>>2] = $36;
   $38 = $29 | $32;
   $39 = ($38|0)==(0);
   if ($39) {
    $$0$lcssa = $37;
    break;
   } else {
    $$0127 = $37;$bb_piece$sroa$1$0129 = $29;$bb_piece$sroa$2$0128 = $32;
   }
  }
 }
 $40 = (($ptree) + 236|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($ptree) + 240|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($ptree) + 244|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $43 | $45;
 $47 = $46 | $41;
 $48 = ($47|0)==(0);
 if ($48) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$1119 = $$0$lcssa;$bb_piece$sroa$0$0122 = $41;$bb_piece$sroa$1$1121 = $43;$bb_piece$sroa$2$1120 = $45;
  while(1) {
   $55 = (_last_one210($bb_piece$sroa$2$1120,$bb_piece$sroa$1$1121,$bb_piece$sroa$0$0122)|0);
   $56 = (34156304 + (($55*12)|0)|0);
   $57 = HEAP32[$56>>2]|0;
   $53 = $57 ^ $bb_piece$sroa$0$0122;
   $58 = ((34156304 + (($55*12)|0)|0) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $50 = $59 ^ $bb_piece$sroa$1$1121;
   $60 = ((34156304 + (($55*12)|0)|0) + 8|0);
   $61 = HEAP32[$60>>2]|0;
   $51 = $61 ^ $bb_piece$sroa$2$1120;
   $62 = (33574048 + (($55*12)|0)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 & $15;
   $65 = ((33574048 + (($55*12)|0)|0) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 & $16;
   $68 = ((33574048 + (($55*12)|0)|0) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $69 & $17;
   $71 = $67 | $70;
   $72 = $71 | $64;
   $73 = ($72|0)==(0);
   L8: do {
    if ($73) {
     $$2$lcssa = $$1119;
    } else {
     $74 = $55 << 7;
     $75 = ($55|0)<(27);
     if ($75) {
      $$2112$us = $$1119;$bb_desti$sroa$0$0115$us = $64;$bb_desti$sroa$1$0114$us = $67;$bb_desti$sroa$2$0113$us = $70;
      while(1) {
       $76 = (_last_one210($bb_desti$sroa$2$0113$us,$bb_desti$sroa$1$0114$us,$bb_desti$sroa$0$0115$us)|0);
       $77 = (34156304 + (($76*12)|0)|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = $78 ^ $bb_desti$sroa$0$0115$us;
       $80 = ((34156304 + (($76*12)|0)|0) + 4|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = $81 ^ $bb_desti$sroa$1$0114$us;
       $83 = ((34156304 + (($76*12)|0)|0) + 8|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = $84 ^ $bb_desti$sroa$2$0113$us;
       $86 = $76 | $74;
       $87 = $86 | 131072;
       $88 = $86 | 147456;
       $89 = (($$2112$us) + 4|0);
       HEAP32[$$2112$us>>2] = $88;
       $90 = (($$2112$us) + 8|0);
       HEAP32[$89>>2] = $87;
       $91 = $82 | $85;
       $92 = $91 | $79;
       $93 = ($92|0)==(0);
       if ($93) {
        $$2$lcssa = $90;
        break L8;
       } else {
        $$2112$us = $90;$bb_desti$sroa$0$0115$us = $79;$bb_desti$sroa$1$0114$us = $82;$bb_desti$sroa$2$0113$us = $85;
       }
      }
     } else {
      $$2112 = $$1119;$bb_desti$sroa$0$0115 = $64;$bb_desti$sroa$1$0114 = $67;$bb_desti$sroa$2$0113 = $70;
     }
     while(1) {
      $94 = (_last_one210($bb_desti$sroa$2$0113,$bb_desti$sroa$1$0114,$bb_desti$sroa$0$0115)|0);
      $95 = (34156304 + (($94*12)|0)|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = $96 ^ $bb_desti$sroa$0$0115;
      $98 = ((34156304 + (($94*12)|0)|0) + 4|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = $99 ^ $bb_desti$sroa$1$0114;
      $101 = ((34156304 + (($94*12)|0)|0) + 8|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = $102 ^ $bb_desti$sroa$2$0113;
      $104 = $94 | $74;
      $105 = $104 | 131072;
      $106 = ($94|0)<(27);
      if ($106) {
       $107 = $104 | 147456;
       $108 = (($$2112) + 4|0);
       HEAP32[$$2112>>2] = $107;
       $$3 = $108;
      } else {
       $$3 = $$2112;
      }
      $109 = (($$3) + 4|0);
      HEAP32[$$3>>2] = $105;
      $110 = $100 | $103;
      $111 = $110 | $97;
      $112 = ($111|0)==(0);
      if ($112) {
       $$2$lcssa = $109;
       break;
      } else {
       $$2112 = $109;$bb_desti$sroa$0$0115 = $97;$bb_desti$sroa$1$0114 = $100;$bb_desti$sroa$2$0113 = $103;
      }
     }
    }
   } while(0);
   $49 = $50 | $51;
   $52 = $49 | $53;
   $54 = ($52|0)==(0);
   if ($54) {
    $$1$lcssa = $$2$lcssa;
    break;
   } else {
    $$1119 = $$2$lcssa;$bb_piece$sroa$0$0122 = $53;$bb_piece$sroa$1$1121 = $50;$bb_piece$sroa$2$1120 = $51;
   }
  }
 }
 $113 = (($ptree) + 92|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (($ptree) + 96|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = (($ptree) + 100|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = $116 | $118;
 $120 = $119 | $114;
 $121 = ($120|0)==(0);
 if ($121) {
  $$4$lcssa = $$1$lcssa;
 } else {
  $$4103 = $$1$lcssa;$bb_piece$sroa$0$1106 = $114;$bb_piece$sroa$1$2105 = $116;$bb_piece$sroa$2$2104 = $118;
  while(1) {
   $128 = (_last_one210($bb_piece$sroa$2$2104,$bb_piece$sroa$1$2105,$bb_piece$sroa$0$1106)|0);
   $129 = (34156304 + (($128*12)|0)|0);
   $130 = HEAP32[$129>>2]|0;
   $126 = $130 ^ $bb_piece$sroa$0$1106;
   $131 = ((34156304 + (($128*12)|0)|0) + 4|0);
   $132 = HEAP32[$131>>2]|0;
   $123 = $132 ^ $bb_piece$sroa$1$2105;
   $133 = ((34156304 + (($128*12)|0)|0) + 8|0);
   $134 = HEAP32[$133>>2]|0;
   $124 = $134 ^ $bb_piece$sroa$2$2104;
   $135 = (33575024 + (($128*12)|0)|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = $136 & $15;
   $138 = ((33575024 + (($128*12)|0)|0) + 4|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $139 & $16;
   $141 = ((33575024 + (($128*12)|0)|0) + 8|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = $142 & $17;
   $144 = $128 << 7;
   $145 = ((($ptree) + ($128)|0) + 512|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146 << 24 >> 24;
   $148 = $147 << 15;
   $149 = $148 | $144;
   $150 = $140 | $143;
   $151 = $150 | $137;
   $152 = ($151|0)==(0);
   if ($152) {
    $$5$lcssa = $$4103;
   } else {
    $$596 = $$4103;$bb_desti$sroa$0$199 = $137;$bb_desti$sroa$1$198 = $140;$bb_desti$sroa$2$197 = $143;
    while(1) {
     $153 = (_last_one210($bb_desti$sroa$2$197,$bb_desti$sroa$1$198,$bb_desti$sroa$0$199)|0);
     $154 = (34156304 + (($153*12)|0)|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = $155 ^ $bb_desti$sroa$0$199;
     $157 = ((34156304 + (($153*12)|0)|0) + 4|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = $158 ^ $bb_desti$sroa$1$198;
     $160 = ((34156304 + (($153*12)|0)|0) + 8|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = $161 ^ $bb_desti$sroa$2$197;
     $163 = $149 | $153;
     $164 = (($$596) + 4|0);
     HEAP32[$$596>>2] = $163;
     $165 = $159 | $162;
     $166 = $165 | $156;
     $167 = ($166|0)==(0);
     if ($167) {
      $$5$lcssa = $164;
      break;
     } else {
      $$596 = $164;$bb_desti$sroa$0$199 = $156;$bb_desti$sroa$1$198 = $159;$bb_desti$sroa$2$197 = $162;
     }
    }
   }
   $122 = $123 | $124;
   $125 = $122 | $126;
   $127 = ($125|0)==(0);
   if ($127) {
    $$4$lcssa = $$5$lcssa;
    break;
   } else {
    $$4103 = $$5$lcssa;$bb_piece$sroa$0$1106 = $126;$bb_piece$sroa$1$2105 = $123;$bb_piece$sroa$2$2104 = $124;
   }
  }
 }
 $168 = (($ptree) + 593|0);
 $169 = HEAP8[$168>>0]|0;
 $170 = $169&255;
 $171 = (33578928 + (($170*12)|0)|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = $172 & $15;
 $174 = ((33578928 + (($170*12)|0)|0) + 4|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = $175 & $16;
 $177 = ((33578928 + (($170*12)|0)|0) + 8|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = $178 & $17;
 $180 = $170 << 7;
 $181 = $176 | $179;
 $182 = $181 | $173;
 $183 = ($182|0)==(0);
 if ($183) {
  $$6$lcssa = $$4$lcssa;
 } else {
  $$687 = $$4$lcssa;$bb_desti$sroa$0$290 = $173;$bb_desti$sroa$1$289 = $176;$bb_desti$sroa$2$288 = $179;
  while(1) {
   $184 = (_last_one210($bb_desti$sroa$2$288,$bb_desti$sroa$1$289,$bb_desti$sroa$0$290)|0);
   $185 = (34156304 + (($184*12)|0)|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = $186 ^ $bb_desti$sroa$0$290;
   $188 = ((34156304 + (($184*12)|0)|0) + 4|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = $189 ^ $bb_desti$sroa$1$289;
   $191 = ((34156304 + (($184*12)|0)|0) + 8|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = $192 ^ $bb_desti$sroa$2$288;
   $194 = $180 | $184;
   $195 = $194 | 262144;
   $196 = (($$687) + 4|0);
   HEAP32[$$687>>2] = $195;
   $197 = $190 | $193;
   $198 = $197 | $187;
   $199 = ($198|0)==(0);
   if ($199) {
    $$6$lcssa = $196;
    break;
   } else {
    $$687 = $196;$bb_desti$sroa$0$290 = $187;$bb_desti$sroa$1$289 = $190;$bb_desti$sroa$2$288 = $193;
   }
  }
 }
 $200 = (($ptree) + 264|0);
 $201 = HEAP32[$200>>2]|0;
 $202 = (($ptree) + 268|0);
 $203 = HEAP32[$202>>2]|0;
 $204 = $201 | $203;
 $205 = ($204|0)==(0);
 if ($205) {
  $$7$lcssa = $$6$lcssa;
 } else {
  $$780 = $$6$lcssa;$bb_piece$sroa$1$382 = $201;$bb_piece$sroa$2$381 = $203;
  while(1) {
   $210 = (_last_one12($bb_piece$sroa$1$382,$bb_piece$sroa$2$381)|0);
   $211 = ((34156304 + (($210*12)|0)|0) + 4|0);
   $212 = HEAP32[$211>>2]|0;
   $207 = $212 ^ $bb_piece$sroa$1$382;
   $213 = ((34156304 + (($210*12)|0)|0) + 8|0);
   $214 = HEAP32[$213>>2]|0;
   $208 = $214 ^ $bb_piece$sroa$2$381;
   $215 = ((33572424 + ($210<<3)|0) + 6|0);
   $216 = HEAP8[$215>>0]|0;
   $217 = $216&255;
   $218 = ((($ptree) + ($217<<2)|0) + 56|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = ((33572424 + ($210<<3)|0) + 7|0);
   $221 = HEAP8[$220>>0]|0;
   $222 = $221&255;
   $223 = $219 >>> $222;
   $224 = $223 & 127;
   $225 = ((33572424 + ($210<<3)|0) + 4|0);
   $226 = HEAP8[$225>>0]|0;
   $227 = $226&255;
   $228 = ((($ptree) + ($227<<2)|0) + 44|0);
   $229 = HEAP32[$228>>2]|0;
   $230 = ((33572424 + ($210<<3)|0) + 5|0);
   $231 = HEAP8[$230>>0]|0;
   $232 = $231&255;
   $233 = $229 >>> $232;
   $234 = $233 & 127;
   $235 = (((33704320 + (($210*1536)|0)|0) + (($224*12)|0)|0) + 4|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = (((33579904 + (($210*1536)|0)|0) + (($234*12)|0)|0) + 4|0);
   $238 = HEAP32[$237>>2]|0;
   $239 = $238 | $236;
   $240 = (((33704320 + (($210*1536)|0)|0) + (($224*12)|0)|0) + 8|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = (((33579904 + (($210*1536)|0)|0) + (($234*12)|0)|0) + 8|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = $243 | $241;
   $245 = $239 & $16;
   $246 = $244 & $17;
   $247 = $210 << 7;
   $248 = $245 | $246;
   $249 = ($248|0)==(0);
   if ($249) {
    $$8$lcssa = $$780;
   } else {
    $$874 = $$780;$bb_desti$sroa$1$376 = $245;$bb_desti$sroa$2$375 = $246;
    while(1) {
     $250 = (_last_one12($bb_desti$sroa$1$376,$bb_desti$sroa$2$375)|0);
     $251 = ((34156304 + (($250*12)|0)|0) + 4|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = $252 ^ $bb_desti$sroa$1$376;
     $254 = ((34156304 + (($250*12)|0)|0) + 8|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = $255 ^ $bb_desti$sroa$2$375;
     $257 = $247 | $250;
     $258 = $257 | 196608;
     $259 = (($$874) + 4|0);
     HEAP32[$$874>>2] = $258;
     $260 = $253 | $256;
     $261 = ($260|0)==(0);
     if ($261) {
      $$8$lcssa = $259;
      break;
     } else {
      $$874 = $259;$bb_desti$sroa$1$376 = $253;$bb_desti$sroa$2$375 = $256;
     }
    }
   }
   $206 = $207 | $208;
   $209 = ($206|0)==(0);
   if ($209) {
    $$7$lcssa = $$8$lcssa;
    break;
   } else {
    $$780 = $$8$lcssa;$bb_piece$sroa$1$382 = $207;$bb_piece$sroa$2$381 = $208;
   }
  }
 }
 $262 = (($ptree) + 288|0);
 $263 = HEAP32[$262>>2]|0;
 $264 = (($ptree) + 292|0);
 $265 = HEAP32[$264>>2]|0;
 $266 = $263 | $265;
 $267 = ($266|0)==(0);
 if ($267) {
  $$9$lcssa = $$7$lcssa;
 } else {
  $$966 = $$7$lcssa;$bb_piece$sroa$1$468 = $263;$bb_piece$sroa$2$467 = $265;
  while(1) {
   $272 = (_last_one12($bb_piece$sroa$1$468,$bb_piece$sroa$2$467)|0);
   $273 = ((34156304 + (($272*12)|0)|0) + 4|0);
   $274 = HEAP32[$273>>2]|0;
   $269 = $274 ^ $bb_piece$sroa$1$468;
   $275 = ((34156304 + (($272*12)|0)|0) + 8|0);
   $276 = HEAP32[$275>>2]|0;
   $270 = $276 ^ $bb_piece$sroa$2$467;
   $277 = ((33572424 + ($272<<3)|0) + 2|0);
   $278 = HEAP8[$277>>0]|0;
   $279 = $278&255;
   $280 = ((($ptree) + ($279<<2)|0) + 32|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = ((33572424 + ($272<<3)|0) + 3|0);
   $283 = HEAP8[$282>>0]|0;
   $284 = $283&255;
   $285 = $281 >>> $284;
   $286 = $285 & 127;
   $287 = (33572424 + ($272<<3)|0);
   $288 = HEAP8[$287>>0]|0;
   $289 = $288&255;
   $290 = ((($ptree) + ($289<<2)|0) + 8|0);
   $291 = HEAP32[$290>>2]|0;
   $292 = ((($ptree) + ($289<<2)|0) + 20|0);
   $293 = HEAP32[$292>>2]|0;
   $294 = $293 | $291;
   $295 = ((33572424 + ($272<<3)|0) + 1|0);
   $296 = HEAP8[$295>>0]|0;
   $297 = $296&255;
   $298 = $294 >>> $297;
   $299 = $298 & 127;
   $300 = (((33953152 + (($272*1536)|0)|0) + (($286*12)|0)|0) + 4|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = (((33828736 + (($272*1536)|0)|0) + (($299*12)|0)|0) + 4|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = $303 | $301;
   $305 = (((33953152 + (($272*1536)|0)|0) + (($286*12)|0)|0) + 8|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = (((33828736 + (($272*1536)|0)|0) + (($299*12)|0)|0) + 8|0);
   $308 = HEAP32[$307>>2]|0;
   $309 = $308 | $306;
   $310 = $304 & $16;
   $311 = $309 & $17;
   $312 = $272 << 7;
   $313 = $310 | $311;
   $314 = ($313|0)==(0);
   if ($314) {
    $$10$lcssa = $$966;
   } else {
    $$1060 = $$966;$bb_desti$sroa$1$462 = $310;$bb_desti$sroa$2$461 = $311;
    while(1) {
     $315 = (_last_one12($bb_desti$sroa$1$462,$bb_desti$sroa$2$461)|0);
     $316 = ((34156304 + (($315*12)|0)|0) + 4|0);
     $317 = HEAP32[$316>>2]|0;
     $318 = $317 ^ $bb_desti$sroa$1$462;
     $319 = ((34156304 + (($315*12)|0)|0) + 8|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = $320 ^ $bb_desti$sroa$2$461;
     $322 = $312 | $315;
     $323 = $322 | 229376;
     $324 = (($$1060) + 4|0);
     HEAP32[$$1060>>2] = $323;
     $325 = $318 | $321;
     $326 = ($325|0)==(0);
     if ($326) {
      $$10$lcssa = $324;
      break;
     } else {
      $$1060 = $324;$bb_desti$sroa$1$462 = $318;$bb_desti$sroa$2$461 = $321;
     }
    }
   }
   $268 = $269 | $270;
   $271 = ($268|0)==(0);
   if ($271) {
    $$9$lcssa = $$10$lcssa;
    break;
   } else {
    $$966 = $$10$lcssa;$bb_piece$sroa$1$468 = $269;$bb_piece$sroa$2$467 = $270;
   }
  }
 }
 $327 = (($ptree) + 308|0);
 $328 = HEAP32[$327>>2]|0;
 $329 = (($ptree) + 312|0);
 $330 = HEAP32[$329>>2]|0;
 $331 = (($ptree) + 316|0);
 $332 = HEAP32[$331>>2]|0;
 $333 = $330 | $332;
 $334 = $333 | $328;
 $335 = ($334|0)==(0);
 if ($335) {
  $$11$lcssa = $$9$lcssa;
 } else {
  $$1151 = $$9$lcssa;$bb_piece$sroa$0$254 = $328;$bb_piece$sroa$1$553 = $330;$bb_piece$sroa$2$552 = $332;
  while(1) {
   $342 = (_last_one210($bb_piece$sroa$2$552,$bb_piece$sroa$1$553,$bb_piece$sroa$0$254)|0);
   $343 = (34156304 + (($342*12)|0)|0);
   $344 = HEAP32[$343>>2]|0;
   $340 = $344 ^ $bb_piece$sroa$0$254;
   $345 = ((34156304 + (($342*12)|0)|0) + 4|0);
   $346 = HEAP32[$345>>2]|0;
   $337 = $346 ^ $bb_piece$sroa$1$553;
   $347 = ((34156304 + (($342*12)|0)|0) + 8|0);
   $348 = HEAP32[$347>>2]|0;
   $338 = $348 ^ $bb_piece$sroa$2$552;
   $349 = ((33572424 + ($342<<3)|0) + 6|0);
   $350 = HEAP8[$349>>0]|0;
   $351 = $350&255;
   $352 = ((($ptree) + ($351<<2)|0) + 56|0);
   $353 = HEAP32[$352>>2]|0;
   $354 = ((33572424 + ($342<<3)|0) + 7|0);
   $355 = HEAP8[$354>>0]|0;
   $356 = $355&255;
   $357 = $353 >>> $356;
   $358 = $357 & 127;
   $359 = ((33704320 + (($342*1536)|0)|0) + (($358*12)|0)|0);
   $360 = HEAP32[$359>>2]|0;
   $361 = ((33572424 + ($342<<3)|0) + 4|0);
   $362 = HEAP8[$361>>0]|0;
   $363 = $362&255;
   $364 = ((($ptree) + ($363<<2)|0) + 44|0);
   $365 = HEAP32[$364>>2]|0;
   $366 = ((33572424 + ($342<<3)|0) + 5|0);
   $367 = HEAP8[$366>>0]|0;
   $368 = $367&255;
   $369 = $365 >>> $368;
   $370 = $369 & 127;
   $371 = ((33579904 + (($342*1536)|0)|0) + (($370*12)|0)|0);
   $372 = HEAP32[$371>>2]|0;
   $373 = $372 | $360;
   $374 = (((33704320 + (($342*1536)|0)|0) + (($358*12)|0)|0) + 4|0);
   $375 = HEAP32[$374>>2]|0;
   $376 = (((33579904 + (($342*1536)|0)|0) + (($370*12)|0)|0) + 4|0);
   $377 = HEAP32[$376>>2]|0;
   $378 = $377 | $375;
   $379 = (((33704320 + (($342*1536)|0)|0) + (($358*12)|0)|0) + 8|0);
   $380 = HEAP32[$379>>2]|0;
   $381 = (((33579904 + (($342*1536)|0)|0) + (($370*12)|0)|0) + 8|0);
   $382 = HEAP32[$381>>2]|0;
   $383 = $382 | $380;
   $384 = (33578928 + (($342*12)|0)|0);
   $385 = HEAP32[$384>>2]|0;
   $386 = $373 | $385;
   $387 = ((33578928 + (($342*12)|0)|0) + 4|0);
   $388 = HEAP32[$387>>2]|0;
   $389 = $378 | $388;
   $390 = ((33578928 + (($342*12)|0)|0) + 8|0);
   $391 = HEAP32[$390>>2]|0;
   $392 = $383 | $391;
   $393 = $386 & $15;
   $394 = $389 & $16;
   $395 = $392 & $17;
   $396 = $342 << 7;
   $397 = $394 | $395;
   $398 = $397 | $393;
   $399 = ($398|0)==(0);
   if ($399) {
    $$12$lcssa = $$1151;
   } else {
    $$1244 = $$1151;$bb_desti$sroa$0$347 = $393;$bb_desti$sroa$1$546 = $394;$bb_desti$sroa$2$545 = $395;
    while(1) {
     $400 = (_last_one210($bb_desti$sroa$2$545,$bb_desti$sroa$1$546,$bb_desti$sroa$0$347)|0);
     $401 = (34156304 + (($400*12)|0)|0);
     $402 = HEAP32[$401>>2]|0;
     $403 = $402 ^ $bb_desti$sroa$0$347;
     $404 = ((34156304 + (($400*12)|0)|0) + 4|0);
     $405 = HEAP32[$404>>2]|0;
     $406 = $405 ^ $bb_desti$sroa$1$546;
     $407 = ((34156304 + (($400*12)|0)|0) + 8|0);
     $408 = HEAP32[$407>>2]|0;
     $409 = $408 ^ $bb_desti$sroa$2$545;
     $410 = $396 | $400;
     $411 = $410 | 458752;
     $412 = (($$1244) + 4|0);
     HEAP32[$$1244>>2] = $411;
     $413 = $406 | $409;
     $414 = $413 | $403;
     $415 = ($414|0)==(0);
     if ($415) {
      $$12$lcssa = $412;
      break;
     } else {
      $$1244 = $412;$bb_desti$sroa$0$347 = $403;$bb_desti$sroa$1$546 = $406;$bb_desti$sroa$2$545 = $409;
     }
    }
   }
   $336 = $337 | $338;
   $339 = $336 | $340;
   $341 = ($339|0)==(0);
   if ($341) {
    $$11$lcssa = $$12$lcssa;
    break;
   } else {
    $$1151 = $$12$lcssa;$bb_piece$sroa$0$254 = $340;$bb_piece$sroa$1$553 = $337;$bb_piece$sroa$2$552 = $338;
   }
  }
 }
 $416 = (($ptree) + 332|0);
 $417 = HEAP32[$416>>2]|0;
 $418 = (($ptree) + 336|0);
 $419 = HEAP32[$418>>2]|0;
 $420 = (($ptree) + 340|0);
 $421 = HEAP32[$420>>2]|0;
 $422 = $419 | $421;
 $423 = $422 | $417;
 $424 = ($423|0)==(0);
 if ($424) {
  $$13$lcssa = $$11$lcssa;
 } else {
  $$1335 = $$11$lcssa;$bb_piece$sroa$0$338 = $417;$bb_piece$sroa$1$637 = $419;$bb_piece$sroa$2$636 = $421;
  while(1) {
   $431 = (_last_one210($bb_piece$sroa$2$636,$bb_piece$sroa$1$637,$bb_piece$sroa$0$338)|0);
   $432 = (34156304 + (($431*12)|0)|0);
   $433 = HEAP32[$432>>2]|0;
   $429 = $433 ^ $bb_piece$sroa$0$338;
   $434 = ((34156304 + (($431*12)|0)|0) + 4|0);
   $435 = HEAP32[$434>>2]|0;
   $426 = $435 ^ $bb_piece$sroa$1$637;
   $436 = ((34156304 + (($431*12)|0)|0) + 8|0);
   $437 = HEAP32[$436>>2]|0;
   $427 = $437 ^ $bb_piece$sroa$2$636;
   $438 = ((33572424 + ($431<<3)|0) + 2|0);
   $439 = HEAP8[$438>>0]|0;
   $440 = $439&255;
   $441 = ((($ptree) + ($440<<2)|0) + 32|0);
   $442 = HEAP32[$441>>2]|0;
   $443 = ((33572424 + ($431<<3)|0) + 3|0);
   $444 = HEAP8[$443>>0]|0;
   $445 = $444&255;
   $446 = $442 >>> $445;
   $447 = $446 & 127;
   $448 = ((33953152 + (($431*1536)|0)|0) + (($447*12)|0)|0);
   $449 = HEAP32[$448>>2]|0;
   $450 = (33572424 + ($431<<3)|0);
   $451 = HEAP8[$450>>0]|0;
   $452 = $451&255;
   $453 = ((($ptree) + ($452<<2)|0) + 8|0);
   $454 = HEAP32[$453>>2]|0;
   $455 = ((($ptree) + ($452<<2)|0) + 20|0);
   $456 = HEAP32[$455>>2]|0;
   $457 = $456 | $454;
   $458 = ((33572424 + ($431<<3)|0) + 1|0);
   $459 = HEAP8[$458>>0]|0;
   $460 = $459&255;
   $461 = $457 >>> $460;
   $462 = $461 & 127;
   $463 = ((33828736 + (($431*1536)|0)|0) + (($462*12)|0)|0);
   $464 = HEAP32[$463>>2]|0;
   $465 = $464 | $449;
   $466 = (((33953152 + (($431*1536)|0)|0) + (($447*12)|0)|0) + 4|0);
   $467 = HEAP32[$466>>2]|0;
   $468 = (((33828736 + (($431*1536)|0)|0) + (($462*12)|0)|0) + 4|0);
   $469 = HEAP32[$468>>2]|0;
   $470 = $469 | $467;
   $471 = (((33953152 + (($431*1536)|0)|0) + (($447*12)|0)|0) + 8|0);
   $472 = HEAP32[$471>>2]|0;
   $473 = (((33828736 + (($431*1536)|0)|0) + (($462*12)|0)|0) + 8|0);
   $474 = HEAP32[$473>>2]|0;
   $475 = $474 | $472;
   $476 = (33578928 + (($431*12)|0)|0);
   $477 = HEAP32[$476>>2]|0;
   $478 = $465 | $477;
   $479 = ((33578928 + (($431*12)|0)|0) + 4|0);
   $480 = HEAP32[$479>>2]|0;
   $481 = $470 | $480;
   $482 = ((33578928 + (($431*12)|0)|0) + 8|0);
   $483 = HEAP32[$482>>2]|0;
   $484 = $475 | $483;
   $485 = $478 & $15;
   $486 = $481 & $16;
   $487 = $484 & $17;
   $488 = $431 << 7;
   $489 = $486 | $487;
   $490 = $489 | $485;
   $491 = ($490|0)==(0);
   if ($491) {
    $$14$lcssa = $$1335;
   } else {
    $$1428 = $$1335;$bb_desti$sroa$0$431 = $485;$bb_desti$sroa$1$630 = $486;$bb_desti$sroa$2$629 = $487;
    while(1) {
     $492 = (_last_one210($bb_desti$sroa$2$629,$bb_desti$sroa$1$630,$bb_desti$sroa$0$431)|0);
     $493 = (34156304 + (($492*12)|0)|0);
     $494 = HEAP32[$493>>2]|0;
     $495 = $494 ^ $bb_desti$sroa$0$431;
     $496 = ((34156304 + (($492*12)|0)|0) + 4|0);
     $497 = HEAP32[$496>>2]|0;
     $498 = $497 ^ $bb_desti$sroa$1$630;
     $499 = ((34156304 + (($492*12)|0)|0) + 8|0);
     $500 = HEAP32[$499>>2]|0;
     $501 = $500 ^ $bb_desti$sroa$2$629;
     $502 = $488 | $492;
     $503 = $502 | 491520;
     $504 = (($$1428) + 4|0);
     HEAP32[$$1428>>2] = $503;
     $505 = $498 | $501;
     $506 = $505 | $495;
     $507 = ($506|0)==(0);
     if ($507) {
      $$14$lcssa = $504;
      break;
     } else {
      $$1428 = $504;$bb_desti$sroa$0$431 = $495;$bb_desti$sroa$1$630 = $498;$bb_desti$sroa$2$629 = $501;
     }
    }
   }
   $425 = $426 | $427;
   $428 = $425 | $429;
   $430 = ($428|0)==(0);
   if ($430) {
    $$13$lcssa = $$14$lcssa;
    break;
   } else {
    $$1335 = $$14$lcssa;$bb_piece$sroa$0$338 = $429;$bb_piece$sroa$1$637 = $426;$bb_piece$sroa$2$636 = $427;
   }
  }
 }
 $508 = $15 & 511;
 $509 = (($ptree) + 188|0);
 $510 = HEAP32[$509>>2]|0;
 $511 = (($ptree) + 192|0);
 $512 = HEAP32[$511>>2]|0;
 $513 = (($ptree) + 196|0);
 $514 = HEAP32[$513>>2]|0;
 $515 = $512 | $514;
 $516 = $515 | $510;
 $517 = ($516|0)==(0);
 if ($517) {
  $$15$lcssa = $$13$lcssa;
 } else {
  $$1519 = $$13$lcssa;$bb_piece$sroa$0$422 = $510;$bb_piece$sroa$1$721 = $512;$bb_piece$sroa$2$720 = $514;
  while(1) {
   $524 = (_last_one210($bb_piece$sroa$2$720,$bb_piece$sroa$1$721,$bb_piece$sroa$0$422)|0);
   $525 = (34156304 + (($524*12)|0)|0);
   $526 = HEAP32[$525>>2]|0;
   $522 = $526 ^ $bb_piece$sroa$0$422;
   $527 = ((34156304 + (($524*12)|0)|0) + 4|0);
   $528 = HEAP32[$527>>2]|0;
   $519 = $528 ^ $bb_piece$sroa$1$721;
   $529 = ((34156304 + (($524*12)|0)|0) + 8|0);
   $530 = HEAP32[$529>>2]|0;
   $520 = $530 ^ $bb_piece$sroa$2$720;
   $531 = ((33572424 + ($524<<3)|0) + 2|0);
   $532 = HEAP8[$531>>0]|0;
   $533 = $532&255;
   $534 = ((($ptree) + ($533<<2)|0) + 32|0);
   $535 = HEAP32[$534>>2]|0;
   $536 = ((33572424 + ($524<<3)|0) + 3|0);
   $537 = HEAP8[$536>>0]|0;
   $538 = $537&255;
   $539 = $535 >>> $538;
   $540 = $539 & 127;
   $541 = ((33953152 + (($524*1536)|0)|0) + (($540*12)|0)|0);
   $542 = HEAP32[$541>>2]|0;
   $543 = (((33953152 + (($524*1536)|0)|0) + (($540*12)|0)|0) + 4|0);
   $544 = HEAP32[$543>>2]|0;
   $545 = (((33953152 + (($524*1536)|0)|0) + (($540*12)|0)|0) + 8|0);
   $546 = HEAP32[$545>>2]|0;
   $547 = (34161184 + (($524*12)|0)|0);
   $548 = HEAP32[$547>>2]|0;
   $549 = ((34161184 + (($524*12)|0)|0) + 4|0);
   $550 = HEAP32[$549>>2]|0;
   $551 = ((34161184 + (($524*12)|0)|0) + 8|0);
   $552 = HEAP32[$551>>2]|0;
   $553 = $542 & $508;
   $554 = $553 & $548;
   $555 = $544 & $16;
   $556 = $555 & $550;
   $557 = $546 & $17;
   $558 = $557 & $552;
   $559 = $524 << 7;
   $560 = $556 | $558;
   $561 = $560 | $554;
   $562 = ($561|0)==(0);
   if ($562) {
    $$16$lcssa = $$1519;
   } else {
    $$1612 = $$1519;$bb_desti$sroa$0$515 = $554;$bb_desti$sroa$1$714 = $556;$bb_desti$sroa$2$713 = $558;
    while(1) {
     $563 = (_last_one210($bb_desti$sroa$2$713,$bb_desti$sroa$1$714,$bb_desti$sroa$0$515)|0);
     $564 = (34156304 + (($563*12)|0)|0);
     $565 = HEAP32[$564>>2]|0;
     $566 = $565 ^ $bb_desti$sroa$0$515;
     $567 = ((34156304 + (($563*12)|0)|0) + 4|0);
     $568 = HEAP32[$567>>2]|0;
     $569 = $568 ^ $bb_desti$sroa$1$714;
     $570 = ((34156304 + (($563*12)|0)|0) + 8|0);
     $571 = HEAP32[$570>>2]|0;
     $572 = $571 ^ $bb_desti$sroa$2$713;
     $573 = $559 | $563;
     $574 = $573 | 65536;
     $575 = (($$1612) + 4|0);
     HEAP32[$$1612>>2] = $574;
     $576 = $569 | $572;
     $577 = $576 | $566;
     $578 = ($577|0)==(0);
     if ($578) {
      $$16$lcssa = $575;
      break;
     } else {
      $$1612 = $575;$bb_desti$sroa$0$515 = $566;$bb_desti$sroa$1$714 = $569;$bb_desti$sroa$2$713 = $572;
     }
    }
   }
   $518 = $519 | $520;
   $521 = $518 | $522;
   $523 = ($521|0)==(0);
   if ($523) {
    $$15$lcssa = $$16$lcssa;
    break;
   } else {
    $$1519 = $$16$lcssa;$bb_piece$sroa$0$422 = $522;$bb_piece$sroa$1$721 = $519;$bb_piece$sroa$2$720 = $520;
   }
  }
 }
 $579 = (($ptree) + 212|0);
 $580 = HEAP32[$579>>2]|0;
 $581 = (($ptree) + 216|0);
 $582 = HEAP32[$581>>2]|0;
 $583 = (($ptree) + 220|0);
 $584 = HEAP32[$583>>2]|0;
 $585 = $582 | $584;
 $586 = $585 | $580;
 $587 = ($586|0)==(0);
 if ($587) {
  $$17$lcssa = $$15$lcssa;
  STACKTOP = sp;return ($$17$lcssa|0);
 } else {
  $$175 = $$15$lcssa;$bb_piece$sroa$0$58 = $580;$bb_piece$sroa$1$87 = $582;$bb_piece$sroa$2$86 = $584;
 }
 while(1) {
  $594 = (_last_one210($bb_piece$sroa$2$86,$bb_piece$sroa$1$87,$bb_piece$sroa$0$58)|0);
  $595 = (34156304 + (($594*12)|0)|0);
  $596 = HEAP32[$595>>2]|0;
  $592 = $596 ^ $bb_piece$sroa$0$58;
  $597 = ((34156304 + (($594*12)|0)|0) + 4|0);
  $598 = HEAP32[$597>>2]|0;
  $589 = $598 ^ $bb_piece$sroa$1$87;
  $599 = ((34156304 + (($594*12)|0)|0) + 8|0);
  $600 = HEAP32[$599>>2]|0;
  $590 = $600 ^ $bb_piece$sroa$2$86;
  $601 = (33573072 + (($594*12)|0)|0);
  $602 = HEAP32[$601>>2]|0;
  $603 = $602 & $508;
  $604 = ((33573072 + (($594*12)|0)|0) + 4|0);
  $605 = HEAP32[$604>>2]|0;
  $606 = $605 & $16;
  $607 = ((33573072 + (($594*12)|0)|0) + 8|0);
  $608 = HEAP32[$607>>2]|0;
  $609 = $608 & $17;
  $610 = $594 << 7;
  $611 = $606 | $609;
  $612 = $611 | $603;
  $613 = ($612|0)==(0);
  if ($613) {
   $$18$lcssa = $$175;
  } else {
   $$181 = $$175;$bb_desti$sroa$0$64 = $603;$bb_desti$sroa$1$83 = $606;$bb_desti$sroa$2$82 = $609;
   while(1) {
    $614 = (_last_one210($bb_desti$sroa$2$82,$bb_desti$sroa$1$83,$bb_desti$sroa$0$64)|0);
    $615 = (34156304 + (($614*12)|0)|0);
    $616 = HEAP32[$615>>2]|0;
    $617 = $616 ^ $bb_desti$sroa$0$64;
    $618 = ((34156304 + (($614*12)|0)|0) + 4|0);
    $619 = HEAP32[$618>>2]|0;
    $620 = $619 ^ $bb_desti$sroa$1$83;
    $621 = ((34156304 + (($614*12)|0)|0) + 8|0);
    $622 = HEAP32[$621>>2]|0;
    $623 = $622 ^ $bb_desti$sroa$2$82;
    $624 = $610 | $614;
    $625 = $624 | 98304;
    $626 = (($$181) + 4|0);
    HEAP32[$$181>>2] = $625;
    $627 = $620 | $623;
    $628 = $627 | $617;
    $629 = ($628|0)==(0);
    if ($629) {
     $$18$lcssa = $626;
     break;
    } else {
     $$181 = $626;$bb_desti$sroa$0$64 = $617;$bb_desti$sroa$1$83 = $620;$bb_desti$sroa$2$82 = $623;
    }
   }
  }
  $588 = $589 | $590;
  $591 = $588 | $592;
  $593 = ($591|0)==(0);
  if ($593) {
   $$17$lcssa = $$18$lcssa;
   break;
  } else {
   $$175 = $$18$lcssa;$bb_piece$sroa$0$58 = $592;$bb_piece$sroa$1$87 = $589;$bb_piece$sroa$2$86 = $590;
  }
 }
 STACKTOP = sp;return ($$17$lcssa|0);
}
function _w_gen_nocaptures($ptree,$pmove) {
 $ptree = $ptree|0;
 $pmove = $pmove|0;
 var $$0$lcssa = 0, $$0127 = 0, $$1$lcssa = 0, $$10$lcssa = 0, $$1060 = 0, $$11$lcssa = 0, $$1119 = 0, $$1151 = 0, $$12$lcssa = 0, $$1244 = 0, $$13$lcssa = 0, $$1335 = 0, $$14$lcssa = 0, $$1428 = 0, $$15$lcssa = 0, $$1519 = 0, $$16$lcssa = 0, $$1612 = 0, $$17$lcssa = 0, $$175 = 0;
 var $$18$lcssa = 0, $$181 = 0, $$2$lcssa = 0, $$2112 = 0, $$2112$us = 0, $$3 = 0, $$4$lcssa = 0, $$4103 = 0, $$5$lcssa = 0, $$596 = 0, $$6$lcssa = 0, $$687 = 0, $$7$lcssa = 0, $$780 = 0, $$8$lcssa = 0, $$874 = 0, $$9$lcssa = 0, $$966 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bb_desti$sroa$0$0115 = 0, $bb_desti$sroa$0$0115$us = 0, $bb_desti$sroa$0$199 = 0, $bb_desti$sroa$0$290 = 0, $bb_desti$sroa$0$376 = 0, $bb_desti$sroa$0$462 = 0, $bb_desti$sroa$0$547 = 0, $bb_desti$sroa$0$631 = 0, $bb_desti$sroa$0$715 = 0, $bb_desti$sroa$0$84 = 0, $bb_desti$sroa$1$0114 = 0;
 var $bb_desti$sroa$1$0114$us = 0, $bb_desti$sroa$1$198 = 0, $bb_desti$sroa$1$289 = 0, $bb_desti$sroa$1$375 = 0, $bb_desti$sroa$1$461 = 0, $bb_desti$sroa$1$546 = 0, $bb_desti$sroa$1$630 = 0, $bb_desti$sroa$1$714 = 0, $bb_desti$sroa$1$83 = 0, $bb_desti$sroa$2$0113 = 0, $bb_desti$sroa$2$0113$us = 0, $bb_desti$sroa$2$197 = 0, $bb_desti$sroa$2$288 = 0, $bb_desti$sroa$2$345 = 0, $bb_desti$sroa$2$429 = 0, $bb_desti$sroa$2$513 = 0, $bb_desti$sroa$2$62 = 0, $bb_piece$sroa$0$0129 = 0, $bb_piece$sroa$0$1122 = 0, $bb_piece$sroa$0$2106 = 0;
 var $bb_piece$sroa$0$382 = 0, $bb_piece$sroa$0$468 = 0, $bb_piece$sroa$0$554 = 0, $bb_piece$sroa$0$638 = 0, $bb_piece$sroa$0$722 = 0, $bb_piece$sroa$0$88 = 0, $bb_piece$sroa$1$0128 = 0, $bb_piece$sroa$1$1121 = 0, $bb_piece$sroa$1$2105 = 0, $bb_piece$sroa$1$381 = 0, $bb_piece$sroa$1$467 = 0, $bb_piece$sroa$1$553 = 0, $bb_piece$sroa$1$637 = 0, $bb_piece$sroa$1$721 = 0, $bb_piece$sroa$1$87 = 0, $bb_piece$sroa$2$0120 = 0, $bb_piece$sroa$2$1104 = 0, $bb_piece$sroa$2$252 = 0, $bb_piece$sroa$2$336 = 0, $bb_piece$sroa$2$420 = 0;
 var $bb_piece$sroa$2$56 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ptree) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ptree) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | $1;
 $5 = (($ptree) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($ptree) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 | $6;
 $10 = (($ptree) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($ptree) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 | $11;
 $15 = $4 ^ -1;
 $16 = $9 ^ -1;
 $17 = $14 ^ -1;
 $18 = (($ptree) + 176|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & $15;
 $21 = (($ptree) + 180|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & $16;
 $24 = $20 | $23;
 $25 = ($24|0)==(0);
 if ($25) {
  $$0$lcssa = $pmove;
 } else {
  $$0127 = $pmove;$bb_piece$sroa$0$0129 = $20;$bb_piece$sroa$1$0128 = $23;
  while(1) {
   $26 = (_first_one01($bb_piece$sroa$0$0129,$bb_piece$sroa$1$0128)|0);
   $27 = (34156304 + (($26*12)|0)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 ^ $bb_piece$sroa$0$0129;
   $30 = ((34156304 + (($26*12)|0)|0) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $31 ^ $bb_piece$sroa$1$0128;
   $33 = $26 << 7;
   $34 = (($33) + -1152)|0;
   $35 = $26 | $34;
   $36 = $35 | 32768;
   $37 = (($$0127) + 4|0);
   HEAP32[$$0127>>2] = $36;
   $38 = $29 | $32;
   $39 = ($38|0)==(0);
   if ($39) {
    $$0$lcssa = $37;
    break;
   } else {
    $$0127 = $37;$bb_piece$sroa$0$0129 = $29;$bb_piece$sroa$1$0128 = $32;
   }
  }
 }
 $40 = (($ptree) + 248|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($ptree) + 252|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($ptree) + 256|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $43 | $45;
 $47 = $46 | $41;
 $48 = ($47|0)==(0);
 if ($48) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$1119 = $$0$lcssa;$bb_piece$sroa$0$1122 = $41;$bb_piece$sroa$1$1121 = $43;$bb_piece$sroa$2$0120 = $45;
  while(1) {
   $55 = (_first_one012($bb_piece$sroa$0$1122,$bb_piece$sroa$1$1121,$bb_piece$sroa$2$0120)|0);
   $56 = (34156304 + (($55*12)|0)|0);
   $57 = HEAP32[$56>>2]|0;
   $53 = $57 ^ $bb_piece$sroa$0$1122;
   $58 = ((34156304 + (($55*12)|0)|0) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $50 = $59 ^ $bb_piece$sroa$1$1121;
   $60 = ((34156304 + (($55*12)|0)|0) + 8|0);
   $61 = HEAP32[$60>>2]|0;
   $51 = $61 ^ $bb_piece$sroa$2$0120;
   $62 = (33576976 + (($55*12)|0)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 & $15;
   $65 = ((33576976 + (($55*12)|0)|0) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 & $16;
   $68 = ((33576976 + (($55*12)|0)|0) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $69 & $17;
   $71 = $67 | $70;
   $72 = $71 | $64;
   $73 = ($72|0)==(0);
   L8: do {
    if ($73) {
     $$2$lcssa = $$1119;
    } else {
     $74 = $55 << 7;
     $75 = ($55|0)>(53);
     if ($75) {
      $$2112$us = $$1119;$bb_desti$sroa$0$0115$us = $64;$bb_desti$sroa$1$0114$us = $67;$bb_desti$sroa$2$0113$us = $70;
      while(1) {
       $76 = (_first_one012($bb_desti$sroa$0$0115$us,$bb_desti$sroa$1$0114$us,$bb_desti$sroa$2$0113$us)|0);
       $77 = (34156304 + (($76*12)|0)|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = $78 ^ $bb_desti$sroa$0$0115$us;
       $80 = ((34156304 + (($76*12)|0)|0) + 4|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = $81 ^ $bb_desti$sroa$1$0114$us;
       $83 = ((34156304 + (($76*12)|0)|0) + 8|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = $84 ^ $bb_desti$sroa$2$0113$us;
       $86 = $76 | $74;
       $87 = $86 | 131072;
       $88 = $86 | 147456;
       $89 = (($$2112$us) + 4|0);
       HEAP32[$$2112$us>>2] = $88;
       $90 = (($$2112$us) + 8|0);
       HEAP32[$89>>2] = $87;
       $91 = $82 | $85;
       $92 = $91 | $79;
       $93 = ($92|0)==(0);
       if ($93) {
        $$2$lcssa = $90;
        break L8;
       } else {
        $$2112$us = $90;$bb_desti$sroa$0$0115$us = $79;$bb_desti$sroa$1$0114$us = $82;$bb_desti$sroa$2$0113$us = $85;
       }
      }
     } else {
      $$2112 = $$1119;$bb_desti$sroa$0$0115 = $64;$bb_desti$sroa$1$0114 = $67;$bb_desti$sroa$2$0113 = $70;
     }
     while(1) {
      $94 = (_first_one012($bb_desti$sroa$0$0115,$bb_desti$sroa$1$0114,$bb_desti$sroa$2$0113)|0);
      $95 = (34156304 + (($94*12)|0)|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = $96 ^ $bb_desti$sroa$0$0115;
      $98 = ((34156304 + (($94*12)|0)|0) + 4|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = $99 ^ $bb_desti$sroa$1$0114;
      $101 = ((34156304 + (($94*12)|0)|0) + 8|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = $102 ^ $bb_desti$sroa$2$0113;
      $104 = $94 | $74;
      $105 = $104 | 131072;
      $106 = ($94|0)>(53);
      if ($106) {
       $107 = $104 | 147456;
       $108 = (($$2112) + 4|0);
       HEAP32[$$2112>>2] = $107;
       $$3 = $108;
      } else {
       $$3 = $$2112;
      }
      $109 = (($$3) + 4|0);
      HEAP32[$$3>>2] = $105;
      $110 = $100 | $103;
      $111 = $110 | $97;
      $112 = ($111|0)==(0);
      if ($112) {
       $$2$lcssa = $109;
       break;
      } else {
       $$2112 = $109;$bb_desti$sroa$0$0115 = $97;$bb_desti$sroa$1$0114 = $100;$bb_desti$sroa$2$0113 = $103;
      }
     }
    }
   } while(0);
   $49 = $50 | $51;
   $52 = $49 | $53;
   $54 = ($52|0)==(0);
   if ($54) {
    $$1$lcssa = $$2$lcssa;
    break;
   } else {
    $$1119 = $$2$lcssa;$bb_piece$sroa$0$1122 = $53;$bb_piece$sroa$1$1121 = $50;$bb_piece$sroa$2$0120 = $51;
   }
  }
 }
 $113 = (($ptree) + 104|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (($ptree) + 108|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = (($ptree) + 112|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = $116 | $118;
 $120 = $119 | $114;
 $121 = ($120|0)==(0);
 if ($121) {
  $$4$lcssa = $$1$lcssa;
 } else {
  $$4103 = $$1$lcssa;$bb_piece$sroa$0$2106 = $114;$bb_piece$sroa$1$2105 = $116;$bb_piece$sroa$2$1104 = $118;
  while(1) {
   $128 = (_first_one012($bb_piece$sroa$0$2106,$bb_piece$sroa$1$2105,$bb_piece$sroa$2$1104)|0);
   $129 = (34156304 + (($128*12)|0)|0);
   $130 = HEAP32[$129>>2]|0;
   $126 = $130 ^ $bb_piece$sroa$0$2106;
   $131 = ((34156304 + (($128*12)|0)|0) + 4|0);
   $132 = HEAP32[$131>>2]|0;
   $123 = $132 ^ $bb_piece$sroa$1$2105;
   $133 = ((34156304 + (($128*12)|0)|0) + 8|0);
   $134 = HEAP32[$133>>2]|0;
   $124 = $134 ^ $bb_piece$sroa$2$1104;
   $135 = (33577952 + (($128*12)|0)|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = $136 & $15;
   $138 = ((33577952 + (($128*12)|0)|0) + 4|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $139 & $16;
   $141 = ((33577952 + (($128*12)|0)|0) + 8|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = $142 & $17;
   $144 = $128 << 7;
   $145 = ((($ptree) + ($128)|0) + 512|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146 << 24 >> 24;
   $148 = (0 - ($147))|0;
   $149 = $148 << 15;
   $150 = $149 | $144;
   $151 = $140 | $143;
   $152 = $151 | $137;
   $153 = ($152|0)==(0);
   if ($153) {
    $$5$lcssa = $$4103;
   } else {
    $$596 = $$4103;$bb_desti$sroa$0$199 = $137;$bb_desti$sroa$1$198 = $140;$bb_desti$sroa$2$197 = $143;
    while(1) {
     $154 = (_first_one012($bb_desti$sroa$0$199,$bb_desti$sroa$1$198,$bb_desti$sroa$2$197)|0);
     $155 = (34156304 + (($154*12)|0)|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = $156 ^ $bb_desti$sroa$0$199;
     $158 = ((34156304 + (($154*12)|0)|0) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $159 ^ $bb_desti$sroa$1$198;
     $161 = ((34156304 + (($154*12)|0)|0) + 8|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = $162 ^ $bb_desti$sroa$2$197;
     $164 = $150 | $154;
     $165 = (($$596) + 4|0);
     HEAP32[$$596>>2] = $164;
     $166 = $160 | $163;
     $167 = $166 | $157;
     $168 = ($167|0)==(0);
     if ($168) {
      $$5$lcssa = $165;
      break;
     } else {
      $$596 = $165;$bb_desti$sroa$0$199 = $157;$bb_desti$sroa$1$198 = $160;$bb_desti$sroa$2$197 = $163;
     }
    }
   }
   $122 = $123 | $124;
   $125 = $122 | $126;
   $127 = ($125|0)==(0);
   if ($127) {
    $$4$lcssa = $$5$lcssa;
    break;
   } else {
    $$4103 = $$5$lcssa;$bb_piece$sroa$0$2106 = $126;$bb_piece$sroa$1$2105 = $123;$bb_piece$sroa$2$1104 = $124;
   }
  }
 }
 $169 = (($ptree) + 594|0);
 $170 = HEAP8[$169>>0]|0;
 $171 = $170&255;
 $172 = (33578928 + (($171*12)|0)|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = $173 & $15;
 $175 = ((33578928 + (($171*12)|0)|0) + 4|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = $176 & $16;
 $178 = ((33578928 + (($171*12)|0)|0) + 8|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = $179 & $17;
 $181 = $171 << 7;
 $182 = $177 | $180;
 $183 = $182 | $174;
 $184 = ($183|0)==(0);
 if ($184) {
  $$6$lcssa = $$4$lcssa;
 } else {
  $$687 = $$4$lcssa;$bb_desti$sroa$0$290 = $174;$bb_desti$sroa$1$289 = $177;$bb_desti$sroa$2$288 = $180;
  while(1) {
   $185 = (_first_one012($bb_desti$sroa$0$290,$bb_desti$sroa$1$289,$bb_desti$sroa$2$288)|0);
   $186 = (34156304 + (($185*12)|0)|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = $187 ^ $bb_desti$sroa$0$290;
   $189 = ((34156304 + (($185*12)|0)|0) + 4|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = $190 ^ $bb_desti$sroa$1$289;
   $192 = ((34156304 + (($185*12)|0)|0) + 8|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $193 ^ $bb_desti$sroa$2$288;
   $195 = $181 | $185;
   $196 = $195 | 262144;
   $197 = (($$687) + 4|0);
   HEAP32[$$687>>2] = $196;
   $198 = $191 | $194;
   $199 = $198 | $188;
   $200 = ($199|0)==(0);
   if ($200) {
    $$6$lcssa = $197;
    break;
   } else {
    $$687 = $197;$bb_desti$sroa$0$290 = $188;$bb_desti$sroa$1$289 = $191;$bb_desti$sroa$2$288 = $194;
   }
  }
 }
 $201 = (($ptree) + 272|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = (($ptree) + 276|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = $202 | $204;
 $206 = ($205|0)==(0);
 if ($206) {
  $$7$lcssa = $$6$lcssa;
 } else {
  $$780 = $$6$lcssa;$bb_piece$sroa$0$382 = $202;$bb_piece$sroa$1$381 = $204;
  while(1) {
   $211 = (_first_one01($bb_piece$sroa$0$382,$bb_piece$sroa$1$381)|0);
   $212 = (34156304 + (($211*12)|0)|0);
   $213 = HEAP32[$212>>2]|0;
   $208 = $213 ^ $bb_piece$sroa$0$382;
   $214 = ((34156304 + (($211*12)|0)|0) + 4|0);
   $215 = HEAP32[$214>>2]|0;
   $209 = $215 ^ $bb_piece$sroa$1$381;
   $216 = ((33572424 + ($211<<3)|0) + 6|0);
   $217 = HEAP8[$216>>0]|0;
   $218 = $217&255;
   $219 = ((($ptree) + ($218<<2)|0) + 56|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = ((33572424 + ($211<<3)|0) + 7|0);
   $222 = HEAP8[$221>>0]|0;
   $223 = $222&255;
   $224 = $220 >>> $223;
   $225 = $224 & 127;
   $226 = ((33704320 + (($211*1536)|0)|0) + (($225*12)|0)|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = ((33572424 + ($211<<3)|0) + 4|0);
   $229 = HEAP8[$228>>0]|0;
   $230 = $229&255;
   $231 = ((($ptree) + ($230<<2)|0) + 44|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = ((33572424 + ($211<<3)|0) + 5|0);
   $234 = HEAP8[$233>>0]|0;
   $235 = $234&255;
   $236 = $232 >>> $235;
   $237 = $236 & 127;
   $238 = ((33579904 + (($211*1536)|0)|0) + (($237*12)|0)|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = $239 | $227;
   $241 = (((33704320 + (($211*1536)|0)|0) + (($225*12)|0)|0) + 4|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = (((33579904 + (($211*1536)|0)|0) + (($237*12)|0)|0) + 4|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = $244 | $242;
   $246 = $240 & $15;
   $247 = $245 & $16;
   $248 = $211 << 7;
   $249 = $246 | $247;
   $250 = ($249|0)==(0);
   if ($250) {
    $$8$lcssa = $$780;
   } else {
    $$874 = $$780;$bb_desti$sroa$0$376 = $246;$bb_desti$sroa$1$375 = $247;
    while(1) {
     $251 = (_first_one01($bb_desti$sroa$0$376,$bb_desti$sroa$1$375)|0);
     $252 = (34156304 + (($251*12)|0)|0);
     $253 = HEAP32[$252>>2]|0;
     $254 = $253 ^ $bb_desti$sroa$0$376;
     $255 = ((34156304 + (($251*12)|0)|0) + 4|0);
     $256 = HEAP32[$255>>2]|0;
     $257 = $256 ^ $bb_desti$sroa$1$375;
     $258 = $248 | $251;
     $259 = $258 | 196608;
     $260 = (($$874) + 4|0);
     HEAP32[$$874>>2] = $259;
     $261 = $254 | $257;
     $262 = ($261|0)==(0);
     if ($262) {
      $$8$lcssa = $260;
      break;
     } else {
      $$874 = $260;$bb_desti$sroa$0$376 = $254;$bb_desti$sroa$1$375 = $257;
     }
    }
   }
   $207 = $208 | $209;
   $210 = ($207|0)==(0);
   if ($210) {
    $$7$lcssa = $$8$lcssa;
    break;
   } else {
    $$780 = $$8$lcssa;$bb_piece$sroa$0$382 = $208;$bb_piece$sroa$1$381 = $209;
   }
  }
 }
 $263 = (($ptree) + 296|0);
 $264 = HEAP32[$263>>2]|0;
 $265 = (($ptree) + 300|0);
 $266 = HEAP32[$265>>2]|0;
 $267 = $264 | $266;
 $268 = ($267|0)==(0);
 if ($268) {
  $$9$lcssa = $$7$lcssa;
 } else {
  $$966 = $$7$lcssa;$bb_piece$sroa$0$468 = $264;$bb_piece$sroa$1$467 = $266;
  while(1) {
   $273 = (_first_one01($bb_piece$sroa$0$468,$bb_piece$sroa$1$467)|0);
   $274 = (34156304 + (($273*12)|0)|0);
   $275 = HEAP32[$274>>2]|0;
   $270 = $275 ^ $bb_piece$sroa$0$468;
   $276 = ((34156304 + (($273*12)|0)|0) + 4|0);
   $277 = HEAP32[$276>>2]|0;
   $271 = $277 ^ $bb_piece$sroa$1$467;
   $278 = ((33572424 + ($273<<3)|0) + 2|0);
   $279 = HEAP8[$278>>0]|0;
   $280 = $279&255;
   $281 = ((($ptree) + ($280<<2)|0) + 32|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = ((33572424 + ($273<<3)|0) + 3|0);
   $284 = HEAP8[$283>>0]|0;
   $285 = $284&255;
   $286 = $282 >>> $285;
   $287 = $286 & 127;
   $288 = ((33953152 + (($273*1536)|0)|0) + (($287*12)|0)|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = (33572424 + ($273<<3)|0);
   $291 = HEAP8[$290>>0]|0;
   $292 = $291&255;
   $293 = ((($ptree) + ($292<<2)|0) + 8|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = ((($ptree) + ($292<<2)|0) + 20|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = $296 | $294;
   $298 = ((33572424 + ($273<<3)|0) + 1|0);
   $299 = HEAP8[$298>>0]|0;
   $300 = $299&255;
   $301 = $297 >>> $300;
   $302 = $301 & 127;
   $303 = ((33828736 + (($273*1536)|0)|0) + (($302*12)|0)|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = $304 | $289;
   $306 = (((33953152 + (($273*1536)|0)|0) + (($287*12)|0)|0) + 4|0);
   $307 = HEAP32[$306>>2]|0;
   $308 = (((33828736 + (($273*1536)|0)|0) + (($302*12)|0)|0) + 4|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = $309 | $307;
   $311 = $305 & $15;
   $312 = $310 & $16;
   $313 = $273 << 7;
   $314 = $311 | $312;
   $315 = ($314|0)==(0);
   if ($315) {
    $$10$lcssa = $$966;
   } else {
    $$1060 = $$966;$bb_desti$sroa$0$462 = $311;$bb_desti$sroa$1$461 = $312;
    while(1) {
     $316 = (_first_one01($bb_desti$sroa$0$462,$bb_desti$sroa$1$461)|0);
     $317 = (34156304 + (($316*12)|0)|0);
     $318 = HEAP32[$317>>2]|0;
     $319 = $318 ^ $bb_desti$sroa$0$462;
     $320 = ((34156304 + (($316*12)|0)|0) + 4|0);
     $321 = HEAP32[$320>>2]|0;
     $322 = $321 ^ $bb_desti$sroa$1$461;
     $323 = $313 | $316;
     $324 = $323 | 229376;
     $325 = (($$1060) + 4|0);
     HEAP32[$$1060>>2] = $324;
     $326 = $319 | $322;
     $327 = ($326|0)==(0);
     if ($327) {
      $$10$lcssa = $325;
      break;
     } else {
      $$1060 = $325;$bb_desti$sroa$0$462 = $319;$bb_desti$sroa$1$461 = $322;
     }
    }
   }
   $269 = $270 | $271;
   $272 = ($269|0)==(0);
   if ($272) {
    $$9$lcssa = $$10$lcssa;
    break;
   } else {
    $$966 = $$10$lcssa;$bb_piece$sroa$0$468 = $270;$bb_piece$sroa$1$467 = $271;
   }
  }
 }
 $328 = (($ptree) + 320|0);
 $329 = HEAP32[$328>>2]|0;
 $330 = (($ptree) + 324|0);
 $331 = HEAP32[$330>>2]|0;
 $332 = (($ptree) + 328|0);
 $333 = HEAP32[$332>>2]|0;
 $334 = $331 | $333;
 $335 = $334 | $329;
 $336 = ($335|0)==(0);
 if ($336) {
  $$11$lcssa = $$9$lcssa;
 } else {
  $$1151 = $$9$lcssa;$bb_piece$sroa$0$554 = $329;$bb_piece$sroa$1$553 = $331;$bb_piece$sroa$2$252 = $333;
  while(1) {
   $343 = (_first_one012($bb_piece$sroa$0$554,$bb_piece$sroa$1$553,$bb_piece$sroa$2$252)|0);
   $344 = (34156304 + (($343*12)|0)|0);
   $345 = HEAP32[$344>>2]|0;
   $341 = $345 ^ $bb_piece$sroa$0$554;
   $346 = ((34156304 + (($343*12)|0)|0) + 4|0);
   $347 = HEAP32[$346>>2]|0;
   $338 = $347 ^ $bb_piece$sroa$1$553;
   $348 = ((34156304 + (($343*12)|0)|0) + 8|0);
   $349 = HEAP32[$348>>2]|0;
   $339 = $349 ^ $bb_piece$sroa$2$252;
   $350 = ((33572424 + ($343<<3)|0) + 6|0);
   $351 = HEAP8[$350>>0]|0;
   $352 = $351&255;
   $353 = ((($ptree) + ($352<<2)|0) + 56|0);
   $354 = HEAP32[$353>>2]|0;
   $355 = ((33572424 + ($343<<3)|0) + 7|0);
   $356 = HEAP8[$355>>0]|0;
   $357 = $356&255;
   $358 = $354 >>> $357;
   $359 = $358 & 127;
   $360 = ((33704320 + (($343*1536)|0)|0) + (($359*12)|0)|0);
   $361 = HEAP32[$360>>2]|0;
   $362 = ((33572424 + ($343<<3)|0) + 4|0);
   $363 = HEAP8[$362>>0]|0;
   $364 = $363&255;
   $365 = ((($ptree) + ($364<<2)|0) + 44|0);
   $366 = HEAP32[$365>>2]|0;
   $367 = ((33572424 + ($343<<3)|0) + 5|0);
   $368 = HEAP8[$367>>0]|0;
   $369 = $368&255;
   $370 = $366 >>> $369;
   $371 = $370 & 127;
   $372 = ((33579904 + (($343*1536)|0)|0) + (($371*12)|0)|0);
   $373 = HEAP32[$372>>2]|0;
   $374 = $373 | $361;
   $375 = (((33704320 + (($343*1536)|0)|0) + (($359*12)|0)|0) + 4|0);
   $376 = HEAP32[$375>>2]|0;
   $377 = (((33579904 + (($343*1536)|0)|0) + (($371*12)|0)|0) + 4|0);
   $378 = HEAP32[$377>>2]|0;
   $379 = $378 | $376;
   $380 = (((33704320 + (($343*1536)|0)|0) + (($359*12)|0)|0) + 8|0);
   $381 = HEAP32[$380>>2]|0;
   $382 = (((33579904 + (($343*1536)|0)|0) + (($371*12)|0)|0) + 8|0);
   $383 = HEAP32[$382>>2]|0;
   $384 = $383 | $381;
   $385 = (33578928 + (($343*12)|0)|0);
   $386 = HEAP32[$385>>2]|0;
   $387 = $374 | $386;
   $388 = ((33578928 + (($343*12)|0)|0) + 4|0);
   $389 = HEAP32[$388>>2]|0;
   $390 = $379 | $389;
   $391 = ((33578928 + (($343*12)|0)|0) + 8|0);
   $392 = HEAP32[$391>>2]|0;
   $393 = $384 | $392;
   $394 = $387 & $15;
   $395 = $390 & $16;
   $396 = $393 & $17;
   $397 = $343 << 7;
   $398 = $395 | $396;
   $399 = $398 | $394;
   $400 = ($399|0)==(0);
   if ($400) {
    $$12$lcssa = $$1151;
   } else {
    $$1244 = $$1151;$bb_desti$sroa$0$547 = $394;$bb_desti$sroa$1$546 = $395;$bb_desti$sroa$2$345 = $396;
    while(1) {
     $401 = (_first_one012($bb_desti$sroa$0$547,$bb_desti$sroa$1$546,$bb_desti$sroa$2$345)|0);
     $402 = (34156304 + (($401*12)|0)|0);
     $403 = HEAP32[$402>>2]|0;
     $404 = $403 ^ $bb_desti$sroa$0$547;
     $405 = ((34156304 + (($401*12)|0)|0) + 4|0);
     $406 = HEAP32[$405>>2]|0;
     $407 = $406 ^ $bb_desti$sroa$1$546;
     $408 = ((34156304 + (($401*12)|0)|0) + 8|0);
     $409 = HEAP32[$408>>2]|0;
     $410 = $409 ^ $bb_desti$sroa$2$345;
     $411 = $397 | $401;
     $412 = $411 | 458752;
     $413 = (($$1244) + 4|0);
     HEAP32[$$1244>>2] = $412;
     $414 = $407 | $410;
     $415 = $414 | $404;
     $416 = ($415|0)==(0);
     if ($416) {
      $$12$lcssa = $413;
      break;
     } else {
      $$1244 = $413;$bb_desti$sroa$0$547 = $404;$bb_desti$sroa$1$546 = $407;$bb_desti$sroa$2$345 = $410;
     }
    }
   }
   $337 = $338 | $339;
   $340 = $337 | $341;
   $342 = ($340|0)==(0);
   if ($342) {
    $$11$lcssa = $$12$lcssa;
    break;
   } else {
    $$1151 = $$12$lcssa;$bb_piece$sroa$0$554 = $341;$bb_piece$sroa$1$553 = $338;$bb_piece$sroa$2$252 = $339;
   }
  }
 }
 $417 = (($ptree) + 344|0);
 $418 = HEAP32[$417>>2]|0;
 $419 = (($ptree) + 348|0);
 $420 = HEAP32[$419>>2]|0;
 $421 = (($ptree) + 352|0);
 $422 = HEAP32[$421>>2]|0;
 $423 = $420 | $422;
 $424 = $423 | $418;
 $425 = ($424|0)==(0);
 if ($425) {
  $$13$lcssa = $$11$lcssa;
 } else {
  $$1335 = $$11$lcssa;$bb_piece$sroa$0$638 = $418;$bb_piece$sroa$1$637 = $420;$bb_piece$sroa$2$336 = $422;
  while(1) {
   $432 = (_first_one012($bb_piece$sroa$0$638,$bb_piece$sroa$1$637,$bb_piece$sroa$2$336)|0);
   $433 = (34156304 + (($432*12)|0)|0);
   $434 = HEAP32[$433>>2]|0;
   $430 = $434 ^ $bb_piece$sroa$0$638;
   $435 = ((34156304 + (($432*12)|0)|0) + 4|0);
   $436 = HEAP32[$435>>2]|0;
   $427 = $436 ^ $bb_piece$sroa$1$637;
   $437 = ((34156304 + (($432*12)|0)|0) + 8|0);
   $438 = HEAP32[$437>>2]|0;
   $428 = $438 ^ $bb_piece$sroa$2$336;
   $439 = ((33572424 + ($432<<3)|0) + 2|0);
   $440 = HEAP8[$439>>0]|0;
   $441 = $440&255;
   $442 = ((($ptree) + ($441<<2)|0) + 32|0);
   $443 = HEAP32[$442>>2]|0;
   $444 = ((33572424 + ($432<<3)|0) + 3|0);
   $445 = HEAP8[$444>>0]|0;
   $446 = $445&255;
   $447 = $443 >>> $446;
   $448 = $447 & 127;
   $449 = ((33953152 + (($432*1536)|0)|0) + (($448*12)|0)|0);
   $450 = HEAP32[$449>>2]|0;
   $451 = (33572424 + ($432<<3)|0);
   $452 = HEAP8[$451>>0]|0;
   $453 = $452&255;
   $454 = ((($ptree) + ($453<<2)|0) + 8|0);
   $455 = HEAP32[$454>>2]|0;
   $456 = ((($ptree) + ($453<<2)|0) + 20|0);
   $457 = HEAP32[$456>>2]|0;
   $458 = $457 | $455;
   $459 = ((33572424 + ($432<<3)|0) + 1|0);
   $460 = HEAP8[$459>>0]|0;
   $461 = $460&255;
   $462 = $458 >>> $461;
   $463 = $462 & 127;
   $464 = ((33828736 + (($432*1536)|0)|0) + (($463*12)|0)|0);
   $465 = HEAP32[$464>>2]|0;
   $466 = $465 | $450;
   $467 = (((33953152 + (($432*1536)|0)|0) + (($448*12)|0)|0) + 4|0);
   $468 = HEAP32[$467>>2]|0;
   $469 = (((33828736 + (($432*1536)|0)|0) + (($463*12)|0)|0) + 4|0);
   $470 = HEAP32[$469>>2]|0;
   $471 = $470 | $468;
   $472 = (((33953152 + (($432*1536)|0)|0) + (($448*12)|0)|0) + 8|0);
   $473 = HEAP32[$472>>2]|0;
   $474 = (((33828736 + (($432*1536)|0)|0) + (($463*12)|0)|0) + 8|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = $475 | $473;
   $477 = (33578928 + (($432*12)|0)|0);
   $478 = HEAP32[$477>>2]|0;
   $479 = $466 | $478;
   $480 = ((33578928 + (($432*12)|0)|0) + 4|0);
   $481 = HEAP32[$480>>2]|0;
   $482 = $471 | $481;
   $483 = ((33578928 + (($432*12)|0)|0) + 8|0);
   $484 = HEAP32[$483>>2]|0;
   $485 = $476 | $484;
   $486 = $479 & $15;
   $487 = $482 & $16;
   $488 = $485 & $17;
   $489 = $432 << 7;
   $490 = $487 | $488;
   $491 = $490 | $486;
   $492 = ($491|0)==(0);
   if ($492) {
    $$14$lcssa = $$1335;
   } else {
    $$1428 = $$1335;$bb_desti$sroa$0$631 = $486;$bb_desti$sroa$1$630 = $487;$bb_desti$sroa$2$429 = $488;
    while(1) {
     $493 = (_first_one012($bb_desti$sroa$0$631,$bb_desti$sroa$1$630,$bb_desti$sroa$2$429)|0);
     $494 = (34156304 + (($493*12)|0)|0);
     $495 = HEAP32[$494>>2]|0;
     $496 = $495 ^ $bb_desti$sroa$0$631;
     $497 = ((34156304 + (($493*12)|0)|0) + 4|0);
     $498 = HEAP32[$497>>2]|0;
     $499 = $498 ^ $bb_desti$sroa$1$630;
     $500 = ((34156304 + (($493*12)|0)|0) + 8|0);
     $501 = HEAP32[$500>>2]|0;
     $502 = $501 ^ $bb_desti$sroa$2$429;
     $503 = $489 | $493;
     $504 = $503 | 491520;
     $505 = (($$1428) + 4|0);
     HEAP32[$$1428>>2] = $504;
     $506 = $499 | $502;
     $507 = $506 | $496;
     $508 = ($507|0)==(0);
     if ($508) {
      $$14$lcssa = $505;
      break;
     } else {
      $$1428 = $505;$bb_desti$sroa$0$631 = $496;$bb_desti$sroa$1$630 = $499;$bb_desti$sroa$2$429 = $502;
     }
    }
   }
   $426 = $427 | $428;
   $429 = $426 | $430;
   $431 = ($429|0)==(0);
   if ($431) {
    $$13$lcssa = $$14$lcssa;
    break;
   } else {
    $$1335 = $$14$lcssa;$bb_piece$sroa$0$638 = $430;$bb_piece$sroa$1$637 = $427;$bb_piece$sroa$2$336 = $428;
   }
  }
 }
 $509 = $17 & 133955584;
 $510 = (($ptree) + 200|0);
 $511 = HEAP32[$510>>2]|0;
 $512 = (($ptree) + 204|0);
 $513 = HEAP32[$512>>2]|0;
 $514 = (($ptree) + 208|0);
 $515 = HEAP32[$514>>2]|0;
 $516 = $513 | $515;
 $517 = $516 | $511;
 $518 = ($517|0)==(0);
 if ($518) {
  $$15$lcssa = $$13$lcssa;
 } else {
  $$1519 = $$13$lcssa;$bb_piece$sroa$0$722 = $511;$bb_piece$sroa$1$721 = $513;$bb_piece$sroa$2$420 = $515;
  while(1) {
   $525 = (_first_one012($bb_piece$sroa$0$722,$bb_piece$sroa$1$721,$bb_piece$sroa$2$420)|0);
   $526 = (34156304 + (($525*12)|0)|0);
   $527 = HEAP32[$526>>2]|0;
   $523 = $527 ^ $bb_piece$sroa$0$722;
   $528 = ((34156304 + (($525*12)|0)|0) + 4|0);
   $529 = HEAP32[$528>>2]|0;
   $520 = $529 ^ $bb_piece$sroa$1$721;
   $530 = ((34156304 + (($525*12)|0)|0) + 8|0);
   $531 = HEAP32[$530>>2]|0;
   $521 = $531 ^ $bb_piece$sroa$2$420;
   $532 = ((33572424 + ($525<<3)|0) + 2|0);
   $533 = HEAP8[$532>>0]|0;
   $534 = $533&255;
   $535 = ((($ptree) + ($534<<2)|0) + 32|0);
   $536 = HEAP32[$535>>2]|0;
   $537 = ((33572424 + ($525<<3)|0) + 3|0);
   $538 = HEAP8[$537>>0]|0;
   $539 = $538&255;
   $540 = $536 >>> $539;
   $541 = $540 & 127;
   $542 = ((33953152 + (($525*1536)|0)|0) + (($541*12)|0)|0);
   $543 = HEAP32[$542>>2]|0;
   $544 = (((33953152 + (($525*1536)|0)|0) + (($541*12)|0)|0) + 4|0);
   $545 = HEAP32[$544>>2]|0;
   $546 = (((33953152 + (($525*1536)|0)|0) + (($541*12)|0)|0) + 8|0);
   $547 = HEAP32[$546>>2]|0;
   $548 = (34160208 + (($525*12)|0)|0);
   $549 = HEAP32[$548>>2]|0;
   $550 = ((34160208 + (($525*12)|0)|0) + 4|0);
   $551 = HEAP32[$550>>2]|0;
   $552 = ((34160208 + (($525*12)|0)|0) + 8|0);
   $553 = HEAP32[$552>>2]|0;
   $554 = $543 & $15;
   $555 = $554 & $549;
   $556 = $545 & $16;
   $557 = $556 & $551;
   $558 = $547 & $509;
   $559 = $558 & $553;
   $560 = $525 << 7;
   $561 = $557 | $559;
   $562 = $561 | $555;
   $563 = ($562|0)==(0);
   if ($563) {
    $$16$lcssa = $$1519;
   } else {
    $$1612 = $$1519;$bb_desti$sroa$0$715 = $555;$bb_desti$sroa$1$714 = $557;$bb_desti$sroa$2$513 = $559;
    while(1) {
     $564 = (_first_one012($bb_desti$sroa$0$715,$bb_desti$sroa$1$714,$bb_desti$sroa$2$513)|0);
     $565 = (34156304 + (($564*12)|0)|0);
     $566 = HEAP32[$565>>2]|0;
     $567 = $566 ^ $bb_desti$sroa$0$715;
     $568 = ((34156304 + (($564*12)|0)|0) + 4|0);
     $569 = HEAP32[$568>>2]|0;
     $570 = $569 ^ $bb_desti$sroa$1$714;
     $571 = ((34156304 + (($564*12)|0)|0) + 8|0);
     $572 = HEAP32[$571>>2]|0;
     $573 = $572 ^ $bb_desti$sroa$2$513;
     $574 = $560 | $564;
     $575 = $574 | 65536;
     $576 = (($$1612) + 4|0);
     HEAP32[$$1612>>2] = $575;
     $577 = $570 | $573;
     $578 = $577 | $567;
     $579 = ($578|0)==(0);
     if ($579) {
      $$16$lcssa = $576;
      break;
     } else {
      $$1612 = $576;$bb_desti$sroa$0$715 = $567;$bb_desti$sroa$1$714 = $570;$bb_desti$sroa$2$513 = $573;
     }
    }
   }
   $519 = $520 | $521;
   $522 = $519 | $523;
   $524 = ($522|0)==(0);
   if ($524) {
    $$15$lcssa = $$16$lcssa;
    break;
   } else {
    $$1519 = $$16$lcssa;$bb_piece$sroa$0$722 = $523;$bb_piece$sroa$1$721 = $520;$bb_piece$sroa$2$420 = $521;
   }
  }
 }
 $580 = (($ptree) + 224|0);
 $581 = HEAP32[$580>>2]|0;
 $582 = (($ptree) + 228|0);
 $583 = HEAP32[$582>>2]|0;
 $584 = (($ptree) + 232|0);
 $585 = HEAP32[$584>>2]|0;
 $586 = $583 | $585;
 $587 = $586 | $581;
 $588 = ($587|0)==(0);
 if ($588) {
  $$17$lcssa = $$15$lcssa;
  STACKTOP = sp;return ($$17$lcssa|0);
 } else {
  $$175 = $$15$lcssa;$bb_piece$sroa$0$88 = $581;$bb_piece$sroa$1$87 = $583;$bb_piece$sroa$2$56 = $585;
 }
 while(1) {
  $595 = (_first_one012($bb_piece$sroa$0$88,$bb_piece$sroa$1$87,$bb_piece$sroa$2$56)|0);
  $596 = (34156304 + (($595*12)|0)|0);
  $597 = HEAP32[$596>>2]|0;
  $593 = $597 ^ $bb_piece$sroa$0$88;
  $598 = ((34156304 + (($595*12)|0)|0) + 4|0);
  $599 = HEAP32[$598>>2]|0;
  $590 = $599 ^ $bb_piece$sroa$1$87;
  $600 = ((34156304 + (($595*12)|0)|0) + 8|0);
  $601 = HEAP32[$600>>2]|0;
  $591 = $601 ^ $bb_piece$sroa$2$56;
  $602 = (33576000 + (($595*12)|0)|0);
  $603 = HEAP32[$602>>2]|0;
  $604 = $603 & $15;
  $605 = ((33576000 + (($595*12)|0)|0) + 4|0);
  $606 = HEAP32[$605>>2]|0;
  $607 = $606 & $16;
  $608 = ((33576000 + (($595*12)|0)|0) + 8|0);
  $609 = HEAP32[$608>>2]|0;
  $610 = $609 & $509;
  $611 = $595 << 7;
  $612 = $607 | $610;
  $613 = $612 | $604;
  $614 = ($613|0)==(0);
  if ($614) {
   $$18$lcssa = $$175;
  } else {
   $$181 = $$175;$bb_desti$sroa$0$84 = $604;$bb_desti$sroa$1$83 = $607;$bb_desti$sroa$2$62 = $610;
   while(1) {
    $615 = (_first_one012($bb_desti$sroa$0$84,$bb_desti$sroa$1$83,$bb_desti$sroa$2$62)|0);
    $616 = (34156304 + (($615*12)|0)|0);
    $617 = HEAP32[$616>>2]|0;
    $618 = $617 ^ $bb_desti$sroa$0$84;
    $619 = ((34156304 + (($615*12)|0)|0) + 4|0);
    $620 = HEAP32[$619>>2]|0;
    $621 = $620 ^ $bb_desti$sroa$1$83;
    $622 = ((34156304 + (($615*12)|0)|0) + 8|0);
    $623 = HEAP32[$622>>2]|0;
    $624 = $623 ^ $bb_desti$sroa$2$62;
    $625 = $611 | $615;
    $626 = $625 | 98304;
    $627 = (($$181) + 4|0);
    HEAP32[$$181>>2] = $626;
    $628 = $621 | $624;
    $629 = $628 | $618;
    $630 = ($629|0)==(0);
    if ($630) {
     $$18$lcssa = $627;
     break;
    } else {
     $$181 = $627;$bb_desti$sroa$0$84 = $618;$bb_desti$sroa$1$83 = $621;$bb_desti$sroa$2$62 = $624;
    }
   }
  }
  $589 = $590 | $591;
  $592 = $589 | $593;
  $594 = ($592|0)==(0);
  if ($594) {
   $$17$lcssa = $$18$lcssa;
   break;
  } else {
   $$175 = $$18$lcssa;$bb_piece$sroa$0$88 = $593;$bb_piece$sroa$1$87 = $590;$bb_piece$sroa$2$56 = $591;
  }
 }
 STACKTOP = sp;return ($$17$lcssa|0);
}
function _b_gen_drop($__ptree__,$pmove) {
 $__ptree__ = $__ptree__|0;
 $pmove = $pmove|0;
 var $$0 = 0, $$01$lcssa = 0, $$0153 = 0, $$10$ph = 0, $$105$us = 0, $$113$us = 0, $$2$lcssa = 0, $$2$ph = 0, $$246 = 0, $$341 = 0, $$5$lcssa = 0, $$5$ph = 0, $$534 = 0, $$6$lcssa = 0, $$629$us = 0, $$720$us = 0, $$816$us = 0, $$99$us = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ahand = 0, $ais_pawn = 0, $bb_target$sroa$0$050 = 0, $bb_target$sroa$0$126 = 0, $bb_target$sroa$0$126$us = 0, $bb_target$sroa$1$051 = 0, $bb_target$sroa$1$127 = 0, $bb_target$sroa$1$127$us = 0, $bb_target$sroa$2$052 = 0, $bb_target$sroa$2$128 = 0, $bb_target$sroa$2$128$us = 0, $exitcond = 0, $exitcond58 = 0;
 var $exitcond60 = 0, $exitcond62 = 0, $exitcond64 = 0, $i$045 = 0, $i$133 = 0, $i$219$us = 0, $i$38$us = 0, $i$42$us = 0, $ibb_target0a$04 = 0, $ibb_target0a$04$us = 0, $ibb_target0b$040 = 0, $ibb_target0b$115 = 0, $ibb_target0b$115$us = 0, $nhand$0 = 0, $nhand$1 = 0, $nhand$2 = 0, $nhand$3 = 0, $nhand$4 = 0, $nhand$5 = 0, $scevgep = 0;
 var $scevgep57 = 0, $scevgep59 = 0, $scevgep61 = 0, $scevgep63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ais_pawn = sp + 24|0;
 $ahand = sp;
 $0 = (($__ptree__) + 500|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = $pmove;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = $1 & 1792;
 $4 = ($3|0)==(0);
 if ($4) {
  $nhand$0 = 0;
 } else {
  HEAP32[$ahand>>2] = 10624;
  $nhand$0 = 1;
 }
 $5 = $1 & 224;
 $6 = ($5|0)==(0);
 if ($6) {
  $nhand$1 = $nhand$0;
 } else {
  $7 = (($nhand$0) + 1)|0;
  $8 = (($ahand) + ($nhand$0<<2)|0);
  HEAP32[$8>>2] = 10496;
  $nhand$1 = $7;
 }
 $9 = $1 & 14336;
 $10 = ($9|0)==(0);
 if ($10) {
  $nhand$2 = $nhand$1;
 } else {
  $11 = (($nhand$1) + 1)|0;
  $12 = (($ahand) + ($nhand$1<<2)|0);
  HEAP32[$12>>2] = 10752;
  $nhand$2 = $11;
 }
 $13 = $1 & 114688;
 $14 = ($13|0)==(0);
 if ($14) {
  $nhand$3 = $nhand$2;
 } else {
  $15 = (($nhand$2) + 1)|0;
  $16 = (($ahand) + ($nhand$2<<2)|0);
  HEAP32[$16>>2] = 10880;
  $nhand$3 = $15;
 }
 $17 = $1 & 393216;
 $18 = ($17|0)==(0);
 if ($18) {
  $nhand$4 = $nhand$3;
 } else {
  $19 = (($nhand$3) + 1)|0;
  $20 = (($ahand) + ($nhand$3<<2)|0);
  HEAP32[$20>>2] = 11008;
  $nhand$4 = $19;
 }
 $21 = $1 & 1572864;
 $22 = ($21|0)==(0);
 if ($22) {
  $nhand$5 = $nhand$4;
 } else {
  $23 = (($nhand$4) + 1)|0;
  $24 = (($ahand) + ($nhand$4<<2)|0);
  HEAP32[$24>>2] = 11136;
  $nhand$5 = $23;
 }
 $25 = (($__ptree__) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($__ptree__) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 | $26;
 $30 = (($__ptree__) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($__ptree__) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 | $31;
 $35 = (($__ptree__) + 16|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($__ptree__) + 28|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 | $36;
 $40 = $29 ^ -1;
 $41 = $40 & 133955584;
 $42 = $40 & 261632;
 $43 = $40 & 511;
 $44 = $34 & 134217727;
 $45 = $44 ^ 134217727;
 $46 = $39 & 134217727;
 $47 = $46 ^ 134217727;
 $48 = $1 & 31;
 $49 = ($48|0)==(0);
 L22: do {
  if ($49) {
   $50 = $45 | $43;
   $51 = $50 | $47;
   $52 = ($51|0)==(0);
   L24: do {
    if ($52) {
     $$6$lcssa = $pmove;
    } else {
     $53 = ($nhand$5|0)>(0);
     if ($53) {
      $$629$us = $pmove;$bb_target$sroa$0$126$us = $43;$bb_target$sroa$1$127$us = $45;$bb_target$sroa$2$128$us = $47;
     } else {
      $bb_target$sroa$0$126 = $43;$bb_target$sroa$1$127 = $45;$bb_target$sroa$2$128 = $47;
      while(1) {
       $186 = (_last_one210($bb_target$sroa$2$128,$bb_target$sroa$1$127,$bb_target$sroa$0$126)|0);
       $187 = (34156304 + (($186*12)|0)|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = $188 ^ $bb_target$sroa$0$126;
       $190 = ((34156304 + (($186*12)|0)|0) + 4|0);
       $191 = HEAP32[$190>>2]|0;
       $192 = $191 ^ $bb_target$sroa$1$127;
       $193 = ((34156304 + (($186*12)|0)|0) + 8|0);
       $194 = HEAP32[$193>>2]|0;
       $195 = $194 ^ $bb_target$sroa$2$128;
       $196 = $192 | $189;
       $197 = $196 | $195;
       $198 = ($197|0)==(0);
       if ($198) {
        $$6$lcssa = $pmove;
        break L24;
       } else {
        $bb_target$sroa$0$126 = $189;$bb_target$sroa$1$127 = $192;$bb_target$sroa$2$128 = $195;
       }
      }
     }
     while(1) {
      $55 = (_last_one210($bb_target$sroa$2$128$us,$bb_target$sroa$1$127$us,$bb_target$sroa$0$126$us)|0);
      $$720$us = $$629$us;$i$219$us = 0;
      while(1) {
       $67 = (($ahand) + ($i$219$us<<2)|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = $68 | $55;
       HEAP32[$$720$us>>2] = $69;
       $70 = (($i$219$us) + 1)|0;
       $exitcond64 = ($70|0)==($nhand$5|0);
       if ($exitcond64) {
        break;
       }
       $71 = (($$720$us) + 4|0);
       $$720$us = $71;$i$219$us = $70;
      }
      $scevgep63 = (($$629$us) + ($nhand$5<<2)|0);
      $54 = (34156304 + (($55*12)|0)|0);
      $56 = HEAP32[$54>>2]|0;
      $57 = $56 ^ $bb_target$sroa$0$126$us;
      $58 = ((34156304 + (($55*12)|0)|0) + 4|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = $59 ^ $bb_target$sroa$1$127$us;
      $61 = ((34156304 + (($55*12)|0)|0) + 8|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = $62 ^ $bb_target$sroa$2$128$us;
      $64 = $60 | $57;
      $65 = $64 | $63;
      $66 = ($65|0)==(0);
      if ($66) {
       $$6$lcssa = $scevgep63;
       break;
      } else {
       $$629$us = $scevgep63;$bb_target$sroa$0$126$us = $57;$bb_target$sroa$1$127$us = $60;$bb_target$sroa$2$128$us = $63;
      }
     }
    }
   } while(0);
   $173 = ($42|0)==(0);
   if ($173) {
    $$10$ph = $$6$lcssa;
   } else {
    $174 = ($nhand$0|0)<($nhand$5|0);
    if (!($174)) {
     $ibb_target0b$115 = $42;
     while(1) {
      $199 = (_last_one0($ibb_target0b$115)|0);
      $200 = (34156304 + (($199*12)|0)|0);
      $201 = HEAP32[$200>>2]|0;
      $202 = $201 ^ $ibb_target0b$115;
      $203 = ($201|0)==($ibb_target0b$115|0);
      if ($203) {
       $$10$ph = $$6$lcssa;
       break L22;
      } else {
       $ibb_target0b$115 = $202;
      }
     }
    }
    $175 = (($nhand$5) - ($nhand$0))|0;
    $$816$us = $$6$lcssa;$ibb_target0b$115$us = $42;
    while(1) {
     $177 = (_last_one0($ibb_target0b$115$us)|0);
     $$99$us = $$816$us;$i$38$us = $nhand$0;
     while(1) {
      $181 = (($ahand) + ($i$38$us<<2)|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = $182 | $177;
      HEAP32[$$99$us>>2] = $183;
      $184 = (($i$38$us) + 1)|0;
      $exitcond62 = ($184|0)==($nhand$5|0);
      if ($exitcond62) {
       break;
      }
      $185 = (($$99$us) + 4|0);
      $$99$us = $185;$i$38$us = $184;
     }
     $scevgep61 = (($$816$us) + ($175<<2)|0);
     $176 = (34156304 + (($177*12)|0)|0);
     $178 = HEAP32[$176>>2]|0;
     $179 = $178 ^ $ibb_target0b$115$us;
     $180 = ($178|0)==($ibb_target0b$115$us|0);
     if ($180) {
      $$10$ph = $scevgep61;
      break;
     } else {
      $$816$us = $scevgep61;$ibb_target0b$115$us = $179;
     }
    }
   }
  } else {
   $72 = (($__ptree__) + 164|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($__ptree__) + 168|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $75 | $73;
   $77 = (($__ptree__) + 172|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $76 | $78;
   $80 = $79 & 67240192;
   HEAP32[$ais_pawn>>2] = $80;
   $81 = $79 & 33620096;
   $82 = (($ais_pawn) + 4|0);
   HEAP32[$82>>2] = $81;
   $83 = $79 & 16810048;
   $84 = (($ais_pawn) + 8|0);
   HEAP32[$84>>2] = $83;
   $85 = $79 & 8405024;
   $86 = (($ais_pawn) + 12|0);
   HEAP32[$86>>2] = $85;
   $87 = $79 & 4202512;
   $88 = (($ais_pawn) + 16|0);
   HEAP32[$88>>2] = $87;
   $89 = $79 & 2101256;
   $90 = (($ais_pawn) + 20|0);
   HEAP32[$90>>2] = $89;
   $91 = $79 & 1050628;
   $92 = (($ais_pawn) + 24|0);
   HEAP32[$92>>2] = $91;
   $93 = $79 & 525314;
   $94 = (($ais_pawn) + 28|0);
   HEAP32[$94>>2] = $93;
   $95 = $79 & 262657;
   $96 = (($ais_pawn) + 32|0);
   HEAP32[$96>>2] = $95;
   $97 = $45 | $43;
   $98 = $97 | $47;
   $99 = ($98|0)==(0);
   if ($99) {
    $$01$lcssa = $pmove;
   } else {
    $100 = ($nhand$5|0)>(0);
    $$0153 = $pmove;$bb_target$sroa$0$050 = $43;$bb_target$sroa$1$051 = $45;$bb_target$sroa$2$052 = $47;
    while(1) {
     $104 = (_last_one210($bb_target$sroa$2$052,$bb_target$sroa$1$051,$bb_target$sroa$0$050)|0);
     $105 = (1248 + ($104)|0);
     $106 = HEAP8[$105>>0]|0;
     $107 = $106&255;
     $108 = (($ais_pawn) + ($107<<2)|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==(0);
     do {
      if ($110) {
       $111 = (($104) + -9)|0;
       $112 = ((($__ptree__) + ($111)|0) + 512|0);
       $113 = HEAP8[$112>>0]|0;
       $114 = ($113<<24>>24)==(-8);
       if ($114) {
        $115 = (_is_mate_b_pawn_drop($__ptree__,$104)|0);
        $116 = ($115|0)==(0);
        if (!($116)) {
         $$2$ph = $$0153;
         break;
        }
       }
       $117 = $104 | 10368;
       $118 = (($$0153) + 4|0);
       HEAP32[$$0153>>2] = $117;
       $$2$ph = $118;
      } else {
       $$2$ph = $$0153;
      }
     } while(0);
     if ($100) {
      $$246 = $$2$ph;$i$045 = 0;
      while(1) {
       $119 = (($ahand) + ($i$045<<2)|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = $120 | $104;
       HEAP32[$$246>>2] = $121;
       $122 = (($i$045) + 1)|0;
       $exitcond58 = ($122|0)==($nhand$5|0);
       if ($exitcond58) {
        break;
       }
       $123 = (($$246) + 4|0);
       $$246 = $123;$i$045 = $122;
      }
      $scevgep57 = (($$2$ph) + ($nhand$5<<2)|0);
      $$2$lcssa = $scevgep57;
     } else {
      $$2$lcssa = $$2$ph;
     }
     $124 = (34156304 + (($104*12)|0)|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = $125 ^ $bb_target$sroa$0$050;
     $127 = ((34156304 + (($104*12)|0)|0) + 4|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = $128 ^ $bb_target$sroa$1$051;
     $130 = ((34156304 + (($104*12)|0)|0) + 8|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $131 ^ $bb_target$sroa$2$052;
     $133 = $129 | $126;
     $134 = $133 | $132;
     $135 = ($134|0)==(0);
     if ($135) {
      $$01$lcssa = $$2$lcssa;
      break;
     } else {
      $$0153 = $$2$lcssa;$bb_target$sroa$0$050 = $126;$bb_target$sroa$1$051 = $129;$bb_target$sroa$2$052 = $132;
     }
    }
   }
   $101 = ($42|0)==(0);
   if ($101) {
    $$10$ph = $$01$lcssa;
   } else {
    $102 = ($nhand$0|0)<($nhand$5|0);
    $103 = (($nhand$5) - ($nhand$0))|0;
    $$341 = $$01$lcssa;$ibb_target0b$040 = $42;
    while(1) {
     $149 = (_last_one0($ibb_target0b$040)|0);
     $150 = (1248 + ($149)|0);
     $151 = HEAP8[$150>>0]|0;
     $152 = $151&255;
     $153 = (($ais_pawn) + ($152<<2)|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0);
     do {
      if ($155) {
       $156 = (($149) + -9)|0;
       $157 = ((($__ptree__) + ($156)|0) + 512|0);
       $158 = HEAP8[$157>>0]|0;
       $159 = ($158<<24>>24)==(-8);
       if ($159) {
        $160 = (_is_mate_b_pawn_drop($__ptree__,$149)|0);
        $161 = ($160|0)==(0);
        if (!($161)) {
         $$5$ph = $$341;
         break;
        }
       }
       $162 = $149 | 10368;
       $163 = (($$341) + 4|0);
       HEAP32[$$341>>2] = $162;
       $$5$ph = $163;
      } else {
       $$5$ph = $$341;
      }
     } while(0);
     if ($102) {
      $$534 = $$5$ph;$i$133 = $nhand$0;
      while(1) {
       $164 = (($ahand) + ($i$133<<2)|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = $165 | $149;
       HEAP32[$$534>>2] = $166;
       $167 = (($i$133) + 1)|0;
       $exitcond = ($167|0)==($nhand$5|0);
       if ($exitcond) {
        break;
       }
       $168 = (($$534) + 4|0);
       $$534 = $168;$i$133 = $167;
      }
      $scevgep = (($$5$ph) + ($103<<2)|0);
      $$5$lcssa = $scevgep;
     } else {
      $$5$lcssa = $$5$ph;
     }
     $169 = (34156304 + (($149*12)|0)|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = $170 ^ $ibb_target0b$040;
     $172 = ($170|0)==($ibb_target0b$040|0);
     if ($172) {
      $$10$ph = $$5$lcssa;
      break;
     } else {
      $$341 = $$5$lcssa;$ibb_target0b$040 = $171;
     }
    }
   }
  }
 } while(0);
 $136 = ($41|0)==(0);
 if ($136) {
  $$0 = $$10$ph;
  STACKTOP = sp;return ($$0|0);
 }
 $137 = ($nhand$1|0)<($nhand$5|0);
 if (!($137)) {
  $ibb_target0a$04 = $41;
  while(1) {
   $204 = (_last_one0($ibb_target0a$04)|0);
   $205 = (34156304 + (($204*12)|0)|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = $206 ^ $ibb_target0a$04;
   $208 = ($206|0)==($ibb_target0a$04|0);
   if ($208) {
    $$0 = $$10$ph;
    break;
   } else {
    $ibb_target0a$04 = $207;
   }
  }
  STACKTOP = sp;return ($$0|0);
 }
 $138 = (($nhand$5) - ($nhand$1))|0;
 $$105$us = $$10$ph;$ibb_target0a$04$us = $41;
 while(1) {
  $140 = (_last_one0($ibb_target0a$04$us)|0);
  $$113$us = $$105$us;$i$42$us = $nhand$1;
  while(1) {
   $144 = (($ahand) + ($i$42$us<<2)|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = $145 | $140;
   HEAP32[$$113$us>>2] = $146;
   $147 = (($i$42$us) + 1)|0;
   $exitcond60 = ($147|0)==($nhand$5|0);
   if ($exitcond60) {
    break;
   }
   $148 = (($$113$us) + 4|0);
   $$113$us = $148;$i$42$us = $147;
  }
  $scevgep59 = (($$105$us) + ($138<<2)|0);
  $139 = (34156304 + (($140*12)|0)|0);
  $141 = HEAP32[$139>>2]|0;
  $142 = $141 ^ $ibb_target0a$04$us;
  $143 = ($141|0)==($ibb_target0a$04$us|0);
  if ($143) {
   $$0 = $scevgep59;
   break;
  } else {
   $$105$us = $scevgep59;$ibb_target0a$04$us = $142;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _w_gen_drop($__ptree__,$pmove) {
 $__ptree__ = $__ptree__|0;
 $pmove = $pmove|0;
 var $$0 = 0, $$01$lcssa = 0, $$0153 = 0, $$10$ph = 0, $$105$us = 0, $$113$us = 0, $$2$lcssa = 0, $$2$ph = 0, $$246 = 0, $$341 = 0, $$5$lcssa = 0, $$5$ph = 0, $$534 = 0, $$6$lcssa = 0, $$629 = 0, $$7$lcssa = 0, $$720 = 0, $$816$us = 0, $$99$us = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ahand = 0, $ais_pawn = 0, $bb_target$sroa$0$050 = 0, $bb_target$sroa$0$126 = 0, $bb_target$sroa$1$051 = 0;
 var $bb_target$sroa$1$127 = 0, $bb_target$sroa$2$052 = 0, $bb_target$sroa$2$128 = 0, $exitcond = 0, $exitcond58 = 0, $exitcond60 = 0, $exitcond62 = 0, $exitcond64 = 0, $i$045 = 0, $i$133 = 0, $i$219 = 0, $i$38$us = 0, $i$42$us = 0, $ibb_target2a$04 = 0, $ibb_target2a$04$us = 0, $ibb_target2b$040 = 0, $ibb_target2b$115 = 0, $ibb_target2b$115$us = 0, $nhand$0 = 0, $nhand$1 = 0;
 var $nhand$2 = 0, $nhand$3 = 0, $nhand$4 = 0, $nhand$5 = 0, $scevgep = 0, $scevgep57 = 0, $scevgep59 = 0, $scevgep61 = 0, $scevgep63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ais_pawn = sp + 24|0;
 $ahand = sp;
 $0 = (($__ptree__) + 504|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = $pmove;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = $1 & 1792;
 $4 = ($3|0)==(0);
 if ($4) {
  $nhand$0 = 0;
 } else {
  HEAP32[$ahand>>2] = 10624;
  $nhand$0 = 1;
 }
 $5 = $1 & 224;
 $6 = ($5|0)==(0);
 if ($6) {
  $nhand$1 = $nhand$0;
 } else {
  $7 = (($nhand$0) + 1)|0;
  $8 = (($ahand) + ($nhand$0<<2)|0);
  HEAP32[$8>>2] = 10496;
  $nhand$1 = $7;
 }
 $9 = $1 & 14336;
 $10 = ($9|0)==(0);
 if ($10) {
  $nhand$2 = $nhand$1;
 } else {
  $11 = (($nhand$1) + 1)|0;
  $12 = (($ahand) + ($nhand$1<<2)|0);
  HEAP32[$12>>2] = 10752;
  $nhand$2 = $11;
 }
 $13 = $1 & 114688;
 $14 = ($13|0)==(0);
 if ($14) {
  $nhand$3 = $nhand$2;
 } else {
  $15 = (($nhand$2) + 1)|0;
  $16 = (($ahand) + ($nhand$2<<2)|0);
  HEAP32[$16>>2] = 10880;
  $nhand$3 = $15;
 }
 $17 = $1 & 393216;
 $18 = ($17|0)==(0);
 if ($18) {
  $nhand$4 = $nhand$3;
 } else {
  $19 = (($nhand$3) + 1)|0;
  $20 = (($ahand) + ($nhand$3<<2)|0);
  HEAP32[$20>>2] = 11008;
  $nhand$4 = $19;
 }
 $21 = $1 & 1572864;
 $22 = ($21|0)==(0);
 if ($22) {
  $nhand$5 = $nhand$4;
 } else {
  $23 = (($nhand$4) + 1)|0;
  $24 = (($ahand) + ($nhand$4<<2)|0);
  HEAP32[$24>>2] = 11136;
  $nhand$5 = $23;
 }
 $25 = (($__ptree__) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($__ptree__) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 | $26;
 $30 = (($__ptree__) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($__ptree__) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 | $31;
 $35 = (($__ptree__) + 16|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($__ptree__) + 28|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 | $36;
 $40 = $39 ^ -1;
 $41 = $40 & 511;
 $42 = $40 & 261632;
 $43 = $29 & 134217727;
 $44 = $43 ^ 134217727;
 $45 = $34 & 134217727;
 $46 = $45 ^ 134217727;
 $47 = $40 & 133955584;
 $48 = $1 & 31;
 $49 = ($48|0)==(0);
 L22: do {
  if ($49) {
   $50 = $46 | $44;
   $51 = $50 | $47;
   $52 = ($51|0)==(0);
   if ($52) {
    $$6$lcssa = $pmove;
   } else {
    $53 = ($nhand$5|0)>(0);
    $$629 = $pmove;$bb_target$sroa$0$126 = $44;$bb_target$sroa$1$127 = $46;$bb_target$sroa$2$128 = $47;
    while(1) {
     $168 = (_first_one012($bb_target$sroa$0$126,$bb_target$sroa$1$127,$bb_target$sroa$2$128)|0);
     if ($53) {
      $$720 = $$629;$i$219 = 0;
      while(1) {
       $169 = (($ahand) + ($i$219<<2)|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = $170 | $168;
       HEAP32[$$720>>2] = $171;
       $172 = (($i$219) + 1)|0;
       $exitcond = ($172|0)==($nhand$5|0);
       if ($exitcond) {
        break;
       }
       $173 = (($$720) + 4|0);
       $$720 = $173;$i$219 = $172;
      }
      $scevgep = (($$629) + ($nhand$5<<2)|0);
      $$7$lcssa = $scevgep;
     } else {
      $$7$lcssa = $$629;
     }
     $174 = (34156304 + (($168*12)|0)|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = $175 ^ $bb_target$sroa$0$126;
     $177 = ((34156304 + (($168*12)|0)|0) + 4|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = $178 ^ $bb_target$sroa$1$127;
     $180 = ((34156304 + (($168*12)|0)|0) + 8|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = $181 ^ $bb_target$sroa$2$128;
     $183 = $179 | $176;
     $184 = $183 | $182;
     $185 = ($184|0)==(0);
     if ($185) {
      $$6$lcssa = $$7$lcssa;
      break;
     } else {
      $$629 = $$7$lcssa;$bb_target$sroa$0$126 = $176;$bb_target$sroa$1$127 = $179;$bb_target$sroa$2$128 = $182;
     }
    }
   }
   $155 = ($42|0)==(0);
   if ($155) {
    $$10$ph = $$6$lcssa;
   } else {
    $156 = ($nhand$0|0)<($nhand$5|0);
    if (!($156)) {
     $ibb_target2b$115 = $42;
     while(1) {
      $186 = (_first_one2($ibb_target2b$115)|0);
      $187 = ((34156304 + (($186*12)|0)|0) + 8|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = $188 ^ $ibb_target2b$115;
      $190 = ($188|0)==($ibb_target2b$115|0);
      if ($190) {
       $$10$ph = $$6$lcssa;
       break L22;
      } else {
       $ibb_target2b$115 = $189;
      }
     }
    }
    $157 = (($nhand$5) - ($nhand$0))|0;
    $$816$us = $$6$lcssa;$ibb_target2b$115$us = $42;
    while(1) {
     $159 = (_first_one2($ibb_target2b$115$us)|0);
     $$99$us = $$816$us;$i$38$us = $nhand$0;
     while(1) {
      $163 = (($ahand) + ($i$38$us<<2)|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = $164 | $159;
      HEAP32[$$99$us>>2] = $165;
      $166 = (($i$38$us) + 1)|0;
      $exitcond64 = ($166|0)==($nhand$5|0);
      if ($exitcond64) {
       break;
      }
      $167 = (($$99$us) + 4|0);
      $$99$us = $167;$i$38$us = $166;
     }
     $scevgep63 = (($$816$us) + ($157<<2)|0);
     $158 = ((34156304 + (($159*12)|0)|0) + 8|0);
     $160 = HEAP32[$158>>2]|0;
     $161 = $160 ^ $ibb_target2b$115$us;
     $162 = ($160|0)==($ibb_target2b$115$us|0);
     if ($162) {
      $$10$ph = $scevgep63;
      break;
     } else {
      $$816$us = $scevgep63;$ibb_target2b$115$us = $161;
     }
    }
   }
  } else {
   $54 = (($__ptree__) + 176|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($__ptree__) + 180|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 | $55;
   $59 = (($__ptree__) + 184|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $58 | $60;
   $62 = $61 & 67240192;
   HEAP32[$ais_pawn>>2] = $62;
   $63 = $61 & 33620096;
   $64 = (($ais_pawn) + 4|0);
   HEAP32[$64>>2] = $63;
   $65 = $61 & 16810048;
   $66 = (($ais_pawn) + 8|0);
   HEAP32[$66>>2] = $65;
   $67 = $61 & 8405024;
   $68 = (($ais_pawn) + 12|0);
   HEAP32[$68>>2] = $67;
   $69 = $61 & 4202512;
   $70 = (($ais_pawn) + 16|0);
   HEAP32[$70>>2] = $69;
   $71 = $61 & 2101256;
   $72 = (($ais_pawn) + 20|0);
   HEAP32[$72>>2] = $71;
   $73 = $61 & 1050628;
   $74 = (($ais_pawn) + 24|0);
   HEAP32[$74>>2] = $73;
   $75 = $61 & 525314;
   $76 = (($ais_pawn) + 28|0);
   HEAP32[$76>>2] = $75;
   $77 = $61 & 262657;
   $78 = (($ais_pawn) + 32|0);
   HEAP32[$78>>2] = $77;
   $79 = $46 | $44;
   $80 = $79 | $47;
   $81 = ($80|0)==(0);
   if ($81) {
    $$01$lcssa = $pmove;
   } else {
    $82 = ($nhand$5|0)>(0);
    $$0153 = $pmove;$bb_target$sroa$0$050 = $44;$bb_target$sroa$1$051 = $46;$bb_target$sroa$2$052 = $47;
    while(1) {
     $86 = (_first_one012($bb_target$sroa$0$050,$bb_target$sroa$1$051,$bb_target$sroa$2$052)|0);
     $87 = (1248 + ($86)|0);
     $88 = HEAP8[$87>>0]|0;
     $89 = $88&255;
     $90 = (($ais_pawn) + ($89<<2)|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ($91|0)==(0);
     do {
      if ($92) {
       $93 = (($86) + 9)|0;
       $94 = ((($__ptree__) + ($93)|0) + 512|0);
       $95 = HEAP8[$94>>0]|0;
       $96 = ($95<<24>>24)==(8);
       if ($96) {
        $97 = (_is_mate_w_pawn_drop($__ptree__,$86)|0);
        $98 = ($97|0)==(0);
        if (!($98)) {
         $$2$ph = $$0153;
         break;
        }
       }
       $99 = $86 | 10368;
       $100 = (($$0153) + 4|0);
       HEAP32[$$0153>>2] = $99;
       $$2$ph = $100;
      } else {
       $$2$ph = $$0153;
      }
     } while(0);
     if ($82) {
      $$246 = $$2$ph;$i$045 = 0;
      while(1) {
       $101 = (($ahand) + ($i$045<<2)|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = $102 | $86;
       HEAP32[$$246>>2] = $103;
       $104 = (($i$045) + 1)|0;
       $exitcond60 = ($104|0)==($nhand$5|0);
       if ($exitcond60) {
        break;
       }
       $105 = (($$246) + 4|0);
       $$246 = $105;$i$045 = $104;
      }
      $scevgep59 = (($$2$ph) + ($nhand$5<<2)|0);
      $$2$lcssa = $scevgep59;
     } else {
      $$2$lcssa = $$2$ph;
     }
     $106 = (34156304 + (($86*12)|0)|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $107 ^ $bb_target$sroa$0$050;
     $109 = ((34156304 + (($86*12)|0)|0) + 4|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = $110 ^ $bb_target$sroa$1$051;
     $112 = ((34156304 + (($86*12)|0)|0) + 8|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = $113 ^ $bb_target$sroa$2$052;
     $115 = $111 | $108;
     $116 = $115 | $114;
     $117 = ($116|0)==(0);
     if ($117) {
      $$01$lcssa = $$2$lcssa;
      break;
     } else {
      $$0153 = $$2$lcssa;$bb_target$sroa$0$050 = $108;$bb_target$sroa$1$051 = $111;$bb_target$sroa$2$052 = $114;
     }
    }
   }
   $83 = ($42|0)==(0);
   if ($83) {
    $$10$ph = $$01$lcssa;
   } else {
    $84 = ($nhand$0|0)<($nhand$5|0);
    $85 = (($nhand$5) - ($nhand$0))|0;
    $$341 = $$01$lcssa;$ibb_target2b$040 = $42;
    while(1) {
     $131 = (_first_one2($ibb_target2b$040)|0);
     $132 = (1248 + ($131)|0);
     $133 = HEAP8[$132>>0]|0;
     $134 = $133&255;
     $135 = (($ais_pawn) + ($134<<2)|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ($136|0)==(0);
     do {
      if ($137) {
       $138 = (($131) + 9)|0;
       $139 = ((($__ptree__) + ($138)|0) + 512|0);
       $140 = HEAP8[$139>>0]|0;
       $141 = ($140<<24>>24)==(8);
       if ($141) {
        $142 = (_is_mate_w_pawn_drop($__ptree__,$131)|0);
        $143 = ($142|0)==(0);
        if (!($143)) {
         $$5$ph = $$341;
         break;
        }
       }
       $144 = $131 | 10368;
       $145 = (($$341) + 4|0);
       HEAP32[$$341>>2] = $144;
       $$5$ph = $145;
      } else {
       $$5$ph = $$341;
      }
     } while(0);
     if ($84) {
      $$534 = $$5$ph;$i$133 = $nhand$0;
      while(1) {
       $146 = (($ahand) + ($i$133<<2)|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = $147 | $131;
       HEAP32[$$534>>2] = $148;
       $149 = (($i$133) + 1)|0;
       $exitcond58 = ($149|0)==($nhand$5|0);
       if ($exitcond58) {
        break;
       }
       $150 = (($$534) + 4|0);
       $$534 = $150;$i$133 = $149;
      }
      $scevgep57 = (($$5$ph) + ($85<<2)|0);
      $$5$lcssa = $scevgep57;
     } else {
      $$5$lcssa = $$5$ph;
     }
     $151 = ((34156304 + (($131*12)|0)|0) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = $152 ^ $ibb_target2b$040;
     $154 = ($152|0)==($ibb_target2b$040|0);
     if ($154) {
      $$10$ph = $$5$lcssa;
      break;
     } else {
      $$341 = $$5$lcssa;$ibb_target2b$040 = $153;
     }
    }
   }
  }
 } while(0);
 $118 = ($41|0)==(0);
 if ($118) {
  $$0 = $$10$ph;
  STACKTOP = sp;return ($$0|0);
 }
 $119 = ($nhand$1|0)<($nhand$5|0);
 if (!($119)) {
  $ibb_target2a$04 = $41;
  while(1) {
   $191 = (_first_one2($ibb_target2a$04)|0);
   $192 = ((34156304 + (($191*12)|0)|0) + 8|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $193 ^ $ibb_target2a$04;
   $195 = ($193|0)==($ibb_target2a$04|0);
   if ($195) {
    $$0 = $$10$ph;
    break;
   } else {
    $ibb_target2a$04 = $194;
   }
  }
  STACKTOP = sp;return ($$0|0);
 }
 $120 = (($nhand$5) - ($nhand$1))|0;
 $$105$us = $$10$ph;$ibb_target2a$04$us = $41;
 while(1) {
  $122 = (_first_one2($ibb_target2a$04$us)|0);
  $$113$us = $$105$us;$i$42$us = $nhand$1;
  while(1) {
   $126 = (($ahand) + ($i$42$us<<2)|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $127 | $122;
   HEAP32[$$113$us>>2] = $128;
   $129 = (($i$42$us) + 1)|0;
   $exitcond62 = ($129|0)==($nhand$5|0);
   if ($exitcond62) {
    break;
   }
   $130 = (($$113$us) + 4|0);
   $$113$us = $130;$i$42$us = $129;
  }
  $scevgep61 = (($$105$us) + ($120<<2)|0);
  $121 = ((34156304 + (($122*12)|0)|0) + 8|0);
  $123 = HEAP32[$121>>2]|0;
  $124 = $123 ^ $ibb_target2a$04$us;
  $125 = ($123|0)==($ibb_target2a$04$us|0);
  if ($125) {
   $$0 = $scevgep61;
   break;
  } else {
   $$105$us = $scevgep61;$ibb_target2a$04$us = $124;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _is_b_mate_in_1ply($ptree) {
 $ptree = $ptree|0;
 var $$0 = 0, $$off = 0, $$pre$pre = 0, $$pre1002 = 0, $$pre987$pre = 0, $$pre988$pre = 0, $$pre989 = 0, $$pre990 = 0, $$pre991 = 0, $$pre992 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0;
 var $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0;
 var $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0;
 var $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0;
 var $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0;
 var $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0;
 var $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0;
 var $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0;
 var $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0;
 var $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0;
 var $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0;
 var $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0;
 var $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0;
 var $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0;
 var $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0;
 var $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0;
 var $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0;
 var $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0;
 var $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0;
 var $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0;
 var $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0;
 var $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0;
 var $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0;
 var $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0;
 var $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0;
 var $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0;
 var $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0;
 var $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0;
 var $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0;
 var $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0;
 var $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0;
 var $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0;
 var $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0;
 var $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0;
 var $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0;
 var $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0;
 var $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0;
 var $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0;
 var $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0;
 var $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0;
 var $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0;
 var $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0;
 var $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0;
 var $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0;
 var $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0;
 var $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0;
 var $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0;
 var $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0;
 var $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0;
 var $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0;
 var $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0;
 var $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0;
 var $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0;
 var $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0;
 var $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0;
 var $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0;
 var $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0;
 var $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0;
 var $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0;
 var $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0;
 var $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0;
 var $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0;
 var $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0;
 var $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0;
 var $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0;
 var $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0;
 var $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0;
 var $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0;
 var $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0;
 var $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0;
 var $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0;
 var $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0;
 var $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0;
 var $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0;
 var $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0;
 var $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0;
 var $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0;
 var $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0;
 var $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0;
 var $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0;
 var $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0;
 var $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0;
 var $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0;
 var $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0;
 var $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0;
 var $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0;
 var $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0;
 var $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0;
 var $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0;
 var $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0;
 var $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0;
 var $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0;
 var $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0;
 var $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0;
 var $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0;
 var $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0;
 var $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0;
 var $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0;
 var $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0;
 var $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0;
 var $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0;
 var $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0;
 var $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0;
 var $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0;
 var $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0;
 var $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0;
 var $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0;
 var $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0;
 var $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0;
 var $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0;
 var $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0;
 var $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0;
 var $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0;
 var $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0;
 var $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0;
 var $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0;
 var $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0;
 var $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0;
 var $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0;
 var $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0;
 var $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0;
 var $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0;
 var $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0;
 var $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0;
 var $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0;
 var $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0;
 var $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0, $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0;
 var $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0, $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0;
 var $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0;
 var $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0, $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0;
 var $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0, $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0;
 var $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0, $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0;
 var $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0, $3374 = 0, $3375 = 0, $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0;
 var $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0, $3392 = 0, $3393 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0, $340 = 0;
 var $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0, $341 = 0, $3410 = 0, $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0;
 var $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0, $3428 = 0, $3429 = 0, $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0;
 var $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0, $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0, $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0;
 var $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0, $3464 = 0, $3465 = 0, $3466 = 0, $3467 = 0, $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0, $3471 = 0, $3472 = 0;
 var $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0, $3482 = 0, $3483 = 0, $3484 = 0, $3485 = 0, $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0, $349 = 0, $3490 = 0;
 var $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0, $350 = 0, $3500 = 0, $3501 = 0, $3502 = 0, $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0, $3507 = 0, $3508 = 0;
 var $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0, $3517 = 0, $3518 = 0, $3519 = 0, $352 = 0, $3520 = 0, $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0, $3525 = 0, $3526 = 0;
 var $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0, $3535 = 0, $3536 = 0, $3537 = 0, $3538 = 0, $3539 = 0, $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0, $3543 = 0, $3544 = 0;
 var $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0, $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3553 = 0, $3554 = 0, $3555 = 0, $3556 = 0, $3557 = 0, $3558 = 0, $3559 = 0, $356 = 0, $3560 = 0, $3561 = 0, $3562 = 0;
 var $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0, $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0, $3571 = 0, $3572 = 0, $3573 = 0, $3574 = 0, $3575 = 0, $3576 = 0, $3577 = 0, $3578 = 0, $3579 = 0, $358 = 0, $3580 = 0;
 var $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0, $359 = 0, $3590 = 0, $3591 = 0, $3592 = 0, $3593 = 0, $3594 = 0, $3595 = 0, $3596 = 0, $3597 = 0, $3598 = 0, $3599 = 0;
 var $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0, $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0, $3607 = 0, $3608 = 0, $3609 = 0, $361 = 0, $3610 = 0, $3611 = 0, $3612 = 0, $3613 = 0, $3614 = 0, $3615 = 0, $3616 = 0;
 var $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0, $3626 = 0, $3627 = 0, $3628 = 0, $3629 = 0, $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0, $3633 = 0, $3634 = 0;
 var $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0, $3644 = 0, $3645 = 0, $3646 = 0, $3647 = 0, $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0, $3651 = 0, $3652 = 0;
 var $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0, $3662 = 0, $3663 = 0, $3664 = 0, $3665 = 0, $3666 = 0, $3667 = 0, $3668 = 0, $3669 = 0, $367 = 0, $3670 = 0;
 var $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0, $3680 = 0, $3681 = 0, $3682 = 0, $3683 = 0, $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0, $3688 = 0, $3689 = 0;
 var $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0, $3698 = 0, $3699 = 0, $37 = 0, $370 = 0, $3700 = 0, $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0, $3705 = 0, $3706 = 0;
 var $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0, $3713 = 0, $3714 = 0, $3715 = 0, $3716 = 0, $3717 = 0, $3718 = 0, $3719 = 0, $372 = 0, $3720 = 0, $3721 = 0, $3722 = 0, $3723 = 0, $3724 = 0;
 var $3725 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3729 = 0, $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0, $3733 = 0, $3734 = 0, $3735 = 0, $3736 = 0, $3737 = 0, $3738 = 0, $3739 = 0, $374 = 0, $3740 = 0, $3741 = 0, $3742 = 0;
 var $3743 = 0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0, $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0, $3751 = 0, $3752 = 0, $3753 = 0, $3754 = 0, $3755 = 0, $3756 = 0, $3757 = 0, $3758 = 0, $3759 = 0, $376 = 0, $3760 = 0;
 var $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0, $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0, $377 = 0, $3770 = 0, $3771 = 0, $3772 = 0, $3773 = 0, $3774 = 0, $3775 = 0, $3776 = 0, $3777 = 0, $3778 = 0, $3779 = 0;
 var $378 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0, $3784 = 0, $3785 = 0, $3786 = 0, $3787 = 0, $3788 = 0, $3789 = 0, $379 = 0, $3790 = 0, $3791 = 0, $3792 = 0, $3793 = 0, $3794 = 0, $3795 = 0, $3796 = 0, $3797 = 0;
 var $3798 = 0, $3799 = 0, $38 = 0, $380 = 0, $3800 = 0, $3801 = 0, $3802 = 0, $3803 = 0, $3804 = 0, $3805 = 0, $3806 = 0, $3807 = 0, $3808 = 0, $3809 = 0, $381 = 0, $3810 = 0, $3811 = 0, $3812 = 0, $3813 = 0, $3814 = 0;
 var $3815 = 0, $3816 = 0, $3817 = 0, $3818 = 0, $3819 = 0, $382 = 0, $3820 = 0, $3821 = 0, $3822 = 0, $3823 = 0, $3824 = 0, $3825 = 0, $3826 = 0, $3827 = 0, $3828 = 0, $3829 = 0, $383 = 0, $3830 = 0, $3831 = 0, $3832 = 0;
 var $3833 = 0, $3834 = 0, $3835 = 0, $3836 = 0, $3837 = 0, $3838 = 0, $3839 = 0, $384 = 0, $3840 = 0, $3841 = 0, $3842 = 0, $3843 = 0, $3844 = 0, $3845 = 0, $3846 = 0, $3847 = 0, $3848 = 0, $3849 = 0, $385 = 0, $3850 = 0;
 var $3851 = 0, $3852 = 0, $3853 = 0, $3854 = 0, $3855 = 0, $3856 = 0, $3857 = 0, $3858 = 0, $3859 = 0, $386 = 0, $3860 = 0, $3861 = 0, $3862 = 0, $3863 = 0, $3864 = 0, $3865 = 0, $3866 = 0, $3867 = 0, $3868 = 0, $3869 = 0;
 var $387 = 0, $3870 = 0, $3871 = 0, $3872 = 0, $3873 = 0, $3874 = 0, $3875 = 0, $3876 = 0, $3877 = 0, $3878 = 0, $3879 = 0, $388 = 0, $3880 = 0, $3881 = 0, $3882 = 0, $3883 = 0, $3884 = 0, $3885 = 0, $3886 = 0, $3887 = 0;
 var $3888 = 0, $3889 = 0, $389 = 0, $3890 = 0, $3891 = 0, $3892 = 0, $3893 = 0, $3894 = 0, $3895 = 0, $3896 = 0, $3897 = 0, $3898 = 0, $3899 = 0, $39 = 0, $390 = 0, $3900 = 0, $3901 = 0, $3902 = 0, $3903 = 0, $3904 = 0;
 var $3905 = 0, $3906 = 0, $3907 = 0, $3908 = 0, $3909 = 0, $391 = 0, $3910 = 0, $3911 = 0, $3912 = 0, $3913 = 0, $3914 = 0, $3915 = 0, $3916 = 0, $3917 = 0, $3918 = 0, $3919 = 0, $392 = 0, $3920 = 0, $3921 = 0, $3922 = 0;
 var $3923 = 0, $3924 = 0, $3925 = 0, $3926 = 0, $3927 = 0, $3928 = 0, $3929 = 0, $393 = 0, $3930 = 0, $3931 = 0, $3932 = 0, $3933 = 0, $3934 = 0, $3935 = 0, $3936 = 0, $3937 = 0, $3938 = 0, $3939 = 0, $394 = 0, $3940 = 0;
 var $3941 = 0, $3942 = 0, $3943 = 0, $3944 = 0, $3945 = 0, $3946 = 0, $3947 = 0, $3948 = 0, $3949 = 0, $395 = 0, $3950 = 0, $3951 = 0, $3952 = 0, $3953 = 0, $3954 = 0, $3955 = 0, $3956 = 0, $3957 = 0, $3958 = 0, $3959 = 0;
 var $396 = 0, $3960 = 0, $3961 = 0, $3962 = 0, $3963 = 0, $3964 = 0, $3965 = 0, $3966 = 0, $3967 = 0, $3968 = 0, $3969 = 0, $397 = 0, $3970 = 0, $3971 = 0, $3972 = 0, $3973 = 0, $3974 = 0, $3975 = 0, $3976 = 0, $3977 = 0;
 var $3978 = 0, $3979 = 0, $398 = 0, $3980 = 0, $3981 = 0, $3982 = 0, $3983 = 0, $3984 = 0, $3985 = 0, $3986 = 0, $3987 = 0, $3988 = 0, $3989 = 0, $399 = 0, $3990 = 0, $3991 = 0, $3992 = 0, $3993 = 0, $3994 = 0, $3995 = 0;
 var $3996 = 0, $3997 = 0, $3998 = 0, $3999 = 0, $4 = 0, $40 = 0, $400 = 0, $4000 = 0, $4001 = 0, $4002 = 0, $4003 = 0, $4004 = 0, $4005 = 0, $4006 = 0, $4007 = 0, $4008 = 0, $4009 = 0, $401 = 0, $4010 = 0, $4011 = 0;
 var $4012 = 0, $4013 = 0, $4014 = 0, $4015 = 0, $4016 = 0, $4017 = 0, $4018 = 0, $4019 = 0, $402 = 0, $4020 = 0, $4021 = 0, $4022 = 0, $4023 = 0, $4024 = 0, $4025 = 0, $4026 = 0, $4027 = 0, $4028 = 0, $4029 = 0, $403 = 0;
 var $4030 = 0, $4031 = 0, $4032 = 0, $4033 = 0, $4034 = 0, $4035 = 0, $4036 = 0, $4037 = 0, $4038 = 0, $4039 = 0, $404 = 0, $4040 = 0, $4041 = 0, $4042 = 0, $4043 = 0, $4044 = 0, $4045 = 0, $4046 = 0, $4047 = 0, $4048 = 0;
 var $4049 = 0, $405 = 0, $4050 = 0, $4051 = 0, $4052 = 0, $4053 = 0, $4054 = 0, $4055 = 0, $4056 = 0, $4057 = 0, $4058 = 0, $4059 = 0, $406 = 0, $4060 = 0, $4061 = 0, $4062 = 0, $4063 = 0, $4064 = 0, $4065 = 0, $4066 = 0;
 var $4067 = 0, $4068 = 0, $4069 = 0, $407 = 0, $4070 = 0, $4071 = 0, $4072 = 0, $4073 = 0, $4074 = 0, $4075 = 0, $4076 = 0, $4077 = 0, $4078 = 0, $4079 = 0, $408 = 0, $4080 = 0, $4081 = 0, $4082 = 0, $4083 = 0, $4084 = 0;
 var $4085 = 0, $4086 = 0, $4087 = 0, $4088 = 0, $4089 = 0, $409 = 0, $4090 = 0, $4091 = 0, $4092 = 0, $4093 = 0, $4094 = 0, $4095 = 0, $4096 = 0, $4097 = 0, $4098 = 0, $4099 = 0, $41 = 0, $410 = 0, $4100 = 0, $4101 = 0;
 var $4102 = 0, $4103 = 0, $4104 = 0, $4105 = 0, $4106 = 0, $4107 = 0, $4108 = 0, $4109 = 0, $411 = 0, $4110 = 0, $4111 = 0, $4112 = 0, $4113 = 0, $4114 = 0, $4115 = 0, $4116 = 0, $4117 = 0, $4118 = 0, $4119 = 0, $412 = 0;
 var $4120 = 0, $4121 = 0, $4122 = 0, $4123 = 0, $4124 = 0, $4125 = 0, $4126 = 0, $4127 = 0, $4128 = 0, $4129 = 0, $413 = 0, $4130 = 0, $4131 = 0, $4132 = 0, $4133 = 0, $4134 = 0, $4135 = 0, $4136 = 0, $4137 = 0, $4138 = 0;
 var $4139 = 0, $414 = 0, $4140 = 0, $4141 = 0, $4142 = 0, $4143 = 0, $4144 = 0, $4145 = 0, $4146 = 0, $4147 = 0, $4148 = 0, $4149 = 0, $415 = 0, $4150 = 0, $4151 = 0, $4152 = 0, $4153 = 0, $4154 = 0, $4155 = 0, $4156 = 0;
 var $4157 = 0, $4158 = 0, $4159 = 0, $416 = 0, $4160 = 0, $4161 = 0, $4162 = 0, $4163 = 0, $4164 = 0, $4165 = 0, $4166 = 0, $4167 = 0, $4168 = 0, $4169 = 0, $417 = 0, $4170 = 0, $4171 = 0, $4172 = 0, $4173 = 0, $4174 = 0;
 var $4175 = 0, $4176 = 0, $4177 = 0, $4178 = 0, $4179 = 0, $418 = 0, $4180 = 0, $4181 = 0, $4182 = 0, $4183 = 0, $4184 = 0, $4185 = 0, $4186 = 0, $4187 = 0, $4188 = 0, $4189 = 0, $419 = 0, $4190 = 0, $4191 = 0, $4192 = 0;
 var $4193 = 0, $4194 = 0, $4195 = 0, $4196 = 0, $4197 = 0, $4198 = 0, $4199 = 0, $42 = 0, $420 = 0, $4200 = 0, $4201 = 0, $4202 = 0, $4203 = 0, $4204 = 0, $4205 = 0, $4206 = 0, $4207 = 0, $4208 = 0, $4209 = 0, $421 = 0;
 var $4210 = 0, $4211 = 0, $4212 = 0, $4213 = 0, $4214 = 0, $4215 = 0, $4216 = 0, $4217 = 0, $4218 = 0, $4219 = 0, $422 = 0, $4220 = 0, $4221 = 0, $4222 = 0, $4223 = 0, $4224 = 0, $4225 = 0, $4226 = 0, $4227 = 0, $4228 = 0;
 var $4229 = 0, $423 = 0, $4230 = 0, $4231 = 0, $4232 = 0, $4233 = 0, $4234 = 0, $4235 = 0, $4236 = 0, $4237 = 0, $4238 = 0, $4239 = 0, $424 = 0, $4240 = 0, $4241 = 0, $4242 = 0, $4243 = 0, $4244 = 0, $4245 = 0, $4246 = 0;
 var $4247 = 0, $4248 = 0, $4249 = 0, $425 = 0, $4250 = 0, $4251 = 0, $4252 = 0, $4253 = 0, $4254 = 0, $4255 = 0, $4256 = 0, $4257 = 0, $4258 = 0, $4259 = 0, $426 = 0, $4260 = 0, $4261 = 0, $4262 = 0, $4263 = 0, $4264 = 0;
 var $4265 = 0, $4266 = 0, $4267 = 0, $4268 = 0, $4269 = 0, $427 = 0, $4270 = 0, $4271 = 0, $4272 = 0, $4273 = 0, $4274 = 0, $4275 = 0, $4276 = 0, $4277 = 0, $4278 = 0, $4279 = 0, $428 = 0, $4280 = 0, $4281 = 0, $4282 = 0;
 var $4283 = 0, $4284 = 0, $4285 = 0, $4286 = 0, $4287 = 0, $4288 = 0, $4289 = 0, $429 = 0, $4290 = 0, $4291 = 0, $4292 = 0, $4293 = 0, $4294 = 0, $4295 = 0, $4296 = 0, $4297 = 0, $4298 = 0, $4299 = 0, $43 = 0, $430 = 0;
 var $4300 = 0, $4301 = 0, $4302 = 0, $4303 = 0, $4304 = 0, $4305 = 0, $4306 = 0, $4307 = 0, $4308 = 0, $4309 = 0, $431 = 0, $4310 = 0, $4311 = 0, $4312 = 0, $4313 = 0, $4314 = 0, $4315 = 0, $4316 = 0, $4317 = 0, $4318 = 0;
 var $4319 = 0, $432 = 0, $4320 = 0, $4321 = 0, $4322 = 0, $4323 = 0, $4324 = 0, $4325 = 0, $4326 = 0, $4327 = 0, $4328 = 0, $4329 = 0, $433 = 0, $4330 = 0, $4331 = 0, $4332 = 0, $4333 = 0, $4334 = 0, $4335 = 0, $4336 = 0;
 var $4337 = 0, $4338 = 0, $4339 = 0, $434 = 0, $4340 = 0, $4341 = 0, $4342 = 0, $4343 = 0, $4344 = 0, $4345 = 0, $4346 = 0, $4347 = 0, $4348 = 0, $4349 = 0, $435 = 0, $4350 = 0, $4351 = 0, $4352 = 0, $4353 = 0, $4354 = 0;
 var $4355 = 0, $4356 = 0, $4357 = 0, $4358 = 0, $4359 = 0, $436 = 0, $4360 = 0, $4361 = 0, $4362 = 0, $4363 = 0, $4364 = 0, $4365 = 0, $4366 = 0, $4367 = 0, $4368 = 0, $4369 = 0, $437 = 0, $4370 = 0, $4371 = 0, $4372 = 0;
 var $4373 = 0, $4374 = 0, $4375 = 0, $4376 = 0, $4377 = 0, $4378 = 0, $4379 = 0, $438 = 0, $4380 = 0, $4381 = 0, $4382 = 0, $4383 = 0, $4384 = 0, $4385 = 0, $4386 = 0, $4387 = 0, $4388 = 0, $4389 = 0, $439 = 0, $4390 = 0;
 var $4391 = 0, $4392 = 0, $4393 = 0, $4394 = 0, $4395 = 0, $4396 = 0, $4397 = 0, $4398 = 0, $4399 = 0, $44 = 0, $440 = 0, $4400 = 0, $4401 = 0, $4402 = 0, $4403 = 0, $4404 = 0, $4405 = 0, $4406 = 0, $4407 = 0, $4408 = 0;
 var $4409 = 0, $441 = 0, $4410 = 0, $4411 = 0, $4412 = 0, $4413 = 0, $4414 = 0, $4415 = 0, $4416 = 0, $4417 = 0, $4418 = 0, $4419 = 0, $442 = 0, $4420 = 0, $4421 = 0, $4422 = 0, $4423 = 0, $4424 = 0, $4425 = 0, $4426 = 0;
 var $4427 = 0, $4428 = 0, $4429 = 0, $443 = 0, $4430 = 0, $4431 = 0, $4432 = 0, $4433 = 0, $4434 = 0, $4435 = 0, $4436 = 0, $4437 = 0, $4438 = 0, $4439 = 0, $444 = 0, $4440 = 0, $4441 = 0, $4442 = 0, $4443 = 0, $4444 = 0;
 var $4445 = 0, $4446 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bb$sroa$0$0680 = 0, $bb$sroa$0$10416 = 0, $bb$sroa$0$11271 = 0;
 var $bb$sroa$0$12216 = 0, $bb$sroa$0$1672 = 0, $bb$sroa$0$2$ph = 0, $bb$sroa$0$2665 = 0, $bb$sroa$0$3$ph = 0, $bb$sroa$0$3657 = 0, $bb$sroa$0$4648 = 0, $bb$sroa$0$5639 = 0, $bb$sroa$0$6604 = 0, $bb$sroa$0$7542 = 0, $bb$sroa$0$8507 = 0, $bb$sroa$0$9445 = 0, $bb$sroa$1$0681 = 0, $bb$sroa$1$10301 = 0, $bb$sroa$1$11272 = 0, $bb$sroa$1$12217 = 0, $bb$sroa$1$1673 = 0, $bb$sroa$1$2$ph = 0, $bb$sroa$1$2666 = 0, $bb$sroa$1$3$ph = 0;
 var $bb$sroa$1$3658 = 0, $bb$sroa$1$4649 = 0, $bb$sroa$1$5640 = 0, $bb$sroa$1$6575 = 0, $bb$sroa$1$7543 = 0, $bb$sroa$1$8478 = 0, $bb$sroa$1$9446 = 0, $bb$sroa$2$0682 = 0, $bb$sroa$2$10302 = 0, $bb$sroa$2$11273 = 0, $bb$sroa$2$12218 = 0, $bb$sroa$2$1674 = 0, $bb$sroa$2$2$ph = 0, $bb$sroa$2$2667 = 0, $bb$sroa$2$3$ph = 0, $bb$sroa$2$3659 = 0, $bb$sroa$2$4650 = 0, $bb$sroa$2$5641 = 0, $bb$sroa$2$6576 = 0, $bb$sroa$2$7544 = 0;
 var $bb$sroa$2$8479 = 0, $bb$sroa$2$9447 = 0, $bb_check$sroa$0$0 = 0, $bb_check$sroa$0$1 = 0, $bb_check$sroa$0$10 = 0, $bb_check$sroa$0$11165 = 0, $bb_check$sroa$0$2 = 0, $bb_check$sroa$0$3 = 0, $bb_check$sroa$0$4 = 0, $bb_check$sroa$0$5 = 0, $bb_check$sroa$0$6 = 0, $bb_check$sroa$0$7372 = 0, $bb_check$sroa$0$8314 = 0, $bb_check$sroa$0$9 = 0, $bb_check$sroa$1$0 = 0, $bb_check$sroa$1$1 = 0, $bb_check$sroa$1$10 = 0, $bb_check$sroa$1$2 = 0, $bb_check$sroa$1$3 = 0, $bb_check$sroa$1$4 = 0;
 var $bb_check$sroa$1$5 = 0, $bb_check$sroa$1$6 = 0, $bb_check$sroa$1$7371 = 0, $bb_check$sroa$1$8313 = 0, $bb_check$sroa$1$9 = 0, $bb_check$sroa$2$0 = 0, $bb_check$sroa$2$1 = 0, $bb_check$sroa$2$2 = 0, $bb_check$sroa$2$3 = 0, $bb_check$sroa$2$4 = 0, $bb_check$sroa$2$5 = 0, $bb_check$sroa$2$6 = 0, $bb_check$sroa$2$7 = 0, $bb_check$sroa$2$8 = 0, $bb_check_pro$sroa$0$0366 = 0, $bb_check_pro$sroa$0$1308 = 0, $bb_check_pro$sroa$0$2167 = 0, $bb_check_pro$sroa$1$0365 = 0, $storemerge = 0, $storemerge70 = 0;
 var $ubb$0358 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ptree) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ptree) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | $1;
 $5 = (($ptree) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($ptree) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 | $6;
 $10 = (($ptree) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($ptree) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 | $11;
 $15 = $4 ^ -1;
 $16 = $9 ^ -1;
 $17 = $14 ^ -1;
 $18 = (($ptree) + 500|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 1572864;
 $21 = ($20|0)==(0);
 L1: do {
  if ($21) {
   $81 = $19 & 224;
   $82 = ($81|0)==(0);
   if (!($82)) {
    $83 = (($ptree) + 594|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = ($84&255)<(72);
    if ($85) {
     $86 = $84&255;
     $87 = (($86) + 9)|0;
     $88 = ((($ptree) + ($87)|0) + 512|0);
     $89 = HEAP8[$88>>0]|0;
     $90 = ($89<<24>>24)==(0);
     if ($90) {
      $91 = (_is_white_attacked($ptree,$87)|0);
      $92 = ($91|0)==(0);
      if (!($92)) {
       $93 = (33953152 + (($87*1536)|0)|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = ((33953152 + (($87*1536)|0)|0) + 4|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = ((33953152 + (($87*1536)|0)|0) + 8|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = (_can_w_king_escape($ptree,$87,$94,$96,$98)|0);
       $100 = ($99|0)==(0);
       if ($100) {
        $101 = (_can_w_piece_capture($ptree,$87)|0);
        $102 = ($101|0)==(0);
        if ($102) {
         $103 = $87 | 10496;
         $$0 = $103;
         STACKTOP = sp;return ($$0|0);
        }
       }
      }
     }
    }
   }
  } else {
   $22 = (($ptree) + 594|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = (33577952 + (($24*12)|0)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (33575024 + (($24*12)|0)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((33577952 + (($24*12)|0)|0) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((33575024 + (($24*12)|0)|0) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((33577952 + (($24*12)|0)|0) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((33575024 + (($24*12)|0)|0) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $26 & $15;
   $38 = $37 & $28;
   $39 = $30 & $16;
   $40 = $39 & $32;
   $41 = $34 & $17;
   $42 = $41 & $36;
   $43 = $40 | $38;
   $44 = $43 | $42;
   $45 = ($44|0)==(0);
   if (!($45)) {
    $bb$sroa$0$0680 = $38;$bb$sroa$1$0681 = $40;$bb$sroa$2$0682 = $42;
    while(1) {
     $46 = (_first_one012($bb$sroa$0$0680,$bb$sroa$1$0681,$bb$sroa$2$0682)|0);
     $47 = (34156304 + (($46*12)|0)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = $48 ^ $bb$sroa$0$0680;
     $50 = ((34156304 + (($46*12)|0)|0) + 4|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = $51 ^ $bb$sroa$1$0681;
     $53 = ((34156304 + (($46*12)|0)|0) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $54 ^ $bb$sroa$2$0682;
     $56 = (_is_white_attacked($ptree,$46)|0);
     $57 = ($56|0)==(0);
     if (!($57)) {
      $61 = (33953152 + (($46*1536)|0)|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = (33828736 + (($46*1536)|0)|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = $64 | $62;
      $66 = ((33953152 + (($46*1536)|0)|0) + 4|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ((33828736 + (($46*1536)|0)|0) + 4|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = $69 | $67;
      $71 = ((33953152 + (($46*1536)|0)|0) + 8|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ((33828736 + (($46*1536)|0)|0) + 8|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = $74 | $72;
      $76 = (_can_w_king_escape($ptree,$46,$65,$70,$75)|0);
      $77 = ($76|0)==(0);
      if ($77) {
       $78 = (_can_w_piece_capture($ptree,$46)|0);
       $79 = ($78|0)==(0);
       if ($79) {
        break;
       }
      }
     }
     $58 = $52 | $49;
     $59 = $58 | $55;
     $60 = ($59|0)==(0);
     if ($60) {
      break L1;
     } else {
      $bb$sroa$0$0680 = $49;$bb$sroa$1$0681 = $52;$bb$sroa$2$0682 = $55;
     }
    }
    $80 = $46 | 11136;
    $$0 = $80;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $104 = HEAP32[$18>>2]|0;
 $105 = $104 & 393216;
 $106 = ($105|0)==(0);
 do {
  if ($106) {
   $167 = $104;
  } else {
   $107 = (($ptree) + 594|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = $108&255;
   $110 = (33576976 + (($109*12)|0)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (33574048 + (($109*12)|0)|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = ((33576976 + (($109*12)|0)|0) + 4|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ((33574048 + (($109*12)|0)|0) + 4|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ((33576976 + (($109*12)|0)|0) + 8|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ((33574048 + (($109*12)|0)|0) + 8|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $111 & $15;
   $123 = $122 & $113;
   $124 = $115 & $16;
   $125 = $124 & $117;
   $126 = $119 & $17;
   $127 = $126 & $121;
   $128 = $125 | $123;
   $129 = $128 | $127;
   $130 = ($129|0)==(0);
   if ($130) {
    $167 = $104;
   } else {
    $bb$sroa$0$1672 = $123;$bb$sroa$1$1673 = $125;$bb$sroa$2$1674 = $127;
    while(1) {
     $131 = (_first_one012($bb$sroa$0$1672,$bb$sroa$1$1673,$bb$sroa$2$1674)|0);
     $132 = (34156304 + (($131*12)|0)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = $133 ^ $bb$sroa$0$1672;
     $135 = ((34156304 + (($131*12)|0)|0) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 ^ $bb$sroa$1$1673;
     $138 = ((34156304 + (($131*12)|0)|0) + 8|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $139 ^ $bb$sroa$2$1674;
     $141 = (_is_white_attacked($ptree,$131)|0);
     $142 = ($141|0)==(0);
     if (!($142)) {
      $146 = (33704320 + (($131*1536)|0)|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (33579904 + (($131*1536)|0)|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = $149 | $147;
      $151 = ((33704320 + (($131*1536)|0)|0) + 4|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = ((33579904 + (($131*1536)|0)|0) + 4|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = $154 | $152;
      $156 = ((33704320 + (($131*1536)|0)|0) + 8|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ((33579904 + (($131*1536)|0)|0) + 8|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = $159 | $157;
      $161 = (_can_w_king_escape($ptree,$131,$150,$155,$160)|0);
      $162 = ($161|0)==(0);
      if ($162) {
       $163 = (_can_w_piece_capture($ptree,$131)|0);
       $164 = ($163|0)==(0);
       if ($164) {
        break;
       }
      }
     }
     $143 = $137 | $134;
     $144 = $143 | $140;
     $145 = ($144|0)==(0);
     if ($145) {
      label = 22;
      break;
     } else {
      $bb$sroa$0$1672 = $134;$bb$sroa$1$1673 = $137;$bb$sroa$2$1674 = $140;
     }
    }
    if ((label|0) == 22) {
     $$pre$pre = HEAP32[$18>>2]|0;
     $167 = $$pre$pre;
     break;
    }
    $165 = $131 | 11008;
    $$0 = $165;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $166 = $167 & 114688;
 $168 = ($166|0)==(0);
 do {
  if ($168) {
   $243 = $167;
  } else {
   $169 = $167 & 1572864;
   $170 = ($169|0)==(0);
   $171 = (($ptree) + 594|0);
   $172 = HEAP8[$171>>0]|0;
   $173 = $172&255;
   if ($170) {
    $204 = (33577952 + (($173*12)|0)|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = $205 & $15;
    $207 = ((33577952 + (($173*12)|0)|0) + 4|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = $208 & $16;
    $210 = ((33577952 + (($173*12)|0)|0) + 8|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = $211 & $17;
    $bb$sroa$0$2$ph = $206;$bb$sroa$1$2$ph = $209;$bb$sroa$2$2$ph = $212;
   } else {
    $174 = (33575024 + (($173*12)|0)|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = (33574048 + (($173*12)|0)|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = $177 & $175;
    $179 = ((33575024 + (($173*12)|0)|0) + 4|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ((33574048 + (($173*12)|0)|0) + 4|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = $182 & $180;
    $184 = ((33575024 + (($173*12)|0)|0) + 8|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = ((33574048 + (($173*12)|0)|0) + 8|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = $187 & $185;
    $189 = $178 ^ -1;
    $190 = $189 & $15;
    $191 = $183 ^ -1;
    $192 = $191 & $16;
    $193 = $188 ^ -1;
    $194 = $193 & $17;
    $195 = (33577952 + (($173*12)|0)|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = $190 & $196;
    $198 = ((33577952 + (($173*12)|0)|0) + 4|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = $192 & $199;
    $201 = ((33577952 + (($173*12)|0)|0) + 8|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = $194 & $202;
    $bb$sroa$0$2$ph = $197;$bb$sroa$1$2$ph = $200;$bb$sroa$2$2$ph = $203;
   }
   $213 = $bb$sroa$1$2$ph | $bb$sroa$0$2$ph;
   $214 = $213 | $bb$sroa$2$2$ph;
   $215 = ($214|0)==(0);
   if ($215) {
    $243 = $167;
   } else {
    $bb$sroa$0$2665 = $bb$sroa$0$2$ph;$bb$sroa$1$2666 = $bb$sroa$1$2$ph;$bb$sroa$2$2667 = $bb$sroa$2$2$ph;
    while(1) {
     $216 = (_first_one012($bb$sroa$0$2665,$bb$sroa$1$2666,$bb$sroa$2$2667)|0);
     $217 = (34156304 + (($216*12)|0)|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = $218 ^ $bb$sroa$0$2665;
     $220 = ((34156304 + (($216*12)|0)|0) + 4|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = $221 ^ $bb$sroa$1$2666;
     $223 = ((34156304 + (($216*12)|0)|0) + 8|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = $224 ^ $bb$sroa$2$2667;
     $226 = (_is_white_attacked($ptree,$216)|0);
     $227 = ($226|0)==(0);
     if (!($227)) {
      $231 = (33575024 + (($216*12)|0)|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = ((33575024 + (($216*12)|0)|0) + 4|0);
      $234 = HEAP32[$233>>2]|0;
      $235 = ((33575024 + (($216*12)|0)|0) + 8|0);
      $236 = HEAP32[$235>>2]|0;
      $237 = (_can_w_king_escape($ptree,$216,$232,$234,$236)|0);
      $238 = ($237|0)==(0);
      if ($238) {
       $239 = (_can_w_piece_capture($ptree,$216)|0);
       $240 = ($239|0)==(0);
       if ($240) {
        break;
       }
      }
     }
     $228 = $222 | $219;
     $229 = $228 | $225;
     $230 = ($229|0)==(0);
     if ($230) {
      label = 33;
      break;
     } else {
      $bb$sroa$0$2665 = $219;$bb$sroa$1$2666 = $222;$bb$sroa$2$2667 = $225;
     }
    }
    if ((label|0) == 33) {
     $$pre987$pre = HEAP32[$18>>2]|0;
     $243 = $$pre987$pre;
     break;
    }
    $241 = $216 | 10880;
    $$0 = $241;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $242 = $243 & 14336;
 $244 = ($242|0)==(0);
 do {
  if ($244) {
   $326 = $243;
  } else {
   $245 = $243 & 114688;
   $246 = ($245|0)==(0);
   if ($246) {
    $273 = (($ptree) + 594|0);
    $274 = HEAP8[$273>>0]|0;
    $275 = $274&255;
    $276 = (33576976 + (($275*12)|0)|0);
    $277 = HEAP32[$276>>2]|0;
    $278 = $277 & $15;
    $279 = ((33576976 + (($275*12)|0)|0) + 4|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = $280 & $16;
    $282 = ((33576976 + (($275*12)|0)|0) + 8|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = $283 & $17;
    $285 = $243 & 393216;
    $286 = ($285|0)==(0);
    if ($286) {
     $bb$sroa$0$3$ph = $278;$bb$sroa$1$3$ph = $281;$bb$sroa$2$3$ph = $284;
    } else {
     $287 = (33577952 + (($275*12)|0)|0);
     $288 = HEAP32[$287>>2]|0;
     $289 = $288 & $278;
     $290 = ((33577952 + (($275*12)|0)|0) + 4|0);
     $291 = HEAP32[$290>>2]|0;
     $292 = $291 & $281;
     $293 = ((33577952 + (($275*12)|0)|0) + 8|0);
     $294 = HEAP32[$293>>2]|0;
     $295 = $294 & $284;
     $bb$sroa$0$3$ph = $289;$bb$sroa$1$3$ph = $292;$bb$sroa$2$3$ph = $295;
    }
   } else {
    $247 = $243 & 393216;
    $248 = ($247|0)==(0);
    if (!($248)) {
     $326 = $243;
     break;
    }
    $249 = (($ptree) + 594|0);
    $250 = HEAP8[$249>>0]|0;
    $251 = $250&255;
    $252 = (33576976 + (($251*12)|0)|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = (33577952 + (($251*12)|0)|0);
    $255 = HEAP32[$254>>2]|0;
    $256 = $255 ^ -1;
    $257 = ((33576976 + (($251*12)|0)|0) + 4|0);
    $258 = HEAP32[$257>>2]|0;
    $259 = ((33577952 + (($251*12)|0)|0) + 4|0);
    $260 = HEAP32[$259>>2]|0;
    $261 = $260 ^ -1;
    $262 = ((33576976 + (($251*12)|0)|0) + 8|0);
    $263 = HEAP32[$262>>2]|0;
    $264 = ((33577952 + (($251*12)|0)|0) + 8|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = $265 ^ -1;
    $267 = $253 & $15;
    $268 = $267 & $256;
    $269 = $258 & $16;
    $270 = $269 & $261;
    $271 = $263 & $17;
    $272 = $271 & $266;
    $bb$sroa$0$3$ph = $268;$bb$sroa$1$3$ph = $270;$bb$sroa$2$3$ph = $272;
   }
   $296 = $bb$sroa$1$3$ph | $bb$sroa$0$3$ph;
   $297 = $296 | $bb$sroa$2$3$ph;
   $298 = ($297|0)==(0);
   if ($298) {
    $326 = $243;
   } else {
    $bb$sroa$0$3657 = $bb$sroa$0$3$ph;$bb$sroa$1$3658 = $bb$sroa$1$3$ph;$bb$sroa$2$3659 = $bb$sroa$2$3$ph;
    while(1) {
     $299 = (_first_one012($bb$sroa$0$3657,$bb$sroa$1$3658,$bb$sroa$2$3659)|0);
     $300 = (34156304 + (($299*12)|0)|0);
     $301 = HEAP32[$300>>2]|0;
     $302 = $301 ^ $bb$sroa$0$3657;
     $303 = ((34156304 + (($299*12)|0)|0) + 4|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = $304 ^ $bb$sroa$1$3658;
     $306 = ((34156304 + (($299*12)|0)|0) + 8|0);
     $307 = HEAP32[$306>>2]|0;
     $308 = $307 ^ $bb$sroa$2$3659;
     $309 = (_is_white_attacked($ptree,$299)|0);
     $310 = ($309|0)==(0);
     if (!($310)) {
      $314 = (33574048 + (($299*12)|0)|0);
      $315 = HEAP32[$314>>2]|0;
      $316 = ((33574048 + (($299*12)|0)|0) + 4|0);
      $317 = HEAP32[$316>>2]|0;
      $318 = ((33574048 + (($299*12)|0)|0) + 8|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = (_can_w_king_escape($ptree,$299,$315,$317,$319)|0);
      $321 = ($320|0)==(0);
      if ($321) {
       $322 = (_can_w_piece_capture($ptree,$299)|0);
       $323 = ($322|0)==(0);
       if ($323) {
        break;
       }
      }
     }
     $311 = $305 | $302;
     $312 = $311 | $308;
     $313 = ($312|0)==(0);
     if ($313) {
      label = 46;
      break;
     } else {
      $bb$sroa$0$3657 = $302;$bb$sroa$1$3658 = $305;$bb$sroa$2$3659 = $308;
     }
    }
    if ((label|0) == 46) {
     $$pre988$pre = HEAP32[$18>>2]|0;
     $326 = $$pre988$pre;
     break;
    }
    $324 = $299 | 10752;
    $$0 = $324;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $325 = $326 & 1792;
 $327 = ($325|0)==(0);
 L69: do {
  if (!($327)) {
   $328 = (($ptree) + 594|0);
   $329 = HEAP8[$328>>0]|0;
   $330 = $329&255;
   $331 = (33576000 + (($330*12)|0)|0);
   $332 = HEAP32[$331>>2]|0;
   $333 = $332 & $15;
   $334 = ((33576000 + (($330*12)|0)|0) + 4|0);
   $335 = HEAP32[$334>>2]|0;
   $336 = $335 & $16;
   $337 = ((33576000 + (($330*12)|0)|0) + 8|0);
   $338 = HEAP32[$337>>2]|0;
   $339 = $338 & $17;
   $340 = $336 | $333;
   $341 = $340 | $339;
   $342 = ($341|0)==(0);
   if (!($342)) {
    $bb$sroa$0$4648 = $333;$bb$sroa$1$4649 = $336;$bb$sroa$2$4650 = $339;
    while(1) {
     $343 = (_first_one012($bb$sroa$0$4648,$bb$sroa$1$4649,$bb$sroa$2$4650)|0);
     $344 = (34156304 + (($343*12)|0)|0);
     $345 = HEAP32[$344>>2]|0;
     $346 = $345 ^ $bb$sroa$0$4648;
     $347 = ((34156304 + (($343*12)|0)|0) + 4|0);
     $348 = HEAP32[$347>>2]|0;
     $349 = $348 ^ $bb$sroa$1$4649;
     $350 = ((34156304 + (($343*12)|0)|0) + 8|0);
     $351 = HEAP32[$350>>2]|0;
     $352 = $351 ^ $bb$sroa$2$4650;
     $353 = (_can_w_king_escape($ptree,$343,0,0,0)|0);
     $354 = ($353|0)==(0);
     if ($354) {
      $358 = (_can_w_piece_capture($ptree,$343)|0);
      $359 = ($358|0)==(0);
      if ($359) {
       break;
      }
     }
     $355 = $349 | $346;
     $356 = $355 | $352;
     $357 = ($356|0)==(0);
     if ($357) {
      break L69;
     } else {
      $bb$sroa$0$4648 = $346;$bb$sroa$1$4649 = $349;$bb$sroa$2$4650 = $352;
     }
    }
    $360 = $343 | 10624;
    $$0 = $360;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $361 = HEAP32[$0>>2]|0;
 $362 = $361 ^ -1;
 $363 = HEAP32[$5>>2]|0;
 $364 = $363 ^ -1;
 $365 = HEAP32[$10>>2]|0;
 $366 = $365 ^ -1;
 $367 = (($ptree) + 332|0);
 $368 = HEAP32[$367>>2]|0;
 $369 = (($ptree) + 336|0);
 $370 = HEAP32[$369>>2]|0;
 $371 = (($ptree) + 340|0);
 $372 = HEAP32[$371>>2]|0;
 $373 = $370 | $368;
 $374 = $373 | $372;
 $375 = ($374|0)==(0);
 L79: do {
  if (!($375)) {
   $376 = (($ptree) + 594|0);
   $377 = (($ptree) + 68|0);
   $378 = (($ptree) + 72|0);
   $379 = (($ptree) + 76|0);
   $380 = (($ptree) + 140|0);
   $381 = (($ptree) + 144|0);
   $382 = (($ptree) + 148|0);
   $383 = (($ptree) + 32|0);
   $384 = (($ptree) + 36|0);
   $385 = (($ptree) + 40|0);
   $386 = (($ptree) + 44|0);
   $387 = (($ptree) + 48|0);
   $388 = (($ptree) + 52|0);
   $389 = (($ptree) + 56|0);
   $390 = (($ptree) + 60|0);
   $391 = (($ptree) + 64|0);
   $392 = (($ptree) + 593|0);
   $bb$sroa$0$5639 = $368;$bb$sroa$1$5640 = $370;$bb$sroa$2$5641 = $372;
   L81: while(1) {
    $393 = (_first_one012($bb$sroa$0$5639,$bb$sroa$1$5640,$bb$sroa$2$5641)|0);
    $394 = (34156304 + (($393*12)|0)|0);
    $395 = HEAP32[$394>>2]|0;
    $396 = $395 ^ $bb$sroa$0$5639;
    $397 = ((34156304 + (($393*12)|0)|0) + 4|0);
    $398 = HEAP32[$397>>2]|0;
    $399 = $398 ^ $bb$sroa$1$5640;
    $400 = ((34156304 + (($393*12)|0)|0) + 8|0);
    $401 = HEAP32[$400>>2]|0;
    $402 = $401 ^ $bb$sroa$2$5641;
    $403 = ((33572424 + ($393<<3)|0) + 2|0);
    $404 = HEAP8[$403>>0]|0;
    $405 = $404&255;
    $406 = ((($ptree) + ($405<<2)|0) + 32|0);
    $407 = HEAP32[$406>>2]|0;
    $408 = ((33572424 + ($393<<3)|0) + 3|0);
    $409 = HEAP8[$408>>0]|0;
    $410 = $409&255;
    $411 = $407 >>> $410;
    $412 = $411 & 127;
    $413 = ((33953152 + (($393*1536)|0)|0) + (($412*12)|0)|0);
    $414 = HEAP32[$413>>2]|0;
    $415 = (33572424 + ($393<<3)|0);
    $416 = HEAP8[$415>>0]|0;
    $417 = $416&255;
    $418 = ((($ptree) + ($417<<2)|0) + 8|0);
    $419 = HEAP32[$418>>2]|0;
    $420 = ((($ptree) + ($417<<2)|0) + 20|0);
    $421 = HEAP32[$420>>2]|0;
    $422 = $421 | $419;
    $423 = ((33572424 + ($393<<3)|0) + 1|0);
    $424 = HEAP8[$423>>0]|0;
    $425 = $424&255;
    $426 = $422 >>> $425;
    $427 = $426 & 127;
    $428 = ((33828736 + (($393*1536)|0)|0) + (($427*12)|0)|0);
    $429 = HEAP32[$428>>2]|0;
    $430 = $429 | $414;
    $431 = (((33953152 + (($393*1536)|0)|0) + (($412*12)|0)|0) + 4|0);
    $432 = HEAP32[$431>>2]|0;
    $433 = (((33828736 + (($393*1536)|0)|0) + (($427*12)|0)|0) + 4|0);
    $434 = HEAP32[$433>>2]|0;
    $435 = $434 | $432;
    $436 = (((33953152 + (($393*1536)|0)|0) + (($412*12)|0)|0) + 8|0);
    $437 = HEAP32[$436>>2]|0;
    $438 = (((33828736 + (($393*1536)|0)|0) + (($427*12)|0)|0) + 8|0);
    $439 = HEAP32[$438>>2]|0;
    $440 = $439 | $437;
    $441 = (33578928 + (($393*12)|0)|0);
    $442 = HEAP32[$441>>2]|0;
    $443 = $430 | $442;
    $444 = ((33578928 + (($393*12)|0)|0) + 4|0);
    $445 = HEAP32[$444>>2]|0;
    $446 = $435 | $445;
    $447 = ((33578928 + (($393*12)|0)|0) + 8|0);
    $448 = HEAP32[$447>>2]|0;
    $449 = $440 | $448;
    $450 = $443 & $362;
    $451 = $446 & $364;
    $452 = $449 & $366;
    $453 = HEAP8[$376>>0]|0;
    $454 = $453&255;
    $455 = (33578928 + (($454*12)|0)|0);
    $456 = HEAP32[$455>>2]|0;
    $457 = $450 & $456;
    $458 = ((33578928 + (($454*12)|0)|0) + 4|0);
    $459 = HEAP32[$458>>2]|0;
    $460 = $451 & $459;
    $461 = ((33578928 + (($454*12)|0)|0) + 8|0);
    $462 = HEAP32[$461>>2]|0;
    $463 = $452 & $462;
    $464 = $460 | $457;
    $465 = $464 | $463;
    $466 = ($465|0)==(0);
    if (!($466)) {
     $467 = HEAP32[$377>>2]|0;
     $468 = $467 ^ $395;
     HEAP32[$377>>2] = $468;
     $469 = HEAP32[$378>>2]|0;
     $470 = $469 ^ $398;
     HEAP32[$378>>2] = $470;
     $471 = HEAP32[$379>>2]|0;
     $472 = $471 ^ $401;
     HEAP32[$379>>2] = $472;
     $473 = HEAP32[$380>>2]|0;
     $474 = $473 ^ $395;
     HEAP32[$380>>2] = $474;
     $475 = HEAP32[$381>>2]|0;
     $476 = $475 ^ $398;
     HEAP32[$381>>2] = $476;
     $477 = HEAP32[$382>>2]|0;
     $478 = $477 ^ $401;
     HEAP32[$382>>2] = $478;
     $479 = HEAP32[$0>>2]|0;
     $480 = $479 ^ $395;
     HEAP32[$0>>2] = $480;
     $481 = HEAP32[$5>>2]|0;
     $482 = $481 ^ $398;
     HEAP32[$5>>2] = $482;
     $483 = HEAP32[$10>>2]|0;
     $484 = $483 ^ $401;
     HEAP32[$10>>2] = $484;
     $485 = (34157280 + (($393*12)|0)|0);
     $486 = HEAP32[$485>>2]|0;
     $487 = HEAP32[$383>>2]|0;
     $488 = $487 ^ $486;
     HEAP32[$383>>2] = $488;
     $489 = ((34157280 + (($393*12)|0)|0) + 4|0);
     $490 = HEAP32[$489>>2]|0;
     $491 = HEAP32[$384>>2]|0;
     $492 = $491 ^ $490;
     HEAP32[$384>>2] = $492;
     $493 = ((34157280 + (($393*12)|0)|0) + 8|0);
     $494 = HEAP32[$493>>2]|0;
     $495 = HEAP32[$385>>2]|0;
     $496 = $495 ^ $494;
     HEAP32[$385>>2] = $496;
     $497 = (34158256 + (($393*12)|0)|0);
     $498 = HEAP32[$497>>2]|0;
     $499 = HEAP32[$386>>2]|0;
     $500 = $499 ^ $498;
     HEAP32[$386>>2] = $500;
     $501 = ((34158256 + (($393*12)|0)|0) + 4|0);
     $502 = HEAP32[$501>>2]|0;
     $503 = HEAP32[$387>>2]|0;
     $504 = $503 ^ $502;
     HEAP32[$387>>2] = $504;
     $505 = ((34158256 + (($393*12)|0)|0) + 8|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = HEAP32[$388>>2]|0;
     $508 = $507 ^ $506;
     HEAP32[$388>>2] = $508;
     $509 = (34159232 + (($393*12)|0)|0);
     $510 = HEAP32[$509>>2]|0;
     $511 = HEAP32[$389>>2]|0;
     $512 = $511 ^ $510;
     HEAP32[$389>>2] = $512;
     $513 = ((34159232 + (($393*12)|0)|0) + 4|0);
     $514 = HEAP32[$513>>2]|0;
     $515 = HEAP32[$390>>2]|0;
     $516 = $515 ^ $514;
     HEAP32[$390>>2] = $516;
     $517 = ((34159232 + (($393*12)|0)|0) + 8|0);
     $518 = HEAP32[$517>>2]|0;
     $519 = HEAP32[$391>>2]|0;
     $520 = $519 ^ $518;
     HEAP32[$391>>2] = $520;
     $bb_check$sroa$0$0 = $457;$bb_check$sroa$1$0 = $460;$bb_check$sroa$2$0 = $463;
     while(1) {
      $521 = (_first_one012($bb_check$sroa$0$0,$bb_check$sroa$1$0,$bb_check$sroa$2$0)|0);
      $522 = (34156304 + (($521*12)|0)|0);
      $523 = HEAP32[$522>>2]|0;
      $524 = $523 ^ $bb_check$sroa$0$0;
      $525 = ((34156304 + (($521*12)|0)|0) + 4|0);
      $526 = HEAP32[$525>>2]|0;
      $527 = $526 ^ $bb_check$sroa$1$0;
      $528 = ((34156304 + (($521*12)|0)|0) + 8|0);
      $529 = HEAP32[$528>>2]|0;
      $530 = $529 ^ $bb_check$sroa$2$0;
      $531 = (_is_white_attacked($ptree,$521)|0);
      $532 = ($531|0)==(0);
      do {
       if (!($532)) {
        $533 = HEAP8[$376>>0]|0;
        $534 = $533&255;
        $535 = ((220518304 + (($534*81)|0)|0) + ($521)|0);
        $536 = HEAP8[$535>>0]|0;
        $537 = $536 & 2;
        $538 = ($537<<24>>24)==(0);
        if ($538) {
         $563 = ((33572424 + ($521<<3)|0) + 2|0);
         $564 = HEAP8[$563>>0]|0;
         $565 = $564&255;
         $566 = ((($ptree) + ($565<<2)|0) + 32|0);
         $567 = HEAP32[$566>>2]|0;
         $568 = ((33572424 + ($521<<3)|0) + 3|0);
         $569 = HEAP8[$568>>0]|0;
         $570 = $569&255;
         $571 = $567 >>> $570;
         $572 = $571 & 127;
         $573 = ((33953152 + (($521*1536)|0)|0) + (($572*12)|0)|0);
         $574 = HEAP32[$573>>2]|0;
         $575 = (33572424 + ($521<<3)|0);
         $576 = HEAP8[$575>>0]|0;
         $577 = $576&255;
         $578 = ((($ptree) + ($577<<2)|0) + 8|0);
         $579 = HEAP32[$578>>2]|0;
         $580 = ((($ptree) + ($577<<2)|0) + 20|0);
         $581 = HEAP32[$580>>2]|0;
         $582 = $581 | $579;
         $583 = ((33572424 + ($521<<3)|0) + 1|0);
         $584 = HEAP8[$583>>0]|0;
         $585 = $584&255;
         $586 = $582 >>> $585;
         $587 = $586 & 127;
         $588 = ((33828736 + (($521*1536)|0)|0) + (($587*12)|0)|0);
         $589 = HEAP32[$588>>2]|0;
         $590 = $589 | $574;
         $591 = (((33953152 + (($521*1536)|0)|0) + (($572*12)|0)|0) + 4|0);
         $592 = HEAP32[$591>>2]|0;
         $593 = (((33828736 + (($521*1536)|0)|0) + (($587*12)|0)|0) + 4|0);
         $594 = HEAP32[$593>>2]|0;
         $595 = $594 | $592;
         $596 = (((33953152 + (($521*1536)|0)|0) + (($572*12)|0)|0) + 8|0);
         $597 = HEAP32[$596>>2]|0;
         $598 = (((33828736 + (($521*1536)|0)|0) + (($587*12)|0)|0) + 8|0);
         $599 = HEAP32[$598>>2]|0;
         $600 = $599 | $597;
         $601 = (33578928 + (($521*12)|0)|0);
         $602 = HEAP32[$601>>2]|0;
         $603 = $590 | $602;
         $604 = ((33578928 + (($521*12)|0)|0) + 4|0);
         $605 = HEAP32[$604>>2]|0;
         $606 = $595 | $605;
         $607 = ((33578928 + (($521*12)|0)|0) + 8|0);
         $608 = HEAP32[$607>>2]|0;
         $609 = $600 | $608;
         $610 = $603;$611 = $606;$storemerge70 = $609;
        } else {
         $539 = (33953152 + (($521*1536)|0)|0);
         $540 = HEAP32[$539>>2]|0;
         $541 = (33828736 + (($521*1536)|0)|0);
         $542 = HEAP32[$541>>2]|0;
         $543 = $542 | $540;
         $544 = ((33953152 + (($521*1536)|0)|0) + 4|0);
         $545 = HEAP32[$544>>2]|0;
         $546 = ((33828736 + (($521*1536)|0)|0) + 4|0);
         $547 = HEAP32[$546>>2]|0;
         $548 = $547 | $545;
         $549 = ((33953152 + (($521*1536)|0)|0) + 8|0);
         $550 = HEAP32[$549>>2]|0;
         $551 = ((33828736 + (($521*1536)|0)|0) + 8|0);
         $552 = HEAP32[$551>>2]|0;
         $553 = $552 | $550;
         $554 = (33578928 + (($521*12)|0)|0);
         $555 = HEAP32[$554>>2]|0;
         $556 = $543 | $555;
         $557 = ((33578928 + (($521*12)|0)|0) + 4|0);
         $558 = HEAP32[$557>>2]|0;
         $559 = $548 | $558;
         $560 = ((33578928 + (($521*12)|0)|0) + 8|0);
         $561 = HEAP32[$560>>2]|0;
         $562 = $553 | $561;
         $610 = $556;$611 = $559;$storemerge70 = $562;
        }
        $612 = (_can_w_king_escape($ptree,$521,$610,$611,$storemerge70)|0);
        $613 = ($612|0)==(0);
        if ($613) {
         $614 = HEAP8[$376>>0]|0;
         $615 = $614&255;
         $616 = ((220518304 + (($615*81)|0)|0) + ($393)|0);
         $617 = HEAP8[$616>>0]|0;
         $618 = $617&255;
         $619 = ($617<<24>>24)==(0);
         if ($619) {
          label = 65;
         } else {
          $620 = ((220518304 + (($615*81)|0)|0) + ($521)|0);
          $621 = HEAP8[$620>>0]|0;
          $622 = ($617<<24>>24)==($621<<24>>24);
          if ($622) {
           label = 65;
          } else {
           $623 = (_is_pinned_on_white_king($ptree,$393,$618)|0);
           $624 = ($623|0)==(0);
           if ($624) {
            label = 65;
           }
          }
         }
         if ((label|0) == 65) {
          label = 0;
          $625 = (_can_w_piece_capture($ptree,$521)|0);
          $626 = ($625|0)==(0);
          if (!($626)) {
           break;
          }
         }
         $627 = HEAP8[$392>>0]|0;
         $628 = $627&255;
         $629 = ((220518304 + (($628*81)|0)|0) + ($393)|0);
         $630 = HEAP8[$629>>0]|0;
         $631 = $630&255;
         $632 = ($630<<24>>24)==(0);
         if ($632) {
          break L81;
         }
         $633 = ((220518304 + (($628*81)|0)|0) + ($521)|0);
         $634 = HEAP8[$633>>0]|0;
         $635 = ($630<<24>>24)==($634<<24>>24);
         if ($635) {
          break L81;
         }
         $636 = (_is_pinned_on_black_king($ptree,$393,$631)|0);
         $637 = ($636|0)==(0);
         if ($637) {
          break L81;
         }
        }
       }
      } while(0);
      $695 = $527 | $524;
      $696 = $695 | $530;
      $697 = ($696|0)==(0);
      if ($697) {
       break;
      } else {
       $bb_check$sroa$0$0 = $524;$bb_check$sroa$1$0 = $527;$bb_check$sroa$2$0 = $530;
      }
     }
     $698 = HEAP32[$485>>2]|0;
     $699 = HEAP32[$383>>2]|0;
     $700 = $699 ^ $698;
     HEAP32[$383>>2] = $700;
     $701 = HEAP32[$489>>2]|0;
     $702 = HEAP32[$384>>2]|0;
     $703 = $702 ^ $701;
     HEAP32[$384>>2] = $703;
     $704 = HEAP32[$493>>2]|0;
     $705 = HEAP32[$385>>2]|0;
     $706 = $705 ^ $704;
     HEAP32[$385>>2] = $706;
     $707 = HEAP32[$497>>2]|0;
     $708 = HEAP32[$386>>2]|0;
     $709 = $708 ^ $707;
     HEAP32[$386>>2] = $709;
     $710 = HEAP32[$501>>2]|0;
     $711 = HEAP32[$387>>2]|0;
     $712 = $711 ^ $710;
     HEAP32[$387>>2] = $712;
     $713 = HEAP32[$505>>2]|0;
     $714 = HEAP32[$388>>2]|0;
     $715 = $714 ^ $713;
     HEAP32[$388>>2] = $715;
     $716 = HEAP32[$509>>2]|0;
     $717 = HEAP32[$389>>2]|0;
     $718 = $717 ^ $716;
     HEAP32[$389>>2] = $718;
     $719 = HEAP32[$513>>2]|0;
     $720 = HEAP32[$390>>2]|0;
     $721 = $720 ^ $719;
     HEAP32[$390>>2] = $721;
     $722 = HEAP32[$517>>2]|0;
     $723 = HEAP32[$391>>2]|0;
     $724 = $723 ^ $722;
     HEAP32[$391>>2] = $724;
     $725 = HEAP32[$394>>2]|0;
     $726 = HEAP32[$0>>2]|0;
     $727 = $726 ^ $725;
     HEAP32[$0>>2] = $727;
     $728 = HEAP32[$397>>2]|0;
     $729 = HEAP32[$5>>2]|0;
     $730 = $729 ^ $728;
     HEAP32[$5>>2] = $730;
     $731 = HEAP32[$400>>2]|0;
     $732 = HEAP32[$10>>2]|0;
     $733 = $732 ^ $731;
     HEAP32[$10>>2] = $733;
     $734 = HEAP32[$380>>2]|0;
     $735 = $734 ^ $725;
     HEAP32[$380>>2] = $735;
     $736 = HEAP32[$381>>2]|0;
     $737 = $736 ^ $728;
     HEAP32[$381>>2] = $737;
     $738 = HEAP32[$382>>2]|0;
     $739 = $738 ^ $731;
     HEAP32[$382>>2] = $739;
     $740 = HEAP32[$377>>2]|0;
     $741 = $740 ^ $725;
     HEAP32[$377>>2] = $741;
     $742 = HEAP32[$378>>2]|0;
     $743 = $742 ^ $728;
     HEAP32[$378>>2] = $743;
     $744 = HEAP32[$379>>2]|0;
     $745 = $744 ^ $731;
     HEAP32[$379>>2] = $745;
    }
    $746 = $399 | $396;
    $747 = $746 | $402;
    $748 = ($747|0)==(0);
    if ($748) {
     break L79;
    } else {
     $bb$sroa$0$5639 = $396;$bb$sroa$1$5640 = $399;$bb$sroa$2$5641 = $402;
    }
   }
   $638 = HEAP32[$485>>2]|0;
   $639 = HEAP32[$383>>2]|0;
   $640 = $639 ^ $638;
   HEAP32[$383>>2] = $640;
   $641 = HEAP32[$489>>2]|0;
   $642 = HEAP32[$384>>2]|0;
   $643 = $642 ^ $641;
   HEAP32[$384>>2] = $643;
   $644 = HEAP32[$493>>2]|0;
   $645 = HEAP32[$385>>2]|0;
   $646 = $645 ^ $644;
   HEAP32[$385>>2] = $646;
   $647 = HEAP32[$497>>2]|0;
   $648 = HEAP32[$386>>2]|0;
   $649 = $648 ^ $647;
   HEAP32[$386>>2] = $649;
   $650 = HEAP32[$501>>2]|0;
   $651 = HEAP32[$387>>2]|0;
   $652 = $651 ^ $650;
   HEAP32[$387>>2] = $652;
   $653 = HEAP32[$505>>2]|0;
   $654 = HEAP32[$388>>2]|0;
   $655 = $654 ^ $653;
   HEAP32[$388>>2] = $655;
   $656 = HEAP32[$509>>2]|0;
   $657 = HEAP32[$389>>2]|0;
   $658 = $657 ^ $656;
   HEAP32[$389>>2] = $658;
   $659 = HEAP32[$513>>2]|0;
   $660 = HEAP32[$390>>2]|0;
   $661 = $660 ^ $659;
   HEAP32[$390>>2] = $661;
   $662 = HEAP32[$517>>2]|0;
   $663 = HEAP32[$391>>2]|0;
   $664 = $663 ^ $662;
   HEAP32[$391>>2] = $664;
   $665 = HEAP32[$394>>2]|0;
   $666 = HEAP32[$0>>2]|0;
   $667 = $666 ^ $665;
   HEAP32[$0>>2] = $667;
   $668 = HEAP32[$397>>2]|0;
   $669 = HEAP32[$5>>2]|0;
   $670 = $669 ^ $668;
   HEAP32[$5>>2] = $670;
   $671 = HEAP32[$400>>2]|0;
   $672 = HEAP32[$10>>2]|0;
   $673 = $672 ^ $671;
   HEAP32[$10>>2] = $673;
   $674 = HEAP32[$380>>2]|0;
   $675 = $674 ^ $665;
   HEAP32[$380>>2] = $675;
   $676 = HEAP32[$381>>2]|0;
   $677 = $676 ^ $668;
   HEAP32[$381>>2] = $677;
   $678 = HEAP32[$382>>2]|0;
   $679 = $678 ^ $671;
   HEAP32[$382>>2] = $679;
   $680 = HEAP32[$377>>2]|0;
   $681 = $680 ^ $665;
   HEAP32[$377>>2] = $681;
   $682 = HEAP32[$378>>2]|0;
   $683 = $682 ^ $668;
   HEAP32[$378>>2] = $683;
   $684 = HEAP32[$379>>2]|0;
   $685 = $684 ^ $671;
   HEAP32[$379>>2] = $685;
   $686 = $393 << 7;
   $687 = ((($ptree) + ($521)|0) + 512|0);
   $688 = HEAP8[$687>>0]|0;
   $689 = $688 << 24 >> 24;
   $690 = (0 - ($689))|0;
   $691 = $690 << 19;
   $692 = $686 | $521;
   $693 = $692 | $691;
   $694 = $693 | 491520;
   $$0 = $694;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $749 = (($ptree) + 284|0);
 $750 = HEAP32[$749>>2]|0;
 $751 = ($750|0)==(0);
 L108: do {
  if (!($751)) {
   $752 = (($ptree) + 594|0);
   $753 = (($ptree) + 140|0);
   $754 = (($ptree) + 32|0);
   $755 = (($ptree) + 36|0);
   $756 = (($ptree) + 40|0);
   $757 = (($ptree) + 44|0);
   $758 = (($ptree) + 48|0);
   $759 = (($ptree) + 52|0);
   $760 = (($ptree) + 56|0);
   $761 = (($ptree) + 60|0);
   $762 = (($ptree) + 64|0);
   $763 = (($ptree) + 593|0);
   $bb$sroa$0$6604 = $750;
   L110: while(1) {
    $764 = (_last_one0($bb$sroa$0$6604)|0);
    $765 = (34156304 + (($764*12)|0)|0);
    $766 = HEAP32[$765>>2]|0;
    $767 = $766 ^ $bb$sroa$0$6604;
    $768 = ((33572424 + ($764<<3)|0) + 2|0);
    $769 = HEAP8[$768>>0]|0;
    $770 = $769&255;
    $771 = ((($ptree) + ($770<<2)|0) + 32|0);
    $772 = HEAP32[$771>>2]|0;
    $773 = ((33572424 + ($764<<3)|0) + 3|0);
    $774 = HEAP8[$773>>0]|0;
    $775 = $774&255;
    $776 = $772 >>> $775;
    $777 = $776 & 127;
    $778 = ((33953152 + (($764*1536)|0)|0) + (($777*12)|0)|0);
    $779 = HEAP32[$778>>2]|0;
    $780 = (33572424 + ($764<<3)|0);
    $781 = HEAP8[$780>>0]|0;
    $782 = $781&255;
    $783 = ((($ptree) + ($782<<2)|0) + 8|0);
    $784 = HEAP32[$783>>2]|0;
    $785 = ((($ptree) + ($782<<2)|0) + 20|0);
    $786 = HEAP32[$785>>2]|0;
    $787 = $786 | $784;
    $788 = ((33572424 + ($764<<3)|0) + 1|0);
    $789 = HEAP8[$788>>0]|0;
    $790 = $789&255;
    $791 = $787 >>> $790;
    $792 = $791 & 127;
    $793 = ((33828736 + (($764*1536)|0)|0) + (($792*12)|0)|0);
    $794 = HEAP32[$793>>2]|0;
    $795 = $794 | $779;
    $796 = (((33953152 + (($764*1536)|0)|0) + (($777*12)|0)|0) + 4|0);
    $797 = HEAP32[$796>>2]|0;
    $798 = (((33828736 + (($764*1536)|0)|0) + (($792*12)|0)|0) + 4|0);
    $799 = HEAP32[$798>>2]|0;
    $800 = $799 | $797;
    $801 = (((33953152 + (($764*1536)|0)|0) + (($777*12)|0)|0) + 8|0);
    $802 = HEAP32[$801>>2]|0;
    $803 = (((33828736 + (($764*1536)|0)|0) + (($792*12)|0)|0) + 8|0);
    $804 = HEAP32[$803>>2]|0;
    $805 = $804 | $802;
    $806 = $795 & $362;
    $807 = $800 & $364;
    $808 = $805 & $366;
    $809 = HEAP8[$752>>0]|0;
    $810 = $809&255;
    $811 = (33578928 + (($810*12)|0)|0);
    $812 = HEAP32[$811>>2]|0;
    $813 = $806 & $812;
    $814 = ((33578928 + (($810*12)|0)|0) + 4|0);
    $815 = HEAP32[$814>>2]|0;
    $816 = $807 & $815;
    $817 = ((33578928 + (($810*12)|0)|0) + 8|0);
    $818 = HEAP32[$817>>2]|0;
    $819 = $808 & $818;
    $820 = $816 | $813;
    $821 = $820 | $819;
    $822 = ($821|0)==(0);
    if (!($822)) {
     $823 = HEAP32[$753>>2]|0;
     $824 = $823 ^ $766;
     HEAP32[$753>>2] = $824;
     $825 = HEAP32[$0>>2]|0;
     $826 = $825 ^ $766;
     HEAP32[$0>>2] = $826;
     $827 = (34157280 + (($764*12)|0)|0);
     $828 = HEAP32[$827>>2]|0;
     $829 = HEAP32[$754>>2]|0;
     $830 = $829 ^ $828;
     HEAP32[$754>>2] = $830;
     $831 = ((34157280 + (($764*12)|0)|0) + 4|0);
     $832 = HEAP32[$831>>2]|0;
     $833 = HEAP32[$755>>2]|0;
     $834 = $833 ^ $832;
     HEAP32[$755>>2] = $834;
     $835 = ((34157280 + (($764*12)|0)|0) + 8|0);
     $836 = HEAP32[$835>>2]|0;
     $837 = HEAP32[$756>>2]|0;
     $838 = $837 ^ $836;
     HEAP32[$756>>2] = $838;
     $839 = (34158256 + (($764*12)|0)|0);
     $840 = HEAP32[$839>>2]|0;
     $841 = HEAP32[$757>>2]|0;
     $842 = $841 ^ $840;
     HEAP32[$757>>2] = $842;
     $843 = ((34158256 + (($764*12)|0)|0) + 4|0);
     $844 = HEAP32[$843>>2]|0;
     $845 = HEAP32[$758>>2]|0;
     $846 = $845 ^ $844;
     HEAP32[$758>>2] = $846;
     $847 = ((34158256 + (($764*12)|0)|0) + 8|0);
     $848 = HEAP32[$847>>2]|0;
     $849 = HEAP32[$759>>2]|0;
     $850 = $849 ^ $848;
     HEAP32[$759>>2] = $850;
     $851 = (34159232 + (($764*12)|0)|0);
     $852 = HEAP32[$851>>2]|0;
     $853 = HEAP32[$760>>2]|0;
     $854 = $853 ^ $852;
     HEAP32[$760>>2] = $854;
     $855 = ((34159232 + (($764*12)|0)|0) + 4|0);
     $856 = HEAP32[$855>>2]|0;
     $857 = HEAP32[$761>>2]|0;
     $858 = $857 ^ $856;
     HEAP32[$761>>2] = $858;
     $859 = ((34159232 + (($764*12)|0)|0) + 8|0);
     $860 = HEAP32[$859>>2]|0;
     $861 = HEAP32[$762>>2]|0;
     $862 = $861 ^ $860;
     HEAP32[$762>>2] = $862;
     $bb_check$sroa$0$1 = $813;$bb_check$sroa$1$1 = $816;$bb_check$sroa$2$1 = $819;
     while(1) {
      $863 = (_first_one012($bb_check$sroa$0$1,$bb_check$sroa$1$1,$bb_check$sroa$2$1)|0);
      $864 = (34156304 + (($863*12)|0)|0);
      $865 = HEAP32[$864>>2]|0;
      $866 = $865 ^ $bb_check$sroa$0$1;
      $867 = ((34156304 + (($863*12)|0)|0) + 4|0);
      $868 = HEAP32[$867>>2]|0;
      $869 = $868 ^ $bb_check$sroa$1$1;
      $870 = ((34156304 + (($863*12)|0)|0) + 8|0);
      $871 = HEAP32[$870>>2]|0;
      $872 = $871 ^ $bb_check$sroa$2$1;
      $873 = (_is_white_attacked($ptree,$863)|0);
      $874 = ($873|0)==(0);
      do {
       if (!($874)) {
        $875 = HEAP8[$752>>0]|0;
        $876 = $875&255;
        $877 = ((220518304 + (($876*81)|0)|0) + ($863)|0);
        $878 = HEAP8[$877>>0]|0;
        $879 = $878 & 2;
        $880 = ($879<<24>>24)==(0);
        if ($880) {
         $905 = ((33572424 + ($863<<3)|0) + 2|0);
         $906 = HEAP8[$905>>0]|0;
         $907 = $906&255;
         $908 = ((($ptree) + ($907<<2)|0) + 32|0);
         $909 = HEAP32[$908>>2]|0;
         $910 = ((33572424 + ($863<<3)|0) + 3|0);
         $911 = HEAP8[$910>>0]|0;
         $912 = $911&255;
         $913 = $909 >>> $912;
         $914 = $913 & 127;
         $915 = ((33953152 + (($863*1536)|0)|0) + (($914*12)|0)|0);
         $916 = HEAP32[$915>>2]|0;
         $917 = (33572424 + ($863<<3)|0);
         $918 = HEAP8[$917>>0]|0;
         $919 = $918&255;
         $920 = ((($ptree) + ($919<<2)|0) + 8|0);
         $921 = HEAP32[$920>>2]|0;
         $922 = ((($ptree) + ($919<<2)|0) + 20|0);
         $923 = HEAP32[$922>>2]|0;
         $924 = $923 | $921;
         $925 = ((33572424 + ($863<<3)|0) + 1|0);
         $926 = HEAP8[$925>>0]|0;
         $927 = $926&255;
         $928 = $924 >>> $927;
         $929 = $928 & 127;
         $930 = ((33828736 + (($863*1536)|0)|0) + (($929*12)|0)|0);
         $931 = HEAP32[$930>>2]|0;
         $932 = $931 | $916;
         $933 = (((33953152 + (($863*1536)|0)|0) + (($914*12)|0)|0) + 4|0);
         $934 = HEAP32[$933>>2]|0;
         $935 = (((33828736 + (($863*1536)|0)|0) + (($929*12)|0)|0) + 4|0);
         $936 = HEAP32[$935>>2]|0;
         $937 = $936 | $934;
         $938 = (((33953152 + (($863*1536)|0)|0) + (($914*12)|0)|0) + 8|0);
         $939 = HEAP32[$938>>2]|0;
         $940 = (((33828736 + (($863*1536)|0)|0) + (($929*12)|0)|0) + 8|0);
         $941 = HEAP32[$940>>2]|0;
         $942 = $941 | $939;
         $943 = (33578928 + (($863*12)|0)|0);
         $944 = HEAP32[$943>>2]|0;
         $945 = $932 | $944;
         $946 = ((33578928 + (($863*12)|0)|0) + 4|0);
         $947 = HEAP32[$946>>2]|0;
         $948 = $937 | $947;
         $949 = ((33578928 + (($863*12)|0)|0) + 8|0);
         $950 = HEAP32[$949>>2]|0;
         $951 = $942 | $950;
         $952 = $945;$953 = $948;$storemerge = $951;
        } else {
         $881 = (33953152 + (($863*1536)|0)|0);
         $882 = HEAP32[$881>>2]|0;
         $883 = (33828736 + (($863*1536)|0)|0);
         $884 = HEAP32[$883>>2]|0;
         $885 = $884 | $882;
         $886 = ((33953152 + (($863*1536)|0)|0) + 4|0);
         $887 = HEAP32[$886>>2]|0;
         $888 = ((33828736 + (($863*1536)|0)|0) + 4|0);
         $889 = HEAP32[$888>>2]|0;
         $890 = $889 | $887;
         $891 = ((33953152 + (($863*1536)|0)|0) + 8|0);
         $892 = HEAP32[$891>>2]|0;
         $893 = ((33828736 + (($863*1536)|0)|0) + 8|0);
         $894 = HEAP32[$893>>2]|0;
         $895 = $894 | $892;
         $896 = (33578928 + (($863*12)|0)|0);
         $897 = HEAP32[$896>>2]|0;
         $898 = $885 | $897;
         $899 = ((33578928 + (($863*12)|0)|0) + 4|0);
         $900 = HEAP32[$899>>2]|0;
         $901 = $890 | $900;
         $902 = ((33578928 + (($863*12)|0)|0) + 8|0);
         $903 = HEAP32[$902>>2]|0;
         $904 = $895 | $903;
         $952 = $898;$953 = $901;$storemerge = $904;
        }
        $954 = (_can_w_king_escape($ptree,$863,$952,$953,$storemerge)|0);
        $955 = ($954|0)==(0);
        if ($955) {
         $956 = HEAP8[$752>>0]|0;
         $957 = $956&255;
         $958 = ((220518304 + (($957*81)|0)|0) + ($764)|0);
         $959 = HEAP8[$958>>0]|0;
         $960 = $959&255;
         $961 = ($959<<24>>24)==(0);
         if ($961) {
          label = 85;
         } else {
          $962 = ((220518304 + (($957*81)|0)|0) + ($863)|0);
          $963 = HEAP8[$962>>0]|0;
          $964 = ($959<<24>>24)==($963<<24>>24);
          if ($964) {
           label = 85;
          } else {
           $965 = (_is_pinned_on_white_king($ptree,$764,$960)|0);
           $966 = ($965|0)==(0);
           if ($966) {
            label = 85;
           }
          }
         }
         if ((label|0) == 85) {
          label = 0;
          $967 = (_can_w_piece_capture($ptree,$863)|0);
          $968 = ($967|0)==(0);
          if (!($968)) {
           break;
          }
         }
         $969 = HEAP8[$763>>0]|0;
         $970 = $969&255;
         $971 = ((220518304 + (($970*81)|0)|0) + ($764)|0);
         $972 = HEAP8[$971>>0]|0;
         $973 = $972&255;
         $974 = ($972<<24>>24)==(0);
         if ($974) {
          break L110;
         }
         $975 = ((220518304 + (($970*81)|0)|0) + ($863)|0);
         $976 = HEAP8[$975>>0]|0;
         $977 = ($972<<24>>24)==($976<<24>>24);
         if ($977) {
          break L110;
         }
         $978 = (_is_pinned_on_black_king($ptree,$764,$973)|0);
         $979 = ($978|0)==(0);
         if ($979) {
          break L110;
         }
        }
       }
      } while(0);
      $1021 = $869 | $866;
      $1022 = $1021 | $872;
      $1023 = ($1022|0)==(0);
      if ($1023) {
       break;
      } else {
       $bb_check$sroa$0$1 = $866;$bb_check$sroa$1$1 = $869;$bb_check$sroa$2$1 = $872;
      }
     }
     $1024 = HEAP32[$827>>2]|0;
     $1025 = HEAP32[$754>>2]|0;
     $1026 = $1025 ^ $1024;
     HEAP32[$754>>2] = $1026;
     $1027 = HEAP32[$831>>2]|0;
     $1028 = HEAP32[$755>>2]|0;
     $1029 = $1028 ^ $1027;
     HEAP32[$755>>2] = $1029;
     $1030 = HEAP32[$835>>2]|0;
     $1031 = HEAP32[$756>>2]|0;
     $1032 = $1031 ^ $1030;
     HEAP32[$756>>2] = $1032;
     $1033 = HEAP32[$839>>2]|0;
     $1034 = HEAP32[$757>>2]|0;
     $1035 = $1034 ^ $1033;
     HEAP32[$757>>2] = $1035;
     $1036 = HEAP32[$843>>2]|0;
     $1037 = HEAP32[$758>>2]|0;
     $1038 = $1037 ^ $1036;
     HEAP32[$758>>2] = $1038;
     $1039 = HEAP32[$847>>2]|0;
     $1040 = HEAP32[$759>>2]|0;
     $1041 = $1040 ^ $1039;
     HEAP32[$759>>2] = $1041;
     $1042 = HEAP32[$851>>2]|0;
     $1043 = HEAP32[$760>>2]|0;
     $1044 = $1043 ^ $1042;
     HEAP32[$760>>2] = $1044;
     $1045 = HEAP32[$855>>2]|0;
     $1046 = HEAP32[$761>>2]|0;
     $1047 = $1046 ^ $1045;
     HEAP32[$761>>2] = $1047;
     $1048 = HEAP32[$859>>2]|0;
     $1049 = HEAP32[$762>>2]|0;
     $1050 = $1049 ^ $1048;
     HEAP32[$762>>2] = $1050;
     $1051 = HEAP32[$765>>2]|0;
     $1052 = HEAP32[$0>>2]|0;
     $1053 = $1052 ^ $1051;
     HEAP32[$0>>2] = $1053;
     $1054 = HEAP32[$753>>2]|0;
     $1055 = $1054 ^ $1051;
     HEAP32[$753>>2] = $1055;
    }
    $1056 = ($766|0)==($bb$sroa$0$6604|0);
    if ($1056) {
     break L108;
    } else {
     $bb$sroa$0$6604 = $767;
    }
   }
   $980 = HEAP32[$827>>2]|0;
   $981 = HEAP32[$754>>2]|0;
   $982 = $981 ^ $980;
   HEAP32[$754>>2] = $982;
   $983 = HEAP32[$831>>2]|0;
   $984 = HEAP32[$755>>2]|0;
   $985 = $984 ^ $983;
   HEAP32[$755>>2] = $985;
   $986 = HEAP32[$835>>2]|0;
   $987 = HEAP32[$756>>2]|0;
   $988 = $987 ^ $986;
   HEAP32[$756>>2] = $988;
   $989 = HEAP32[$839>>2]|0;
   $990 = HEAP32[$757>>2]|0;
   $991 = $990 ^ $989;
   HEAP32[$757>>2] = $991;
   $992 = HEAP32[$843>>2]|0;
   $993 = HEAP32[$758>>2]|0;
   $994 = $993 ^ $992;
   HEAP32[$758>>2] = $994;
   $995 = HEAP32[$847>>2]|0;
   $996 = HEAP32[$759>>2]|0;
   $997 = $996 ^ $995;
   HEAP32[$759>>2] = $997;
   $998 = HEAP32[$851>>2]|0;
   $999 = HEAP32[$760>>2]|0;
   $1000 = $999 ^ $998;
   HEAP32[$760>>2] = $1000;
   $1001 = HEAP32[$855>>2]|0;
   $1002 = HEAP32[$761>>2]|0;
   $1003 = $1002 ^ $1001;
   HEAP32[$761>>2] = $1003;
   $1004 = HEAP32[$859>>2]|0;
   $1005 = HEAP32[$762>>2]|0;
   $1006 = $1005 ^ $1004;
   HEAP32[$762>>2] = $1006;
   $1007 = HEAP32[$765>>2]|0;
   $1008 = HEAP32[$0>>2]|0;
   $1009 = $1008 ^ $1007;
   HEAP32[$0>>2] = $1009;
   $1010 = HEAP32[$753>>2]|0;
   $1011 = $1010 ^ $1007;
   HEAP32[$753>>2] = $1011;
   $1012 = $764 << 7;
   $1013 = ((($ptree) + ($863)|0) + 512|0);
   $1014 = HEAP8[$1013>>0]|0;
   $1015 = $1014 << 24 >> 24;
   $1016 = (0 - ($1015))|0;
   $1017 = $1016 << 19;
   $1018 = $1012 | $863;
   $1019 = $1018 | $1017;
   $1020 = $1019 | 245760;
   $$0 = $1020;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $1057 = (($ptree) + 288|0);
 $1058 = HEAP32[$1057>>2]|0;
 $1059 = (($ptree) + 292|0);
 $1060 = HEAP32[$1059>>2]|0;
 $1061 = $1060 | $1058;
 $1062 = ($1061|0)==(0);
 L137: do {
  if (!($1062)) {
   $1063 = (($ptree) + 594|0);
   $1064 = (($ptree) + 144|0);
   $1065 = (($ptree) + 148|0);
   $1066 = (($ptree) + 32|0);
   $1067 = (($ptree) + 36|0);
   $1068 = (($ptree) + 40|0);
   $1069 = (($ptree) + 44|0);
   $1070 = (($ptree) + 48|0);
   $1071 = (($ptree) + 52|0);
   $1072 = (($ptree) + 56|0);
   $1073 = (($ptree) + 60|0);
   $1074 = (($ptree) + 64|0);
   $1075 = (($ptree) + 593|0);
   $bb$sroa$1$6575 = $1058;$bb$sroa$2$6576 = $1060;
   L139: while(1) {
    $1076 = (_first_one12($bb$sroa$1$6575,$bb$sroa$2$6576)|0);
    $1077 = ((34156304 + (($1076*12)|0)|0) + 4|0);
    $1078 = HEAP32[$1077>>2]|0;
    $1079 = $1078 ^ $bb$sroa$1$6575;
    $1080 = ((34156304 + (($1076*12)|0)|0) + 8|0);
    $1081 = HEAP32[$1080>>2]|0;
    $1082 = $1081 ^ $bb$sroa$2$6576;
    $1083 = ((33572424 + ($1076<<3)|0) + 2|0);
    $1084 = HEAP8[$1083>>0]|0;
    $1085 = $1084&255;
    $1086 = ((($ptree) + ($1085<<2)|0) + 32|0);
    $1087 = HEAP32[$1086>>2]|0;
    $1088 = ((33572424 + ($1076<<3)|0) + 3|0);
    $1089 = HEAP8[$1088>>0]|0;
    $1090 = $1089&255;
    $1091 = $1087 >>> $1090;
    $1092 = $1091 & 127;
    $1093 = ((33953152 + (($1076*1536)|0)|0) + (($1092*12)|0)|0);
    $1094 = HEAP32[$1093>>2]|0;
    $1095 = (33572424 + ($1076<<3)|0);
    $1096 = HEAP8[$1095>>0]|0;
    $1097 = $1096&255;
    $1098 = ((($ptree) + ($1097<<2)|0) + 8|0);
    $1099 = HEAP32[$1098>>2]|0;
    $1100 = ((($ptree) + ($1097<<2)|0) + 20|0);
    $1101 = HEAP32[$1100>>2]|0;
    $1102 = $1101 | $1099;
    $1103 = ((33572424 + ($1076<<3)|0) + 1|0);
    $1104 = HEAP8[$1103>>0]|0;
    $1105 = $1104&255;
    $1106 = $1102 >>> $1105;
    $1107 = $1106 & 127;
    $1108 = ((33828736 + (($1076*1536)|0)|0) + (($1107*12)|0)|0);
    $1109 = HEAP32[$1108>>2]|0;
    $1110 = $1109 | $1094;
    $1111 = (((33953152 + (($1076*1536)|0)|0) + (($1092*12)|0)|0) + 4|0);
    $1112 = HEAP32[$1111>>2]|0;
    $1113 = (((33828736 + (($1076*1536)|0)|0) + (($1107*12)|0)|0) + 4|0);
    $1114 = HEAP32[$1113>>2]|0;
    $1115 = $1114 | $1112;
    $1116 = (((33953152 + (($1076*1536)|0)|0) + (($1092*12)|0)|0) + 8|0);
    $1117 = HEAP32[$1116>>2]|0;
    $1118 = (((33828736 + (($1076*1536)|0)|0) + (($1107*12)|0)|0) + 8|0);
    $1119 = HEAP32[$1118>>2]|0;
    $1120 = $1119 | $1117;
    $1121 = $1110 & $362;
    $1122 = $1115 & $364;
    $1123 = $1120 & $366;
    $1124 = HEAP8[$1063>>0]|0;
    $1125 = $1124&255;
    $1126 = (33578928 + (($1125*12)|0)|0);
    $1127 = HEAP32[$1126>>2]|0;
    $1128 = $1121 & $1127;
    $1129 = ((33575024 + (($1125*12)|0)|0) + 4|0);
    $1130 = HEAP32[$1129>>2]|0;
    $1131 = $1122 & $1130;
    $1132 = ((33575024 + (($1125*12)|0)|0) + 8|0);
    $1133 = HEAP32[$1132>>2]|0;
    $1134 = $1123 & $1133;
    $1135 = ((33577952 + (($1125*12)|0)|0) + 4|0);
    $1136 = HEAP32[$1135>>2]|0;
    $1137 = $1131 & $1136;
    $1138 = ((33577952 + (($1125*12)|0)|0) + 8|0);
    $1139 = HEAP32[$1138>>2]|0;
    $1140 = $1134 & $1139;
    $1141 = $1137 | $1128;
    $1142 = $1141 | $1140;
    $1143 = ($1142|0)==(0);
    if (!($1143)) {
     $1144 = HEAP32[$1064>>2]|0;
     $1145 = $1144 ^ $1078;
     HEAP32[$1064>>2] = $1145;
     $1146 = HEAP32[$1065>>2]|0;
     $1147 = $1146 ^ $1081;
     HEAP32[$1065>>2] = $1147;
     $1148 = HEAP32[$5>>2]|0;
     $1149 = $1148 ^ $1078;
     HEAP32[$5>>2] = $1149;
     $1150 = HEAP32[$10>>2]|0;
     $1151 = $1150 ^ $1081;
     HEAP32[$10>>2] = $1151;
     $1152 = (34157280 + (($1076*12)|0)|0);
     $1153 = HEAP32[$1152>>2]|0;
     $1154 = HEAP32[$1066>>2]|0;
     $1155 = $1154 ^ $1153;
     HEAP32[$1066>>2] = $1155;
     $1156 = ((34157280 + (($1076*12)|0)|0) + 4|0);
     $1157 = HEAP32[$1156>>2]|0;
     $1158 = HEAP32[$1067>>2]|0;
     $1159 = $1158 ^ $1157;
     HEAP32[$1067>>2] = $1159;
     $1160 = ((34157280 + (($1076*12)|0)|0) + 8|0);
     $1161 = HEAP32[$1160>>2]|0;
     $1162 = HEAP32[$1068>>2]|0;
     $1163 = $1162 ^ $1161;
     HEAP32[$1068>>2] = $1163;
     $1164 = (34158256 + (($1076*12)|0)|0);
     $1165 = HEAP32[$1164>>2]|0;
     $1166 = HEAP32[$1069>>2]|0;
     $1167 = $1166 ^ $1165;
     HEAP32[$1069>>2] = $1167;
     $1168 = ((34158256 + (($1076*12)|0)|0) + 4|0);
     $1169 = HEAP32[$1168>>2]|0;
     $1170 = HEAP32[$1070>>2]|0;
     $1171 = $1170 ^ $1169;
     HEAP32[$1070>>2] = $1171;
     $1172 = ((34158256 + (($1076*12)|0)|0) + 8|0);
     $1173 = HEAP32[$1172>>2]|0;
     $1174 = HEAP32[$1071>>2]|0;
     $1175 = $1174 ^ $1173;
     HEAP32[$1071>>2] = $1175;
     $1176 = (34159232 + (($1076*12)|0)|0);
     $1177 = HEAP32[$1176>>2]|0;
     $1178 = HEAP32[$1072>>2]|0;
     $1179 = $1178 ^ $1177;
     HEAP32[$1072>>2] = $1179;
     $1180 = ((34159232 + (($1076*12)|0)|0) + 4|0);
     $1181 = HEAP32[$1180>>2]|0;
     $1182 = HEAP32[$1073>>2]|0;
     $1183 = $1182 ^ $1181;
     HEAP32[$1073>>2] = $1183;
     $1184 = ((34159232 + (($1076*12)|0)|0) + 8|0);
     $1185 = HEAP32[$1184>>2]|0;
     $1186 = HEAP32[$1074>>2]|0;
     $1187 = $1186 ^ $1185;
     HEAP32[$1074>>2] = $1187;
     $bb_check$sroa$0$2 = $1128;$bb_check$sroa$1$2 = $1137;$bb_check$sroa$2$2 = $1140;
     while(1) {
      $1188 = (_first_one012($bb_check$sroa$0$2,$bb_check$sroa$1$2,$bb_check$sroa$2$2)|0);
      $1189 = (34156304 + (($1188*12)|0)|0);
      $1190 = HEAP32[$1189>>2]|0;
      $1191 = $1190 ^ $bb_check$sroa$0$2;
      $1192 = ((34156304 + (($1188*12)|0)|0) + 4|0);
      $1193 = HEAP32[$1192>>2]|0;
      $1194 = $1193 ^ $bb_check$sroa$1$2;
      $1195 = ((34156304 + (($1188*12)|0)|0) + 8|0);
      $1196 = HEAP32[$1195>>2]|0;
      $1197 = $1196 ^ $bb_check$sroa$2$2;
      $1198 = (_is_white_attacked($ptree,$1188)|0);
      $1199 = ($1198|0)==(0);
      do {
       if (!($1199)) {
        $1200 = ($1188|0)<(27);
        do {
         if ($1200) {
          $1201 = HEAP8[$1063>>0]|0;
          $1202 = $1201&255;
          $1203 = ((220518304 + (($1202*81)|0)|0) + ($1188)|0);
          $1204 = HEAP8[$1203>>0]|0;
          $1205 = $1204 & 2;
          $1206 = ($1205<<24>>24)==(0);
          if ($1206) {
           $1228 = ((33572424 + ($1188<<3)|0) + 2|0);
           $1229 = HEAP8[$1228>>0]|0;
           $1230 = $1229&255;
           $1231 = ((($ptree) + ($1230<<2)|0) + 32|0);
           $1232 = HEAP32[$1231>>2]|0;
           $1233 = ((33572424 + ($1188<<3)|0) + 3|0);
           $1234 = HEAP8[$1233>>0]|0;
           $1235 = $1234&255;
           $1236 = $1232 >>> $1235;
           $1237 = $1236 & 127;
           $1238 = ((33953152 + (($1188*1536)|0)|0) + (($1237*12)|0)|0);
           $1239 = HEAP32[$1238>>2]|0;
           $1240 = (33572424 + ($1188<<3)|0);
           $1241 = HEAP8[$1240>>0]|0;
           $1242 = $1241&255;
           $1243 = ((($ptree) + ($1242<<2)|0) + 8|0);
           $1244 = HEAP32[$1243>>2]|0;
           $1245 = ((($ptree) + ($1242<<2)|0) + 20|0);
           $1246 = HEAP32[$1245>>2]|0;
           $1247 = $1246 | $1244;
           $1248 = ((33572424 + ($1188<<3)|0) + 1|0);
           $1249 = HEAP8[$1248>>0]|0;
           $1250 = $1249&255;
           $1251 = $1247 >>> $1250;
           $1252 = $1251 & 127;
           $1253 = ((33828736 + (($1188*1536)|0)|0) + (($1252*12)|0)|0);
           $1254 = HEAP32[$1253>>2]|0;
           $1255 = $1254 | $1239;
           $1256 = (((33953152 + (($1188*1536)|0)|0) + (($1237*12)|0)|0) + 4|0);
           $1257 = HEAP32[$1256>>2]|0;
           $1258 = (((33828736 + (($1188*1536)|0)|0) + (($1252*12)|0)|0) + 4|0);
           $1259 = HEAP32[$1258>>2]|0;
           $1260 = $1259 | $1257;
           $1261 = (((33953152 + (($1188*1536)|0)|0) + (($1237*12)|0)|0) + 8|0);
           $1262 = HEAP32[$1261>>2]|0;
           $1263 = (((33828736 + (($1188*1536)|0)|0) + (($1252*12)|0)|0) + 8|0);
           $1264 = HEAP32[$1263>>2]|0;
           $1265 = $1264 | $1262;
           $1266 = (33578928 + (($1188*12)|0)|0);
           $1267 = HEAP32[$1266>>2]|0;
           $1268 = $1255 | $1267;
           $1269 = ((33578928 + (($1188*12)|0)|0) + 4|0);
           $1270 = HEAP32[$1269>>2]|0;
           $1271 = $1260 | $1270;
           $1272 = ((33578928 + (($1188*12)|0)|0) + 8|0);
           $1273 = HEAP32[$1272>>2]|0;
           $1274 = $1265 | $1273;
           $1290 = $1268;$1291 = $1271;$1292 = $1274;
           break;
          } else {
           $1207 = (33953152 + (($1188*1536)|0)|0);
           $1208 = HEAP32[$1207>>2]|0;
           $1209 = (33828736 + (($1188*1536)|0)|0);
           $1210 = HEAP32[$1209>>2]|0;
           $1211 = $1210 | $1208;
           $1212 = ((33953152 + (($1188*1536)|0)|0) + 4|0);
           $1213 = HEAP32[$1212>>2]|0;
           $1214 = ((33828736 + (($1188*1536)|0)|0) + 4|0);
           $1215 = HEAP32[$1214>>2]|0;
           $1216 = $1215 | $1213;
           $1217 = ((33953152 + (($1188*1536)|0)|0) + 8|0);
           $1218 = HEAP32[$1217>>2]|0;
           $1219 = ((33828736 + (($1188*1536)|0)|0) + 8|0);
           $1220 = HEAP32[$1219>>2]|0;
           $1221 = $1220 | $1218;
           $1222 = (33578928 + (($1188*12)|0)|0);
           $1223 = HEAP32[$1222>>2]|0;
           $1224 = $1211 | $1223;
           $1225 = ((33578928 + (($1188*12)|0)|0) + 4|0);
           $1226 = HEAP32[$1225>>2]|0;
           $1227 = $1216 | $1226;
           $1290 = $1224;$1291 = $1227;$1292 = $1221;
           break;
          }
         } else {
          $1275 = (33953152 + (($1188*1536)|0)|0);
          $1276 = HEAP32[$1275>>2]|0;
          $1277 = (33828736 + (($1188*1536)|0)|0);
          $1278 = HEAP32[$1277>>2]|0;
          $1279 = $1278 | $1276;
          $1280 = ((33953152 + (($1188*1536)|0)|0) + 4|0);
          $1281 = HEAP32[$1280>>2]|0;
          $1282 = ((33828736 + (($1188*1536)|0)|0) + 4|0);
          $1283 = HEAP32[$1282>>2]|0;
          $1284 = $1283 | $1281;
          $1285 = ((33953152 + (($1188*1536)|0)|0) + 8|0);
          $1286 = HEAP32[$1285>>2]|0;
          $1287 = ((33828736 + (($1188*1536)|0)|0) + 8|0);
          $1288 = HEAP32[$1287>>2]|0;
          $1289 = $1288 | $1286;
          $1290 = $1279;$1291 = $1284;$1292 = $1289;
         }
        } while(0);
        $1293 = (_can_w_king_escape($ptree,$1188,$1290,$1291,$1292)|0);
        $1294 = ($1293|0)==(0);
        if ($1294) {
         $1295 = HEAP8[$1063>>0]|0;
         $1296 = $1295&255;
         $1297 = ((220518304 + (($1296*81)|0)|0) + ($1076)|0);
         $1298 = HEAP8[$1297>>0]|0;
         $1299 = $1298&255;
         $1300 = ($1298<<24>>24)==(0);
         if ($1300) {
          label = 107;
         } else {
          $1301 = ((220518304 + (($1296*81)|0)|0) + ($1188)|0);
          $1302 = HEAP8[$1301>>0]|0;
          $1303 = ($1298<<24>>24)==($1302<<24>>24);
          if ($1303) {
           label = 107;
          } else {
           $1304 = (_is_pinned_on_white_king($ptree,$1076,$1299)|0);
           $1305 = ($1304|0)==(0);
           if ($1305) {
            label = 107;
           }
          }
         }
         if ((label|0) == 107) {
          label = 0;
          $1306 = (_can_w_piece_capture($ptree,$1188)|0);
          $1307 = ($1306|0)==(0);
          if (!($1307)) {
           break;
          }
         }
         $1308 = HEAP8[$1075>>0]|0;
         $1309 = $1308&255;
         $1310 = ((220518304 + (($1309*81)|0)|0) + ($1076)|0);
         $1311 = HEAP8[$1310>>0]|0;
         $1312 = $1311&255;
         $1313 = ($1311<<24>>24)==(0);
         if ($1313) {
          break L139;
         }
         $1314 = ((220518304 + (($1309*81)|0)|0) + ($1188)|0);
         $1315 = HEAP8[$1314>>0]|0;
         $1316 = ($1311<<24>>24)==($1315<<24>>24);
         if ($1316) {
          break L139;
         }
         $1317 = (_is_pinned_on_black_king($ptree,$1076,$1312)|0);
         $1318 = ($1317|0)==(0);
         if ($1318) {
          break L139;
         }
        }
       }
      } while(0);
      $1367 = $1194 | $1191;
      $1368 = $1367 | $1197;
      $1369 = ($1368|0)==(0);
      if ($1369) {
       break;
      } else {
       $bb_check$sroa$0$2 = $1191;$bb_check$sroa$1$2 = $1194;$bb_check$sroa$2$2 = $1197;
      }
     }
     $1370 = HEAP32[$1152>>2]|0;
     $1371 = HEAP32[$1066>>2]|0;
     $1372 = $1371 ^ $1370;
     HEAP32[$1066>>2] = $1372;
     $1373 = HEAP32[$1156>>2]|0;
     $1374 = HEAP32[$1067>>2]|0;
     $1375 = $1374 ^ $1373;
     HEAP32[$1067>>2] = $1375;
     $1376 = HEAP32[$1160>>2]|0;
     $1377 = HEAP32[$1068>>2]|0;
     $1378 = $1377 ^ $1376;
     HEAP32[$1068>>2] = $1378;
     $1379 = HEAP32[$1164>>2]|0;
     $1380 = HEAP32[$1069>>2]|0;
     $1381 = $1380 ^ $1379;
     HEAP32[$1069>>2] = $1381;
     $1382 = HEAP32[$1168>>2]|0;
     $1383 = HEAP32[$1070>>2]|0;
     $1384 = $1383 ^ $1382;
     HEAP32[$1070>>2] = $1384;
     $1385 = HEAP32[$1172>>2]|0;
     $1386 = HEAP32[$1071>>2]|0;
     $1387 = $1386 ^ $1385;
     HEAP32[$1071>>2] = $1387;
     $1388 = HEAP32[$1176>>2]|0;
     $1389 = HEAP32[$1072>>2]|0;
     $1390 = $1389 ^ $1388;
     HEAP32[$1072>>2] = $1390;
     $1391 = HEAP32[$1180>>2]|0;
     $1392 = HEAP32[$1073>>2]|0;
     $1393 = $1392 ^ $1391;
     HEAP32[$1073>>2] = $1393;
     $1394 = HEAP32[$1184>>2]|0;
     $1395 = HEAP32[$1074>>2]|0;
     $1396 = $1395 ^ $1394;
     HEAP32[$1074>>2] = $1396;
     $1397 = HEAP32[$1077>>2]|0;
     $1398 = HEAP32[$5>>2]|0;
     $1399 = $1398 ^ $1397;
     HEAP32[$5>>2] = $1399;
     $1400 = HEAP32[$1080>>2]|0;
     $1401 = HEAP32[$10>>2]|0;
     $1402 = $1401 ^ $1400;
     HEAP32[$10>>2] = $1402;
     $1403 = HEAP32[$1064>>2]|0;
     $1404 = $1403 ^ $1397;
     HEAP32[$1064>>2] = $1404;
     $1405 = HEAP32[$1065>>2]|0;
     $1406 = $1405 ^ $1400;
     HEAP32[$1065>>2] = $1406;
    }
    $1407 = $1082 | $1079;
    $1408 = ($1407|0)==(0);
    if ($1408) {
     break L137;
    } else {
     $bb$sroa$1$6575 = $1079;$bb$sroa$2$6576 = $1082;
    }
   }
   $1319 = HEAP32[$1152>>2]|0;
   $1320 = HEAP32[$1066>>2]|0;
   $1321 = $1320 ^ $1319;
   HEAP32[$1066>>2] = $1321;
   $1322 = HEAP32[$1156>>2]|0;
   $1323 = HEAP32[$1067>>2]|0;
   $1324 = $1323 ^ $1322;
   HEAP32[$1067>>2] = $1324;
   $1325 = HEAP32[$1160>>2]|0;
   $1326 = HEAP32[$1068>>2]|0;
   $1327 = $1326 ^ $1325;
   HEAP32[$1068>>2] = $1327;
   $1328 = HEAP32[$1164>>2]|0;
   $1329 = HEAP32[$1069>>2]|0;
   $1330 = $1329 ^ $1328;
   HEAP32[$1069>>2] = $1330;
   $1331 = HEAP32[$1168>>2]|0;
   $1332 = HEAP32[$1070>>2]|0;
   $1333 = $1332 ^ $1331;
   HEAP32[$1070>>2] = $1333;
   $1334 = HEAP32[$1172>>2]|0;
   $1335 = HEAP32[$1071>>2]|0;
   $1336 = $1335 ^ $1334;
   HEAP32[$1071>>2] = $1336;
   $1337 = HEAP32[$1176>>2]|0;
   $1338 = HEAP32[$1072>>2]|0;
   $1339 = $1338 ^ $1337;
   HEAP32[$1072>>2] = $1339;
   $1340 = HEAP32[$1180>>2]|0;
   $1341 = HEAP32[$1073>>2]|0;
   $1342 = $1341 ^ $1340;
   HEAP32[$1073>>2] = $1342;
   $1343 = HEAP32[$1184>>2]|0;
   $1344 = HEAP32[$1074>>2]|0;
   $1345 = $1344 ^ $1343;
   HEAP32[$1074>>2] = $1345;
   $1346 = HEAP32[$1077>>2]|0;
   $1347 = HEAP32[$5>>2]|0;
   $1348 = $1347 ^ $1346;
   HEAP32[$5>>2] = $1348;
   $1349 = HEAP32[$1080>>2]|0;
   $1350 = HEAP32[$10>>2]|0;
   $1351 = $1350 ^ $1349;
   HEAP32[$10>>2] = $1351;
   $1352 = HEAP32[$1064>>2]|0;
   $1353 = $1352 ^ $1346;
   HEAP32[$1064>>2] = $1353;
   $1354 = HEAP32[$1065>>2]|0;
   $1355 = $1354 ^ $1349;
   HEAP32[$1065>>2] = $1355;
   $1356 = $1076 << 7;
   $1357 = $1200 ? 16384 : 0;
   $1358 = ((($ptree) + ($1188)|0) + 512|0);
   $1359 = HEAP8[$1358>>0]|0;
   $1360 = $1359 << 24 >> 24;
   $1361 = (0 - ($1360))|0;
   $1362 = $1361 << 19;
   $1363 = $1356 | $1188;
   $1364 = $1363 | $1357;
   $1365 = $1364 | $1362;
   $1366 = $1365 | 229376;
   $$0 = $1366;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $1409 = (($ptree) + 308|0);
 $1410 = HEAP32[$1409>>2]|0;
 $1411 = (($ptree) + 312|0);
 $1412 = HEAP32[$1411>>2]|0;
 $1413 = (($ptree) + 316|0);
 $1414 = HEAP32[$1413>>2]|0;
 $1415 = $1412 | $1410;
 $1416 = $1415 | $1414;
 $1417 = ($1416|0)==(0);
 L169: do {
  if (!($1417)) {
   $1418 = (($ptree) + 594|0);
   $1419 = (($ptree) + 68|0);
   $1420 = (($ptree) + 72|0);
   $1421 = (($ptree) + 76|0);
   $1422 = (($ptree) + 116|0);
   $1423 = (($ptree) + 120|0);
   $1424 = (($ptree) + 124|0);
   $1425 = (($ptree) + 32|0);
   $1426 = (($ptree) + 36|0);
   $1427 = (($ptree) + 40|0);
   $1428 = (($ptree) + 44|0);
   $1429 = (($ptree) + 48|0);
   $1430 = (($ptree) + 52|0);
   $1431 = (($ptree) + 56|0);
   $1432 = (($ptree) + 60|0);
   $1433 = (($ptree) + 64|0);
   $1434 = (($ptree) + 593|0);
   $bb$sroa$0$7542 = $1410;$bb$sroa$1$7543 = $1412;$bb$sroa$2$7544 = $1414;
   L171: while(1) {
    $1435 = (_first_one012($bb$sroa$0$7542,$bb$sroa$1$7543,$bb$sroa$2$7544)|0);
    $1436 = (34156304 + (($1435*12)|0)|0);
    $1437 = HEAP32[$1436>>2]|0;
    $1438 = $1437 ^ $bb$sroa$0$7542;
    $1439 = ((34156304 + (($1435*12)|0)|0) + 4|0);
    $1440 = HEAP32[$1439>>2]|0;
    $1441 = $1440 ^ $bb$sroa$1$7543;
    $1442 = ((34156304 + (($1435*12)|0)|0) + 8|0);
    $1443 = HEAP32[$1442>>2]|0;
    $1444 = $1443 ^ $bb$sroa$2$7544;
    $1445 = ((33572424 + ($1435<<3)|0) + 6|0);
    $1446 = HEAP8[$1445>>0]|0;
    $1447 = $1446&255;
    $1448 = ((($ptree) + ($1447<<2)|0) + 56|0);
    $1449 = HEAP32[$1448>>2]|0;
    $1450 = ((33572424 + ($1435<<3)|0) + 7|0);
    $1451 = HEAP8[$1450>>0]|0;
    $1452 = $1451&255;
    $1453 = $1449 >>> $1452;
    $1454 = $1453 & 127;
    $1455 = ((33704320 + (($1435*1536)|0)|0) + (($1454*12)|0)|0);
    $1456 = HEAP32[$1455>>2]|0;
    $1457 = ((33572424 + ($1435<<3)|0) + 4|0);
    $1458 = HEAP8[$1457>>0]|0;
    $1459 = $1458&255;
    $1460 = ((($ptree) + ($1459<<2)|0) + 44|0);
    $1461 = HEAP32[$1460>>2]|0;
    $1462 = ((33572424 + ($1435<<3)|0) + 5|0);
    $1463 = HEAP8[$1462>>0]|0;
    $1464 = $1463&255;
    $1465 = $1461 >>> $1464;
    $1466 = $1465 & 127;
    $1467 = ((33579904 + (($1435*1536)|0)|0) + (($1466*12)|0)|0);
    $1468 = HEAP32[$1467>>2]|0;
    $1469 = $1468 | $1456;
    $1470 = (((33704320 + (($1435*1536)|0)|0) + (($1454*12)|0)|0) + 4|0);
    $1471 = HEAP32[$1470>>2]|0;
    $1472 = (((33579904 + (($1435*1536)|0)|0) + (($1466*12)|0)|0) + 4|0);
    $1473 = HEAP32[$1472>>2]|0;
    $1474 = $1473 | $1471;
    $1475 = (((33704320 + (($1435*1536)|0)|0) + (($1454*12)|0)|0) + 8|0);
    $1476 = HEAP32[$1475>>2]|0;
    $1477 = (((33579904 + (($1435*1536)|0)|0) + (($1466*12)|0)|0) + 8|0);
    $1478 = HEAP32[$1477>>2]|0;
    $1479 = $1478 | $1476;
    $1480 = (33578928 + (($1435*12)|0)|0);
    $1481 = HEAP32[$1480>>2]|0;
    $1482 = $1469 | $1481;
    $1483 = ((33578928 + (($1435*12)|0)|0) + 4|0);
    $1484 = HEAP32[$1483>>2]|0;
    $1485 = $1474 | $1484;
    $1486 = ((33578928 + (($1435*12)|0)|0) + 8|0);
    $1487 = HEAP32[$1486>>2]|0;
    $1488 = $1479 | $1487;
    $1489 = $1482 & $362;
    $1490 = $1485 & $364;
    $1491 = $1488 & $366;
    $1492 = HEAP8[$1418>>0]|0;
    $1493 = $1492&255;
    $1494 = (33578928 + (($1493*12)|0)|0);
    $1495 = HEAP32[$1494>>2]|0;
    $1496 = $1489 & $1495;
    $1497 = ((33578928 + (($1493*12)|0)|0) + 4|0);
    $1498 = HEAP32[$1497>>2]|0;
    $1499 = $1490 & $1498;
    $1500 = ((33578928 + (($1493*12)|0)|0) + 8|0);
    $1501 = HEAP32[$1500>>2]|0;
    $1502 = $1491 & $1501;
    $1503 = $1499 | $1496;
    $1504 = $1503 | $1502;
    $1505 = ($1504|0)==(0);
    if (!($1505)) {
     $1506 = HEAP32[$1419>>2]|0;
     $1507 = $1506 ^ $1437;
     HEAP32[$1419>>2] = $1507;
     $1508 = HEAP32[$1420>>2]|0;
     $1509 = $1508 ^ $1440;
     HEAP32[$1420>>2] = $1509;
     $1510 = HEAP32[$1421>>2]|0;
     $1511 = $1510 ^ $1443;
     HEAP32[$1421>>2] = $1511;
     $1512 = HEAP32[$1422>>2]|0;
     $1513 = $1512 ^ $1437;
     HEAP32[$1422>>2] = $1513;
     $1514 = HEAP32[$1423>>2]|0;
     $1515 = $1514 ^ $1440;
     HEAP32[$1423>>2] = $1515;
     $1516 = HEAP32[$1424>>2]|0;
     $1517 = $1516 ^ $1443;
     HEAP32[$1424>>2] = $1517;
     $1518 = HEAP32[$0>>2]|0;
     $1519 = $1518 ^ $1437;
     HEAP32[$0>>2] = $1519;
     $1520 = HEAP32[$5>>2]|0;
     $1521 = $1520 ^ $1440;
     HEAP32[$5>>2] = $1521;
     $1522 = HEAP32[$10>>2]|0;
     $1523 = $1522 ^ $1443;
     HEAP32[$10>>2] = $1523;
     $1524 = (34157280 + (($1435*12)|0)|0);
     $1525 = HEAP32[$1524>>2]|0;
     $1526 = HEAP32[$1425>>2]|0;
     $1527 = $1526 ^ $1525;
     HEAP32[$1425>>2] = $1527;
     $1528 = ((34157280 + (($1435*12)|0)|0) + 4|0);
     $1529 = HEAP32[$1528>>2]|0;
     $1530 = HEAP32[$1426>>2]|0;
     $1531 = $1530 ^ $1529;
     HEAP32[$1426>>2] = $1531;
     $1532 = ((34157280 + (($1435*12)|0)|0) + 8|0);
     $1533 = HEAP32[$1532>>2]|0;
     $1534 = HEAP32[$1427>>2]|0;
     $1535 = $1534 ^ $1533;
     HEAP32[$1427>>2] = $1535;
     $1536 = (34158256 + (($1435*12)|0)|0);
     $1537 = HEAP32[$1536>>2]|0;
     $1538 = HEAP32[$1428>>2]|0;
     $1539 = $1538 ^ $1537;
     HEAP32[$1428>>2] = $1539;
     $1540 = ((34158256 + (($1435*12)|0)|0) + 4|0);
     $1541 = HEAP32[$1540>>2]|0;
     $1542 = HEAP32[$1429>>2]|0;
     $1543 = $1542 ^ $1541;
     HEAP32[$1429>>2] = $1543;
     $1544 = ((34158256 + (($1435*12)|0)|0) + 8|0);
     $1545 = HEAP32[$1544>>2]|0;
     $1546 = HEAP32[$1430>>2]|0;
     $1547 = $1546 ^ $1545;
     HEAP32[$1430>>2] = $1547;
     $1548 = (34159232 + (($1435*12)|0)|0);
     $1549 = HEAP32[$1548>>2]|0;
     $1550 = HEAP32[$1431>>2]|0;
     $1551 = $1550 ^ $1549;
     HEAP32[$1431>>2] = $1551;
     $1552 = ((34159232 + (($1435*12)|0)|0) + 4|0);
     $1553 = HEAP32[$1552>>2]|0;
     $1554 = HEAP32[$1432>>2]|0;
     $1555 = $1554 ^ $1553;
     HEAP32[$1432>>2] = $1555;
     $1556 = ((34159232 + (($1435*12)|0)|0) + 8|0);
     $1557 = HEAP32[$1556>>2]|0;
     $1558 = HEAP32[$1433>>2]|0;
     $1559 = $1558 ^ $1557;
     HEAP32[$1433>>2] = $1559;
     $bb_check$sroa$0$3 = $1496;$bb_check$sroa$1$3 = $1499;$bb_check$sroa$2$3 = $1502;
     while(1) {
      $1560 = (_first_one012($bb_check$sroa$0$3,$bb_check$sroa$1$3,$bb_check$sroa$2$3)|0);
      $1561 = (34156304 + (($1560*12)|0)|0);
      $1562 = HEAP32[$1561>>2]|0;
      $1563 = $1562 ^ $bb_check$sroa$0$3;
      $1564 = ((34156304 + (($1560*12)|0)|0) + 4|0);
      $1565 = HEAP32[$1564>>2]|0;
      $1566 = $1565 ^ $bb_check$sroa$1$3;
      $1567 = ((34156304 + (($1560*12)|0)|0) + 8|0);
      $1568 = HEAP32[$1567>>2]|0;
      $1569 = $1568 ^ $bb_check$sroa$2$3;
      $1570 = (_is_white_attacked($ptree,$1560)|0);
      $1571 = ($1570|0)==(0);
      do {
       if (!($1571)) {
        $1572 = (33704320 + (($1560*1536)|0)|0);
        $1573 = HEAP32[$1572>>2]|0;
        $1574 = (33579904 + (($1560*1536)|0)|0);
        $1575 = HEAP32[$1574>>2]|0;
        $1576 = $1575 | $1573;
        $1577 = ((33704320 + (($1560*1536)|0)|0) + 4|0);
        $1578 = HEAP32[$1577>>2]|0;
        $1579 = ((33579904 + (($1560*1536)|0)|0) + 4|0);
        $1580 = HEAP32[$1579>>2]|0;
        $1581 = $1580 | $1578;
        $1582 = ((33704320 + (($1560*1536)|0)|0) + 8|0);
        $1583 = HEAP32[$1582>>2]|0;
        $1584 = ((33579904 + (($1560*1536)|0)|0) + 8|0);
        $1585 = HEAP32[$1584>>2]|0;
        $1586 = $1585 | $1583;
        $1587 = (33578928 + (($1560*12)|0)|0);
        $1588 = HEAP32[$1587>>2]|0;
        $1589 = $1576 | $1588;
        $1590 = ((33578928 + (($1560*12)|0)|0) + 4|0);
        $1591 = HEAP32[$1590>>2]|0;
        $1592 = $1581 | $1591;
        $1593 = ((33578928 + (($1560*12)|0)|0) + 8|0);
        $1594 = HEAP32[$1593>>2]|0;
        $1595 = $1586 | $1594;
        $1596 = (_can_w_king_escape($ptree,$1560,$1589,$1592,$1595)|0);
        $1597 = ($1596|0)==(0);
        if ($1597) {
         $1598 = HEAP8[$1418>>0]|0;
         $1599 = $1598&255;
         $1600 = ((220518304 + (($1599*81)|0)|0) + ($1435)|0);
         $1601 = HEAP8[$1600>>0]|0;
         $1602 = $1601&255;
         $1603 = ($1601<<24>>24)==(0);
         if ($1603) {
          label = 124;
         } else {
          $1604 = ((220518304 + (($1599*81)|0)|0) + ($1560)|0);
          $1605 = HEAP8[$1604>>0]|0;
          $1606 = ($1601<<24>>24)==($1605<<24>>24);
          if ($1606) {
           label = 124;
          } else {
           $1607 = (_is_pinned_on_white_king($ptree,$1435,$1602)|0);
           $1608 = ($1607|0)==(0);
           if ($1608) {
            label = 124;
           }
          }
         }
         if ((label|0) == 124) {
          label = 0;
          $1609 = (_can_w_piece_capture($ptree,$1560)|0);
          $1610 = ($1609|0)==(0);
          if (!($1610)) {
           break;
          }
         }
         $1611 = HEAP8[$1434>>0]|0;
         $1612 = $1611&255;
         $1613 = ((220518304 + (($1612*81)|0)|0) + ($1435)|0);
         $1614 = HEAP8[$1613>>0]|0;
         $1615 = $1614&255;
         $1616 = ($1614<<24>>24)==(0);
         if ($1616) {
          break L171;
         }
         $1617 = ((220518304 + (($1612*81)|0)|0) + ($1560)|0);
         $1618 = HEAP8[$1617>>0]|0;
         $1619 = ($1614<<24>>24)==($1618<<24>>24);
         if ($1619) {
          break L171;
         }
         $1620 = (_is_pinned_on_black_king($ptree,$1435,$1615)|0);
         $1621 = ($1620|0)==(0);
         if ($1621) {
          break L171;
         }
        }
       }
      } while(0);
      $1679 = $1566 | $1563;
      $1680 = $1679 | $1569;
      $1681 = ($1680|0)==(0);
      if ($1681) {
       break;
      } else {
       $bb_check$sroa$0$3 = $1563;$bb_check$sroa$1$3 = $1566;$bb_check$sroa$2$3 = $1569;
      }
     }
     $1682 = HEAP32[$1524>>2]|0;
     $1683 = HEAP32[$1425>>2]|0;
     $1684 = $1683 ^ $1682;
     HEAP32[$1425>>2] = $1684;
     $1685 = HEAP32[$1528>>2]|0;
     $1686 = HEAP32[$1426>>2]|0;
     $1687 = $1686 ^ $1685;
     HEAP32[$1426>>2] = $1687;
     $1688 = HEAP32[$1532>>2]|0;
     $1689 = HEAP32[$1427>>2]|0;
     $1690 = $1689 ^ $1688;
     HEAP32[$1427>>2] = $1690;
     $1691 = HEAP32[$1536>>2]|0;
     $1692 = HEAP32[$1428>>2]|0;
     $1693 = $1692 ^ $1691;
     HEAP32[$1428>>2] = $1693;
     $1694 = HEAP32[$1540>>2]|0;
     $1695 = HEAP32[$1429>>2]|0;
     $1696 = $1695 ^ $1694;
     HEAP32[$1429>>2] = $1696;
     $1697 = HEAP32[$1544>>2]|0;
     $1698 = HEAP32[$1430>>2]|0;
     $1699 = $1698 ^ $1697;
     HEAP32[$1430>>2] = $1699;
     $1700 = HEAP32[$1548>>2]|0;
     $1701 = HEAP32[$1431>>2]|0;
     $1702 = $1701 ^ $1700;
     HEAP32[$1431>>2] = $1702;
     $1703 = HEAP32[$1552>>2]|0;
     $1704 = HEAP32[$1432>>2]|0;
     $1705 = $1704 ^ $1703;
     HEAP32[$1432>>2] = $1705;
     $1706 = HEAP32[$1556>>2]|0;
     $1707 = HEAP32[$1433>>2]|0;
     $1708 = $1707 ^ $1706;
     HEAP32[$1433>>2] = $1708;
     $1709 = HEAP32[$1436>>2]|0;
     $1710 = HEAP32[$0>>2]|0;
     $1711 = $1710 ^ $1709;
     HEAP32[$0>>2] = $1711;
     $1712 = HEAP32[$1439>>2]|0;
     $1713 = HEAP32[$5>>2]|0;
     $1714 = $1713 ^ $1712;
     HEAP32[$5>>2] = $1714;
     $1715 = HEAP32[$1442>>2]|0;
     $1716 = HEAP32[$10>>2]|0;
     $1717 = $1716 ^ $1715;
     HEAP32[$10>>2] = $1717;
     $1718 = HEAP32[$1422>>2]|0;
     $1719 = $1718 ^ $1709;
     HEAP32[$1422>>2] = $1719;
     $1720 = HEAP32[$1423>>2]|0;
     $1721 = $1720 ^ $1712;
     HEAP32[$1423>>2] = $1721;
     $1722 = HEAP32[$1424>>2]|0;
     $1723 = $1722 ^ $1715;
     HEAP32[$1424>>2] = $1723;
     $1724 = HEAP32[$1419>>2]|0;
     $1725 = $1724 ^ $1709;
     HEAP32[$1419>>2] = $1725;
     $1726 = HEAP32[$1420>>2]|0;
     $1727 = $1726 ^ $1712;
     HEAP32[$1420>>2] = $1727;
     $1728 = HEAP32[$1421>>2]|0;
     $1729 = $1728 ^ $1715;
     HEAP32[$1421>>2] = $1729;
    }
    $1730 = $1441 | $1438;
    $1731 = $1730 | $1444;
    $1732 = ($1731|0)==(0);
    if ($1732) {
     break L169;
    } else {
     $bb$sroa$0$7542 = $1438;$bb$sroa$1$7543 = $1441;$bb$sroa$2$7544 = $1444;
    }
   }
   $1622 = HEAP32[$1524>>2]|0;
   $1623 = HEAP32[$1425>>2]|0;
   $1624 = $1623 ^ $1622;
   HEAP32[$1425>>2] = $1624;
   $1625 = HEAP32[$1528>>2]|0;
   $1626 = HEAP32[$1426>>2]|0;
   $1627 = $1626 ^ $1625;
   HEAP32[$1426>>2] = $1627;
   $1628 = HEAP32[$1532>>2]|0;
   $1629 = HEAP32[$1427>>2]|0;
   $1630 = $1629 ^ $1628;
   HEAP32[$1427>>2] = $1630;
   $1631 = HEAP32[$1536>>2]|0;
   $1632 = HEAP32[$1428>>2]|0;
   $1633 = $1632 ^ $1631;
   HEAP32[$1428>>2] = $1633;
   $1634 = HEAP32[$1540>>2]|0;
   $1635 = HEAP32[$1429>>2]|0;
   $1636 = $1635 ^ $1634;
   HEAP32[$1429>>2] = $1636;
   $1637 = HEAP32[$1544>>2]|0;
   $1638 = HEAP32[$1430>>2]|0;
   $1639 = $1638 ^ $1637;
   HEAP32[$1430>>2] = $1639;
   $1640 = HEAP32[$1548>>2]|0;
   $1641 = HEAP32[$1431>>2]|0;
   $1642 = $1641 ^ $1640;
   HEAP32[$1431>>2] = $1642;
   $1643 = HEAP32[$1552>>2]|0;
   $1644 = HEAP32[$1432>>2]|0;
   $1645 = $1644 ^ $1643;
   HEAP32[$1432>>2] = $1645;
   $1646 = HEAP32[$1556>>2]|0;
   $1647 = HEAP32[$1433>>2]|0;
   $1648 = $1647 ^ $1646;
   HEAP32[$1433>>2] = $1648;
   $1649 = HEAP32[$1436>>2]|0;
   $1650 = HEAP32[$0>>2]|0;
   $1651 = $1650 ^ $1649;
   HEAP32[$0>>2] = $1651;
   $1652 = HEAP32[$1439>>2]|0;
   $1653 = HEAP32[$5>>2]|0;
   $1654 = $1653 ^ $1652;
   HEAP32[$5>>2] = $1654;
   $1655 = HEAP32[$1442>>2]|0;
   $1656 = HEAP32[$10>>2]|0;
   $1657 = $1656 ^ $1655;
   HEAP32[$10>>2] = $1657;
   $1658 = HEAP32[$1422>>2]|0;
   $1659 = $1658 ^ $1649;
   HEAP32[$1422>>2] = $1659;
   $1660 = HEAP32[$1423>>2]|0;
   $1661 = $1660 ^ $1652;
   HEAP32[$1423>>2] = $1661;
   $1662 = HEAP32[$1424>>2]|0;
   $1663 = $1662 ^ $1655;
   HEAP32[$1424>>2] = $1663;
   $1664 = HEAP32[$1419>>2]|0;
   $1665 = $1664 ^ $1649;
   HEAP32[$1419>>2] = $1665;
   $1666 = HEAP32[$1420>>2]|0;
   $1667 = $1666 ^ $1652;
   HEAP32[$1420>>2] = $1667;
   $1668 = HEAP32[$1421>>2]|0;
   $1669 = $1668 ^ $1655;
   HEAP32[$1421>>2] = $1669;
   $1670 = $1435 << 7;
   $1671 = ((($ptree) + ($1560)|0) + 512|0);
   $1672 = HEAP8[$1671>>0]|0;
   $1673 = $1672 << 24 >> 24;
   $1674 = (0 - ($1673))|0;
   $1675 = $1674 << 19;
   $1676 = $1670 | $1560;
   $1677 = $1676 | $1675;
   $1678 = $1677 | 458752;
   $$0 = $1678;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $1733 = (($ptree) + 260|0);
 $1734 = HEAP32[$1733>>2]|0;
 $1735 = ($1734|0)==(0);
 L194: do {
  if (!($1735)) {
   $1736 = (($ptree) + 594|0);
   $1737 = (($ptree) + 116|0);
   $1738 = (($ptree) + 32|0);
   $1739 = (($ptree) + 36|0);
   $1740 = (($ptree) + 40|0);
   $1741 = (($ptree) + 44|0);
   $1742 = (($ptree) + 48|0);
   $1743 = (($ptree) + 52|0);
   $1744 = (($ptree) + 56|0);
   $1745 = (($ptree) + 60|0);
   $1746 = (($ptree) + 64|0);
   $1747 = (($ptree) + 593|0);
   $bb$sroa$0$8507 = $1734;
   L196: while(1) {
    $1748 = (_last_one0($bb$sroa$0$8507)|0);
    $1749 = (34156304 + (($1748*12)|0)|0);
    $1750 = HEAP32[$1749>>2]|0;
    $1751 = $1750 ^ $bb$sroa$0$8507;
    $1752 = ((33572424 + ($1748<<3)|0) + 6|0);
    $1753 = HEAP8[$1752>>0]|0;
    $1754 = $1753&255;
    $1755 = ((($ptree) + ($1754<<2)|0) + 56|0);
    $1756 = HEAP32[$1755>>2]|0;
    $1757 = ((33572424 + ($1748<<3)|0) + 7|0);
    $1758 = HEAP8[$1757>>0]|0;
    $1759 = $1758&255;
    $1760 = $1756 >>> $1759;
    $1761 = $1760 & 127;
    $1762 = ((33704320 + (($1748*1536)|0)|0) + (($1761*12)|0)|0);
    $1763 = HEAP32[$1762>>2]|0;
    $1764 = ((33572424 + ($1748<<3)|0) + 4|0);
    $1765 = HEAP8[$1764>>0]|0;
    $1766 = $1765&255;
    $1767 = ((($ptree) + ($1766<<2)|0) + 44|0);
    $1768 = HEAP32[$1767>>2]|0;
    $1769 = ((33572424 + ($1748<<3)|0) + 5|0);
    $1770 = HEAP8[$1769>>0]|0;
    $1771 = $1770&255;
    $1772 = $1768 >>> $1771;
    $1773 = $1772 & 127;
    $1774 = ((33579904 + (($1748*1536)|0)|0) + (($1773*12)|0)|0);
    $1775 = HEAP32[$1774>>2]|0;
    $1776 = $1775 | $1763;
    $1777 = (((33704320 + (($1748*1536)|0)|0) + (($1761*12)|0)|0) + 4|0);
    $1778 = HEAP32[$1777>>2]|0;
    $1779 = (((33579904 + (($1748*1536)|0)|0) + (($1773*12)|0)|0) + 4|0);
    $1780 = HEAP32[$1779>>2]|0;
    $1781 = $1780 | $1778;
    $1782 = (((33704320 + (($1748*1536)|0)|0) + (($1761*12)|0)|0) + 8|0);
    $1783 = HEAP32[$1782>>2]|0;
    $1784 = (((33579904 + (($1748*1536)|0)|0) + (($1773*12)|0)|0) + 8|0);
    $1785 = HEAP32[$1784>>2]|0;
    $1786 = $1785 | $1783;
    $1787 = $1776 & $362;
    $1788 = $1781 & $364;
    $1789 = $1786 & $366;
    $1790 = HEAP8[$1736>>0]|0;
    $1791 = $1790&255;
    $1792 = (33578928 + (($1791*12)|0)|0);
    $1793 = HEAP32[$1792>>2]|0;
    $1794 = $1787 & $1793;
    $1795 = ((33578928 + (($1791*12)|0)|0) + 4|0);
    $1796 = HEAP32[$1795>>2]|0;
    $1797 = $1788 & $1796;
    $1798 = ((33578928 + (($1791*12)|0)|0) + 8|0);
    $1799 = HEAP32[$1798>>2]|0;
    $1800 = $1789 & $1799;
    $1801 = $1797 | $1794;
    $1802 = $1801 | $1800;
    $1803 = ($1802|0)==(0);
    if (!($1803)) {
     $1804 = HEAP32[$1737>>2]|0;
     $1805 = $1804 ^ $1750;
     HEAP32[$1737>>2] = $1805;
     $1806 = HEAP32[$0>>2]|0;
     $1807 = $1806 ^ $1750;
     HEAP32[$0>>2] = $1807;
     $1808 = (34157280 + (($1748*12)|0)|0);
     $1809 = HEAP32[$1808>>2]|0;
     $1810 = HEAP32[$1738>>2]|0;
     $1811 = $1810 ^ $1809;
     HEAP32[$1738>>2] = $1811;
     $1812 = ((34157280 + (($1748*12)|0)|0) + 4|0);
     $1813 = HEAP32[$1812>>2]|0;
     $1814 = HEAP32[$1739>>2]|0;
     $1815 = $1814 ^ $1813;
     HEAP32[$1739>>2] = $1815;
     $1816 = ((34157280 + (($1748*12)|0)|0) + 8|0);
     $1817 = HEAP32[$1816>>2]|0;
     $1818 = HEAP32[$1740>>2]|0;
     $1819 = $1818 ^ $1817;
     HEAP32[$1740>>2] = $1819;
     $1820 = (34158256 + (($1748*12)|0)|0);
     $1821 = HEAP32[$1820>>2]|0;
     $1822 = HEAP32[$1741>>2]|0;
     $1823 = $1822 ^ $1821;
     HEAP32[$1741>>2] = $1823;
     $1824 = ((34158256 + (($1748*12)|0)|0) + 4|0);
     $1825 = HEAP32[$1824>>2]|0;
     $1826 = HEAP32[$1742>>2]|0;
     $1827 = $1826 ^ $1825;
     HEAP32[$1742>>2] = $1827;
     $1828 = ((34158256 + (($1748*12)|0)|0) + 8|0);
     $1829 = HEAP32[$1828>>2]|0;
     $1830 = HEAP32[$1743>>2]|0;
     $1831 = $1830 ^ $1829;
     HEAP32[$1743>>2] = $1831;
     $1832 = (34159232 + (($1748*12)|0)|0);
     $1833 = HEAP32[$1832>>2]|0;
     $1834 = HEAP32[$1744>>2]|0;
     $1835 = $1834 ^ $1833;
     HEAP32[$1744>>2] = $1835;
     $1836 = ((34159232 + (($1748*12)|0)|0) + 4|0);
     $1837 = HEAP32[$1836>>2]|0;
     $1838 = HEAP32[$1745>>2]|0;
     $1839 = $1838 ^ $1837;
     HEAP32[$1745>>2] = $1839;
     $1840 = ((34159232 + (($1748*12)|0)|0) + 8|0);
     $1841 = HEAP32[$1840>>2]|0;
     $1842 = HEAP32[$1746>>2]|0;
     $1843 = $1842 ^ $1841;
     HEAP32[$1746>>2] = $1843;
     $bb_check$sroa$0$4 = $1794;$bb_check$sroa$1$4 = $1797;$bb_check$sroa$2$4 = $1800;
     while(1) {
      $1844 = (_first_one012($bb_check$sroa$0$4,$bb_check$sroa$1$4,$bb_check$sroa$2$4)|0);
      $1845 = (34156304 + (($1844*12)|0)|0);
      $1846 = HEAP32[$1845>>2]|0;
      $1847 = $1846 ^ $bb_check$sroa$0$4;
      $1848 = ((34156304 + (($1844*12)|0)|0) + 4|0);
      $1849 = HEAP32[$1848>>2]|0;
      $1850 = $1849 ^ $bb_check$sroa$1$4;
      $1851 = ((34156304 + (($1844*12)|0)|0) + 8|0);
      $1852 = HEAP32[$1851>>2]|0;
      $1853 = $1852 ^ $bb_check$sroa$2$4;
      $1854 = (_is_white_attacked($ptree,$1844)|0);
      $1855 = ($1854|0)==(0);
      do {
       if (!($1855)) {
        $1856 = (33704320 + (($1844*1536)|0)|0);
        $1857 = HEAP32[$1856>>2]|0;
        $1858 = (33579904 + (($1844*1536)|0)|0);
        $1859 = HEAP32[$1858>>2]|0;
        $1860 = $1859 | $1857;
        $1861 = ((33704320 + (($1844*1536)|0)|0) + 4|0);
        $1862 = HEAP32[$1861>>2]|0;
        $1863 = ((33579904 + (($1844*1536)|0)|0) + 4|0);
        $1864 = HEAP32[$1863>>2]|0;
        $1865 = $1864 | $1862;
        $1866 = ((33704320 + (($1844*1536)|0)|0) + 8|0);
        $1867 = HEAP32[$1866>>2]|0;
        $1868 = ((33579904 + (($1844*1536)|0)|0) + 8|0);
        $1869 = HEAP32[$1868>>2]|0;
        $1870 = $1869 | $1867;
        $1871 = (33578928 + (($1844*12)|0)|0);
        $1872 = HEAP32[$1871>>2]|0;
        $1873 = $1860 | $1872;
        $1874 = ((33578928 + (($1844*12)|0)|0) + 4|0);
        $1875 = HEAP32[$1874>>2]|0;
        $1876 = $1865 | $1875;
        $1877 = ((33578928 + (($1844*12)|0)|0) + 8|0);
        $1878 = HEAP32[$1877>>2]|0;
        $1879 = $1870 | $1878;
        $1880 = (_can_w_king_escape($ptree,$1844,$1873,$1876,$1879)|0);
        $1881 = ($1880|0)==(0);
        if ($1881) {
         $1882 = HEAP8[$1736>>0]|0;
         $1883 = $1882&255;
         $1884 = ((220518304 + (($1883*81)|0)|0) + ($1748)|0);
         $1885 = HEAP8[$1884>>0]|0;
         $1886 = $1885&255;
         $1887 = ($1885<<24>>24)==(0);
         do {
          if ($1887) {
           label = 141;
          } else {
           $1888 = ((220518304 + (($1883*81)|0)|0) + ($1844)|0);
           $1889 = HEAP8[$1888>>0]|0;
           $1890 = ($1885<<24>>24)==($1889<<24>>24);
           if ($1890) {
            label = 141;
            break;
           }
           $1891 = (_is_pinned_on_white_king($ptree,$1748,$1886)|0);
           $1892 = ($1891|0)==(0);
           if ($1892) {
            label = 141;
           }
          }
         } while(0);
         if ((label|0) == 141) {
          label = 0;
          $1893 = (_can_w_piece_capture($ptree,$1844)|0);
          $1894 = ($1893|0)==(0);
          if (!($1894)) {
           break;
          }
         }
         $1895 = HEAP8[$1747>>0]|0;
         $1896 = $1895&255;
         $1897 = ((220518304 + (($1896*81)|0)|0) + ($1748)|0);
         $1898 = HEAP8[$1897>>0]|0;
         $1899 = $1898&255;
         $1900 = ($1898<<24>>24)==(0);
         if ($1900) {
          break L196;
         }
         $1901 = ((220518304 + (($1896*81)|0)|0) + ($1844)|0);
         $1902 = HEAP8[$1901>>0]|0;
         $1903 = ($1898<<24>>24)==($1902<<24>>24);
         if ($1903) {
          break L196;
         }
         $1904 = (_is_pinned_on_black_king($ptree,$1748,$1899)|0);
         $1905 = ($1904|0)==(0);
         if ($1905) {
          break L196;
         }
        }
       }
      } while(0);
      $1947 = $1850 | $1847;
      $1948 = $1947 | $1853;
      $1949 = ($1948|0)==(0);
      if ($1949) {
       break;
      } else {
       $bb_check$sroa$0$4 = $1847;$bb_check$sroa$1$4 = $1850;$bb_check$sroa$2$4 = $1853;
      }
     }
     $1950 = HEAP32[$1808>>2]|0;
     $1951 = HEAP32[$1738>>2]|0;
     $1952 = $1951 ^ $1950;
     HEAP32[$1738>>2] = $1952;
     $1953 = HEAP32[$1812>>2]|0;
     $1954 = HEAP32[$1739>>2]|0;
     $1955 = $1954 ^ $1953;
     HEAP32[$1739>>2] = $1955;
     $1956 = HEAP32[$1816>>2]|0;
     $1957 = HEAP32[$1740>>2]|0;
     $1958 = $1957 ^ $1956;
     HEAP32[$1740>>2] = $1958;
     $1959 = HEAP32[$1820>>2]|0;
     $1960 = HEAP32[$1741>>2]|0;
     $1961 = $1960 ^ $1959;
     HEAP32[$1741>>2] = $1961;
     $1962 = HEAP32[$1824>>2]|0;
     $1963 = HEAP32[$1742>>2]|0;
     $1964 = $1963 ^ $1962;
     HEAP32[$1742>>2] = $1964;
     $1965 = HEAP32[$1828>>2]|0;
     $1966 = HEAP32[$1743>>2]|0;
     $1967 = $1966 ^ $1965;
     HEAP32[$1743>>2] = $1967;
     $1968 = HEAP32[$1832>>2]|0;
     $1969 = HEAP32[$1744>>2]|0;
     $1970 = $1969 ^ $1968;
     HEAP32[$1744>>2] = $1970;
     $1971 = HEAP32[$1836>>2]|0;
     $1972 = HEAP32[$1745>>2]|0;
     $1973 = $1972 ^ $1971;
     HEAP32[$1745>>2] = $1973;
     $1974 = HEAP32[$1840>>2]|0;
     $1975 = HEAP32[$1746>>2]|0;
     $1976 = $1975 ^ $1974;
     HEAP32[$1746>>2] = $1976;
     $1977 = HEAP32[$1749>>2]|0;
     $1978 = HEAP32[$0>>2]|0;
     $1979 = $1978 ^ $1977;
     HEAP32[$0>>2] = $1979;
     $1980 = HEAP32[$1737>>2]|0;
     $1981 = $1980 ^ $1977;
     HEAP32[$1737>>2] = $1981;
    }
    $1982 = ($1750|0)==($bb$sroa$0$8507|0);
    if ($1982) {
     break L194;
    } else {
     $bb$sroa$0$8507 = $1751;
    }
   }
   $1906 = HEAP32[$1808>>2]|0;
   $1907 = HEAP32[$1738>>2]|0;
   $1908 = $1907 ^ $1906;
   HEAP32[$1738>>2] = $1908;
   $1909 = HEAP32[$1812>>2]|0;
   $1910 = HEAP32[$1739>>2]|0;
   $1911 = $1910 ^ $1909;
   HEAP32[$1739>>2] = $1911;
   $1912 = HEAP32[$1816>>2]|0;
   $1913 = HEAP32[$1740>>2]|0;
   $1914 = $1913 ^ $1912;
   HEAP32[$1740>>2] = $1914;
   $1915 = HEAP32[$1820>>2]|0;
   $1916 = HEAP32[$1741>>2]|0;
   $1917 = $1916 ^ $1915;
   HEAP32[$1741>>2] = $1917;
   $1918 = HEAP32[$1824>>2]|0;
   $1919 = HEAP32[$1742>>2]|0;
   $1920 = $1919 ^ $1918;
   HEAP32[$1742>>2] = $1920;
   $1921 = HEAP32[$1828>>2]|0;
   $1922 = HEAP32[$1743>>2]|0;
   $1923 = $1922 ^ $1921;
   HEAP32[$1743>>2] = $1923;
   $1924 = HEAP32[$1832>>2]|0;
   $1925 = HEAP32[$1744>>2]|0;
   $1926 = $1925 ^ $1924;
   HEAP32[$1744>>2] = $1926;
   $1927 = HEAP32[$1836>>2]|0;
   $1928 = HEAP32[$1745>>2]|0;
   $1929 = $1928 ^ $1927;
   HEAP32[$1745>>2] = $1929;
   $1930 = HEAP32[$1840>>2]|0;
   $1931 = HEAP32[$1746>>2]|0;
   $1932 = $1931 ^ $1930;
   HEAP32[$1746>>2] = $1932;
   $1933 = HEAP32[$1749>>2]|0;
   $1934 = HEAP32[$0>>2]|0;
   $1935 = $1934 ^ $1933;
   HEAP32[$0>>2] = $1935;
   $1936 = HEAP32[$1737>>2]|0;
   $1937 = $1936 ^ $1933;
   HEAP32[$1737>>2] = $1937;
   $1938 = $1748 << 7;
   $1939 = ((($ptree) + ($1844)|0) + 512|0);
   $1940 = HEAP8[$1939>>0]|0;
   $1941 = $1940 << 24 >> 24;
   $1942 = (0 - ($1941))|0;
   $1943 = $1942 << 19;
   $1944 = $1938 | $1844;
   $1945 = $1944 | $1943;
   $1946 = $1945 | 212992;
   $$0 = $1946;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $1983 = (($ptree) + 264|0);
 $1984 = HEAP32[$1983>>2]|0;
 $1985 = (($ptree) + 268|0);
 $1986 = HEAP32[$1985>>2]|0;
 $1987 = $1986 | $1984;
 $1988 = ($1987|0)==(0);
 $$pre1002 = (($ptree) + 594|0);
 L219: do {
  if (!($1988)) {
   $1989 = (($ptree) + 120|0);
   $1990 = (($ptree) + 124|0);
   $1991 = (($ptree) + 32|0);
   $1992 = (($ptree) + 36|0);
   $1993 = (($ptree) + 40|0);
   $1994 = (($ptree) + 44|0);
   $1995 = (($ptree) + 48|0);
   $1996 = (($ptree) + 52|0);
   $1997 = (($ptree) + 56|0);
   $1998 = (($ptree) + 60|0);
   $1999 = (($ptree) + 64|0);
   $2000 = (($ptree) + 593|0);
   $bb$sroa$1$8478 = $1984;$bb$sroa$2$8479 = $1986;
   L221: while(1) {
    $2001 = (_first_one12($bb$sroa$1$8478,$bb$sroa$2$8479)|0);
    $2002 = ((34156304 + (($2001*12)|0)|0) + 4|0);
    $2003 = HEAP32[$2002>>2]|0;
    $2004 = $2003 ^ $bb$sroa$1$8478;
    $2005 = ((34156304 + (($2001*12)|0)|0) + 8|0);
    $2006 = HEAP32[$2005>>2]|0;
    $2007 = $2006 ^ $bb$sroa$2$8479;
    $2008 = ((33572424 + ($2001<<3)|0) + 6|0);
    $2009 = HEAP8[$2008>>0]|0;
    $2010 = $2009&255;
    $2011 = ((($ptree) + ($2010<<2)|0) + 56|0);
    $2012 = HEAP32[$2011>>2]|0;
    $2013 = ((33572424 + ($2001<<3)|0) + 7|0);
    $2014 = HEAP8[$2013>>0]|0;
    $2015 = $2014&255;
    $2016 = $2012 >>> $2015;
    $2017 = $2016 & 127;
    $2018 = ((33704320 + (($2001*1536)|0)|0) + (($2017*12)|0)|0);
    $2019 = HEAP32[$2018>>2]|0;
    $2020 = ((33572424 + ($2001<<3)|0) + 4|0);
    $2021 = HEAP8[$2020>>0]|0;
    $2022 = $2021&255;
    $2023 = ((($ptree) + ($2022<<2)|0) + 44|0);
    $2024 = HEAP32[$2023>>2]|0;
    $2025 = ((33572424 + ($2001<<3)|0) + 5|0);
    $2026 = HEAP8[$2025>>0]|0;
    $2027 = $2026&255;
    $2028 = $2024 >>> $2027;
    $2029 = $2028 & 127;
    $2030 = ((33579904 + (($2001*1536)|0)|0) + (($2029*12)|0)|0);
    $2031 = HEAP32[$2030>>2]|0;
    $2032 = $2031 | $2019;
    $2033 = (((33704320 + (($2001*1536)|0)|0) + (($2017*12)|0)|0) + 4|0);
    $2034 = HEAP32[$2033>>2]|0;
    $2035 = (((33579904 + (($2001*1536)|0)|0) + (($2029*12)|0)|0) + 4|0);
    $2036 = HEAP32[$2035>>2]|0;
    $2037 = $2036 | $2034;
    $2038 = (((33704320 + (($2001*1536)|0)|0) + (($2017*12)|0)|0) + 8|0);
    $2039 = HEAP32[$2038>>2]|0;
    $2040 = (((33579904 + (($2001*1536)|0)|0) + (($2029*12)|0)|0) + 8|0);
    $2041 = HEAP32[$2040>>2]|0;
    $2042 = $2041 | $2039;
    $2043 = $2032 & $362;
    $2044 = $2037 & $364;
    $2045 = $2042 & $366;
    $2046 = HEAP8[$$pre1002>>0]|0;
    $2047 = $2046&255;
    $2048 = (33578928 + (($2047*12)|0)|0);
    $2049 = HEAP32[$2048>>2]|0;
    $2050 = $2043 & $2049;
    $2051 = ((33574048 + (($2047*12)|0)|0) + 4|0);
    $2052 = HEAP32[$2051>>2]|0;
    $2053 = $2044 & $2052;
    $2054 = ((33574048 + (($2047*12)|0)|0) + 8|0);
    $2055 = HEAP32[$2054>>2]|0;
    $2056 = $2045 & $2055;
    $2057 = ((33576976 + (($2047*12)|0)|0) + 4|0);
    $2058 = HEAP32[$2057>>2]|0;
    $2059 = $2053 & $2058;
    $2060 = ((33576976 + (($2047*12)|0)|0) + 8|0);
    $2061 = HEAP32[$2060>>2]|0;
    $2062 = $2056 & $2061;
    $2063 = $2059 | $2050;
    $2064 = $2063 | $2062;
    $2065 = ($2064|0)==(0);
    if (!($2065)) {
     $2066 = HEAP32[$1989>>2]|0;
     $2067 = $2066 ^ $2003;
     HEAP32[$1989>>2] = $2067;
     $2068 = HEAP32[$1990>>2]|0;
     $2069 = $2068 ^ $2006;
     HEAP32[$1990>>2] = $2069;
     $2070 = HEAP32[$5>>2]|0;
     $2071 = $2070 ^ $2003;
     HEAP32[$5>>2] = $2071;
     $2072 = HEAP32[$10>>2]|0;
     $2073 = $2072 ^ $2006;
     HEAP32[$10>>2] = $2073;
     $2074 = (34157280 + (($2001*12)|0)|0);
     $2075 = HEAP32[$2074>>2]|0;
     $2076 = HEAP32[$1991>>2]|0;
     $2077 = $2076 ^ $2075;
     HEAP32[$1991>>2] = $2077;
     $2078 = ((34157280 + (($2001*12)|0)|0) + 4|0);
     $2079 = HEAP32[$2078>>2]|0;
     $2080 = HEAP32[$1992>>2]|0;
     $2081 = $2080 ^ $2079;
     HEAP32[$1992>>2] = $2081;
     $2082 = ((34157280 + (($2001*12)|0)|0) + 8|0);
     $2083 = HEAP32[$2082>>2]|0;
     $2084 = HEAP32[$1993>>2]|0;
     $2085 = $2084 ^ $2083;
     HEAP32[$1993>>2] = $2085;
     $2086 = (34158256 + (($2001*12)|0)|0);
     $2087 = HEAP32[$2086>>2]|0;
     $2088 = HEAP32[$1994>>2]|0;
     $2089 = $2088 ^ $2087;
     HEAP32[$1994>>2] = $2089;
     $2090 = ((34158256 + (($2001*12)|0)|0) + 4|0);
     $2091 = HEAP32[$2090>>2]|0;
     $2092 = HEAP32[$1995>>2]|0;
     $2093 = $2092 ^ $2091;
     HEAP32[$1995>>2] = $2093;
     $2094 = ((34158256 + (($2001*12)|0)|0) + 8|0);
     $2095 = HEAP32[$2094>>2]|0;
     $2096 = HEAP32[$1996>>2]|0;
     $2097 = $2096 ^ $2095;
     HEAP32[$1996>>2] = $2097;
     $2098 = (34159232 + (($2001*12)|0)|0);
     $2099 = HEAP32[$2098>>2]|0;
     $2100 = HEAP32[$1997>>2]|0;
     $2101 = $2100 ^ $2099;
     HEAP32[$1997>>2] = $2101;
     $2102 = ((34159232 + (($2001*12)|0)|0) + 4|0);
     $2103 = HEAP32[$2102>>2]|0;
     $2104 = HEAP32[$1998>>2]|0;
     $2105 = $2104 ^ $2103;
     HEAP32[$1998>>2] = $2105;
     $2106 = ((34159232 + (($2001*12)|0)|0) + 8|0);
     $2107 = HEAP32[$2106>>2]|0;
     $2108 = HEAP32[$1999>>2]|0;
     $2109 = $2108 ^ $2107;
     HEAP32[$1999>>2] = $2109;
     $bb_check$sroa$0$5 = $2050;$bb_check$sroa$1$5 = $2059;$bb_check$sroa$2$5 = $2062;
     while(1) {
      $2110 = (_first_one012($bb_check$sroa$0$5,$bb_check$sroa$1$5,$bb_check$sroa$2$5)|0);
      $2111 = (34156304 + (($2110*12)|0)|0);
      $2112 = HEAP32[$2111>>2]|0;
      $2113 = $2112 ^ $bb_check$sroa$0$5;
      $2114 = ((34156304 + (($2110*12)|0)|0) + 4|0);
      $2115 = HEAP32[$2114>>2]|0;
      $2116 = $2115 ^ $bb_check$sroa$1$5;
      $2117 = ((34156304 + (($2110*12)|0)|0) + 8|0);
      $2118 = HEAP32[$2117>>2]|0;
      $2119 = $2118 ^ $bb_check$sroa$2$5;
      $2120 = (_is_white_attacked($ptree,$2110)|0);
      $2121 = ($2120|0)==(0);
      do {
       if (!($2121)) {
        $2122 = (33704320 + (($2110*1536)|0)|0);
        $2123 = HEAP32[$2122>>2]|0;
        $2124 = (33579904 + (($2110*1536)|0)|0);
        $2125 = HEAP32[$2124>>2]|0;
        $2126 = $2125 | $2123;
        $2127 = ((33704320 + (($2110*1536)|0)|0) + 4|0);
        $2128 = HEAP32[$2127>>2]|0;
        $2129 = ((33579904 + (($2110*1536)|0)|0) + 4|0);
        $2130 = HEAP32[$2129>>2]|0;
        $2131 = $2130 | $2128;
        $2132 = ((33704320 + (($2110*1536)|0)|0) + 8|0);
        $2133 = HEAP32[$2132>>2]|0;
        $2134 = ((33579904 + (($2110*1536)|0)|0) + 8|0);
        $2135 = HEAP32[$2134>>2]|0;
        $2136 = $2135 | $2133;
        $2137 = ($2110|0)<(27);
        if ($2137) {
         $2138 = (33578928 + (($2110*12)|0)|0);
         $2139 = HEAP32[$2138>>2]|0;
         $2140 = $2139 | $2126;
         $2141 = ((33578928 + (($2110*12)|0)|0) + 4|0);
         $2142 = HEAP32[$2141>>2]|0;
         $2143 = $2142 | $2131;
         $2144 = $2140;$2145 = $2143;
        } else {
         $2144 = $2126;$2145 = $2131;
        }
        $2146 = (_can_w_king_escape($ptree,$2110,$2144,$2145,$2136)|0);
        $2147 = ($2146|0)==(0);
        if ($2147) {
         $2148 = HEAP8[$$pre1002>>0]|0;
         $2149 = $2148&255;
         $2150 = ((220518304 + (($2149*81)|0)|0) + ($2001)|0);
         $2151 = HEAP8[$2150>>0]|0;
         $2152 = $2151&255;
         $2153 = ($2151<<24>>24)==(0);
         do {
          if ($2153) {
           label = 160;
          } else {
           $2154 = ((220518304 + (($2149*81)|0)|0) + ($2110)|0);
           $2155 = HEAP8[$2154>>0]|0;
           $2156 = ($2151<<24>>24)==($2155<<24>>24);
           if ($2156) {
            label = 160;
            break;
           }
           $2157 = (_is_pinned_on_white_king($ptree,$2001,$2152)|0);
           $2158 = ($2157|0)==(0);
           if ($2158) {
            label = 160;
           }
          }
         } while(0);
         if ((label|0) == 160) {
          label = 0;
          $2159 = (_can_w_piece_capture($ptree,$2110)|0);
          $2160 = ($2159|0)==(0);
          if (!($2160)) {
           break;
          }
         }
         $2161 = HEAP8[$2000>>0]|0;
         $2162 = $2161&255;
         $2163 = ((220518304 + (($2162*81)|0)|0) + ($2001)|0);
         $2164 = HEAP8[$2163>>0]|0;
         $2165 = $2164&255;
         $2166 = ($2164<<24>>24)==(0);
         if ($2166) {
          break L221;
         }
         $2167 = ((220518304 + (($2162*81)|0)|0) + ($2110)|0);
         $2168 = HEAP8[$2167>>0]|0;
         $2169 = ($2164<<24>>24)==($2168<<24>>24);
         if ($2169) {
          break L221;
         }
         $2170 = (_is_pinned_on_black_king($ptree,$2001,$2165)|0);
         $2171 = ($2170|0)==(0);
         if ($2171) {
          break L221;
         }
        }
       }
      } while(0);
      $2220 = $2116 | $2113;
      $2221 = $2220 | $2119;
      $2222 = ($2221|0)==(0);
      if ($2222) {
       break;
      } else {
       $bb_check$sroa$0$5 = $2113;$bb_check$sroa$1$5 = $2116;$bb_check$sroa$2$5 = $2119;
      }
     }
     $2223 = HEAP32[$2074>>2]|0;
     $2224 = HEAP32[$1991>>2]|0;
     $2225 = $2224 ^ $2223;
     HEAP32[$1991>>2] = $2225;
     $2226 = HEAP32[$2078>>2]|0;
     $2227 = HEAP32[$1992>>2]|0;
     $2228 = $2227 ^ $2226;
     HEAP32[$1992>>2] = $2228;
     $2229 = HEAP32[$2082>>2]|0;
     $2230 = HEAP32[$1993>>2]|0;
     $2231 = $2230 ^ $2229;
     HEAP32[$1993>>2] = $2231;
     $2232 = HEAP32[$2086>>2]|0;
     $2233 = HEAP32[$1994>>2]|0;
     $2234 = $2233 ^ $2232;
     HEAP32[$1994>>2] = $2234;
     $2235 = HEAP32[$2090>>2]|0;
     $2236 = HEAP32[$1995>>2]|0;
     $2237 = $2236 ^ $2235;
     HEAP32[$1995>>2] = $2237;
     $2238 = HEAP32[$2094>>2]|0;
     $2239 = HEAP32[$1996>>2]|0;
     $2240 = $2239 ^ $2238;
     HEAP32[$1996>>2] = $2240;
     $2241 = HEAP32[$2098>>2]|0;
     $2242 = HEAP32[$1997>>2]|0;
     $2243 = $2242 ^ $2241;
     HEAP32[$1997>>2] = $2243;
     $2244 = HEAP32[$2102>>2]|0;
     $2245 = HEAP32[$1998>>2]|0;
     $2246 = $2245 ^ $2244;
     HEAP32[$1998>>2] = $2246;
     $2247 = HEAP32[$2106>>2]|0;
     $2248 = HEAP32[$1999>>2]|0;
     $2249 = $2248 ^ $2247;
     HEAP32[$1999>>2] = $2249;
     $2250 = HEAP32[$2002>>2]|0;
     $2251 = HEAP32[$5>>2]|0;
     $2252 = $2251 ^ $2250;
     HEAP32[$5>>2] = $2252;
     $2253 = HEAP32[$2005>>2]|0;
     $2254 = HEAP32[$10>>2]|0;
     $2255 = $2254 ^ $2253;
     HEAP32[$10>>2] = $2255;
     $2256 = HEAP32[$1989>>2]|0;
     $2257 = $2256 ^ $2250;
     HEAP32[$1989>>2] = $2257;
     $2258 = HEAP32[$1990>>2]|0;
     $2259 = $2258 ^ $2253;
     HEAP32[$1990>>2] = $2259;
    }
    $2260 = $2007 | $2004;
    $2261 = ($2260|0)==(0);
    if ($2261) {
     break L219;
    } else {
     $bb$sroa$1$8478 = $2004;$bb$sroa$2$8479 = $2007;
    }
   }
   $2172 = HEAP32[$2074>>2]|0;
   $2173 = HEAP32[$1991>>2]|0;
   $2174 = $2173 ^ $2172;
   HEAP32[$1991>>2] = $2174;
   $2175 = HEAP32[$2078>>2]|0;
   $2176 = HEAP32[$1992>>2]|0;
   $2177 = $2176 ^ $2175;
   HEAP32[$1992>>2] = $2177;
   $2178 = HEAP32[$2082>>2]|0;
   $2179 = HEAP32[$1993>>2]|0;
   $2180 = $2179 ^ $2178;
   HEAP32[$1993>>2] = $2180;
   $2181 = HEAP32[$2086>>2]|0;
   $2182 = HEAP32[$1994>>2]|0;
   $2183 = $2182 ^ $2181;
   HEAP32[$1994>>2] = $2183;
   $2184 = HEAP32[$2090>>2]|0;
   $2185 = HEAP32[$1995>>2]|0;
   $2186 = $2185 ^ $2184;
   HEAP32[$1995>>2] = $2186;
   $2187 = HEAP32[$2094>>2]|0;
   $2188 = HEAP32[$1996>>2]|0;
   $2189 = $2188 ^ $2187;
   HEAP32[$1996>>2] = $2189;
   $2190 = HEAP32[$2098>>2]|0;
   $2191 = HEAP32[$1997>>2]|0;
   $2192 = $2191 ^ $2190;
   HEAP32[$1997>>2] = $2192;
   $2193 = HEAP32[$2102>>2]|0;
   $2194 = HEAP32[$1998>>2]|0;
   $2195 = $2194 ^ $2193;
   HEAP32[$1998>>2] = $2195;
   $2196 = HEAP32[$2106>>2]|0;
   $2197 = HEAP32[$1999>>2]|0;
   $2198 = $2197 ^ $2196;
   HEAP32[$1999>>2] = $2198;
   $2199 = HEAP32[$2002>>2]|0;
   $2200 = HEAP32[$5>>2]|0;
   $2201 = $2200 ^ $2199;
   HEAP32[$5>>2] = $2201;
   $2202 = HEAP32[$2005>>2]|0;
   $2203 = HEAP32[$10>>2]|0;
   $2204 = $2203 ^ $2202;
   HEAP32[$10>>2] = $2204;
   $2205 = HEAP32[$1989>>2]|0;
   $2206 = $2205 ^ $2199;
   HEAP32[$1989>>2] = $2206;
   $2207 = HEAP32[$1990>>2]|0;
   $2208 = $2207 ^ $2202;
   HEAP32[$1990>>2] = $2208;
   $2209 = $2001 << 7;
   $2210 = $2137 ? 16384 : 0;
   $2211 = ((($ptree) + ($2110)|0) + 512|0);
   $2212 = HEAP8[$2211>>0]|0;
   $2213 = $2212 << 24 >> 24;
   $2214 = (0 - ($2213))|0;
   $2215 = $2214 << 19;
   $2216 = $2209 | $2110;
   $2217 = $2216 | $2210;
   $2218 = $2217 | $2215;
   $2219 = $2218 | 196608;
   $$0 = $2219;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $2262 = (($ptree) + 92|0);
 $2263 = HEAP32[$2262>>2]|0;
 $2264 = HEAP8[$$pre1002>>0]|0;
 $2265 = $2264&255;
 $2266 = (221102544 + (($2265*48)|0)|0);
 $2267 = HEAP32[$2266>>2]|0;
 $2268 = $2267 & $2263;
 $2269 = (($ptree) + 96|0);
 $2270 = HEAP32[$2269>>2]|0;
 $2271 = ((221102544 + (($2265*48)|0)|0) + 4|0);
 $2272 = HEAP32[$2271>>2]|0;
 $2273 = $2272 & $2270;
 $2274 = (($ptree) + 100|0);
 $2275 = HEAP32[$2274>>2]|0;
 $2276 = ((221102544 + (($2265*48)|0)|0) + 8|0);
 $2277 = HEAP32[$2276>>2]|0;
 $2278 = $2277 & $2275;
 $2279 = $2273 | $2268;
 $2280 = $2279 | $2278;
 $2281 = ($2280|0)==(0);
 do {
  if ($2281) {
   $2523 = $2264;
  } else {
   $2282 = (($ptree) + 32|0);
   $2283 = (($ptree) + 36|0);
   $2284 = (($ptree) + 40|0);
   $2285 = (($ptree) + 44|0);
   $2286 = (($ptree) + 48|0);
   $2287 = (($ptree) + 52|0);
   $2288 = (($ptree) + 56|0);
   $2289 = (($ptree) + 60|0);
   $2290 = (($ptree) + 64|0);
   $2291 = (($ptree) + 593|0);
   $bb$sroa$0$9445 = $2268;$bb$sroa$1$9446 = $2273;$bb$sroa$2$9447 = $2278;
   L249: while(1) {
    $2292 = (_first_one012($bb$sroa$0$9445,$bb$sroa$1$9446,$bb$sroa$2$9447)|0);
    $2293 = (34156304 + (($2292*12)|0)|0);
    $2294 = HEAP32[$2293>>2]|0;
    $2295 = $2294 ^ $bb$sroa$0$9445;
    $2296 = ((34156304 + (($2292*12)|0)|0) + 4|0);
    $2297 = HEAP32[$2296>>2]|0;
    $2298 = $2297 ^ $bb$sroa$1$9446;
    $2299 = ((34156304 + (($2292*12)|0)|0) + 8|0);
    $2300 = HEAP32[$2299>>2]|0;
    $2301 = $2300 ^ $bb$sroa$2$9447;
    $2302 = (33575024 + (($2292*12)|0)|0);
    $2303 = HEAP32[$2302>>2]|0;
    $2304 = $2303 & $362;
    $2305 = ((33575024 + (($2292*12)|0)|0) + 4|0);
    $2306 = HEAP32[$2305>>2]|0;
    $2307 = $2306 & $364;
    $2308 = ((33575024 + (($2292*12)|0)|0) + 8|0);
    $2309 = HEAP32[$2308>>2]|0;
    $2310 = $2309 & $366;
    $2311 = HEAP8[$$pre1002>>0]|0;
    $2312 = $2311&255;
    $2313 = (33577952 + (($2312*12)|0)|0);
    $2314 = HEAP32[$2313>>2]|0;
    $2315 = $2304 & $2314;
    $2316 = ((33577952 + (($2312*12)|0)|0) + 4|0);
    $2317 = HEAP32[$2316>>2]|0;
    $2318 = $2307 & $2317;
    $2319 = ((33577952 + (($2312*12)|0)|0) + 8|0);
    $2320 = HEAP32[$2319>>2]|0;
    $2321 = $2310 & $2320;
    $2322 = $2318 | $2315;
    $2323 = $2322 | $2321;
    $2324 = ($2323|0)==(0);
    if (!($2324)) {
     $2325 = HEAP32[$2262>>2]|0;
     $2326 = $2325 ^ $2294;
     HEAP32[$2262>>2] = $2326;
     $2327 = HEAP32[$2269>>2]|0;
     $2328 = $2327 ^ $2297;
     HEAP32[$2269>>2] = $2328;
     $2329 = HEAP32[$2274>>2]|0;
     $2330 = $2329 ^ $2300;
     HEAP32[$2274>>2] = $2330;
     $2331 = HEAP32[$0>>2]|0;
     $2332 = $2331 ^ $2294;
     HEAP32[$0>>2] = $2332;
     $2333 = HEAP32[$5>>2]|0;
     $2334 = $2333 ^ $2297;
     HEAP32[$5>>2] = $2334;
     $2335 = HEAP32[$10>>2]|0;
     $2336 = $2335 ^ $2300;
     HEAP32[$10>>2] = $2336;
     $2337 = (34157280 + (($2292*12)|0)|0);
     $2338 = HEAP32[$2337>>2]|0;
     $2339 = HEAP32[$2282>>2]|0;
     $2340 = $2339 ^ $2338;
     HEAP32[$2282>>2] = $2340;
     $2341 = ((34157280 + (($2292*12)|0)|0) + 4|0);
     $2342 = HEAP32[$2341>>2]|0;
     $2343 = HEAP32[$2283>>2]|0;
     $2344 = $2343 ^ $2342;
     HEAP32[$2283>>2] = $2344;
     $2345 = ((34157280 + (($2292*12)|0)|0) + 8|0);
     $2346 = HEAP32[$2345>>2]|0;
     $2347 = HEAP32[$2284>>2]|0;
     $2348 = $2347 ^ $2346;
     HEAP32[$2284>>2] = $2348;
     $2349 = (34158256 + (($2292*12)|0)|0);
     $2350 = HEAP32[$2349>>2]|0;
     $2351 = HEAP32[$2285>>2]|0;
     $2352 = $2351 ^ $2350;
     HEAP32[$2285>>2] = $2352;
     $2353 = ((34158256 + (($2292*12)|0)|0) + 4|0);
     $2354 = HEAP32[$2353>>2]|0;
     $2355 = HEAP32[$2286>>2]|0;
     $2356 = $2355 ^ $2354;
     HEAP32[$2286>>2] = $2356;
     $2357 = ((34158256 + (($2292*12)|0)|0) + 8|0);
     $2358 = HEAP32[$2357>>2]|0;
     $2359 = HEAP32[$2287>>2]|0;
     $2360 = $2359 ^ $2358;
     HEAP32[$2287>>2] = $2360;
     $2361 = (34159232 + (($2292*12)|0)|0);
     $2362 = HEAP32[$2361>>2]|0;
     $2363 = HEAP32[$2288>>2]|0;
     $2364 = $2363 ^ $2362;
     HEAP32[$2288>>2] = $2364;
     $2365 = ((34159232 + (($2292*12)|0)|0) + 4|0);
     $2366 = HEAP32[$2365>>2]|0;
     $2367 = HEAP32[$2289>>2]|0;
     $2368 = $2367 ^ $2366;
     HEAP32[$2289>>2] = $2368;
     $2369 = ((34159232 + (($2292*12)|0)|0) + 8|0);
     $2370 = HEAP32[$2369>>2]|0;
     $2371 = HEAP32[$2290>>2]|0;
     $2372 = $2371 ^ $2370;
     HEAP32[$2290>>2] = $2372;
     $bb_check$sroa$0$6 = $2315;$bb_check$sroa$1$6 = $2318;$bb_check$sroa$2$6 = $2321;
     while(1) {
      $2373 = (_first_one012($bb_check$sroa$0$6,$bb_check$sroa$1$6,$bb_check$sroa$2$6)|0);
      $2374 = (34156304 + (($2373*12)|0)|0);
      $2375 = HEAP32[$2374>>2]|0;
      $2376 = $2375 ^ $bb_check$sroa$0$6;
      $2377 = ((34156304 + (($2373*12)|0)|0) + 4|0);
      $2378 = HEAP32[$2377>>2]|0;
      $2379 = $2378 ^ $bb_check$sroa$1$6;
      $2380 = ((34156304 + (($2373*12)|0)|0) + 8|0);
      $2381 = HEAP32[$2380>>2]|0;
      $2382 = $2381 ^ $bb_check$sroa$2$6;
      $2383 = (_is_white_attacked($ptree,$2373)|0);
      $2384 = ($2383|0)==(0);
      do {
       if (!($2384)) {
        $2385 = (33575024 + (($2373*12)|0)|0);
        $2386 = HEAP32[$2385>>2]|0;
        $2387 = ((33575024 + (($2373*12)|0)|0) + 4|0);
        $2388 = HEAP32[$2387>>2]|0;
        $2389 = ((33575024 + (($2373*12)|0)|0) + 8|0);
        $2390 = HEAP32[$2389>>2]|0;
        $2391 = (_can_w_king_escape($ptree,$2373,$2386,$2388,$2390)|0);
        $2392 = ($2391|0)==(0);
        if ($2392) {
         $2393 = HEAP8[$$pre1002>>0]|0;
         $2394 = $2393&255;
         $2395 = ((220518304 + (($2394*81)|0)|0) + ($2292)|0);
         $2396 = HEAP8[$2395>>0]|0;
         $2397 = $2396&255;
         $2398 = ($2396<<24>>24)==(0);
         do {
          if ($2398) {
           label = 177;
          } else {
           $2399 = ((220518304 + (($2394*81)|0)|0) + ($2373)|0);
           $2400 = HEAP8[$2399>>0]|0;
           $2401 = ($2396<<24>>24)==($2400<<24>>24);
           if ($2401) {
            label = 177;
            break;
           }
           $2402 = (_is_pinned_on_white_king($ptree,$2292,$2397)|0);
           $2403 = ($2402|0)==(0);
           if ($2403) {
            label = 177;
           }
          }
         } while(0);
         if ((label|0) == 177) {
          label = 0;
          $2404 = (_can_w_piece_capture($ptree,$2373)|0);
          $2405 = ($2404|0)==(0);
          if (!($2405)) {
           break;
          }
         }
         $2406 = HEAP8[$2291>>0]|0;
         $2407 = $2406&255;
         $2408 = ((220518304 + (($2407*81)|0)|0) + ($2292)|0);
         $2409 = HEAP8[$2408>>0]|0;
         $2410 = $2409&255;
         $2411 = ($2409<<24>>24)==(0);
         if ($2411) {
          break L249;
         }
         $2412 = ((220518304 + (($2407*81)|0)|0) + ($2373)|0);
         $2413 = HEAP8[$2412>>0]|0;
         $2414 = ($2409<<24>>24)==($2413<<24>>24);
         if ($2414) {
          break L249;
         }
         $2415 = (_is_pinned_on_black_king($ptree,$2292,$2410)|0);
         $2416 = ($2415|0)==(0);
         if ($2416) {
          break L249;
         }
        }
       }
      } while(0);
      $2472 = $2379 | $2376;
      $2473 = $2472 | $2382;
      $2474 = ($2473|0)==(0);
      if ($2474) {
       break;
      } else {
       $bb_check$sroa$0$6 = $2376;$bb_check$sroa$1$6 = $2379;$bb_check$sroa$2$6 = $2382;
      }
     }
     $2475 = HEAP32[$2337>>2]|0;
     $2476 = HEAP32[$2282>>2]|0;
     $2477 = $2476 ^ $2475;
     HEAP32[$2282>>2] = $2477;
     $2478 = HEAP32[$2341>>2]|0;
     $2479 = HEAP32[$2283>>2]|0;
     $2480 = $2479 ^ $2478;
     HEAP32[$2283>>2] = $2480;
     $2481 = HEAP32[$2345>>2]|0;
     $2482 = HEAP32[$2284>>2]|0;
     $2483 = $2482 ^ $2481;
     HEAP32[$2284>>2] = $2483;
     $2484 = HEAP32[$2349>>2]|0;
     $2485 = HEAP32[$2285>>2]|0;
     $2486 = $2485 ^ $2484;
     HEAP32[$2285>>2] = $2486;
     $2487 = HEAP32[$2353>>2]|0;
     $2488 = HEAP32[$2286>>2]|0;
     $2489 = $2488 ^ $2487;
     HEAP32[$2286>>2] = $2489;
     $2490 = HEAP32[$2357>>2]|0;
     $2491 = HEAP32[$2287>>2]|0;
     $2492 = $2491 ^ $2490;
     HEAP32[$2287>>2] = $2492;
     $2493 = HEAP32[$2361>>2]|0;
     $2494 = HEAP32[$2288>>2]|0;
     $2495 = $2494 ^ $2493;
     HEAP32[$2288>>2] = $2495;
     $2496 = HEAP32[$2365>>2]|0;
     $2497 = HEAP32[$2289>>2]|0;
     $2498 = $2497 ^ $2496;
     HEAP32[$2289>>2] = $2498;
     $2499 = HEAP32[$2369>>2]|0;
     $2500 = HEAP32[$2290>>2]|0;
     $2501 = $2500 ^ $2499;
     HEAP32[$2290>>2] = $2501;
     $2502 = HEAP32[$2293>>2]|0;
     $2503 = HEAP32[$0>>2]|0;
     $2504 = $2503 ^ $2502;
     HEAP32[$0>>2] = $2504;
     $2505 = HEAP32[$2296>>2]|0;
     $2506 = HEAP32[$5>>2]|0;
     $2507 = $2506 ^ $2505;
     HEAP32[$5>>2] = $2507;
     $2508 = HEAP32[$2299>>2]|0;
     $2509 = HEAP32[$10>>2]|0;
     $2510 = $2509 ^ $2508;
     HEAP32[$10>>2] = $2510;
     $2511 = HEAP32[$2262>>2]|0;
     $2512 = $2511 ^ $2502;
     HEAP32[$2262>>2] = $2512;
     $2513 = HEAP32[$2269>>2]|0;
     $2514 = $2513 ^ $2505;
     HEAP32[$2269>>2] = $2514;
     $2515 = HEAP32[$2274>>2]|0;
     $2516 = $2515 ^ $2508;
     HEAP32[$2274>>2] = $2516;
    }
    $2517 = $2298 | $2295;
    $2518 = $2517 | $2301;
    $2519 = ($2518|0)==(0);
    if ($2519) {
     label = 185;
     break;
    } else {
     $bb$sroa$0$9445 = $2295;$bb$sroa$1$9446 = $2298;$bb$sroa$2$9447 = $2301;
    }
   }
   if ((label|0) == 185) {
    $$pre989 = HEAP8[$$pre1002>>0]|0;
    $2523 = $$pre989;
    break;
   }
   $2417 = HEAP32[$2337>>2]|0;
   $2418 = HEAP32[$2282>>2]|0;
   $2419 = $2418 ^ $2417;
   HEAP32[$2282>>2] = $2419;
   $2420 = HEAP32[$2341>>2]|0;
   $2421 = HEAP32[$2283>>2]|0;
   $2422 = $2421 ^ $2420;
   HEAP32[$2283>>2] = $2422;
   $2423 = HEAP32[$2345>>2]|0;
   $2424 = HEAP32[$2284>>2]|0;
   $2425 = $2424 ^ $2423;
   HEAP32[$2284>>2] = $2425;
   $2426 = HEAP32[$2349>>2]|0;
   $2427 = HEAP32[$2285>>2]|0;
   $2428 = $2427 ^ $2426;
   HEAP32[$2285>>2] = $2428;
   $2429 = HEAP32[$2353>>2]|0;
   $2430 = HEAP32[$2286>>2]|0;
   $2431 = $2430 ^ $2429;
   HEAP32[$2286>>2] = $2431;
   $2432 = HEAP32[$2357>>2]|0;
   $2433 = HEAP32[$2287>>2]|0;
   $2434 = $2433 ^ $2432;
   HEAP32[$2287>>2] = $2434;
   $2435 = HEAP32[$2361>>2]|0;
   $2436 = HEAP32[$2288>>2]|0;
   $2437 = $2436 ^ $2435;
   HEAP32[$2288>>2] = $2437;
   $2438 = HEAP32[$2365>>2]|0;
   $2439 = HEAP32[$2289>>2]|0;
   $2440 = $2439 ^ $2438;
   HEAP32[$2289>>2] = $2440;
   $2441 = HEAP32[$2369>>2]|0;
   $2442 = HEAP32[$2290>>2]|0;
   $2443 = $2442 ^ $2441;
   HEAP32[$2290>>2] = $2443;
   $2444 = HEAP32[$2293>>2]|0;
   $2445 = HEAP32[$0>>2]|0;
   $2446 = $2445 ^ $2444;
   HEAP32[$0>>2] = $2446;
   $2447 = HEAP32[$2296>>2]|0;
   $2448 = HEAP32[$5>>2]|0;
   $2449 = $2448 ^ $2447;
   HEAP32[$5>>2] = $2449;
   $2450 = HEAP32[$2299>>2]|0;
   $2451 = HEAP32[$10>>2]|0;
   $2452 = $2451 ^ $2450;
   HEAP32[$10>>2] = $2452;
   $2453 = HEAP32[$2262>>2]|0;
   $2454 = $2453 ^ $2444;
   HEAP32[$2262>>2] = $2454;
   $2455 = HEAP32[$2269>>2]|0;
   $2456 = $2455 ^ $2447;
   HEAP32[$2269>>2] = $2456;
   $2457 = HEAP32[$2274>>2]|0;
   $2458 = $2457 ^ $2450;
   HEAP32[$2274>>2] = $2458;
   $2459 = $2292 << 7;
   $2460 = $2373 | $2459;
   $2461 = ((($ptree) + ($2373)|0) + 512|0);
   $2462 = HEAP8[$2461>>0]|0;
   $2463 = $2462 << 24 >> 24;
   $2464 = (0 - ($2463))|0;
   $2465 = $2464 << 19;
   $2466 = $2460 | $2465;
   $2467 = ((($ptree) + ($2292)|0) + 512|0);
   $2468 = HEAP8[$2467>>0]|0;
   $2469 = $2468 << 24 >> 24;
   $2470 = $2469 << 15;
   $2471 = $2466 | $2470;
   $$0 = $2471;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $2520 = (($ptree) + 236|0);
 $2521 = HEAP32[$2520>>2]|0;
 $2522 = $2523&255;
 $2524 = ((221102544 + (($2522*48)|0)|0) + 12|0);
 $2525 = HEAP32[$2524>>2]|0;
 $2526 = $2525 & $2521;
 $2527 = (($ptree) + 240|0);
 $2528 = HEAP32[$2527>>2]|0;
 $2529 = ((221102544 + (($2522*48)|0)|0) + 16|0);
 $2530 = HEAP32[$2529>>2]|0;
 $2531 = $2530 & $2528;
 $2532 = (($ptree) + 244|0);
 $2533 = HEAP32[$2532>>2]|0;
 $2534 = ((221102544 + (($2522*48)|0)|0) + 20|0);
 $2535 = HEAP32[$2534>>2]|0;
 $2536 = $2535 & $2533;
 $2537 = ($2526|0)==(0);
 L274: do {
  if (!($2537)) {
   $2538 = (($ptree) + 32|0);
   $2539 = (($ptree) + 36|0);
   $2540 = (($ptree) + 40|0);
   $2541 = (($ptree) + 44|0);
   $2542 = (($ptree) + 48|0);
   $2543 = (($ptree) + 52|0);
   $2544 = (($ptree) + 56|0);
   $2545 = (($ptree) + 60|0);
   $2546 = (($ptree) + 64|0);
   $2547 = (($ptree) + 593|0);
   $bb$sroa$0$10416 = $2526;
   L276: while(1) {
    $2548 = (_last_one0($bb$sroa$0$10416)|0);
    $2549 = (34156304 + (($2548*12)|0)|0);
    $2550 = HEAP32[$2549>>2]|0;
    $2551 = $2550 ^ $bb$sroa$0$10416;
    $2552 = (33574048 + (($2548*12)|0)|0);
    $2553 = HEAP32[$2552>>2]|0;
    $2554 = $2553 & $362;
    $2555 = HEAP8[$$pre1002>>0]|0;
    $2556 = $2555&255;
    $2557 = (33577952 + (($2556*12)|0)|0);
    $2558 = HEAP32[$2557>>2]|0;
    $2559 = $2558 & $2554;
    $2560 = ((33574048 + (($2548*12)|0)|0) + 4|0);
    $2561 = HEAP32[$2560>>2]|0;
    $2562 = $2561 & $364;
    $2563 = ((33577952 + (($2556*12)|0)|0) + 4|0);
    $2564 = HEAP32[$2563>>2]|0;
    $2565 = $2562 & $2564;
    $2566 = (33576976 + (($2556*12)|0)|0);
    $2567 = HEAP32[$2566>>2]|0;
    $2568 = $2558 ^ -1;
    $2569 = $2554 & $2568;
    $2570 = $2569 & $2567;
    $2571 = ((33576976 + (($2556*12)|0)|0) + 4|0);
    $2572 = HEAP32[$2571>>2]|0;
    $2573 = $2564 ^ -1;
    $2574 = $2562 & $2573;
    $2575 = $2574 & $2572;
    $2576 = $2565 | $2559;
    $2577 = $2576 | $2570;
    $2578 = $2577 | $2575;
    $2579 = ($2578|0)==(0);
    if (!($2579)) {
     $2580 = HEAP32[$2520>>2]|0;
     $2581 = $2580 ^ $2550;
     HEAP32[$2520>>2] = $2581;
     $2582 = HEAP32[$0>>2]|0;
     $2583 = $2582 ^ $2550;
     HEAP32[$0>>2] = $2583;
     $2584 = (34157280 + (($2548*12)|0)|0);
     $2585 = HEAP32[$2584>>2]|0;
     $2586 = HEAP32[$2538>>2]|0;
     $2587 = $2586 ^ $2585;
     HEAP32[$2538>>2] = $2587;
     $2588 = ((34157280 + (($2548*12)|0)|0) + 4|0);
     $2589 = HEAP32[$2588>>2]|0;
     $2590 = HEAP32[$2539>>2]|0;
     $2591 = $2590 ^ $2589;
     HEAP32[$2539>>2] = $2591;
     $2592 = ((34157280 + (($2548*12)|0)|0) + 8|0);
     $2593 = HEAP32[$2592>>2]|0;
     $2594 = HEAP32[$2540>>2]|0;
     $2595 = $2594 ^ $2593;
     HEAP32[$2540>>2] = $2595;
     $2596 = (34158256 + (($2548*12)|0)|0);
     $2597 = HEAP32[$2596>>2]|0;
     $2598 = HEAP32[$2541>>2]|0;
     $2599 = $2598 ^ $2597;
     HEAP32[$2541>>2] = $2599;
     $2600 = ((34158256 + (($2548*12)|0)|0) + 4|0);
     $2601 = HEAP32[$2600>>2]|0;
     $2602 = HEAP32[$2542>>2]|0;
     $2603 = $2602 ^ $2601;
     HEAP32[$2542>>2] = $2603;
     $2604 = ((34158256 + (($2548*12)|0)|0) + 8|0);
     $2605 = HEAP32[$2604>>2]|0;
     $2606 = HEAP32[$2543>>2]|0;
     $2607 = $2606 ^ $2605;
     HEAP32[$2543>>2] = $2607;
     $2608 = (34159232 + (($2548*12)|0)|0);
     $2609 = HEAP32[$2608>>2]|0;
     $2610 = HEAP32[$2544>>2]|0;
     $2611 = $2610 ^ $2609;
     HEAP32[$2544>>2] = $2611;
     $2612 = ((34159232 + (($2548*12)|0)|0) + 4|0);
     $2613 = HEAP32[$2612>>2]|0;
     $2614 = HEAP32[$2545>>2]|0;
     $2615 = $2614 ^ $2613;
     HEAP32[$2545>>2] = $2615;
     $2616 = ((34159232 + (($2548*12)|0)|0) + 8|0);
     $2617 = HEAP32[$2616>>2]|0;
     $2618 = HEAP32[$2546>>2]|0;
     $2619 = $2618 ^ $2617;
     HEAP32[$2546>>2] = $2619;
     $2620 = ($2576|0)==(0);
     if (!($2620)) {
      $bb_check_pro$sroa$0$0366 = $2559;$bb_check_pro$sroa$1$0365 = $2565;
      while(1) {
       $2621 = (_first_one01($bb_check_pro$sroa$0$0366,$bb_check_pro$sroa$1$0365)|0);
       $2622 = (34156304 + (($2621*12)|0)|0);
       $2623 = HEAP32[$2622>>2]|0;
       $2624 = $2623 ^ $bb_check_pro$sroa$0$0366;
       $2625 = ((34156304 + (($2621*12)|0)|0) + 4|0);
       $2626 = HEAP32[$2625>>2]|0;
       $2627 = $2626 ^ $bb_check_pro$sroa$1$0365;
       $2628 = (_is_white_attacked($ptree,$2621)|0);
       $2629 = ($2628|0)==(0);
       do {
        if (!($2629)) {
         $2632 = (33575024 + (($2621*12)|0)|0);
         $2633 = HEAP32[$2632>>2]|0;
         $2634 = ((33575024 + (($2621*12)|0)|0) + 4|0);
         $2635 = HEAP32[$2634>>2]|0;
         $2636 = ((33575024 + (($2621*12)|0)|0) + 8|0);
         $2637 = HEAP32[$2636>>2]|0;
         $2638 = (_can_w_king_escape($ptree,$2621,$2633,$2635,$2637)|0);
         $2639 = ($2638|0)==(0);
         if (!($2639)) {
          break;
         }
         $2640 = HEAP8[$$pre1002>>0]|0;
         $2641 = $2640&255;
         $2642 = ((220518304 + (($2641*81)|0)|0) + ($2548)|0);
         $2643 = HEAP8[$2642>>0]|0;
         $2644 = $2643&255;
         $2645 = ($2643<<24>>24)==(0);
         do {
          if ($2645) {
           label = 196;
          } else {
           $2646 = ((220518304 + (($2641*81)|0)|0) + ($2621)|0);
           $2647 = HEAP8[$2646>>0]|0;
           $2648 = ($2643<<24>>24)==($2647<<24>>24);
           if ($2648) {
            label = 196;
            break;
           }
           $2649 = (_is_pinned_on_white_king($ptree,$2548,$2644)|0);
           $2650 = ($2649|0)==(0);
           if ($2650) {
            label = 196;
           }
          }
         } while(0);
         if ((label|0) == 196) {
          label = 0;
          $2651 = (_can_w_piece_capture($ptree,$2621)|0);
          $2652 = ($2651|0)==(0);
          if (!($2652)) {
           break;
          }
         }
         $2653 = HEAP8[$2547>>0]|0;
         $2654 = $2653&255;
         $2655 = ((220518304 + (($2654*81)|0)|0) + ($2548)|0);
         $2656 = HEAP8[$2655>>0]|0;
         $2657 = $2656&255;
         $2658 = ($2656<<24>>24)==(0);
         if ($2658) {
          label = 200;
          break L276;
         }
         $2659 = ((220518304 + (($2654*81)|0)|0) + ($2621)|0);
         $2660 = HEAP8[$2659>>0]|0;
         $2661 = ($2656<<24>>24)==($2660<<24>>24);
         if ($2661) {
          label = 200;
          break L276;
         }
         $2662 = (_is_pinned_on_black_king($ptree,$2548,$2657)|0);
         $2663 = ($2662|0)==(0);
         if ($2663) {
          label = 200;
          break L276;
         }
        }
       } while(0);
       $2630 = $2624 | $2627;
       $2631 = ($2630|0)==(0);
       if ($2631) {
        break;
       } else {
        $bb_check_pro$sroa$0$0366 = $2624;$bb_check_pro$sroa$1$0365 = $2627;
       }
      }
     }
     $2705 = $2570 | $2575;
     $2706 = ($2705|0)==(0);
     if (!($2706)) {
      $bb_check$sroa$0$7372 = $2570;$bb_check$sroa$1$7371 = $2575;
      while(1) {
       $2707 = (_first_one01($bb_check$sroa$0$7372,$bb_check$sroa$1$7371)|0);
       $2708 = (34156304 + (($2707*12)|0)|0);
       $2709 = HEAP32[$2708>>2]|0;
       $2710 = $2709 ^ $bb_check$sroa$0$7372;
       $2711 = ((34156304 + (($2707*12)|0)|0) + 4|0);
       $2712 = HEAP32[$2711>>2]|0;
       $2713 = $2712 ^ $bb_check$sroa$1$7371;
       $2714 = (_is_white_attacked($ptree,$2707)|0);
       $2715 = ($2714|0)==(0);
       do {
        if (!($2715)) {
         $2718 = (33574048 + (($2707*12)|0)|0);
         $2719 = HEAP32[$2718>>2]|0;
         $2720 = ((33574048 + (($2707*12)|0)|0) + 4|0);
         $2721 = HEAP32[$2720>>2]|0;
         $2722 = ((33574048 + (($2707*12)|0)|0) + 8|0);
         $2723 = HEAP32[$2722>>2]|0;
         $2724 = (_can_w_king_escape($ptree,$2707,$2719,$2721,$2723)|0);
         $2725 = ($2724|0)==(0);
         if (!($2725)) {
          break;
         }
         $2726 = HEAP8[$$pre1002>>0]|0;
         $2727 = $2726&255;
         $2728 = ((220518304 + (($2727*81)|0)|0) + ($2548)|0);
         $2729 = HEAP8[$2728>>0]|0;
         $2730 = $2729&255;
         $2731 = ($2729<<24>>24)==(0);
         do {
          if ($2731) {
           label = 208;
          } else {
           $2732 = ((220518304 + (($2727*81)|0)|0) + ($2707)|0);
           $2733 = HEAP8[$2732>>0]|0;
           $2734 = ($2729<<24>>24)==($2733<<24>>24);
           if ($2734) {
            label = 208;
            break;
           }
           $2735 = (_is_pinned_on_white_king($ptree,$2548,$2730)|0);
           $2736 = ($2735|0)==(0);
           if ($2736) {
            label = 208;
           }
          }
         } while(0);
         if ((label|0) == 208) {
          label = 0;
          $2737 = (_can_w_piece_capture($ptree,$2707)|0);
          $2738 = ($2737|0)==(0);
          if (!($2738)) {
           break;
          }
         }
         $2739 = HEAP8[$2547>>0]|0;
         $2740 = $2739&255;
         $2741 = ((220518304 + (($2740*81)|0)|0) + ($2548)|0);
         $2742 = HEAP8[$2741>>0]|0;
         $2743 = $2742&255;
         $2744 = ($2742<<24>>24)==(0);
         if ($2744) {
          label = 212;
          break L276;
         }
         $2745 = ((220518304 + (($2740*81)|0)|0) + ($2707)|0);
         $2746 = HEAP8[$2745>>0]|0;
         $2747 = ($2742<<24>>24)==($2746<<24>>24);
         if ($2747) {
          label = 212;
          break L276;
         }
         $2748 = (_is_pinned_on_black_king($ptree,$2548,$2743)|0);
         $2749 = ($2748|0)==(0);
         if ($2749) {
          label = 212;
          break L276;
         }
        }
       } while(0);
       $2716 = $2710 | $2713;
       $2717 = ($2716|0)==(0);
       if ($2717) {
        break;
       } else {
        $bb_check$sroa$0$7372 = $2710;$bb_check$sroa$1$7371 = $2713;
       }
      }
     }
     $2791 = HEAP32[$2584>>2]|0;
     $2792 = HEAP32[$2538>>2]|0;
     $2793 = $2792 ^ $2791;
     HEAP32[$2538>>2] = $2793;
     $2794 = HEAP32[$2588>>2]|0;
     $2795 = HEAP32[$2539>>2]|0;
     $2796 = $2795 ^ $2794;
     HEAP32[$2539>>2] = $2796;
     $2797 = HEAP32[$2592>>2]|0;
     $2798 = HEAP32[$2540>>2]|0;
     $2799 = $2798 ^ $2797;
     HEAP32[$2540>>2] = $2799;
     $2800 = HEAP32[$2596>>2]|0;
     $2801 = HEAP32[$2541>>2]|0;
     $2802 = $2801 ^ $2800;
     HEAP32[$2541>>2] = $2802;
     $2803 = HEAP32[$2600>>2]|0;
     $2804 = HEAP32[$2542>>2]|0;
     $2805 = $2804 ^ $2803;
     HEAP32[$2542>>2] = $2805;
     $2806 = HEAP32[$2604>>2]|0;
     $2807 = HEAP32[$2543>>2]|0;
     $2808 = $2807 ^ $2806;
     HEAP32[$2543>>2] = $2808;
     $2809 = HEAP32[$2608>>2]|0;
     $2810 = HEAP32[$2544>>2]|0;
     $2811 = $2810 ^ $2809;
     HEAP32[$2544>>2] = $2811;
     $2812 = HEAP32[$2612>>2]|0;
     $2813 = HEAP32[$2545>>2]|0;
     $2814 = $2813 ^ $2812;
     HEAP32[$2545>>2] = $2814;
     $2815 = HEAP32[$2616>>2]|0;
     $2816 = HEAP32[$2546>>2]|0;
     $2817 = $2816 ^ $2815;
     HEAP32[$2546>>2] = $2817;
     $2818 = HEAP32[$2549>>2]|0;
     $2819 = HEAP32[$0>>2]|0;
     $2820 = $2819 ^ $2818;
     HEAP32[$0>>2] = $2820;
     $2821 = HEAP32[$2520>>2]|0;
     $2822 = $2821 ^ $2818;
     HEAP32[$2520>>2] = $2822;
    }
    $2823 = ($2550|0)==($bb$sroa$0$10416|0);
    if ($2823) {
     break L274;
    } else {
     $bb$sroa$0$10416 = $2551;
    }
   }
   if ((label|0) == 200) {
    $2664 = HEAP32[$2584>>2]|0;
    $2665 = HEAP32[$2538>>2]|0;
    $2666 = $2665 ^ $2664;
    HEAP32[$2538>>2] = $2666;
    $2667 = HEAP32[$2588>>2]|0;
    $2668 = HEAP32[$2539>>2]|0;
    $2669 = $2668 ^ $2667;
    HEAP32[$2539>>2] = $2669;
    $2670 = HEAP32[$2592>>2]|0;
    $2671 = HEAP32[$2540>>2]|0;
    $2672 = $2671 ^ $2670;
    HEAP32[$2540>>2] = $2672;
    $2673 = HEAP32[$2596>>2]|0;
    $2674 = HEAP32[$2541>>2]|0;
    $2675 = $2674 ^ $2673;
    HEAP32[$2541>>2] = $2675;
    $2676 = HEAP32[$2600>>2]|0;
    $2677 = HEAP32[$2542>>2]|0;
    $2678 = $2677 ^ $2676;
    HEAP32[$2542>>2] = $2678;
    $2679 = HEAP32[$2604>>2]|0;
    $2680 = HEAP32[$2543>>2]|0;
    $2681 = $2680 ^ $2679;
    HEAP32[$2543>>2] = $2681;
    $2682 = HEAP32[$2608>>2]|0;
    $2683 = HEAP32[$2544>>2]|0;
    $2684 = $2683 ^ $2682;
    HEAP32[$2544>>2] = $2684;
    $2685 = HEAP32[$2612>>2]|0;
    $2686 = HEAP32[$2545>>2]|0;
    $2687 = $2686 ^ $2685;
    HEAP32[$2545>>2] = $2687;
    $2688 = HEAP32[$2616>>2]|0;
    $2689 = HEAP32[$2546>>2]|0;
    $2690 = $2689 ^ $2688;
    HEAP32[$2546>>2] = $2690;
    $2691 = HEAP32[$2549>>2]|0;
    $2692 = HEAP32[$0>>2]|0;
    $2693 = $2692 ^ $2691;
    HEAP32[$0>>2] = $2693;
    $2694 = HEAP32[$2520>>2]|0;
    $2695 = $2694 ^ $2691;
    HEAP32[$2520>>2] = $2695;
    $2696 = $2548 << 7;
    $2697 = ((($ptree) + ($2621)|0) + 512|0);
    $2698 = HEAP8[$2697>>0]|0;
    $2699 = $2698 << 24 >> 24;
    $2700 = (0 - ($2699))|0;
    $2701 = $2700 << 19;
    $2702 = $2696 | $2621;
    $2703 = $2702 | $2701;
    $2704 = $2703 | 147456;
    $$0 = $2704;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 212) {
    $2750 = HEAP32[$2584>>2]|0;
    $2751 = HEAP32[$2538>>2]|0;
    $2752 = $2751 ^ $2750;
    HEAP32[$2538>>2] = $2752;
    $2753 = HEAP32[$2588>>2]|0;
    $2754 = HEAP32[$2539>>2]|0;
    $2755 = $2754 ^ $2753;
    HEAP32[$2539>>2] = $2755;
    $2756 = HEAP32[$2592>>2]|0;
    $2757 = HEAP32[$2540>>2]|0;
    $2758 = $2757 ^ $2756;
    HEAP32[$2540>>2] = $2758;
    $2759 = HEAP32[$2596>>2]|0;
    $2760 = HEAP32[$2541>>2]|0;
    $2761 = $2760 ^ $2759;
    HEAP32[$2541>>2] = $2761;
    $2762 = HEAP32[$2600>>2]|0;
    $2763 = HEAP32[$2542>>2]|0;
    $2764 = $2763 ^ $2762;
    HEAP32[$2542>>2] = $2764;
    $2765 = HEAP32[$2604>>2]|0;
    $2766 = HEAP32[$2543>>2]|0;
    $2767 = $2766 ^ $2765;
    HEAP32[$2543>>2] = $2767;
    $2768 = HEAP32[$2608>>2]|0;
    $2769 = HEAP32[$2544>>2]|0;
    $2770 = $2769 ^ $2768;
    HEAP32[$2544>>2] = $2770;
    $2771 = HEAP32[$2612>>2]|0;
    $2772 = HEAP32[$2545>>2]|0;
    $2773 = $2772 ^ $2771;
    HEAP32[$2545>>2] = $2773;
    $2774 = HEAP32[$2616>>2]|0;
    $2775 = HEAP32[$2546>>2]|0;
    $2776 = $2775 ^ $2774;
    HEAP32[$2546>>2] = $2776;
    $2777 = HEAP32[$2549>>2]|0;
    $2778 = HEAP32[$0>>2]|0;
    $2779 = $2778 ^ $2777;
    HEAP32[$0>>2] = $2779;
    $2780 = HEAP32[$2520>>2]|0;
    $2781 = $2780 ^ $2777;
    HEAP32[$2520>>2] = $2781;
    $2782 = $2548 << 7;
    $2783 = ((($ptree) + ($2707)|0) + 512|0);
    $2784 = HEAP8[$2783>>0]|0;
    $2785 = $2784 << 24 >> 24;
    $2786 = (0 - ($2785))|0;
    $2787 = $2786 << 19;
    $2788 = $2782 | $2707;
    $2789 = $2788 | $2787;
    $2790 = $2789 | 131072;
    $$0 = $2790;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $2824 = $2531 & 133955584;
 $2825 = ($2824|0)==(0);
 L319: do {
  if (!($2825)) {
   $2826 = (($ptree) + 32|0);
   $2827 = (($ptree) + 36|0);
   $2828 = (($ptree) + 40|0);
   $2829 = (($ptree) + 44|0);
   $2830 = (($ptree) + 48|0);
   $2831 = (($ptree) + 52|0);
   $2832 = (($ptree) + 56|0);
   $2833 = (($ptree) + 60|0);
   $2834 = (($ptree) + 64|0);
   $2835 = (($ptree) + 593|0);
   $ubb$0358 = $2824;
   L321: while(1) {
    $2836 = (_last_one1($ubb$0358)|0);
    $2837 = ((34156304 + (($2836*12)|0)|0) + 4|0);
    $2838 = HEAP32[$2837>>2]|0;
    $2839 = $2838 ^ $ubb$0358;
    $2840 = (33574048 + (($2836*12)|0)|0);
    $2841 = HEAP32[$2840>>2]|0;
    $2842 = $2841 & $362;
    $2843 = HEAP8[$$pre1002>>0]|0;
    $2844 = $2843&255;
    $2845 = (33577952 + (($2844*12)|0)|0);
    $2846 = HEAP32[$2845>>2]|0;
    $2847 = $2846 & $2842;
    $2848 = (33576976 + (($2844*12)|0)|0);
    $2849 = HEAP32[$2848>>2]|0;
    $2850 = $2846 ^ -1;
    $2851 = $2842 & $2850;
    $2852 = $2851 & $2849;
    $2853 = ((33574048 + (($2836*12)|0)|0) + 4|0);
    $2854 = HEAP32[$2853>>2]|0;
    $2855 = $2854 & $364;
    $2856 = ((33576976 + (($2844*12)|0)|0) + 4|0);
    $2857 = HEAP32[$2856>>2]|0;
    $2858 = $2855 & $2857;
    $2859 = $2852 | $2847;
    $2860 = $2859 | $2858;
    $2861 = ($2860|0)==(0);
    if (!($2861)) {
     $2862 = HEAP32[$2527>>2]|0;
     $2863 = $2862 ^ $2838;
     HEAP32[$2527>>2] = $2863;
     $2864 = HEAP32[$5>>2]|0;
     $2865 = $2864 ^ $2838;
     HEAP32[$5>>2] = $2865;
     $2866 = (34157280 + (($2836*12)|0)|0);
     $2867 = HEAP32[$2866>>2]|0;
     $2868 = HEAP32[$2826>>2]|0;
     $2869 = $2868 ^ $2867;
     HEAP32[$2826>>2] = $2869;
     $2870 = ((34157280 + (($2836*12)|0)|0) + 4|0);
     $2871 = HEAP32[$2870>>2]|0;
     $2872 = HEAP32[$2827>>2]|0;
     $2873 = $2872 ^ $2871;
     HEAP32[$2827>>2] = $2873;
     $2874 = ((34157280 + (($2836*12)|0)|0) + 8|0);
     $2875 = HEAP32[$2874>>2]|0;
     $2876 = HEAP32[$2828>>2]|0;
     $2877 = $2876 ^ $2875;
     HEAP32[$2828>>2] = $2877;
     $2878 = (34158256 + (($2836*12)|0)|0);
     $2879 = HEAP32[$2878>>2]|0;
     $2880 = HEAP32[$2829>>2]|0;
     $2881 = $2880 ^ $2879;
     HEAP32[$2829>>2] = $2881;
     $2882 = ((34158256 + (($2836*12)|0)|0) + 4|0);
     $2883 = HEAP32[$2882>>2]|0;
     $2884 = HEAP32[$2830>>2]|0;
     $2885 = $2884 ^ $2883;
     HEAP32[$2830>>2] = $2885;
     $2886 = ((34158256 + (($2836*12)|0)|0) + 8|0);
     $2887 = HEAP32[$2886>>2]|0;
     $2888 = HEAP32[$2831>>2]|0;
     $2889 = $2888 ^ $2887;
     HEAP32[$2831>>2] = $2889;
     $2890 = (34159232 + (($2836*12)|0)|0);
     $2891 = HEAP32[$2890>>2]|0;
     $2892 = HEAP32[$2832>>2]|0;
     $2893 = $2892 ^ $2891;
     HEAP32[$2832>>2] = $2893;
     $2894 = ((34159232 + (($2836*12)|0)|0) + 4|0);
     $2895 = HEAP32[$2894>>2]|0;
     $2896 = HEAP32[$2833>>2]|0;
     $2897 = $2896 ^ $2895;
     HEAP32[$2833>>2] = $2897;
     $2898 = ((34159232 + (($2836*12)|0)|0) + 8|0);
     $2899 = HEAP32[$2898>>2]|0;
     $2900 = HEAP32[$2834>>2]|0;
     $2901 = $2900 ^ $2899;
     HEAP32[$2834>>2] = $2901;
     $2902 = ($2847|0)==(0);
     if (!($2902)) {
      $bb_check_pro$sroa$0$1308 = $2847;
      while(1) {
       $2903 = (_last_one0($bb_check_pro$sroa$0$1308)|0);
       $2904 = (34156304 + (($2903*12)|0)|0);
       $2905 = HEAP32[$2904>>2]|0;
       $2906 = $2905 ^ $bb_check_pro$sroa$0$1308;
       $2907 = (_is_white_attacked($ptree,$2903)|0);
       $2908 = ($2907|0)==(0);
       do {
        if (!($2908)) {
         $2910 = (33575024 + (($2903*12)|0)|0);
         $2911 = HEAP32[$2910>>2]|0;
         $2912 = ((33575024 + (($2903*12)|0)|0) + 4|0);
         $2913 = HEAP32[$2912>>2]|0;
         $2914 = ((33575024 + (($2903*12)|0)|0) + 8|0);
         $2915 = HEAP32[$2914>>2]|0;
         $2916 = (_can_w_king_escape($ptree,$2903,$2911,$2913,$2915)|0);
         $2917 = ($2916|0)==(0);
         if (!($2917)) {
          break;
         }
         $2918 = HEAP8[$$pre1002>>0]|0;
         $2919 = $2918&255;
         $2920 = ((220518304 + (($2919*81)|0)|0) + ($2836)|0);
         $2921 = HEAP8[$2920>>0]|0;
         $2922 = $2921&255;
         $2923 = ($2921<<24>>24)==(0);
         do {
          if ($2923) {
           label = 225;
          } else {
           $2924 = ((220518304 + (($2919*81)|0)|0) + ($2903)|0);
           $2925 = HEAP8[$2924>>0]|0;
           $2926 = ($2921<<24>>24)==($2925<<24>>24);
           if ($2926) {
            label = 225;
            break;
           }
           $2927 = (_is_pinned_on_white_king($ptree,$2836,$2922)|0);
           $2928 = ($2927|0)==(0);
           if ($2928) {
            label = 225;
           }
          }
         } while(0);
         if ((label|0) == 225) {
          label = 0;
          $2929 = (_can_w_piece_capture($ptree,$2903)|0);
          $2930 = ($2929|0)==(0);
          if (!($2930)) {
           break;
          }
         }
         $2931 = HEAP8[$2835>>0]|0;
         $2932 = $2931&255;
         $2933 = ((220518304 + (($2932*81)|0)|0) + ($2836)|0);
         $2934 = HEAP8[$2933>>0]|0;
         $2935 = $2934&255;
         $2936 = ($2934<<24>>24)==(0);
         if ($2936) {
          label = 229;
          break L321;
         }
         $2937 = ((220518304 + (($2932*81)|0)|0) + ($2903)|0);
         $2938 = HEAP8[$2937>>0]|0;
         $2939 = ($2934<<24>>24)==($2938<<24>>24);
         if ($2939) {
          label = 229;
          break L321;
         }
         $2940 = (_is_pinned_on_black_king($ptree,$2836,$2935)|0);
         $2941 = ($2940|0)==(0);
         if ($2941) {
          label = 229;
          break L321;
         }
        }
       } while(0);
       $2909 = ($2905|0)==($bb_check_pro$sroa$0$1308|0);
       if ($2909) {
        break;
       } else {
        $bb_check_pro$sroa$0$1308 = $2906;
       }
      }
     }
     $2983 = $2852 | $2858;
     $2984 = ($2983|0)==(0);
     if (!($2984)) {
      $bb_check$sroa$0$8314 = $2852;$bb_check$sroa$1$8313 = $2858;
      while(1) {
       $2985 = (_first_one01($bb_check$sroa$0$8314,$bb_check$sroa$1$8313)|0);
       $2986 = (34156304 + (($2985*12)|0)|0);
       $2987 = HEAP32[$2986>>2]|0;
       $2988 = $2987 ^ $bb_check$sroa$0$8314;
       $2989 = ((34156304 + (($2985*12)|0)|0) + 4|0);
       $2990 = HEAP32[$2989>>2]|0;
       $2991 = $2990 ^ $bb_check$sroa$1$8313;
       $2992 = (_is_white_attacked($ptree,$2985)|0);
       $2993 = ($2992|0)==(0);
       do {
        if (!($2993)) {
         $2996 = (33574048 + (($2985*12)|0)|0);
         $2997 = HEAP32[$2996>>2]|0;
         $2998 = ((33574048 + (($2985*12)|0)|0) + 4|0);
         $2999 = HEAP32[$2998>>2]|0;
         $3000 = ((33574048 + (($2985*12)|0)|0) + 8|0);
         $3001 = HEAP32[$3000>>2]|0;
         $3002 = (_can_w_king_escape($ptree,$2985,$2997,$2999,$3001)|0);
         $3003 = ($3002|0)==(0);
         if (!($3003)) {
          break;
         }
         $3004 = HEAP8[$$pre1002>>0]|0;
         $3005 = $3004&255;
         $3006 = ((220518304 + (($3005*81)|0)|0) + ($2836)|0);
         $3007 = HEAP8[$3006>>0]|0;
         $3008 = $3007&255;
         $3009 = ($3007<<24>>24)==(0);
         do {
          if ($3009) {
           label = 237;
          } else {
           $3010 = ((220518304 + (($3005*81)|0)|0) + ($2985)|0);
           $3011 = HEAP8[$3010>>0]|0;
           $3012 = ($3007<<24>>24)==($3011<<24>>24);
           if ($3012) {
            label = 237;
            break;
           }
           $3013 = (_is_pinned_on_white_king($ptree,$2836,$3008)|0);
           $3014 = ($3013|0)==(0);
           if ($3014) {
            label = 237;
           }
          }
         } while(0);
         if ((label|0) == 237) {
          label = 0;
          $3015 = (_can_w_piece_capture($ptree,$2985)|0);
          $3016 = ($3015|0)==(0);
          if (!($3016)) {
           break;
          }
         }
         $3017 = HEAP8[$2835>>0]|0;
         $3018 = $3017&255;
         $3019 = ((220518304 + (($3018*81)|0)|0) + ($2836)|0);
         $3020 = HEAP8[$3019>>0]|0;
         $3021 = $3020&255;
         $3022 = ($3020<<24>>24)==(0);
         if ($3022) {
          label = 241;
          break L321;
         }
         $3023 = ((220518304 + (($3018*81)|0)|0) + ($2985)|0);
         $3024 = HEAP8[$3023>>0]|0;
         $3025 = ($3020<<24>>24)==($3024<<24>>24);
         if ($3025) {
          label = 241;
          break L321;
         }
         $3026 = (_is_pinned_on_black_king($ptree,$2836,$3021)|0);
         $3027 = ($3026|0)==(0);
         if ($3027) {
          label = 241;
          break L321;
         }
        }
       } while(0);
       $2994 = $2988 | $2991;
       $2995 = ($2994|0)==(0);
       if ($2995) {
        break;
       } else {
        $bb_check$sroa$0$8314 = $2988;$bb_check$sroa$1$8313 = $2991;
       }
      }
     }
     $3069 = HEAP32[$2866>>2]|0;
     $3070 = HEAP32[$2826>>2]|0;
     $3071 = $3070 ^ $3069;
     HEAP32[$2826>>2] = $3071;
     $3072 = HEAP32[$2870>>2]|0;
     $3073 = HEAP32[$2827>>2]|0;
     $3074 = $3073 ^ $3072;
     HEAP32[$2827>>2] = $3074;
     $3075 = HEAP32[$2874>>2]|0;
     $3076 = HEAP32[$2828>>2]|0;
     $3077 = $3076 ^ $3075;
     HEAP32[$2828>>2] = $3077;
     $3078 = HEAP32[$2878>>2]|0;
     $3079 = HEAP32[$2829>>2]|0;
     $3080 = $3079 ^ $3078;
     HEAP32[$2829>>2] = $3080;
     $3081 = HEAP32[$2882>>2]|0;
     $3082 = HEAP32[$2830>>2]|0;
     $3083 = $3082 ^ $3081;
     HEAP32[$2830>>2] = $3083;
     $3084 = HEAP32[$2886>>2]|0;
     $3085 = HEAP32[$2831>>2]|0;
     $3086 = $3085 ^ $3084;
     HEAP32[$2831>>2] = $3086;
     $3087 = HEAP32[$2890>>2]|0;
     $3088 = HEAP32[$2832>>2]|0;
     $3089 = $3088 ^ $3087;
     HEAP32[$2832>>2] = $3089;
     $3090 = HEAP32[$2894>>2]|0;
     $3091 = HEAP32[$2833>>2]|0;
     $3092 = $3091 ^ $3090;
     HEAP32[$2833>>2] = $3092;
     $3093 = HEAP32[$2898>>2]|0;
     $3094 = HEAP32[$2834>>2]|0;
     $3095 = $3094 ^ $3093;
     HEAP32[$2834>>2] = $3095;
     $3096 = HEAP32[$2837>>2]|0;
     $3097 = HEAP32[$5>>2]|0;
     $3098 = $3097 ^ $3096;
     HEAP32[$5>>2] = $3098;
     $3099 = HEAP32[$2527>>2]|0;
     $3100 = $3099 ^ $3096;
     HEAP32[$2527>>2] = $3100;
    }
    $3101 = ($2838|0)==($ubb$0358|0);
    if ($3101) {
     break L319;
    } else {
     $ubb$0358 = $2839;
    }
   }
   if ((label|0) == 229) {
    $2942 = HEAP32[$2866>>2]|0;
    $2943 = HEAP32[$2826>>2]|0;
    $2944 = $2943 ^ $2942;
    HEAP32[$2826>>2] = $2944;
    $2945 = HEAP32[$2870>>2]|0;
    $2946 = HEAP32[$2827>>2]|0;
    $2947 = $2946 ^ $2945;
    HEAP32[$2827>>2] = $2947;
    $2948 = HEAP32[$2874>>2]|0;
    $2949 = HEAP32[$2828>>2]|0;
    $2950 = $2949 ^ $2948;
    HEAP32[$2828>>2] = $2950;
    $2951 = HEAP32[$2878>>2]|0;
    $2952 = HEAP32[$2829>>2]|0;
    $2953 = $2952 ^ $2951;
    HEAP32[$2829>>2] = $2953;
    $2954 = HEAP32[$2882>>2]|0;
    $2955 = HEAP32[$2830>>2]|0;
    $2956 = $2955 ^ $2954;
    HEAP32[$2830>>2] = $2956;
    $2957 = HEAP32[$2886>>2]|0;
    $2958 = HEAP32[$2831>>2]|0;
    $2959 = $2958 ^ $2957;
    HEAP32[$2831>>2] = $2959;
    $2960 = HEAP32[$2890>>2]|0;
    $2961 = HEAP32[$2832>>2]|0;
    $2962 = $2961 ^ $2960;
    HEAP32[$2832>>2] = $2962;
    $2963 = HEAP32[$2894>>2]|0;
    $2964 = HEAP32[$2833>>2]|0;
    $2965 = $2964 ^ $2963;
    HEAP32[$2833>>2] = $2965;
    $2966 = HEAP32[$2898>>2]|0;
    $2967 = HEAP32[$2834>>2]|0;
    $2968 = $2967 ^ $2966;
    HEAP32[$2834>>2] = $2968;
    $2969 = HEAP32[$2837>>2]|0;
    $2970 = HEAP32[$5>>2]|0;
    $2971 = $2970 ^ $2969;
    HEAP32[$5>>2] = $2971;
    $2972 = HEAP32[$2527>>2]|0;
    $2973 = $2972 ^ $2969;
    HEAP32[$2527>>2] = $2973;
    $2974 = $2836 << 7;
    $2975 = ((($ptree) + ($2903)|0) + 512|0);
    $2976 = HEAP8[$2975>>0]|0;
    $2977 = $2976 << 24 >> 24;
    $2978 = (0 - ($2977))|0;
    $2979 = $2978 << 19;
    $2980 = $2974 | $2903;
    $2981 = $2980 | $2979;
    $2982 = $2981 | 147456;
    $$0 = $2982;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 241) {
    $3028 = HEAP32[$2866>>2]|0;
    $3029 = HEAP32[$2826>>2]|0;
    $3030 = $3029 ^ $3028;
    HEAP32[$2826>>2] = $3030;
    $3031 = HEAP32[$2870>>2]|0;
    $3032 = HEAP32[$2827>>2]|0;
    $3033 = $3032 ^ $3031;
    HEAP32[$2827>>2] = $3033;
    $3034 = HEAP32[$2874>>2]|0;
    $3035 = HEAP32[$2828>>2]|0;
    $3036 = $3035 ^ $3034;
    HEAP32[$2828>>2] = $3036;
    $3037 = HEAP32[$2878>>2]|0;
    $3038 = HEAP32[$2829>>2]|0;
    $3039 = $3038 ^ $3037;
    HEAP32[$2829>>2] = $3039;
    $3040 = HEAP32[$2882>>2]|0;
    $3041 = HEAP32[$2830>>2]|0;
    $3042 = $3041 ^ $3040;
    HEAP32[$2830>>2] = $3042;
    $3043 = HEAP32[$2886>>2]|0;
    $3044 = HEAP32[$2831>>2]|0;
    $3045 = $3044 ^ $3043;
    HEAP32[$2831>>2] = $3045;
    $3046 = HEAP32[$2890>>2]|0;
    $3047 = HEAP32[$2832>>2]|0;
    $3048 = $3047 ^ $3046;
    HEAP32[$2832>>2] = $3048;
    $3049 = HEAP32[$2894>>2]|0;
    $3050 = HEAP32[$2833>>2]|0;
    $3051 = $3050 ^ $3049;
    HEAP32[$2833>>2] = $3051;
    $3052 = HEAP32[$2898>>2]|0;
    $3053 = HEAP32[$2834>>2]|0;
    $3054 = $3053 ^ $3052;
    HEAP32[$2834>>2] = $3054;
    $3055 = HEAP32[$2837>>2]|0;
    $3056 = HEAP32[$5>>2]|0;
    $3057 = $3056 ^ $3055;
    HEAP32[$5>>2] = $3057;
    $3058 = HEAP32[$2527>>2]|0;
    $3059 = $3058 ^ $3055;
    HEAP32[$2527>>2] = $3059;
    $3060 = $2836 << 7;
    $3061 = ((($ptree) + ($2985)|0) + 512|0);
    $3062 = HEAP8[$3061>>0]|0;
    $3063 = $3062 << 24 >> 24;
    $3064 = (0 - ($3063))|0;
    $3065 = $3064 << 19;
    $3066 = $3060 | $2985;
    $3067 = $3066 | $3065;
    $3068 = $3067 | 131072;
    $$0 = $3068;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $3102 = $2531 & 262143;
 $3103 = $2536 | $3102;
 $3104 = ($3103|0)==(0);
 L364: do {
  if (!($3104)) {
   $3105 = (($ptree) + 32|0);
   $3106 = (($ptree) + 36|0);
   $3107 = (($ptree) + 40|0);
   $3108 = (($ptree) + 44|0);
   $3109 = (($ptree) + 48|0);
   $3110 = (($ptree) + 52|0);
   $3111 = (($ptree) + 56|0);
   $3112 = (($ptree) + 60|0);
   $3113 = (($ptree) + 64|0);
   $3114 = (($ptree) + 593|0);
   $bb$sroa$1$10301 = $3102;$bb$sroa$2$10302 = $2536;
   L366: while(1) {
    $3115 = (_first_one12($bb$sroa$1$10301,$bb$sroa$2$10302)|0);
    $3116 = ((34156304 + (($3115*12)|0)|0) + 4|0);
    $3117 = HEAP32[$3116>>2]|0;
    $3118 = $3117 ^ $bb$sroa$1$10301;
    $3119 = ((34156304 + (($3115*12)|0)|0) + 8|0);
    $3120 = HEAP32[$3119>>2]|0;
    $3121 = $3120 ^ $bb$sroa$2$10302;
    $3122 = ((33574048 + (($3115*12)|0)|0) + 4|0);
    $3123 = HEAP32[$3122>>2]|0;
    $3124 = $3123 & $364;
    $3125 = HEAP8[$$pre1002>>0]|0;
    $3126 = $3125&255;
    $3127 = ((33576976 + (($3126*12)|0)|0) + 4|0);
    $3128 = HEAP32[$3127>>2]|0;
    $3129 = $3124 & $3128;
    $3130 = ((33574048 + (($3115*12)|0)|0) + 8|0);
    $3131 = HEAP32[$3130>>2]|0;
    $3132 = $3131 & $366;
    $3133 = ((33576976 + (($3126*12)|0)|0) + 8|0);
    $3134 = HEAP32[$3133>>2]|0;
    $3135 = $3132 & $3134;
    $3136 = $3135 | $3129;
    $3137 = ($3136|0)==(0);
    if (!($3137)) {
     $3138 = HEAP32[$2527>>2]|0;
     $3139 = $3138 ^ $3117;
     HEAP32[$2527>>2] = $3139;
     $3140 = HEAP32[$2532>>2]|0;
     $3141 = $3140 ^ $3120;
     HEAP32[$2532>>2] = $3141;
     $3142 = HEAP32[$5>>2]|0;
     $3143 = $3142 ^ $3117;
     HEAP32[$5>>2] = $3143;
     $3144 = HEAP32[$10>>2]|0;
     $3145 = $3144 ^ $3120;
     HEAP32[$10>>2] = $3145;
     $3146 = (34157280 + (($3115*12)|0)|0);
     $3147 = HEAP32[$3146>>2]|0;
     $3148 = HEAP32[$3105>>2]|0;
     $3149 = $3148 ^ $3147;
     HEAP32[$3105>>2] = $3149;
     $3150 = ((34157280 + (($3115*12)|0)|0) + 4|0);
     $3151 = HEAP32[$3150>>2]|0;
     $3152 = HEAP32[$3106>>2]|0;
     $3153 = $3152 ^ $3151;
     HEAP32[$3106>>2] = $3153;
     $3154 = ((34157280 + (($3115*12)|0)|0) + 8|0);
     $3155 = HEAP32[$3154>>2]|0;
     $3156 = HEAP32[$3107>>2]|0;
     $3157 = $3156 ^ $3155;
     HEAP32[$3107>>2] = $3157;
     $3158 = (34158256 + (($3115*12)|0)|0);
     $3159 = HEAP32[$3158>>2]|0;
     $3160 = HEAP32[$3108>>2]|0;
     $3161 = $3160 ^ $3159;
     HEAP32[$3108>>2] = $3161;
     $3162 = ((34158256 + (($3115*12)|0)|0) + 4|0);
     $3163 = HEAP32[$3162>>2]|0;
     $3164 = HEAP32[$3109>>2]|0;
     $3165 = $3164 ^ $3163;
     HEAP32[$3109>>2] = $3165;
     $3166 = ((34158256 + (($3115*12)|0)|0) + 8|0);
     $3167 = HEAP32[$3166>>2]|0;
     $3168 = HEAP32[$3110>>2]|0;
     $3169 = $3168 ^ $3167;
     HEAP32[$3110>>2] = $3169;
     $3170 = (34159232 + (($3115*12)|0)|0);
     $3171 = HEAP32[$3170>>2]|0;
     $3172 = HEAP32[$3111>>2]|0;
     $3173 = $3172 ^ $3171;
     HEAP32[$3111>>2] = $3173;
     $3174 = ((34159232 + (($3115*12)|0)|0) + 4|0);
     $3175 = HEAP32[$3174>>2]|0;
     $3176 = HEAP32[$3112>>2]|0;
     $3177 = $3176 ^ $3175;
     HEAP32[$3112>>2] = $3177;
     $3178 = ((34159232 + (($3115*12)|0)|0) + 8|0);
     $3179 = HEAP32[$3178>>2]|0;
     $3180 = HEAP32[$3113>>2]|0;
     $3181 = $3180 ^ $3179;
     HEAP32[$3113>>2] = $3181;
     $bb_check$sroa$1$9 = $3129;$bb_check$sroa$2$7 = $3135;
     while(1) {
      $3182 = (_first_one12($bb_check$sroa$1$9,$bb_check$sroa$2$7)|0);
      $3183 = ((34156304 + (($3182*12)|0)|0) + 4|0);
      $3184 = HEAP32[$3183>>2]|0;
      $3185 = $3184 ^ $bb_check$sroa$1$9;
      $3186 = ((34156304 + (($3182*12)|0)|0) + 8|0);
      $3187 = HEAP32[$3186>>2]|0;
      $3188 = $3187 ^ $bb_check$sroa$2$7;
      $3189 = (_is_white_attacked($ptree,$3182)|0);
      $3190 = ($3189|0)==(0);
      do {
       if (!($3190)) {
        $3191 = (33574048 + (($3182*12)|0)|0);
        $3192 = HEAP32[$3191>>2]|0;
        $3193 = ((33574048 + (($3182*12)|0)|0) + 4|0);
        $3194 = HEAP32[$3193>>2]|0;
        $3195 = ((33574048 + (($3182*12)|0)|0) + 8|0);
        $3196 = HEAP32[$3195>>2]|0;
        $3197 = (_can_w_king_escape($ptree,$3182,$3192,$3194,$3196)|0);
        $3198 = ($3197|0)==(0);
        if (!($3198)) {
         break;
        }
        $3199 = HEAP8[$$pre1002>>0]|0;
        $3200 = $3199&255;
        $3201 = ((220518304 + (($3200*81)|0)|0) + ($3115)|0);
        $3202 = HEAP8[$3201>>0]|0;
        $3203 = $3202&255;
        $3204 = ($3202<<24>>24)==(0);
        do {
         if ($3204) {
          label = 253;
         } else {
          $3205 = ((220518304 + (($3200*81)|0)|0) + ($3182)|0);
          $3206 = HEAP8[$3205>>0]|0;
          $3207 = ($3202<<24>>24)==($3206<<24>>24);
          if ($3207) {
           label = 253;
           break;
          }
          $3208 = (_is_pinned_on_white_king($ptree,$3115,$3203)|0);
          $3209 = ($3208|0)==(0);
          if ($3209) {
           label = 253;
          }
         }
        } while(0);
        if ((label|0) == 253) {
         label = 0;
         $3210 = (_can_w_piece_capture($ptree,$3182)|0);
         $3211 = ($3210|0)==(0);
         if (!($3211)) {
          break;
         }
        }
        $3212 = HEAP8[$3114>>0]|0;
        $3213 = $3212&255;
        $3214 = ((220518304 + (($3213*81)|0)|0) + ($3115)|0);
        $3215 = HEAP8[$3214>>0]|0;
        $3216 = $3215&255;
        $3217 = ($3215<<24>>24)==(0);
        if ($3217) {
         break L366;
        }
        $3218 = ((220518304 + (($3213*81)|0)|0) + ($3182)|0);
        $3219 = HEAP8[$3218>>0]|0;
        $3220 = ($3215<<24>>24)==($3219<<24>>24);
        if ($3220) {
         break L366;
        }
        $3221 = (_is_pinned_on_black_king($ptree,$3115,$3216)|0);
        $3222 = ($3221|0)==(0);
        if ($3222) {
         break L366;
        }
       }
      } while(0);
      $3269 = $3188 | $3185;
      $3270 = ($3269|0)==(0);
      if ($3270) {
       break;
      } else {
       $bb_check$sroa$1$9 = $3185;$bb_check$sroa$2$7 = $3188;
      }
     }
     $3271 = HEAP32[$3146>>2]|0;
     $3272 = HEAP32[$3105>>2]|0;
     $3273 = $3272 ^ $3271;
     HEAP32[$3105>>2] = $3273;
     $3274 = HEAP32[$3150>>2]|0;
     $3275 = HEAP32[$3106>>2]|0;
     $3276 = $3275 ^ $3274;
     HEAP32[$3106>>2] = $3276;
     $3277 = HEAP32[$3154>>2]|0;
     $3278 = HEAP32[$3107>>2]|0;
     $3279 = $3278 ^ $3277;
     HEAP32[$3107>>2] = $3279;
     $3280 = HEAP32[$3158>>2]|0;
     $3281 = HEAP32[$3108>>2]|0;
     $3282 = $3281 ^ $3280;
     HEAP32[$3108>>2] = $3282;
     $3283 = HEAP32[$3162>>2]|0;
     $3284 = HEAP32[$3109>>2]|0;
     $3285 = $3284 ^ $3283;
     HEAP32[$3109>>2] = $3285;
     $3286 = HEAP32[$3166>>2]|0;
     $3287 = HEAP32[$3110>>2]|0;
     $3288 = $3287 ^ $3286;
     HEAP32[$3110>>2] = $3288;
     $3289 = HEAP32[$3170>>2]|0;
     $3290 = HEAP32[$3111>>2]|0;
     $3291 = $3290 ^ $3289;
     HEAP32[$3111>>2] = $3291;
     $3292 = HEAP32[$3174>>2]|0;
     $3293 = HEAP32[$3112>>2]|0;
     $3294 = $3293 ^ $3292;
     HEAP32[$3112>>2] = $3294;
     $3295 = HEAP32[$3178>>2]|0;
     $3296 = HEAP32[$3113>>2]|0;
     $3297 = $3296 ^ $3295;
     HEAP32[$3113>>2] = $3297;
     $3298 = HEAP32[$3116>>2]|0;
     $3299 = HEAP32[$5>>2]|0;
     $3300 = $3299 ^ $3298;
     HEAP32[$5>>2] = $3300;
     $3301 = HEAP32[$3119>>2]|0;
     $3302 = HEAP32[$10>>2]|0;
     $3303 = $3302 ^ $3301;
     HEAP32[$10>>2] = $3303;
     $3304 = HEAP32[$2527>>2]|0;
     $3305 = $3304 ^ $3298;
     HEAP32[$2527>>2] = $3305;
     $3306 = HEAP32[$2532>>2]|0;
     $3307 = $3306 ^ $3301;
     HEAP32[$2532>>2] = $3307;
    }
    $3308 = $3121 | $3118;
    $3309 = ($3308|0)==(0);
    if ($3309) {
     break L364;
    } else {
     $bb$sroa$1$10301 = $3118;$bb$sroa$2$10302 = $3121;
    }
   }
   $3223 = HEAP32[$3146>>2]|0;
   $3224 = HEAP32[$3105>>2]|0;
   $3225 = $3224 ^ $3223;
   HEAP32[$3105>>2] = $3225;
   $3226 = HEAP32[$3150>>2]|0;
   $3227 = HEAP32[$3106>>2]|0;
   $3228 = $3227 ^ $3226;
   HEAP32[$3106>>2] = $3228;
   $3229 = HEAP32[$3154>>2]|0;
   $3230 = HEAP32[$3107>>2]|0;
   $3231 = $3230 ^ $3229;
   HEAP32[$3107>>2] = $3231;
   $3232 = HEAP32[$3158>>2]|0;
   $3233 = HEAP32[$3108>>2]|0;
   $3234 = $3233 ^ $3232;
   HEAP32[$3108>>2] = $3234;
   $3235 = HEAP32[$3162>>2]|0;
   $3236 = HEAP32[$3109>>2]|0;
   $3237 = $3236 ^ $3235;
   HEAP32[$3109>>2] = $3237;
   $3238 = HEAP32[$3166>>2]|0;
   $3239 = HEAP32[$3110>>2]|0;
   $3240 = $3239 ^ $3238;
   HEAP32[$3110>>2] = $3240;
   $3241 = HEAP32[$3170>>2]|0;
   $3242 = HEAP32[$3111>>2]|0;
   $3243 = $3242 ^ $3241;
   HEAP32[$3111>>2] = $3243;
   $3244 = HEAP32[$3174>>2]|0;
   $3245 = HEAP32[$3112>>2]|0;
   $3246 = $3245 ^ $3244;
   HEAP32[$3112>>2] = $3246;
   $3247 = HEAP32[$3178>>2]|0;
   $3248 = HEAP32[$3113>>2]|0;
   $3249 = $3248 ^ $3247;
   HEAP32[$3113>>2] = $3249;
   $3250 = HEAP32[$3116>>2]|0;
   $3251 = HEAP32[$5>>2]|0;
   $3252 = $3251 ^ $3250;
   HEAP32[$5>>2] = $3252;
   $3253 = HEAP32[$3119>>2]|0;
   $3254 = HEAP32[$10>>2]|0;
   $3255 = $3254 ^ $3253;
   HEAP32[$10>>2] = $3255;
   $3256 = HEAP32[$2527>>2]|0;
   $3257 = $3256 ^ $3250;
   HEAP32[$2527>>2] = $3257;
   $3258 = HEAP32[$2532>>2]|0;
   $3259 = $3258 ^ $3253;
   HEAP32[$2532>>2] = $3259;
   $3260 = $3115 << 7;
   $3261 = ((($ptree) + ($3182)|0) + 512|0);
   $3262 = HEAP8[$3261>>0]|0;
   $3263 = $3262 << 24 >> 24;
   $3264 = (0 - ($3263))|0;
   $3265 = $3264 << 19;
   $3266 = $3260 | $3182;
   $3267 = $3266 | $3265;
   $3268 = $3267 | 131072;
   $$0 = $3268;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $3310 = (($ptree) + 212|0);
 $3311 = HEAP32[$3310>>2]|0;
 $3312 = HEAP8[$$pre1002>>0]|0;
 $3313 = $3312&255;
 $3314 = ((221102544 + (($3313*48)|0)|0) + 24|0);
 $3315 = HEAP32[$3314>>2]|0;
 $3316 = $3315 & $3311;
 $3317 = (($ptree) + 216|0);
 $3318 = HEAP32[$3317>>2]|0;
 $3319 = ((221102544 + (($3313*48)|0)|0) + 28|0);
 $3320 = HEAP32[$3319>>2]|0;
 $3321 = $3320 & $3318;
 $3322 = (($ptree) + 220|0);
 $3323 = HEAP32[$3322>>2]|0;
 $3324 = ((221102544 + (($3313*48)|0)|0) + 32|0);
 $3325 = HEAP32[$3324>>2]|0;
 $3326 = $3325 & $3323;
 $3327 = $3321 | $3316;
 $3328 = $3327 | $3326;
 $3329 = ($3328|0)==(0);
 do {
  if ($3329) {
   $3715 = $3312;
  } else {
   $3330 = (($ptree) + 32|0);
   $3331 = (($ptree) + 36|0);
   $3332 = (($ptree) + 40|0);
   $3333 = (($ptree) + 44|0);
   $3334 = (($ptree) + 48|0);
   $3335 = (($ptree) + 52|0);
   $3336 = (($ptree) + 56|0);
   $3337 = (($ptree) + 60|0);
   $3338 = (($ptree) + 64|0);
   $3339 = (($ptree) + 593|0);
   $bb$sroa$0$11271 = $3316;$bb$sroa$1$11272 = $3321;$bb$sroa$2$11273 = $3326;
   L391: while(1) {
    $3340 = (_first_one012($bb$sroa$0$11271,$bb$sroa$1$11272,$bb$sroa$2$11273)|0);
    $3341 = (34156304 + (($3340*12)|0)|0);
    $3342 = HEAP32[$3341>>2]|0;
    $3343 = $3342 ^ $bb$sroa$0$11271;
    $3344 = ((34156304 + (($3340*12)|0)|0) + 4|0);
    $3345 = HEAP32[$3344>>2]|0;
    $3346 = $3345 ^ $bb$sroa$1$11272;
    $3347 = ((34156304 + (($3340*12)|0)|0) + 8|0);
    $3348 = HEAP32[$3347>>2]|0;
    $3349 = $3348 ^ $bb$sroa$2$11273;
    $3350 = (33573072 + (($3340*12)|0)|0);
    $3351 = HEAP32[$3350>>2]|0;
    $3352 = $3351 & $362;
    $3353 = HEAP8[$$pre1002>>0]|0;
    $3354 = $3353&255;
    $3355 = (33577952 + (($3354*12)|0)|0);
    $3356 = HEAP32[$3355>>2]|0;
    $3357 = $3356 & $3352;
    $3358 = ($3357|0)==(0);
    do {
     if ($3358) {
      $3525 = ((33573072 + (($3340*12)|0)|0) + 4|0);
      $3526 = HEAP32[$3525>>2]|0;
      $3527 = $3526 & $364;
      $3528 = ((33573072 + (($3340*12)|0)|0) + 8|0);
      $3529 = HEAP32[$3528>>2]|0;
      $3530 = $3529 & $366;
      $3531 = (33576000 + (($3354*12)|0)|0);
      $3532 = HEAP32[$3531>>2]|0;
      $3533 = $3532 & $3352;
      $3534 = ((33576000 + (($3354*12)|0)|0) + 4|0);
      $3535 = HEAP32[$3534>>2]|0;
      $3536 = $3527 & $3535;
      $3537 = ((33576000 + (($3354*12)|0)|0) + 8|0);
      $3538 = HEAP32[$3537>>2]|0;
      $3539 = $3530 & $3538;
      $3540 = $3536 | $3533;
      $3541 = $3540 | $3539;
      $3542 = ($3541|0)==(0);
      if ($3542) {
       break;
      }
      $3543 = HEAP32[$3317>>2]|0;
      $3544 = $3543 ^ $3345;
      HEAP32[$3317>>2] = $3544;
      $3545 = HEAP32[$3322>>2]|0;
      $3546 = $3545 ^ $3348;
      HEAP32[$3322>>2] = $3546;
      $3547 = HEAP32[$5>>2]|0;
      $3548 = $3547 ^ $3345;
      HEAP32[$5>>2] = $3548;
      $3549 = HEAP32[$10>>2]|0;
      $3550 = $3549 ^ $3348;
      HEAP32[$10>>2] = $3550;
      $3551 = (34157280 + (($3340*12)|0)|0);
      $3552 = HEAP32[$3551>>2]|0;
      $3553 = HEAP32[$3330>>2]|0;
      $3554 = $3553 ^ $3552;
      HEAP32[$3330>>2] = $3554;
      $3555 = ((34157280 + (($3340*12)|0)|0) + 4|0);
      $3556 = HEAP32[$3555>>2]|0;
      $3557 = HEAP32[$3331>>2]|0;
      $3558 = $3557 ^ $3556;
      HEAP32[$3331>>2] = $3558;
      $3559 = ((34157280 + (($3340*12)|0)|0) + 8|0);
      $3560 = HEAP32[$3559>>2]|0;
      $3561 = HEAP32[$3332>>2]|0;
      $3562 = $3561 ^ $3560;
      HEAP32[$3332>>2] = $3562;
      $3563 = (34158256 + (($3340*12)|0)|0);
      $3564 = HEAP32[$3563>>2]|0;
      $3565 = HEAP32[$3333>>2]|0;
      $3566 = $3565 ^ $3564;
      HEAP32[$3333>>2] = $3566;
      $3567 = ((34158256 + (($3340*12)|0)|0) + 4|0);
      $3568 = HEAP32[$3567>>2]|0;
      $3569 = HEAP32[$3334>>2]|0;
      $3570 = $3569 ^ $3568;
      HEAP32[$3334>>2] = $3570;
      $3571 = ((34158256 + (($3340*12)|0)|0) + 8|0);
      $3572 = HEAP32[$3571>>2]|0;
      $3573 = HEAP32[$3335>>2]|0;
      $3574 = $3573 ^ $3572;
      HEAP32[$3335>>2] = $3574;
      $3575 = (34159232 + (($3340*12)|0)|0);
      $3576 = HEAP32[$3575>>2]|0;
      $3577 = HEAP32[$3336>>2]|0;
      $3578 = $3577 ^ $3576;
      HEAP32[$3336>>2] = $3578;
      $3579 = ((34159232 + (($3340*12)|0)|0) + 4|0);
      $3580 = HEAP32[$3579>>2]|0;
      $3581 = HEAP32[$3337>>2]|0;
      $3582 = $3581 ^ $3580;
      HEAP32[$3337>>2] = $3582;
      $3583 = ((34159232 + (($3340*12)|0)|0) + 8|0);
      $3584 = HEAP32[$3583>>2]|0;
      $3585 = HEAP32[$3338>>2]|0;
      $3586 = $3585 ^ $3584;
      HEAP32[$3338>>2] = $3586;
      $bb_check$sroa$0$10 = $3533;$bb_check$sroa$1$10 = $3536;$bb_check$sroa$2$8 = $3539;
      while(1) {
       $3587 = (_first_one012($bb_check$sroa$0$10,$bb_check$sroa$1$10,$bb_check$sroa$2$8)|0);
       $3588 = (34156304 + (($3587*12)|0)|0);
       $3589 = HEAP32[$3588>>2]|0;
       $3590 = $3589 ^ $bb_check$sroa$0$10;
       $3591 = ((34156304 + (($3587*12)|0)|0) + 4|0);
       $3592 = HEAP32[$3591>>2]|0;
       $3593 = $3592 ^ $bb_check$sroa$1$10;
       $3594 = ((34156304 + (($3587*12)|0)|0) + 8|0);
       $3595 = HEAP32[$3594>>2]|0;
       $3596 = $3595 ^ $bb_check$sroa$2$8;
       $3597 = (_can_w_king_escape($ptree,$3587,0,0,0)|0);
       $3598 = ($3597|0)==(0);
       do {
        if ($3598) {
         $3599 = HEAP8[$$pre1002>>0]|0;
         $3600 = $3599&255;
         $3601 = ((220518304 + (($3600*81)|0)|0) + ($3340)|0);
         $3602 = HEAP8[$3601>>0]|0;
         $3603 = $3602&255;
         $3604 = ($3602<<24>>24)==(0);
         do {
          if ($3604) {
           label = 283;
          } else {
           $3605 = ((220518304 + (($3600*81)|0)|0) + ($3587)|0);
           $3606 = HEAP8[$3605>>0]|0;
           $3607 = ($3602<<24>>24)==($3606<<24>>24);
           if ($3607) {
            label = 283;
            break;
           }
           $3608 = (_is_pinned_on_white_king($ptree,$3340,$3603)|0);
           $3609 = ($3608|0)==(0);
           if ($3609) {
            label = 283;
           }
          }
         } while(0);
         if ((label|0) == 283) {
          label = 0;
          $3610 = (_can_w_piece_capture($ptree,$3587)|0);
          $3611 = ($3610|0)==(0);
          if (!($3611)) {
           break;
          }
         }
         $3612 = HEAP8[$3339>>0]|0;
         $3613 = $3612&255;
         $3614 = ((220518304 + (($3613*81)|0)|0) + ($3340)|0);
         $3615 = HEAP8[$3614>>0]|0;
         $3616 = $3615&255;
         $3617 = ($3615<<24>>24)==(0);
         if ($3617) {
          label = 287;
          break L391;
         }
         $3618 = ((220518304 + (($3613*81)|0)|0) + ($3587)|0);
         $3619 = HEAP8[$3618>>0]|0;
         $3620 = ($3615<<24>>24)==($3619<<24>>24);
         if ($3620) {
          label = 287;
          break L391;
         }
         $3621 = (_is_pinned_on_black_king($ptree,$3340,$3616)|0);
         $3622 = ($3621|0)==(0);
         if ($3622) {
          label = 287;
          break L391;
         }
        }
       } while(0);
       $3669 = $3593 | $3590;
       $3670 = $3669 | $3596;
       $3671 = ($3670|0)==(0);
       if ($3671) {
        break;
       } else {
        $bb_check$sroa$0$10 = $3590;$bb_check$sroa$1$10 = $3593;$bb_check$sroa$2$8 = $3596;
       }
      }
      $3672 = HEAP32[$3551>>2]|0;
      $3673 = HEAP32[$3330>>2]|0;
      $3674 = $3673 ^ $3672;
      HEAP32[$3330>>2] = $3674;
      $3675 = HEAP32[$3555>>2]|0;
      $3676 = HEAP32[$3331>>2]|0;
      $3677 = $3676 ^ $3675;
      HEAP32[$3331>>2] = $3677;
      $3678 = HEAP32[$3559>>2]|0;
      $3679 = HEAP32[$3332>>2]|0;
      $3680 = $3679 ^ $3678;
      HEAP32[$3332>>2] = $3680;
      $3681 = HEAP32[$3563>>2]|0;
      $3682 = HEAP32[$3333>>2]|0;
      $3683 = $3682 ^ $3681;
      HEAP32[$3333>>2] = $3683;
      $3684 = HEAP32[$3567>>2]|0;
      $3685 = HEAP32[$3334>>2]|0;
      $3686 = $3685 ^ $3684;
      HEAP32[$3334>>2] = $3686;
      $3687 = HEAP32[$3571>>2]|0;
      $3688 = HEAP32[$3335>>2]|0;
      $3689 = $3688 ^ $3687;
      HEAP32[$3335>>2] = $3689;
      $3690 = HEAP32[$3575>>2]|0;
      $3691 = HEAP32[$3336>>2]|0;
      $3692 = $3691 ^ $3690;
      HEAP32[$3336>>2] = $3692;
      $3693 = HEAP32[$3579>>2]|0;
      $3694 = HEAP32[$3337>>2]|0;
      $3695 = $3694 ^ $3693;
      HEAP32[$3337>>2] = $3695;
      $3696 = HEAP32[$3583>>2]|0;
      $3697 = HEAP32[$3338>>2]|0;
      $3698 = $3697 ^ $3696;
      HEAP32[$3338>>2] = $3698;
      $3699 = HEAP32[$3344>>2]|0;
      $3700 = HEAP32[$5>>2]|0;
      $3701 = $3700 ^ $3699;
      HEAP32[$5>>2] = $3701;
      $3702 = HEAP32[$3347>>2]|0;
      $3703 = HEAP32[$10>>2]|0;
      $3704 = $3703 ^ $3702;
      HEAP32[$10>>2] = $3704;
      $3705 = HEAP32[$3317>>2]|0;
      $3706 = $3705 ^ $3699;
      HEAP32[$3317>>2] = $3706;
      $3707 = HEAP32[$3322>>2]|0;
      $3708 = $3707 ^ $3702;
      HEAP32[$3322>>2] = $3708;
     } else {
      $3359 = HEAP32[$3310>>2]|0;
      $3360 = $3359 ^ $3342;
      HEAP32[$3310>>2] = $3360;
      $3361 = HEAP32[$3317>>2]|0;
      $3362 = $3361 ^ $3345;
      HEAP32[$3317>>2] = $3362;
      $3363 = HEAP32[$0>>2]|0;
      $3364 = $3363 ^ $3342;
      HEAP32[$0>>2] = $3364;
      $3365 = HEAP32[$5>>2]|0;
      $3366 = $3365 ^ $3345;
      HEAP32[$5>>2] = $3366;
      $3367 = (34157280 + (($3340*12)|0)|0);
      $3368 = HEAP32[$3367>>2]|0;
      $3369 = HEAP32[$3330>>2]|0;
      $3370 = $3369 ^ $3368;
      HEAP32[$3330>>2] = $3370;
      $3371 = ((34157280 + (($3340*12)|0)|0) + 4|0);
      $3372 = HEAP32[$3371>>2]|0;
      $3373 = HEAP32[$3331>>2]|0;
      $3374 = $3373 ^ $3372;
      HEAP32[$3331>>2] = $3374;
      $3375 = ((34157280 + (($3340*12)|0)|0) + 8|0);
      $3376 = HEAP32[$3375>>2]|0;
      $3377 = HEAP32[$3332>>2]|0;
      $3378 = $3377 ^ $3376;
      HEAP32[$3332>>2] = $3378;
      $3379 = (34158256 + (($3340*12)|0)|0);
      $3380 = HEAP32[$3379>>2]|0;
      $3381 = HEAP32[$3333>>2]|0;
      $3382 = $3381 ^ $3380;
      HEAP32[$3333>>2] = $3382;
      $3383 = ((34158256 + (($3340*12)|0)|0) + 4|0);
      $3384 = HEAP32[$3383>>2]|0;
      $3385 = HEAP32[$3334>>2]|0;
      $3386 = $3385 ^ $3384;
      HEAP32[$3334>>2] = $3386;
      $3387 = ((34158256 + (($3340*12)|0)|0) + 8|0);
      $3388 = HEAP32[$3387>>2]|0;
      $3389 = HEAP32[$3335>>2]|0;
      $3390 = $3389 ^ $3388;
      HEAP32[$3335>>2] = $3390;
      $3391 = (34159232 + (($3340*12)|0)|0);
      $3392 = HEAP32[$3391>>2]|0;
      $3393 = HEAP32[$3336>>2]|0;
      $3394 = $3393 ^ $3392;
      HEAP32[$3336>>2] = $3394;
      $3395 = ((34159232 + (($3340*12)|0)|0) + 4|0);
      $3396 = HEAP32[$3395>>2]|0;
      $3397 = HEAP32[$3337>>2]|0;
      $3398 = $3397 ^ $3396;
      HEAP32[$3337>>2] = $3398;
      $3399 = ((34159232 + (($3340*12)|0)|0) + 8|0);
      $3400 = HEAP32[$3399>>2]|0;
      $3401 = HEAP32[$3338>>2]|0;
      $3402 = $3401 ^ $3400;
      HEAP32[$3338>>2] = $3402;
      $bb_check$sroa$0$9 = $3357;
      while(1) {
       $3403 = (_last_one0($bb_check$sroa$0$9)|0);
       $3404 = (34156304 + (($3403*12)|0)|0);
       $3405 = HEAP32[$3404>>2]|0;
       $3406 = $3405 ^ $bb_check$sroa$0$9;
       $3407 = (_is_white_attacked($ptree,$3403)|0);
       $3408 = ($3407|0)==(0);
       do {
        if (!($3408)) {
         $3409 = (33575024 + (($3403*12)|0)|0);
         $3410 = HEAP32[$3409>>2]|0;
         $3411 = ((33575024 + (($3403*12)|0)|0) + 4|0);
         $3412 = HEAP32[$3411>>2]|0;
         $3413 = ((33575024 + (($3403*12)|0)|0) + 8|0);
         $3414 = HEAP32[$3413>>2]|0;
         $3415 = (_can_w_king_escape($ptree,$3403,$3410,$3412,$3414)|0);
         $3416 = ($3415|0)==(0);
         if (!($3416)) {
          break;
         }
         $3417 = HEAP8[$$pre1002>>0]|0;
         $3418 = $3417&255;
         $3419 = ((220518304 + (($3418*81)|0)|0) + ($3340)|0);
         $3420 = HEAP8[$3419>>0]|0;
         $3421 = $3420&255;
         $3422 = ($3420<<24>>24)==(0);
         do {
          if ($3422) {
           label = 270;
          } else {
           $3423 = ((220518304 + (($3418*81)|0)|0) + ($3403)|0);
           $3424 = HEAP8[$3423>>0]|0;
           $3425 = ($3420<<24>>24)==($3424<<24>>24);
           if ($3425) {
            label = 270;
            break;
           }
           $3426 = (_is_pinned_on_white_king($ptree,$3340,$3421)|0);
           $3427 = ($3426|0)==(0);
           if ($3427) {
            label = 270;
           }
          }
         } while(0);
         if ((label|0) == 270) {
          label = 0;
          $3428 = (_can_w_piece_capture($ptree,$3403)|0);
          $3429 = ($3428|0)==(0);
          if (!($3429)) {
           break;
          }
         }
         $3430 = HEAP8[$3339>>0]|0;
         $3431 = $3430&255;
         $3432 = ((220518304 + (($3431*81)|0)|0) + ($3340)|0);
         $3433 = HEAP8[$3432>>0]|0;
         $3434 = $3433&255;
         $3435 = ($3433<<24>>24)==(0);
         if ($3435) {
          label = 274;
          break L391;
         }
         $3436 = ((220518304 + (($3431*81)|0)|0) + ($3403)|0);
         $3437 = HEAP8[$3436>>0]|0;
         $3438 = ($3433<<24>>24)==($3437<<24>>24);
         if ($3438) {
          label = 274;
          break L391;
         }
         $3439 = (_is_pinned_on_black_king($ptree,$3340,$3434)|0);
         $3440 = ($3439|0)==(0);
         if ($3440) {
          label = 274;
          break L391;
         }
        }
       } while(0);
       $3487 = ($bb_check$sroa$0$9|0)==($3405|0);
       if ($3487) {
        break;
       } else {
        $bb_check$sroa$0$9 = $3406;
       }
      }
      $3488 = HEAP32[$3367>>2]|0;
      $3489 = HEAP32[$3330>>2]|0;
      $3490 = $3489 ^ $3488;
      HEAP32[$3330>>2] = $3490;
      $3491 = HEAP32[$3371>>2]|0;
      $3492 = HEAP32[$3331>>2]|0;
      $3493 = $3492 ^ $3491;
      HEAP32[$3331>>2] = $3493;
      $3494 = HEAP32[$3375>>2]|0;
      $3495 = HEAP32[$3332>>2]|0;
      $3496 = $3495 ^ $3494;
      HEAP32[$3332>>2] = $3496;
      $3497 = HEAP32[$3379>>2]|0;
      $3498 = HEAP32[$3333>>2]|0;
      $3499 = $3498 ^ $3497;
      HEAP32[$3333>>2] = $3499;
      $3500 = HEAP32[$3383>>2]|0;
      $3501 = HEAP32[$3334>>2]|0;
      $3502 = $3501 ^ $3500;
      HEAP32[$3334>>2] = $3502;
      $3503 = HEAP32[$3387>>2]|0;
      $3504 = HEAP32[$3335>>2]|0;
      $3505 = $3504 ^ $3503;
      HEAP32[$3335>>2] = $3505;
      $3506 = HEAP32[$3391>>2]|0;
      $3507 = HEAP32[$3336>>2]|0;
      $3508 = $3507 ^ $3506;
      HEAP32[$3336>>2] = $3508;
      $3509 = HEAP32[$3395>>2]|0;
      $3510 = HEAP32[$3337>>2]|0;
      $3511 = $3510 ^ $3509;
      HEAP32[$3337>>2] = $3511;
      $3512 = HEAP32[$3399>>2]|0;
      $3513 = HEAP32[$3338>>2]|0;
      $3514 = $3513 ^ $3512;
      HEAP32[$3338>>2] = $3514;
      $3515 = HEAP32[$3341>>2]|0;
      $3516 = HEAP32[$0>>2]|0;
      $3517 = $3516 ^ $3515;
      HEAP32[$0>>2] = $3517;
      $3518 = HEAP32[$3344>>2]|0;
      $3519 = HEAP32[$5>>2]|0;
      $3520 = $3519 ^ $3518;
      HEAP32[$5>>2] = $3520;
      $3521 = HEAP32[$3310>>2]|0;
      $3522 = $3521 ^ $3515;
      HEAP32[$3310>>2] = $3522;
      $3523 = HEAP32[$3317>>2]|0;
      $3524 = $3523 ^ $3518;
      HEAP32[$3317>>2] = $3524;
     }
    } while(0);
    $3709 = $3346 | $3343;
    $3710 = $3709 | $3349;
    $3711 = ($3710|0)==(0);
    if ($3711) {
     label = 291;
     break;
    } else {
     $bb$sroa$0$11271 = $3343;$bb$sroa$1$11272 = $3346;$bb$sroa$2$11273 = $3349;
    }
   }
   if ((label|0) == 274) {
    $3441 = HEAP32[$3367>>2]|0;
    $3442 = HEAP32[$3330>>2]|0;
    $3443 = $3442 ^ $3441;
    HEAP32[$3330>>2] = $3443;
    $3444 = HEAP32[$3371>>2]|0;
    $3445 = HEAP32[$3331>>2]|0;
    $3446 = $3445 ^ $3444;
    HEAP32[$3331>>2] = $3446;
    $3447 = HEAP32[$3375>>2]|0;
    $3448 = HEAP32[$3332>>2]|0;
    $3449 = $3448 ^ $3447;
    HEAP32[$3332>>2] = $3449;
    $3450 = HEAP32[$3379>>2]|0;
    $3451 = HEAP32[$3333>>2]|0;
    $3452 = $3451 ^ $3450;
    HEAP32[$3333>>2] = $3452;
    $3453 = HEAP32[$3383>>2]|0;
    $3454 = HEAP32[$3334>>2]|0;
    $3455 = $3454 ^ $3453;
    HEAP32[$3334>>2] = $3455;
    $3456 = HEAP32[$3387>>2]|0;
    $3457 = HEAP32[$3335>>2]|0;
    $3458 = $3457 ^ $3456;
    HEAP32[$3335>>2] = $3458;
    $3459 = HEAP32[$3391>>2]|0;
    $3460 = HEAP32[$3336>>2]|0;
    $3461 = $3460 ^ $3459;
    HEAP32[$3336>>2] = $3461;
    $3462 = HEAP32[$3395>>2]|0;
    $3463 = HEAP32[$3337>>2]|0;
    $3464 = $3463 ^ $3462;
    HEAP32[$3337>>2] = $3464;
    $3465 = HEAP32[$3399>>2]|0;
    $3466 = HEAP32[$3338>>2]|0;
    $3467 = $3466 ^ $3465;
    HEAP32[$3338>>2] = $3467;
    $3468 = HEAP32[$3341>>2]|0;
    $3469 = HEAP32[$0>>2]|0;
    $3470 = $3469 ^ $3468;
    HEAP32[$0>>2] = $3470;
    $3471 = HEAP32[$3344>>2]|0;
    $3472 = HEAP32[$5>>2]|0;
    $3473 = $3472 ^ $3471;
    HEAP32[$5>>2] = $3473;
    $3474 = HEAP32[$3310>>2]|0;
    $3475 = $3474 ^ $3468;
    HEAP32[$3310>>2] = $3475;
    $3476 = HEAP32[$3317>>2]|0;
    $3477 = $3476 ^ $3471;
    HEAP32[$3317>>2] = $3477;
    $3478 = $3340 << 7;
    $3479 = ((($ptree) + ($3403)|0) + 512|0);
    $3480 = HEAP8[$3479>>0]|0;
    $3481 = $3480 << 24 >> 24;
    $3482 = (0 - ($3481))|0;
    $3483 = $3482 << 19;
    $3484 = $3478 | $3403;
    $3485 = $3484 | $3483;
    $3486 = $3485 | 114688;
    $$0 = $3486;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 287) {
    $3623 = HEAP32[$3551>>2]|0;
    $3624 = HEAP32[$3330>>2]|0;
    $3625 = $3624 ^ $3623;
    HEAP32[$3330>>2] = $3625;
    $3626 = HEAP32[$3555>>2]|0;
    $3627 = HEAP32[$3331>>2]|0;
    $3628 = $3627 ^ $3626;
    HEAP32[$3331>>2] = $3628;
    $3629 = HEAP32[$3559>>2]|0;
    $3630 = HEAP32[$3332>>2]|0;
    $3631 = $3630 ^ $3629;
    HEAP32[$3332>>2] = $3631;
    $3632 = HEAP32[$3563>>2]|0;
    $3633 = HEAP32[$3333>>2]|0;
    $3634 = $3633 ^ $3632;
    HEAP32[$3333>>2] = $3634;
    $3635 = HEAP32[$3567>>2]|0;
    $3636 = HEAP32[$3334>>2]|0;
    $3637 = $3636 ^ $3635;
    HEAP32[$3334>>2] = $3637;
    $3638 = HEAP32[$3571>>2]|0;
    $3639 = HEAP32[$3335>>2]|0;
    $3640 = $3639 ^ $3638;
    HEAP32[$3335>>2] = $3640;
    $3641 = HEAP32[$3575>>2]|0;
    $3642 = HEAP32[$3336>>2]|0;
    $3643 = $3642 ^ $3641;
    HEAP32[$3336>>2] = $3643;
    $3644 = HEAP32[$3579>>2]|0;
    $3645 = HEAP32[$3337>>2]|0;
    $3646 = $3645 ^ $3644;
    HEAP32[$3337>>2] = $3646;
    $3647 = HEAP32[$3583>>2]|0;
    $3648 = HEAP32[$3338>>2]|0;
    $3649 = $3648 ^ $3647;
    HEAP32[$3338>>2] = $3649;
    $3650 = HEAP32[$3344>>2]|0;
    $3651 = HEAP32[$5>>2]|0;
    $3652 = $3651 ^ $3650;
    HEAP32[$5>>2] = $3652;
    $3653 = HEAP32[$3347>>2]|0;
    $3654 = HEAP32[$10>>2]|0;
    $3655 = $3654 ^ $3653;
    HEAP32[$10>>2] = $3655;
    $3656 = HEAP32[$3317>>2]|0;
    $3657 = $3656 ^ $3650;
    HEAP32[$3317>>2] = $3657;
    $3658 = HEAP32[$3322>>2]|0;
    $3659 = $3658 ^ $3653;
    HEAP32[$3322>>2] = $3659;
    $3660 = $3340 << 7;
    $3661 = ((($ptree) + ($3587)|0) + 512|0);
    $3662 = HEAP8[$3661>>0]|0;
    $3663 = $3662 << 24 >> 24;
    $3664 = (0 - ($3663))|0;
    $3665 = $3664 << 19;
    $3666 = $3660 | $3587;
    $3667 = $3666 | $3665;
    $3668 = $3667 | 98304;
    $$0 = $3668;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 291) {
    $$pre990 = HEAP8[$$pre1002>>0]|0;
    $3715 = $$pre990;
    break;
   }
  }
 } while(0);
 $3712 = (($ptree) + 188|0);
 $3713 = HEAP32[$3712>>2]|0;
 $3714 = $3715&255;
 $3716 = ((221102544 + (($3714*48)|0)|0) + 36|0);
 $3717 = HEAP32[$3716>>2]|0;
 $3718 = $3717 & $3713;
 $3719 = (($ptree) + 192|0);
 $3720 = HEAP32[$3719>>2]|0;
 $3721 = ((221102544 + (($3714*48)|0)|0) + 40|0);
 $3722 = HEAP32[$3721>>2]|0;
 $3723 = $3722 & $3720;
 $3724 = (($ptree) + 196|0);
 $3725 = HEAP32[$3724>>2]|0;
 $3726 = ((221102544 + (($3714*48)|0)|0) + 44|0);
 $3727 = HEAP32[$3726>>2]|0;
 $3728 = $3727 & $3725;
 $3729 = $3723 | $3718;
 $3730 = $3729 | $3728;
 $3731 = ($3730|0)==(0);
 do {
  if ($3731) {
   $4076 = $3715;
  } else {
   $3732 = (($ptree) + 32|0);
   $3733 = (($ptree) + 36|0);
   $3734 = (($ptree) + 40|0);
   $3735 = (($ptree) + 44|0);
   $3736 = (($ptree) + 48|0);
   $3737 = (($ptree) + 52|0);
   $3738 = (($ptree) + 56|0);
   $3739 = (($ptree) + 60|0);
   $3740 = (($ptree) + 64|0);
   $3741 = (($ptree) + 593|0);
   $bb$sroa$0$12216 = $3718;$bb$sroa$1$12217 = $3723;$bb$sroa$2$12218 = $3728;
   L436: while(1) {
    $3742 = (_first_one012($bb$sroa$0$12216,$bb$sroa$1$12217,$bb$sroa$2$12218)|0);
    $3743 = (34156304 + (($3742*12)|0)|0);
    $3744 = HEAP32[$3743>>2]|0;
    $3745 = $3744 ^ $bb$sroa$0$12216;
    $3746 = ((34156304 + (($3742*12)|0)|0) + 4|0);
    $3747 = HEAP32[$3746>>2]|0;
    $3748 = $3747 ^ $bb$sroa$1$12217;
    $3749 = ((34156304 + (($3742*12)|0)|0) + 8|0);
    $3750 = HEAP32[$3749>>2]|0;
    $3751 = $3750 ^ $bb$sroa$2$12218;
    $3752 = ((33572424 + ($3742<<3)|0) + 2|0);
    $3753 = HEAP8[$3752>>0]|0;
    $3754 = $3753&255;
    $3755 = ((($ptree) + ($3754<<2)|0) + 32|0);
    $3756 = HEAP32[$3755>>2]|0;
    $3757 = ((33572424 + ($3742<<3)|0) + 3|0);
    $3758 = HEAP8[$3757>>0]|0;
    $3759 = $3758&255;
    $3760 = $3756 >>> $3759;
    $3761 = $3760 & 127;
    $3762 = ((33953152 + (($3742*1536)|0)|0) + (($3761*12)|0)|0);
    $3763 = HEAP32[$3762>>2]|0;
    $3764 = (((33953152 + (($3742*1536)|0)|0) + (($3761*12)|0)|0) + 4|0);
    $3765 = HEAP32[$3764>>2]|0;
    $3766 = (((33953152 + (($3742*1536)|0)|0) + (($3761*12)|0)|0) + 8|0);
    $3767 = HEAP32[$3766>>2]|0;
    $3768 = (34161184 + (($3742*12)|0)|0);
    $3769 = HEAP32[$3768>>2]|0;
    $3770 = ((34161184 + (($3742*12)|0)|0) + 4|0);
    $3771 = HEAP32[$3770>>2]|0;
    $3772 = ((34161184 + (($3742*12)|0)|0) + 8|0);
    $3773 = HEAP32[$3772>>2]|0;
    $3774 = $3763 & $362;
    $3775 = $3774 & $3769;
    $3776 = HEAP8[$$pre1002>>0]|0;
    $3777 = $3776&255;
    $3778 = (($3777) + 9)|0;
    $3779 = (34156304 + (($3778*12)|0)|0);
    $3780 = HEAP32[$3779>>2]|0;
    $3781 = $3780 & $3775;
    $3782 = ((34156304 + (($3778*12)|0)|0) + 4|0);
    $3783 = HEAP32[$3782>>2]|0;
    $3784 = $3765 & $364;
    $3785 = $3784 & $3771;
    $3786 = $3785 & $3783;
    $3787 = ((34156304 + (($3778*12)|0)|0) + 8|0);
    $3788 = HEAP32[$3787>>2]|0;
    $3789 = $3767 & $366;
    $3790 = $3789 & $3773;
    $3791 = $3790 & $3788;
    $3792 = (33577952 + (($3777*12)|0)|0);
    $3793 = HEAP32[$3792>>2]|0;
    $3794 = $3793 & $3775;
    $3795 = $3786 | $3781;
    $3796 = $3795 | $3791;
    $3797 = $3796 | $3794;
    $3798 = ($3797|0)==(0);
    if (!($3798)) {
     $3799 = HEAP32[$3712>>2]|0;
     $3800 = $3799 ^ $3744;
     HEAP32[$3712>>2] = $3800;
     $3801 = HEAP32[$3719>>2]|0;
     $3802 = $3801 ^ $3747;
     HEAP32[$3719>>2] = $3802;
     $3803 = HEAP32[$3724>>2]|0;
     $3804 = $3803 ^ $3750;
     HEAP32[$3724>>2] = $3804;
     $3805 = HEAP32[$0>>2]|0;
     $3806 = $3805 ^ $3744;
     HEAP32[$0>>2] = $3806;
     $3807 = HEAP32[$5>>2]|0;
     $3808 = $3807 ^ $3747;
     HEAP32[$5>>2] = $3808;
     $3809 = HEAP32[$10>>2]|0;
     $3810 = $3809 ^ $3750;
     HEAP32[$10>>2] = $3810;
     $3811 = (34157280 + (($3742*12)|0)|0);
     $3812 = HEAP32[$3811>>2]|0;
     $3813 = HEAP32[$3732>>2]|0;
     $3814 = $3813 ^ $3812;
     HEAP32[$3732>>2] = $3814;
     $3815 = ((34157280 + (($3742*12)|0)|0) + 4|0);
     $3816 = HEAP32[$3815>>2]|0;
     $3817 = HEAP32[$3733>>2]|0;
     $3818 = $3817 ^ $3816;
     HEAP32[$3733>>2] = $3818;
     $3819 = ((34157280 + (($3742*12)|0)|0) + 8|0);
     $3820 = HEAP32[$3819>>2]|0;
     $3821 = HEAP32[$3734>>2]|0;
     $3822 = $3821 ^ $3820;
     HEAP32[$3734>>2] = $3822;
     $3823 = (34158256 + (($3742*12)|0)|0);
     $3824 = HEAP32[$3823>>2]|0;
     $3825 = HEAP32[$3735>>2]|0;
     $3826 = $3825 ^ $3824;
     HEAP32[$3735>>2] = $3826;
     $3827 = ((34158256 + (($3742*12)|0)|0) + 4|0);
     $3828 = HEAP32[$3827>>2]|0;
     $3829 = HEAP32[$3736>>2]|0;
     $3830 = $3829 ^ $3828;
     HEAP32[$3736>>2] = $3830;
     $3831 = ((34158256 + (($3742*12)|0)|0) + 8|0);
     $3832 = HEAP32[$3831>>2]|0;
     $3833 = HEAP32[$3737>>2]|0;
     $3834 = $3833 ^ $3832;
     HEAP32[$3737>>2] = $3834;
     $3835 = (34159232 + (($3742*12)|0)|0);
     $3836 = HEAP32[$3835>>2]|0;
     $3837 = HEAP32[$3738>>2]|0;
     $3838 = $3837 ^ $3836;
     HEAP32[$3738>>2] = $3838;
     $3839 = ((34159232 + (($3742*12)|0)|0) + 4|0);
     $3840 = HEAP32[$3839>>2]|0;
     $3841 = HEAP32[$3739>>2]|0;
     $3842 = $3841 ^ $3840;
     HEAP32[$3739>>2] = $3842;
     $3843 = ((34159232 + (($3742*12)|0)|0) + 8|0);
     $3844 = HEAP32[$3843>>2]|0;
     $3845 = HEAP32[$3740>>2]|0;
     $3846 = $3845 ^ $3844;
     HEAP32[$3740>>2] = $3846;
     $3847 = $3781 & 511;
     $3848 = $3847 | $3786;
     $3849 = $3848 | $3791;
     $3850 = ($3849|0)==(0);
     do {
      if (!($3850)) {
       $3851 = (_is_white_attacked($ptree,$3778)|0);
       $3852 = ($3851|0)==(0);
       if ($3852) {
        break;
       }
       $3854 = (33953152 + (($3778*1536)|0)|0);
       $3855 = HEAP32[$3854>>2]|0;
       $3856 = ((33953152 + (($3778*1536)|0)|0) + 4|0);
       $3857 = HEAP32[$3856>>2]|0;
       $3858 = ((33953152 + (($3778*1536)|0)|0) + 8|0);
       $3859 = HEAP32[$3858>>2]|0;
       $3860 = (_can_w_king_escape($ptree,$3778,$3855,$3857,$3859)|0);
       $3861 = ($3860|0)==(0);
       if (!($3861)) {
        break;
       }
       $3862 = HEAP8[$$pre1002>>0]|0;
       $3863 = $3862&255;
       $3864 = ((220518304 + (($3863*81)|0)|0) + ($3742)|0);
       $3865 = HEAP8[$3864>>0]|0;
       $3866 = $3865&255;
       $3867 = ($3865<<24>>24)==(0);
       do {
        if ($3867) {
         label = 302;
        } else {
         $3868 = ((220518304 + (($3863*81)|0)|0) + ($3778)|0);
         $3869 = HEAP8[$3868>>0]|0;
         $3870 = ($3865<<24>>24)==($3869<<24>>24);
         if ($3870) {
          label = 302;
          break;
         }
         $3871 = (_is_pinned_on_white_king($ptree,$3742,$3866)|0);
         $3872 = ($3871|0)==(0);
         if ($3872) {
          label = 302;
         }
        }
       } while(0);
       if ((label|0) == 302) {
        label = 0;
        $3873 = (_can_w_piece_capture($ptree,$3778)|0);
        $3874 = ($3873|0)==(0);
        if (!($3874)) {
         break;
        }
       }
       $3875 = HEAP8[$3741>>0]|0;
       $3876 = $3875&255;
       $3877 = ((220518304 + (($3876*81)|0)|0) + ($3742)|0);
       $3878 = HEAP8[$3877>>0]|0;
       $3879 = $3878&255;
       $3880 = ($3878<<24>>24)==(0);
       if ($3880) {
        label = 306;
        break L436;
       }
       $3881 = ((220518304 + (($3876*81)|0)|0) + ($3778)|0);
       $3882 = HEAP8[$3881>>0]|0;
       $3883 = ($3878<<24>>24)==($3882<<24>>24);
       if ($3883) {
        label = 306;
        break L436;
       }
       $3884 = (_is_pinned_on_black_king($ptree,$3742,$3879)|0);
       $3885 = ($3884|0)==(0);
       if ($3885) {
        label = 306;
        break L436;
       }
      }
     } while(0);
     $3853 = ($3794|0)==(0);
     if (!($3853)) {
      $bb_check_pro$sroa$0$2167 = $3794;
      while(1) {
       $3937 = (_last_one0($bb_check_pro$sroa$0$2167)|0);
       $3938 = (34156304 + (($3937*12)|0)|0);
       $3939 = HEAP32[$3938>>2]|0;
       $3940 = $3939 ^ $bb_check_pro$sroa$0$2167;
       $3941 = (_is_white_attacked($ptree,$3937)|0);
       $3942 = ($3941|0)==(0);
       do {
        if (!($3942)) {
         $3944 = (33575024 + (($3937*12)|0)|0);
         $3945 = HEAP32[$3944>>2]|0;
         $3946 = ((33575024 + (($3937*12)|0)|0) + 4|0);
         $3947 = HEAP32[$3946>>2]|0;
         $3948 = ((33575024 + (($3937*12)|0)|0) + 8|0);
         $3949 = HEAP32[$3948>>2]|0;
         $3950 = (_can_w_king_escape($ptree,$3937,$3945,$3947,$3949)|0);
         $3951 = ($3950|0)==(0);
         if (!($3951)) {
          break;
         }
         $3952 = HEAP8[$$pre1002>>0]|0;
         $3953 = $3952&255;
         $3954 = ((220518304 + (($3953*81)|0)|0) + ($3742)|0);
         $3955 = HEAP8[$3954>>0]|0;
         $3956 = $3955&255;
         $3957 = ($3955<<24>>24)==(0);
         do {
          if ($3957) {
           label = 313;
          } else {
           $3958 = ((220518304 + (($3953*81)|0)|0) + ($3937)|0);
           $3959 = HEAP8[$3958>>0]|0;
           $3960 = ($3955<<24>>24)==($3959<<24>>24);
           if ($3960) {
            label = 313;
            break;
           }
           $3961 = (_is_pinned_on_white_king($ptree,$3742,$3956)|0);
           $3962 = ($3961|0)==(0);
           if ($3962) {
            label = 313;
           }
          }
         } while(0);
         if ((label|0) == 313) {
          label = 0;
          $3963 = (_can_w_piece_capture($ptree,$3937)|0);
          $3964 = ($3963|0)==(0);
          if (!($3964)) {
           break;
          }
         }
         $3965 = HEAP8[$3741>>0]|0;
         $3966 = $3965&255;
         $3967 = ((220518304 + (($3966*81)|0)|0) + ($3742)|0);
         $3968 = HEAP8[$3967>>0]|0;
         $3969 = $3968&255;
         $3970 = ($3968<<24>>24)==(0);
         if ($3970) {
          label = 317;
          break L436;
         }
         $3971 = ((220518304 + (($3966*81)|0)|0) + ($3937)|0);
         $3972 = HEAP8[$3971>>0]|0;
         $3973 = ($3968<<24>>24)==($3972<<24>>24);
         if ($3973) {
          label = 317;
          break L436;
         }
         $3974 = (_is_pinned_on_black_king($ptree,$3742,$3969)|0);
         $3975 = ($3974|0)==(0);
         if ($3975) {
          label = 317;
          break L436;
         }
        }
       } while(0);
       $3943 = ($3939|0)==($bb_check_pro$sroa$0$2167|0);
       if ($3943) {
        break;
       } else {
        $bb_check_pro$sroa$0$2167 = $3940;
       }
      }
     }
     $4027 = HEAP32[$3811>>2]|0;
     $4028 = HEAP32[$3732>>2]|0;
     $4029 = $4028 ^ $4027;
     HEAP32[$3732>>2] = $4029;
     $4030 = HEAP32[$3815>>2]|0;
     $4031 = HEAP32[$3733>>2]|0;
     $4032 = $4031 ^ $4030;
     HEAP32[$3733>>2] = $4032;
     $4033 = HEAP32[$3819>>2]|0;
     $4034 = HEAP32[$3734>>2]|0;
     $4035 = $4034 ^ $4033;
     HEAP32[$3734>>2] = $4035;
     $4036 = HEAP32[$3823>>2]|0;
     $4037 = HEAP32[$3735>>2]|0;
     $4038 = $4037 ^ $4036;
     HEAP32[$3735>>2] = $4038;
     $4039 = HEAP32[$3827>>2]|0;
     $4040 = HEAP32[$3736>>2]|0;
     $4041 = $4040 ^ $4039;
     HEAP32[$3736>>2] = $4041;
     $4042 = HEAP32[$3831>>2]|0;
     $4043 = HEAP32[$3737>>2]|0;
     $4044 = $4043 ^ $4042;
     HEAP32[$3737>>2] = $4044;
     $4045 = HEAP32[$3835>>2]|0;
     $4046 = HEAP32[$3738>>2]|0;
     $4047 = $4046 ^ $4045;
     HEAP32[$3738>>2] = $4047;
     $4048 = HEAP32[$3839>>2]|0;
     $4049 = HEAP32[$3739>>2]|0;
     $4050 = $4049 ^ $4048;
     HEAP32[$3739>>2] = $4050;
     $4051 = HEAP32[$3843>>2]|0;
     $4052 = HEAP32[$3740>>2]|0;
     $4053 = $4052 ^ $4051;
     HEAP32[$3740>>2] = $4053;
     $4054 = HEAP32[$3743>>2]|0;
     $4055 = HEAP32[$0>>2]|0;
     $4056 = $4055 ^ $4054;
     HEAP32[$0>>2] = $4056;
     $4057 = HEAP32[$3746>>2]|0;
     $4058 = HEAP32[$5>>2]|0;
     $4059 = $4058 ^ $4057;
     HEAP32[$5>>2] = $4059;
     $4060 = HEAP32[$3749>>2]|0;
     $4061 = HEAP32[$10>>2]|0;
     $4062 = $4061 ^ $4060;
     HEAP32[$10>>2] = $4062;
     $4063 = HEAP32[$3712>>2]|0;
     $4064 = $4063 ^ $4054;
     HEAP32[$3712>>2] = $4064;
     $4065 = HEAP32[$3719>>2]|0;
     $4066 = $4065 ^ $4057;
     HEAP32[$3719>>2] = $4066;
     $4067 = HEAP32[$3724>>2]|0;
     $4068 = $4067 ^ $4060;
     HEAP32[$3724>>2] = $4068;
    }
    $4069 = $3748 | $3745;
    $4070 = $4069 | $3751;
    $4071 = ($4070|0)==(0);
    if ($4071) {
     label = 320;
     break;
    } else {
     $bb$sroa$0$12216 = $3745;$bb$sroa$1$12217 = $3748;$bb$sroa$2$12218 = $3751;
    }
   }
   if ((label|0) == 306) {
    $3886 = HEAP32[$3811>>2]|0;
    $3887 = HEAP32[$3732>>2]|0;
    $3888 = $3887 ^ $3886;
    HEAP32[$3732>>2] = $3888;
    $3889 = HEAP32[$3815>>2]|0;
    $3890 = HEAP32[$3733>>2]|0;
    $3891 = $3890 ^ $3889;
    HEAP32[$3733>>2] = $3891;
    $3892 = HEAP32[$3819>>2]|0;
    $3893 = HEAP32[$3734>>2]|0;
    $3894 = $3893 ^ $3892;
    HEAP32[$3734>>2] = $3894;
    $3895 = HEAP32[$3823>>2]|0;
    $3896 = HEAP32[$3735>>2]|0;
    $3897 = $3896 ^ $3895;
    HEAP32[$3735>>2] = $3897;
    $3898 = HEAP32[$3827>>2]|0;
    $3899 = HEAP32[$3736>>2]|0;
    $3900 = $3899 ^ $3898;
    HEAP32[$3736>>2] = $3900;
    $3901 = HEAP32[$3831>>2]|0;
    $3902 = HEAP32[$3737>>2]|0;
    $3903 = $3902 ^ $3901;
    HEAP32[$3737>>2] = $3903;
    $3904 = HEAP32[$3835>>2]|0;
    $3905 = HEAP32[$3738>>2]|0;
    $3906 = $3905 ^ $3904;
    HEAP32[$3738>>2] = $3906;
    $3907 = HEAP32[$3839>>2]|0;
    $3908 = HEAP32[$3739>>2]|0;
    $3909 = $3908 ^ $3907;
    HEAP32[$3739>>2] = $3909;
    $3910 = HEAP32[$3843>>2]|0;
    $3911 = HEAP32[$3740>>2]|0;
    $3912 = $3911 ^ $3910;
    HEAP32[$3740>>2] = $3912;
    $3913 = HEAP32[$3743>>2]|0;
    $3914 = HEAP32[$0>>2]|0;
    $3915 = $3914 ^ $3913;
    HEAP32[$0>>2] = $3915;
    $3916 = HEAP32[$3746>>2]|0;
    $3917 = HEAP32[$5>>2]|0;
    $3918 = $3917 ^ $3916;
    HEAP32[$5>>2] = $3918;
    $3919 = HEAP32[$3749>>2]|0;
    $3920 = HEAP32[$10>>2]|0;
    $3921 = $3920 ^ $3919;
    HEAP32[$10>>2] = $3921;
    $3922 = HEAP32[$3712>>2]|0;
    $3923 = $3922 ^ $3913;
    HEAP32[$3712>>2] = $3923;
    $3924 = HEAP32[$3719>>2]|0;
    $3925 = $3924 ^ $3916;
    HEAP32[$3719>>2] = $3925;
    $3926 = HEAP32[$3724>>2]|0;
    $3927 = $3926 ^ $3919;
    HEAP32[$3724>>2] = $3927;
    $3928 = $3742 << 7;
    $3929 = ((($ptree) + ($3778)|0) + 512|0);
    $3930 = HEAP8[$3929>>0]|0;
    $3931 = $3930 << 24 >> 24;
    $3932 = (0 - ($3931))|0;
    $3933 = $3932 << 19;
    $3934 = $3928 | $3778;
    $3935 = $3934 | $3933;
    $3936 = $3935 | 65536;
    $$0 = $3936;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 317) {
    $3976 = HEAP32[$3811>>2]|0;
    $3977 = HEAP32[$3732>>2]|0;
    $3978 = $3977 ^ $3976;
    HEAP32[$3732>>2] = $3978;
    $3979 = HEAP32[$3815>>2]|0;
    $3980 = HEAP32[$3733>>2]|0;
    $3981 = $3980 ^ $3979;
    HEAP32[$3733>>2] = $3981;
    $3982 = HEAP32[$3819>>2]|0;
    $3983 = HEAP32[$3734>>2]|0;
    $3984 = $3983 ^ $3982;
    HEAP32[$3734>>2] = $3984;
    $3985 = HEAP32[$3823>>2]|0;
    $3986 = HEAP32[$3735>>2]|0;
    $3987 = $3986 ^ $3985;
    HEAP32[$3735>>2] = $3987;
    $3988 = HEAP32[$3827>>2]|0;
    $3989 = HEAP32[$3736>>2]|0;
    $3990 = $3989 ^ $3988;
    HEAP32[$3736>>2] = $3990;
    $3991 = HEAP32[$3831>>2]|0;
    $3992 = HEAP32[$3737>>2]|0;
    $3993 = $3992 ^ $3991;
    HEAP32[$3737>>2] = $3993;
    $3994 = HEAP32[$3835>>2]|0;
    $3995 = HEAP32[$3738>>2]|0;
    $3996 = $3995 ^ $3994;
    HEAP32[$3738>>2] = $3996;
    $3997 = HEAP32[$3839>>2]|0;
    $3998 = HEAP32[$3739>>2]|0;
    $3999 = $3998 ^ $3997;
    HEAP32[$3739>>2] = $3999;
    $4000 = HEAP32[$3843>>2]|0;
    $4001 = HEAP32[$3740>>2]|0;
    $4002 = $4001 ^ $4000;
    HEAP32[$3740>>2] = $4002;
    $4003 = HEAP32[$3743>>2]|0;
    $4004 = HEAP32[$0>>2]|0;
    $4005 = $4004 ^ $4003;
    HEAP32[$0>>2] = $4005;
    $4006 = HEAP32[$3746>>2]|0;
    $4007 = HEAP32[$5>>2]|0;
    $4008 = $4007 ^ $4006;
    HEAP32[$5>>2] = $4008;
    $4009 = HEAP32[$3749>>2]|0;
    $4010 = HEAP32[$10>>2]|0;
    $4011 = $4010 ^ $4009;
    HEAP32[$10>>2] = $4011;
    $4012 = HEAP32[$3712>>2]|0;
    $4013 = $4012 ^ $4003;
    HEAP32[$3712>>2] = $4013;
    $4014 = HEAP32[$3719>>2]|0;
    $4015 = $4014 ^ $4006;
    HEAP32[$3719>>2] = $4015;
    $4016 = HEAP32[$3724>>2]|0;
    $4017 = $4016 ^ $4009;
    HEAP32[$3724>>2] = $4017;
    $4018 = $3742 << 7;
    $4019 = ((($ptree) + ($3937)|0) + 512|0);
    $4020 = HEAP8[$4019>>0]|0;
    $4021 = $4020 << 24 >> 24;
    $4022 = (0 - ($4021))|0;
    $4023 = $4022 << 19;
    $4024 = $4018 | $3937;
    $4025 = $4024 | $4023;
    $4026 = $4025 | 81920;
    $$0 = $4026;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 320) {
    $$pre991 = HEAP8[$$pre1002>>0]|0;
    $4076 = $$pre991;
    break;
   }
  }
 } while(0);
 $4072 = (($ptree) + 164|0);
 $4073 = HEAP32[$4072>>2]|0;
 $4074 = $4073 & $362;
 $4075 = $4076&255;
 $4077 = (33577952 + (($4075*12)|0)|0);
 $4078 = HEAP32[$4077>>2]|0;
 $4079 = $4074 & $4078;
 $4080 = ($4079|0)==(0);
 do {
  if ($4080) {
   $4270 = $4076;
  } else {
   $4081 = (($ptree) + 168|0);
   $4082 = (($ptree) + 32|0);
   $4083 = (($ptree) + 36|0);
   $4084 = (($ptree) + 40|0);
   $4085 = (($ptree) + 44|0);
   $4086 = (($ptree) + 48|0);
   $4087 = (($ptree) + 52|0);
   $4088 = (($ptree) + 56|0);
   $4089 = (($ptree) + 60|0);
   $4090 = (($ptree) + 64|0);
   $4091 = (($ptree) + 593|0);
   $bb_check$sroa$0$11165 = $4079;
   L479: while(1) {
    $4092 = (_last_one0($bb_check$sroa$0$11165)|0);
    $4093 = (($4092) + 9)|0;
    $4094 = (34156304 + (($4092*12)|0)|0);
    $4095 = HEAP32[$4094>>2]|0;
    $4096 = $4095 ^ $bb_check$sroa$0$11165;
    $4097 = HEAP32[$4072>>2]|0;
    $4098 = $4097 ^ $4095;
    HEAP32[$4072>>2] = $4098;
    $4099 = ((34156304 + (($4092*12)|0)|0) + 4|0);
    $4100 = HEAP32[$4099>>2]|0;
    $4101 = HEAP32[$4081>>2]|0;
    $4102 = $4101 ^ $4100;
    HEAP32[$4081>>2] = $4102;
    $4103 = (34156304 + (($4093*12)|0)|0);
    $4104 = HEAP32[$4103>>2]|0;
    $4105 = HEAP32[$0>>2]|0;
    $4106 = $4105 ^ $4104;
    HEAP32[$0>>2] = $4106;
    $4107 = ((34156304 + (($4093*12)|0)|0) + 4|0);
    $4108 = HEAP32[$4107>>2]|0;
    $4109 = HEAP32[$5>>2]|0;
    $4110 = $4109 ^ $4108;
    HEAP32[$5>>2] = $4110;
    $4111 = (34157280 + (($4093*12)|0)|0);
    $4112 = HEAP32[$4111>>2]|0;
    $4113 = HEAP32[$4082>>2]|0;
    $4114 = $4113 ^ $4112;
    HEAP32[$4082>>2] = $4114;
    $4115 = ((34157280 + (($4093*12)|0)|0) + 4|0);
    $4116 = HEAP32[$4115>>2]|0;
    $4117 = HEAP32[$4083>>2]|0;
    $4118 = $4117 ^ $4116;
    HEAP32[$4083>>2] = $4118;
    $4119 = ((34157280 + (($4093*12)|0)|0) + 8|0);
    $4120 = HEAP32[$4119>>2]|0;
    $4121 = HEAP32[$4084>>2]|0;
    $4122 = $4121 ^ $4120;
    HEAP32[$4084>>2] = $4122;
    $4123 = (34158256 + (($4093*12)|0)|0);
    $4124 = HEAP32[$4123>>2]|0;
    $4125 = HEAP32[$4085>>2]|0;
    $4126 = $4125 ^ $4124;
    HEAP32[$4085>>2] = $4126;
    $4127 = ((34158256 + (($4093*12)|0)|0) + 4|0);
    $4128 = HEAP32[$4127>>2]|0;
    $4129 = HEAP32[$4086>>2]|0;
    $4130 = $4129 ^ $4128;
    HEAP32[$4086>>2] = $4130;
    $4131 = ((34158256 + (($4093*12)|0)|0) + 8|0);
    $4132 = HEAP32[$4131>>2]|0;
    $4133 = HEAP32[$4087>>2]|0;
    $4134 = $4133 ^ $4132;
    HEAP32[$4087>>2] = $4134;
    $4135 = (34159232 + (($4093*12)|0)|0);
    $4136 = HEAP32[$4135>>2]|0;
    $4137 = HEAP32[$4088>>2]|0;
    $4138 = $4137 ^ $4136;
    HEAP32[$4088>>2] = $4138;
    $4139 = ((34159232 + (($4093*12)|0)|0) + 4|0);
    $4140 = HEAP32[$4139>>2]|0;
    $4141 = HEAP32[$4089>>2]|0;
    $4142 = $4141 ^ $4140;
    HEAP32[$4089>>2] = $4142;
    $4143 = ((34159232 + (($4093*12)|0)|0) + 8|0);
    $4144 = HEAP32[$4143>>2]|0;
    $4145 = HEAP32[$4090>>2]|0;
    $4146 = $4145 ^ $4144;
    HEAP32[$4090>>2] = $4146;
    $4147 = (_is_white_attacked($ptree,$4092)|0);
    $4148 = ($4147|0)==(0);
    do {
     if (!($4148)) {
      $4149 = (33575024 + (($4092*12)|0)|0);
      $4150 = HEAP32[$4149>>2]|0;
      $4151 = ((33575024 + (($4092*12)|0)|0) + 4|0);
      $4152 = HEAP32[$4151>>2]|0;
      $4153 = ((33575024 + (($4092*12)|0)|0) + 8|0);
      $4154 = HEAP32[$4153>>2]|0;
      $4155 = (_can_w_king_escape($ptree,$4092,$4150,$4152,$4154)|0);
      $4156 = ($4155|0)==(0);
      if (!($4156)) {
       break;
      }
      $4157 = HEAP8[$$pre1002>>0]|0;
      $4158 = $4157&255;
      $4159 = ((220518304 + (($4158*81)|0)|0) + ($4093)|0);
      $4160 = HEAP8[$4159>>0]|0;
      $4161 = $4160&255;
      $4162 = ($4160<<24>>24)==(0);
      do {
       if ($4162) {
        label = 328;
       } else {
        $4163 = ((220518304 + (($4158*81)|0)|0) + ($4092)|0);
        $4164 = HEAP8[$4163>>0]|0;
        $4165 = ($4160<<24>>24)==($4164<<24>>24);
        if ($4165) {
         label = 328;
         break;
        }
        $4166 = (_is_pinned_on_white_king($ptree,$4093,$4161)|0);
        $4167 = ($4166|0)==(0);
        if ($4167) {
         label = 328;
        }
       }
      } while(0);
      if ((label|0) == 328) {
       label = 0;
       $4168 = (_can_w_piece_capture($ptree,$4092)|0);
       $4169 = ($4168|0)==(0);
       if (!($4169)) {
        break;
       }
      }
      $4170 = HEAP8[$4091>>0]|0;
      $4171 = $4170&255;
      $4172 = ((220518304 + (($4171*81)|0)|0) + ($4093)|0);
      $4173 = HEAP8[$4172>>0]|0;
      $4174 = $4173&255;
      $4175 = ($4173<<24>>24)==(0);
      if ($4175) {
       break L479;
      }
      $4176 = ((220518304 + (($4171*81)|0)|0) + ($4092)|0);
      $4177 = HEAP8[$4176>>0]|0;
      $4178 = ($4173<<24>>24)==($4177<<24>>24);
      if ($4178) {
       break L479;
      }
      $4179 = (_is_pinned_on_black_king($ptree,$4093,$4174)|0);
      $4180 = ($4179|0)==(0);
      if ($4180) {
       break L479;
      }
     }
    } while(0);
    $4229 = HEAP32[$4111>>2]|0;
    $4230 = HEAP32[$4082>>2]|0;
    $4231 = $4230 ^ $4229;
    HEAP32[$4082>>2] = $4231;
    $4232 = HEAP32[$4115>>2]|0;
    $4233 = HEAP32[$4083>>2]|0;
    $4234 = $4233 ^ $4232;
    HEAP32[$4083>>2] = $4234;
    $4235 = HEAP32[$4119>>2]|0;
    $4236 = HEAP32[$4084>>2]|0;
    $4237 = $4236 ^ $4235;
    HEAP32[$4084>>2] = $4237;
    $4238 = HEAP32[$4123>>2]|0;
    $4239 = HEAP32[$4085>>2]|0;
    $4240 = $4239 ^ $4238;
    HEAP32[$4085>>2] = $4240;
    $4241 = HEAP32[$4127>>2]|0;
    $4242 = HEAP32[$4086>>2]|0;
    $4243 = $4242 ^ $4241;
    HEAP32[$4086>>2] = $4243;
    $4244 = HEAP32[$4131>>2]|0;
    $4245 = HEAP32[$4087>>2]|0;
    $4246 = $4245 ^ $4244;
    HEAP32[$4087>>2] = $4246;
    $4247 = HEAP32[$4135>>2]|0;
    $4248 = HEAP32[$4088>>2]|0;
    $4249 = $4248 ^ $4247;
    HEAP32[$4088>>2] = $4249;
    $4250 = HEAP32[$4139>>2]|0;
    $4251 = HEAP32[$4089>>2]|0;
    $4252 = $4251 ^ $4250;
    HEAP32[$4089>>2] = $4252;
    $4253 = HEAP32[$4143>>2]|0;
    $4254 = HEAP32[$4090>>2]|0;
    $4255 = $4254 ^ $4253;
    HEAP32[$4090>>2] = $4255;
    $4256 = HEAP32[$4103>>2]|0;
    $4257 = HEAP32[$0>>2]|0;
    $4258 = $4257 ^ $4256;
    HEAP32[$0>>2] = $4258;
    $4259 = HEAP32[$4107>>2]|0;
    $4260 = HEAP32[$5>>2]|0;
    $4261 = $4260 ^ $4259;
    HEAP32[$5>>2] = $4261;
    $4262 = HEAP32[$4094>>2]|0;
    $4263 = HEAP32[$4072>>2]|0;
    $4264 = $4263 ^ $4262;
    HEAP32[$4072>>2] = $4264;
    $4265 = HEAP32[$4099>>2]|0;
    $4266 = HEAP32[$4081>>2]|0;
    $4267 = $4266 ^ $4265;
    HEAP32[$4081>>2] = $4267;
    $4268 = ($4095|0)==($bb_check$sroa$0$11165|0);
    if ($4268) {
     label = 334;
     break;
    } else {
     $bb_check$sroa$0$11165 = $4096;
    }
   }
   if ((label|0) == 334) {
    $$pre992 = HEAP8[$$pre1002>>0]|0;
    $4270 = $$pre992;
    break;
   }
   $4181 = HEAP32[$4111>>2]|0;
   $4182 = HEAP32[$4082>>2]|0;
   $4183 = $4182 ^ $4181;
   HEAP32[$4082>>2] = $4183;
   $4184 = HEAP32[$4115>>2]|0;
   $4185 = HEAP32[$4083>>2]|0;
   $4186 = $4185 ^ $4184;
   HEAP32[$4083>>2] = $4186;
   $4187 = HEAP32[$4119>>2]|0;
   $4188 = HEAP32[$4084>>2]|0;
   $4189 = $4188 ^ $4187;
   HEAP32[$4084>>2] = $4189;
   $4190 = HEAP32[$4123>>2]|0;
   $4191 = HEAP32[$4085>>2]|0;
   $4192 = $4191 ^ $4190;
   HEAP32[$4085>>2] = $4192;
   $4193 = HEAP32[$4127>>2]|0;
   $4194 = HEAP32[$4086>>2]|0;
   $4195 = $4194 ^ $4193;
   HEAP32[$4086>>2] = $4195;
   $4196 = HEAP32[$4131>>2]|0;
   $4197 = HEAP32[$4087>>2]|0;
   $4198 = $4197 ^ $4196;
   HEAP32[$4087>>2] = $4198;
   $4199 = HEAP32[$4135>>2]|0;
   $4200 = HEAP32[$4088>>2]|0;
   $4201 = $4200 ^ $4199;
   HEAP32[$4088>>2] = $4201;
   $4202 = HEAP32[$4139>>2]|0;
   $4203 = HEAP32[$4089>>2]|0;
   $4204 = $4203 ^ $4202;
   HEAP32[$4089>>2] = $4204;
   $4205 = HEAP32[$4143>>2]|0;
   $4206 = HEAP32[$4090>>2]|0;
   $4207 = $4206 ^ $4205;
   HEAP32[$4090>>2] = $4207;
   $4208 = HEAP32[$4103>>2]|0;
   $4209 = HEAP32[$0>>2]|0;
   $4210 = $4209 ^ $4208;
   HEAP32[$0>>2] = $4210;
   $4211 = HEAP32[$4107>>2]|0;
   $4212 = HEAP32[$5>>2]|0;
   $4213 = $4212 ^ $4211;
   HEAP32[$5>>2] = $4213;
   $4214 = HEAP32[$4094>>2]|0;
   $4215 = HEAP32[$4072>>2]|0;
   $4216 = $4215 ^ $4214;
   HEAP32[$4072>>2] = $4216;
   $4217 = HEAP32[$4099>>2]|0;
   $4218 = HEAP32[$4081>>2]|0;
   $4219 = $4218 ^ $4217;
   HEAP32[$4081>>2] = $4219;
   $4220 = $4093 << 7;
   $4221 = ((($ptree) + ($4092)|0) + 512|0);
   $4222 = HEAP8[$4221>>0]|0;
   $4223 = $4222 << 24 >> 24;
   $4224 = (0 - ($4223))|0;
   $4225 = $4224 << 19;
   $4226 = $4092 | $4220;
   $4227 = $4226 | $4225;
   $4228 = $4227 | 49152;
   $$0 = $4228;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $4269 = $4270&255;
 $$off = (($4270) + -18)<<24>>24;
 $4271 = ($$off&255)<(45);
 if (!($4271)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4272 = (($4269) + 9)|0;
 $4273 = (($4269) + 18)|0;
 $4274 = ((($ptree) + ($4273)|0) + 512|0);
 $4275 = HEAP8[$4274>>0]|0;
 $4276 = ($4275<<24>>24)==(1);
 if (!($4276)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4277 = ((($ptree) + ($4272)|0) + 512|0);
 $4278 = HEAP8[$4277>>0]|0;
 $4279 = ($4278<<24>>24)<(1);
 if (!($4279)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4280 = ((34156304 + (($4272*12)|0)|0) + 4|0);
 $4281 = HEAP32[$4280>>2]|0;
 $4282 = (($ptree) + 168|0);
 $4283 = HEAP32[$4282>>2]|0;
 $4284 = $4283 ^ $4281;
 HEAP32[$4282>>2] = $4284;
 $4285 = ((34156304 + (($4272*12)|0)|0) + 8|0);
 $4286 = HEAP32[$4285>>2]|0;
 $4287 = (($ptree) + 172|0);
 $4288 = HEAP32[$4287>>2]|0;
 $4289 = $4288 ^ $4286;
 HEAP32[$4287>>2] = $4289;
 $4290 = ((34156304 + (($4273*12)|0)|0) + 4|0);
 $4291 = HEAP32[$4290>>2]|0;
 $4292 = HEAP32[$5>>2]|0;
 $4293 = $4292 ^ $4291;
 HEAP32[$5>>2] = $4293;
 $4294 = ((34156304 + (($4273*12)|0)|0) + 8|0);
 $4295 = HEAP32[$4294>>2]|0;
 $4296 = HEAP32[$10>>2]|0;
 $4297 = $4296 ^ $4295;
 HEAP32[$10>>2] = $4297;
 $4298 = (34157280 + (($4273*12)|0)|0);
 $4299 = HEAP32[$4298>>2]|0;
 $4300 = (($ptree) + 32|0);
 $4301 = HEAP32[$4300>>2]|0;
 $4302 = $4301 ^ $4299;
 HEAP32[$4300>>2] = $4302;
 $4303 = ((34157280 + (($4273*12)|0)|0) + 4|0);
 $4304 = HEAP32[$4303>>2]|0;
 $4305 = (($ptree) + 36|0);
 $4306 = HEAP32[$4305>>2]|0;
 $4307 = $4306 ^ $4304;
 HEAP32[$4305>>2] = $4307;
 $4308 = ((34157280 + (($4273*12)|0)|0) + 8|0);
 $4309 = HEAP32[$4308>>2]|0;
 $4310 = (($ptree) + 40|0);
 $4311 = HEAP32[$4310>>2]|0;
 $4312 = $4311 ^ $4309;
 HEAP32[$4310>>2] = $4312;
 $4313 = (34158256 + (($4273*12)|0)|0);
 $4314 = HEAP32[$4313>>2]|0;
 $4315 = (($ptree) + 44|0);
 $4316 = HEAP32[$4315>>2]|0;
 $4317 = $4316 ^ $4314;
 HEAP32[$4315>>2] = $4317;
 $4318 = ((34158256 + (($4273*12)|0)|0) + 4|0);
 $4319 = HEAP32[$4318>>2]|0;
 $4320 = (($ptree) + 48|0);
 $4321 = HEAP32[$4320>>2]|0;
 $4322 = $4321 ^ $4319;
 HEAP32[$4320>>2] = $4322;
 $4323 = ((34158256 + (($4273*12)|0)|0) + 8|0);
 $4324 = HEAP32[$4323>>2]|0;
 $4325 = (($ptree) + 52|0);
 $4326 = HEAP32[$4325>>2]|0;
 $4327 = $4326 ^ $4324;
 HEAP32[$4325>>2] = $4327;
 $4328 = (34159232 + (($4273*12)|0)|0);
 $4329 = HEAP32[$4328>>2]|0;
 $4330 = (($ptree) + 56|0);
 $4331 = HEAP32[$4330>>2]|0;
 $4332 = $4331 ^ $4329;
 HEAP32[$4330>>2] = $4332;
 $4333 = ((34159232 + (($4273*12)|0)|0) + 4|0);
 $4334 = HEAP32[$4333>>2]|0;
 $4335 = (($ptree) + 60|0);
 $4336 = HEAP32[$4335>>2]|0;
 $4337 = $4336 ^ $4334;
 HEAP32[$4335>>2] = $4337;
 $4338 = ((34159232 + (($4273*12)|0)|0) + 8|0);
 $4339 = HEAP32[$4338>>2]|0;
 $4340 = (($ptree) + 64|0);
 $4341 = HEAP32[$4340>>2]|0;
 $4342 = $4341 ^ $4339;
 HEAP32[$4340>>2] = $4342;
 $4343 = (_is_white_attacked($ptree,$4272)|0);
 $4344 = ($4343|0)==(0);
 L507: do {
  if (!($4344)) {
   $4345 = (_can_w_king_escape($ptree,$4272,0,0,0)|0);
   $4346 = ($4345|0)==(0);
   if (!($4346)) {
    break;
   }
   $4347 = (_can_w_piece_capture($ptree,$4272)|0);
   $4348 = ($4347|0)==(0);
   if (!($4348)) {
    break;
   }
   $4349 = (($ptree) + 593|0);
   $4350 = HEAP8[$4349>>0]|0;
   $4351 = $4350&255;
   $4352 = ((220518304 + (($4351*81)|0)|0) + ($4273)|0);
   $4353 = HEAP8[$4352>>0]|0;
   $4354 = $4353&255;
   $4355 = ($4353<<24>>24)==(0);
   do {
    if (!($4355)) {
     $4356 = ((220518304 + (($4351*81)|0)|0) + ($4272)|0);
     $4357 = HEAP8[$4356>>0]|0;
     $4358 = ($4353<<24>>24)==($4357<<24>>24);
     if ($4358) {
      break;
     }
     $4359 = (_is_pinned_on_black_king($ptree,$4273,$4354)|0);
     $4360 = ($4359|0)==(0);
     if (!($4360)) {
      break L507;
     }
    }
   } while(0);
   $4361 = HEAP32[$4298>>2]|0;
   $4362 = HEAP32[$4300>>2]|0;
   $4363 = $4362 ^ $4361;
   HEAP32[$4300>>2] = $4363;
   $4364 = HEAP32[$4303>>2]|0;
   $4365 = HEAP32[$4305>>2]|0;
   $4366 = $4365 ^ $4364;
   HEAP32[$4305>>2] = $4366;
   $4367 = HEAP32[$4308>>2]|0;
   $4368 = HEAP32[$4310>>2]|0;
   $4369 = $4368 ^ $4367;
   HEAP32[$4310>>2] = $4369;
   $4370 = HEAP32[$4313>>2]|0;
   $4371 = HEAP32[$4315>>2]|0;
   $4372 = $4371 ^ $4370;
   HEAP32[$4315>>2] = $4372;
   $4373 = HEAP32[$4318>>2]|0;
   $4374 = HEAP32[$4320>>2]|0;
   $4375 = $4374 ^ $4373;
   HEAP32[$4320>>2] = $4375;
   $4376 = HEAP32[$4323>>2]|0;
   $4377 = HEAP32[$4325>>2]|0;
   $4378 = $4377 ^ $4376;
   HEAP32[$4325>>2] = $4378;
   $4379 = HEAP32[$4328>>2]|0;
   $4380 = HEAP32[$4330>>2]|0;
   $4381 = $4380 ^ $4379;
   HEAP32[$4330>>2] = $4381;
   $4382 = HEAP32[$4333>>2]|0;
   $4383 = HEAP32[$4335>>2]|0;
   $4384 = $4383 ^ $4382;
   HEAP32[$4335>>2] = $4384;
   $4385 = HEAP32[$4338>>2]|0;
   $4386 = HEAP32[$4340>>2]|0;
   $4387 = $4386 ^ $4385;
   HEAP32[$4340>>2] = $4387;
   $4388 = HEAP32[$4290>>2]|0;
   $4389 = HEAP32[$5>>2]|0;
   $4390 = $4389 ^ $4388;
   HEAP32[$5>>2] = $4390;
   $4391 = HEAP32[$4294>>2]|0;
   $4392 = HEAP32[$10>>2]|0;
   $4393 = $4392 ^ $4391;
   HEAP32[$10>>2] = $4393;
   $4394 = HEAP32[$4280>>2]|0;
   $4395 = HEAP32[$4282>>2]|0;
   $4396 = $4395 ^ $4394;
   HEAP32[$4282>>2] = $4396;
   $4397 = HEAP32[$4285>>2]|0;
   $4398 = HEAP32[$4287>>2]|0;
   $4399 = $4398 ^ $4397;
   HEAP32[$4287>>2] = $4399;
   $4400 = $4273 << 7;
   $4401 = HEAP8[$4277>>0]|0;
   $4402 = $4401 << 24 >> 24;
   $4403 = (0 - ($4402))|0;
   $4404 = $4403 << 19;
   $4405 = $4272 | $4400;
   $4406 = $4405 | $4404;
   $4407 = $4406 | 32768;
   $$0 = $4407;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $4408 = HEAP32[$4298>>2]|0;
 $4409 = HEAP32[$4300>>2]|0;
 $4410 = $4409 ^ $4408;
 HEAP32[$4300>>2] = $4410;
 $4411 = HEAP32[$4303>>2]|0;
 $4412 = HEAP32[$4305>>2]|0;
 $4413 = $4412 ^ $4411;
 HEAP32[$4305>>2] = $4413;
 $4414 = HEAP32[$4308>>2]|0;
 $4415 = HEAP32[$4310>>2]|0;
 $4416 = $4415 ^ $4414;
 HEAP32[$4310>>2] = $4416;
 $4417 = HEAP32[$4313>>2]|0;
 $4418 = HEAP32[$4315>>2]|0;
 $4419 = $4418 ^ $4417;
 HEAP32[$4315>>2] = $4419;
 $4420 = HEAP32[$4318>>2]|0;
 $4421 = HEAP32[$4320>>2]|0;
 $4422 = $4421 ^ $4420;
 HEAP32[$4320>>2] = $4422;
 $4423 = HEAP32[$4323>>2]|0;
 $4424 = HEAP32[$4325>>2]|0;
 $4425 = $4424 ^ $4423;
 HEAP32[$4325>>2] = $4425;
 $4426 = HEAP32[$4328>>2]|0;
 $4427 = HEAP32[$4330>>2]|0;
 $4428 = $4427 ^ $4426;
 HEAP32[$4330>>2] = $4428;
 $4429 = HEAP32[$4333>>2]|0;
 $4430 = HEAP32[$4335>>2]|0;
 $4431 = $4430 ^ $4429;
 HEAP32[$4335>>2] = $4431;
 $4432 = HEAP32[$4338>>2]|0;
 $4433 = HEAP32[$4340>>2]|0;
 $4434 = $4433 ^ $4432;
 HEAP32[$4340>>2] = $4434;
 $4435 = HEAP32[$4290>>2]|0;
 $4436 = HEAP32[$5>>2]|0;
 $4437 = $4436 ^ $4435;
 HEAP32[$5>>2] = $4437;
 $4438 = HEAP32[$4294>>2]|0;
 $4439 = HEAP32[$10>>2]|0;
 $4440 = $4439 ^ $4438;
 HEAP32[$10>>2] = $4440;
 $4441 = HEAP32[$4280>>2]|0;
 $4442 = HEAP32[$4282>>2]|0;
 $4443 = $4442 ^ $4441;
 HEAP32[$4282>>2] = $4443;
 $4444 = HEAP32[$4285>>2]|0;
 $4445 = HEAP32[$4287>>2]|0;
 $4446 = $4445 ^ $4444;
 HEAP32[$4287>>2] = $4446;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _can_w_king_escape($ptree,$to,$pbb$0$0$0$val,$pbb$0$0$1$val,$pbb$0$0$2$val) {
 $ptree = $ptree|0;
 $to = $to|0;
 $pbb$0$0$0$val = $pbb$0$0$0$val|0;
 $pbb$0$0$1$val = $pbb$0$0$1$val|0;
 $pbb$0$0$2$val = $pbb$0$0$2$val|0;
 var $$phi$trans$insert = 0, $$phi$trans$insert10 = 0, $$phi$trans$insert12 = 0, $$phi$trans$insert14 = 0, $$phi$trans$insert16 = 0, $$phi$trans$insert18 = 0, $$phi$trans$insert20 = 0, $$phi$trans$insert22 = 0, $$phi$trans$insert24 = 0, $$phi$trans$insert26 = 0, $$phi$trans$insert6 = 0, $$phi$trans$insert8 = 0, $$pre = 0, $$pre11 = 0, $$pre13 = 0, $$pre15 = 0, $$pre17 = 0, $$pre19 = 0, $$pre21 = 0, $$pre23 = 0;
 var $$pre25 = 0, $$pre27 = 0, $$pre7 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $bb$sroa$0$02 = 0, $bb$sroa$1$01 = 0, $bb$sroa$2$03 = 0, $iret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ptree) + ($to)|0) + 512|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (34156304 + (($to*12)|0)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($ptree) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 ^ $4;
  HEAP32[$5>>2] = $7;
  $8 = ((34156304 + (($to*12)|0)|0) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($ptree) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 ^ $9;
  HEAP32[$10>>2] = $12;
  $13 = ((34156304 + (($to*12)|0)|0) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($ptree) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 ^ $14;
  HEAP32[$15>>2] = $17;
  $18 = (34157280 + (($to*12)|0)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($ptree) + 32|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 ^ $19;
  HEAP32[$20>>2] = $22;
  $23 = ((34157280 + (($to*12)|0)|0) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($ptree) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 ^ $24;
  HEAP32[$25>>2] = $27;
  $28 = ((34157280 + (($to*12)|0)|0) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($ptree) + 40|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 ^ $29;
  HEAP32[$30>>2] = $32;
  $33 = (34158256 + (($to*12)|0)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($ptree) + 44|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 ^ $34;
  HEAP32[$35>>2] = $37;
  $38 = ((34158256 + (($to*12)|0)|0) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($ptree) + 48|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 ^ $39;
  HEAP32[$40>>2] = $42;
  $43 = ((34158256 + (($to*12)|0)|0) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($ptree) + 52|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $46 ^ $44;
  HEAP32[$45>>2] = $47;
  $48 = (34159232 + (($to*12)|0)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($ptree) + 56|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $51 ^ $49;
  HEAP32[$50>>2] = $52;
  $53 = ((34159232 + (($to*12)|0)|0) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($ptree) + 60|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $56 ^ $54;
  HEAP32[$55>>2] = $57;
  $58 = ((34159232 + (($to*12)|0)|0) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($ptree) + 64|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $61 ^ $59;
  HEAP32[$60>>2] = $62;
  $100 = $37;$105 = $42;$110 = $47;$115 = $52;$120 = $57;$125 = $62;$128 = $4;$131 = $9;$134 = $14;$85 = $22;$90 = $27;$95 = $32;
 } else {
  $$phi$trans$insert = (($ptree) + 32|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$phi$trans$insert6 = (($ptree) + 36|0);
  $$pre7 = HEAP32[$$phi$trans$insert6>>2]|0;
  $$phi$trans$insert8 = (($ptree) + 40|0);
  $$pre9 = HEAP32[$$phi$trans$insert8>>2]|0;
  $$phi$trans$insert10 = (($ptree) + 44|0);
  $$pre11 = HEAP32[$$phi$trans$insert10>>2]|0;
  $$phi$trans$insert12 = (($ptree) + 48|0);
  $$pre13 = HEAP32[$$phi$trans$insert12>>2]|0;
  $$phi$trans$insert14 = (($ptree) + 52|0);
  $$pre15 = HEAP32[$$phi$trans$insert14>>2]|0;
  $$phi$trans$insert16 = (($ptree) + 56|0);
  $$pre17 = HEAP32[$$phi$trans$insert16>>2]|0;
  $$phi$trans$insert18 = (($ptree) + 60|0);
  $$pre19 = HEAP32[$$phi$trans$insert18>>2]|0;
  $$phi$trans$insert20 = (($ptree) + 64|0);
  $$pre21 = HEAP32[$$phi$trans$insert20>>2]|0;
  $$phi$trans$insert22 = (34156304 + (($to*12)|0)|0);
  $$pre23 = HEAP32[$$phi$trans$insert22>>2]|0;
  $$phi$trans$insert24 = ((34156304 + (($to*12)|0)|0) + 4|0);
  $$pre25 = HEAP32[$$phi$trans$insert24>>2]|0;
  $$phi$trans$insert26 = ((34156304 + (($to*12)|0)|0) + 8|0);
  $$pre27 = HEAP32[$$phi$trans$insert26>>2]|0;
  $100 = $$pre11;$105 = $$pre13;$110 = $$pre15;$115 = $$pre17;$120 = $$pre19;$125 = $$pre21;$128 = $$pre23;$131 = $$pre25;$134 = $$pre27;$85 = $$pre;$90 = $$pre7;$95 = $$pre9;
 }
 $63 = (($ptree) + 594|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = (34156304 + (($65*12)|0)|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($ptree) + 20|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $69 ^ $67;
 HEAP32[$68>>2] = $70;
 $71 = ((34156304 + (($65*12)|0)|0) + 4|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($ptree) + 24|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $74 ^ $72;
 HEAP32[$73>>2] = $75;
 $76 = ((34156304 + (($65*12)|0)|0) + 8|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($ptree) + 28|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 ^ $77;
 HEAP32[$78>>2] = $80;
 $81 = (34157280 + (($65*12)|0)|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (($ptree) + 32|0);
 $84 = $85 ^ $82;
 HEAP32[$83>>2] = $84;
 $86 = ((34157280 + (($65*12)|0)|0) + 4|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (($ptree) + 36|0);
 $89 = $90 ^ $87;
 HEAP32[$88>>2] = $89;
 $91 = ((34157280 + (($65*12)|0)|0) + 8|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (($ptree) + 40|0);
 $94 = $95 ^ $92;
 HEAP32[$93>>2] = $94;
 $96 = (34158256 + (($65*12)|0)|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = (($ptree) + 44|0);
 $99 = $100 ^ $97;
 HEAP32[$98>>2] = $99;
 $101 = ((34158256 + (($65*12)|0)|0) + 4|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($ptree) + 48|0);
 $104 = $105 ^ $102;
 HEAP32[$103>>2] = $104;
 $106 = ((34158256 + (($65*12)|0)|0) + 8|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = (($ptree) + 52|0);
 $109 = $110 ^ $107;
 HEAP32[$108>>2] = $109;
 $111 = (34159232 + (($65*12)|0)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = (($ptree) + 56|0);
 $114 = $115 ^ $112;
 HEAP32[$113>>2] = $114;
 $116 = ((34159232 + (($65*12)|0)|0) + 4|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (($ptree) + 60|0);
 $119 = $120 ^ $117;
 HEAP32[$118>>2] = $119;
 $121 = ((34159232 + (($65*12)|0)|0) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (($ptree) + 64|0);
 $124 = $125 ^ $122;
 HEAP32[$123>>2] = $124;
 $126 = (34156304 + (($to*12)|0)|0);
 $127 = $128 | $pbb$0$0$0$val;
 $129 = ((34156304 + (($to*12)|0)|0) + 4|0);
 $130 = $131 | $pbb$0$0$1$val;
 $132 = ((34156304 + (($to*12)|0)|0) + 8|0);
 $133 = $134 | $pbb$0$0$2$val;
 $135 = $127 | $70;
 $136 = $130 | $75;
 $137 = $133 | $80;
 $138 = (33578928 + (($65*12)|0)|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = $135 ^ -1;
 $141 = $139 & $140;
 $142 = ((33578928 + (($65*12)|0)|0) + 4|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = $136 ^ -1;
 $145 = $143 & $144;
 $146 = ((33578928 + (($65*12)|0)|0) + 8|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = $137 ^ -1;
 $149 = $147 & $148;
 $150 = $141 | $145;
 $151 = $150 | $149;
 $152 = ($151|0)==(0);
 L5: do {
  if ($152) {
   $iret$0 = 0;
  } else {
   $bb$sroa$0$02 = $141;$bb$sroa$1$01 = $145;$bb$sroa$2$03 = $149;
   while(1) {
    $153 = (_first_one012($bb$sroa$0$02,$bb$sroa$1$01,$bb$sroa$2$03)|0);
    $154 = (_is_white_attacked($ptree,$153)|0);
    $155 = ($154|0)==(0);
    if ($155) {
     $iret$0 = 1;
     break L5;
    }
    $156 = (34156304 + (($153*12)|0)|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = $157 ^ $bb$sroa$0$02;
    $159 = ((34156304 + (($153*12)|0)|0) + 4|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = $160 ^ $bb$sroa$1$01;
    $162 = ((34156304 + (($153*12)|0)|0) + 8|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = $163 ^ $bb$sroa$2$03;
    $165 = $158 | $161;
    $166 = $165 | $164;
    $167 = ($166|0)==(0);
    if ($167) {
     $iret$0 = 0;
     break;
    } else {
     $bb$sroa$0$02 = $158;$bb$sroa$1$01 = $161;$bb$sroa$2$03 = $164;
    }
   }
  }
 } while(0);
 $168 = HEAP8[$63>>0]|0;
 $169 = $168&255;
 $170 = (34157280 + (($169*12)|0)|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = HEAP32[$83>>2]|0;
 $173 = $172 ^ $171;
 HEAP32[$83>>2] = $173;
 $174 = ((34157280 + (($169*12)|0)|0) + 4|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = HEAP32[$88>>2]|0;
 $177 = $176 ^ $175;
 HEAP32[$88>>2] = $177;
 $178 = ((34157280 + (($169*12)|0)|0) + 8|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = HEAP32[$93>>2]|0;
 $181 = $180 ^ $179;
 HEAP32[$93>>2] = $181;
 $182 = (34158256 + (($169*12)|0)|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = HEAP32[$98>>2]|0;
 $185 = $184 ^ $183;
 HEAP32[$98>>2] = $185;
 $186 = ((34158256 + (($169*12)|0)|0) + 4|0);
 $187 = HEAP32[$186>>2]|0;
 $188 = HEAP32[$103>>2]|0;
 $189 = $188 ^ $187;
 HEAP32[$103>>2] = $189;
 $190 = ((34158256 + (($169*12)|0)|0) + 8|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = HEAP32[$108>>2]|0;
 $193 = $192 ^ $191;
 HEAP32[$108>>2] = $193;
 $194 = (34159232 + (($169*12)|0)|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = HEAP32[$113>>2]|0;
 $197 = $196 ^ $195;
 HEAP32[$113>>2] = $197;
 $198 = ((34159232 + (($169*12)|0)|0) + 4|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = HEAP32[$118>>2]|0;
 $201 = $200 ^ $199;
 HEAP32[$118>>2] = $201;
 $202 = ((34159232 + (($169*12)|0)|0) + 8|0);
 $203 = HEAP32[$202>>2]|0;
 $204 = HEAP32[$123>>2]|0;
 $205 = $204 ^ $203;
 HEAP32[$123>>2] = $205;
 $206 = (34156304 + (($169*12)|0)|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = HEAP32[$68>>2]|0;
 $209 = $208 ^ $207;
 HEAP32[$68>>2] = $209;
 $210 = ((34156304 + (($169*12)|0)|0) + 4|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = HEAP32[$73>>2]|0;
 $213 = $212 ^ $211;
 HEAP32[$73>>2] = $213;
 $214 = ((34156304 + (($169*12)|0)|0) + 8|0);
 $215 = HEAP32[$214>>2]|0;
 $216 = HEAP32[$78>>2]|0;
 $217 = $216 ^ $215;
 HEAP32[$78>>2] = $217;
 $218 = HEAP8[$0>>0]|0;
 $219 = ($218<<24>>24)==(0);
 if (!($219)) {
  STACKTOP = sp;return ($iret$0|0);
 }
 $220 = HEAP32[$126>>2]|0;
 $221 = (($ptree) + 8|0);
 $222 = HEAP32[$221>>2]|0;
 $223 = $222 ^ $220;
 HEAP32[$221>>2] = $223;
 $224 = HEAP32[$129>>2]|0;
 $225 = (($ptree) + 12|0);
 $226 = HEAP32[$225>>2]|0;
 $227 = $226 ^ $224;
 HEAP32[$225>>2] = $227;
 $228 = HEAP32[$132>>2]|0;
 $229 = (($ptree) + 16|0);
 $230 = HEAP32[$229>>2]|0;
 $231 = $230 ^ $228;
 HEAP32[$229>>2] = $231;
 $232 = (34157280 + (($to*12)|0)|0);
 $233 = HEAP32[$232>>2]|0;
 $234 = $173 ^ $233;
 HEAP32[$83>>2] = $234;
 $235 = ((34157280 + (($to*12)|0)|0) + 4|0);
 $236 = HEAP32[$235>>2]|0;
 $237 = $177 ^ $236;
 HEAP32[$88>>2] = $237;
 $238 = ((34157280 + (($to*12)|0)|0) + 8|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = $181 ^ $239;
 HEAP32[$93>>2] = $240;
 $241 = (34158256 + (($to*12)|0)|0);
 $242 = HEAP32[$241>>2]|0;
 $243 = $185 ^ $242;
 HEAP32[$98>>2] = $243;
 $244 = ((34158256 + (($to*12)|0)|0) + 4|0);
 $245 = HEAP32[$244>>2]|0;
 $246 = $189 ^ $245;
 HEAP32[$103>>2] = $246;
 $247 = ((34158256 + (($to*12)|0)|0) + 8|0);
 $248 = HEAP32[$247>>2]|0;
 $249 = $193 ^ $248;
 HEAP32[$108>>2] = $249;
 $250 = (34159232 + (($to*12)|0)|0);
 $251 = HEAP32[$250>>2]|0;
 $252 = $197 ^ $251;
 HEAP32[$113>>2] = $252;
 $253 = ((34159232 + (($to*12)|0)|0) + 4|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = $201 ^ $254;
 HEAP32[$118>>2] = $255;
 $256 = ((34159232 + (($to*12)|0)|0) + 8|0);
 $257 = HEAP32[$256>>2]|0;
 $258 = $205 ^ $257;
 HEAP32[$123>>2] = $258;
 STACKTOP = sp;return ($iret$0|0);
}
function _can_w_piece_capture($ptree,$to) {
 $ptree = $ptree|0;
 $to = $to|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bb_sum$sroa$0$0 = 0;
 var $bb_sum$sroa$1$0 = 0, $bb_sum$sroa$2$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($to) + -9)|0;
 $1 = ($to|0)>(8);
 if ($1) {
  $2 = ((($ptree) + ($0)|0) + 512|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(-1);
  if ($4) {
   $5 = (($ptree) + 594|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6&255;
   $8 = ((220518304 + (($7*81)|0)|0) + ($0)|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   $11 = ($9<<24>>24)==(0);
   if ($11) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $12 = ((220518304 + (($7*81)|0)|0) + ($to)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($9<<24>>24)==($13<<24>>24);
   if ($14) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $15 = (_is_pinned_on_white_king($ptree,$0,$10)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $17 = (($ptree) + 224|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (33573072 + (($to*12)|0)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 & $18;
 $22 = (($ptree) + 228|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((33573072 + (($to*12)|0)|0) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 & $23;
 $27 = (($ptree) + 232|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((33573072 + (($to*12)|0)|0) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & $28;
 $32 = (($ptree) + 248|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (33574048 + (($to*12)|0)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 & $33;
 $37 = $36 | $21;
 $38 = (($ptree) + 252|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((33574048 + (($to*12)|0)|0) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 & $39;
 $43 = $42 | $26;
 $44 = (($ptree) + 256|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((33574048 + (($to*12)|0)|0) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 & $45;
 $49 = $48 | $31;
 $50 = (($ptree) + 104|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (33575024 + (($to*12)|0)|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53 & $51;
 $55 = $37 | $54;
 $56 = (($ptree) + 108|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ((33575024 + (($to*12)|0)|0) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $59 & $57;
 $61 = $43 | $60;
 $62 = (($ptree) + 112|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ((33575024 + (($to*12)|0)|0) + 8|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $65 & $63;
 $67 = $49 | $66;
 $68 = (($ptree) + 320|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($ptree) + 344|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $71 | $69;
 $73 = (($ptree) + 324|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($ptree) + 348|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $76 | $74;
 $78 = (($ptree) + 328|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (($ptree) + 352|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $81 | $79;
 $83 = (33578928 + (($to*12)|0)|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $84 & $72;
 $86 = $55 | $85;
 $87 = ((33578928 + (($to*12)|0)|0) + 4|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $88 & $77;
 $90 = $61 | $89;
 $91 = ((33578928 + (($to*12)|0)|0) + 8|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $92 & $82;
 $94 = $67 | $93;
 $95 = ((33572424 + ($to<<3)|0) + 6|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = $96&255;
 $98 = ((($ptree) + ($97<<2)|0) + 56|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ((33572424 + ($to<<3)|0) + 7|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = $99 >>> $102;
 $104 = $103 & 127;
 $105 = ((33704320 + (($to*1536)|0)|0) + (($104*12)|0)|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ((33572424 + ($to<<3)|0) + 4|0);
 $108 = HEAP8[$107>>0]|0;
 $109 = $108&255;
 $110 = ((($ptree) + ($109<<2)|0) + 44|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ((33572424 + ($to<<3)|0) + 5|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = $113&255;
 $115 = $111 >>> $114;
 $116 = $115 & 127;
 $117 = ((33579904 + (($to*1536)|0)|0) + (($116*12)|0)|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = $118 | $106;
 $120 = (((33704320 + (($to*1536)|0)|0) + (($104*12)|0)|0) + 4|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = (((33579904 + (($to*1536)|0)|0) + (($116*12)|0)|0) + 4|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = $123 | $121;
 $125 = (((33704320 + (($to*1536)|0)|0) + (($104*12)|0)|0) + 8|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = (((33579904 + (($to*1536)|0)|0) + (($116*12)|0)|0) + 8|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = $128 | $126;
 $130 = (($ptree) + 128|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $131 & $119;
 $133 = $86 | $132;
 $134 = (($ptree) + 132|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = $135 & $124;
 $137 = $90 | $136;
 $138 = (($ptree) + 136|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = $139 & $129;
 $141 = $94 | $140;
 $142 = (($ptree) + 152|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = (33572424 + ($to<<3)|0);
 $145 = HEAP8[$144>>0]|0;
 $146 = $145&255;
 $147 = ((($ptree) + ($146<<2)|0) + 8|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = ((($ptree) + ($146<<2)|0) + 20|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = $150 | $148;
 $152 = ((33572424 + ($to<<3)|0) + 1|0);
 $153 = HEAP8[$152>>0]|0;
 $154 = $153&255;
 $155 = $151 >>> $154;
 $156 = $155 & 127;
 $157 = ((33828736 + (($to*1536)|0)|0) + (($156*12)|0)|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = $158 & $143;
 $160 = $133 | $159;
 $161 = (($ptree) + 156|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = (((33828736 + (($to*1536)|0)|0) + (($156*12)|0)|0) + 4|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = $164 & $162;
 $166 = $137 | $165;
 $167 = (($ptree) + 160|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = (((33828736 + (($to*1536)|0)|0) + (($156*12)|0)|0) + 8|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = $170 & $168;
 $172 = $141 | $171;
 $173 = (($ptree) + 200|0);
 $174 = HEAP32[$173>>2]|0;
 $175 = (34161184 + (($to*12)|0)|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = $176 & $174;
 $178 = $177 | $143;
 $179 = (($ptree) + 204|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = ((34161184 + (($to*12)|0)|0) + 4|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = $182 & $180;
 $184 = $183 | $162;
 $185 = (($ptree) + 208|0);
 $186 = HEAP32[$185>>2]|0;
 $187 = ((34161184 + (($to*12)|0)|0) + 8|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = $188 & $186;
 $190 = $189 | $168;
 $191 = ((33572424 + ($to<<3)|0) + 2|0);
 $192 = HEAP8[$191>>0]|0;
 $193 = $192&255;
 $194 = ((($ptree) + ($193<<2)|0) + 32|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = ((33572424 + ($to<<3)|0) + 3|0);
 $197 = HEAP8[$196>>0]|0;
 $198 = $197&255;
 $199 = $195 >>> $198;
 $200 = $199 & 127;
 $201 = ((33953152 + (($to*1536)|0)|0) + (($200*12)|0)|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = (((33953152 + (($to*1536)|0)|0) + (($200*12)|0)|0) + 4|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = (((33953152 + (($to*1536)|0)|0) + (($200*12)|0)|0) + 8|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = $202 & $178;
 $208 = $160 | $207;
 $209 = $204 & $184;
 $210 = $166 | $209;
 $211 = $206 & $190;
 $212 = $172 | $211;
 $213 = (($ptree) + 594|0);
 $bb_sum$sroa$0$0 = $208;$bb_sum$sroa$1$0 = $210;$bb_sum$sroa$2$0 = $212;
 while(1) {
  $214 = $bb_sum$sroa$1$0 | $bb_sum$sroa$0$0;
  $215 = $214 | $bb_sum$sroa$2$0;
  $216 = ($215|0)==(0);
  if ($216) {
   $$0 = 0;
   label = 11;
   break;
  }
  $217 = (_first_one012($bb_sum$sroa$0$0,$bb_sum$sroa$1$0,$bb_sum$sroa$2$0)|0);
  $218 = (34156304 + (($217*12)|0)|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = $219 ^ $bb_sum$sroa$0$0;
  $221 = ((34156304 + (($217*12)|0)|0) + 4|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = $222 ^ $bb_sum$sroa$1$0;
  $224 = ((34156304 + (($217*12)|0)|0) + 8|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = $225 ^ $bb_sum$sroa$2$0;
  $227 = HEAP8[$213>>0]|0;
  $228 = $227&255;
  $229 = ((220518304 + (($228*81)|0)|0) + ($217)|0);
  $230 = HEAP8[$229>>0]|0;
  $231 = $230&255;
  $232 = ($230<<24>>24)==(0);
  if ($232) {
   $$0 = 1;
   label = 11;
   break;
  }
  $233 = ((220518304 + (($228*81)|0)|0) + ($to)|0);
  $234 = HEAP8[$233>>0]|0;
  $235 = ($230<<24>>24)==($234<<24>>24);
  if ($235) {
   $$0 = 1;
   label = 11;
   break;
  }
  $236 = (_is_pinned_on_white_king($ptree,$217,$231)|0);
  $237 = ($236|0)==(0);
  if ($237) {
   $$0 = 1;
   label = 11;
   break;
  } else {
   $bb_sum$sroa$0$0 = $220;$bb_sum$sroa$1$0 = $223;$bb_sum$sroa$2$0 = $226;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _is_w_mate_in_1ply($ptree) {
 $ptree = $ptree|0;
 var $$0 = 0, $$off = 0, $$pre$pre = 0, $$pre1002 = 0, $$pre987$pre = 0, $$pre988$pre = 0, $$pre989 = 0, $$pre990 = 0, $$pre991 = 0, $$pre992 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0;
 var $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0;
 var $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0;
 var $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0;
 var $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0;
 var $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0;
 var $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0;
 var $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0;
 var $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0;
 var $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0;
 var $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0;
 var $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0;
 var $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0;
 var $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0;
 var $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0;
 var $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0;
 var $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0;
 var $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0;
 var $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0;
 var $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0;
 var $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0;
 var $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0;
 var $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0;
 var $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0;
 var $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0;
 var $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0;
 var $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0;
 var $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0;
 var $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0;
 var $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0;
 var $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0;
 var $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0;
 var $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0;
 var $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0;
 var $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0;
 var $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0;
 var $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0;
 var $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0;
 var $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0;
 var $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0;
 var $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0;
 var $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0;
 var $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0;
 var $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0;
 var $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0;
 var $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0;
 var $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0;
 var $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0;
 var $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0;
 var $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0;
 var $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0;
 var $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0;
 var $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0;
 var $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0;
 var $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0;
 var $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0;
 var $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0;
 var $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0;
 var $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0;
 var $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0;
 var $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0;
 var $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0;
 var $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0;
 var $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0;
 var $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0;
 var $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0;
 var $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0;
 var $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0;
 var $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0;
 var $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0;
 var $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0;
 var $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0;
 var $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0;
 var $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0;
 var $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0;
 var $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0;
 var $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0;
 var $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0;
 var $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0;
 var $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0;
 var $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0;
 var $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0;
 var $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0;
 var $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0;
 var $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0;
 var $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0;
 var $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0;
 var $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0;
 var $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0;
 var $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0;
 var $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0;
 var $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0;
 var $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0;
 var $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0;
 var $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0;
 var $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0;
 var $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0;
 var $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0;
 var $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0;
 var $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0;
 var $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0;
 var $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0;
 var $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0;
 var $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0;
 var $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0;
 var $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0;
 var $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0;
 var $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0;
 var $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0;
 var $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0;
 var $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0;
 var $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0;
 var $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0;
 var $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0;
 var $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0;
 var $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0;
 var $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0;
 var $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0;
 var $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0;
 var $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0;
 var $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0;
 var $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0;
 var $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0;
 var $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0;
 var $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0;
 var $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0;
 var $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0, $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0;
 var $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0, $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0;
 var $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0;
 var $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0, $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0;
 var $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0, $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0;
 var $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0, $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0;
 var $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0, $3374 = 0, $3375 = 0, $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0;
 var $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0, $3392 = 0, $3393 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0, $340 = 0;
 var $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0, $341 = 0, $3410 = 0, $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0;
 var $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0, $3428 = 0, $3429 = 0, $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0;
 var $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0, $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0, $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0;
 var $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0, $3464 = 0, $3465 = 0, $3466 = 0, $3467 = 0, $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0, $3471 = 0, $3472 = 0;
 var $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0, $3482 = 0, $3483 = 0, $3484 = 0, $3485 = 0, $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0, $349 = 0, $3490 = 0;
 var $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0, $350 = 0, $3500 = 0, $3501 = 0, $3502 = 0, $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0, $3507 = 0, $3508 = 0;
 var $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0, $3517 = 0, $3518 = 0, $3519 = 0, $352 = 0, $3520 = 0, $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0, $3525 = 0, $3526 = 0;
 var $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0, $3535 = 0, $3536 = 0, $3537 = 0, $3538 = 0, $3539 = 0, $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0, $3543 = 0, $3544 = 0;
 var $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0, $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3553 = 0, $3554 = 0, $3555 = 0, $3556 = 0, $3557 = 0, $3558 = 0, $3559 = 0, $356 = 0, $3560 = 0, $3561 = 0, $3562 = 0;
 var $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0, $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0, $3571 = 0, $3572 = 0, $3573 = 0, $3574 = 0, $3575 = 0, $3576 = 0, $3577 = 0, $3578 = 0, $3579 = 0, $358 = 0, $3580 = 0;
 var $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0, $359 = 0, $3590 = 0, $3591 = 0, $3592 = 0, $3593 = 0, $3594 = 0, $3595 = 0, $3596 = 0, $3597 = 0, $3598 = 0, $3599 = 0;
 var $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0, $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0, $3607 = 0, $3608 = 0, $3609 = 0, $361 = 0, $3610 = 0, $3611 = 0, $3612 = 0, $3613 = 0, $3614 = 0, $3615 = 0, $3616 = 0;
 var $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0, $3626 = 0, $3627 = 0, $3628 = 0, $3629 = 0, $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0, $3633 = 0, $3634 = 0;
 var $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0, $3644 = 0, $3645 = 0, $3646 = 0, $3647 = 0, $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0, $3651 = 0, $3652 = 0;
 var $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0, $3662 = 0, $3663 = 0, $3664 = 0, $3665 = 0, $3666 = 0, $3667 = 0, $3668 = 0, $3669 = 0, $367 = 0, $3670 = 0;
 var $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0, $3680 = 0, $3681 = 0, $3682 = 0, $3683 = 0, $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0, $3688 = 0, $3689 = 0;
 var $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0, $3698 = 0, $3699 = 0, $37 = 0, $370 = 0, $3700 = 0, $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0, $3705 = 0, $3706 = 0;
 var $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0, $3713 = 0, $3714 = 0, $3715 = 0, $3716 = 0, $3717 = 0, $3718 = 0, $3719 = 0, $372 = 0, $3720 = 0, $3721 = 0, $3722 = 0, $3723 = 0, $3724 = 0;
 var $3725 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3729 = 0, $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0, $3733 = 0, $3734 = 0, $3735 = 0, $3736 = 0, $3737 = 0, $3738 = 0, $3739 = 0, $374 = 0, $3740 = 0, $3741 = 0, $3742 = 0;
 var $3743 = 0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0, $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0, $3751 = 0, $3752 = 0, $3753 = 0, $3754 = 0, $3755 = 0, $3756 = 0, $3757 = 0, $3758 = 0, $3759 = 0, $376 = 0, $3760 = 0;
 var $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0, $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0, $377 = 0, $3770 = 0, $3771 = 0, $3772 = 0, $3773 = 0, $3774 = 0, $3775 = 0, $3776 = 0, $3777 = 0, $3778 = 0, $3779 = 0;
 var $378 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0, $3784 = 0, $3785 = 0, $3786 = 0, $3787 = 0, $3788 = 0, $3789 = 0, $379 = 0, $3790 = 0, $3791 = 0, $3792 = 0, $3793 = 0, $3794 = 0, $3795 = 0, $3796 = 0, $3797 = 0;
 var $3798 = 0, $3799 = 0, $38 = 0, $380 = 0, $3800 = 0, $3801 = 0, $3802 = 0, $3803 = 0, $3804 = 0, $3805 = 0, $3806 = 0, $3807 = 0, $3808 = 0, $3809 = 0, $381 = 0, $3810 = 0, $3811 = 0, $3812 = 0, $3813 = 0, $3814 = 0;
 var $3815 = 0, $3816 = 0, $3817 = 0, $3818 = 0, $3819 = 0, $382 = 0, $3820 = 0, $3821 = 0, $3822 = 0, $3823 = 0, $3824 = 0, $3825 = 0, $3826 = 0, $3827 = 0, $3828 = 0, $3829 = 0, $383 = 0, $3830 = 0, $3831 = 0, $3832 = 0;
 var $3833 = 0, $3834 = 0, $3835 = 0, $3836 = 0, $3837 = 0, $3838 = 0, $3839 = 0, $384 = 0, $3840 = 0, $3841 = 0, $3842 = 0, $3843 = 0, $3844 = 0, $3845 = 0, $3846 = 0, $3847 = 0, $3848 = 0, $3849 = 0, $385 = 0, $3850 = 0;
 var $3851 = 0, $3852 = 0, $3853 = 0, $3854 = 0, $3855 = 0, $3856 = 0, $3857 = 0, $3858 = 0, $3859 = 0, $386 = 0, $3860 = 0, $3861 = 0, $3862 = 0, $3863 = 0, $3864 = 0, $3865 = 0, $3866 = 0, $3867 = 0, $3868 = 0, $3869 = 0;
 var $387 = 0, $3870 = 0, $3871 = 0, $3872 = 0, $3873 = 0, $3874 = 0, $3875 = 0, $3876 = 0, $3877 = 0, $3878 = 0, $3879 = 0, $388 = 0, $3880 = 0, $3881 = 0, $3882 = 0, $3883 = 0, $3884 = 0, $3885 = 0, $3886 = 0, $3887 = 0;
 var $3888 = 0, $3889 = 0, $389 = 0, $3890 = 0, $3891 = 0, $3892 = 0, $3893 = 0, $3894 = 0, $3895 = 0, $3896 = 0, $3897 = 0, $3898 = 0, $3899 = 0, $39 = 0, $390 = 0, $3900 = 0, $3901 = 0, $3902 = 0, $3903 = 0, $3904 = 0;
 var $3905 = 0, $3906 = 0, $3907 = 0, $3908 = 0, $3909 = 0, $391 = 0, $3910 = 0, $3911 = 0, $3912 = 0, $3913 = 0, $3914 = 0, $3915 = 0, $3916 = 0, $3917 = 0, $3918 = 0, $3919 = 0, $392 = 0, $3920 = 0, $3921 = 0, $3922 = 0;
 var $3923 = 0, $3924 = 0, $3925 = 0, $3926 = 0, $3927 = 0, $3928 = 0, $3929 = 0, $393 = 0, $3930 = 0, $3931 = 0, $3932 = 0, $3933 = 0, $3934 = 0, $3935 = 0, $3936 = 0, $3937 = 0, $3938 = 0, $3939 = 0, $394 = 0, $3940 = 0;
 var $3941 = 0, $3942 = 0, $3943 = 0, $3944 = 0, $3945 = 0, $3946 = 0, $3947 = 0, $3948 = 0, $3949 = 0, $395 = 0, $3950 = 0, $3951 = 0, $3952 = 0, $3953 = 0, $3954 = 0, $3955 = 0, $3956 = 0, $3957 = 0, $3958 = 0, $3959 = 0;
 var $396 = 0, $3960 = 0, $3961 = 0, $3962 = 0, $3963 = 0, $3964 = 0, $3965 = 0, $3966 = 0, $3967 = 0, $3968 = 0, $3969 = 0, $397 = 0, $3970 = 0, $3971 = 0, $3972 = 0, $3973 = 0, $3974 = 0, $3975 = 0, $3976 = 0, $3977 = 0;
 var $3978 = 0, $3979 = 0, $398 = 0, $3980 = 0, $3981 = 0, $3982 = 0, $3983 = 0, $3984 = 0, $3985 = 0, $3986 = 0, $3987 = 0, $3988 = 0, $3989 = 0, $399 = 0, $3990 = 0, $3991 = 0, $3992 = 0, $3993 = 0, $3994 = 0, $3995 = 0;
 var $3996 = 0, $3997 = 0, $3998 = 0, $3999 = 0, $4 = 0, $40 = 0, $400 = 0, $4000 = 0, $4001 = 0, $4002 = 0, $4003 = 0, $4004 = 0, $4005 = 0, $4006 = 0, $4007 = 0, $4008 = 0, $4009 = 0, $401 = 0, $4010 = 0, $4011 = 0;
 var $4012 = 0, $4013 = 0, $4014 = 0, $4015 = 0, $4016 = 0, $4017 = 0, $4018 = 0, $4019 = 0, $402 = 0, $4020 = 0, $4021 = 0, $4022 = 0, $4023 = 0, $4024 = 0, $4025 = 0, $4026 = 0, $4027 = 0, $4028 = 0, $4029 = 0, $403 = 0;
 var $4030 = 0, $4031 = 0, $4032 = 0, $4033 = 0, $4034 = 0, $4035 = 0, $4036 = 0, $4037 = 0, $4038 = 0, $4039 = 0, $404 = 0, $4040 = 0, $4041 = 0, $4042 = 0, $4043 = 0, $4044 = 0, $4045 = 0, $4046 = 0, $4047 = 0, $4048 = 0;
 var $4049 = 0, $405 = 0, $4050 = 0, $4051 = 0, $4052 = 0, $4053 = 0, $4054 = 0, $4055 = 0, $4056 = 0, $4057 = 0, $4058 = 0, $4059 = 0, $406 = 0, $4060 = 0, $4061 = 0, $4062 = 0, $4063 = 0, $4064 = 0, $4065 = 0, $4066 = 0;
 var $4067 = 0, $4068 = 0, $4069 = 0, $407 = 0, $4070 = 0, $4071 = 0, $4072 = 0, $4073 = 0, $4074 = 0, $4075 = 0, $4076 = 0, $4077 = 0, $4078 = 0, $4079 = 0, $408 = 0, $4080 = 0, $4081 = 0, $4082 = 0, $4083 = 0, $4084 = 0;
 var $4085 = 0, $4086 = 0, $4087 = 0, $4088 = 0, $4089 = 0, $409 = 0, $4090 = 0, $4091 = 0, $4092 = 0, $4093 = 0, $4094 = 0, $4095 = 0, $4096 = 0, $4097 = 0, $4098 = 0, $4099 = 0, $41 = 0, $410 = 0, $4100 = 0, $4101 = 0;
 var $4102 = 0, $4103 = 0, $4104 = 0, $4105 = 0, $4106 = 0, $4107 = 0, $4108 = 0, $4109 = 0, $411 = 0, $4110 = 0, $4111 = 0, $4112 = 0, $4113 = 0, $4114 = 0, $4115 = 0, $4116 = 0, $4117 = 0, $4118 = 0, $4119 = 0, $412 = 0;
 var $4120 = 0, $4121 = 0, $4122 = 0, $4123 = 0, $4124 = 0, $4125 = 0, $4126 = 0, $4127 = 0, $4128 = 0, $4129 = 0, $413 = 0, $4130 = 0, $4131 = 0, $4132 = 0, $4133 = 0, $4134 = 0, $4135 = 0, $4136 = 0, $4137 = 0, $4138 = 0;
 var $4139 = 0, $414 = 0, $4140 = 0, $4141 = 0, $4142 = 0, $4143 = 0, $4144 = 0, $4145 = 0, $4146 = 0, $4147 = 0, $4148 = 0, $4149 = 0, $415 = 0, $4150 = 0, $4151 = 0, $4152 = 0, $4153 = 0, $4154 = 0, $4155 = 0, $4156 = 0;
 var $4157 = 0, $4158 = 0, $4159 = 0, $416 = 0, $4160 = 0, $4161 = 0, $4162 = 0, $4163 = 0, $4164 = 0, $4165 = 0, $4166 = 0, $4167 = 0, $4168 = 0, $4169 = 0, $417 = 0, $4170 = 0, $4171 = 0, $4172 = 0, $4173 = 0, $4174 = 0;
 var $4175 = 0, $4176 = 0, $4177 = 0, $4178 = 0, $4179 = 0, $418 = 0, $4180 = 0, $4181 = 0, $4182 = 0, $4183 = 0, $4184 = 0, $4185 = 0, $4186 = 0, $4187 = 0, $4188 = 0, $4189 = 0, $419 = 0, $4190 = 0, $4191 = 0, $4192 = 0;
 var $4193 = 0, $4194 = 0, $4195 = 0, $4196 = 0, $4197 = 0, $4198 = 0, $4199 = 0, $42 = 0, $420 = 0, $4200 = 0, $4201 = 0, $4202 = 0, $4203 = 0, $4204 = 0, $4205 = 0, $4206 = 0, $4207 = 0, $4208 = 0, $4209 = 0, $421 = 0;
 var $4210 = 0, $4211 = 0, $4212 = 0, $4213 = 0, $4214 = 0, $4215 = 0, $4216 = 0, $4217 = 0, $4218 = 0, $4219 = 0, $422 = 0, $4220 = 0, $4221 = 0, $4222 = 0, $4223 = 0, $4224 = 0, $4225 = 0, $4226 = 0, $4227 = 0, $4228 = 0;
 var $4229 = 0, $423 = 0, $4230 = 0, $4231 = 0, $4232 = 0, $4233 = 0, $4234 = 0, $4235 = 0, $4236 = 0, $4237 = 0, $4238 = 0, $4239 = 0, $424 = 0, $4240 = 0, $4241 = 0, $4242 = 0, $4243 = 0, $4244 = 0, $4245 = 0, $4246 = 0;
 var $4247 = 0, $4248 = 0, $4249 = 0, $425 = 0, $4250 = 0, $4251 = 0, $4252 = 0, $4253 = 0, $4254 = 0, $4255 = 0, $4256 = 0, $4257 = 0, $4258 = 0, $4259 = 0, $426 = 0, $4260 = 0, $4261 = 0, $4262 = 0, $4263 = 0, $4264 = 0;
 var $4265 = 0, $4266 = 0, $4267 = 0, $4268 = 0, $4269 = 0, $427 = 0, $4270 = 0, $4271 = 0, $4272 = 0, $4273 = 0, $4274 = 0, $4275 = 0, $4276 = 0, $4277 = 0, $4278 = 0, $4279 = 0, $428 = 0, $4280 = 0, $4281 = 0, $4282 = 0;
 var $4283 = 0, $4284 = 0, $4285 = 0, $4286 = 0, $4287 = 0, $4288 = 0, $4289 = 0, $429 = 0, $4290 = 0, $4291 = 0, $4292 = 0, $4293 = 0, $4294 = 0, $4295 = 0, $4296 = 0, $4297 = 0, $4298 = 0, $4299 = 0, $43 = 0, $430 = 0;
 var $4300 = 0, $4301 = 0, $4302 = 0, $4303 = 0, $4304 = 0, $4305 = 0, $4306 = 0, $4307 = 0, $4308 = 0, $4309 = 0, $431 = 0, $4310 = 0, $4311 = 0, $4312 = 0, $4313 = 0, $4314 = 0, $4315 = 0, $4316 = 0, $4317 = 0, $4318 = 0;
 var $4319 = 0, $432 = 0, $4320 = 0, $4321 = 0, $4322 = 0, $4323 = 0, $4324 = 0, $4325 = 0, $4326 = 0, $4327 = 0, $4328 = 0, $4329 = 0, $433 = 0, $4330 = 0, $4331 = 0, $4332 = 0, $4333 = 0, $4334 = 0, $4335 = 0, $4336 = 0;
 var $4337 = 0, $4338 = 0, $4339 = 0, $434 = 0, $4340 = 0, $4341 = 0, $4342 = 0, $4343 = 0, $4344 = 0, $4345 = 0, $4346 = 0, $4347 = 0, $4348 = 0, $4349 = 0, $435 = 0, $4350 = 0, $4351 = 0, $4352 = 0, $4353 = 0, $4354 = 0;
 var $4355 = 0, $4356 = 0, $4357 = 0, $4358 = 0, $4359 = 0, $436 = 0, $4360 = 0, $4361 = 0, $4362 = 0, $4363 = 0, $4364 = 0, $4365 = 0, $4366 = 0, $4367 = 0, $4368 = 0, $4369 = 0, $437 = 0, $4370 = 0, $4371 = 0, $4372 = 0;
 var $4373 = 0, $4374 = 0, $4375 = 0, $4376 = 0, $4377 = 0, $4378 = 0, $4379 = 0, $438 = 0, $4380 = 0, $4381 = 0, $4382 = 0, $4383 = 0, $4384 = 0, $4385 = 0, $4386 = 0, $4387 = 0, $4388 = 0, $4389 = 0, $439 = 0, $4390 = 0;
 var $4391 = 0, $4392 = 0, $4393 = 0, $4394 = 0, $4395 = 0, $4396 = 0, $4397 = 0, $4398 = 0, $4399 = 0, $44 = 0, $440 = 0, $4400 = 0, $4401 = 0, $4402 = 0, $4403 = 0, $4404 = 0, $4405 = 0, $4406 = 0, $4407 = 0, $4408 = 0;
 var $4409 = 0, $441 = 0, $4410 = 0, $4411 = 0, $4412 = 0, $4413 = 0, $4414 = 0, $4415 = 0, $4416 = 0, $4417 = 0, $4418 = 0, $4419 = 0, $442 = 0, $4420 = 0, $4421 = 0, $4422 = 0, $4423 = 0, $4424 = 0, $4425 = 0, $4426 = 0;
 var $4427 = 0, $4428 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bb$sroa$0$0680 = 0;
 var $bb$sroa$0$10301 = 0, $bb$sroa$0$11271 = 0, $bb$sroa$0$12216 = 0, $bb$sroa$0$1672 = 0, $bb$sroa$0$2$ph = 0, $bb$sroa$0$2665 = 0, $bb$sroa$0$3$ph = 0, $bb$sroa$0$3657 = 0, $bb$sroa$0$4648 = 0, $bb$sroa$0$5639 = 0, $bb$sroa$0$6575 = 0, $bb$sroa$0$7542 = 0, $bb$sroa$0$8478 = 0, $bb$sroa$0$9445 = 0, $bb$sroa$1$0681 = 0, $bb$sroa$1$10302 = 0, $bb$sroa$1$11272 = 0, $bb$sroa$1$12217 = 0, $bb$sroa$1$1673 = 0, $bb$sroa$1$2$ph = 0;
 var $bb$sroa$1$2666 = 0, $bb$sroa$1$3$ph = 0, $bb$sroa$1$3658 = 0, $bb$sroa$1$4649 = 0, $bb$sroa$1$5640 = 0, $bb$sroa$1$6576 = 0, $bb$sroa$1$7543 = 0, $bb$sroa$1$8479 = 0, $bb$sroa$1$9446 = 0, $bb$sroa$2$0682 = 0, $bb$sroa$2$10416 = 0, $bb$sroa$2$11273 = 0, $bb$sroa$2$12218 = 0, $bb$sroa$2$1674 = 0, $bb$sroa$2$2$ph = 0, $bb$sroa$2$2667 = 0, $bb$sroa$2$3$ph = 0, $bb$sroa$2$3659 = 0, $bb$sroa$2$4650 = 0, $bb$sroa$2$5641 = 0;
 var $bb$sroa$2$6604 = 0, $bb$sroa$2$7544 = 0, $bb$sroa$2$8507 = 0, $bb$sroa$2$9447 = 0, $bb_check$sroa$0$0 = 0, $bb_check$sroa$0$1 = 0, $bb_check$sroa$0$2 = 0, $bb_check$sroa$0$3 = 0, $bb_check$sroa$0$4 = 0, $bb_check$sroa$0$5 = 0, $bb_check$sroa$0$6 = 0, $bb_check$sroa$0$7 = 0, $bb_check$sroa$0$8 = 0, $bb_check$sroa$1$0 = 0, $bb_check$sroa$1$1 = 0, $bb_check$sroa$1$10 = 0, $bb_check$sroa$1$2 = 0, $bb_check$sroa$1$3 = 0, $bb_check$sroa$1$4 = 0, $bb_check$sroa$1$5 = 0;
 var $bb_check$sroa$1$6 = 0, $bb_check$sroa$1$7372 = 0, $bb_check$sroa$1$8314 = 0, $bb_check$sroa$1$9 = 0, $bb_check$sroa$2$0 = 0, $bb_check$sroa$2$1 = 0, $bb_check$sroa$2$10 = 0, $bb_check$sroa$2$11165 = 0, $bb_check$sroa$2$2 = 0, $bb_check$sroa$2$3 = 0, $bb_check$sroa$2$4 = 0, $bb_check$sroa$2$5 = 0, $bb_check$sroa$2$6 = 0, $bb_check$sroa$2$7371 = 0, $bb_check$sroa$2$8313 = 0, $bb_check$sroa$2$9 = 0, $bb_check_pro$sroa$0$0366 = 0, $bb_check_pro$sroa$1$0365 = 0, $bb_check_pro$sroa$1$1308 = 0, $bb_check_pro$sroa$1$2167 = 0;
 var $storemerge = 0, $storemerge70 = 0, $ubb$0358 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ptree) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ptree) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | $1;
 $5 = (($ptree) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($ptree) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 | $6;
 $10 = (($ptree) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($ptree) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 | $11;
 $15 = $4 ^ -1;
 $16 = $9 ^ -1;
 $17 = $14 ^ -1;
 $18 = (($ptree) + 504|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 1572864;
 $21 = ($20|0)==(0);
 L1: do {
  if ($21) {
   $81 = $19 & 224;
   $82 = ($81|0)==(0);
   if (!($82)) {
    $83 = (($ptree) + 593|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = ($84&255)>(8);
    if ($85) {
     $86 = $84&255;
     $87 = (($86) + -9)|0;
     $88 = ((($ptree) + ($87)|0) + 512|0);
     $89 = HEAP8[$88>>0]|0;
     $90 = ($89<<24>>24)==(0);
     if ($90) {
      $91 = (_is_black_attacked($ptree,$87)|0);
      $92 = ($91|0)==(0);
      if (!($92)) {
       $93 = (33953152 + (($87*1536)|0)|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = ((33953152 + (($87*1536)|0)|0) + 4|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = ((33953152 + (($87*1536)|0)|0) + 8|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = (_can_b_king_escape($ptree,$87,$94,$96,$98)|0);
       $100 = ($99|0)==(0);
       if ($100) {
        $101 = (_can_b_piece_capture($ptree,$87)|0);
        $102 = ($101|0)==(0);
        if ($102) {
         $103 = $87 | 10496;
         $$0 = $103;
         STACKTOP = sp;return ($$0|0);
        }
       }
      }
     }
    }
   }
  } else {
   $22 = (($ptree) + 593|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = (33577952 + (($24*12)|0)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (33575024 + (($24*12)|0)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((33577952 + (($24*12)|0)|0) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((33575024 + (($24*12)|0)|0) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((33577952 + (($24*12)|0)|0) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((33575024 + (($24*12)|0)|0) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $26 & $15;
   $38 = $37 & $28;
   $39 = $30 & $16;
   $40 = $39 & $32;
   $41 = $34 & $17;
   $42 = $41 & $36;
   $43 = $40 | $38;
   $44 = $43 | $42;
   $45 = ($44|0)==(0);
   if (!($45)) {
    $bb$sroa$0$0680 = $38;$bb$sroa$1$0681 = $40;$bb$sroa$2$0682 = $42;
    while(1) {
     $46 = (_last_one210($bb$sroa$2$0682,$bb$sroa$1$0681,$bb$sroa$0$0680)|0);
     $47 = (34156304 + (($46*12)|0)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = $48 ^ $bb$sroa$0$0680;
     $50 = ((34156304 + (($46*12)|0)|0) + 4|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = $51 ^ $bb$sroa$1$0681;
     $53 = ((34156304 + (($46*12)|0)|0) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $54 ^ $bb$sroa$2$0682;
     $56 = (_is_black_attacked($ptree,$46)|0);
     $57 = ($56|0)==(0);
     if (!($57)) {
      $61 = (33953152 + (($46*1536)|0)|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = (33828736 + (($46*1536)|0)|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = $64 | $62;
      $66 = ((33953152 + (($46*1536)|0)|0) + 4|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ((33828736 + (($46*1536)|0)|0) + 4|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = $69 | $67;
      $71 = ((33953152 + (($46*1536)|0)|0) + 8|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ((33828736 + (($46*1536)|0)|0) + 8|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = $74 | $72;
      $76 = (_can_b_king_escape($ptree,$46,$65,$70,$75)|0);
      $77 = ($76|0)==(0);
      if ($77) {
       $78 = (_can_b_piece_capture($ptree,$46)|0);
       $79 = ($78|0)==(0);
       if ($79) {
        break;
       }
      }
     }
     $58 = $52 | $49;
     $59 = $58 | $55;
     $60 = ($59|0)==(0);
     if ($60) {
      break L1;
     } else {
      $bb$sroa$0$0680 = $49;$bb$sroa$1$0681 = $52;$bb$sroa$2$0682 = $55;
     }
    }
    $80 = $46 | 11136;
    $$0 = $80;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $104 = HEAP32[$18>>2]|0;
 $105 = $104 & 393216;
 $106 = ($105|0)==(0);
 do {
  if ($106) {
   $167 = $104;
  } else {
   $107 = (($ptree) + 593|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = $108&255;
   $110 = (33576976 + (($109*12)|0)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (33574048 + (($109*12)|0)|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = ((33576976 + (($109*12)|0)|0) + 4|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ((33574048 + (($109*12)|0)|0) + 4|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ((33576976 + (($109*12)|0)|0) + 8|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ((33574048 + (($109*12)|0)|0) + 8|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $111 & $15;
   $123 = $122 & $113;
   $124 = $115 & $16;
   $125 = $124 & $117;
   $126 = $119 & $17;
   $127 = $126 & $121;
   $128 = $125 | $123;
   $129 = $128 | $127;
   $130 = ($129|0)==(0);
   if ($130) {
    $167 = $104;
   } else {
    $bb$sroa$0$1672 = $123;$bb$sroa$1$1673 = $125;$bb$sroa$2$1674 = $127;
    while(1) {
     $131 = (_last_one210($bb$sroa$2$1674,$bb$sroa$1$1673,$bb$sroa$0$1672)|0);
     $132 = (34156304 + (($131*12)|0)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = $133 ^ $bb$sroa$0$1672;
     $135 = ((34156304 + (($131*12)|0)|0) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 ^ $bb$sroa$1$1673;
     $138 = ((34156304 + (($131*12)|0)|0) + 8|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $139 ^ $bb$sroa$2$1674;
     $141 = (_is_black_attacked($ptree,$131)|0);
     $142 = ($141|0)==(0);
     if (!($142)) {
      $146 = (33704320 + (($131*1536)|0)|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (33579904 + (($131*1536)|0)|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = $149 | $147;
      $151 = ((33704320 + (($131*1536)|0)|0) + 4|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = ((33579904 + (($131*1536)|0)|0) + 4|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = $154 | $152;
      $156 = ((33704320 + (($131*1536)|0)|0) + 8|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ((33579904 + (($131*1536)|0)|0) + 8|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = $159 | $157;
      $161 = (_can_b_king_escape($ptree,$131,$150,$155,$160)|0);
      $162 = ($161|0)==(0);
      if ($162) {
       $163 = (_can_b_piece_capture($ptree,$131)|0);
       $164 = ($163|0)==(0);
       if ($164) {
        break;
       }
      }
     }
     $143 = $137 | $134;
     $144 = $143 | $140;
     $145 = ($144|0)==(0);
     if ($145) {
      label = 22;
      break;
     } else {
      $bb$sroa$0$1672 = $134;$bb$sroa$1$1673 = $137;$bb$sroa$2$1674 = $140;
     }
    }
    if ((label|0) == 22) {
     $$pre$pre = HEAP32[$18>>2]|0;
     $167 = $$pre$pre;
     break;
    }
    $165 = $131 | 11008;
    $$0 = $165;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $166 = $167 & 114688;
 $168 = ($166|0)==(0);
 do {
  if ($168) {
   $243 = $167;
  } else {
   $169 = $167 & 1572864;
   $170 = ($169|0)==(0);
   $171 = (($ptree) + 593|0);
   $172 = HEAP8[$171>>0]|0;
   $173 = $172&255;
   if ($170) {
    $204 = (33575024 + (($173*12)|0)|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = $205 & $15;
    $207 = ((33575024 + (($173*12)|0)|0) + 4|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = $208 & $16;
    $210 = ((33575024 + (($173*12)|0)|0) + 8|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = $211 & $17;
    $bb$sroa$0$2$ph = $206;$bb$sroa$1$2$ph = $209;$bb$sroa$2$2$ph = $212;
   } else {
    $174 = (33577952 + (($173*12)|0)|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = (33576976 + (($173*12)|0)|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = $177 & $175;
    $179 = ((33577952 + (($173*12)|0)|0) + 4|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ((33576976 + (($173*12)|0)|0) + 4|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = $182 & $180;
    $184 = ((33577952 + (($173*12)|0)|0) + 8|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = ((33576976 + (($173*12)|0)|0) + 8|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = $187 & $185;
    $189 = $178 ^ -1;
    $190 = $189 & $15;
    $191 = $183 ^ -1;
    $192 = $191 & $16;
    $193 = $188 ^ -1;
    $194 = $193 & $17;
    $195 = (33575024 + (($173*12)|0)|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = $190 & $196;
    $198 = ((33575024 + (($173*12)|0)|0) + 4|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = $192 & $199;
    $201 = ((33575024 + (($173*12)|0)|0) + 8|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = $194 & $202;
    $bb$sroa$0$2$ph = $197;$bb$sroa$1$2$ph = $200;$bb$sroa$2$2$ph = $203;
   }
   $213 = $bb$sroa$1$2$ph | $bb$sroa$0$2$ph;
   $214 = $213 | $bb$sroa$2$2$ph;
   $215 = ($214|0)==(0);
   if ($215) {
    $243 = $167;
   } else {
    $bb$sroa$0$2665 = $bb$sroa$0$2$ph;$bb$sroa$1$2666 = $bb$sroa$1$2$ph;$bb$sroa$2$2667 = $bb$sroa$2$2$ph;
    while(1) {
     $216 = (_last_one210($bb$sroa$2$2667,$bb$sroa$1$2666,$bb$sroa$0$2665)|0);
     $217 = (34156304 + (($216*12)|0)|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = $218 ^ $bb$sroa$0$2665;
     $220 = ((34156304 + (($216*12)|0)|0) + 4|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = $221 ^ $bb$sroa$1$2666;
     $223 = ((34156304 + (($216*12)|0)|0) + 8|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = $224 ^ $bb$sroa$2$2667;
     $226 = (_is_black_attacked($ptree,$216)|0);
     $227 = ($226|0)==(0);
     if (!($227)) {
      $231 = (33577952 + (($216*12)|0)|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = ((33577952 + (($216*12)|0)|0) + 4|0);
      $234 = HEAP32[$233>>2]|0;
      $235 = ((33577952 + (($216*12)|0)|0) + 8|0);
      $236 = HEAP32[$235>>2]|0;
      $237 = (_can_b_king_escape($ptree,$216,$232,$234,$236)|0);
      $238 = ($237|0)==(0);
      if ($238) {
       $239 = (_can_b_piece_capture($ptree,$216)|0);
       $240 = ($239|0)==(0);
       if ($240) {
        break;
       }
      }
     }
     $228 = $222 | $219;
     $229 = $228 | $225;
     $230 = ($229|0)==(0);
     if ($230) {
      label = 33;
      break;
     } else {
      $bb$sroa$0$2665 = $219;$bb$sroa$1$2666 = $222;$bb$sroa$2$2667 = $225;
     }
    }
    if ((label|0) == 33) {
     $$pre987$pre = HEAP32[$18>>2]|0;
     $243 = $$pre987$pre;
     break;
    }
    $241 = $216 | 10880;
    $$0 = $241;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $242 = $243 & 14336;
 $244 = ($242|0)==(0);
 do {
  if ($244) {
   $326 = $243;
  } else {
   $245 = $243 & 114688;
   $246 = ($245|0)==(0);
   if ($246) {
    $273 = (($ptree) + 593|0);
    $274 = HEAP8[$273>>0]|0;
    $275 = $274&255;
    $276 = (33574048 + (($275*12)|0)|0);
    $277 = HEAP32[$276>>2]|0;
    $278 = $277 & $15;
    $279 = ((33574048 + (($275*12)|0)|0) + 4|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = $280 & $16;
    $282 = ((33574048 + (($275*12)|0)|0) + 8|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = $283 & $17;
    $285 = $243 & 393216;
    $286 = ($285|0)==(0);
    if ($286) {
     $bb$sroa$0$3$ph = $278;$bb$sroa$1$3$ph = $281;$bb$sroa$2$3$ph = $284;
    } else {
     $287 = (33575024 + (($275*12)|0)|0);
     $288 = HEAP32[$287>>2]|0;
     $289 = $288 & $278;
     $290 = ((33575024 + (($275*12)|0)|0) + 4|0);
     $291 = HEAP32[$290>>2]|0;
     $292 = $291 & $281;
     $293 = ((33575024 + (($275*12)|0)|0) + 8|0);
     $294 = HEAP32[$293>>2]|0;
     $295 = $294 & $284;
     $bb$sroa$0$3$ph = $289;$bb$sroa$1$3$ph = $292;$bb$sroa$2$3$ph = $295;
    }
   } else {
    $247 = $243 & 393216;
    $248 = ($247|0)==(0);
    if (!($248)) {
     $326 = $243;
     break;
    }
    $249 = (($ptree) + 593|0);
    $250 = HEAP8[$249>>0]|0;
    $251 = $250&255;
    $252 = (33574048 + (($251*12)|0)|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = (33575024 + (($251*12)|0)|0);
    $255 = HEAP32[$254>>2]|0;
    $256 = $255 ^ -1;
    $257 = ((33574048 + (($251*12)|0)|0) + 4|0);
    $258 = HEAP32[$257>>2]|0;
    $259 = ((33575024 + (($251*12)|0)|0) + 4|0);
    $260 = HEAP32[$259>>2]|0;
    $261 = $260 ^ -1;
    $262 = ((33574048 + (($251*12)|0)|0) + 8|0);
    $263 = HEAP32[$262>>2]|0;
    $264 = ((33575024 + (($251*12)|0)|0) + 8|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = $265 ^ -1;
    $267 = $253 & $15;
    $268 = $267 & $256;
    $269 = $258 & $16;
    $270 = $269 & $261;
    $271 = $263 & $17;
    $272 = $271 & $266;
    $bb$sroa$0$3$ph = $268;$bb$sroa$1$3$ph = $270;$bb$sroa$2$3$ph = $272;
   }
   $296 = $bb$sroa$1$3$ph | $bb$sroa$0$3$ph;
   $297 = $296 | $bb$sroa$2$3$ph;
   $298 = ($297|0)==(0);
   if ($298) {
    $326 = $243;
   } else {
    $bb$sroa$0$3657 = $bb$sroa$0$3$ph;$bb$sroa$1$3658 = $bb$sroa$1$3$ph;$bb$sroa$2$3659 = $bb$sroa$2$3$ph;
    while(1) {
     $299 = (_last_one210($bb$sroa$2$3659,$bb$sroa$1$3658,$bb$sroa$0$3657)|0);
     $300 = (34156304 + (($299*12)|0)|0);
     $301 = HEAP32[$300>>2]|0;
     $302 = $301 ^ $bb$sroa$0$3657;
     $303 = ((34156304 + (($299*12)|0)|0) + 4|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = $304 ^ $bb$sroa$1$3658;
     $306 = ((34156304 + (($299*12)|0)|0) + 8|0);
     $307 = HEAP32[$306>>2]|0;
     $308 = $307 ^ $bb$sroa$2$3659;
     $309 = (_is_black_attacked($ptree,$299)|0);
     $310 = ($309|0)==(0);
     if (!($310)) {
      $314 = (33576976 + (($299*12)|0)|0);
      $315 = HEAP32[$314>>2]|0;
      $316 = ((33576976 + (($299*12)|0)|0) + 4|0);
      $317 = HEAP32[$316>>2]|0;
      $318 = ((33576976 + (($299*12)|0)|0) + 8|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = (_can_b_king_escape($ptree,$299,$315,$317,$319)|0);
      $321 = ($320|0)==(0);
      if ($321) {
       $322 = (_can_b_piece_capture($ptree,$299)|0);
       $323 = ($322|0)==(0);
       if ($323) {
        break;
       }
      }
     }
     $311 = $305 | $302;
     $312 = $311 | $308;
     $313 = ($312|0)==(0);
     if ($313) {
      label = 46;
      break;
     } else {
      $bb$sroa$0$3657 = $302;$bb$sroa$1$3658 = $305;$bb$sroa$2$3659 = $308;
     }
    }
    if ((label|0) == 46) {
     $$pre988$pre = HEAP32[$18>>2]|0;
     $326 = $$pre988$pre;
     break;
    }
    $324 = $299 | 10752;
    $$0 = $324;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $325 = $326 & 1792;
 $327 = ($325|0)==(0);
 L69: do {
  if (!($327)) {
   $328 = (($ptree) + 593|0);
   $329 = HEAP8[$328>>0]|0;
   $330 = $329&255;
   $331 = (33573072 + (($330*12)|0)|0);
   $332 = HEAP32[$331>>2]|0;
   $333 = $332 & $15;
   $334 = ((33573072 + (($330*12)|0)|0) + 4|0);
   $335 = HEAP32[$334>>2]|0;
   $336 = $335 & $16;
   $337 = ((33573072 + (($330*12)|0)|0) + 8|0);
   $338 = HEAP32[$337>>2]|0;
   $339 = $338 & $17;
   $340 = $336 | $333;
   $341 = $340 | $339;
   $342 = ($341|0)==(0);
   if (!($342)) {
    $bb$sroa$0$4648 = $333;$bb$sroa$1$4649 = $336;$bb$sroa$2$4650 = $339;
    while(1) {
     $343 = (_last_one210($bb$sroa$2$4650,$bb$sroa$1$4649,$bb$sroa$0$4648)|0);
     $344 = (34156304 + (($343*12)|0)|0);
     $345 = HEAP32[$344>>2]|0;
     $346 = $345 ^ $bb$sroa$0$4648;
     $347 = ((34156304 + (($343*12)|0)|0) + 4|0);
     $348 = HEAP32[$347>>2]|0;
     $349 = $348 ^ $bb$sroa$1$4649;
     $350 = ((34156304 + (($343*12)|0)|0) + 8|0);
     $351 = HEAP32[$350>>2]|0;
     $352 = $351 ^ $bb$sroa$2$4650;
     $353 = (_can_b_king_escape($ptree,$343,0,0,0)|0);
     $354 = ($353|0)==(0);
     if ($354) {
      $358 = (_can_b_piece_capture($ptree,$343)|0);
      $359 = ($358|0)==(0);
      if ($359) {
       break;
      }
     }
     $355 = $349 | $346;
     $356 = $355 | $352;
     $357 = ($356|0)==(0);
     if ($357) {
      break L69;
     } else {
      $bb$sroa$0$4648 = $346;$bb$sroa$1$4649 = $349;$bb$sroa$2$4650 = $352;
     }
    }
    $360 = $343 | 10624;
    $$0 = $360;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $361 = HEAP32[$2>>2]|0;
 $362 = $361 ^ -1;
 $363 = HEAP32[$7>>2]|0;
 $364 = $363 ^ -1;
 $365 = HEAP32[$12>>2]|0;
 $366 = $365 ^ -1;
 $367 = (($ptree) + 344|0);
 $368 = HEAP32[$367>>2]|0;
 $369 = (($ptree) + 348|0);
 $370 = HEAP32[$369>>2]|0;
 $371 = (($ptree) + 352|0);
 $372 = HEAP32[$371>>2]|0;
 $373 = $370 | $368;
 $374 = $373 | $372;
 $375 = ($374|0)==(0);
 L79: do {
  if (!($375)) {
   $376 = (($ptree) + 593|0);
   $377 = (($ptree) + 80|0);
   $378 = (($ptree) + 84|0);
   $379 = (($ptree) + 88|0);
   $380 = (($ptree) + 152|0);
   $381 = (($ptree) + 156|0);
   $382 = (($ptree) + 160|0);
   $383 = (($ptree) + 32|0);
   $384 = (($ptree) + 36|0);
   $385 = (($ptree) + 40|0);
   $386 = (($ptree) + 44|0);
   $387 = (($ptree) + 48|0);
   $388 = (($ptree) + 52|0);
   $389 = (($ptree) + 56|0);
   $390 = (($ptree) + 60|0);
   $391 = (($ptree) + 64|0);
   $392 = (($ptree) + 594|0);
   $bb$sroa$0$5639 = $368;$bb$sroa$1$5640 = $370;$bb$sroa$2$5641 = $372;
   L81: while(1) {
    $393 = (_last_one210($bb$sroa$2$5641,$bb$sroa$1$5640,$bb$sroa$0$5639)|0);
    $394 = (34156304 + (($393*12)|0)|0);
    $395 = HEAP32[$394>>2]|0;
    $396 = $395 ^ $bb$sroa$0$5639;
    $397 = ((34156304 + (($393*12)|0)|0) + 4|0);
    $398 = HEAP32[$397>>2]|0;
    $399 = $398 ^ $bb$sroa$1$5640;
    $400 = ((34156304 + (($393*12)|0)|0) + 8|0);
    $401 = HEAP32[$400>>2]|0;
    $402 = $401 ^ $bb$sroa$2$5641;
    $403 = ((33572424 + ($393<<3)|0) + 2|0);
    $404 = HEAP8[$403>>0]|0;
    $405 = $404&255;
    $406 = ((($ptree) + ($405<<2)|0) + 32|0);
    $407 = HEAP32[$406>>2]|0;
    $408 = ((33572424 + ($393<<3)|0) + 3|0);
    $409 = HEAP8[$408>>0]|0;
    $410 = $409&255;
    $411 = $407 >>> $410;
    $412 = $411 & 127;
    $413 = ((33953152 + (($393*1536)|0)|0) + (($412*12)|0)|0);
    $414 = HEAP32[$413>>2]|0;
    $415 = (33572424 + ($393<<3)|0);
    $416 = HEAP8[$415>>0]|0;
    $417 = $416&255;
    $418 = ((($ptree) + ($417<<2)|0) + 8|0);
    $419 = HEAP32[$418>>2]|0;
    $420 = ((($ptree) + ($417<<2)|0) + 20|0);
    $421 = HEAP32[$420>>2]|0;
    $422 = $421 | $419;
    $423 = ((33572424 + ($393<<3)|0) + 1|0);
    $424 = HEAP8[$423>>0]|0;
    $425 = $424&255;
    $426 = $422 >>> $425;
    $427 = $426 & 127;
    $428 = ((33828736 + (($393*1536)|0)|0) + (($427*12)|0)|0);
    $429 = HEAP32[$428>>2]|0;
    $430 = $429 | $414;
    $431 = (((33953152 + (($393*1536)|0)|0) + (($412*12)|0)|0) + 4|0);
    $432 = HEAP32[$431>>2]|0;
    $433 = (((33828736 + (($393*1536)|0)|0) + (($427*12)|0)|0) + 4|0);
    $434 = HEAP32[$433>>2]|0;
    $435 = $434 | $432;
    $436 = (((33953152 + (($393*1536)|0)|0) + (($412*12)|0)|0) + 8|0);
    $437 = HEAP32[$436>>2]|0;
    $438 = (((33828736 + (($393*1536)|0)|0) + (($427*12)|0)|0) + 8|0);
    $439 = HEAP32[$438>>2]|0;
    $440 = $439 | $437;
    $441 = (33578928 + (($393*12)|0)|0);
    $442 = HEAP32[$441>>2]|0;
    $443 = $430 | $442;
    $444 = ((33578928 + (($393*12)|0)|0) + 4|0);
    $445 = HEAP32[$444>>2]|0;
    $446 = $435 | $445;
    $447 = ((33578928 + (($393*12)|0)|0) + 8|0);
    $448 = HEAP32[$447>>2]|0;
    $449 = $440 | $448;
    $450 = $443 & $362;
    $451 = $446 & $364;
    $452 = $449 & $366;
    $453 = HEAP8[$376>>0]|0;
    $454 = $453&255;
    $455 = (33578928 + (($454*12)|0)|0);
    $456 = HEAP32[$455>>2]|0;
    $457 = $450 & $456;
    $458 = ((33578928 + (($454*12)|0)|0) + 4|0);
    $459 = HEAP32[$458>>2]|0;
    $460 = $451 & $459;
    $461 = ((33578928 + (($454*12)|0)|0) + 8|0);
    $462 = HEAP32[$461>>2]|0;
    $463 = $452 & $462;
    $464 = $460 | $457;
    $465 = $464 | $463;
    $466 = ($465|0)==(0);
    if (!($466)) {
     $467 = HEAP32[$377>>2]|0;
     $468 = $467 ^ $395;
     HEAP32[$377>>2] = $468;
     $469 = HEAP32[$378>>2]|0;
     $470 = $469 ^ $398;
     HEAP32[$378>>2] = $470;
     $471 = HEAP32[$379>>2]|0;
     $472 = $471 ^ $401;
     HEAP32[$379>>2] = $472;
     $473 = HEAP32[$380>>2]|0;
     $474 = $473 ^ $395;
     HEAP32[$380>>2] = $474;
     $475 = HEAP32[$381>>2]|0;
     $476 = $475 ^ $398;
     HEAP32[$381>>2] = $476;
     $477 = HEAP32[$382>>2]|0;
     $478 = $477 ^ $401;
     HEAP32[$382>>2] = $478;
     $479 = HEAP32[$2>>2]|0;
     $480 = $479 ^ $395;
     HEAP32[$2>>2] = $480;
     $481 = HEAP32[$7>>2]|0;
     $482 = $481 ^ $398;
     HEAP32[$7>>2] = $482;
     $483 = HEAP32[$12>>2]|0;
     $484 = $483 ^ $401;
     HEAP32[$12>>2] = $484;
     $485 = (34157280 + (($393*12)|0)|0);
     $486 = HEAP32[$485>>2]|0;
     $487 = HEAP32[$383>>2]|0;
     $488 = $487 ^ $486;
     HEAP32[$383>>2] = $488;
     $489 = ((34157280 + (($393*12)|0)|0) + 4|0);
     $490 = HEAP32[$489>>2]|0;
     $491 = HEAP32[$384>>2]|0;
     $492 = $491 ^ $490;
     HEAP32[$384>>2] = $492;
     $493 = ((34157280 + (($393*12)|0)|0) + 8|0);
     $494 = HEAP32[$493>>2]|0;
     $495 = HEAP32[$385>>2]|0;
     $496 = $495 ^ $494;
     HEAP32[$385>>2] = $496;
     $497 = (34158256 + (($393*12)|0)|0);
     $498 = HEAP32[$497>>2]|0;
     $499 = HEAP32[$386>>2]|0;
     $500 = $499 ^ $498;
     HEAP32[$386>>2] = $500;
     $501 = ((34158256 + (($393*12)|0)|0) + 4|0);
     $502 = HEAP32[$501>>2]|0;
     $503 = HEAP32[$387>>2]|0;
     $504 = $503 ^ $502;
     HEAP32[$387>>2] = $504;
     $505 = ((34158256 + (($393*12)|0)|0) + 8|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = HEAP32[$388>>2]|0;
     $508 = $507 ^ $506;
     HEAP32[$388>>2] = $508;
     $509 = (34159232 + (($393*12)|0)|0);
     $510 = HEAP32[$509>>2]|0;
     $511 = HEAP32[$389>>2]|0;
     $512 = $511 ^ $510;
     HEAP32[$389>>2] = $512;
     $513 = ((34159232 + (($393*12)|0)|0) + 4|0);
     $514 = HEAP32[$513>>2]|0;
     $515 = HEAP32[$390>>2]|0;
     $516 = $515 ^ $514;
     HEAP32[$390>>2] = $516;
     $517 = ((34159232 + (($393*12)|0)|0) + 8|0);
     $518 = HEAP32[$517>>2]|0;
     $519 = HEAP32[$391>>2]|0;
     $520 = $519 ^ $518;
     HEAP32[$391>>2] = $520;
     $bb_check$sroa$0$0 = $457;$bb_check$sroa$1$0 = $460;$bb_check$sroa$2$0 = $463;
     while(1) {
      $521 = (_last_one210($bb_check$sroa$2$0,$bb_check$sroa$1$0,$bb_check$sroa$0$0)|0);
      $522 = (34156304 + (($521*12)|0)|0);
      $523 = HEAP32[$522>>2]|0;
      $524 = $523 ^ $bb_check$sroa$0$0;
      $525 = ((34156304 + (($521*12)|0)|0) + 4|0);
      $526 = HEAP32[$525>>2]|0;
      $527 = $526 ^ $bb_check$sroa$1$0;
      $528 = ((34156304 + (($521*12)|0)|0) + 8|0);
      $529 = HEAP32[$528>>2]|0;
      $530 = $529 ^ $bb_check$sroa$2$0;
      $531 = (_is_black_attacked($ptree,$521)|0);
      $532 = ($531|0)==(0);
      do {
       if (!($532)) {
        $533 = HEAP8[$376>>0]|0;
        $534 = $533&255;
        $535 = ((220518304 + (($534*81)|0)|0) + ($521)|0);
        $536 = HEAP8[$535>>0]|0;
        $537 = $536 & 2;
        $538 = ($537<<24>>24)==(0);
        if ($538) {
         $563 = ((33572424 + ($521<<3)|0) + 2|0);
         $564 = HEAP8[$563>>0]|0;
         $565 = $564&255;
         $566 = ((($ptree) + ($565<<2)|0) + 32|0);
         $567 = HEAP32[$566>>2]|0;
         $568 = ((33572424 + ($521<<3)|0) + 3|0);
         $569 = HEAP8[$568>>0]|0;
         $570 = $569&255;
         $571 = $567 >>> $570;
         $572 = $571 & 127;
         $573 = ((33953152 + (($521*1536)|0)|0) + (($572*12)|0)|0);
         $574 = HEAP32[$573>>2]|0;
         $575 = (33572424 + ($521<<3)|0);
         $576 = HEAP8[$575>>0]|0;
         $577 = $576&255;
         $578 = ((($ptree) + ($577<<2)|0) + 8|0);
         $579 = HEAP32[$578>>2]|0;
         $580 = ((($ptree) + ($577<<2)|0) + 20|0);
         $581 = HEAP32[$580>>2]|0;
         $582 = $581 | $579;
         $583 = ((33572424 + ($521<<3)|0) + 1|0);
         $584 = HEAP8[$583>>0]|0;
         $585 = $584&255;
         $586 = $582 >>> $585;
         $587 = $586 & 127;
         $588 = ((33828736 + (($521*1536)|0)|0) + (($587*12)|0)|0);
         $589 = HEAP32[$588>>2]|0;
         $590 = $589 | $574;
         $591 = (((33953152 + (($521*1536)|0)|0) + (($572*12)|0)|0) + 4|0);
         $592 = HEAP32[$591>>2]|0;
         $593 = (((33828736 + (($521*1536)|0)|0) + (($587*12)|0)|0) + 4|0);
         $594 = HEAP32[$593>>2]|0;
         $595 = $594 | $592;
         $596 = (((33953152 + (($521*1536)|0)|0) + (($572*12)|0)|0) + 8|0);
         $597 = HEAP32[$596>>2]|0;
         $598 = (((33828736 + (($521*1536)|0)|0) + (($587*12)|0)|0) + 8|0);
         $599 = HEAP32[$598>>2]|0;
         $600 = $599 | $597;
         $601 = (33578928 + (($521*12)|0)|0);
         $602 = HEAP32[$601>>2]|0;
         $603 = $590 | $602;
         $604 = ((33578928 + (($521*12)|0)|0) + 4|0);
         $605 = HEAP32[$604>>2]|0;
         $606 = $595 | $605;
         $607 = ((33578928 + (($521*12)|0)|0) + 8|0);
         $608 = HEAP32[$607>>2]|0;
         $609 = $600 | $608;
         $610 = $603;$611 = $606;$storemerge70 = $609;
        } else {
         $539 = (33953152 + (($521*1536)|0)|0);
         $540 = HEAP32[$539>>2]|0;
         $541 = (33828736 + (($521*1536)|0)|0);
         $542 = HEAP32[$541>>2]|0;
         $543 = $542 | $540;
         $544 = ((33953152 + (($521*1536)|0)|0) + 4|0);
         $545 = HEAP32[$544>>2]|0;
         $546 = ((33828736 + (($521*1536)|0)|0) + 4|0);
         $547 = HEAP32[$546>>2]|0;
         $548 = $547 | $545;
         $549 = ((33953152 + (($521*1536)|0)|0) + 8|0);
         $550 = HEAP32[$549>>2]|0;
         $551 = ((33828736 + (($521*1536)|0)|0) + 8|0);
         $552 = HEAP32[$551>>2]|0;
         $553 = $552 | $550;
         $554 = (33578928 + (($521*12)|0)|0);
         $555 = HEAP32[$554>>2]|0;
         $556 = $543 | $555;
         $557 = ((33578928 + (($521*12)|0)|0) + 4|0);
         $558 = HEAP32[$557>>2]|0;
         $559 = $548 | $558;
         $560 = ((33578928 + (($521*12)|0)|0) + 8|0);
         $561 = HEAP32[$560>>2]|0;
         $562 = $553 | $561;
         $610 = $556;$611 = $559;$storemerge70 = $562;
        }
        $612 = (_can_b_king_escape($ptree,$521,$610,$611,$storemerge70)|0);
        $613 = ($612|0)==(0);
        if ($613) {
         $614 = HEAP8[$376>>0]|0;
         $615 = $614&255;
         $616 = ((220518304 + (($615*81)|0)|0) + ($393)|0);
         $617 = HEAP8[$616>>0]|0;
         $618 = $617&255;
         $619 = ($617<<24>>24)==(0);
         if ($619) {
          label = 65;
         } else {
          $620 = ((220518304 + (($615*81)|0)|0) + ($521)|0);
          $621 = HEAP8[$620>>0]|0;
          $622 = ($617<<24>>24)==($621<<24>>24);
          if ($622) {
           label = 65;
          } else {
           $623 = (_is_pinned_on_black_king($ptree,$393,$618)|0);
           $624 = ($623|0)==(0);
           if ($624) {
            label = 65;
           }
          }
         }
         if ((label|0) == 65) {
          label = 0;
          $625 = (_can_b_piece_capture($ptree,$521)|0);
          $626 = ($625|0)==(0);
          if (!($626)) {
           break;
          }
         }
         $627 = HEAP8[$392>>0]|0;
         $628 = $627&255;
         $629 = ((220518304 + (($628*81)|0)|0) + ($393)|0);
         $630 = HEAP8[$629>>0]|0;
         $631 = $630&255;
         $632 = ($630<<24>>24)==(0);
         if ($632) {
          break L81;
         }
         $633 = ((220518304 + (($628*81)|0)|0) + ($521)|0);
         $634 = HEAP8[$633>>0]|0;
         $635 = ($630<<24>>24)==($634<<24>>24);
         if ($635) {
          break L81;
         }
         $636 = (_is_pinned_on_white_king($ptree,$393,$631)|0);
         $637 = ($636|0)==(0);
         if ($637) {
          break L81;
         }
        }
       }
      } while(0);
      $694 = $527 | $524;
      $695 = $694 | $530;
      $696 = ($695|0)==(0);
      if ($696) {
       break;
      } else {
       $bb_check$sroa$0$0 = $524;$bb_check$sroa$1$0 = $527;$bb_check$sroa$2$0 = $530;
      }
     }
     $697 = HEAP32[$485>>2]|0;
     $698 = HEAP32[$383>>2]|0;
     $699 = $698 ^ $697;
     HEAP32[$383>>2] = $699;
     $700 = HEAP32[$489>>2]|0;
     $701 = HEAP32[$384>>2]|0;
     $702 = $701 ^ $700;
     HEAP32[$384>>2] = $702;
     $703 = HEAP32[$493>>2]|0;
     $704 = HEAP32[$385>>2]|0;
     $705 = $704 ^ $703;
     HEAP32[$385>>2] = $705;
     $706 = HEAP32[$497>>2]|0;
     $707 = HEAP32[$386>>2]|0;
     $708 = $707 ^ $706;
     HEAP32[$386>>2] = $708;
     $709 = HEAP32[$501>>2]|0;
     $710 = HEAP32[$387>>2]|0;
     $711 = $710 ^ $709;
     HEAP32[$387>>2] = $711;
     $712 = HEAP32[$505>>2]|0;
     $713 = HEAP32[$388>>2]|0;
     $714 = $713 ^ $712;
     HEAP32[$388>>2] = $714;
     $715 = HEAP32[$509>>2]|0;
     $716 = HEAP32[$389>>2]|0;
     $717 = $716 ^ $715;
     HEAP32[$389>>2] = $717;
     $718 = HEAP32[$513>>2]|0;
     $719 = HEAP32[$390>>2]|0;
     $720 = $719 ^ $718;
     HEAP32[$390>>2] = $720;
     $721 = HEAP32[$517>>2]|0;
     $722 = HEAP32[$391>>2]|0;
     $723 = $722 ^ $721;
     HEAP32[$391>>2] = $723;
     $724 = HEAP32[$394>>2]|0;
     $725 = HEAP32[$2>>2]|0;
     $726 = $725 ^ $724;
     HEAP32[$2>>2] = $726;
     $727 = HEAP32[$397>>2]|0;
     $728 = HEAP32[$7>>2]|0;
     $729 = $728 ^ $727;
     HEAP32[$7>>2] = $729;
     $730 = HEAP32[$400>>2]|0;
     $731 = HEAP32[$12>>2]|0;
     $732 = $731 ^ $730;
     HEAP32[$12>>2] = $732;
     $733 = HEAP32[$380>>2]|0;
     $734 = $733 ^ $724;
     HEAP32[$380>>2] = $734;
     $735 = HEAP32[$381>>2]|0;
     $736 = $735 ^ $727;
     HEAP32[$381>>2] = $736;
     $737 = HEAP32[$382>>2]|0;
     $738 = $737 ^ $730;
     HEAP32[$382>>2] = $738;
     $739 = HEAP32[$377>>2]|0;
     $740 = $739 ^ $724;
     HEAP32[$377>>2] = $740;
     $741 = HEAP32[$378>>2]|0;
     $742 = $741 ^ $727;
     HEAP32[$378>>2] = $742;
     $743 = HEAP32[$379>>2]|0;
     $744 = $743 ^ $730;
     HEAP32[$379>>2] = $744;
    }
    $745 = $399 | $396;
    $746 = $745 | $402;
    $747 = ($746|0)==(0);
    if ($747) {
     break L79;
    } else {
     $bb$sroa$0$5639 = $396;$bb$sroa$1$5640 = $399;$bb$sroa$2$5641 = $402;
    }
   }
   $638 = HEAP32[$485>>2]|0;
   $639 = HEAP32[$383>>2]|0;
   $640 = $639 ^ $638;
   HEAP32[$383>>2] = $640;
   $641 = HEAP32[$489>>2]|0;
   $642 = HEAP32[$384>>2]|0;
   $643 = $642 ^ $641;
   HEAP32[$384>>2] = $643;
   $644 = HEAP32[$493>>2]|0;
   $645 = HEAP32[$385>>2]|0;
   $646 = $645 ^ $644;
   HEAP32[$385>>2] = $646;
   $647 = HEAP32[$497>>2]|0;
   $648 = HEAP32[$386>>2]|0;
   $649 = $648 ^ $647;
   HEAP32[$386>>2] = $649;
   $650 = HEAP32[$501>>2]|0;
   $651 = HEAP32[$387>>2]|0;
   $652 = $651 ^ $650;
   HEAP32[$387>>2] = $652;
   $653 = HEAP32[$505>>2]|0;
   $654 = HEAP32[$388>>2]|0;
   $655 = $654 ^ $653;
   HEAP32[$388>>2] = $655;
   $656 = HEAP32[$509>>2]|0;
   $657 = HEAP32[$389>>2]|0;
   $658 = $657 ^ $656;
   HEAP32[$389>>2] = $658;
   $659 = HEAP32[$513>>2]|0;
   $660 = HEAP32[$390>>2]|0;
   $661 = $660 ^ $659;
   HEAP32[$390>>2] = $661;
   $662 = HEAP32[$517>>2]|0;
   $663 = HEAP32[$391>>2]|0;
   $664 = $663 ^ $662;
   HEAP32[$391>>2] = $664;
   $665 = HEAP32[$394>>2]|0;
   $666 = HEAP32[$2>>2]|0;
   $667 = $666 ^ $665;
   HEAP32[$2>>2] = $667;
   $668 = HEAP32[$397>>2]|0;
   $669 = HEAP32[$7>>2]|0;
   $670 = $669 ^ $668;
   HEAP32[$7>>2] = $670;
   $671 = HEAP32[$400>>2]|0;
   $672 = HEAP32[$12>>2]|0;
   $673 = $672 ^ $671;
   HEAP32[$12>>2] = $673;
   $674 = HEAP32[$380>>2]|0;
   $675 = $674 ^ $665;
   HEAP32[$380>>2] = $675;
   $676 = HEAP32[$381>>2]|0;
   $677 = $676 ^ $668;
   HEAP32[$381>>2] = $677;
   $678 = HEAP32[$382>>2]|0;
   $679 = $678 ^ $671;
   HEAP32[$382>>2] = $679;
   $680 = HEAP32[$377>>2]|0;
   $681 = $680 ^ $665;
   HEAP32[$377>>2] = $681;
   $682 = HEAP32[$378>>2]|0;
   $683 = $682 ^ $668;
   HEAP32[$378>>2] = $683;
   $684 = HEAP32[$379>>2]|0;
   $685 = $684 ^ $671;
   HEAP32[$379>>2] = $685;
   $686 = $393 << 7;
   $687 = ((($ptree) + ($521)|0) + 512|0);
   $688 = HEAP8[$687>>0]|0;
   $689 = $688 << 24 >> 24;
   $690 = $689 << 19;
   $691 = $686 | $521;
   $692 = $691 | $690;
   $693 = $692 | 491520;
   $$0 = $693;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $748 = (($ptree) + 304|0);
 $749 = HEAP32[$748>>2]|0;
 $750 = ($749|0)==(0);
 L108: do {
  if (!($750)) {
   $751 = (($ptree) + 593|0);
   $752 = (($ptree) + 160|0);
   $753 = (($ptree) + 32|0);
   $754 = (($ptree) + 36|0);
   $755 = (($ptree) + 40|0);
   $756 = (($ptree) + 44|0);
   $757 = (($ptree) + 48|0);
   $758 = (($ptree) + 52|0);
   $759 = (($ptree) + 56|0);
   $760 = (($ptree) + 60|0);
   $761 = (($ptree) + 64|0);
   $762 = (($ptree) + 594|0);
   $bb$sroa$2$6604 = $749;
   L110: while(1) {
    $763 = (_first_one2($bb$sroa$2$6604)|0);
    $764 = ((34156304 + (($763*12)|0)|0) + 8|0);
    $765 = HEAP32[$764>>2]|0;
    $766 = $765 ^ $bb$sroa$2$6604;
    $767 = ((33572424 + ($763<<3)|0) + 2|0);
    $768 = HEAP8[$767>>0]|0;
    $769 = $768&255;
    $770 = ((($ptree) + ($769<<2)|0) + 32|0);
    $771 = HEAP32[$770>>2]|0;
    $772 = ((33572424 + ($763<<3)|0) + 3|0);
    $773 = HEAP8[$772>>0]|0;
    $774 = $773&255;
    $775 = $771 >>> $774;
    $776 = $775 & 127;
    $777 = ((33953152 + (($763*1536)|0)|0) + (($776*12)|0)|0);
    $778 = HEAP32[$777>>2]|0;
    $779 = (33572424 + ($763<<3)|0);
    $780 = HEAP8[$779>>0]|0;
    $781 = $780&255;
    $782 = ((($ptree) + ($781<<2)|0) + 8|0);
    $783 = HEAP32[$782>>2]|0;
    $784 = ((($ptree) + ($781<<2)|0) + 20|0);
    $785 = HEAP32[$784>>2]|0;
    $786 = $785 | $783;
    $787 = ((33572424 + ($763<<3)|0) + 1|0);
    $788 = HEAP8[$787>>0]|0;
    $789 = $788&255;
    $790 = $786 >>> $789;
    $791 = $790 & 127;
    $792 = ((33828736 + (($763*1536)|0)|0) + (($791*12)|0)|0);
    $793 = HEAP32[$792>>2]|0;
    $794 = $793 | $778;
    $795 = (((33953152 + (($763*1536)|0)|0) + (($776*12)|0)|0) + 4|0);
    $796 = HEAP32[$795>>2]|0;
    $797 = (((33828736 + (($763*1536)|0)|0) + (($791*12)|0)|0) + 4|0);
    $798 = HEAP32[$797>>2]|0;
    $799 = $798 | $796;
    $800 = (((33953152 + (($763*1536)|0)|0) + (($776*12)|0)|0) + 8|0);
    $801 = HEAP32[$800>>2]|0;
    $802 = (((33828736 + (($763*1536)|0)|0) + (($791*12)|0)|0) + 8|0);
    $803 = HEAP32[$802>>2]|0;
    $804 = $803 | $801;
    $805 = $794 & $362;
    $806 = $799 & $364;
    $807 = $804 & $366;
    $808 = HEAP8[$751>>0]|0;
    $809 = $808&255;
    $810 = (33578928 + (($809*12)|0)|0);
    $811 = HEAP32[$810>>2]|0;
    $812 = $805 & $811;
    $813 = ((33578928 + (($809*12)|0)|0) + 4|0);
    $814 = HEAP32[$813>>2]|0;
    $815 = $806 & $814;
    $816 = ((33578928 + (($809*12)|0)|0) + 8|0);
    $817 = HEAP32[$816>>2]|0;
    $818 = $807 & $817;
    $819 = $815 | $812;
    $820 = $819 | $818;
    $821 = ($820|0)==(0);
    if (!($821)) {
     $822 = HEAP32[$752>>2]|0;
     $823 = $822 ^ $765;
     HEAP32[$752>>2] = $823;
     $824 = HEAP32[$12>>2]|0;
     $825 = $824 ^ $765;
     HEAP32[$12>>2] = $825;
     $826 = (34157280 + (($763*12)|0)|0);
     $827 = HEAP32[$826>>2]|0;
     $828 = HEAP32[$753>>2]|0;
     $829 = $828 ^ $827;
     HEAP32[$753>>2] = $829;
     $830 = ((34157280 + (($763*12)|0)|0) + 4|0);
     $831 = HEAP32[$830>>2]|0;
     $832 = HEAP32[$754>>2]|0;
     $833 = $832 ^ $831;
     HEAP32[$754>>2] = $833;
     $834 = ((34157280 + (($763*12)|0)|0) + 8|0);
     $835 = HEAP32[$834>>2]|0;
     $836 = HEAP32[$755>>2]|0;
     $837 = $836 ^ $835;
     HEAP32[$755>>2] = $837;
     $838 = (34158256 + (($763*12)|0)|0);
     $839 = HEAP32[$838>>2]|0;
     $840 = HEAP32[$756>>2]|0;
     $841 = $840 ^ $839;
     HEAP32[$756>>2] = $841;
     $842 = ((34158256 + (($763*12)|0)|0) + 4|0);
     $843 = HEAP32[$842>>2]|0;
     $844 = HEAP32[$757>>2]|0;
     $845 = $844 ^ $843;
     HEAP32[$757>>2] = $845;
     $846 = ((34158256 + (($763*12)|0)|0) + 8|0);
     $847 = HEAP32[$846>>2]|0;
     $848 = HEAP32[$758>>2]|0;
     $849 = $848 ^ $847;
     HEAP32[$758>>2] = $849;
     $850 = (34159232 + (($763*12)|0)|0);
     $851 = HEAP32[$850>>2]|0;
     $852 = HEAP32[$759>>2]|0;
     $853 = $852 ^ $851;
     HEAP32[$759>>2] = $853;
     $854 = ((34159232 + (($763*12)|0)|0) + 4|0);
     $855 = HEAP32[$854>>2]|0;
     $856 = HEAP32[$760>>2]|0;
     $857 = $856 ^ $855;
     HEAP32[$760>>2] = $857;
     $858 = ((34159232 + (($763*12)|0)|0) + 8|0);
     $859 = HEAP32[$858>>2]|0;
     $860 = HEAP32[$761>>2]|0;
     $861 = $860 ^ $859;
     HEAP32[$761>>2] = $861;
     $bb_check$sroa$0$1 = $812;$bb_check$sroa$1$1 = $815;$bb_check$sroa$2$1 = $818;
     while(1) {
      $862 = (_last_one210($bb_check$sroa$2$1,$bb_check$sroa$1$1,$bb_check$sroa$0$1)|0);
      $863 = (34156304 + (($862*12)|0)|0);
      $864 = HEAP32[$863>>2]|0;
      $865 = $864 ^ $bb_check$sroa$0$1;
      $866 = ((34156304 + (($862*12)|0)|0) + 4|0);
      $867 = HEAP32[$866>>2]|0;
      $868 = $867 ^ $bb_check$sroa$1$1;
      $869 = ((34156304 + (($862*12)|0)|0) + 8|0);
      $870 = HEAP32[$869>>2]|0;
      $871 = $870 ^ $bb_check$sroa$2$1;
      $872 = (_is_black_attacked($ptree,$862)|0);
      $873 = ($872|0)==(0);
      do {
       if (!($873)) {
        $874 = HEAP8[$751>>0]|0;
        $875 = $874&255;
        $876 = ((220518304 + (($875*81)|0)|0) + ($862)|0);
        $877 = HEAP8[$876>>0]|0;
        $878 = $877 & 2;
        $879 = ($878<<24>>24)==(0);
        if ($879) {
         $904 = ((33572424 + ($862<<3)|0) + 2|0);
         $905 = HEAP8[$904>>0]|0;
         $906 = $905&255;
         $907 = ((($ptree) + ($906<<2)|0) + 32|0);
         $908 = HEAP32[$907>>2]|0;
         $909 = ((33572424 + ($862<<3)|0) + 3|0);
         $910 = HEAP8[$909>>0]|0;
         $911 = $910&255;
         $912 = $908 >>> $911;
         $913 = $912 & 127;
         $914 = ((33953152 + (($862*1536)|0)|0) + (($913*12)|0)|0);
         $915 = HEAP32[$914>>2]|0;
         $916 = (33572424 + ($862<<3)|0);
         $917 = HEAP8[$916>>0]|0;
         $918 = $917&255;
         $919 = ((($ptree) + ($918<<2)|0) + 8|0);
         $920 = HEAP32[$919>>2]|0;
         $921 = ((($ptree) + ($918<<2)|0) + 20|0);
         $922 = HEAP32[$921>>2]|0;
         $923 = $922 | $920;
         $924 = ((33572424 + ($862<<3)|0) + 1|0);
         $925 = HEAP8[$924>>0]|0;
         $926 = $925&255;
         $927 = $923 >>> $926;
         $928 = $927 & 127;
         $929 = ((33828736 + (($862*1536)|0)|0) + (($928*12)|0)|0);
         $930 = HEAP32[$929>>2]|0;
         $931 = $930 | $915;
         $932 = (((33953152 + (($862*1536)|0)|0) + (($913*12)|0)|0) + 4|0);
         $933 = HEAP32[$932>>2]|0;
         $934 = (((33828736 + (($862*1536)|0)|0) + (($928*12)|0)|0) + 4|0);
         $935 = HEAP32[$934>>2]|0;
         $936 = $935 | $933;
         $937 = (((33953152 + (($862*1536)|0)|0) + (($913*12)|0)|0) + 8|0);
         $938 = HEAP32[$937>>2]|0;
         $939 = (((33828736 + (($862*1536)|0)|0) + (($928*12)|0)|0) + 8|0);
         $940 = HEAP32[$939>>2]|0;
         $941 = $940 | $938;
         $942 = (33578928 + (($862*12)|0)|0);
         $943 = HEAP32[$942>>2]|0;
         $944 = $931 | $943;
         $945 = ((33578928 + (($862*12)|0)|0) + 4|0);
         $946 = HEAP32[$945>>2]|0;
         $947 = $936 | $946;
         $948 = ((33578928 + (($862*12)|0)|0) + 8|0);
         $949 = HEAP32[$948>>2]|0;
         $950 = $941 | $949;
         $951 = $944;$952 = $947;$storemerge = $950;
        } else {
         $880 = (33953152 + (($862*1536)|0)|0);
         $881 = HEAP32[$880>>2]|0;
         $882 = (33828736 + (($862*1536)|0)|0);
         $883 = HEAP32[$882>>2]|0;
         $884 = $883 | $881;
         $885 = ((33953152 + (($862*1536)|0)|0) + 4|0);
         $886 = HEAP32[$885>>2]|0;
         $887 = ((33828736 + (($862*1536)|0)|0) + 4|0);
         $888 = HEAP32[$887>>2]|0;
         $889 = $888 | $886;
         $890 = ((33953152 + (($862*1536)|0)|0) + 8|0);
         $891 = HEAP32[$890>>2]|0;
         $892 = ((33828736 + (($862*1536)|0)|0) + 8|0);
         $893 = HEAP32[$892>>2]|0;
         $894 = $893 | $891;
         $895 = (33578928 + (($862*12)|0)|0);
         $896 = HEAP32[$895>>2]|0;
         $897 = $884 | $896;
         $898 = ((33578928 + (($862*12)|0)|0) + 4|0);
         $899 = HEAP32[$898>>2]|0;
         $900 = $889 | $899;
         $901 = ((33578928 + (($862*12)|0)|0) + 8|0);
         $902 = HEAP32[$901>>2]|0;
         $903 = $894 | $902;
         $951 = $897;$952 = $900;$storemerge = $903;
        }
        $953 = (_can_b_king_escape($ptree,$862,$951,$952,$storemerge)|0);
        $954 = ($953|0)==(0);
        if ($954) {
         $955 = HEAP8[$751>>0]|0;
         $956 = $955&255;
         $957 = ((220518304 + (($956*81)|0)|0) + ($763)|0);
         $958 = HEAP8[$957>>0]|0;
         $959 = $958&255;
         $960 = ($958<<24>>24)==(0);
         if ($960) {
          label = 85;
         } else {
          $961 = ((220518304 + (($956*81)|0)|0) + ($862)|0);
          $962 = HEAP8[$961>>0]|0;
          $963 = ($958<<24>>24)==($962<<24>>24);
          if ($963) {
           label = 85;
          } else {
           $964 = (_is_pinned_on_black_king($ptree,$763,$959)|0);
           $965 = ($964|0)==(0);
           if ($965) {
            label = 85;
           }
          }
         }
         if ((label|0) == 85) {
          label = 0;
          $966 = (_can_b_piece_capture($ptree,$862)|0);
          $967 = ($966|0)==(0);
          if (!($967)) {
           break;
          }
         }
         $968 = HEAP8[$762>>0]|0;
         $969 = $968&255;
         $970 = ((220518304 + (($969*81)|0)|0) + ($763)|0);
         $971 = HEAP8[$970>>0]|0;
         $972 = $971&255;
         $973 = ($971<<24>>24)==(0);
         if ($973) {
          break L110;
         }
         $974 = ((220518304 + (($969*81)|0)|0) + ($862)|0);
         $975 = HEAP8[$974>>0]|0;
         $976 = ($971<<24>>24)==($975<<24>>24);
         if ($976) {
          break L110;
         }
         $977 = (_is_pinned_on_white_king($ptree,$763,$972)|0);
         $978 = ($977|0)==(0);
         if ($978) {
          break L110;
         }
        }
       }
      } while(0);
      $1019 = $868 | $865;
      $1020 = $1019 | $871;
      $1021 = ($1020|0)==(0);
      if ($1021) {
       break;
      } else {
       $bb_check$sroa$0$1 = $865;$bb_check$sroa$1$1 = $868;$bb_check$sroa$2$1 = $871;
      }
     }
     $1022 = HEAP32[$826>>2]|0;
     $1023 = HEAP32[$753>>2]|0;
     $1024 = $1023 ^ $1022;
     HEAP32[$753>>2] = $1024;
     $1025 = HEAP32[$830>>2]|0;
     $1026 = HEAP32[$754>>2]|0;
     $1027 = $1026 ^ $1025;
     HEAP32[$754>>2] = $1027;
     $1028 = HEAP32[$834>>2]|0;
     $1029 = HEAP32[$755>>2]|0;
     $1030 = $1029 ^ $1028;
     HEAP32[$755>>2] = $1030;
     $1031 = HEAP32[$838>>2]|0;
     $1032 = HEAP32[$756>>2]|0;
     $1033 = $1032 ^ $1031;
     HEAP32[$756>>2] = $1033;
     $1034 = HEAP32[$842>>2]|0;
     $1035 = HEAP32[$757>>2]|0;
     $1036 = $1035 ^ $1034;
     HEAP32[$757>>2] = $1036;
     $1037 = HEAP32[$846>>2]|0;
     $1038 = HEAP32[$758>>2]|0;
     $1039 = $1038 ^ $1037;
     HEAP32[$758>>2] = $1039;
     $1040 = HEAP32[$850>>2]|0;
     $1041 = HEAP32[$759>>2]|0;
     $1042 = $1041 ^ $1040;
     HEAP32[$759>>2] = $1042;
     $1043 = HEAP32[$854>>2]|0;
     $1044 = HEAP32[$760>>2]|0;
     $1045 = $1044 ^ $1043;
     HEAP32[$760>>2] = $1045;
     $1046 = HEAP32[$858>>2]|0;
     $1047 = HEAP32[$761>>2]|0;
     $1048 = $1047 ^ $1046;
     HEAP32[$761>>2] = $1048;
     $1049 = HEAP32[$764>>2]|0;
     $1050 = HEAP32[$12>>2]|0;
     $1051 = $1050 ^ $1049;
     HEAP32[$12>>2] = $1051;
     $1052 = HEAP32[$752>>2]|0;
     $1053 = $1052 ^ $1049;
     HEAP32[$752>>2] = $1053;
    }
    $1054 = ($765|0)==($bb$sroa$2$6604|0);
    if ($1054) {
     break L108;
    } else {
     $bb$sroa$2$6604 = $766;
    }
   }
   $979 = HEAP32[$826>>2]|0;
   $980 = HEAP32[$753>>2]|0;
   $981 = $980 ^ $979;
   HEAP32[$753>>2] = $981;
   $982 = HEAP32[$830>>2]|0;
   $983 = HEAP32[$754>>2]|0;
   $984 = $983 ^ $982;
   HEAP32[$754>>2] = $984;
   $985 = HEAP32[$834>>2]|0;
   $986 = HEAP32[$755>>2]|0;
   $987 = $986 ^ $985;
   HEAP32[$755>>2] = $987;
   $988 = HEAP32[$838>>2]|0;
   $989 = HEAP32[$756>>2]|0;
   $990 = $989 ^ $988;
   HEAP32[$756>>2] = $990;
   $991 = HEAP32[$842>>2]|0;
   $992 = HEAP32[$757>>2]|0;
   $993 = $992 ^ $991;
   HEAP32[$757>>2] = $993;
   $994 = HEAP32[$846>>2]|0;
   $995 = HEAP32[$758>>2]|0;
   $996 = $995 ^ $994;
   HEAP32[$758>>2] = $996;
   $997 = HEAP32[$850>>2]|0;
   $998 = HEAP32[$759>>2]|0;
   $999 = $998 ^ $997;
   HEAP32[$759>>2] = $999;
   $1000 = HEAP32[$854>>2]|0;
   $1001 = HEAP32[$760>>2]|0;
   $1002 = $1001 ^ $1000;
   HEAP32[$760>>2] = $1002;
   $1003 = HEAP32[$858>>2]|0;
   $1004 = HEAP32[$761>>2]|0;
   $1005 = $1004 ^ $1003;
   HEAP32[$761>>2] = $1005;
   $1006 = HEAP32[$764>>2]|0;
   $1007 = HEAP32[$12>>2]|0;
   $1008 = $1007 ^ $1006;
   HEAP32[$12>>2] = $1008;
   $1009 = HEAP32[$752>>2]|0;
   $1010 = $1009 ^ $1006;
   HEAP32[$752>>2] = $1010;
   $1011 = $763 << 7;
   $1012 = ((($ptree) + ($862)|0) + 512|0);
   $1013 = HEAP8[$1012>>0]|0;
   $1014 = $1013 << 24 >> 24;
   $1015 = $1014 << 19;
   $1016 = $1011 | $862;
   $1017 = $1016 | $1015;
   $1018 = $1017 | 245760;
   $$0 = $1018;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $1055 = (($ptree) + 296|0);
 $1056 = HEAP32[$1055>>2]|0;
 $1057 = (($ptree) + 300|0);
 $1058 = HEAP32[$1057>>2]|0;
 $1059 = $1058 | $1056;
 $1060 = ($1059|0)==(0);
 L137: do {
  if (!($1060)) {
   $1061 = (($ptree) + 593|0);
   $1062 = (($ptree) + 152|0);
   $1063 = (($ptree) + 156|0);
   $1064 = (($ptree) + 32|0);
   $1065 = (($ptree) + 36|0);
   $1066 = (($ptree) + 40|0);
   $1067 = (($ptree) + 44|0);
   $1068 = (($ptree) + 48|0);
   $1069 = (($ptree) + 52|0);
   $1070 = (($ptree) + 56|0);
   $1071 = (($ptree) + 60|0);
   $1072 = (($ptree) + 64|0);
   $1073 = (($ptree) + 594|0);
   $bb$sroa$0$6575 = $1056;$bb$sroa$1$6576 = $1058;
   L139: while(1) {
    $1074 = (_last_one01($bb$sroa$0$6575,$bb$sroa$1$6576)|0);
    $1075 = (34156304 + (($1074*12)|0)|0);
    $1076 = HEAP32[$1075>>2]|0;
    $1077 = $1076 ^ $bb$sroa$0$6575;
    $1078 = ((34156304 + (($1074*12)|0)|0) + 4|0);
    $1079 = HEAP32[$1078>>2]|0;
    $1080 = $1079 ^ $bb$sroa$1$6576;
    $1081 = ((33572424 + ($1074<<3)|0) + 2|0);
    $1082 = HEAP8[$1081>>0]|0;
    $1083 = $1082&255;
    $1084 = ((($ptree) + ($1083<<2)|0) + 32|0);
    $1085 = HEAP32[$1084>>2]|0;
    $1086 = ((33572424 + ($1074<<3)|0) + 3|0);
    $1087 = HEAP8[$1086>>0]|0;
    $1088 = $1087&255;
    $1089 = $1085 >>> $1088;
    $1090 = $1089 & 127;
    $1091 = ((33953152 + (($1074*1536)|0)|0) + (($1090*12)|0)|0);
    $1092 = HEAP32[$1091>>2]|0;
    $1093 = (33572424 + ($1074<<3)|0);
    $1094 = HEAP8[$1093>>0]|0;
    $1095 = $1094&255;
    $1096 = ((($ptree) + ($1095<<2)|0) + 8|0);
    $1097 = HEAP32[$1096>>2]|0;
    $1098 = ((($ptree) + ($1095<<2)|0) + 20|0);
    $1099 = HEAP32[$1098>>2]|0;
    $1100 = $1099 | $1097;
    $1101 = ((33572424 + ($1074<<3)|0) + 1|0);
    $1102 = HEAP8[$1101>>0]|0;
    $1103 = $1102&255;
    $1104 = $1100 >>> $1103;
    $1105 = $1104 & 127;
    $1106 = ((33828736 + (($1074*1536)|0)|0) + (($1105*12)|0)|0);
    $1107 = HEAP32[$1106>>2]|0;
    $1108 = $1107 | $1092;
    $1109 = (((33953152 + (($1074*1536)|0)|0) + (($1090*12)|0)|0) + 4|0);
    $1110 = HEAP32[$1109>>2]|0;
    $1111 = (((33828736 + (($1074*1536)|0)|0) + (($1105*12)|0)|0) + 4|0);
    $1112 = HEAP32[$1111>>2]|0;
    $1113 = $1112 | $1110;
    $1114 = (((33953152 + (($1074*1536)|0)|0) + (($1090*12)|0)|0) + 8|0);
    $1115 = HEAP32[$1114>>2]|0;
    $1116 = (((33828736 + (($1074*1536)|0)|0) + (($1105*12)|0)|0) + 8|0);
    $1117 = HEAP32[$1116>>2]|0;
    $1118 = $1117 | $1115;
    $1119 = $1108 & $362;
    $1120 = $1113 & $364;
    $1121 = $1118 & $366;
    $1122 = HEAP8[$1061>>0]|0;
    $1123 = $1122&255;
    $1124 = (33575024 + (($1123*12)|0)|0);
    $1125 = HEAP32[$1124>>2]|0;
    $1126 = $1119 & $1125;
    $1127 = ((33575024 + (($1123*12)|0)|0) + 4|0);
    $1128 = HEAP32[$1127>>2]|0;
    $1129 = $1120 & $1128;
    $1130 = (33577952 + (($1123*12)|0)|0);
    $1131 = HEAP32[$1130>>2]|0;
    $1132 = $1126 & $1131;
    $1133 = ((33577952 + (($1123*12)|0)|0) + 4|0);
    $1134 = HEAP32[$1133>>2]|0;
    $1135 = $1129 & $1134;
    $1136 = ((33578928 + (($1123*12)|0)|0) + 8|0);
    $1137 = HEAP32[$1136>>2]|0;
    $1138 = $1121 & $1137;
    $1139 = $1135 | $1132;
    $1140 = $1139 | $1138;
    $1141 = ($1140|0)==(0);
    if (!($1141)) {
     $1142 = HEAP32[$1062>>2]|0;
     $1143 = $1142 ^ $1076;
     HEAP32[$1062>>2] = $1143;
     $1144 = HEAP32[$1063>>2]|0;
     $1145 = $1144 ^ $1079;
     HEAP32[$1063>>2] = $1145;
     $1146 = HEAP32[$2>>2]|0;
     $1147 = $1146 ^ $1076;
     HEAP32[$2>>2] = $1147;
     $1148 = HEAP32[$7>>2]|0;
     $1149 = $1148 ^ $1079;
     HEAP32[$7>>2] = $1149;
     $1150 = (34157280 + (($1074*12)|0)|0);
     $1151 = HEAP32[$1150>>2]|0;
     $1152 = HEAP32[$1064>>2]|0;
     $1153 = $1152 ^ $1151;
     HEAP32[$1064>>2] = $1153;
     $1154 = ((34157280 + (($1074*12)|0)|0) + 4|0);
     $1155 = HEAP32[$1154>>2]|0;
     $1156 = HEAP32[$1065>>2]|0;
     $1157 = $1156 ^ $1155;
     HEAP32[$1065>>2] = $1157;
     $1158 = ((34157280 + (($1074*12)|0)|0) + 8|0);
     $1159 = HEAP32[$1158>>2]|0;
     $1160 = HEAP32[$1066>>2]|0;
     $1161 = $1160 ^ $1159;
     HEAP32[$1066>>2] = $1161;
     $1162 = (34158256 + (($1074*12)|0)|0);
     $1163 = HEAP32[$1162>>2]|0;
     $1164 = HEAP32[$1067>>2]|0;
     $1165 = $1164 ^ $1163;
     HEAP32[$1067>>2] = $1165;
     $1166 = ((34158256 + (($1074*12)|0)|0) + 4|0);
     $1167 = HEAP32[$1166>>2]|0;
     $1168 = HEAP32[$1068>>2]|0;
     $1169 = $1168 ^ $1167;
     HEAP32[$1068>>2] = $1169;
     $1170 = ((34158256 + (($1074*12)|0)|0) + 8|0);
     $1171 = HEAP32[$1170>>2]|0;
     $1172 = HEAP32[$1069>>2]|0;
     $1173 = $1172 ^ $1171;
     HEAP32[$1069>>2] = $1173;
     $1174 = (34159232 + (($1074*12)|0)|0);
     $1175 = HEAP32[$1174>>2]|0;
     $1176 = HEAP32[$1070>>2]|0;
     $1177 = $1176 ^ $1175;
     HEAP32[$1070>>2] = $1177;
     $1178 = ((34159232 + (($1074*12)|0)|0) + 4|0);
     $1179 = HEAP32[$1178>>2]|0;
     $1180 = HEAP32[$1071>>2]|0;
     $1181 = $1180 ^ $1179;
     HEAP32[$1071>>2] = $1181;
     $1182 = ((34159232 + (($1074*12)|0)|0) + 8|0);
     $1183 = HEAP32[$1182>>2]|0;
     $1184 = HEAP32[$1072>>2]|0;
     $1185 = $1184 ^ $1183;
     HEAP32[$1072>>2] = $1185;
     $bb_check$sroa$0$2 = $1132;$bb_check$sroa$1$2 = $1135;$bb_check$sroa$2$2 = $1138;
     while(1) {
      $1186 = (_last_one210($bb_check$sroa$2$2,$bb_check$sroa$1$2,$bb_check$sroa$0$2)|0);
      $1187 = (34156304 + (($1186*12)|0)|0);
      $1188 = HEAP32[$1187>>2]|0;
      $1189 = $1188 ^ $bb_check$sroa$0$2;
      $1190 = ((34156304 + (($1186*12)|0)|0) + 4|0);
      $1191 = HEAP32[$1190>>2]|0;
      $1192 = $1191 ^ $bb_check$sroa$1$2;
      $1193 = ((34156304 + (($1186*12)|0)|0) + 8|0);
      $1194 = HEAP32[$1193>>2]|0;
      $1195 = $1194 ^ $bb_check$sroa$2$2;
      $1196 = (_is_black_attacked($ptree,$1186)|0);
      $1197 = ($1196|0)==(0);
      do {
       if (!($1197)) {
        $1198 = ($1186|0)>(53);
        do {
         if ($1198) {
          $1199 = HEAP8[$1061>>0]|0;
          $1200 = $1199&255;
          $1201 = ((220518304 + (($1200*81)|0)|0) + ($1186)|0);
          $1202 = HEAP8[$1201>>0]|0;
          $1203 = $1202 & 2;
          $1204 = ($1203<<24>>24)==(0);
          if ($1204) {
           $1226 = ((33572424 + ($1186<<3)|0) + 2|0);
           $1227 = HEAP8[$1226>>0]|0;
           $1228 = $1227&255;
           $1229 = ((($ptree) + ($1228<<2)|0) + 32|0);
           $1230 = HEAP32[$1229>>2]|0;
           $1231 = ((33572424 + ($1186<<3)|0) + 3|0);
           $1232 = HEAP8[$1231>>0]|0;
           $1233 = $1232&255;
           $1234 = $1230 >>> $1233;
           $1235 = $1234 & 127;
           $1236 = ((33953152 + (($1186*1536)|0)|0) + (($1235*12)|0)|0);
           $1237 = HEAP32[$1236>>2]|0;
           $1238 = (33572424 + ($1186<<3)|0);
           $1239 = HEAP8[$1238>>0]|0;
           $1240 = $1239&255;
           $1241 = ((($ptree) + ($1240<<2)|0) + 8|0);
           $1242 = HEAP32[$1241>>2]|0;
           $1243 = ((($ptree) + ($1240<<2)|0) + 20|0);
           $1244 = HEAP32[$1243>>2]|0;
           $1245 = $1244 | $1242;
           $1246 = ((33572424 + ($1186<<3)|0) + 1|0);
           $1247 = HEAP8[$1246>>0]|0;
           $1248 = $1247&255;
           $1249 = $1245 >>> $1248;
           $1250 = $1249 & 127;
           $1251 = ((33828736 + (($1186*1536)|0)|0) + (($1250*12)|0)|0);
           $1252 = HEAP32[$1251>>2]|0;
           $1253 = $1252 | $1237;
           $1254 = (((33953152 + (($1186*1536)|0)|0) + (($1235*12)|0)|0) + 4|0);
           $1255 = HEAP32[$1254>>2]|0;
           $1256 = (((33828736 + (($1186*1536)|0)|0) + (($1250*12)|0)|0) + 4|0);
           $1257 = HEAP32[$1256>>2]|0;
           $1258 = $1257 | $1255;
           $1259 = (((33953152 + (($1186*1536)|0)|0) + (($1235*12)|0)|0) + 8|0);
           $1260 = HEAP32[$1259>>2]|0;
           $1261 = (((33828736 + (($1186*1536)|0)|0) + (($1250*12)|0)|0) + 8|0);
           $1262 = HEAP32[$1261>>2]|0;
           $1263 = $1262 | $1260;
           $1264 = (33578928 + (($1186*12)|0)|0);
           $1265 = HEAP32[$1264>>2]|0;
           $1266 = $1253 | $1265;
           $1267 = ((33578928 + (($1186*12)|0)|0) + 4|0);
           $1268 = HEAP32[$1267>>2]|0;
           $1269 = $1258 | $1268;
           $1270 = ((33578928 + (($1186*12)|0)|0) + 8|0);
           $1271 = HEAP32[$1270>>2]|0;
           $1272 = $1263 | $1271;
           $1288 = $1266;$1289 = $1269;$1290 = $1272;
           break;
          } else {
           $1205 = (33953152 + (($1186*1536)|0)|0);
           $1206 = HEAP32[$1205>>2]|0;
           $1207 = (33828736 + (($1186*1536)|0)|0);
           $1208 = HEAP32[$1207>>2]|0;
           $1209 = $1208 | $1206;
           $1210 = ((33953152 + (($1186*1536)|0)|0) + 4|0);
           $1211 = HEAP32[$1210>>2]|0;
           $1212 = ((33828736 + (($1186*1536)|0)|0) + 4|0);
           $1213 = HEAP32[$1212>>2]|0;
           $1214 = $1213 | $1211;
           $1215 = ((33953152 + (($1186*1536)|0)|0) + 8|0);
           $1216 = HEAP32[$1215>>2]|0;
           $1217 = ((33828736 + (($1186*1536)|0)|0) + 8|0);
           $1218 = HEAP32[$1217>>2]|0;
           $1219 = $1218 | $1216;
           $1220 = ((33578928 + (($1186*12)|0)|0) + 4|0);
           $1221 = HEAP32[$1220>>2]|0;
           $1222 = $1214 | $1221;
           $1223 = ((33578928 + (($1186*12)|0)|0) + 8|0);
           $1224 = HEAP32[$1223>>2]|0;
           $1225 = $1219 | $1224;
           $1288 = $1209;$1289 = $1222;$1290 = $1225;
           break;
          }
         } else {
          $1273 = (33953152 + (($1186*1536)|0)|0);
          $1274 = HEAP32[$1273>>2]|0;
          $1275 = (33828736 + (($1186*1536)|0)|0);
          $1276 = HEAP32[$1275>>2]|0;
          $1277 = $1276 | $1274;
          $1278 = ((33953152 + (($1186*1536)|0)|0) + 4|0);
          $1279 = HEAP32[$1278>>2]|0;
          $1280 = ((33828736 + (($1186*1536)|0)|0) + 4|0);
          $1281 = HEAP32[$1280>>2]|0;
          $1282 = $1281 | $1279;
          $1283 = ((33953152 + (($1186*1536)|0)|0) + 8|0);
          $1284 = HEAP32[$1283>>2]|0;
          $1285 = ((33828736 + (($1186*1536)|0)|0) + 8|0);
          $1286 = HEAP32[$1285>>2]|0;
          $1287 = $1286 | $1284;
          $1288 = $1277;$1289 = $1282;$1290 = $1287;
         }
        } while(0);
        $1291 = (_can_b_king_escape($ptree,$1186,$1288,$1289,$1290)|0);
        $1292 = ($1291|0)==(0);
        if ($1292) {
         $1293 = HEAP8[$1061>>0]|0;
         $1294 = $1293&255;
         $1295 = ((220518304 + (($1294*81)|0)|0) + ($1074)|0);
         $1296 = HEAP8[$1295>>0]|0;
         $1297 = $1296&255;
         $1298 = ($1296<<24>>24)==(0);
         if ($1298) {
          label = 107;
         } else {
          $1299 = ((220518304 + (($1294*81)|0)|0) + ($1186)|0);
          $1300 = HEAP8[$1299>>0]|0;
          $1301 = ($1296<<24>>24)==($1300<<24>>24);
          if ($1301) {
           label = 107;
          } else {
           $1302 = (_is_pinned_on_black_king($ptree,$1074,$1297)|0);
           $1303 = ($1302|0)==(0);
           if ($1303) {
            label = 107;
           }
          }
         }
         if ((label|0) == 107) {
          label = 0;
          $1304 = (_can_b_piece_capture($ptree,$1186)|0);
          $1305 = ($1304|0)==(0);
          if (!($1305)) {
           break;
          }
         }
         $1306 = HEAP8[$1073>>0]|0;
         $1307 = $1306&255;
         $1308 = ((220518304 + (($1307*81)|0)|0) + ($1074)|0);
         $1309 = HEAP8[$1308>>0]|0;
         $1310 = $1309&255;
         $1311 = ($1309<<24>>24)==(0);
         if ($1311) {
          break L139;
         }
         $1312 = ((220518304 + (($1307*81)|0)|0) + ($1186)|0);
         $1313 = HEAP8[$1312>>0]|0;
         $1314 = ($1309<<24>>24)==($1313<<24>>24);
         if ($1314) {
          break L139;
         }
         $1315 = (_is_pinned_on_white_king($ptree,$1074,$1310)|0);
         $1316 = ($1315|0)==(0);
         if ($1316) {
          break L139;
         }
        }
       }
      } while(0);
      $1364 = $1192 | $1189;
      $1365 = $1364 | $1195;
      $1366 = ($1365|0)==(0);
      if ($1366) {
       break;
      } else {
       $bb_check$sroa$0$2 = $1189;$bb_check$sroa$1$2 = $1192;$bb_check$sroa$2$2 = $1195;
      }
     }
     $1367 = HEAP32[$1150>>2]|0;
     $1368 = HEAP32[$1064>>2]|0;
     $1369 = $1368 ^ $1367;
     HEAP32[$1064>>2] = $1369;
     $1370 = HEAP32[$1154>>2]|0;
     $1371 = HEAP32[$1065>>2]|0;
     $1372 = $1371 ^ $1370;
     HEAP32[$1065>>2] = $1372;
     $1373 = HEAP32[$1158>>2]|0;
     $1374 = HEAP32[$1066>>2]|0;
     $1375 = $1374 ^ $1373;
     HEAP32[$1066>>2] = $1375;
     $1376 = HEAP32[$1162>>2]|0;
     $1377 = HEAP32[$1067>>2]|0;
     $1378 = $1377 ^ $1376;
     HEAP32[$1067>>2] = $1378;
     $1379 = HEAP32[$1166>>2]|0;
     $1380 = HEAP32[$1068>>2]|0;
     $1381 = $1380 ^ $1379;
     HEAP32[$1068>>2] = $1381;
     $1382 = HEAP32[$1170>>2]|0;
     $1383 = HEAP32[$1069>>2]|0;
     $1384 = $1383 ^ $1382;
     HEAP32[$1069>>2] = $1384;
     $1385 = HEAP32[$1174>>2]|0;
     $1386 = HEAP32[$1070>>2]|0;
     $1387 = $1386 ^ $1385;
     HEAP32[$1070>>2] = $1387;
     $1388 = HEAP32[$1178>>2]|0;
     $1389 = HEAP32[$1071>>2]|0;
     $1390 = $1389 ^ $1388;
     HEAP32[$1071>>2] = $1390;
     $1391 = HEAP32[$1182>>2]|0;
     $1392 = HEAP32[$1072>>2]|0;
     $1393 = $1392 ^ $1391;
     HEAP32[$1072>>2] = $1393;
     $1394 = HEAP32[$1075>>2]|0;
     $1395 = HEAP32[$2>>2]|0;
     $1396 = $1395 ^ $1394;
     HEAP32[$2>>2] = $1396;
     $1397 = HEAP32[$1078>>2]|0;
     $1398 = HEAP32[$7>>2]|0;
     $1399 = $1398 ^ $1397;
     HEAP32[$7>>2] = $1399;
     $1400 = HEAP32[$1062>>2]|0;
     $1401 = $1400 ^ $1394;
     HEAP32[$1062>>2] = $1401;
     $1402 = HEAP32[$1063>>2]|0;
     $1403 = $1402 ^ $1397;
     HEAP32[$1063>>2] = $1403;
    }
    $1404 = $1080 | $1077;
    $1405 = ($1404|0)==(0);
    if ($1405) {
     break L137;
    } else {
     $bb$sroa$0$6575 = $1077;$bb$sroa$1$6576 = $1080;
    }
   }
   $1317 = HEAP32[$1150>>2]|0;
   $1318 = HEAP32[$1064>>2]|0;
   $1319 = $1318 ^ $1317;
   HEAP32[$1064>>2] = $1319;
   $1320 = HEAP32[$1154>>2]|0;
   $1321 = HEAP32[$1065>>2]|0;
   $1322 = $1321 ^ $1320;
   HEAP32[$1065>>2] = $1322;
   $1323 = HEAP32[$1158>>2]|0;
   $1324 = HEAP32[$1066>>2]|0;
   $1325 = $1324 ^ $1323;
   HEAP32[$1066>>2] = $1325;
   $1326 = HEAP32[$1162>>2]|0;
   $1327 = HEAP32[$1067>>2]|0;
   $1328 = $1327 ^ $1326;
   HEAP32[$1067>>2] = $1328;
   $1329 = HEAP32[$1166>>2]|0;
   $1330 = HEAP32[$1068>>2]|0;
   $1331 = $1330 ^ $1329;
   HEAP32[$1068>>2] = $1331;
   $1332 = HEAP32[$1170>>2]|0;
   $1333 = HEAP32[$1069>>2]|0;
   $1334 = $1333 ^ $1332;
   HEAP32[$1069>>2] = $1334;
   $1335 = HEAP32[$1174>>2]|0;
   $1336 = HEAP32[$1070>>2]|0;
   $1337 = $1336 ^ $1335;
   HEAP32[$1070>>2] = $1337;
   $1338 = HEAP32[$1178>>2]|0;
   $1339 = HEAP32[$1071>>2]|0;
   $1340 = $1339 ^ $1338;
   HEAP32[$1071>>2] = $1340;
   $1341 = HEAP32[$1182>>2]|0;
   $1342 = HEAP32[$1072>>2]|0;
   $1343 = $1342 ^ $1341;
   HEAP32[$1072>>2] = $1343;
   $1344 = HEAP32[$1075>>2]|0;
   $1345 = HEAP32[$2>>2]|0;
   $1346 = $1345 ^ $1344;
   HEAP32[$2>>2] = $1346;
   $1347 = HEAP32[$1078>>2]|0;
   $1348 = HEAP32[$7>>2]|0;
   $1349 = $1348 ^ $1347;
   HEAP32[$7>>2] = $1349;
   $1350 = HEAP32[$1062>>2]|0;
   $1351 = $1350 ^ $1344;
   HEAP32[$1062>>2] = $1351;
   $1352 = HEAP32[$1063>>2]|0;
   $1353 = $1352 ^ $1347;
   HEAP32[$1063>>2] = $1353;
   $1354 = $1074 << 7;
   $1355 = $1198 ? 16384 : 0;
   $1356 = ((($ptree) + ($1186)|0) + 512|0);
   $1357 = HEAP8[$1356>>0]|0;
   $1358 = $1357 << 24 >> 24;
   $1359 = $1358 << 19;
   $1360 = $1354 | $1186;
   $1361 = $1360 | $1355;
   $1362 = $1361 | $1359;
   $1363 = $1362 | 229376;
   $$0 = $1363;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $1406 = (($ptree) + 320|0);
 $1407 = HEAP32[$1406>>2]|0;
 $1408 = (($ptree) + 324|0);
 $1409 = HEAP32[$1408>>2]|0;
 $1410 = (($ptree) + 328|0);
 $1411 = HEAP32[$1410>>2]|0;
 $1412 = $1409 | $1407;
 $1413 = $1412 | $1411;
 $1414 = ($1413|0)==(0);
 L169: do {
  if (!($1414)) {
   $1415 = (($ptree) + 593|0);
   $1416 = (($ptree) + 80|0);
   $1417 = (($ptree) + 84|0);
   $1418 = (($ptree) + 88|0);
   $1419 = (($ptree) + 128|0);
   $1420 = (($ptree) + 132|0);
   $1421 = (($ptree) + 136|0);
   $1422 = (($ptree) + 32|0);
   $1423 = (($ptree) + 36|0);
   $1424 = (($ptree) + 40|0);
   $1425 = (($ptree) + 44|0);
   $1426 = (($ptree) + 48|0);
   $1427 = (($ptree) + 52|0);
   $1428 = (($ptree) + 56|0);
   $1429 = (($ptree) + 60|0);
   $1430 = (($ptree) + 64|0);
   $1431 = (($ptree) + 594|0);
   $bb$sroa$0$7542 = $1407;$bb$sroa$1$7543 = $1409;$bb$sroa$2$7544 = $1411;
   L171: while(1) {
    $1432 = (_last_one210($bb$sroa$2$7544,$bb$sroa$1$7543,$bb$sroa$0$7542)|0);
    $1433 = (34156304 + (($1432*12)|0)|0);
    $1434 = HEAP32[$1433>>2]|0;
    $1435 = $1434 ^ $bb$sroa$0$7542;
    $1436 = ((34156304 + (($1432*12)|0)|0) + 4|0);
    $1437 = HEAP32[$1436>>2]|0;
    $1438 = $1437 ^ $bb$sroa$1$7543;
    $1439 = ((34156304 + (($1432*12)|0)|0) + 8|0);
    $1440 = HEAP32[$1439>>2]|0;
    $1441 = $1440 ^ $bb$sroa$2$7544;
    $1442 = ((33572424 + ($1432<<3)|0) + 6|0);
    $1443 = HEAP8[$1442>>0]|0;
    $1444 = $1443&255;
    $1445 = ((($ptree) + ($1444<<2)|0) + 56|0);
    $1446 = HEAP32[$1445>>2]|0;
    $1447 = ((33572424 + ($1432<<3)|0) + 7|0);
    $1448 = HEAP8[$1447>>0]|0;
    $1449 = $1448&255;
    $1450 = $1446 >>> $1449;
    $1451 = $1450 & 127;
    $1452 = ((33704320 + (($1432*1536)|0)|0) + (($1451*12)|0)|0);
    $1453 = HEAP32[$1452>>2]|0;
    $1454 = ((33572424 + ($1432<<3)|0) + 4|0);
    $1455 = HEAP8[$1454>>0]|0;
    $1456 = $1455&255;
    $1457 = ((($ptree) + ($1456<<2)|0) + 44|0);
    $1458 = HEAP32[$1457>>2]|0;
    $1459 = ((33572424 + ($1432<<3)|0) + 5|0);
    $1460 = HEAP8[$1459>>0]|0;
    $1461 = $1460&255;
    $1462 = $1458 >>> $1461;
    $1463 = $1462 & 127;
    $1464 = ((33579904 + (($1432*1536)|0)|0) + (($1463*12)|0)|0);
    $1465 = HEAP32[$1464>>2]|0;
    $1466 = $1465 | $1453;
    $1467 = (((33704320 + (($1432*1536)|0)|0) + (($1451*12)|0)|0) + 4|0);
    $1468 = HEAP32[$1467>>2]|0;
    $1469 = (((33579904 + (($1432*1536)|0)|0) + (($1463*12)|0)|0) + 4|0);
    $1470 = HEAP32[$1469>>2]|0;
    $1471 = $1470 | $1468;
    $1472 = (((33704320 + (($1432*1536)|0)|0) + (($1451*12)|0)|0) + 8|0);
    $1473 = HEAP32[$1472>>2]|0;
    $1474 = (((33579904 + (($1432*1536)|0)|0) + (($1463*12)|0)|0) + 8|0);
    $1475 = HEAP32[$1474>>2]|0;
    $1476 = $1475 | $1473;
    $1477 = (33578928 + (($1432*12)|0)|0);
    $1478 = HEAP32[$1477>>2]|0;
    $1479 = $1466 | $1478;
    $1480 = ((33578928 + (($1432*12)|0)|0) + 4|0);
    $1481 = HEAP32[$1480>>2]|0;
    $1482 = $1471 | $1481;
    $1483 = ((33578928 + (($1432*12)|0)|0) + 8|0);
    $1484 = HEAP32[$1483>>2]|0;
    $1485 = $1476 | $1484;
    $1486 = $1479 & $362;
    $1487 = $1482 & $364;
    $1488 = $1485 & $366;
    $1489 = HEAP8[$1415>>0]|0;
    $1490 = $1489&255;
    $1491 = (33578928 + (($1490*12)|0)|0);
    $1492 = HEAP32[$1491>>2]|0;
    $1493 = $1486 & $1492;
    $1494 = ((33578928 + (($1490*12)|0)|0) + 4|0);
    $1495 = HEAP32[$1494>>2]|0;
    $1496 = $1487 & $1495;
    $1497 = ((33578928 + (($1490*12)|0)|0) + 8|0);
    $1498 = HEAP32[$1497>>2]|0;
    $1499 = $1488 & $1498;
    $1500 = $1496 | $1493;
    $1501 = $1500 | $1499;
    $1502 = ($1501|0)==(0);
    if (!($1502)) {
     $1503 = HEAP32[$1416>>2]|0;
     $1504 = $1503 ^ $1434;
     HEAP32[$1416>>2] = $1504;
     $1505 = HEAP32[$1417>>2]|0;
     $1506 = $1505 ^ $1437;
     HEAP32[$1417>>2] = $1506;
     $1507 = HEAP32[$1418>>2]|0;
     $1508 = $1507 ^ $1440;
     HEAP32[$1418>>2] = $1508;
     $1509 = HEAP32[$1419>>2]|0;
     $1510 = $1509 ^ $1434;
     HEAP32[$1419>>2] = $1510;
     $1511 = HEAP32[$1420>>2]|0;
     $1512 = $1511 ^ $1437;
     HEAP32[$1420>>2] = $1512;
     $1513 = HEAP32[$1421>>2]|0;
     $1514 = $1513 ^ $1440;
     HEAP32[$1421>>2] = $1514;
     $1515 = HEAP32[$2>>2]|0;
     $1516 = $1515 ^ $1434;
     HEAP32[$2>>2] = $1516;
     $1517 = HEAP32[$7>>2]|0;
     $1518 = $1517 ^ $1437;
     HEAP32[$7>>2] = $1518;
     $1519 = HEAP32[$12>>2]|0;
     $1520 = $1519 ^ $1440;
     HEAP32[$12>>2] = $1520;
     $1521 = (34157280 + (($1432*12)|0)|0);
     $1522 = HEAP32[$1521>>2]|0;
     $1523 = HEAP32[$1422>>2]|0;
     $1524 = $1523 ^ $1522;
     HEAP32[$1422>>2] = $1524;
     $1525 = ((34157280 + (($1432*12)|0)|0) + 4|0);
     $1526 = HEAP32[$1525>>2]|0;
     $1527 = HEAP32[$1423>>2]|0;
     $1528 = $1527 ^ $1526;
     HEAP32[$1423>>2] = $1528;
     $1529 = ((34157280 + (($1432*12)|0)|0) + 8|0);
     $1530 = HEAP32[$1529>>2]|0;
     $1531 = HEAP32[$1424>>2]|0;
     $1532 = $1531 ^ $1530;
     HEAP32[$1424>>2] = $1532;
     $1533 = (34158256 + (($1432*12)|0)|0);
     $1534 = HEAP32[$1533>>2]|0;
     $1535 = HEAP32[$1425>>2]|0;
     $1536 = $1535 ^ $1534;
     HEAP32[$1425>>2] = $1536;
     $1537 = ((34158256 + (($1432*12)|0)|0) + 4|0);
     $1538 = HEAP32[$1537>>2]|0;
     $1539 = HEAP32[$1426>>2]|0;
     $1540 = $1539 ^ $1538;
     HEAP32[$1426>>2] = $1540;
     $1541 = ((34158256 + (($1432*12)|0)|0) + 8|0);
     $1542 = HEAP32[$1541>>2]|0;
     $1543 = HEAP32[$1427>>2]|0;
     $1544 = $1543 ^ $1542;
     HEAP32[$1427>>2] = $1544;
     $1545 = (34159232 + (($1432*12)|0)|0);
     $1546 = HEAP32[$1545>>2]|0;
     $1547 = HEAP32[$1428>>2]|0;
     $1548 = $1547 ^ $1546;
     HEAP32[$1428>>2] = $1548;
     $1549 = ((34159232 + (($1432*12)|0)|0) + 4|0);
     $1550 = HEAP32[$1549>>2]|0;
     $1551 = HEAP32[$1429>>2]|0;
     $1552 = $1551 ^ $1550;
     HEAP32[$1429>>2] = $1552;
     $1553 = ((34159232 + (($1432*12)|0)|0) + 8|0);
     $1554 = HEAP32[$1553>>2]|0;
     $1555 = HEAP32[$1430>>2]|0;
     $1556 = $1555 ^ $1554;
     HEAP32[$1430>>2] = $1556;
     $bb_check$sroa$0$3 = $1493;$bb_check$sroa$1$3 = $1496;$bb_check$sroa$2$3 = $1499;
     while(1) {
      $1557 = (_last_one210($bb_check$sroa$2$3,$bb_check$sroa$1$3,$bb_check$sroa$0$3)|0);
      $1558 = (34156304 + (($1557*12)|0)|0);
      $1559 = HEAP32[$1558>>2]|0;
      $1560 = $1559 ^ $bb_check$sroa$0$3;
      $1561 = ((34156304 + (($1557*12)|0)|0) + 4|0);
      $1562 = HEAP32[$1561>>2]|0;
      $1563 = $1562 ^ $bb_check$sroa$1$3;
      $1564 = ((34156304 + (($1557*12)|0)|0) + 8|0);
      $1565 = HEAP32[$1564>>2]|0;
      $1566 = $1565 ^ $bb_check$sroa$2$3;
      $1567 = (_is_black_attacked($ptree,$1557)|0);
      $1568 = ($1567|0)==(0);
      do {
       if (!($1568)) {
        $1569 = (33704320 + (($1557*1536)|0)|0);
        $1570 = HEAP32[$1569>>2]|0;
        $1571 = (33579904 + (($1557*1536)|0)|0);
        $1572 = HEAP32[$1571>>2]|0;
        $1573 = $1572 | $1570;
        $1574 = ((33704320 + (($1557*1536)|0)|0) + 4|0);
        $1575 = HEAP32[$1574>>2]|0;
        $1576 = ((33579904 + (($1557*1536)|0)|0) + 4|0);
        $1577 = HEAP32[$1576>>2]|0;
        $1578 = $1577 | $1575;
        $1579 = ((33704320 + (($1557*1536)|0)|0) + 8|0);
        $1580 = HEAP32[$1579>>2]|0;
        $1581 = ((33579904 + (($1557*1536)|0)|0) + 8|0);
        $1582 = HEAP32[$1581>>2]|0;
        $1583 = $1582 | $1580;
        $1584 = (33578928 + (($1557*12)|0)|0);
        $1585 = HEAP32[$1584>>2]|0;
        $1586 = $1573 | $1585;
        $1587 = ((33578928 + (($1557*12)|0)|0) + 4|0);
        $1588 = HEAP32[$1587>>2]|0;
        $1589 = $1578 | $1588;
        $1590 = ((33578928 + (($1557*12)|0)|0) + 8|0);
        $1591 = HEAP32[$1590>>2]|0;
        $1592 = $1583 | $1591;
        $1593 = (_can_b_king_escape($ptree,$1557,$1586,$1589,$1592)|0);
        $1594 = ($1593|0)==(0);
        if ($1594) {
         $1595 = HEAP8[$1415>>0]|0;
         $1596 = $1595&255;
         $1597 = ((220518304 + (($1596*81)|0)|0) + ($1432)|0);
         $1598 = HEAP8[$1597>>0]|0;
         $1599 = $1598&255;
         $1600 = ($1598<<24>>24)==(0);
         if ($1600) {
          label = 124;
         } else {
          $1601 = ((220518304 + (($1596*81)|0)|0) + ($1557)|0);
          $1602 = HEAP8[$1601>>0]|0;
          $1603 = ($1598<<24>>24)==($1602<<24>>24);
          if ($1603) {
           label = 124;
          } else {
           $1604 = (_is_pinned_on_black_king($ptree,$1432,$1599)|0);
           $1605 = ($1604|0)==(0);
           if ($1605) {
            label = 124;
           }
          }
         }
         if ((label|0) == 124) {
          label = 0;
          $1606 = (_can_b_piece_capture($ptree,$1557)|0);
          $1607 = ($1606|0)==(0);
          if (!($1607)) {
           break;
          }
         }
         $1608 = HEAP8[$1431>>0]|0;
         $1609 = $1608&255;
         $1610 = ((220518304 + (($1609*81)|0)|0) + ($1432)|0);
         $1611 = HEAP8[$1610>>0]|0;
         $1612 = $1611&255;
         $1613 = ($1611<<24>>24)==(0);
         if ($1613) {
          break L171;
         }
         $1614 = ((220518304 + (($1609*81)|0)|0) + ($1557)|0);
         $1615 = HEAP8[$1614>>0]|0;
         $1616 = ($1611<<24>>24)==($1615<<24>>24);
         if ($1616) {
          break L171;
         }
         $1617 = (_is_pinned_on_white_king($ptree,$1432,$1612)|0);
         $1618 = ($1617|0)==(0);
         if ($1618) {
          break L171;
         }
        }
       }
      } while(0);
      $1675 = $1563 | $1560;
      $1676 = $1675 | $1566;
      $1677 = ($1676|0)==(0);
      if ($1677) {
       break;
      } else {
       $bb_check$sroa$0$3 = $1560;$bb_check$sroa$1$3 = $1563;$bb_check$sroa$2$3 = $1566;
      }
     }
     $1678 = HEAP32[$1521>>2]|0;
     $1679 = HEAP32[$1422>>2]|0;
     $1680 = $1679 ^ $1678;
     HEAP32[$1422>>2] = $1680;
     $1681 = HEAP32[$1525>>2]|0;
     $1682 = HEAP32[$1423>>2]|0;
     $1683 = $1682 ^ $1681;
     HEAP32[$1423>>2] = $1683;
     $1684 = HEAP32[$1529>>2]|0;
     $1685 = HEAP32[$1424>>2]|0;
     $1686 = $1685 ^ $1684;
     HEAP32[$1424>>2] = $1686;
     $1687 = HEAP32[$1533>>2]|0;
     $1688 = HEAP32[$1425>>2]|0;
     $1689 = $1688 ^ $1687;
     HEAP32[$1425>>2] = $1689;
     $1690 = HEAP32[$1537>>2]|0;
     $1691 = HEAP32[$1426>>2]|0;
     $1692 = $1691 ^ $1690;
     HEAP32[$1426>>2] = $1692;
     $1693 = HEAP32[$1541>>2]|0;
     $1694 = HEAP32[$1427>>2]|0;
     $1695 = $1694 ^ $1693;
     HEAP32[$1427>>2] = $1695;
     $1696 = HEAP32[$1545>>2]|0;
     $1697 = HEAP32[$1428>>2]|0;
     $1698 = $1697 ^ $1696;
     HEAP32[$1428>>2] = $1698;
     $1699 = HEAP32[$1549>>2]|0;
     $1700 = HEAP32[$1429>>2]|0;
     $1701 = $1700 ^ $1699;
     HEAP32[$1429>>2] = $1701;
     $1702 = HEAP32[$1553>>2]|0;
     $1703 = HEAP32[$1430>>2]|0;
     $1704 = $1703 ^ $1702;
     HEAP32[$1430>>2] = $1704;
     $1705 = HEAP32[$1433>>2]|0;
     $1706 = HEAP32[$2>>2]|0;
     $1707 = $1706 ^ $1705;
     HEAP32[$2>>2] = $1707;
     $1708 = HEAP32[$1436>>2]|0;
     $1709 = HEAP32[$7>>2]|0;
     $1710 = $1709 ^ $1708;
     HEAP32[$7>>2] = $1710;
     $1711 = HEAP32[$1439>>2]|0;
     $1712 = HEAP32[$12>>2]|0;
     $1713 = $1712 ^ $1711;
     HEAP32[$12>>2] = $1713;
     $1714 = HEAP32[$1419>>2]|0;
     $1715 = $1714 ^ $1705;
     HEAP32[$1419>>2] = $1715;
     $1716 = HEAP32[$1420>>2]|0;
     $1717 = $1716 ^ $1708;
     HEAP32[$1420>>2] = $1717;
     $1718 = HEAP32[$1421>>2]|0;
     $1719 = $1718 ^ $1711;
     HEAP32[$1421>>2] = $1719;
     $1720 = HEAP32[$1416>>2]|0;
     $1721 = $1720 ^ $1705;
     HEAP32[$1416>>2] = $1721;
     $1722 = HEAP32[$1417>>2]|0;
     $1723 = $1722 ^ $1708;
     HEAP32[$1417>>2] = $1723;
     $1724 = HEAP32[$1418>>2]|0;
     $1725 = $1724 ^ $1711;
     HEAP32[$1418>>2] = $1725;
    }
    $1726 = $1438 | $1435;
    $1727 = $1726 | $1441;
    $1728 = ($1727|0)==(0);
    if ($1728) {
     break L169;
    } else {
     $bb$sroa$0$7542 = $1435;$bb$sroa$1$7543 = $1438;$bb$sroa$2$7544 = $1441;
    }
   }
   $1619 = HEAP32[$1521>>2]|0;
   $1620 = HEAP32[$1422>>2]|0;
   $1621 = $1620 ^ $1619;
   HEAP32[$1422>>2] = $1621;
   $1622 = HEAP32[$1525>>2]|0;
   $1623 = HEAP32[$1423>>2]|0;
   $1624 = $1623 ^ $1622;
   HEAP32[$1423>>2] = $1624;
   $1625 = HEAP32[$1529>>2]|0;
   $1626 = HEAP32[$1424>>2]|0;
   $1627 = $1626 ^ $1625;
   HEAP32[$1424>>2] = $1627;
   $1628 = HEAP32[$1533>>2]|0;
   $1629 = HEAP32[$1425>>2]|0;
   $1630 = $1629 ^ $1628;
   HEAP32[$1425>>2] = $1630;
   $1631 = HEAP32[$1537>>2]|0;
   $1632 = HEAP32[$1426>>2]|0;
   $1633 = $1632 ^ $1631;
   HEAP32[$1426>>2] = $1633;
   $1634 = HEAP32[$1541>>2]|0;
   $1635 = HEAP32[$1427>>2]|0;
   $1636 = $1635 ^ $1634;
   HEAP32[$1427>>2] = $1636;
   $1637 = HEAP32[$1545>>2]|0;
   $1638 = HEAP32[$1428>>2]|0;
   $1639 = $1638 ^ $1637;
   HEAP32[$1428>>2] = $1639;
   $1640 = HEAP32[$1549>>2]|0;
   $1641 = HEAP32[$1429>>2]|0;
   $1642 = $1641 ^ $1640;
   HEAP32[$1429>>2] = $1642;
   $1643 = HEAP32[$1553>>2]|0;
   $1644 = HEAP32[$1430>>2]|0;
   $1645 = $1644 ^ $1643;
   HEAP32[$1430>>2] = $1645;
   $1646 = HEAP32[$1433>>2]|0;
   $1647 = HEAP32[$2>>2]|0;
   $1648 = $1647 ^ $1646;
   HEAP32[$2>>2] = $1648;
   $1649 = HEAP32[$1436>>2]|0;
   $1650 = HEAP32[$7>>2]|0;
   $1651 = $1650 ^ $1649;
   HEAP32[$7>>2] = $1651;
   $1652 = HEAP32[$1439>>2]|0;
   $1653 = HEAP32[$12>>2]|0;
   $1654 = $1653 ^ $1652;
   HEAP32[$12>>2] = $1654;
   $1655 = HEAP32[$1419>>2]|0;
   $1656 = $1655 ^ $1646;
   HEAP32[$1419>>2] = $1656;
   $1657 = HEAP32[$1420>>2]|0;
   $1658 = $1657 ^ $1649;
   HEAP32[$1420>>2] = $1658;
   $1659 = HEAP32[$1421>>2]|0;
   $1660 = $1659 ^ $1652;
   HEAP32[$1421>>2] = $1660;
   $1661 = HEAP32[$1416>>2]|0;
   $1662 = $1661 ^ $1646;
   HEAP32[$1416>>2] = $1662;
   $1663 = HEAP32[$1417>>2]|0;
   $1664 = $1663 ^ $1649;
   HEAP32[$1417>>2] = $1664;
   $1665 = HEAP32[$1418>>2]|0;
   $1666 = $1665 ^ $1652;
   HEAP32[$1418>>2] = $1666;
   $1667 = $1432 << 7;
   $1668 = ((($ptree) + ($1557)|0) + 512|0);
   $1669 = HEAP8[$1668>>0]|0;
   $1670 = $1669 << 24 >> 24;
   $1671 = $1670 << 19;
   $1672 = $1667 | $1557;
   $1673 = $1672 | $1671;
   $1674 = $1673 | 458752;
   $$0 = $1674;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $1729 = (($ptree) + 280|0);
 $1730 = HEAP32[$1729>>2]|0;
 $1731 = ($1730|0)==(0);
 L194: do {
  if (!($1731)) {
   $1732 = (($ptree) + 593|0);
   $1733 = (($ptree) + 136|0);
   $1734 = (($ptree) + 32|0);
   $1735 = (($ptree) + 36|0);
   $1736 = (($ptree) + 40|0);
   $1737 = (($ptree) + 44|0);
   $1738 = (($ptree) + 48|0);
   $1739 = (($ptree) + 52|0);
   $1740 = (($ptree) + 56|0);
   $1741 = (($ptree) + 60|0);
   $1742 = (($ptree) + 64|0);
   $1743 = (($ptree) + 594|0);
   $bb$sroa$2$8507 = $1730;
   L196: while(1) {
    $1744 = (_first_one2($bb$sroa$2$8507)|0);
    $1745 = ((34156304 + (($1744*12)|0)|0) + 8|0);
    $1746 = HEAP32[$1745>>2]|0;
    $1747 = $1746 ^ $bb$sroa$2$8507;
    $1748 = ((33572424 + ($1744<<3)|0) + 6|0);
    $1749 = HEAP8[$1748>>0]|0;
    $1750 = $1749&255;
    $1751 = ((($ptree) + ($1750<<2)|0) + 56|0);
    $1752 = HEAP32[$1751>>2]|0;
    $1753 = ((33572424 + ($1744<<3)|0) + 7|0);
    $1754 = HEAP8[$1753>>0]|0;
    $1755 = $1754&255;
    $1756 = $1752 >>> $1755;
    $1757 = $1756 & 127;
    $1758 = ((33704320 + (($1744*1536)|0)|0) + (($1757*12)|0)|0);
    $1759 = HEAP32[$1758>>2]|0;
    $1760 = ((33572424 + ($1744<<3)|0) + 4|0);
    $1761 = HEAP8[$1760>>0]|0;
    $1762 = $1761&255;
    $1763 = ((($ptree) + ($1762<<2)|0) + 44|0);
    $1764 = HEAP32[$1763>>2]|0;
    $1765 = ((33572424 + ($1744<<3)|0) + 5|0);
    $1766 = HEAP8[$1765>>0]|0;
    $1767 = $1766&255;
    $1768 = $1764 >>> $1767;
    $1769 = $1768 & 127;
    $1770 = ((33579904 + (($1744*1536)|0)|0) + (($1769*12)|0)|0);
    $1771 = HEAP32[$1770>>2]|0;
    $1772 = $1771 | $1759;
    $1773 = (((33704320 + (($1744*1536)|0)|0) + (($1757*12)|0)|0) + 4|0);
    $1774 = HEAP32[$1773>>2]|0;
    $1775 = (((33579904 + (($1744*1536)|0)|0) + (($1769*12)|0)|0) + 4|0);
    $1776 = HEAP32[$1775>>2]|0;
    $1777 = $1776 | $1774;
    $1778 = (((33704320 + (($1744*1536)|0)|0) + (($1757*12)|0)|0) + 8|0);
    $1779 = HEAP32[$1778>>2]|0;
    $1780 = (((33579904 + (($1744*1536)|0)|0) + (($1769*12)|0)|0) + 8|0);
    $1781 = HEAP32[$1780>>2]|0;
    $1782 = $1781 | $1779;
    $1783 = $1772 & $362;
    $1784 = $1777 & $364;
    $1785 = $1782 & $366;
    $1786 = HEAP8[$1732>>0]|0;
    $1787 = $1786&255;
    $1788 = (33578928 + (($1787*12)|0)|0);
    $1789 = HEAP32[$1788>>2]|0;
    $1790 = $1783 & $1789;
    $1791 = ((33578928 + (($1787*12)|0)|0) + 4|0);
    $1792 = HEAP32[$1791>>2]|0;
    $1793 = $1784 & $1792;
    $1794 = ((33578928 + (($1787*12)|0)|0) + 8|0);
    $1795 = HEAP32[$1794>>2]|0;
    $1796 = $1785 & $1795;
    $1797 = $1793 | $1790;
    $1798 = $1797 | $1796;
    $1799 = ($1798|0)==(0);
    if (!($1799)) {
     $1800 = HEAP32[$1733>>2]|0;
     $1801 = $1800 ^ $1746;
     HEAP32[$1733>>2] = $1801;
     $1802 = HEAP32[$12>>2]|0;
     $1803 = $1802 ^ $1746;
     HEAP32[$12>>2] = $1803;
     $1804 = (34157280 + (($1744*12)|0)|0);
     $1805 = HEAP32[$1804>>2]|0;
     $1806 = HEAP32[$1734>>2]|0;
     $1807 = $1806 ^ $1805;
     HEAP32[$1734>>2] = $1807;
     $1808 = ((34157280 + (($1744*12)|0)|0) + 4|0);
     $1809 = HEAP32[$1808>>2]|0;
     $1810 = HEAP32[$1735>>2]|0;
     $1811 = $1810 ^ $1809;
     HEAP32[$1735>>2] = $1811;
     $1812 = ((34157280 + (($1744*12)|0)|0) + 8|0);
     $1813 = HEAP32[$1812>>2]|0;
     $1814 = HEAP32[$1736>>2]|0;
     $1815 = $1814 ^ $1813;
     HEAP32[$1736>>2] = $1815;
     $1816 = (34158256 + (($1744*12)|0)|0);
     $1817 = HEAP32[$1816>>2]|0;
     $1818 = HEAP32[$1737>>2]|0;
     $1819 = $1818 ^ $1817;
     HEAP32[$1737>>2] = $1819;
     $1820 = ((34158256 + (($1744*12)|0)|0) + 4|0);
     $1821 = HEAP32[$1820>>2]|0;
     $1822 = HEAP32[$1738>>2]|0;
     $1823 = $1822 ^ $1821;
     HEAP32[$1738>>2] = $1823;
     $1824 = ((34158256 + (($1744*12)|0)|0) + 8|0);
     $1825 = HEAP32[$1824>>2]|0;
     $1826 = HEAP32[$1739>>2]|0;
     $1827 = $1826 ^ $1825;
     HEAP32[$1739>>2] = $1827;
     $1828 = (34159232 + (($1744*12)|0)|0);
     $1829 = HEAP32[$1828>>2]|0;
     $1830 = HEAP32[$1740>>2]|0;
     $1831 = $1830 ^ $1829;
     HEAP32[$1740>>2] = $1831;
     $1832 = ((34159232 + (($1744*12)|0)|0) + 4|0);
     $1833 = HEAP32[$1832>>2]|0;
     $1834 = HEAP32[$1741>>2]|0;
     $1835 = $1834 ^ $1833;
     HEAP32[$1741>>2] = $1835;
     $1836 = ((34159232 + (($1744*12)|0)|0) + 8|0);
     $1837 = HEAP32[$1836>>2]|0;
     $1838 = HEAP32[$1742>>2]|0;
     $1839 = $1838 ^ $1837;
     HEAP32[$1742>>2] = $1839;
     $bb_check$sroa$0$4 = $1790;$bb_check$sroa$1$4 = $1793;$bb_check$sroa$2$4 = $1796;
     while(1) {
      $1840 = (_last_one210($bb_check$sroa$2$4,$bb_check$sroa$1$4,$bb_check$sroa$0$4)|0);
      $1841 = (34156304 + (($1840*12)|0)|0);
      $1842 = HEAP32[$1841>>2]|0;
      $1843 = $1842 ^ $bb_check$sroa$0$4;
      $1844 = ((34156304 + (($1840*12)|0)|0) + 4|0);
      $1845 = HEAP32[$1844>>2]|0;
      $1846 = $1845 ^ $bb_check$sroa$1$4;
      $1847 = ((34156304 + (($1840*12)|0)|0) + 8|0);
      $1848 = HEAP32[$1847>>2]|0;
      $1849 = $1848 ^ $bb_check$sroa$2$4;
      $1850 = (_is_black_attacked($ptree,$1840)|0);
      $1851 = ($1850|0)==(0);
      do {
       if (!($1851)) {
        $1852 = (33704320 + (($1840*1536)|0)|0);
        $1853 = HEAP32[$1852>>2]|0;
        $1854 = (33579904 + (($1840*1536)|0)|0);
        $1855 = HEAP32[$1854>>2]|0;
        $1856 = $1855 | $1853;
        $1857 = ((33704320 + (($1840*1536)|0)|0) + 4|0);
        $1858 = HEAP32[$1857>>2]|0;
        $1859 = ((33579904 + (($1840*1536)|0)|0) + 4|0);
        $1860 = HEAP32[$1859>>2]|0;
        $1861 = $1860 | $1858;
        $1862 = ((33704320 + (($1840*1536)|0)|0) + 8|0);
        $1863 = HEAP32[$1862>>2]|0;
        $1864 = ((33579904 + (($1840*1536)|0)|0) + 8|0);
        $1865 = HEAP32[$1864>>2]|0;
        $1866 = $1865 | $1863;
        $1867 = (33578928 + (($1840*12)|0)|0);
        $1868 = HEAP32[$1867>>2]|0;
        $1869 = $1856 | $1868;
        $1870 = ((33578928 + (($1840*12)|0)|0) + 4|0);
        $1871 = HEAP32[$1870>>2]|0;
        $1872 = $1861 | $1871;
        $1873 = ((33578928 + (($1840*12)|0)|0) + 8|0);
        $1874 = HEAP32[$1873>>2]|0;
        $1875 = $1866 | $1874;
        $1876 = (_can_b_king_escape($ptree,$1840,$1869,$1872,$1875)|0);
        $1877 = ($1876|0)==(0);
        if ($1877) {
         $1878 = HEAP8[$1732>>0]|0;
         $1879 = $1878&255;
         $1880 = ((220518304 + (($1879*81)|0)|0) + ($1744)|0);
         $1881 = HEAP8[$1880>>0]|0;
         $1882 = $1881&255;
         $1883 = ($1881<<24>>24)==(0);
         do {
          if ($1883) {
           label = 141;
          } else {
           $1884 = ((220518304 + (($1879*81)|0)|0) + ($1840)|0);
           $1885 = HEAP8[$1884>>0]|0;
           $1886 = ($1881<<24>>24)==($1885<<24>>24);
           if ($1886) {
            label = 141;
            break;
           }
           $1887 = (_is_pinned_on_black_king($ptree,$1744,$1882)|0);
           $1888 = ($1887|0)==(0);
           if ($1888) {
            label = 141;
           }
          }
         } while(0);
         if ((label|0) == 141) {
          label = 0;
          $1889 = (_can_b_piece_capture($ptree,$1840)|0);
          $1890 = ($1889|0)==(0);
          if (!($1890)) {
           break;
          }
         }
         $1891 = HEAP8[$1743>>0]|0;
         $1892 = $1891&255;
         $1893 = ((220518304 + (($1892*81)|0)|0) + ($1744)|0);
         $1894 = HEAP8[$1893>>0]|0;
         $1895 = $1894&255;
         $1896 = ($1894<<24>>24)==(0);
         if ($1896) {
          break L196;
         }
         $1897 = ((220518304 + (($1892*81)|0)|0) + ($1840)|0);
         $1898 = HEAP8[$1897>>0]|0;
         $1899 = ($1894<<24>>24)==($1898<<24>>24);
         if ($1899) {
          break L196;
         }
         $1900 = (_is_pinned_on_white_king($ptree,$1744,$1895)|0);
         $1901 = ($1900|0)==(0);
         if ($1901) {
          break L196;
         }
        }
       }
      } while(0);
      $1942 = $1846 | $1843;
      $1943 = $1942 | $1849;
      $1944 = ($1943|0)==(0);
      if ($1944) {
       break;
      } else {
       $bb_check$sroa$0$4 = $1843;$bb_check$sroa$1$4 = $1846;$bb_check$sroa$2$4 = $1849;
      }
     }
     $1945 = HEAP32[$1804>>2]|0;
     $1946 = HEAP32[$1734>>2]|0;
     $1947 = $1946 ^ $1945;
     HEAP32[$1734>>2] = $1947;
     $1948 = HEAP32[$1808>>2]|0;
     $1949 = HEAP32[$1735>>2]|0;
     $1950 = $1949 ^ $1948;
     HEAP32[$1735>>2] = $1950;
     $1951 = HEAP32[$1812>>2]|0;
     $1952 = HEAP32[$1736>>2]|0;
     $1953 = $1952 ^ $1951;
     HEAP32[$1736>>2] = $1953;
     $1954 = HEAP32[$1816>>2]|0;
     $1955 = HEAP32[$1737>>2]|0;
     $1956 = $1955 ^ $1954;
     HEAP32[$1737>>2] = $1956;
     $1957 = HEAP32[$1820>>2]|0;
     $1958 = HEAP32[$1738>>2]|0;
     $1959 = $1958 ^ $1957;
     HEAP32[$1738>>2] = $1959;
     $1960 = HEAP32[$1824>>2]|0;
     $1961 = HEAP32[$1739>>2]|0;
     $1962 = $1961 ^ $1960;
     HEAP32[$1739>>2] = $1962;
     $1963 = HEAP32[$1828>>2]|0;
     $1964 = HEAP32[$1740>>2]|0;
     $1965 = $1964 ^ $1963;
     HEAP32[$1740>>2] = $1965;
     $1966 = HEAP32[$1832>>2]|0;
     $1967 = HEAP32[$1741>>2]|0;
     $1968 = $1967 ^ $1966;
     HEAP32[$1741>>2] = $1968;
     $1969 = HEAP32[$1836>>2]|0;
     $1970 = HEAP32[$1742>>2]|0;
     $1971 = $1970 ^ $1969;
     HEAP32[$1742>>2] = $1971;
     $1972 = HEAP32[$1745>>2]|0;
     $1973 = HEAP32[$12>>2]|0;
     $1974 = $1973 ^ $1972;
     HEAP32[$12>>2] = $1974;
     $1975 = HEAP32[$1733>>2]|0;
     $1976 = $1975 ^ $1972;
     HEAP32[$1733>>2] = $1976;
    }
    $1977 = ($1746|0)==($bb$sroa$2$8507|0);
    if ($1977) {
     break L194;
    } else {
     $bb$sroa$2$8507 = $1747;
    }
   }
   $1902 = HEAP32[$1804>>2]|0;
   $1903 = HEAP32[$1734>>2]|0;
   $1904 = $1903 ^ $1902;
   HEAP32[$1734>>2] = $1904;
   $1905 = HEAP32[$1808>>2]|0;
   $1906 = HEAP32[$1735>>2]|0;
   $1907 = $1906 ^ $1905;
   HEAP32[$1735>>2] = $1907;
   $1908 = HEAP32[$1812>>2]|0;
   $1909 = HEAP32[$1736>>2]|0;
   $1910 = $1909 ^ $1908;
   HEAP32[$1736>>2] = $1910;
   $1911 = HEAP32[$1816>>2]|0;
   $1912 = HEAP32[$1737>>2]|0;
   $1913 = $1912 ^ $1911;
   HEAP32[$1737>>2] = $1913;
   $1914 = HEAP32[$1820>>2]|0;
   $1915 = HEAP32[$1738>>2]|0;
   $1916 = $1915 ^ $1914;
   HEAP32[$1738>>2] = $1916;
   $1917 = HEAP32[$1824>>2]|0;
   $1918 = HEAP32[$1739>>2]|0;
   $1919 = $1918 ^ $1917;
   HEAP32[$1739>>2] = $1919;
   $1920 = HEAP32[$1828>>2]|0;
   $1921 = HEAP32[$1740>>2]|0;
   $1922 = $1921 ^ $1920;
   HEAP32[$1740>>2] = $1922;
   $1923 = HEAP32[$1832>>2]|0;
   $1924 = HEAP32[$1741>>2]|0;
   $1925 = $1924 ^ $1923;
   HEAP32[$1741>>2] = $1925;
   $1926 = HEAP32[$1836>>2]|0;
   $1927 = HEAP32[$1742>>2]|0;
   $1928 = $1927 ^ $1926;
   HEAP32[$1742>>2] = $1928;
   $1929 = HEAP32[$1745>>2]|0;
   $1930 = HEAP32[$12>>2]|0;
   $1931 = $1930 ^ $1929;
   HEAP32[$12>>2] = $1931;
   $1932 = HEAP32[$1733>>2]|0;
   $1933 = $1932 ^ $1929;
   HEAP32[$1733>>2] = $1933;
   $1934 = $1744 << 7;
   $1935 = ((($ptree) + ($1840)|0) + 512|0);
   $1936 = HEAP8[$1935>>0]|0;
   $1937 = $1936 << 24 >> 24;
   $1938 = $1937 << 19;
   $1939 = $1934 | $1840;
   $1940 = $1939 | $1938;
   $1941 = $1940 | 212992;
   $$0 = $1941;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $1978 = (($ptree) + 272|0);
 $1979 = HEAP32[$1978>>2]|0;
 $1980 = (($ptree) + 276|0);
 $1981 = HEAP32[$1980>>2]|0;
 $1982 = $1981 | $1979;
 $1983 = ($1982|0)==(0);
 $$pre1002 = (($ptree) + 593|0);
 L219: do {
  if (!($1983)) {
   $1984 = (($ptree) + 128|0);
   $1985 = (($ptree) + 132|0);
   $1986 = (($ptree) + 32|0);
   $1987 = (($ptree) + 36|0);
   $1988 = (($ptree) + 40|0);
   $1989 = (($ptree) + 44|0);
   $1990 = (($ptree) + 48|0);
   $1991 = (($ptree) + 52|0);
   $1992 = (($ptree) + 56|0);
   $1993 = (($ptree) + 60|0);
   $1994 = (($ptree) + 64|0);
   $1995 = (($ptree) + 594|0);
   $bb$sroa$0$8478 = $1979;$bb$sroa$1$8479 = $1981;
   L221: while(1) {
    $1996 = (_last_one01($bb$sroa$0$8478,$bb$sroa$1$8479)|0);
    $1997 = (34156304 + (($1996*12)|0)|0);
    $1998 = HEAP32[$1997>>2]|0;
    $1999 = $1998 ^ $bb$sroa$0$8478;
    $2000 = ((34156304 + (($1996*12)|0)|0) + 4|0);
    $2001 = HEAP32[$2000>>2]|0;
    $2002 = $2001 ^ $bb$sroa$1$8479;
    $2003 = ((33572424 + ($1996<<3)|0) + 6|0);
    $2004 = HEAP8[$2003>>0]|0;
    $2005 = $2004&255;
    $2006 = ((($ptree) + ($2005<<2)|0) + 56|0);
    $2007 = HEAP32[$2006>>2]|0;
    $2008 = ((33572424 + ($1996<<3)|0) + 7|0);
    $2009 = HEAP8[$2008>>0]|0;
    $2010 = $2009&255;
    $2011 = $2007 >>> $2010;
    $2012 = $2011 & 127;
    $2013 = ((33704320 + (($1996*1536)|0)|0) + (($2012*12)|0)|0);
    $2014 = HEAP32[$2013>>2]|0;
    $2015 = ((33572424 + ($1996<<3)|0) + 4|0);
    $2016 = HEAP8[$2015>>0]|0;
    $2017 = $2016&255;
    $2018 = ((($ptree) + ($2017<<2)|0) + 44|0);
    $2019 = HEAP32[$2018>>2]|0;
    $2020 = ((33572424 + ($1996<<3)|0) + 5|0);
    $2021 = HEAP8[$2020>>0]|0;
    $2022 = $2021&255;
    $2023 = $2019 >>> $2022;
    $2024 = $2023 & 127;
    $2025 = ((33579904 + (($1996*1536)|0)|0) + (($2024*12)|0)|0);
    $2026 = HEAP32[$2025>>2]|0;
    $2027 = $2026 | $2014;
    $2028 = (((33704320 + (($1996*1536)|0)|0) + (($2012*12)|0)|0) + 4|0);
    $2029 = HEAP32[$2028>>2]|0;
    $2030 = (((33579904 + (($1996*1536)|0)|0) + (($2024*12)|0)|0) + 4|0);
    $2031 = HEAP32[$2030>>2]|0;
    $2032 = $2031 | $2029;
    $2033 = (((33704320 + (($1996*1536)|0)|0) + (($2012*12)|0)|0) + 8|0);
    $2034 = HEAP32[$2033>>2]|0;
    $2035 = (((33579904 + (($1996*1536)|0)|0) + (($2024*12)|0)|0) + 8|0);
    $2036 = HEAP32[$2035>>2]|0;
    $2037 = $2036 | $2034;
    $2038 = $2027 & $362;
    $2039 = $2032 & $364;
    $2040 = $2037 & $366;
    $2041 = HEAP8[$$pre1002>>0]|0;
    $2042 = $2041&255;
    $2043 = (33574048 + (($2042*12)|0)|0);
    $2044 = HEAP32[$2043>>2]|0;
    $2045 = $2038 & $2044;
    $2046 = ((33574048 + (($2042*12)|0)|0) + 4|0);
    $2047 = HEAP32[$2046>>2]|0;
    $2048 = $2039 & $2047;
    $2049 = (33576976 + (($2042*12)|0)|0);
    $2050 = HEAP32[$2049>>2]|0;
    $2051 = $2045 & $2050;
    $2052 = ((33576976 + (($2042*12)|0)|0) + 4|0);
    $2053 = HEAP32[$2052>>2]|0;
    $2054 = $2048 & $2053;
    $2055 = ((33578928 + (($2042*12)|0)|0) + 8|0);
    $2056 = HEAP32[$2055>>2]|0;
    $2057 = $2040 & $2056;
    $2058 = $2054 | $2051;
    $2059 = $2058 | $2057;
    $2060 = ($2059|0)==(0);
    if (!($2060)) {
     $2061 = HEAP32[$1984>>2]|0;
     $2062 = $2061 ^ $1998;
     HEAP32[$1984>>2] = $2062;
     $2063 = HEAP32[$1985>>2]|0;
     $2064 = $2063 ^ $2001;
     HEAP32[$1985>>2] = $2064;
     $2065 = HEAP32[$2>>2]|0;
     $2066 = $2065 ^ $1998;
     HEAP32[$2>>2] = $2066;
     $2067 = HEAP32[$7>>2]|0;
     $2068 = $2067 ^ $2001;
     HEAP32[$7>>2] = $2068;
     $2069 = (34157280 + (($1996*12)|0)|0);
     $2070 = HEAP32[$2069>>2]|0;
     $2071 = HEAP32[$1986>>2]|0;
     $2072 = $2071 ^ $2070;
     HEAP32[$1986>>2] = $2072;
     $2073 = ((34157280 + (($1996*12)|0)|0) + 4|0);
     $2074 = HEAP32[$2073>>2]|0;
     $2075 = HEAP32[$1987>>2]|0;
     $2076 = $2075 ^ $2074;
     HEAP32[$1987>>2] = $2076;
     $2077 = ((34157280 + (($1996*12)|0)|0) + 8|0);
     $2078 = HEAP32[$2077>>2]|0;
     $2079 = HEAP32[$1988>>2]|0;
     $2080 = $2079 ^ $2078;
     HEAP32[$1988>>2] = $2080;
     $2081 = (34158256 + (($1996*12)|0)|0);
     $2082 = HEAP32[$2081>>2]|0;
     $2083 = HEAP32[$1989>>2]|0;
     $2084 = $2083 ^ $2082;
     HEAP32[$1989>>2] = $2084;
     $2085 = ((34158256 + (($1996*12)|0)|0) + 4|0);
     $2086 = HEAP32[$2085>>2]|0;
     $2087 = HEAP32[$1990>>2]|0;
     $2088 = $2087 ^ $2086;
     HEAP32[$1990>>2] = $2088;
     $2089 = ((34158256 + (($1996*12)|0)|0) + 8|0);
     $2090 = HEAP32[$2089>>2]|0;
     $2091 = HEAP32[$1991>>2]|0;
     $2092 = $2091 ^ $2090;
     HEAP32[$1991>>2] = $2092;
     $2093 = (34159232 + (($1996*12)|0)|0);
     $2094 = HEAP32[$2093>>2]|0;
     $2095 = HEAP32[$1992>>2]|0;
     $2096 = $2095 ^ $2094;
     HEAP32[$1992>>2] = $2096;
     $2097 = ((34159232 + (($1996*12)|0)|0) + 4|0);
     $2098 = HEAP32[$2097>>2]|0;
     $2099 = HEAP32[$1993>>2]|0;
     $2100 = $2099 ^ $2098;
     HEAP32[$1993>>2] = $2100;
     $2101 = ((34159232 + (($1996*12)|0)|0) + 8|0);
     $2102 = HEAP32[$2101>>2]|0;
     $2103 = HEAP32[$1994>>2]|0;
     $2104 = $2103 ^ $2102;
     HEAP32[$1994>>2] = $2104;
     $bb_check$sroa$0$5 = $2051;$bb_check$sroa$1$5 = $2054;$bb_check$sroa$2$5 = $2057;
     while(1) {
      $2105 = (_last_one210($bb_check$sroa$2$5,$bb_check$sroa$1$5,$bb_check$sroa$0$5)|0);
      $2106 = (34156304 + (($2105*12)|0)|0);
      $2107 = HEAP32[$2106>>2]|0;
      $2108 = $2107 ^ $bb_check$sroa$0$5;
      $2109 = ((34156304 + (($2105*12)|0)|0) + 4|0);
      $2110 = HEAP32[$2109>>2]|0;
      $2111 = $2110 ^ $bb_check$sroa$1$5;
      $2112 = ((34156304 + (($2105*12)|0)|0) + 8|0);
      $2113 = HEAP32[$2112>>2]|0;
      $2114 = $2113 ^ $bb_check$sroa$2$5;
      $2115 = (_is_black_attacked($ptree,$2105)|0);
      $2116 = ($2115|0)==(0);
      do {
       if (!($2116)) {
        $2117 = (33704320 + (($2105*1536)|0)|0);
        $2118 = HEAP32[$2117>>2]|0;
        $2119 = (33579904 + (($2105*1536)|0)|0);
        $2120 = HEAP32[$2119>>2]|0;
        $2121 = $2120 | $2118;
        $2122 = ((33704320 + (($2105*1536)|0)|0) + 4|0);
        $2123 = HEAP32[$2122>>2]|0;
        $2124 = ((33579904 + (($2105*1536)|0)|0) + 4|0);
        $2125 = HEAP32[$2124>>2]|0;
        $2126 = $2125 | $2123;
        $2127 = ((33704320 + (($2105*1536)|0)|0) + 8|0);
        $2128 = HEAP32[$2127>>2]|0;
        $2129 = ((33579904 + (($2105*1536)|0)|0) + 8|0);
        $2130 = HEAP32[$2129>>2]|0;
        $2131 = $2130 | $2128;
        $2132 = ($2105|0)>(53);
        if ($2132) {
         $2133 = ((33578928 + (($2105*12)|0)|0) + 4|0);
         $2134 = HEAP32[$2133>>2]|0;
         $2135 = $2134 | $2126;
         $2136 = ((33578928 + (($2105*12)|0)|0) + 8|0);
         $2137 = HEAP32[$2136>>2]|0;
         $2138 = $2137 | $2131;
         $2139 = $2135;$2140 = $2138;
        } else {
         $2139 = $2126;$2140 = $2131;
        }
        $2141 = (_can_b_king_escape($ptree,$2105,$2121,$2139,$2140)|0);
        $2142 = ($2141|0)==(0);
        if ($2142) {
         $2143 = HEAP8[$$pre1002>>0]|0;
         $2144 = $2143&255;
         $2145 = ((220518304 + (($2144*81)|0)|0) + ($1996)|0);
         $2146 = HEAP8[$2145>>0]|0;
         $2147 = $2146&255;
         $2148 = ($2146<<24>>24)==(0);
         do {
          if ($2148) {
           label = 160;
          } else {
           $2149 = ((220518304 + (($2144*81)|0)|0) + ($2105)|0);
           $2150 = HEAP8[$2149>>0]|0;
           $2151 = ($2146<<24>>24)==($2150<<24>>24);
           if ($2151) {
            label = 160;
            break;
           }
           $2152 = (_is_pinned_on_black_king($ptree,$1996,$2147)|0);
           $2153 = ($2152|0)==(0);
           if ($2153) {
            label = 160;
           }
          }
         } while(0);
         if ((label|0) == 160) {
          label = 0;
          $2154 = (_can_b_piece_capture($ptree,$2105)|0);
          $2155 = ($2154|0)==(0);
          if (!($2155)) {
           break;
          }
         }
         $2156 = HEAP8[$1995>>0]|0;
         $2157 = $2156&255;
         $2158 = ((220518304 + (($2157*81)|0)|0) + ($1996)|0);
         $2159 = HEAP8[$2158>>0]|0;
         $2160 = $2159&255;
         $2161 = ($2159<<24>>24)==(0);
         if ($2161) {
          break L221;
         }
         $2162 = ((220518304 + (($2157*81)|0)|0) + ($2105)|0);
         $2163 = HEAP8[$2162>>0]|0;
         $2164 = ($2159<<24>>24)==($2163<<24>>24);
         if ($2164) {
          break L221;
         }
         $2165 = (_is_pinned_on_white_king($ptree,$1996,$2160)|0);
         $2166 = ($2165|0)==(0);
         if ($2166) {
          break L221;
         }
        }
       }
      } while(0);
      $2214 = $2111 | $2108;
      $2215 = $2214 | $2114;
      $2216 = ($2215|0)==(0);
      if ($2216) {
       break;
      } else {
       $bb_check$sroa$0$5 = $2108;$bb_check$sroa$1$5 = $2111;$bb_check$sroa$2$5 = $2114;
      }
     }
     $2217 = HEAP32[$2069>>2]|0;
     $2218 = HEAP32[$1986>>2]|0;
     $2219 = $2218 ^ $2217;
     HEAP32[$1986>>2] = $2219;
     $2220 = HEAP32[$2073>>2]|0;
     $2221 = HEAP32[$1987>>2]|0;
     $2222 = $2221 ^ $2220;
     HEAP32[$1987>>2] = $2222;
     $2223 = HEAP32[$2077>>2]|0;
     $2224 = HEAP32[$1988>>2]|0;
     $2225 = $2224 ^ $2223;
     HEAP32[$1988>>2] = $2225;
     $2226 = HEAP32[$2081>>2]|0;
     $2227 = HEAP32[$1989>>2]|0;
     $2228 = $2227 ^ $2226;
     HEAP32[$1989>>2] = $2228;
     $2229 = HEAP32[$2085>>2]|0;
     $2230 = HEAP32[$1990>>2]|0;
     $2231 = $2230 ^ $2229;
     HEAP32[$1990>>2] = $2231;
     $2232 = HEAP32[$2089>>2]|0;
     $2233 = HEAP32[$1991>>2]|0;
     $2234 = $2233 ^ $2232;
     HEAP32[$1991>>2] = $2234;
     $2235 = HEAP32[$2093>>2]|0;
     $2236 = HEAP32[$1992>>2]|0;
     $2237 = $2236 ^ $2235;
     HEAP32[$1992>>2] = $2237;
     $2238 = HEAP32[$2097>>2]|0;
     $2239 = HEAP32[$1993>>2]|0;
     $2240 = $2239 ^ $2238;
     HEAP32[$1993>>2] = $2240;
     $2241 = HEAP32[$2101>>2]|0;
     $2242 = HEAP32[$1994>>2]|0;
     $2243 = $2242 ^ $2241;
     HEAP32[$1994>>2] = $2243;
     $2244 = HEAP32[$1997>>2]|0;
     $2245 = HEAP32[$2>>2]|0;
     $2246 = $2245 ^ $2244;
     HEAP32[$2>>2] = $2246;
     $2247 = HEAP32[$2000>>2]|0;
     $2248 = HEAP32[$7>>2]|0;
     $2249 = $2248 ^ $2247;
     HEAP32[$7>>2] = $2249;
     $2250 = HEAP32[$1984>>2]|0;
     $2251 = $2250 ^ $2244;
     HEAP32[$1984>>2] = $2251;
     $2252 = HEAP32[$1985>>2]|0;
     $2253 = $2252 ^ $2247;
     HEAP32[$1985>>2] = $2253;
    }
    $2254 = $2002 | $1999;
    $2255 = ($2254|0)==(0);
    if ($2255) {
     break L219;
    } else {
     $bb$sroa$0$8478 = $1999;$bb$sroa$1$8479 = $2002;
    }
   }
   $2167 = HEAP32[$2069>>2]|0;
   $2168 = HEAP32[$1986>>2]|0;
   $2169 = $2168 ^ $2167;
   HEAP32[$1986>>2] = $2169;
   $2170 = HEAP32[$2073>>2]|0;
   $2171 = HEAP32[$1987>>2]|0;
   $2172 = $2171 ^ $2170;
   HEAP32[$1987>>2] = $2172;
   $2173 = HEAP32[$2077>>2]|0;
   $2174 = HEAP32[$1988>>2]|0;
   $2175 = $2174 ^ $2173;
   HEAP32[$1988>>2] = $2175;
   $2176 = HEAP32[$2081>>2]|0;
   $2177 = HEAP32[$1989>>2]|0;
   $2178 = $2177 ^ $2176;
   HEAP32[$1989>>2] = $2178;
   $2179 = HEAP32[$2085>>2]|0;
   $2180 = HEAP32[$1990>>2]|0;
   $2181 = $2180 ^ $2179;
   HEAP32[$1990>>2] = $2181;
   $2182 = HEAP32[$2089>>2]|0;
   $2183 = HEAP32[$1991>>2]|0;
   $2184 = $2183 ^ $2182;
   HEAP32[$1991>>2] = $2184;
   $2185 = HEAP32[$2093>>2]|0;
   $2186 = HEAP32[$1992>>2]|0;
   $2187 = $2186 ^ $2185;
   HEAP32[$1992>>2] = $2187;
   $2188 = HEAP32[$2097>>2]|0;
   $2189 = HEAP32[$1993>>2]|0;
   $2190 = $2189 ^ $2188;
   HEAP32[$1993>>2] = $2190;
   $2191 = HEAP32[$2101>>2]|0;
   $2192 = HEAP32[$1994>>2]|0;
   $2193 = $2192 ^ $2191;
   HEAP32[$1994>>2] = $2193;
   $2194 = HEAP32[$1997>>2]|0;
   $2195 = HEAP32[$2>>2]|0;
   $2196 = $2195 ^ $2194;
   HEAP32[$2>>2] = $2196;
   $2197 = HEAP32[$2000>>2]|0;
   $2198 = HEAP32[$7>>2]|0;
   $2199 = $2198 ^ $2197;
   HEAP32[$7>>2] = $2199;
   $2200 = HEAP32[$1984>>2]|0;
   $2201 = $2200 ^ $2194;
   HEAP32[$1984>>2] = $2201;
   $2202 = HEAP32[$1985>>2]|0;
   $2203 = $2202 ^ $2197;
   HEAP32[$1985>>2] = $2203;
   $2204 = $1996 << 7;
   $2205 = $2132 ? 16384 : 0;
   $2206 = ((($ptree) + ($2105)|0) + 512|0);
   $2207 = HEAP8[$2206>>0]|0;
   $2208 = $2207 << 24 >> 24;
   $2209 = $2208 << 19;
   $2210 = $2204 | $2105;
   $2211 = $2210 | $2205;
   $2212 = $2211 | $2209;
   $2213 = $2212 | 196608;
   $$0 = $2213;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $2256 = (($ptree) + 104|0);
 $2257 = HEAP32[$2256>>2]|0;
 $2258 = HEAP8[$$pre1002>>0]|0;
 $2259 = $2258&255;
 $2260 = (221106432 + (($2259*48)|0)|0);
 $2261 = HEAP32[$2260>>2]|0;
 $2262 = $2261 & $2257;
 $2263 = (($ptree) + 108|0);
 $2264 = HEAP32[$2263>>2]|0;
 $2265 = ((221106432 + (($2259*48)|0)|0) + 4|0);
 $2266 = HEAP32[$2265>>2]|0;
 $2267 = $2266 & $2264;
 $2268 = (($ptree) + 112|0);
 $2269 = HEAP32[$2268>>2]|0;
 $2270 = ((221106432 + (($2259*48)|0)|0) + 8|0);
 $2271 = HEAP32[$2270>>2]|0;
 $2272 = $2271 & $2269;
 $2273 = $2267 | $2262;
 $2274 = $2273 | $2272;
 $2275 = ($2274|0)==(0);
 do {
  if ($2275) {
   $2517 = $2258;
  } else {
   $2276 = (($ptree) + 32|0);
   $2277 = (($ptree) + 36|0);
   $2278 = (($ptree) + 40|0);
   $2279 = (($ptree) + 44|0);
   $2280 = (($ptree) + 48|0);
   $2281 = (($ptree) + 52|0);
   $2282 = (($ptree) + 56|0);
   $2283 = (($ptree) + 60|0);
   $2284 = (($ptree) + 64|0);
   $2285 = (($ptree) + 594|0);
   $bb$sroa$0$9445 = $2262;$bb$sroa$1$9446 = $2267;$bb$sroa$2$9447 = $2272;
   L249: while(1) {
    $2286 = (_last_one210($bb$sroa$2$9447,$bb$sroa$1$9446,$bb$sroa$0$9445)|0);
    $2287 = (34156304 + (($2286*12)|0)|0);
    $2288 = HEAP32[$2287>>2]|0;
    $2289 = $2288 ^ $bb$sroa$0$9445;
    $2290 = ((34156304 + (($2286*12)|0)|0) + 4|0);
    $2291 = HEAP32[$2290>>2]|0;
    $2292 = $2291 ^ $bb$sroa$1$9446;
    $2293 = ((34156304 + (($2286*12)|0)|0) + 8|0);
    $2294 = HEAP32[$2293>>2]|0;
    $2295 = $2294 ^ $bb$sroa$2$9447;
    $2296 = (33577952 + (($2286*12)|0)|0);
    $2297 = HEAP32[$2296>>2]|0;
    $2298 = $2297 & $362;
    $2299 = ((33577952 + (($2286*12)|0)|0) + 4|0);
    $2300 = HEAP32[$2299>>2]|0;
    $2301 = $2300 & $364;
    $2302 = ((33577952 + (($2286*12)|0)|0) + 8|0);
    $2303 = HEAP32[$2302>>2]|0;
    $2304 = $2303 & $366;
    $2305 = HEAP8[$$pre1002>>0]|0;
    $2306 = $2305&255;
    $2307 = (33575024 + (($2306*12)|0)|0);
    $2308 = HEAP32[$2307>>2]|0;
    $2309 = $2298 & $2308;
    $2310 = ((33575024 + (($2306*12)|0)|0) + 4|0);
    $2311 = HEAP32[$2310>>2]|0;
    $2312 = $2301 & $2311;
    $2313 = ((33575024 + (($2306*12)|0)|0) + 8|0);
    $2314 = HEAP32[$2313>>2]|0;
    $2315 = $2304 & $2314;
    $2316 = $2312 | $2309;
    $2317 = $2316 | $2315;
    $2318 = ($2317|0)==(0);
    if (!($2318)) {
     $2319 = HEAP32[$2256>>2]|0;
     $2320 = $2319 ^ $2288;
     HEAP32[$2256>>2] = $2320;
     $2321 = HEAP32[$2263>>2]|0;
     $2322 = $2321 ^ $2291;
     HEAP32[$2263>>2] = $2322;
     $2323 = HEAP32[$2268>>2]|0;
     $2324 = $2323 ^ $2294;
     HEAP32[$2268>>2] = $2324;
     $2325 = HEAP32[$2>>2]|0;
     $2326 = $2325 ^ $2288;
     HEAP32[$2>>2] = $2326;
     $2327 = HEAP32[$7>>2]|0;
     $2328 = $2327 ^ $2291;
     HEAP32[$7>>2] = $2328;
     $2329 = HEAP32[$12>>2]|0;
     $2330 = $2329 ^ $2294;
     HEAP32[$12>>2] = $2330;
     $2331 = (34157280 + (($2286*12)|0)|0);
     $2332 = HEAP32[$2331>>2]|0;
     $2333 = HEAP32[$2276>>2]|0;
     $2334 = $2333 ^ $2332;
     HEAP32[$2276>>2] = $2334;
     $2335 = ((34157280 + (($2286*12)|0)|0) + 4|0);
     $2336 = HEAP32[$2335>>2]|0;
     $2337 = HEAP32[$2277>>2]|0;
     $2338 = $2337 ^ $2336;
     HEAP32[$2277>>2] = $2338;
     $2339 = ((34157280 + (($2286*12)|0)|0) + 8|0);
     $2340 = HEAP32[$2339>>2]|0;
     $2341 = HEAP32[$2278>>2]|0;
     $2342 = $2341 ^ $2340;
     HEAP32[$2278>>2] = $2342;
     $2343 = (34158256 + (($2286*12)|0)|0);
     $2344 = HEAP32[$2343>>2]|0;
     $2345 = HEAP32[$2279>>2]|0;
     $2346 = $2345 ^ $2344;
     HEAP32[$2279>>2] = $2346;
     $2347 = ((34158256 + (($2286*12)|0)|0) + 4|0);
     $2348 = HEAP32[$2347>>2]|0;
     $2349 = HEAP32[$2280>>2]|0;
     $2350 = $2349 ^ $2348;
     HEAP32[$2280>>2] = $2350;
     $2351 = ((34158256 + (($2286*12)|0)|0) + 8|0);
     $2352 = HEAP32[$2351>>2]|0;
     $2353 = HEAP32[$2281>>2]|0;
     $2354 = $2353 ^ $2352;
     HEAP32[$2281>>2] = $2354;
     $2355 = (34159232 + (($2286*12)|0)|0);
     $2356 = HEAP32[$2355>>2]|0;
     $2357 = HEAP32[$2282>>2]|0;
     $2358 = $2357 ^ $2356;
     HEAP32[$2282>>2] = $2358;
     $2359 = ((34159232 + (($2286*12)|0)|0) + 4|0);
     $2360 = HEAP32[$2359>>2]|0;
     $2361 = HEAP32[$2283>>2]|0;
     $2362 = $2361 ^ $2360;
     HEAP32[$2283>>2] = $2362;
     $2363 = ((34159232 + (($2286*12)|0)|0) + 8|0);
     $2364 = HEAP32[$2363>>2]|0;
     $2365 = HEAP32[$2284>>2]|0;
     $2366 = $2365 ^ $2364;
     HEAP32[$2284>>2] = $2366;
     $bb_check$sroa$0$6 = $2309;$bb_check$sroa$1$6 = $2312;$bb_check$sroa$2$6 = $2315;
     while(1) {
      $2367 = (_last_one210($bb_check$sroa$2$6,$bb_check$sroa$1$6,$bb_check$sroa$0$6)|0);
      $2368 = (34156304 + (($2367*12)|0)|0);
      $2369 = HEAP32[$2368>>2]|0;
      $2370 = $2369 ^ $bb_check$sroa$0$6;
      $2371 = ((34156304 + (($2367*12)|0)|0) + 4|0);
      $2372 = HEAP32[$2371>>2]|0;
      $2373 = $2372 ^ $bb_check$sroa$1$6;
      $2374 = ((34156304 + (($2367*12)|0)|0) + 8|0);
      $2375 = HEAP32[$2374>>2]|0;
      $2376 = $2375 ^ $bb_check$sroa$2$6;
      $2377 = (_is_black_attacked($ptree,$2367)|0);
      $2378 = ($2377|0)==(0);
      do {
       if (!($2378)) {
        $2379 = (33577952 + (($2367*12)|0)|0);
        $2380 = HEAP32[$2379>>2]|0;
        $2381 = ((33577952 + (($2367*12)|0)|0) + 4|0);
        $2382 = HEAP32[$2381>>2]|0;
        $2383 = ((33577952 + (($2367*12)|0)|0) + 8|0);
        $2384 = HEAP32[$2383>>2]|0;
        $2385 = (_can_b_king_escape($ptree,$2367,$2380,$2382,$2384)|0);
        $2386 = ($2385|0)==(0);
        if ($2386) {
         $2387 = HEAP8[$$pre1002>>0]|0;
         $2388 = $2387&255;
         $2389 = ((220518304 + (($2388*81)|0)|0) + ($2286)|0);
         $2390 = HEAP8[$2389>>0]|0;
         $2391 = $2390&255;
         $2392 = ($2390<<24>>24)==(0);
         do {
          if ($2392) {
           label = 177;
          } else {
           $2393 = ((220518304 + (($2388*81)|0)|0) + ($2367)|0);
           $2394 = HEAP8[$2393>>0]|0;
           $2395 = ($2390<<24>>24)==($2394<<24>>24);
           if ($2395) {
            label = 177;
            break;
           }
           $2396 = (_is_pinned_on_black_king($ptree,$2286,$2391)|0);
           $2397 = ($2396|0)==(0);
           if ($2397) {
            label = 177;
           }
          }
         } while(0);
         if ((label|0) == 177) {
          label = 0;
          $2398 = (_can_b_piece_capture($ptree,$2367)|0);
          $2399 = ($2398|0)==(0);
          if (!($2399)) {
           break;
          }
         }
         $2400 = HEAP8[$2285>>0]|0;
         $2401 = $2400&255;
         $2402 = ((220518304 + (($2401*81)|0)|0) + ($2286)|0);
         $2403 = HEAP8[$2402>>0]|0;
         $2404 = $2403&255;
         $2405 = ($2403<<24>>24)==(0);
         if ($2405) {
          break L249;
         }
         $2406 = ((220518304 + (($2401*81)|0)|0) + ($2367)|0);
         $2407 = HEAP8[$2406>>0]|0;
         $2408 = ($2403<<24>>24)==($2407<<24>>24);
         if ($2408) {
          break L249;
         }
         $2409 = (_is_pinned_on_white_king($ptree,$2286,$2404)|0);
         $2410 = ($2409|0)==(0);
         if ($2410) {
          break L249;
         }
        }
       }
      } while(0);
      $2466 = $2373 | $2370;
      $2467 = $2466 | $2376;
      $2468 = ($2467|0)==(0);
      if ($2468) {
       break;
      } else {
       $bb_check$sroa$0$6 = $2370;$bb_check$sroa$1$6 = $2373;$bb_check$sroa$2$6 = $2376;
      }
     }
     $2469 = HEAP32[$2331>>2]|0;
     $2470 = HEAP32[$2276>>2]|0;
     $2471 = $2470 ^ $2469;
     HEAP32[$2276>>2] = $2471;
     $2472 = HEAP32[$2335>>2]|0;
     $2473 = HEAP32[$2277>>2]|0;
     $2474 = $2473 ^ $2472;
     HEAP32[$2277>>2] = $2474;
     $2475 = HEAP32[$2339>>2]|0;
     $2476 = HEAP32[$2278>>2]|0;
     $2477 = $2476 ^ $2475;
     HEAP32[$2278>>2] = $2477;
     $2478 = HEAP32[$2343>>2]|0;
     $2479 = HEAP32[$2279>>2]|0;
     $2480 = $2479 ^ $2478;
     HEAP32[$2279>>2] = $2480;
     $2481 = HEAP32[$2347>>2]|0;
     $2482 = HEAP32[$2280>>2]|0;
     $2483 = $2482 ^ $2481;
     HEAP32[$2280>>2] = $2483;
     $2484 = HEAP32[$2351>>2]|0;
     $2485 = HEAP32[$2281>>2]|0;
     $2486 = $2485 ^ $2484;
     HEAP32[$2281>>2] = $2486;
     $2487 = HEAP32[$2355>>2]|0;
     $2488 = HEAP32[$2282>>2]|0;
     $2489 = $2488 ^ $2487;
     HEAP32[$2282>>2] = $2489;
     $2490 = HEAP32[$2359>>2]|0;
     $2491 = HEAP32[$2283>>2]|0;
     $2492 = $2491 ^ $2490;
     HEAP32[$2283>>2] = $2492;
     $2493 = HEAP32[$2363>>2]|0;
     $2494 = HEAP32[$2284>>2]|0;
     $2495 = $2494 ^ $2493;
     HEAP32[$2284>>2] = $2495;
     $2496 = HEAP32[$2287>>2]|0;
     $2497 = HEAP32[$2>>2]|0;
     $2498 = $2497 ^ $2496;
     HEAP32[$2>>2] = $2498;
     $2499 = HEAP32[$2290>>2]|0;
     $2500 = HEAP32[$7>>2]|0;
     $2501 = $2500 ^ $2499;
     HEAP32[$7>>2] = $2501;
     $2502 = HEAP32[$2293>>2]|0;
     $2503 = HEAP32[$12>>2]|0;
     $2504 = $2503 ^ $2502;
     HEAP32[$12>>2] = $2504;
     $2505 = HEAP32[$2256>>2]|0;
     $2506 = $2505 ^ $2496;
     HEAP32[$2256>>2] = $2506;
     $2507 = HEAP32[$2263>>2]|0;
     $2508 = $2507 ^ $2499;
     HEAP32[$2263>>2] = $2508;
     $2509 = HEAP32[$2268>>2]|0;
     $2510 = $2509 ^ $2502;
     HEAP32[$2268>>2] = $2510;
    }
    $2511 = $2292 | $2289;
    $2512 = $2511 | $2295;
    $2513 = ($2512|0)==(0);
    if ($2513) {
     label = 185;
     break;
    } else {
     $bb$sroa$0$9445 = $2289;$bb$sroa$1$9446 = $2292;$bb$sroa$2$9447 = $2295;
    }
   }
   if ((label|0) == 185) {
    $$pre989 = HEAP8[$$pre1002>>0]|0;
    $2517 = $$pre989;
    break;
   }
   $2411 = HEAP32[$2331>>2]|0;
   $2412 = HEAP32[$2276>>2]|0;
   $2413 = $2412 ^ $2411;
   HEAP32[$2276>>2] = $2413;
   $2414 = HEAP32[$2335>>2]|0;
   $2415 = HEAP32[$2277>>2]|0;
   $2416 = $2415 ^ $2414;
   HEAP32[$2277>>2] = $2416;
   $2417 = HEAP32[$2339>>2]|0;
   $2418 = HEAP32[$2278>>2]|0;
   $2419 = $2418 ^ $2417;
   HEAP32[$2278>>2] = $2419;
   $2420 = HEAP32[$2343>>2]|0;
   $2421 = HEAP32[$2279>>2]|0;
   $2422 = $2421 ^ $2420;
   HEAP32[$2279>>2] = $2422;
   $2423 = HEAP32[$2347>>2]|0;
   $2424 = HEAP32[$2280>>2]|0;
   $2425 = $2424 ^ $2423;
   HEAP32[$2280>>2] = $2425;
   $2426 = HEAP32[$2351>>2]|0;
   $2427 = HEAP32[$2281>>2]|0;
   $2428 = $2427 ^ $2426;
   HEAP32[$2281>>2] = $2428;
   $2429 = HEAP32[$2355>>2]|0;
   $2430 = HEAP32[$2282>>2]|0;
   $2431 = $2430 ^ $2429;
   HEAP32[$2282>>2] = $2431;
   $2432 = HEAP32[$2359>>2]|0;
   $2433 = HEAP32[$2283>>2]|0;
   $2434 = $2433 ^ $2432;
   HEAP32[$2283>>2] = $2434;
   $2435 = HEAP32[$2363>>2]|0;
   $2436 = HEAP32[$2284>>2]|0;
   $2437 = $2436 ^ $2435;
   HEAP32[$2284>>2] = $2437;
   $2438 = HEAP32[$2287>>2]|0;
   $2439 = HEAP32[$2>>2]|0;
   $2440 = $2439 ^ $2438;
   HEAP32[$2>>2] = $2440;
   $2441 = HEAP32[$2290>>2]|0;
   $2442 = HEAP32[$7>>2]|0;
   $2443 = $2442 ^ $2441;
   HEAP32[$7>>2] = $2443;
   $2444 = HEAP32[$2293>>2]|0;
   $2445 = HEAP32[$12>>2]|0;
   $2446 = $2445 ^ $2444;
   HEAP32[$12>>2] = $2446;
   $2447 = HEAP32[$2256>>2]|0;
   $2448 = $2447 ^ $2438;
   HEAP32[$2256>>2] = $2448;
   $2449 = HEAP32[$2263>>2]|0;
   $2450 = $2449 ^ $2441;
   HEAP32[$2263>>2] = $2450;
   $2451 = HEAP32[$2268>>2]|0;
   $2452 = $2451 ^ $2444;
   HEAP32[$2268>>2] = $2452;
   $2453 = $2286 << 7;
   $2454 = $2367 | $2453;
   $2455 = ((($ptree) + ($2367)|0) + 512|0);
   $2456 = HEAP8[$2455>>0]|0;
   $2457 = $2456 << 24 >> 24;
   $2458 = $2457 << 19;
   $2459 = $2454 | $2458;
   $2460 = ((($ptree) + ($2286)|0) + 512|0);
   $2461 = HEAP8[$2460>>0]|0;
   $2462 = $2461 << 24 >> 24;
   $2463 = (0 - ($2462))|0;
   $2464 = $2463 << 15;
   $2465 = $2459 | $2464;
   $$0 = $2465;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $2514 = (($ptree) + 248|0);
 $2515 = HEAP32[$2514>>2]|0;
 $2516 = $2517&255;
 $2518 = ((221106432 + (($2516*48)|0)|0) + 12|0);
 $2519 = HEAP32[$2518>>2]|0;
 $2520 = $2519 & $2515;
 $2521 = (($ptree) + 252|0);
 $2522 = HEAP32[$2521>>2]|0;
 $2523 = ((221106432 + (($2516*48)|0)|0) + 16|0);
 $2524 = HEAP32[$2523>>2]|0;
 $2525 = $2524 & $2522;
 $2526 = (($ptree) + 256|0);
 $2527 = HEAP32[$2526>>2]|0;
 $2528 = ((221106432 + (($2516*48)|0)|0) + 20|0);
 $2529 = HEAP32[$2528>>2]|0;
 $2530 = $2529 & $2527;
 $2531 = ($2530|0)==(0);
 L274: do {
  if (!($2531)) {
   $2532 = (($ptree) + 32|0);
   $2533 = (($ptree) + 36|0);
   $2534 = (($ptree) + 40|0);
   $2535 = (($ptree) + 44|0);
   $2536 = (($ptree) + 48|0);
   $2537 = (($ptree) + 52|0);
   $2538 = (($ptree) + 56|0);
   $2539 = (($ptree) + 60|0);
   $2540 = (($ptree) + 64|0);
   $2541 = (($ptree) + 594|0);
   $bb$sroa$2$10416 = $2530;
   L276: while(1) {
    $2542 = (_first_one2($bb$sroa$2$10416)|0);
    $2543 = ((34156304 + (($2542*12)|0)|0) + 8|0);
    $2544 = HEAP32[$2543>>2]|0;
    $2545 = $2544 ^ $bb$sroa$2$10416;
    $2546 = ((33576976 + (($2542*12)|0)|0) + 4|0);
    $2547 = HEAP32[$2546>>2]|0;
    $2548 = $2547 & $364;
    $2549 = HEAP8[$$pre1002>>0]|0;
    $2550 = $2549&255;
    $2551 = ((33575024 + (($2550*12)|0)|0) + 4|0);
    $2552 = HEAP32[$2551>>2]|0;
    $2553 = $2552 & $2548;
    $2554 = ((33576976 + (($2542*12)|0)|0) + 8|0);
    $2555 = HEAP32[$2554>>2]|0;
    $2556 = $2555 & $366;
    $2557 = ((33575024 + (($2550*12)|0)|0) + 8|0);
    $2558 = HEAP32[$2557>>2]|0;
    $2559 = $2556 & $2558;
    $2560 = ((33574048 + (($2550*12)|0)|0) + 4|0);
    $2561 = HEAP32[$2560>>2]|0;
    $2562 = $2552 ^ -1;
    $2563 = $2548 & $2562;
    $2564 = $2563 & $2561;
    $2565 = ((33574048 + (($2550*12)|0)|0) + 8|0);
    $2566 = HEAP32[$2565>>2]|0;
    $2567 = $2558 ^ -1;
    $2568 = $2556 & $2567;
    $2569 = $2568 & $2566;
    $2570 = $2559 | $2553;
    $2571 = $2570 | $2564;
    $2572 = $2571 | $2569;
    $2573 = ($2572|0)==(0);
    if (!($2573)) {
     $2574 = HEAP32[$2526>>2]|0;
     $2575 = $2574 ^ $2544;
     HEAP32[$2526>>2] = $2575;
     $2576 = HEAP32[$12>>2]|0;
     $2577 = $2576 ^ $2544;
     HEAP32[$12>>2] = $2577;
     $2578 = (34157280 + (($2542*12)|0)|0);
     $2579 = HEAP32[$2578>>2]|0;
     $2580 = HEAP32[$2532>>2]|0;
     $2581 = $2580 ^ $2579;
     HEAP32[$2532>>2] = $2581;
     $2582 = ((34157280 + (($2542*12)|0)|0) + 4|0);
     $2583 = HEAP32[$2582>>2]|0;
     $2584 = HEAP32[$2533>>2]|0;
     $2585 = $2584 ^ $2583;
     HEAP32[$2533>>2] = $2585;
     $2586 = ((34157280 + (($2542*12)|0)|0) + 8|0);
     $2587 = HEAP32[$2586>>2]|0;
     $2588 = HEAP32[$2534>>2]|0;
     $2589 = $2588 ^ $2587;
     HEAP32[$2534>>2] = $2589;
     $2590 = (34158256 + (($2542*12)|0)|0);
     $2591 = HEAP32[$2590>>2]|0;
     $2592 = HEAP32[$2535>>2]|0;
     $2593 = $2592 ^ $2591;
     HEAP32[$2535>>2] = $2593;
     $2594 = ((34158256 + (($2542*12)|0)|0) + 4|0);
     $2595 = HEAP32[$2594>>2]|0;
     $2596 = HEAP32[$2536>>2]|0;
     $2597 = $2596 ^ $2595;
     HEAP32[$2536>>2] = $2597;
     $2598 = ((34158256 + (($2542*12)|0)|0) + 8|0);
     $2599 = HEAP32[$2598>>2]|0;
     $2600 = HEAP32[$2537>>2]|0;
     $2601 = $2600 ^ $2599;
     HEAP32[$2537>>2] = $2601;
     $2602 = (34159232 + (($2542*12)|0)|0);
     $2603 = HEAP32[$2602>>2]|0;
     $2604 = HEAP32[$2538>>2]|0;
     $2605 = $2604 ^ $2603;
     HEAP32[$2538>>2] = $2605;
     $2606 = ((34159232 + (($2542*12)|0)|0) + 4|0);
     $2607 = HEAP32[$2606>>2]|0;
     $2608 = HEAP32[$2539>>2]|0;
     $2609 = $2608 ^ $2607;
     HEAP32[$2539>>2] = $2609;
     $2610 = ((34159232 + (($2542*12)|0)|0) + 8|0);
     $2611 = HEAP32[$2610>>2]|0;
     $2612 = HEAP32[$2540>>2]|0;
     $2613 = $2612 ^ $2611;
     HEAP32[$2540>>2] = $2613;
     $2614 = ($2570|0)==(0);
     if (!($2614)) {
      $bb_check_pro$sroa$0$0366 = $2553;$bb_check_pro$sroa$1$0365 = $2559;
      while(1) {
       $2615 = (_last_one12($bb_check_pro$sroa$0$0366,$bb_check_pro$sroa$1$0365)|0);
       $2616 = ((34156304 + (($2615*12)|0)|0) + 4|0);
       $2617 = HEAP32[$2616>>2]|0;
       $2618 = $2617 ^ $bb_check_pro$sroa$0$0366;
       $2619 = ((34156304 + (($2615*12)|0)|0) + 8|0);
       $2620 = HEAP32[$2619>>2]|0;
       $2621 = $2620 ^ $bb_check_pro$sroa$1$0365;
       $2622 = (_is_black_attacked($ptree,$2615)|0);
       $2623 = ($2622|0)==(0);
       do {
        if (!($2623)) {
         $2626 = (33577952 + (($2615*12)|0)|0);
         $2627 = HEAP32[$2626>>2]|0;
         $2628 = ((33577952 + (($2615*12)|0)|0) + 4|0);
         $2629 = HEAP32[$2628>>2]|0;
         $2630 = ((33577952 + (($2615*12)|0)|0) + 8|0);
         $2631 = HEAP32[$2630>>2]|0;
         $2632 = (_can_b_king_escape($ptree,$2615,$2627,$2629,$2631)|0);
         $2633 = ($2632|0)==(0);
         if (!($2633)) {
          break;
         }
         $2634 = HEAP8[$$pre1002>>0]|0;
         $2635 = $2634&255;
         $2636 = ((220518304 + (($2635*81)|0)|0) + ($2542)|0);
         $2637 = HEAP8[$2636>>0]|0;
         $2638 = $2637&255;
         $2639 = ($2637<<24>>24)==(0);
         do {
          if ($2639) {
           label = 196;
          } else {
           $2640 = ((220518304 + (($2635*81)|0)|0) + ($2615)|0);
           $2641 = HEAP8[$2640>>0]|0;
           $2642 = ($2637<<24>>24)==($2641<<24>>24);
           if ($2642) {
            label = 196;
            break;
           }
           $2643 = (_is_pinned_on_black_king($ptree,$2542,$2638)|0);
           $2644 = ($2643|0)==(0);
           if ($2644) {
            label = 196;
           }
          }
         } while(0);
         if ((label|0) == 196) {
          label = 0;
          $2645 = (_can_b_piece_capture($ptree,$2615)|0);
          $2646 = ($2645|0)==(0);
          if (!($2646)) {
           break;
          }
         }
         $2647 = HEAP8[$2541>>0]|0;
         $2648 = $2647&255;
         $2649 = ((220518304 + (($2648*81)|0)|0) + ($2542)|0);
         $2650 = HEAP8[$2649>>0]|0;
         $2651 = $2650&255;
         $2652 = ($2650<<24>>24)==(0);
         if ($2652) {
          label = 200;
          break L276;
         }
         $2653 = ((220518304 + (($2648*81)|0)|0) + ($2615)|0);
         $2654 = HEAP8[$2653>>0]|0;
         $2655 = ($2650<<24>>24)==($2654<<24>>24);
         if ($2655) {
          label = 200;
          break L276;
         }
         $2656 = (_is_pinned_on_white_king($ptree,$2542,$2651)|0);
         $2657 = ($2656|0)==(0);
         if ($2657) {
          label = 200;
          break L276;
         }
        }
       } while(0);
       $2624 = $2618 | $2621;
       $2625 = ($2624|0)==(0);
       if ($2625) {
        break;
       } else {
        $bb_check_pro$sroa$0$0366 = $2618;$bb_check_pro$sroa$1$0365 = $2621;
       }
      }
     }
     $2698 = $2564 | $2569;
     $2699 = ($2698|0)==(0);
     if (!($2699)) {
      $bb_check$sroa$1$7372 = $2564;$bb_check$sroa$2$7371 = $2569;
      while(1) {
       $2700 = (_last_one12($bb_check$sroa$1$7372,$bb_check$sroa$2$7371)|0);
       $2701 = ((34156304 + (($2700*12)|0)|0) + 4|0);
       $2702 = HEAP32[$2701>>2]|0;
       $2703 = $2702 ^ $bb_check$sroa$1$7372;
       $2704 = ((34156304 + (($2700*12)|0)|0) + 8|0);
       $2705 = HEAP32[$2704>>2]|0;
       $2706 = $2705 ^ $bb_check$sroa$2$7371;
       $2707 = (_is_black_attacked($ptree,$2700)|0);
       $2708 = ($2707|0)==(0);
       do {
        if (!($2708)) {
         $2711 = (33576976 + (($2700*12)|0)|0);
         $2712 = HEAP32[$2711>>2]|0;
         $2713 = ((33576976 + (($2700*12)|0)|0) + 4|0);
         $2714 = HEAP32[$2713>>2]|0;
         $2715 = ((33576976 + (($2700*12)|0)|0) + 8|0);
         $2716 = HEAP32[$2715>>2]|0;
         $2717 = (_can_b_king_escape($ptree,$2700,$2712,$2714,$2716)|0);
         $2718 = ($2717|0)==(0);
         if (!($2718)) {
          break;
         }
         $2719 = HEAP8[$$pre1002>>0]|0;
         $2720 = $2719&255;
         $2721 = ((220518304 + (($2720*81)|0)|0) + ($2542)|0);
         $2722 = HEAP8[$2721>>0]|0;
         $2723 = $2722&255;
         $2724 = ($2722<<24>>24)==(0);
         do {
          if ($2724) {
           label = 208;
          } else {
           $2725 = ((220518304 + (($2720*81)|0)|0) + ($2700)|0);
           $2726 = HEAP8[$2725>>0]|0;
           $2727 = ($2722<<24>>24)==($2726<<24>>24);
           if ($2727) {
            label = 208;
            break;
           }
           $2728 = (_is_pinned_on_black_king($ptree,$2542,$2723)|0);
           $2729 = ($2728|0)==(0);
           if ($2729) {
            label = 208;
           }
          }
         } while(0);
         if ((label|0) == 208) {
          label = 0;
          $2730 = (_can_b_piece_capture($ptree,$2700)|0);
          $2731 = ($2730|0)==(0);
          if (!($2731)) {
           break;
          }
         }
         $2732 = HEAP8[$2541>>0]|0;
         $2733 = $2732&255;
         $2734 = ((220518304 + (($2733*81)|0)|0) + ($2542)|0);
         $2735 = HEAP8[$2734>>0]|0;
         $2736 = $2735&255;
         $2737 = ($2735<<24>>24)==(0);
         if ($2737) {
          label = 212;
          break L276;
         }
         $2738 = ((220518304 + (($2733*81)|0)|0) + ($2700)|0);
         $2739 = HEAP8[$2738>>0]|0;
         $2740 = ($2735<<24>>24)==($2739<<24>>24);
         if ($2740) {
          label = 212;
          break L276;
         }
         $2741 = (_is_pinned_on_white_king($ptree,$2542,$2736)|0);
         $2742 = ($2741|0)==(0);
         if ($2742) {
          label = 212;
          break L276;
         }
        }
       } while(0);
       $2709 = $2703 | $2706;
       $2710 = ($2709|0)==(0);
       if ($2710) {
        break;
       } else {
        $bb_check$sroa$1$7372 = $2703;$bb_check$sroa$2$7371 = $2706;
       }
      }
     }
     $2783 = HEAP32[$2578>>2]|0;
     $2784 = HEAP32[$2532>>2]|0;
     $2785 = $2784 ^ $2783;
     HEAP32[$2532>>2] = $2785;
     $2786 = HEAP32[$2582>>2]|0;
     $2787 = HEAP32[$2533>>2]|0;
     $2788 = $2787 ^ $2786;
     HEAP32[$2533>>2] = $2788;
     $2789 = HEAP32[$2586>>2]|0;
     $2790 = HEAP32[$2534>>2]|0;
     $2791 = $2790 ^ $2789;
     HEAP32[$2534>>2] = $2791;
     $2792 = HEAP32[$2590>>2]|0;
     $2793 = HEAP32[$2535>>2]|0;
     $2794 = $2793 ^ $2792;
     HEAP32[$2535>>2] = $2794;
     $2795 = HEAP32[$2594>>2]|0;
     $2796 = HEAP32[$2536>>2]|0;
     $2797 = $2796 ^ $2795;
     HEAP32[$2536>>2] = $2797;
     $2798 = HEAP32[$2598>>2]|0;
     $2799 = HEAP32[$2537>>2]|0;
     $2800 = $2799 ^ $2798;
     HEAP32[$2537>>2] = $2800;
     $2801 = HEAP32[$2602>>2]|0;
     $2802 = HEAP32[$2538>>2]|0;
     $2803 = $2802 ^ $2801;
     HEAP32[$2538>>2] = $2803;
     $2804 = HEAP32[$2606>>2]|0;
     $2805 = HEAP32[$2539>>2]|0;
     $2806 = $2805 ^ $2804;
     HEAP32[$2539>>2] = $2806;
     $2807 = HEAP32[$2610>>2]|0;
     $2808 = HEAP32[$2540>>2]|0;
     $2809 = $2808 ^ $2807;
     HEAP32[$2540>>2] = $2809;
     $2810 = HEAP32[$2543>>2]|0;
     $2811 = HEAP32[$12>>2]|0;
     $2812 = $2811 ^ $2810;
     HEAP32[$12>>2] = $2812;
     $2813 = HEAP32[$2526>>2]|0;
     $2814 = $2813 ^ $2810;
     HEAP32[$2526>>2] = $2814;
    }
    $2815 = ($2544|0)==($bb$sroa$2$10416|0);
    if ($2815) {
     break L274;
    } else {
     $bb$sroa$2$10416 = $2545;
    }
   }
   if ((label|0) == 200) {
    $2658 = HEAP32[$2578>>2]|0;
    $2659 = HEAP32[$2532>>2]|0;
    $2660 = $2659 ^ $2658;
    HEAP32[$2532>>2] = $2660;
    $2661 = HEAP32[$2582>>2]|0;
    $2662 = HEAP32[$2533>>2]|0;
    $2663 = $2662 ^ $2661;
    HEAP32[$2533>>2] = $2663;
    $2664 = HEAP32[$2586>>2]|0;
    $2665 = HEAP32[$2534>>2]|0;
    $2666 = $2665 ^ $2664;
    HEAP32[$2534>>2] = $2666;
    $2667 = HEAP32[$2590>>2]|0;
    $2668 = HEAP32[$2535>>2]|0;
    $2669 = $2668 ^ $2667;
    HEAP32[$2535>>2] = $2669;
    $2670 = HEAP32[$2594>>2]|0;
    $2671 = HEAP32[$2536>>2]|0;
    $2672 = $2671 ^ $2670;
    HEAP32[$2536>>2] = $2672;
    $2673 = HEAP32[$2598>>2]|0;
    $2674 = HEAP32[$2537>>2]|0;
    $2675 = $2674 ^ $2673;
    HEAP32[$2537>>2] = $2675;
    $2676 = HEAP32[$2602>>2]|0;
    $2677 = HEAP32[$2538>>2]|0;
    $2678 = $2677 ^ $2676;
    HEAP32[$2538>>2] = $2678;
    $2679 = HEAP32[$2606>>2]|0;
    $2680 = HEAP32[$2539>>2]|0;
    $2681 = $2680 ^ $2679;
    HEAP32[$2539>>2] = $2681;
    $2682 = HEAP32[$2610>>2]|0;
    $2683 = HEAP32[$2540>>2]|0;
    $2684 = $2683 ^ $2682;
    HEAP32[$2540>>2] = $2684;
    $2685 = HEAP32[$2543>>2]|0;
    $2686 = HEAP32[$12>>2]|0;
    $2687 = $2686 ^ $2685;
    HEAP32[$12>>2] = $2687;
    $2688 = HEAP32[$2526>>2]|0;
    $2689 = $2688 ^ $2685;
    HEAP32[$2526>>2] = $2689;
    $2690 = $2542 << 7;
    $2691 = ((($ptree) + ($2615)|0) + 512|0);
    $2692 = HEAP8[$2691>>0]|0;
    $2693 = $2692 << 24 >> 24;
    $2694 = $2693 << 19;
    $2695 = $2690 | $2615;
    $2696 = $2695 | $2694;
    $2697 = $2696 | 147456;
    $$0 = $2697;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 212) {
    $2743 = HEAP32[$2578>>2]|0;
    $2744 = HEAP32[$2532>>2]|0;
    $2745 = $2744 ^ $2743;
    HEAP32[$2532>>2] = $2745;
    $2746 = HEAP32[$2582>>2]|0;
    $2747 = HEAP32[$2533>>2]|0;
    $2748 = $2747 ^ $2746;
    HEAP32[$2533>>2] = $2748;
    $2749 = HEAP32[$2586>>2]|0;
    $2750 = HEAP32[$2534>>2]|0;
    $2751 = $2750 ^ $2749;
    HEAP32[$2534>>2] = $2751;
    $2752 = HEAP32[$2590>>2]|0;
    $2753 = HEAP32[$2535>>2]|0;
    $2754 = $2753 ^ $2752;
    HEAP32[$2535>>2] = $2754;
    $2755 = HEAP32[$2594>>2]|0;
    $2756 = HEAP32[$2536>>2]|0;
    $2757 = $2756 ^ $2755;
    HEAP32[$2536>>2] = $2757;
    $2758 = HEAP32[$2598>>2]|0;
    $2759 = HEAP32[$2537>>2]|0;
    $2760 = $2759 ^ $2758;
    HEAP32[$2537>>2] = $2760;
    $2761 = HEAP32[$2602>>2]|0;
    $2762 = HEAP32[$2538>>2]|0;
    $2763 = $2762 ^ $2761;
    HEAP32[$2538>>2] = $2763;
    $2764 = HEAP32[$2606>>2]|0;
    $2765 = HEAP32[$2539>>2]|0;
    $2766 = $2765 ^ $2764;
    HEAP32[$2539>>2] = $2766;
    $2767 = HEAP32[$2610>>2]|0;
    $2768 = HEAP32[$2540>>2]|0;
    $2769 = $2768 ^ $2767;
    HEAP32[$2540>>2] = $2769;
    $2770 = HEAP32[$2543>>2]|0;
    $2771 = HEAP32[$12>>2]|0;
    $2772 = $2771 ^ $2770;
    HEAP32[$12>>2] = $2772;
    $2773 = HEAP32[$2526>>2]|0;
    $2774 = $2773 ^ $2770;
    HEAP32[$2526>>2] = $2774;
    $2775 = $2542 << 7;
    $2776 = ((($ptree) + ($2700)|0) + 512|0);
    $2777 = HEAP8[$2776>>0]|0;
    $2778 = $2777 << 24 >> 24;
    $2779 = $2778 << 19;
    $2780 = $2775 | $2700;
    $2781 = $2780 | $2779;
    $2782 = $2781 | 131072;
    $$0 = $2782;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $2816 = $2525 & 511;
 $2817 = ($2816|0)==(0);
 L319: do {
  if (!($2817)) {
   $2818 = (($ptree) + 32|0);
   $2819 = (($ptree) + 36|0);
   $2820 = (($ptree) + 40|0);
   $2821 = (($ptree) + 44|0);
   $2822 = (($ptree) + 48|0);
   $2823 = (($ptree) + 52|0);
   $2824 = (($ptree) + 56|0);
   $2825 = (($ptree) + 60|0);
   $2826 = (($ptree) + 64|0);
   $2827 = (($ptree) + 594|0);
   $ubb$0358 = $2816;
   L321: while(1) {
    $2828 = (_first_one1($ubb$0358)|0);
    $2829 = ((34156304 + (($2828*12)|0)|0) + 4|0);
    $2830 = HEAP32[$2829>>2]|0;
    $2831 = $2830 ^ $ubb$0358;
    $2832 = ((33576976 + (($2828*12)|0)|0) + 8|0);
    $2833 = HEAP32[$2832>>2]|0;
    $2834 = $2833 & $366;
    $2835 = HEAP8[$$pre1002>>0]|0;
    $2836 = $2835&255;
    $2837 = ((33575024 + (($2836*12)|0)|0) + 8|0);
    $2838 = HEAP32[$2837>>2]|0;
    $2839 = $2838 & $2834;
    $2840 = ((33574048 + (($2836*12)|0)|0) + 8|0);
    $2841 = HEAP32[$2840>>2]|0;
    $2842 = $2838 ^ -1;
    $2843 = $2834 & $2842;
    $2844 = $2843 & $2841;
    $2845 = ((33576976 + (($2828*12)|0)|0) + 4|0);
    $2846 = HEAP32[$2845>>2]|0;
    $2847 = $2846 & $364;
    $2848 = ((33574048 + (($2836*12)|0)|0) + 4|0);
    $2849 = HEAP32[$2848>>2]|0;
    $2850 = $2847 & $2849;
    $2851 = $2844 | $2839;
    $2852 = $2851 | $2850;
    $2853 = ($2852|0)==(0);
    if (!($2853)) {
     $2854 = HEAP32[$2521>>2]|0;
     $2855 = $2854 ^ $2830;
     HEAP32[$2521>>2] = $2855;
     $2856 = HEAP32[$7>>2]|0;
     $2857 = $2856 ^ $2830;
     HEAP32[$7>>2] = $2857;
     $2858 = (34157280 + (($2828*12)|0)|0);
     $2859 = HEAP32[$2858>>2]|0;
     $2860 = HEAP32[$2818>>2]|0;
     $2861 = $2860 ^ $2859;
     HEAP32[$2818>>2] = $2861;
     $2862 = ((34157280 + (($2828*12)|0)|0) + 4|0);
     $2863 = HEAP32[$2862>>2]|0;
     $2864 = HEAP32[$2819>>2]|0;
     $2865 = $2864 ^ $2863;
     HEAP32[$2819>>2] = $2865;
     $2866 = ((34157280 + (($2828*12)|0)|0) + 8|0);
     $2867 = HEAP32[$2866>>2]|0;
     $2868 = HEAP32[$2820>>2]|0;
     $2869 = $2868 ^ $2867;
     HEAP32[$2820>>2] = $2869;
     $2870 = (34158256 + (($2828*12)|0)|0);
     $2871 = HEAP32[$2870>>2]|0;
     $2872 = HEAP32[$2821>>2]|0;
     $2873 = $2872 ^ $2871;
     HEAP32[$2821>>2] = $2873;
     $2874 = ((34158256 + (($2828*12)|0)|0) + 4|0);
     $2875 = HEAP32[$2874>>2]|0;
     $2876 = HEAP32[$2822>>2]|0;
     $2877 = $2876 ^ $2875;
     HEAP32[$2822>>2] = $2877;
     $2878 = ((34158256 + (($2828*12)|0)|0) + 8|0);
     $2879 = HEAP32[$2878>>2]|0;
     $2880 = HEAP32[$2823>>2]|0;
     $2881 = $2880 ^ $2879;
     HEAP32[$2823>>2] = $2881;
     $2882 = (34159232 + (($2828*12)|0)|0);
     $2883 = HEAP32[$2882>>2]|0;
     $2884 = HEAP32[$2824>>2]|0;
     $2885 = $2884 ^ $2883;
     HEAP32[$2824>>2] = $2885;
     $2886 = ((34159232 + (($2828*12)|0)|0) + 4|0);
     $2887 = HEAP32[$2886>>2]|0;
     $2888 = HEAP32[$2825>>2]|0;
     $2889 = $2888 ^ $2887;
     HEAP32[$2825>>2] = $2889;
     $2890 = ((34159232 + (($2828*12)|0)|0) + 8|0);
     $2891 = HEAP32[$2890>>2]|0;
     $2892 = HEAP32[$2826>>2]|0;
     $2893 = $2892 ^ $2891;
     HEAP32[$2826>>2] = $2893;
     $2894 = ($2839|0)==(0);
     if (!($2894)) {
      $bb_check_pro$sroa$1$1308 = $2839;
      while(1) {
       $2895 = (_first_one2($bb_check_pro$sroa$1$1308)|0);
       $2896 = ((34156304 + (($2895*12)|0)|0) + 8|0);
       $2897 = HEAP32[$2896>>2]|0;
       $2898 = $2897 ^ $bb_check_pro$sroa$1$1308;
       $2899 = (_is_black_attacked($ptree,$2895)|0);
       $2900 = ($2899|0)==(0);
       do {
        if (!($2900)) {
         $2902 = (33577952 + (($2895*12)|0)|0);
         $2903 = HEAP32[$2902>>2]|0;
         $2904 = ((33577952 + (($2895*12)|0)|0) + 4|0);
         $2905 = HEAP32[$2904>>2]|0;
         $2906 = ((33577952 + (($2895*12)|0)|0) + 8|0);
         $2907 = HEAP32[$2906>>2]|0;
         $2908 = (_can_b_king_escape($ptree,$2895,$2903,$2905,$2907)|0);
         $2909 = ($2908|0)==(0);
         if (!($2909)) {
          break;
         }
         $2910 = HEAP8[$$pre1002>>0]|0;
         $2911 = $2910&255;
         $2912 = ((220518304 + (($2911*81)|0)|0) + ($2828)|0);
         $2913 = HEAP8[$2912>>0]|0;
         $2914 = $2913&255;
         $2915 = ($2913<<24>>24)==(0);
         do {
          if ($2915) {
           label = 225;
          } else {
           $2916 = ((220518304 + (($2911*81)|0)|0) + ($2895)|0);
           $2917 = HEAP8[$2916>>0]|0;
           $2918 = ($2913<<24>>24)==($2917<<24>>24);
           if ($2918) {
            label = 225;
            break;
           }
           $2919 = (_is_pinned_on_black_king($ptree,$2828,$2914)|0);
           $2920 = ($2919|0)==(0);
           if ($2920) {
            label = 225;
           }
          }
         } while(0);
         if ((label|0) == 225) {
          label = 0;
          $2921 = (_can_b_piece_capture($ptree,$2895)|0);
          $2922 = ($2921|0)==(0);
          if (!($2922)) {
           break;
          }
         }
         $2923 = HEAP8[$2827>>0]|0;
         $2924 = $2923&255;
         $2925 = ((220518304 + (($2924*81)|0)|0) + ($2828)|0);
         $2926 = HEAP8[$2925>>0]|0;
         $2927 = $2926&255;
         $2928 = ($2926<<24>>24)==(0);
         if ($2928) {
          label = 229;
          break L321;
         }
         $2929 = ((220518304 + (($2924*81)|0)|0) + ($2895)|0);
         $2930 = HEAP8[$2929>>0]|0;
         $2931 = ($2926<<24>>24)==($2930<<24>>24);
         if ($2931) {
          label = 229;
          break L321;
         }
         $2932 = (_is_pinned_on_white_king($ptree,$2828,$2927)|0);
         $2933 = ($2932|0)==(0);
         if ($2933) {
          label = 229;
          break L321;
         }
        }
       } while(0);
       $2901 = ($2897|0)==($bb_check_pro$sroa$1$1308|0);
       if ($2901) {
        break;
       } else {
        $bb_check_pro$sroa$1$1308 = $2898;
       }
      }
     }
     $2974 = $2850 | $2844;
     $2975 = ($2974|0)==(0);
     if (!($2975)) {
      $bb_check$sroa$1$8314 = $2850;$bb_check$sroa$2$8313 = $2844;
      while(1) {
       $2976 = (_last_one12($bb_check$sroa$1$8314,$bb_check$sroa$2$8313)|0);
       $2977 = ((34156304 + (($2976*12)|0)|0) + 4|0);
       $2978 = HEAP32[$2977>>2]|0;
       $2979 = $2978 ^ $bb_check$sroa$1$8314;
       $2980 = ((34156304 + (($2976*12)|0)|0) + 8|0);
       $2981 = HEAP32[$2980>>2]|0;
       $2982 = $2981 ^ $bb_check$sroa$2$8313;
       $2983 = (_is_black_attacked($ptree,$2976)|0);
       $2984 = ($2983|0)==(0);
       do {
        if (!($2984)) {
         $2987 = (33576976 + (($2976*12)|0)|0);
         $2988 = HEAP32[$2987>>2]|0;
         $2989 = ((33576976 + (($2976*12)|0)|0) + 4|0);
         $2990 = HEAP32[$2989>>2]|0;
         $2991 = ((33576976 + (($2976*12)|0)|0) + 8|0);
         $2992 = HEAP32[$2991>>2]|0;
         $2993 = (_can_b_king_escape($ptree,$2976,$2988,$2990,$2992)|0);
         $2994 = ($2993|0)==(0);
         if (!($2994)) {
          break;
         }
         $2995 = HEAP8[$$pre1002>>0]|0;
         $2996 = $2995&255;
         $2997 = ((220518304 + (($2996*81)|0)|0) + ($2828)|0);
         $2998 = HEAP8[$2997>>0]|0;
         $2999 = $2998&255;
         $3000 = ($2998<<24>>24)==(0);
         do {
          if ($3000) {
           label = 237;
          } else {
           $3001 = ((220518304 + (($2996*81)|0)|0) + ($2976)|0);
           $3002 = HEAP8[$3001>>0]|0;
           $3003 = ($2998<<24>>24)==($3002<<24>>24);
           if ($3003) {
            label = 237;
            break;
           }
           $3004 = (_is_pinned_on_black_king($ptree,$2828,$2999)|0);
           $3005 = ($3004|0)==(0);
           if ($3005) {
            label = 237;
           }
          }
         } while(0);
         if ((label|0) == 237) {
          label = 0;
          $3006 = (_can_b_piece_capture($ptree,$2976)|0);
          $3007 = ($3006|0)==(0);
          if (!($3007)) {
           break;
          }
         }
         $3008 = HEAP8[$2827>>0]|0;
         $3009 = $3008&255;
         $3010 = ((220518304 + (($3009*81)|0)|0) + ($2828)|0);
         $3011 = HEAP8[$3010>>0]|0;
         $3012 = $3011&255;
         $3013 = ($3011<<24>>24)==(0);
         if ($3013) {
          label = 241;
          break L321;
         }
         $3014 = ((220518304 + (($3009*81)|0)|0) + ($2976)|0);
         $3015 = HEAP8[$3014>>0]|0;
         $3016 = ($3011<<24>>24)==($3015<<24>>24);
         if ($3016) {
          label = 241;
          break L321;
         }
         $3017 = (_is_pinned_on_white_king($ptree,$2828,$3012)|0);
         $3018 = ($3017|0)==(0);
         if ($3018) {
          label = 241;
          break L321;
         }
        }
       } while(0);
       $2985 = $2979 | $2982;
       $2986 = ($2985|0)==(0);
       if ($2986) {
        break;
       } else {
        $bb_check$sroa$1$8314 = $2979;$bb_check$sroa$2$8313 = $2982;
       }
      }
     }
     $3059 = HEAP32[$2858>>2]|0;
     $3060 = HEAP32[$2818>>2]|0;
     $3061 = $3060 ^ $3059;
     HEAP32[$2818>>2] = $3061;
     $3062 = HEAP32[$2862>>2]|0;
     $3063 = HEAP32[$2819>>2]|0;
     $3064 = $3063 ^ $3062;
     HEAP32[$2819>>2] = $3064;
     $3065 = HEAP32[$2866>>2]|0;
     $3066 = HEAP32[$2820>>2]|0;
     $3067 = $3066 ^ $3065;
     HEAP32[$2820>>2] = $3067;
     $3068 = HEAP32[$2870>>2]|0;
     $3069 = HEAP32[$2821>>2]|0;
     $3070 = $3069 ^ $3068;
     HEAP32[$2821>>2] = $3070;
     $3071 = HEAP32[$2874>>2]|0;
     $3072 = HEAP32[$2822>>2]|0;
     $3073 = $3072 ^ $3071;
     HEAP32[$2822>>2] = $3073;
     $3074 = HEAP32[$2878>>2]|0;
     $3075 = HEAP32[$2823>>2]|0;
     $3076 = $3075 ^ $3074;
     HEAP32[$2823>>2] = $3076;
     $3077 = HEAP32[$2882>>2]|0;
     $3078 = HEAP32[$2824>>2]|0;
     $3079 = $3078 ^ $3077;
     HEAP32[$2824>>2] = $3079;
     $3080 = HEAP32[$2886>>2]|0;
     $3081 = HEAP32[$2825>>2]|0;
     $3082 = $3081 ^ $3080;
     HEAP32[$2825>>2] = $3082;
     $3083 = HEAP32[$2890>>2]|0;
     $3084 = HEAP32[$2826>>2]|0;
     $3085 = $3084 ^ $3083;
     HEAP32[$2826>>2] = $3085;
     $3086 = HEAP32[$2829>>2]|0;
     $3087 = HEAP32[$7>>2]|0;
     $3088 = $3087 ^ $3086;
     HEAP32[$7>>2] = $3088;
     $3089 = HEAP32[$2521>>2]|0;
     $3090 = $3089 ^ $3086;
     HEAP32[$2521>>2] = $3090;
    }
    $3091 = ($2830|0)==($ubb$0358|0);
    if ($3091) {
     break L319;
    } else {
     $ubb$0358 = $2831;
    }
   }
   if ((label|0) == 229) {
    $2934 = HEAP32[$2858>>2]|0;
    $2935 = HEAP32[$2818>>2]|0;
    $2936 = $2935 ^ $2934;
    HEAP32[$2818>>2] = $2936;
    $2937 = HEAP32[$2862>>2]|0;
    $2938 = HEAP32[$2819>>2]|0;
    $2939 = $2938 ^ $2937;
    HEAP32[$2819>>2] = $2939;
    $2940 = HEAP32[$2866>>2]|0;
    $2941 = HEAP32[$2820>>2]|0;
    $2942 = $2941 ^ $2940;
    HEAP32[$2820>>2] = $2942;
    $2943 = HEAP32[$2870>>2]|0;
    $2944 = HEAP32[$2821>>2]|0;
    $2945 = $2944 ^ $2943;
    HEAP32[$2821>>2] = $2945;
    $2946 = HEAP32[$2874>>2]|0;
    $2947 = HEAP32[$2822>>2]|0;
    $2948 = $2947 ^ $2946;
    HEAP32[$2822>>2] = $2948;
    $2949 = HEAP32[$2878>>2]|0;
    $2950 = HEAP32[$2823>>2]|0;
    $2951 = $2950 ^ $2949;
    HEAP32[$2823>>2] = $2951;
    $2952 = HEAP32[$2882>>2]|0;
    $2953 = HEAP32[$2824>>2]|0;
    $2954 = $2953 ^ $2952;
    HEAP32[$2824>>2] = $2954;
    $2955 = HEAP32[$2886>>2]|0;
    $2956 = HEAP32[$2825>>2]|0;
    $2957 = $2956 ^ $2955;
    HEAP32[$2825>>2] = $2957;
    $2958 = HEAP32[$2890>>2]|0;
    $2959 = HEAP32[$2826>>2]|0;
    $2960 = $2959 ^ $2958;
    HEAP32[$2826>>2] = $2960;
    $2961 = HEAP32[$2829>>2]|0;
    $2962 = HEAP32[$7>>2]|0;
    $2963 = $2962 ^ $2961;
    HEAP32[$7>>2] = $2963;
    $2964 = HEAP32[$2521>>2]|0;
    $2965 = $2964 ^ $2961;
    HEAP32[$2521>>2] = $2965;
    $2966 = $2828 << 7;
    $2967 = ((($ptree) + ($2895)|0) + 512|0);
    $2968 = HEAP8[$2967>>0]|0;
    $2969 = $2968 << 24 >> 24;
    $2970 = $2969 << 19;
    $2971 = $2966 | $2895;
    $2972 = $2971 | $2970;
    $2973 = $2972 | 147456;
    $$0 = $2973;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 241) {
    $3019 = HEAP32[$2858>>2]|0;
    $3020 = HEAP32[$2818>>2]|0;
    $3021 = $3020 ^ $3019;
    HEAP32[$2818>>2] = $3021;
    $3022 = HEAP32[$2862>>2]|0;
    $3023 = HEAP32[$2819>>2]|0;
    $3024 = $3023 ^ $3022;
    HEAP32[$2819>>2] = $3024;
    $3025 = HEAP32[$2866>>2]|0;
    $3026 = HEAP32[$2820>>2]|0;
    $3027 = $3026 ^ $3025;
    HEAP32[$2820>>2] = $3027;
    $3028 = HEAP32[$2870>>2]|0;
    $3029 = HEAP32[$2821>>2]|0;
    $3030 = $3029 ^ $3028;
    HEAP32[$2821>>2] = $3030;
    $3031 = HEAP32[$2874>>2]|0;
    $3032 = HEAP32[$2822>>2]|0;
    $3033 = $3032 ^ $3031;
    HEAP32[$2822>>2] = $3033;
    $3034 = HEAP32[$2878>>2]|0;
    $3035 = HEAP32[$2823>>2]|0;
    $3036 = $3035 ^ $3034;
    HEAP32[$2823>>2] = $3036;
    $3037 = HEAP32[$2882>>2]|0;
    $3038 = HEAP32[$2824>>2]|0;
    $3039 = $3038 ^ $3037;
    HEAP32[$2824>>2] = $3039;
    $3040 = HEAP32[$2886>>2]|0;
    $3041 = HEAP32[$2825>>2]|0;
    $3042 = $3041 ^ $3040;
    HEAP32[$2825>>2] = $3042;
    $3043 = HEAP32[$2890>>2]|0;
    $3044 = HEAP32[$2826>>2]|0;
    $3045 = $3044 ^ $3043;
    HEAP32[$2826>>2] = $3045;
    $3046 = HEAP32[$2829>>2]|0;
    $3047 = HEAP32[$7>>2]|0;
    $3048 = $3047 ^ $3046;
    HEAP32[$7>>2] = $3048;
    $3049 = HEAP32[$2521>>2]|0;
    $3050 = $3049 ^ $3046;
    HEAP32[$2521>>2] = $3050;
    $3051 = $2828 << 7;
    $3052 = ((($ptree) + ($2976)|0) + 512|0);
    $3053 = HEAP8[$3052>>0]|0;
    $3054 = $3053 << 24 >> 24;
    $3055 = $3054 << 19;
    $3056 = $3051 | $2976;
    $3057 = $3056 | $3055;
    $3058 = $3057 | 131072;
    $$0 = $3058;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $3092 = $2525 & 134217216;
 $3093 = $3092 | $2520;
 $3094 = ($3093|0)==(0);
 L364: do {
  if (!($3094)) {
   $3095 = (($ptree) + 32|0);
   $3096 = (($ptree) + 36|0);
   $3097 = (($ptree) + 40|0);
   $3098 = (($ptree) + 44|0);
   $3099 = (($ptree) + 48|0);
   $3100 = (($ptree) + 52|0);
   $3101 = (($ptree) + 56|0);
   $3102 = (($ptree) + 60|0);
   $3103 = (($ptree) + 64|0);
   $3104 = (($ptree) + 594|0);
   $bb$sroa$0$10301 = $2520;$bb$sroa$1$10302 = $3092;
   L366: while(1) {
    $3105 = (_last_one01($bb$sroa$0$10301,$bb$sroa$1$10302)|0);
    $3106 = (34156304 + (($3105*12)|0)|0);
    $3107 = HEAP32[$3106>>2]|0;
    $3108 = $3107 ^ $bb$sroa$0$10301;
    $3109 = ((34156304 + (($3105*12)|0)|0) + 4|0);
    $3110 = HEAP32[$3109>>2]|0;
    $3111 = $3110 ^ $bb$sroa$1$10302;
    $3112 = (33576976 + (($3105*12)|0)|0);
    $3113 = HEAP32[$3112>>2]|0;
    $3114 = $3113 & $362;
    $3115 = HEAP8[$$pre1002>>0]|0;
    $3116 = $3115&255;
    $3117 = (33574048 + (($3116*12)|0)|0);
    $3118 = HEAP32[$3117>>2]|0;
    $3119 = $3114 & $3118;
    $3120 = ((33576976 + (($3105*12)|0)|0) + 4|0);
    $3121 = HEAP32[$3120>>2]|0;
    $3122 = $3121 & $364;
    $3123 = ((33574048 + (($3116*12)|0)|0) + 4|0);
    $3124 = HEAP32[$3123>>2]|0;
    $3125 = $3122 & $3124;
    $3126 = $3125 | $3119;
    $3127 = ($3126|0)==(0);
    if (!($3127)) {
     $3128 = HEAP32[$2514>>2]|0;
     $3129 = $3128 ^ $3107;
     HEAP32[$2514>>2] = $3129;
     $3130 = HEAP32[$2521>>2]|0;
     $3131 = $3130 ^ $3110;
     HEAP32[$2521>>2] = $3131;
     $3132 = HEAP32[$2>>2]|0;
     $3133 = $3132 ^ $3107;
     HEAP32[$2>>2] = $3133;
     $3134 = HEAP32[$7>>2]|0;
     $3135 = $3134 ^ $3110;
     HEAP32[$7>>2] = $3135;
     $3136 = (34157280 + (($3105*12)|0)|0);
     $3137 = HEAP32[$3136>>2]|0;
     $3138 = HEAP32[$3095>>2]|0;
     $3139 = $3138 ^ $3137;
     HEAP32[$3095>>2] = $3139;
     $3140 = ((34157280 + (($3105*12)|0)|0) + 4|0);
     $3141 = HEAP32[$3140>>2]|0;
     $3142 = HEAP32[$3096>>2]|0;
     $3143 = $3142 ^ $3141;
     HEAP32[$3096>>2] = $3143;
     $3144 = ((34157280 + (($3105*12)|0)|0) + 8|0);
     $3145 = HEAP32[$3144>>2]|0;
     $3146 = HEAP32[$3097>>2]|0;
     $3147 = $3146 ^ $3145;
     HEAP32[$3097>>2] = $3147;
     $3148 = (34158256 + (($3105*12)|0)|0);
     $3149 = HEAP32[$3148>>2]|0;
     $3150 = HEAP32[$3098>>2]|0;
     $3151 = $3150 ^ $3149;
     HEAP32[$3098>>2] = $3151;
     $3152 = ((34158256 + (($3105*12)|0)|0) + 4|0);
     $3153 = HEAP32[$3152>>2]|0;
     $3154 = HEAP32[$3099>>2]|0;
     $3155 = $3154 ^ $3153;
     HEAP32[$3099>>2] = $3155;
     $3156 = ((34158256 + (($3105*12)|0)|0) + 8|0);
     $3157 = HEAP32[$3156>>2]|0;
     $3158 = HEAP32[$3100>>2]|0;
     $3159 = $3158 ^ $3157;
     HEAP32[$3100>>2] = $3159;
     $3160 = (34159232 + (($3105*12)|0)|0);
     $3161 = HEAP32[$3160>>2]|0;
     $3162 = HEAP32[$3101>>2]|0;
     $3163 = $3162 ^ $3161;
     HEAP32[$3101>>2] = $3163;
     $3164 = ((34159232 + (($3105*12)|0)|0) + 4|0);
     $3165 = HEAP32[$3164>>2]|0;
     $3166 = HEAP32[$3102>>2]|0;
     $3167 = $3166 ^ $3165;
     HEAP32[$3102>>2] = $3167;
     $3168 = ((34159232 + (($3105*12)|0)|0) + 8|0);
     $3169 = HEAP32[$3168>>2]|0;
     $3170 = HEAP32[$3103>>2]|0;
     $3171 = $3170 ^ $3169;
     HEAP32[$3103>>2] = $3171;
     $bb_check$sroa$0$7 = $3119;$bb_check$sroa$1$9 = $3125;
     while(1) {
      $3172 = (_last_one01($bb_check$sroa$0$7,$bb_check$sroa$1$9)|0);
      $3173 = (34156304 + (($3172*12)|0)|0);
      $3174 = HEAP32[$3173>>2]|0;
      $3175 = $3174 ^ $bb_check$sroa$0$7;
      $3176 = ((34156304 + (($3172*12)|0)|0) + 4|0);
      $3177 = HEAP32[$3176>>2]|0;
      $3178 = $3177 ^ $bb_check$sroa$1$9;
      $3179 = (_is_black_attacked($ptree,$3172)|0);
      $3180 = ($3179|0)==(0);
      do {
       if (!($3180)) {
        $3181 = (33576976 + (($3172*12)|0)|0);
        $3182 = HEAP32[$3181>>2]|0;
        $3183 = ((33576976 + (($3172*12)|0)|0) + 4|0);
        $3184 = HEAP32[$3183>>2]|0;
        $3185 = ((33576976 + (($3172*12)|0)|0) + 8|0);
        $3186 = HEAP32[$3185>>2]|0;
        $3187 = (_can_b_king_escape($ptree,$3172,$3182,$3184,$3186)|0);
        $3188 = ($3187|0)==(0);
        if (!($3188)) {
         break;
        }
        $3189 = HEAP8[$$pre1002>>0]|0;
        $3190 = $3189&255;
        $3191 = ((220518304 + (($3190*81)|0)|0) + ($3105)|0);
        $3192 = HEAP8[$3191>>0]|0;
        $3193 = $3192&255;
        $3194 = ($3192<<24>>24)==(0);
        do {
         if ($3194) {
          label = 253;
         } else {
          $3195 = ((220518304 + (($3190*81)|0)|0) + ($3172)|0);
          $3196 = HEAP8[$3195>>0]|0;
          $3197 = ($3192<<24>>24)==($3196<<24>>24);
          if ($3197) {
           label = 253;
           break;
          }
          $3198 = (_is_pinned_on_black_king($ptree,$3105,$3193)|0);
          $3199 = ($3198|0)==(0);
          if ($3199) {
           label = 253;
          }
         }
        } while(0);
        if ((label|0) == 253) {
         label = 0;
         $3200 = (_can_b_piece_capture($ptree,$3172)|0);
         $3201 = ($3200|0)==(0);
         if (!($3201)) {
          break;
         }
        }
        $3202 = HEAP8[$3104>>0]|0;
        $3203 = $3202&255;
        $3204 = ((220518304 + (($3203*81)|0)|0) + ($3105)|0);
        $3205 = HEAP8[$3204>>0]|0;
        $3206 = $3205&255;
        $3207 = ($3205<<24>>24)==(0);
        if ($3207) {
         break L366;
        }
        $3208 = ((220518304 + (($3203*81)|0)|0) + ($3172)|0);
        $3209 = HEAP8[$3208>>0]|0;
        $3210 = ($3205<<24>>24)==($3209<<24>>24);
        if ($3210) {
         break L366;
        }
        $3211 = (_is_pinned_on_white_king($ptree,$3105,$3206)|0);
        $3212 = ($3211|0)==(0);
        if ($3212) {
         break L366;
        }
       }
      } while(0);
      $3258 = $3178 | $3175;
      $3259 = ($3258|0)==(0);
      if ($3259) {
       break;
      } else {
       $bb_check$sroa$0$7 = $3175;$bb_check$sroa$1$9 = $3178;
      }
     }
     $3260 = HEAP32[$3136>>2]|0;
     $3261 = HEAP32[$3095>>2]|0;
     $3262 = $3261 ^ $3260;
     HEAP32[$3095>>2] = $3262;
     $3263 = HEAP32[$3140>>2]|0;
     $3264 = HEAP32[$3096>>2]|0;
     $3265 = $3264 ^ $3263;
     HEAP32[$3096>>2] = $3265;
     $3266 = HEAP32[$3144>>2]|0;
     $3267 = HEAP32[$3097>>2]|0;
     $3268 = $3267 ^ $3266;
     HEAP32[$3097>>2] = $3268;
     $3269 = HEAP32[$3148>>2]|0;
     $3270 = HEAP32[$3098>>2]|0;
     $3271 = $3270 ^ $3269;
     HEAP32[$3098>>2] = $3271;
     $3272 = HEAP32[$3152>>2]|0;
     $3273 = HEAP32[$3099>>2]|0;
     $3274 = $3273 ^ $3272;
     HEAP32[$3099>>2] = $3274;
     $3275 = HEAP32[$3156>>2]|0;
     $3276 = HEAP32[$3100>>2]|0;
     $3277 = $3276 ^ $3275;
     HEAP32[$3100>>2] = $3277;
     $3278 = HEAP32[$3160>>2]|0;
     $3279 = HEAP32[$3101>>2]|0;
     $3280 = $3279 ^ $3278;
     HEAP32[$3101>>2] = $3280;
     $3281 = HEAP32[$3164>>2]|0;
     $3282 = HEAP32[$3102>>2]|0;
     $3283 = $3282 ^ $3281;
     HEAP32[$3102>>2] = $3283;
     $3284 = HEAP32[$3168>>2]|0;
     $3285 = HEAP32[$3103>>2]|0;
     $3286 = $3285 ^ $3284;
     HEAP32[$3103>>2] = $3286;
     $3287 = HEAP32[$3106>>2]|0;
     $3288 = HEAP32[$2>>2]|0;
     $3289 = $3288 ^ $3287;
     HEAP32[$2>>2] = $3289;
     $3290 = HEAP32[$3109>>2]|0;
     $3291 = HEAP32[$7>>2]|0;
     $3292 = $3291 ^ $3290;
     HEAP32[$7>>2] = $3292;
     $3293 = HEAP32[$2514>>2]|0;
     $3294 = $3293 ^ $3287;
     HEAP32[$2514>>2] = $3294;
     $3295 = HEAP32[$2521>>2]|0;
     $3296 = $3295 ^ $3290;
     HEAP32[$2521>>2] = $3296;
    }
    $3297 = $3111 | $3108;
    $3298 = ($3297|0)==(0);
    if ($3298) {
     break L364;
    } else {
     $bb$sroa$0$10301 = $3108;$bb$sroa$1$10302 = $3111;
    }
   }
   $3213 = HEAP32[$3136>>2]|0;
   $3214 = HEAP32[$3095>>2]|0;
   $3215 = $3214 ^ $3213;
   HEAP32[$3095>>2] = $3215;
   $3216 = HEAP32[$3140>>2]|0;
   $3217 = HEAP32[$3096>>2]|0;
   $3218 = $3217 ^ $3216;
   HEAP32[$3096>>2] = $3218;
   $3219 = HEAP32[$3144>>2]|0;
   $3220 = HEAP32[$3097>>2]|0;
   $3221 = $3220 ^ $3219;
   HEAP32[$3097>>2] = $3221;
   $3222 = HEAP32[$3148>>2]|0;
   $3223 = HEAP32[$3098>>2]|0;
   $3224 = $3223 ^ $3222;
   HEAP32[$3098>>2] = $3224;
   $3225 = HEAP32[$3152>>2]|0;
   $3226 = HEAP32[$3099>>2]|0;
   $3227 = $3226 ^ $3225;
   HEAP32[$3099>>2] = $3227;
   $3228 = HEAP32[$3156>>2]|0;
   $3229 = HEAP32[$3100>>2]|0;
   $3230 = $3229 ^ $3228;
   HEAP32[$3100>>2] = $3230;
   $3231 = HEAP32[$3160>>2]|0;
   $3232 = HEAP32[$3101>>2]|0;
   $3233 = $3232 ^ $3231;
   HEAP32[$3101>>2] = $3233;
   $3234 = HEAP32[$3164>>2]|0;
   $3235 = HEAP32[$3102>>2]|0;
   $3236 = $3235 ^ $3234;
   HEAP32[$3102>>2] = $3236;
   $3237 = HEAP32[$3168>>2]|0;
   $3238 = HEAP32[$3103>>2]|0;
   $3239 = $3238 ^ $3237;
   HEAP32[$3103>>2] = $3239;
   $3240 = HEAP32[$3106>>2]|0;
   $3241 = HEAP32[$2>>2]|0;
   $3242 = $3241 ^ $3240;
   HEAP32[$2>>2] = $3242;
   $3243 = HEAP32[$3109>>2]|0;
   $3244 = HEAP32[$7>>2]|0;
   $3245 = $3244 ^ $3243;
   HEAP32[$7>>2] = $3245;
   $3246 = HEAP32[$2514>>2]|0;
   $3247 = $3246 ^ $3240;
   HEAP32[$2514>>2] = $3247;
   $3248 = HEAP32[$2521>>2]|0;
   $3249 = $3248 ^ $3243;
   HEAP32[$2521>>2] = $3249;
   $3250 = $3105 << 7;
   $3251 = ((($ptree) + ($3172)|0) + 512|0);
   $3252 = HEAP8[$3251>>0]|0;
   $3253 = $3252 << 24 >> 24;
   $3254 = $3253 << 19;
   $3255 = $3250 | $3172;
   $3256 = $3255 | $3254;
   $3257 = $3256 | 131072;
   $$0 = $3257;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $3299 = (($ptree) + 224|0);
 $3300 = HEAP32[$3299>>2]|0;
 $3301 = HEAP8[$$pre1002>>0]|0;
 $3302 = $3301&255;
 $3303 = ((221106432 + (($3302*48)|0)|0) + 24|0);
 $3304 = HEAP32[$3303>>2]|0;
 $3305 = $3304 & $3300;
 $3306 = (($ptree) + 228|0);
 $3307 = HEAP32[$3306>>2]|0;
 $3308 = ((221106432 + (($3302*48)|0)|0) + 28|0);
 $3309 = HEAP32[$3308>>2]|0;
 $3310 = $3309 & $3307;
 $3311 = (($ptree) + 232|0);
 $3312 = HEAP32[$3311>>2]|0;
 $3313 = ((221106432 + (($3302*48)|0)|0) + 32|0);
 $3314 = HEAP32[$3313>>2]|0;
 $3315 = $3314 & $3312;
 $3316 = $3310 | $3305;
 $3317 = $3316 | $3315;
 $3318 = ($3317|0)==(0);
 do {
  if ($3318) {
   $3702 = $3301;
  } else {
   $3319 = (($ptree) + 32|0);
   $3320 = (($ptree) + 36|0);
   $3321 = (($ptree) + 40|0);
   $3322 = (($ptree) + 44|0);
   $3323 = (($ptree) + 48|0);
   $3324 = (($ptree) + 52|0);
   $3325 = (($ptree) + 56|0);
   $3326 = (($ptree) + 60|0);
   $3327 = (($ptree) + 64|0);
   $3328 = (($ptree) + 594|0);
   $bb$sroa$0$11271 = $3305;$bb$sroa$1$11272 = $3310;$bb$sroa$2$11273 = $3315;
   L391: while(1) {
    $3329 = (_last_one210($bb$sroa$2$11273,$bb$sroa$1$11272,$bb$sroa$0$11271)|0);
    $3330 = (34156304 + (($3329*12)|0)|0);
    $3331 = HEAP32[$3330>>2]|0;
    $3332 = $3331 ^ $bb$sroa$0$11271;
    $3333 = ((34156304 + (($3329*12)|0)|0) + 4|0);
    $3334 = HEAP32[$3333>>2]|0;
    $3335 = $3334 ^ $bb$sroa$1$11272;
    $3336 = ((34156304 + (($3329*12)|0)|0) + 8|0);
    $3337 = HEAP32[$3336>>2]|0;
    $3338 = $3337 ^ $bb$sroa$2$11273;
    $3339 = ((33576000 + (($3329*12)|0)|0) + 8|0);
    $3340 = HEAP32[$3339>>2]|0;
    $3341 = $3340 & $366;
    $3342 = HEAP8[$$pre1002>>0]|0;
    $3343 = $3342&255;
    $3344 = ((33575024 + (($3343*12)|0)|0) + 8|0);
    $3345 = HEAP32[$3344>>2]|0;
    $3346 = $3345 & $3341;
    $3347 = ($3346|0)==(0);
    do {
     if ($3347) {
      $3513 = (33576000 + (($3329*12)|0)|0);
      $3514 = HEAP32[$3513>>2]|0;
      $3515 = $3514 & $362;
      $3516 = ((33576000 + (($3329*12)|0)|0) + 4|0);
      $3517 = HEAP32[$3516>>2]|0;
      $3518 = $3517 & $364;
      $3519 = (33573072 + (($3343*12)|0)|0);
      $3520 = HEAP32[$3519>>2]|0;
      $3521 = $3515 & $3520;
      $3522 = ((33573072 + (($3343*12)|0)|0) + 4|0);
      $3523 = HEAP32[$3522>>2]|0;
      $3524 = $3518 & $3523;
      $3525 = ((33573072 + (($3343*12)|0)|0) + 8|0);
      $3526 = HEAP32[$3525>>2]|0;
      $3527 = $3526 & $3341;
      $3528 = $3524 | $3521;
      $3529 = $3528 | $3527;
      $3530 = ($3529|0)==(0);
      if ($3530) {
       break;
      }
      $3531 = HEAP32[$3299>>2]|0;
      $3532 = $3531 ^ $3331;
      HEAP32[$3299>>2] = $3532;
      $3533 = HEAP32[$3306>>2]|0;
      $3534 = $3533 ^ $3334;
      HEAP32[$3306>>2] = $3534;
      $3535 = HEAP32[$2>>2]|0;
      $3536 = $3535 ^ $3331;
      HEAP32[$2>>2] = $3536;
      $3537 = HEAP32[$7>>2]|0;
      $3538 = $3537 ^ $3334;
      HEAP32[$7>>2] = $3538;
      $3539 = (34157280 + (($3329*12)|0)|0);
      $3540 = HEAP32[$3539>>2]|0;
      $3541 = HEAP32[$3319>>2]|0;
      $3542 = $3541 ^ $3540;
      HEAP32[$3319>>2] = $3542;
      $3543 = ((34157280 + (($3329*12)|0)|0) + 4|0);
      $3544 = HEAP32[$3543>>2]|0;
      $3545 = HEAP32[$3320>>2]|0;
      $3546 = $3545 ^ $3544;
      HEAP32[$3320>>2] = $3546;
      $3547 = ((34157280 + (($3329*12)|0)|0) + 8|0);
      $3548 = HEAP32[$3547>>2]|0;
      $3549 = HEAP32[$3321>>2]|0;
      $3550 = $3549 ^ $3548;
      HEAP32[$3321>>2] = $3550;
      $3551 = (34158256 + (($3329*12)|0)|0);
      $3552 = HEAP32[$3551>>2]|0;
      $3553 = HEAP32[$3322>>2]|0;
      $3554 = $3553 ^ $3552;
      HEAP32[$3322>>2] = $3554;
      $3555 = ((34158256 + (($3329*12)|0)|0) + 4|0);
      $3556 = HEAP32[$3555>>2]|0;
      $3557 = HEAP32[$3323>>2]|0;
      $3558 = $3557 ^ $3556;
      HEAP32[$3323>>2] = $3558;
      $3559 = ((34158256 + (($3329*12)|0)|0) + 8|0);
      $3560 = HEAP32[$3559>>2]|0;
      $3561 = HEAP32[$3324>>2]|0;
      $3562 = $3561 ^ $3560;
      HEAP32[$3324>>2] = $3562;
      $3563 = (34159232 + (($3329*12)|0)|0);
      $3564 = HEAP32[$3563>>2]|0;
      $3565 = HEAP32[$3325>>2]|0;
      $3566 = $3565 ^ $3564;
      HEAP32[$3325>>2] = $3566;
      $3567 = ((34159232 + (($3329*12)|0)|0) + 4|0);
      $3568 = HEAP32[$3567>>2]|0;
      $3569 = HEAP32[$3326>>2]|0;
      $3570 = $3569 ^ $3568;
      HEAP32[$3326>>2] = $3570;
      $3571 = ((34159232 + (($3329*12)|0)|0) + 8|0);
      $3572 = HEAP32[$3571>>2]|0;
      $3573 = HEAP32[$3327>>2]|0;
      $3574 = $3573 ^ $3572;
      HEAP32[$3327>>2] = $3574;
      $bb_check$sroa$0$8 = $3521;$bb_check$sroa$1$10 = $3524;$bb_check$sroa$2$10 = $3527;
      while(1) {
       $3575 = (_last_one210($bb_check$sroa$2$10,$bb_check$sroa$1$10,$bb_check$sroa$0$8)|0);
       $3576 = (34156304 + (($3575*12)|0)|0);
       $3577 = HEAP32[$3576>>2]|0;
       $3578 = $3577 ^ $bb_check$sroa$0$8;
       $3579 = ((34156304 + (($3575*12)|0)|0) + 4|0);
       $3580 = HEAP32[$3579>>2]|0;
       $3581 = $3580 ^ $bb_check$sroa$1$10;
       $3582 = ((34156304 + (($3575*12)|0)|0) + 8|0);
       $3583 = HEAP32[$3582>>2]|0;
       $3584 = $3583 ^ $bb_check$sroa$2$10;
       $3585 = (_can_b_king_escape($ptree,$3575,0,0,0)|0);
       $3586 = ($3585|0)==(0);
       do {
        if ($3586) {
         $3587 = HEAP8[$$pre1002>>0]|0;
         $3588 = $3587&255;
         $3589 = ((220518304 + (($3588*81)|0)|0) + ($3329)|0);
         $3590 = HEAP8[$3589>>0]|0;
         $3591 = $3590&255;
         $3592 = ($3590<<24>>24)==(0);
         do {
          if ($3592) {
           label = 283;
          } else {
           $3593 = ((220518304 + (($3588*81)|0)|0) + ($3575)|0);
           $3594 = HEAP8[$3593>>0]|0;
           $3595 = ($3590<<24>>24)==($3594<<24>>24);
           if ($3595) {
            label = 283;
            break;
           }
           $3596 = (_is_pinned_on_black_king($ptree,$3329,$3591)|0);
           $3597 = ($3596|0)==(0);
           if ($3597) {
            label = 283;
           }
          }
         } while(0);
         if ((label|0) == 283) {
          label = 0;
          $3598 = (_can_b_piece_capture($ptree,$3575)|0);
          $3599 = ($3598|0)==(0);
          if (!($3599)) {
           break;
          }
         }
         $3600 = HEAP8[$3328>>0]|0;
         $3601 = $3600&255;
         $3602 = ((220518304 + (($3601*81)|0)|0) + ($3329)|0);
         $3603 = HEAP8[$3602>>0]|0;
         $3604 = $3603&255;
         $3605 = ($3603<<24>>24)==(0);
         if ($3605) {
          label = 287;
          break L391;
         }
         $3606 = ((220518304 + (($3601*81)|0)|0) + ($3575)|0);
         $3607 = HEAP8[$3606>>0]|0;
         $3608 = ($3603<<24>>24)==($3607<<24>>24);
         if ($3608) {
          label = 287;
          break L391;
         }
         $3609 = (_is_pinned_on_white_king($ptree,$3329,$3604)|0);
         $3610 = ($3609|0)==(0);
         if ($3610) {
          label = 287;
          break L391;
         }
        }
       } while(0);
       $3656 = $3581 | $3578;
       $3657 = $3656 | $3584;
       $3658 = ($3657|0)==(0);
       if ($3658) {
        break;
       } else {
        $bb_check$sroa$0$8 = $3578;$bb_check$sroa$1$10 = $3581;$bb_check$sroa$2$10 = $3584;
       }
      }
      $3659 = HEAP32[$3539>>2]|0;
      $3660 = HEAP32[$3319>>2]|0;
      $3661 = $3660 ^ $3659;
      HEAP32[$3319>>2] = $3661;
      $3662 = HEAP32[$3543>>2]|0;
      $3663 = HEAP32[$3320>>2]|0;
      $3664 = $3663 ^ $3662;
      HEAP32[$3320>>2] = $3664;
      $3665 = HEAP32[$3547>>2]|0;
      $3666 = HEAP32[$3321>>2]|0;
      $3667 = $3666 ^ $3665;
      HEAP32[$3321>>2] = $3667;
      $3668 = HEAP32[$3551>>2]|0;
      $3669 = HEAP32[$3322>>2]|0;
      $3670 = $3669 ^ $3668;
      HEAP32[$3322>>2] = $3670;
      $3671 = HEAP32[$3555>>2]|0;
      $3672 = HEAP32[$3323>>2]|0;
      $3673 = $3672 ^ $3671;
      HEAP32[$3323>>2] = $3673;
      $3674 = HEAP32[$3559>>2]|0;
      $3675 = HEAP32[$3324>>2]|0;
      $3676 = $3675 ^ $3674;
      HEAP32[$3324>>2] = $3676;
      $3677 = HEAP32[$3563>>2]|0;
      $3678 = HEAP32[$3325>>2]|0;
      $3679 = $3678 ^ $3677;
      HEAP32[$3325>>2] = $3679;
      $3680 = HEAP32[$3567>>2]|0;
      $3681 = HEAP32[$3326>>2]|0;
      $3682 = $3681 ^ $3680;
      HEAP32[$3326>>2] = $3682;
      $3683 = HEAP32[$3571>>2]|0;
      $3684 = HEAP32[$3327>>2]|0;
      $3685 = $3684 ^ $3683;
      HEAP32[$3327>>2] = $3685;
      $3686 = HEAP32[$3330>>2]|0;
      $3687 = HEAP32[$2>>2]|0;
      $3688 = $3687 ^ $3686;
      HEAP32[$2>>2] = $3688;
      $3689 = HEAP32[$3333>>2]|0;
      $3690 = HEAP32[$7>>2]|0;
      $3691 = $3690 ^ $3689;
      HEAP32[$7>>2] = $3691;
      $3692 = HEAP32[$3299>>2]|0;
      $3693 = $3692 ^ $3686;
      HEAP32[$3299>>2] = $3693;
      $3694 = HEAP32[$3306>>2]|0;
      $3695 = $3694 ^ $3689;
      HEAP32[$3306>>2] = $3695;
     } else {
      $3348 = HEAP32[$3306>>2]|0;
      $3349 = $3348 ^ $3334;
      HEAP32[$3306>>2] = $3349;
      $3350 = HEAP32[$3311>>2]|0;
      $3351 = $3350 ^ $3337;
      HEAP32[$3311>>2] = $3351;
      $3352 = HEAP32[$7>>2]|0;
      $3353 = $3352 ^ $3334;
      HEAP32[$7>>2] = $3353;
      $3354 = HEAP32[$12>>2]|0;
      $3355 = $3354 ^ $3337;
      HEAP32[$12>>2] = $3355;
      $3356 = (34157280 + (($3329*12)|0)|0);
      $3357 = HEAP32[$3356>>2]|0;
      $3358 = HEAP32[$3319>>2]|0;
      $3359 = $3358 ^ $3357;
      HEAP32[$3319>>2] = $3359;
      $3360 = ((34157280 + (($3329*12)|0)|0) + 4|0);
      $3361 = HEAP32[$3360>>2]|0;
      $3362 = HEAP32[$3320>>2]|0;
      $3363 = $3362 ^ $3361;
      HEAP32[$3320>>2] = $3363;
      $3364 = ((34157280 + (($3329*12)|0)|0) + 8|0);
      $3365 = HEAP32[$3364>>2]|0;
      $3366 = HEAP32[$3321>>2]|0;
      $3367 = $3366 ^ $3365;
      HEAP32[$3321>>2] = $3367;
      $3368 = (34158256 + (($3329*12)|0)|0);
      $3369 = HEAP32[$3368>>2]|0;
      $3370 = HEAP32[$3322>>2]|0;
      $3371 = $3370 ^ $3369;
      HEAP32[$3322>>2] = $3371;
      $3372 = ((34158256 + (($3329*12)|0)|0) + 4|0);
      $3373 = HEAP32[$3372>>2]|0;
      $3374 = HEAP32[$3323>>2]|0;
      $3375 = $3374 ^ $3373;
      HEAP32[$3323>>2] = $3375;
      $3376 = ((34158256 + (($3329*12)|0)|0) + 8|0);
      $3377 = HEAP32[$3376>>2]|0;
      $3378 = HEAP32[$3324>>2]|0;
      $3379 = $3378 ^ $3377;
      HEAP32[$3324>>2] = $3379;
      $3380 = (34159232 + (($3329*12)|0)|0);
      $3381 = HEAP32[$3380>>2]|0;
      $3382 = HEAP32[$3325>>2]|0;
      $3383 = $3382 ^ $3381;
      HEAP32[$3325>>2] = $3383;
      $3384 = ((34159232 + (($3329*12)|0)|0) + 4|0);
      $3385 = HEAP32[$3384>>2]|0;
      $3386 = HEAP32[$3326>>2]|0;
      $3387 = $3386 ^ $3385;
      HEAP32[$3326>>2] = $3387;
      $3388 = ((34159232 + (($3329*12)|0)|0) + 8|0);
      $3389 = HEAP32[$3388>>2]|0;
      $3390 = HEAP32[$3327>>2]|0;
      $3391 = $3390 ^ $3389;
      HEAP32[$3327>>2] = $3391;
      $bb_check$sroa$2$9 = $3346;
      while(1) {
       $3392 = (_first_one2($bb_check$sroa$2$9)|0);
       $3393 = ((34156304 + (($3392*12)|0)|0) + 8|0);
       $3394 = HEAP32[$3393>>2]|0;
       $3395 = $3394 ^ $bb_check$sroa$2$9;
       $3396 = (_is_black_attacked($ptree,$3392)|0);
       $3397 = ($3396|0)==(0);
       do {
        if (!($3397)) {
         $3398 = (33577952 + (($3392*12)|0)|0);
         $3399 = HEAP32[$3398>>2]|0;
         $3400 = ((33577952 + (($3392*12)|0)|0) + 4|0);
         $3401 = HEAP32[$3400>>2]|0;
         $3402 = ((33577952 + (($3392*12)|0)|0) + 8|0);
         $3403 = HEAP32[$3402>>2]|0;
         $3404 = (_can_b_king_escape($ptree,$3392,$3399,$3401,$3403)|0);
         $3405 = ($3404|0)==(0);
         if (!($3405)) {
          break;
         }
         $3406 = HEAP8[$$pre1002>>0]|0;
         $3407 = $3406&255;
         $3408 = ((220518304 + (($3407*81)|0)|0) + ($3329)|0);
         $3409 = HEAP8[$3408>>0]|0;
         $3410 = $3409&255;
         $3411 = ($3409<<24>>24)==(0);
         do {
          if ($3411) {
           label = 270;
          } else {
           $3412 = ((220518304 + (($3407*81)|0)|0) + ($3392)|0);
           $3413 = HEAP8[$3412>>0]|0;
           $3414 = ($3409<<24>>24)==($3413<<24>>24);
           if ($3414) {
            label = 270;
            break;
           }
           $3415 = (_is_pinned_on_black_king($ptree,$3329,$3410)|0);
           $3416 = ($3415|0)==(0);
           if ($3416) {
            label = 270;
           }
          }
         } while(0);
         if ((label|0) == 270) {
          label = 0;
          $3417 = (_can_b_piece_capture($ptree,$3392)|0);
          $3418 = ($3417|0)==(0);
          if (!($3418)) {
           break;
          }
         }
         $3419 = HEAP8[$3328>>0]|0;
         $3420 = $3419&255;
         $3421 = ((220518304 + (($3420*81)|0)|0) + ($3329)|0);
         $3422 = HEAP8[$3421>>0]|0;
         $3423 = $3422&255;
         $3424 = ($3422<<24>>24)==(0);
         if ($3424) {
          label = 274;
          break L391;
         }
         $3425 = ((220518304 + (($3420*81)|0)|0) + ($3392)|0);
         $3426 = HEAP8[$3425>>0]|0;
         $3427 = ($3422<<24>>24)==($3426<<24>>24);
         if ($3427) {
          label = 274;
          break L391;
         }
         $3428 = (_is_pinned_on_white_king($ptree,$3329,$3423)|0);
         $3429 = ($3428|0)==(0);
         if ($3429) {
          label = 274;
          break L391;
         }
        }
       } while(0);
       $3475 = ($bb_check$sroa$2$9|0)==($3394|0);
       if ($3475) {
        break;
       } else {
        $bb_check$sroa$2$9 = $3395;
       }
      }
      $3476 = HEAP32[$3356>>2]|0;
      $3477 = HEAP32[$3319>>2]|0;
      $3478 = $3477 ^ $3476;
      HEAP32[$3319>>2] = $3478;
      $3479 = HEAP32[$3360>>2]|0;
      $3480 = HEAP32[$3320>>2]|0;
      $3481 = $3480 ^ $3479;
      HEAP32[$3320>>2] = $3481;
      $3482 = HEAP32[$3364>>2]|0;
      $3483 = HEAP32[$3321>>2]|0;
      $3484 = $3483 ^ $3482;
      HEAP32[$3321>>2] = $3484;
      $3485 = HEAP32[$3368>>2]|0;
      $3486 = HEAP32[$3322>>2]|0;
      $3487 = $3486 ^ $3485;
      HEAP32[$3322>>2] = $3487;
      $3488 = HEAP32[$3372>>2]|0;
      $3489 = HEAP32[$3323>>2]|0;
      $3490 = $3489 ^ $3488;
      HEAP32[$3323>>2] = $3490;
      $3491 = HEAP32[$3376>>2]|0;
      $3492 = HEAP32[$3324>>2]|0;
      $3493 = $3492 ^ $3491;
      HEAP32[$3324>>2] = $3493;
      $3494 = HEAP32[$3380>>2]|0;
      $3495 = HEAP32[$3325>>2]|0;
      $3496 = $3495 ^ $3494;
      HEAP32[$3325>>2] = $3496;
      $3497 = HEAP32[$3384>>2]|0;
      $3498 = HEAP32[$3326>>2]|0;
      $3499 = $3498 ^ $3497;
      HEAP32[$3326>>2] = $3499;
      $3500 = HEAP32[$3388>>2]|0;
      $3501 = HEAP32[$3327>>2]|0;
      $3502 = $3501 ^ $3500;
      HEAP32[$3327>>2] = $3502;
      $3503 = HEAP32[$3333>>2]|0;
      $3504 = HEAP32[$7>>2]|0;
      $3505 = $3504 ^ $3503;
      HEAP32[$7>>2] = $3505;
      $3506 = HEAP32[$3336>>2]|0;
      $3507 = HEAP32[$12>>2]|0;
      $3508 = $3507 ^ $3506;
      HEAP32[$12>>2] = $3508;
      $3509 = HEAP32[$3306>>2]|0;
      $3510 = $3509 ^ $3503;
      HEAP32[$3306>>2] = $3510;
      $3511 = HEAP32[$3311>>2]|0;
      $3512 = $3511 ^ $3506;
      HEAP32[$3311>>2] = $3512;
     }
    } while(0);
    $3696 = $3335 | $3332;
    $3697 = $3696 | $3338;
    $3698 = ($3697|0)==(0);
    if ($3698) {
     label = 291;
     break;
    } else {
     $bb$sroa$0$11271 = $3332;$bb$sroa$1$11272 = $3335;$bb$sroa$2$11273 = $3338;
    }
   }
   if ((label|0) == 274) {
    $3430 = HEAP32[$3356>>2]|0;
    $3431 = HEAP32[$3319>>2]|0;
    $3432 = $3431 ^ $3430;
    HEAP32[$3319>>2] = $3432;
    $3433 = HEAP32[$3360>>2]|0;
    $3434 = HEAP32[$3320>>2]|0;
    $3435 = $3434 ^ $3433;
    HEAP32[$3320>>2] = $3435;
    $3436 = HEAP32[$3364>>2]|0;
    $3437 = HEAP32[$3321>>2]|0;
    $3438 = $3437 ^ $3436;
    HEAP32[$3321>>2] = $3438;
    $3439 = HEAP32[$3368>>2]|0;
    $3440 = HEAP32[$3322>>2]|0;
    $3441 = $3440 ^ $3439;
    HEAP32[$3322>>2] = $3441;
    $3442 = HEAP32[$3372>>2]|0;
    $3443 = HEAP32[$3323>>2]|0;
    $3444 = $3443 ^ $3442;
    HEAP32[$3323>>2] = $3444;
    $3445 = HEAP32[$3376>>2]|0;
    $3446 = HEAP32[$3324>>2]|0;
    $3447 = $3446 ^ $3445;
    HEAP32[$3324>>2] = $3447;
    $3448 = HEAP32[$3380>>2]|0;
    $3449 = HEAP32[$3325>>2]|0;
    $3450 = $3449 ^ $3448;
    HEAP32[$3325>>2] = $3450;
    $3451 = HEAP32[$3384>>2]|0;
    $3452 = HEAP32[$3326>>2]|0;
    $3453 = $3452 ^ $3451;
    HEAP32[$3326>>2] = $3453;
    $3454 = HEAP32[$3388>>2]|0;
    $3455 = HEAP32[$3327>>2]|0;
    $3456 = $3455 ^ $3454;
    HEAP32[$3327>>2] = $3456;
    $3457 = HEAP32[$3333>>2]|0;
    $3458 = HEAP32[$7>>2]|0;
    $3459 = $3458 ^ $3457;
    HEAP32[$7>>2] = $3459;
    $3460 = HEAP32[$3336>>2]|0;
    $3461 = HEAP32[$12>>2]|0;
    $3462 = $3461 ^ $3460;
    HEAP32[$12>>2] = $3462;
    $3463 = HEAP32[$3306>>2]|0;
    $3464 = $3463 ^ $3457;
    HEAP32[$3306>>2] = $3464;
    $3465 = HEAP32[$3311>>2]|0;
    $3466 = $3465 ^ $3460;
    HEAP32[$3311>>2] = $3466;
    $3467 = $3329 << 7;
    $3468 = ((($ptree) + ($3392)|0) + 512|0);
    $3469 = HEAP8[$3468>>0]|0;
    $3470 = $3469 << 24 >> 24;
    $3471 = $3470 << 19;
    $3472 = $3467 | $3392;
    $3473 = $3472 | $3471;
    $3474 = $3473 | 114688;
    $$0 = $3474;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 287) {
    $3611 = HEAP32[$3539>>2]|0;
    $3612 = HEAP32[$3319>>2]|0;
    $3613 = $3612 ^ $3611;
    HEAP32[$3319>>2] = $3613;
    $3614 = HEAP32[$3543>>2]|0;
    $3615 = HEAP32[$3320>>2]|0;
    $3616 = $3615 ^ $3614;
    HEAP32[$3320>>2] = $3616;
    $3617 = HEAP32[$3547>>2]|0;
    $3618 = HEAP32[$3321>>2]|0;
    $3619 = $3618 ^ $3617;
    HEAP32[$3321>>2] = $3619;
    $3620 = HEAP32[$3551>>2]|0;
    $3621 = HEAP32[$3322>>2]|0;
    $3622 = $3621 ^ $3620;
    HEAP32[$3322>>2] = $3622;
    $3623 = HEAP32[$3555>>2]|0;
    $3624 = HEAP32[$3323>>2]|0;
    $3625 = $3624 ^ $3623;
    HEAP32[$3323>>2] = $3625;
    $3626 = HEAP32[$3559>>2]|0;
    $3627 = HEAP32[$3324>>2]|0;
    $3628 = $3627 ^ $3626;
    HEAP32[$3324>>2] = $3628;
    $3629 = HEAP32[$3563>>2]|0;
    $3630 = HEAP32[$3325>>2]|0;
    $3631 = $3630 ^ $3629;
    HEAP32[$3325>>2] = $3631;
    $3632 = HEAP32[$3567>>2]|0;
    $3633 = HEAP32[$3326>>2]|0;
    $3634 = $3633 ^ $3632;
    HEAP32[$3326>>2] = $3634;
    $3635 = HEAP32[$3571>>2]|0;
    $3636 = HEAP32[$3327>>2]|0;
    $3637 = $3636 ^ $3635;
    HEAP32[$3327>>2] = $3637;
    $3638 = HEAP32[$3330>>2]|0;
    $3639 = HEAP32[$2>>2]|0;
    $3640 = $3639 ^ $3638;
    HEAP32[$2>>2] = $3640;
    $3641 = HEAP32[$3333>>2]|0;
    $3642 = HEAP32[$7>>2]|0;
    $3643 = $3642 ^ $3641;
    HEAP32[$7>>2] = $3643;
    $3644 = HEAP32[$3299>>2]|0;
    $3645 = $3644 ^ $3638;
    HEAP32[$3299>>2] = $3645;
    $3646 = HEAP32[$3306>>2]|0;
    $3647 = $3646 ^ $3641;
    HEAP32[$3306>>2] = $3647;
    $3648 = $3329 << 7;
    $3649 = ((($ptree) + ($3575)|0) + 512|0);
    $3650 = HEAP8[$3649>>0]|0;
    $3651 = $3650 << 24 >> 24;
    $3652 = $3651 << 19;
    $3653 = $3648 | $3575;
    $3654 = $3653 | $3652;
    $3655 = $3654 | 98304;
    $$0 = $3655;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 291) {
    $$pre990 = HEAP8[$$pre1002>>0]|0;
    $3702 = $$pre990;
    break;
   }
  }
 } while(0);
 $3699 = (($ptree) + 200|0);
 $3700 = HEAP32[$3699>>2]|0;
 $3701 = $3702&255;
 $3703 = ((221106432 + (($3701*48)|0)|0) + 36|0);
 $3704 = HEAP32[$3703>>2]|0;
 $3705 = $3704 & $3700;
 $3706 = (($ptree) + 204|0);
 $3707 = HEAP32[$3706>>2]|0;
 $3708 = ((221106432 + (($3701*48)|0)|0) + 40|0);
 $3709 = HEAP32[$3708>>2]|0;
 $3710 = $3709 & $3707;
 $3711 = (($ptree) + 208|0);
 $3712 = HEAP32[$3711>>2]|0;
 $3713 = ((221106432 + (($3701*48)|0)|0) + 44|0);
 $3714 = HEAP32[$3713>>2]|0;
 $3715 = $3714 & $3712;
 $3716 = $3710 | $3705;
 $3717 = $3716 | $3715;
 $3718 = ($3717|0)==(0);
 do {
  if ($3718) {
   $4060 = $3702;
  } else {
   $3719 = (($ptree) + 32|0);
   $3720 = (($ptree) + 36|0);
   $3721 = (($ptree) + 40|0);
   $3722 = (($ptree) + 44|0);
   $3723 = (($ptree) + 48|0);
   $3724 = (($ptree) + 52|0);
   $3725 = (($ptree) + 56|0);
   $3726 = (($ptree) + 60|0);
   $3727 = (($ptree) + 64|0);
   $3728 = (($ptree) + 594|0);
   $bb$sroa$0$12216 = $3705;$bb$sroa$1$12217 = $3710;$bb$sroa$2$12218 = $3715;
   L436: while(1) {
    $3729 = (_last_one210($bb$sroa$2$12218,$bb$sroa$1$12217,$bb$sroa$0$12216)|0);
    $3730 = (34156304 + (($3729*12)|0)|0);
    $3731 = HEAP32[$3730>>2]|0;
    $3732 = $3731 ^ $bb$sroa$0$12216;
    $3733 = ((34156304 + (($3729*12)|0)|0) + 4|0);
    $3734 = HEAP32[$3733>>2]|0;
    $3735 = $3734 ^ $bb$sroa$1$12217;
    $3736 = ((34156304 + (($3729*12)|0)|0) + 8|0);
    $3737 = HEAP32[$3736>>2]|0;
    $3738 = $3737 ^ $bb$sroa$2$12218;
    $3739 = ((33572424 + ($3729<<3)|0) + 2|0);
    $3740 = HEAP8[$3739>>0]|0;
    $3741 = $3740&255;
    $3742 = ((($ptree) + ($3741<<2)|0) + 32|0);
    $3743 = HEAP32[$3742>>2]|0;
    $3744 = ((33572424 + ($3729<<3)|0) + 3|0);
    $3745 = HEAP8[$3744>>0]|0;
    $3746 = $3745&255;
    $3747 = $3743 >>> $3746;
    $3748 = $3747 & 127;
    $3749 = ((33953152 + (($3729*1536)|0)|0) + (($3748*12)|0)|0);
    $3750 = HEAP32[$3749>>2]|0;
    $3751 = (((33953152 + (($3729*1536)|0)|0) + (($3748*12)|0)|0) + 4|0);
    $3752 = HEAP32[$3751>>2]|0;
    $3753 = (((33953152 + (($3729*1536)|0)|0) + (($3748*12)|0)|0) + 8|0);
    $3754 = HEAP32[$3753>>2]|0;
    $3755 = (34160208 + (($3729*12)|0)|0);
    $3756 = HEAP32[$3755>>2]|0;
    $3757 = ((34160208 + (($3729*12)|0)|0) + 4|0);
    $3758 = HEAP32[$3757>>2]|0;
    $3759 = ((34160208 + (($3729*12)|0)|0) + 8|0);
    $3760 = HEAP32[$3759>>2]|0;
    $3761 = $3754 & $366;
    $3762 = $3761 & $3760;
    $3763 = HEAP8[$$pre1002>>0]|0;
    $3764 = $3763&255;
    $3765 = (($3764) + -9)|0;
    $3766 = (34156304 + (($3765*12)|0)|0);
    $3767 = HEAP32[$3766>>2]|0;
    $3768 = $3750 & $362;
    $3769 = $3768 & $3756;
    $3770 = $3769 & $3767;
    $3771 = ((34156304 + (($3765*12)|0)|0) + 4|0);
    $3772 = HEAP32[$3771>>2]|0;
    $3773 = $3752 & $364;
    $3774 = $3773 & $3758;
    $3775 = $3774 & $3772;
    $3776 = ((34156304 + (($3765*12)|0)|0) + 8|0);
    $3777 = HEAP32[$3776>>2]|0;
    $3778 = $3777 & $3762;
    $3779 = ((33575024 + (($3764*12)|0)|0) + 8|0);
    $3780 = HEAP32[$3779>>2]|0;
    $3781 = $3780 & $3762;
    $3782 = $3775 | $3770;
    $3783 = $3782 | $3778;
    $3784 = $3783 | $3781;
    $3785 = ($3784|0)==(0);
    if (!($3785)) {
     $3786 = HEAP32[$3699>>2]|0;
     $3787 = $3786 ^ $3731;
     HEAP32[$3699>>2] = $3787;
     $3788 = HEAP32[$3706>>2]|0;
     $3789 = $3788 ^ $3734;
     HEAP32[$3706>>2] = $3789;
     $3790 = HEAP32[$3711>>2]|0;
     $3791 = $3790 ^ $3737;
     HEAP32[$3711>>2] = $3791;
     $3792 = HEAP32[$2>>2]|0;
     $3793 = $3792 ^ $3731;
     HEAP32[$2>>2] = $3793;
     $3794 = HEAP32[$7>>2]|0;
     $3795 = $3794 ^ $3734;
     HEAP32[$7>>2] = $3795;
     $3796 = HEAP32[$12>>2]|0;
     $3797 = $3796 ^ $3737;
     HEAP32[$12>>2] = $3797;
     $3798 = (34157280 + (($3729*12)|0)|0);
     $3799 = HEAP32[$3798>>2]|0;
     $3800 = HEAP32[$3719>>2]|0;
     $3801 = $3800 ^ $3799;
     HEAP32[$3719>>2] = $3801;
     $3802 = ((34157280 + (($3729*12)|0)|0) + 4|0);
     $3803 = HEAP32[$3802>>2]|0;
     $3804 = HEAP32[$3720>>2]|0;
     $3805 = $3804 ^ $3803;
     HEAP32[$3720>>2] = $3805;
     $3806 = ((34157280 + (($3729*12)|0)|0) + 8|0);
     $3807 = HEAP32[$3806>>2]|0;
     $3808 = HEAP32[$3721>>2]|0;
     $3809 = $3808 ^ $3807;
     HEAP32[$3721>>2] = $3809;
     $3810 = (34158256 + (($3729*12)|0)|0);
     $3811 = HEAP32[$3810>>2]|0;
     $3812 = HEAP32[$3722>>2]|0;
     $3813 = $3812 ^ $3811;
     HEAP32[$3722>>2] = $3813;
     $3814 = ((34158256 + (($3729*12)|0)|0) + 4|0);
     $3815 = HEAP32[$3814>>2]|0;
     $3816 = HEAP32[$3723>>2]|0;
     $3817 = $3816 ^ $3815;
     HEAP32[$3723>>2] = $3817;
     $3818 = ((34158256 + (($3729*12)|0)|0) + 8|0);
     $3819 = HEAP32[$3818>>2]|0;
     $3820 = HEAP32[$3724>>2]|0;
     $3821 = $3820 ^ $3819;
     HEAP32[$3724>>2] = $3821;
     $3822 = (34159232 + (($3729*12)|0)|0);
     $3823 = HEAP32[$3822>>2]|0;
     $3824 = HEAP32[$3725>>2]|0;
     $3825 = $3824 ^ $3823;
     HEAP32[$3725>>2] = $3825;
     $3826 = ((34159232 + (($3729*12)|0)|0) + 4|0);
     $3827 = HEAP32[$3826>>2]|0;
     $3828 = HEAP32[$3726>>2]|0;
     $3829 = $3828 ^ $3827;
     HEAP32[$3726>>2] = $3829;
     $3830 = ((34159232 + (($3729*12)|0)|0) + 8|0);
     $3831 = HEAP32[$3830>>2]|0;
     $3832 = HEAP32[$3727>>2]|0;
     $3833 = $3832 ^ $3831;
     HEAP32[$3727>>2] = $3833;
     $3834 = $3778 & 133955584;
     $3835 = $3782 | $3834;
     $3836 = ($3835|0)==(0);
     do {
      if (!($3836)) {
       $3837 = (_is_black_attacked($ptree,$3765)|0);
       $3838 = ($3837|0)==(0);
       if ($3838) {
        break;
       }
       $3840 = (33953152 + (($3765*1536)|0)|0);
       $3841 = HEAP32[$3840>>2]|0;
       $3842 = ((33953152 + (($3765*1536)|0)|0) + 4|0);
       $3843 = HEAP32[$3842>>2]|0;
       $3844 = ((33953152 + (($3765*1536)|0)|0) + 8|0);
       $3845 = HEAP32[$3844>>2]|0;
       $3846 = (_can_b_king_escape($ptree,$3765,$3841,$3843,$3845)|0);
       $3847 = ($3846|0)==(0);
       if (!($3847)) {
        break;
       }
       $3848 = HEAP8[$$pre1002>>0]|0;
       $3849 = $3848&255;
       $3850 = ((220518304 + (($3849*81)|0)|0) + ($3729)|0);
       $3851 = HEAP8[$3850>>0]|0;
       $3852 = $3851&255;
       $3853 = ($3851<<24>>24)==(0);
       do {
        if ($3853) {
         label = 302;
        } else {
         $3854 = ((220518304 + (($3849*81)|0)|0) + ($3765)|0);
         $3855 = HEAP8[$3854>>0]|0;
         $3856 = ($3851<<24>>24)==($3855<<24>>24);
         if ($3856) {
          label = 302;
          break;
         }
         $3857 = (_is_pinned_on_black_king($ptree,$3729,$3852)|0);
         $3858 = ($3857|0)==(0);
         if ($3858) {
          label = 302;
         }
        }
       } while(0);
       if ((label|0) == 302) {
        label = 0;
        $3859 = (_can_b_piece_capture($ptree,$3765)|0);
        $3860 = ($3859|0)==(0);
        if (!($3860)) {
         break;
        }
       }
       $3861 = HEAP8[$3728>>0]|0;
       $3862 = $3861&255;
       $3863 = ((220518304 + (($3862*81)|0)|0) + ($3729)|0);
       $3864 = HEAP8[$3863>>0]|0;
       $3865 = $3864&255;
       $3866 = ($3864<<24>>24)==(0);
       if ($3866) {
        label = 306;
        break L436;
       }
       $3867 = ((220518304 + (($3862*81)|0)|0) + ($3765)|0);
       $3868 = HEAP8[$3867>>0]|0;
       $3869 = ($3864<<24>>24)==($3868<<24>>24);
       if ($3869) {
        label = 306;
        break L436;
       }
       $3870 = (_is_pinned_on_white_king($ptree,$3729,$3865)|0);
       $3871 = ($3870|0)==(0);
       if ($3871) {
        label = 306;
        break L436;
       }
      }
     } while(0);
     $3839 = ($3781|0)==(0);
     if (!($3839)) {
      $bb_check_pro$sroa$1$2167 = $3781;
      while(1) {
       $3922 = (_first_one2($bb_check_pro$sroa$1$2167)|0);
       $3923 = ((34156304 + (($3922*12)|0)|0) + 8|0);
       $3924 = HEAP32[$3923>>2]|0;
       $3925 = $3924 ^ $bb_check_pro$sroa$1$2167;
       $3926 = (_is_black_attacked($ptree,$3922)|0);
       $3927 = ($3926|0)==(0);
       do {
        if (!($3927)) {
         $3929 = (33577952 + (($3922*12)|0)|0);
         $3930 = HEAP32[$3929>>2]|0;
         $3931 = ((33577952 + (($3922*12)|0)|0) + 4|0);
         $3932 = HEAP32[$3931>>2]|0;
         $3933 = ((33577952 + (($3922*12)|0)|0) + 8|0);
         $3934 = HEAP32[$3933>>2]|0;
         $3935 = (_can_b_king_escape($ptree,$3922,$3930,$3932,$3934)|0);
         $3936 = ($3935|0)==(0);
         if (!($3936)) {
          break;
         }
         $3937 = HEAP8[$$pre1002>>0]|0;
         $3938 = $3937&255;
         $3939 = ((220518304 + (($3938*81)|0)|0) + ($3729)|0);
         $3940 = HEAP8[$3939>>0]|0;
         $3941 = $3940&255;
         $3942 = ($3940<<24>>24)==(0);
         do {
          if ($3942) {
           label = 313;
          } else {
           $3943 = ((220518304 + (($3938*81)|0)|0) + ($3922)|0);
           $3944 = HEAP8[$3943>>0]|0;
           $3945 = ($3940<<24>>24)==($3944<<24>>24);
           if ($3945) {
            label = 313;
            break;
           }
           $3946 = (_is_pinned_on_black_king($ptree,$3729,$3941)|0);
           $3947 = ($3946|0)==(0);
           if ($3947) {
            label = 313;
           }
          }
         } while(0);
         if ((label|0) == 313) {
          label = 0;
          $3948 = (_can_b_piece_capture($ptree,$3922)|0);
          $3949 = ($3948|0)==(0);
          if (!($3949)) {
           break;
          }
         }
         $3950 = HEAP8[$3728>>0]|0;
         $3951 = $3950&255;
         $3952 = ((220518304 + (($3951*81)|0)|0) + ($3729)|0);
         $3953 = HEAP8[$3952>>0]|0;
         $3954 = $3953&255;
         $3955 = ($3953<<24>>24)==(0);
         if ($3955) {
          label = 317;
          break L436;
         }
         $3956 = ((220518304 + (($3951*81)|0)|0) + ($3922)|0);
         $3957 = HEAP8[$3956>>0]|0;
         $3958 = ($3953<<24>>24)==($3957<<24>>24);
         if ($3958) {
          label = 317;
          break L436;
         }
         $3959 = (_is_pinned_on_white_king($ptree,$3729,$3954)|0);
         $3960 = ($3959|0)==(0);
         if ($3960) {
          label = 317;
          break L436;
         }
        }
       } while(0);
       $3928 = ($3924|0)==($bb_check_pro$sroa$1$2167|0);
       if ($3928) {
        break;
       } else {
        $bb_check_pro$sroa$1$2167 = $3925;
       }
      }
     }
     $4011 = HEAP32[$3798>>2]|0;
     $4012 = HEAP32[$3719>>2]|0;
     $4013 = $4012 ^ $4011;
     HEAP32[$3719>>2] = $4013;
     $4014 = HEAP32[$3802>>2]|0;
     $4015 = HEAP32[$3720>>2]|0;
     $4016 = $4015 ^ $4014;
     HEAP32[$3720>>2] = $4016;
     $4017 = HEAP32[$3806>>2]|0;
     $4018 = HEAP32[$3721>>2]|0;
     $4019 = $4018 ^ $4017;
     HEAP32[$3721>>2] = $4019;
     $4020 = HEAP32[$3810>>2]|0;
     $4021 = HEAP32[$3722>>2]|0;
     $4022 = $4021 ^ $4020;
     HEAP32[$3722>>2] = $4022;
     $4023 = HEAP32[$3814>>2]|0;
     $4024 = HEAP32[$3723>>2]|0;
     $4025 = $4024 ^ $4023;
     HEAP32[$3723>>2] = $4025;
     $4026 = HEAP32[$3818>>2]|0;
     $4027 = HEAP32[$3724>>2]|0;
     $4028 = $4027 ^ $4026;
     HEAP32[$3724>>2] = $4028;
     $4029 = HEAP32[$3822>>2]|0;
     $4030 = HEAP32[$3725>>2]|0;
     $4031 = $4030 ^ $4029;
     HEAP32[$3725>>2] = $4031;
     $4032 = HEAP32[$3826>>2]|0;
     $4033 = HEAP32[$3726>>2]|0;
     $4034 = $4033 ^ $4032;
     HEAP32[$3726>>2] = $4034;
     $4035 = HEAP32[$3830>>2]|0;
     $4036 = HEAP32[$3727>>2]|0;
     $4037 = $4036 ^ $4035;
     HEAP32[$3727>>2] = $4037;
     $4038 = HEAP32[$3730>>2]|0;
     $4039 = HEAP32[$2>>2]|0;
     $4040 = $4039 ^ $4038;
     HEAP32[$2>>2] = $4040;
     $4041 = HEAP32[$3733>>2]|0;
     $4042 = HEAP32[$7>>2]|0;
     $4043 = $4042 ^ $4041;
     HEAP32[$7>>2] = $4043;
     $4044 = HEAP32[$3736>>2]|0;
     $4045 = HEAP32[$12>>2]|0;
     $4046 = $4045 ^ $4044;
     HEAP32[$12>>2] = $4046;
     $4047 = HEAP32[$3699>>2]|0;
     $4048 = $4047 ^ $4038;
     HEAP32[$3699>>2] = $4048;
     $4049 = HEAP32[$3706>>2]|0;
     $4050 = $4049 ^ $4041;
     HEAP32[$3706>>2] = $4050;
     $4051 = HEAP32[$3711>>2]|0;
     $4052 = $4051 ^ $4044;
     HEAP32[$3711>>2] = $4052;
    }
    $4053 = $3735 | $3732;
    $4054 = $4053 | $3738;
    $4055 = ($4054|0)==(0);
    if ($4055) {
     label = 320;
     break;
    } else {
     $bb$sroa$0$12216 = $3732;$bb$sroa$1$12217 = $3735;$bb$sroa$2$12218 = $3738;
    }
   }
   if ((label|0) == 306) {
    $3872 = HEAP32[$3798>>2]|0;
    $3873 = HEAP32[$3719>>2]|0;
    $3874 = $3873 ^ $3872;
    HEAP32[$3719>>2] = $3874;
    $3875 = HEAP32[$3802>>2]|0;
    $3876 = HEAP32[$3720>>2]|0;
    $3877 = $3876 ^ $3875;
    HEAP32[$3720>>2] = $3877;
    $3878 = HEAP32[$3806>>2]|0;
    $3879 = HEAP32[$3721>>2]|0;
    $3880 = $3879 ^ $3878;
    HEAP32[$3721>>2] = $3880;
    $3881 = HEAP32[$3810>>2]|0;
    $3882 = HEAP32[$3722>>2]|0;
    $3883 = $3882 ^ $3881;
    HEAP32[$3722>>2] = $3883;
    $3884 = HEAP32[$3814>>2]|0;
    $3885 = HEAP32[$3723>>2]|0;
    $3886 = $3885 ^ $3884;
    HEAP32[$3723>>2] = $3886;
    $3887 = HEAP32[$3818>>2]|0;
    $3888 = HEAP32[$3724>>2]|0;
    $3889 = $3888 ^ $3887;
    HEAP32[$3724>>2] = $3889;
    $3890 = HEAP32[$3822>>2]|0;
    $3891 = HEAP32[$3725>>2]|0;
    $3892 = $3891 ^ $3890;
    HEAP32[$3725>>2] = $3892;
    $3893 = HEAP32[$3826>>2]|0;
    $3894 = HEAP32[$3726>>2]|0;
    $3895 = $3894 ^ $3893;
    HEAP32[$3726>>2] = $3895;
    $3896 = HEAP32[$3830>>2]|0;
    $3897 = HEAP32[$3727>>2]|0;
    $3898 = $3897 ^ $3896;
    HEAP32[$3727>>2] = $3898;
    $3899 = HEAP32[$3730>>2]|0;
    $3900 = HEAP32[$2>>2]|0;
    $3901 = $3900 ^ $3899;
    HEAP32[$2>>2] = $3901;
    $3902 = HEAP32[$3733>>2]|0;
    $3903 = HEAP32[$7>>2]|0;
    $3904 = $3903 ^ $3902;
    HEAP32[$7>>2] = $3904;
    $3905 = HEAP32[$3736>>2]|0;
    $3906 = HEAP32[$12>>2]|0;
    $3907 = $3906 ^ $3905;
    HEAP32[$12>>2] = $3907;
    $3908 = HEAP32[$3699>>2]|0;
    $3909 = $3908 ^ $3899;
    HEAP32[$3699>>2] = $3909;
    $3910 = HEAP32[$3706>>2]|0;
    $3911 = $3910 ^ $3902;
    HEAP32[$3706>>2] = $3911;
    $3912 = HEAP32[$3711>>2]|0;
    $3913 = $3912 ^ $3905;
    HEAP32[$3711>>2] = $3913;
    $3914 = $3729 << 7;
    $3915 = ((($ptree) + ($3765)|0) + 512|0);
    $3916 = HEAP8[$3915>>0]|0;
    $3917 = $3916 << 24 >> 24;
    $3918 = $3917 << 19;
    $3919 = $3914 | $3765;
    $3920 = $3919 | $3918;
    $3921 = $3920 | 65536;
    $$0 = $3921;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 317) {
    $3961 = HEAP32[$3798>>2]|0;
    $3962 = HEAP32[$3719>>2]|0;
    $3963 = $3962 ^ $3961;
    HEAP32[$3719>>2] = $3963;
    $3964 = HEAP32[$3802>>2]|0;
    $3965 = HEAP32[$3720>>2]|0;
    $3966 = $3965 ^ $3964;
    HEAP32[$3720>>2] = $3966;
    $3967 = HEAP32[$3806>>2]|0;
    $3968 = HEAP32[$3721>>2]|0;
    $3969 = $3968 ^ $3967;
    HEAP32[$3721>>2] = $3969;
    $3970 = HEAP32[$3810>>2]|0;
    $3971 = HEAP32[$3722>>2]|0;
    $3972 = $3971 ^ $3970;
    HEAP32[$3722>>2] = $3972;
    $3973 = HEAP32[$3814>>2]|0;
    $3974 = HEAP32[$3723>>2]|0;
    $3975 = $3974 ^ $3973;
    HEAP32[$3723>>2] = $3975;
    $3976 = HEAP32[$3818>>2]|0;
    $3977 = HEAP32[$3724>>2]|0;
    $3978 = $3977 ^ $3976;
    HEAP32[$3724>>2] = $3978;
    $3979 = HEAP32[$3822>>2]|0;
    $3980 = HEAP32[$3725>>2]|0;
    $3981 = $3980 ^ $3979;
    HEAP32[$3725>>2] = $3981;
    $3982 = HEAP32[$3826>>2]|0;
    $3983 = HEAP32[$3726>>2]|0;
    $3984 = $3983 ^ $3982;
    HEAP32[$3726>>2] = $3984;
    $3985 = HEAP32[$3830>>2]|0;
    $3986 = HEAP32[$3727>>2]|0;
    $3987 = $3986 ^ $3985;
    HEAP32[$3727>>2] = $3987;
    $3988 = HEAP32[$3730>>2]|0;
    $3989 = HEAP32[$2>>2]|0;
    $3990 = $3989 ^ $3988;
    HEAP32[$2>>2] = $3990;
    $3991 = HEAP32[$3733>>2]|0;
    $3992 = HEAP32[$7>>2]|0;
    $3993 = $3992 ^ $3991;
    HEAP32[$7>>2] = $3993;
    $3994 = HEAP32[$3736>>2]|0;
    $3995 = HEAP32[$12>>2]|0;
    $3996 = $3995 ^ $3994;
    HEAP32[$12>>2] = $3996;
    $3997 = HEAP32[$3699>>2]|0;
    $3998 = $3997 ^ $3988;
    HEAP32[$3699>>2] = $3998;
    $3999 = HEAP32[$3706>>2]|0;
    $4000 = $3999 ^ $3991;
    HEAP32[$3706>>2] = $4000;
    $4001 = HEAP32[$3711>>2]|0;
    $4002 = $4001 ^ $3994;
    HEAP32[$3711>>2] = $4002;
    $4003 = $3729 << 7;
    $4004 = ((($ptree) + ($3922)|0) + 512|0);
    $4005 = HEAP8[$4004>>0]|0;
    $4006 = $4005 << 24 >> 24;
    $4007 = $4006 << 19;
    $4008 = $4003 | $3922;
    $4009 = $4008 | $4007;
    $4010 = $4009 | 81920;
    $$0 = $4010;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 320) {
    $$pre991 = HEAP8[$$pre1002>>0]|0;
    $4060 = $$pre991;
    break;
   }
  }
 } while(0);
 $4056 = (($ptree) + 184|0);
 $4057 = HEAP32[$4056>>2]|0;
 $4058 = $4057 & $366;
 $4059 = $4060&255;
 $4061 = ((33575024 + (($4059*12)|0)|0) + 8|0);
 $4062 = HEAP32[$4061>>2]|0;
 $4063 = $4058 & $4062;
 $4064 = ($4063|0)==(0);
 do {
  if ($4064) {
   $4253 = $4060;
  } else {
   $4065 = (($ptree) + 180|0);
   $4066 = (($ptree) + 32|0);
   $4067 = (($ptree) + 36|0);
   $4068 = (($ptree) + 40|0);
   $4069 = (($ptree) + 44|0);
   $4070 = (($ptree) + 48|0);
   $4071 = (($ptree) + 52|0);
   $4072 = (($ptree) + 56|0);
   $4073 = (($ptree) + 60|0);
   $4074 = (($ptree) + 64|0);
   $4075 = (($ptree) + 594|0);
   $bb_check$sroa$2$11165 = $4063;
   L479: while(1) {
    $4076 = (_first_one2($bb_check$sroa$2$11165)|0);
    $4077 = (($4076) + -9)|0;
    $4078 = ((34156304 + (($4076*12)|0)|0) + 8|0);
    $4079 = HEAP32[$4078>>2]|0;
    $4080 = $4079 ^ $bb_check$sroa$2$11165;
    $4081 = ((34156304 + (($4076*12)|0)|0) + 4|0);
    $4082 = HEAP32[$4081>>2]|0;
    $4083 = HEAP32[$4065>>2]|0;
    $4084 = $4083 ^ $4082;
    HEAP32[$4065>>2] = $4084;
    $4085 = HEAP32[$4056>>2]|0;
    $4086 = $4085 ^ $4079;
    HEAP32[$4056>>2] = $4086;
    $4087 = ((34156304 + (($4077*12)|0)|0) + 4|0);
    $4088 = HEAP32[$4087>>2]|0;
    $4089 = HEAP32[$7>>2]|0;
    $4090 = $4089 ^ $4088;
    HEAP32[$7>>2] = $4090;
    $4091 = ((34156304 + (($4077*12)|0)|0) + 8|0);
    $4092 = HEAP32[$4091>>2]|0;
    $4093 = HEAP32[$12>>2]|0;
    $4094 = $4093 ^ $4092;
    HEAP32[$12>>2] = $4094;
    $4095 = (34157280 + (($4077*12)|0)|0);
    $4096 = HEAP32[$4095>>2]|0;
    $4097 = HEAP32[$4066>>2]|0;
    $4098 = $4097 ^ $4096;
    HEAP32[$4066>>2] = $4098;
    $4099 = ((34157280 + (($4077*12)|0)|0) + 4|0);
    $4100 = HEAP32[$4099>>2]|0;
    $4101 = HEAP32[$4067>>2]|0;
    $4102 = $4101 ^ $4100;
    HEAP32[$4067>>2] = $4102;
    $4103 = ((34157280 + (($4077*12)|0)|0) + 8|0);
    $4104 = HEAP32[$4103>>2]|0;
    $4105 = HEAP32[$4068>>2]|0;
    $4106 = $4105 ^ $4104;
    HEAP32[$4068>>2] = $4106;
    $4107 = (34158256 + (($4077*12)|0)|0);
    $4108 = HEAP32[$4107>>2]|0;
    $4109 = HEAP32[$4069>>2]|0;
    $4110 = $4109 ^ $4108;
    HEAP32[$4069>>2] = $4110;
    $4111 = ((34158256 + (($4077*12)|0)|0) + 4|0);
    $4112 = HEAP32[$4111>>2]|0;
    $4113 = HEAP32[$4070>>2]|0;
    $4114 = $4113 ^ $4112;
    HEAP32[$4070>>2] = $4114;
    $4115 = ((34158256 + (($4077*12)|0)|0) + 8|0);
    $4116 = HEAP32[$4115>>2]|0;
    $4117 = HEAP32[$4071>>2]|0;
    $4118 = $4117 ^ $4116;
    HEAP32[$4071>>2] = $4118;
    $4119 = (34159232 + (($4077*12)|0)|0);
    $4120 = HEAP32[$4119>>2]|0;
    $4121 = HEAP32[$4072>>2]|0;
    $4122 = $4121 ^ $4120;
    HEAP32[$4072>>2] = $4122;
    $4123 = ((34159232 + (($4077*12)|0)|0) + 4|0);
    $4124 = HEAP32[$4123>>2]|0;
    $4125 = HEAP32[$4073>>2]|0;
    $4126 = $4125 ^ $4124;
    HEAP32[$4073>>2] = $4126;
    $4127 = ((34159232 + (($4077*12)|0)|0) + 8|0);
    $4128 = HEAP32[$4127>>2]|0;
    $4129 = HEAP32[$4074>>2]|0;
    $4130 = $4129 ^ $4128;
    HEAP32[$4074>>2] = $4130;
    $4131 = (_is_black_attacked($ptree,$4076)|0);
    $4132 = ($4131|0)==(0);
    do {
     if (!($4132)) {
      $4133 = (33577952 + (($4076*12)|0)|0);
      $4134 = HEAP32[$4133>>2]|0;
      $4135 = ((33577952 + (($4076*12)|0)|0) + 4|0);
      $4136 = HEAP32[$4135>>2]|0;
      $4137 = ((33577952 + (($4076*12)|0)|0) + 8|0);
      $4138 = HEAP32[$4137>>2]|0;
      $4139 = (_can_b_king_escape($ptree,$4076,$4134,$4136,$4138)|0);
      $4140 = ($4139|0)==(0);
      if (!($4140)) {
       break;
      }
      $4141 = HEAP8[$$pre1002>>0]|0;
      $4142 = $4141&255;
      $4143 = ((220518304 + (($4142*81)|0)|0) + ($4077)|0);
      $4144 = HEAP8[$4143>>0]|0;
      $4145 = $4144&255;
      $4146 = ($4144<<24>>24)==(0);
      do {
       if ($4146) {
        label = 328;
       } else {
        $4147 = ((220518304 + (($4142*81)|0)|0) + ($4076)|0);
        $4148 = HEAP8[$4147>>0]|0;
        $4149 = ($4144<<24>>24)==($4148<<24>>24);
        if ($4149) {
         label = 328;
         break;
        }
        $4150 = (_is_pinned_on_black_king($ptree,$4077,$4145)|0);
        $4151 = ($4150|0)==(0);
        if ($4151) {
         label = 328;
        }
       }
      } while(0);
      if ((label|0) == 328) {
       label = 0;
       $4152 = (_can_b_piece_capture($ptree,$4076)|0);
       $4153 = ($4152|0)==(0);
       if (!($4153)) {
        break;
       }
      }
      $4154 = HEAP8[$4075>>0]|0;
      $4155 = $4154&255;
      $4156 = ((220518304 + (($4155*81)|0)|0) + ($4077)|0);
      $4157 = HEAP8[$4156>>0]|0;
      $4158 = $4157&255;
      $4159 = ($4157<<24>>24)==(0);
      if ($4159) {
       break L479;
      }
      $4160 = ((220518304 + (($4155*81)|0)|0) + ($4076)|0);
      $4161 = HEAP8[$4160>>0]|0;
      $4162 = ($4157<<24>>24)==($4161<<24>>24);
      if ($4162) {
       break L479;
      }
      $4163 = (_is_pinned_on_white_king($ptree,$4077,$4158)|0);
      $4164 = ($4163|0)==(0);
      if ($4164) {
       break L479;
      }
     }
    } while(0);
    $4212 = HEAP32[$4095>>2]|0;
    $4213 = HEAP32[$4066>>2]|0;
    $4214 = $4213 ^ $4212;
    HEAP32[$4066>>2] = $4214;
    $4215 = HEAP32[$4099>>2]|0;
    $4216 = HEAP32[$4067>>2]|0;
    $4217 = $4216 ^ $4215;
    HEAP32[$4067>>2] = $4217;
    $4218 = HEAP32[$4103>>2]|0;
    $4219 = HEAP32[$4068>>2]|0;
    $4220 = $4219 ^ $4218;
    HEAP32[$4068>>2] = $4220;
    $4221 = HEAP32[$4107>>2]|0;
    $4222 = HEAP32[$4069>>2]|0;
    $4223 = $4222 ^ $4221;
    HEAP32[$4069>>2] = $4223;
    $4224 = HEAP32[$4111>>2]|0;
    $4225 = HEAP32[$4070>>2]|0;
    $4226 = $4225 ^ $4224;
    HEAP32[$4070>>2] = $4226;
    $4227 = HEAP32[$4115>>2]|0;
    $4228 = HEAP32[$4071>>2]|0;
    $4229 = $4228 ^ $4227;
    HEAP32[$4071>>2] = $4229;
    $4230 = HEAP32[$4119>>2]|0;
    $4231 = HEAP32[$4072>>2]|0;
    $4232 = $4231 ^ $4230;
    HEAP32[$4072>>2] = $4232;
    $4233 = HEAP32[$4123>>2]|0;
    $4234 = HEAP32[$4073>>2]|0;
    $4235 = $4234 ^ $4233;
    HEAP32[$4073>>2] = $4235;
    $4236 = HEAP32[$4127>>2]|0;
    $4237 = HEAP32[$4074>>2]|0;
    $4238 = $4237 ^ $4236;
    HEAP32[$4074>>2] = $4238;
    $4239 = HEAP32[$4087>>2]|0;
    $4240 = HEAP32[$7>>2]|0;
    $4241 = $4240 ^ $4239;
    HEAP32[$7>>2] = $4241;
    $4242 = HEAP32[$4091>>2]|0;
    $4243 = HEAP32[$12>>2]|0;
    $4244 = $4243 ^ $4242;
    HEAP32[$12>>2] = $4244;
    $4245 = HEAP32[$4081>>2]|0;
    $4246 = HEAP32[$4065>>2]|0;
    $4247 = $4246 ^ $4245;
    HEAP32[$4065>>2] = $4247;
    $4248 = HEAP32[$4078>>2]|0;
    $4249 = HEAP32[$4056>>2]|0;
    $4250 = $4249 ^ $4248;
    HEAP32[$4056>>2] = $4250;
    $4251 = ($4079|0)==($bb_check$sroa$2$11165|0);
    if ($4251) {
     label = 334;
     break;
    } else {
     $bb_check$sroa$2$11165 = $4080;
    }
   }
   if ((label|0) == 334) {
    $$pre992 = HEAP8[$$pre1002>>0]|0;
    $4253 = $$pre992;
    break;
   }
   $4165 = HEAP32[$4095>>2]|0;
   $4166 = HEAP32[$4066>>2]|0;
   $4167 = $4166 ^ $4165;
   HEAP32[$4066>>2] = $4167;
   $4168 = HEAP32[$4099>>2]|0;
   $4169 = HEAP32[$4067>>2]|0;
   $4170 = $4169 ^ $4168;
   HEAP32[$4067>>2] = $4170;
   $4171 = HEAP32[$4103>>2]|0;
   $4172 = HEAP32[$4068>>2]|0;
   $4173 = $4172 ^ $4171;
   HEAP32[$4068>>2] = $4173;
   $4174 = HEAP32[$4107>>2]|0;
   $4175 = HEAP32[$4069>>2]|0;
   $4176 = $4175 ^ $4174;
   HEAP32[$4069>>2] = $4176;
   $4177 = HEAP32[$4111>>2]|0;
   $4178 = HEAP32[$4070>>2]|0;
   $4179 = $4178 ^ $4177;
   HEAP32[$4070>>2] = $4179;
   $4180 = HEAP32[$4115>>2]|0;
   $4181 = HEAP32[$4071>>2]|0;
   $4182 = $4181 ^ $4180;
   HEAP32[$4071>>2] = $4182;
   $4183 = HEAP32[$4119>>2]|0;
   $4184 = HEAP32[$4072>>2]|0;
   $4185 = $4184 ^ $4183;
   HEAP32[$4072>>2] = $4185;
   $4186 = HEAP32[$4123>>2]|0;
   $4187 = HEAP32[$4073>>2]|0;
   $4188 = $4187 ^ $4186;
   HEAP32[$4073>>2] = $4188;
   $4189 = HEAP32[$4127>>2]|0;
   $4190 = HEAP32[$4074>>2]|0;
   $4191 = $4190 ^ $4189;
   HEAP32[$4074>>2] = $4191;
   $4192 = HEAP32[$4087>>2]|0;
   $4193 = HEAP32[$7>>2]|0;
   $4194 = $4193 ^ $4192;
   HEAP32[$7>>2] = $4194;
   $4195 = HEAP32[$4091>>2]|0;
   $4196 = HEAP32[$12>>2]|0;
   $4197 = $4196 ^ $4195;
   HEAP32[$12>>2] = $4197;
   $4198 = HEAP32[$4081>>2]|0;
   $4199 = HEAP32[$4065>>2]|0;
   $4200 = $4199 ^ $4198;
   HEAP32[$4065>>2] = $4200;
   $4201 = HEAP32[$4078>>2]|0;
   $4202 = HEAP32[$4056>>2]|0;
   $4203 = $4202 ^ $4201;
   HEAP32[$4056>>2] = $4203;
   $4204 = $4077 << 7;
   $4205 = ((($ptree) + ($4076)|0) + 512|0);
   $4206 = HEAP8[$4205>>0]|0;
   $4207 = $4206 << 24 >> 24;
   $4208 = $4207 << 19;
   $4209 = $4076 | $4204;
   $4210 = $4209 | $4208;
   $4211 = $4210 | 49152;
   $$0 = $4211;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $4252 = $4253&255;
 $$off = (($4253) + -18)<<24>>24;
 $4254 = ($$off&255)<(45);
 if (!($4254)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4255 = (($4252) + -9)|0;
 $4256 = (($4252) + -18)|0;
 $4257 = ((($ptree) + ($4256)|0) + 512|0);
 $4258 = HEAP8[$4257>>0]|0;
 $4259 = ($4258<<24>>24)==(-1);
 if (!($4259)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4260 = ((($ptree) + ($4255)|0) + 512|0);
 $4261 = HEAP8[$4260>>0]|0;
 $4262 = ($4261<<24>>24)>(-1);
 if (!($4262)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4263 = (34156304 + (($4255*12)|0)|0);
 $4264 = HEAP32[$4263>>2]|0;
 $4265 = (($ptree) + 176|0);
 $4266 = HEAP32[$4265>>2]|0;
 $4267 = $4266 ^ $4264;
 HEAP32[$4265>>2] = $4267;
 $4268 = ((34156304 + (($4255*12)|0)|0) + 4|0);
 $4269 = HEAP32[$4268>>2]|0;
 $4270 = (($ptree) + 180|0);
 $4271 = HEAP32[$4270>>2]|0;
 $4272 = $4271 ^ $4269;
 HEAP32[$4270>>2] = $4272;
 $4273 = (34156304 + (($4256*12)|0)|0);
 $4274 = HEAP32[$4273>>2]|0;
 $4275 = HEAP32[$2>>2]|0;
 $4276 = $4275 ^ $4274;
 HEAP32[$2>>2] = $4276;
 $4277 = ((34156304 + (($4256*12)|0)|0) + 4|0);
 $4278 = HEAP32[$4277>>2]|0;
 $4279 = HEAP32[$7>>2]|0;
 $4280 = $4279 ^ $4278;
 HEAP32[$7>>2] = $4280;
 $4281 = (34157280 + (($4256*12)|0)|0);
 $4282 = HEAP32[$4281>>2]|0;
 $4283 = (($ptree) + 32|0);
 $4284 = HEAP32[$4283>>2]|0;
 $4285 = $4284 ^ $4282;
 HEAP32[$4283>>2] = $4285;
 $4286 = ((34157280 + (($4256*12)|0)|0) + 4|0);
 $4287 = HEAP32[$4286>>2]|0;
 $4288 = (($ptree) + 36|0);
 $4289 = HEAP32[$4288>>2]|0;
 $4290 = $4289 ^ $4287;
 HEAP32[$4288>>2] = $4290;
 $4291 = ((34157280 + (($4256*12)|0)|0) + 8|0);
 $4292 = HEAP32[$4291>>2]|0;
 $4293 = (($ptree) + 40|0);
 $4294 = HEAP32[$4293>>2]|0;
 $4295 = $4294 ^ $4292;
 HEAP32[$4293>>2] = $4295;
 $4296 = (34158256 + (($4256*12)|0)|0);
 $4297 = HEAP32[$4296>>2]|0;
 $4298 = (($ptree) + 44|0);
 $4299 = HEAP32[$4298>>2]|0;
 $4300 = $4299 ^ $4297;
 HEAP32[$4298>>2] = $4300;
 $4301 = ((34158256 + (($4256*12)|0)|0) + 4|0);
 $4302 = HEAP32[$4301>>2]|0;
 $4303 = (($ptree) + 48|0);
 $4304 = HEAP32[$4303>>2]|0;
 $4305 = $4304 ^ $4302;
 HEAP32[$4303>>2] = $4305;
 $4306 = ((34158256 + (($4256*12)|0)|0) + 8|0);
 $4307 = HEAP32[$4306>>2]|0;
 $4308 = (($ptree) + 52|0);
 $4309 = HEAP32[$4308>>2]|0;
 $4310 = $4309 ^ $4307;
 HEAP32[$4308>>2] = $4310;
 $4311 = (34159232 + (($4256*12)|0)|0);
 $4312 = HEAP32[$4311>>2]|0;
 $4313 = (($ptree) + 56|0);
 $4314 = HEAP32[$4313>>2]|0;
 $4315 = $4314 ^ $4312;
 HEAP32[$4313>>2] = $4315;
 $4316 = ((34159232 + (($4256*12)|0)|0) + 4|0);
 $4317 = HEAP32[$4316>>2]|0;
 $4318 = (($ptree) + 60|0);
 $4319 = HEAP32[$4318>>2]|0;
 $4320 = $4319 ^ $4317;
 HEAP32[$4318>>2] = $4320;
 $4321 = ((34159232 + (($4256*12)|0)|0) + 8|0);
 $4322 = HEAP32[$4321>>2]|0;
 $4323 = (($ptree) + 64|0);
 $4324 = HEAP32[$4323>>2]|0;
 $4325 = $4324 ^ $4322;
 HEAP32[$4323>>2] = $4325;
 $4326 = (_is_black_attacked($ptree,$4255)|0);
 $4327 = ($4326|0)==(0);
 L507: do {
  if (!($4327)) {
   $4328 = (_can_b_king_escape($ptree,$4255,0,0,0)|0);
   $4329 = ($4328|0)==(0);
   if (!($4329)) {
    break;
   }
   $4330 = (_can_b_piece_capture($ptree,$4255)|0);
   $4331 = ($4330|0)==(0);
   if (!($4331)) {
    break;
   }
   $4332 = (($ptree) + 594|0);
   $4333 = HEAP8[$4332>>0]|0;
   $4334 = $4333&255;
   $4335 = ((220518304 + (($4334*81)|0)|0) + ($4256)|0);
   $4336 = HEAP8[$4335>>0]|0;
   $4337 = $4336&255;
   $4338 = ($4336<<24>>24)==(0);
   do {
    if (!($4338)) {
     $4339 = ((220518304 + (($4334*81)|0)|0) + ($4255)|0);
     $4340 = HEAP8[$4339>>0]|0;
     $4341 = ($4336<<24>>24)==($4340<<24>>24);
     if ($4341) {
      break;
     }
     $4342 = (_is_pinned_on_white_king($ptree,$4256,$4337)|0);
     $4343 = ($4342|0)==(0);
     if (!($4343)) {
      break L507;
     }
    }
   } while(0);
   $4344 = HEAP32[$4281>>2]|0;
   $4345 = HEAP32[$4283>>2]|0;
   $4346 = $4345 ^ $4344;
   HEAP32[$4283>>2] = $4346;
   $4347 = HEAP32[$4286>>2]|0;
   $4348 = HEAP32[$4288>>2]|0;
   $4349 = $4348 ^ $4347;
   HEAP32[$4288>>2] = $4349;
   $4350 = HEAP32[$4291>>2]|0;
   $4351 = HEAP32[$4293>>2]|0;
   $4352 = $4351 ^ $4350;
   HEAP32[$4293>>2] = $4352;
   $4353 = HEAP32[$4296>>2]|0;
   $4354 = HEAP32[$4298>>2]|0;
   $4355 = $4354 ^ $4353;
   HEAP32[$4298>>2] = $4355;
   $4356 = HEAP32[$4301>>2]|0;
   $4357 = HEAP32[$4303>>2]|0;
   $4358 = $4357 ^ $4356;
   HEAP32[$4303>>2] = $4358;
   $4359 = HEAP32[$4306>>2]|0;
   $4360 = HEAP32[$4308>>2]|0;
   $4361 = $4360 ^ $4359;
   HEAP32[$4308>>2] = $4361;
   $4362 = HEAP32[$4311>>2]|0;
   $4363 = HEAP32[$4313>>2]|0;
   $4364 = $4363 ^ $4362;
   HEAP32[$4313>>2] = $4364;
   $4365 = HEAP32[$4316>>2]|0;
   $4366 = HEAP32[$4318>>2]|0;
   $4367 = $4366 ^ $4365;
   HEAP32[$4318>>2] = $4367;
   $4368 = HEAP32[$4321>>2]|0;
   $4369 = HEAP32[$4323>>2]|0;
   $4370 = $4369 ^ $4368;
   HEAP32[$4323>>2] = $4370;
   $4371 = HEAP32[$4273>>2]|0;
   $4372 = HEAP32[$2>>2]|0;
   $4373 = $4372 ^ $4371;
   HEAP32[$2>>2] = $4373;
   $4374 = HEAP32[$4277>>2]|0;
   $4375 = HEAP32[$7>>2]|0;
   $4376 = $4375 ^ $4374;
   HEAP32[$7>>2] = $4376;
   $4377 = HEAP32[$4263>>2]|0;
   $4378 = HEAP32[$4265>>2]|0;
   $4379 = $4378 ^ $4377;
   HEAP32[$4265>>2] = $4379;
   $4380 = HEAP32[$4268>>2]|0;
   $4381 = HEAP32[$4270>>2]|0;
   $4382 = $4381 ^ $4380;
   HEAP32[$4270>>2] = $4382;
   $4383 = $4256 << 7;
   $4384 = HEAP8[$4260>>0]|0;
   $4385 = $4384 << 24 >> 24;
   $4386 = $4385 << 19;
   $4387 = $4255 | $4383;
   $4388 = $4387 | $4386;
   $4389 = $4388 | 32768;
   $$0 = $4389;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $4390 = HEAP32[$4281>>2]|0;
 $4391 = HEAP32[$4283>>2]|0;
 $4392 = $4391 ^ $4390;
 HEAP32[$4283>>2] = $4392;
 $4393 = HEAP32[$4286>>2]|0;
 $4394 = HEAP32[$4288>>2]|0;
 $4395 = $4394 ^ $4393;
 HEAP32[$4288>>2] = $4395;
 $4396 = HEAP32[$4291>>2]|0;
 $4397 = HEAP32[$4293>>2]|0;
 $4398 = $4397 ^ $4396;
 HEAP32[$4293>>2] = $4398;
 $4399 = HEAP32[$4296>>2]|0;
 $4400 = HEAP32[$4298>>2]|0;
 $4401 = $4400 ^ $4399;
 HEAP32[$4298>>2] = $4401;
 $4402 = HEAP32[$4301>>2]|0;
 $4403 = HEAP32[$4303>>2]|0;
 $4404 = $4403 ^ $4402;
 HEAP32[$4303>>2] = $4404;
 $4405 = HEAP32[$4306>>2]|0;
 $4406 = HEAP32[$4308>>2]|0;
 $4407 = $4406 ^ $4405;
 HEAP32[$4308>>2] = $4407;
 $4408 = HEAP32[$4311>>2]|0;
 $4409 = HEAP32[$4313>>2]|0;
 $4410 = $4409 ^ $4408;
 HEAP32[$4313>>2] = $4410;
 $4411 = HEAP32[$4316>>2]|0;
 $4412 = HEAP32[$4318>>2]|0;
 $4413 = $4412 ^ $4411;
 HEAP32[$4318>>2] = $4413;
 $4414 = HEAP32[$4321>>2]|0;
 $4415 = HEAP32[$4323>>2]|0;
 $4416 = $4415 ^ $4414;
 HEAP32[$4323>>2] = $4416;
 $4417 = HEAP32[$4273>>2]|0;
 $4418 = HEAP32[$2>>2]|0;
 $4419 = $4418 ^ $4417;
 HEAP32[$2>>2] = $4419;
 $4420 = HEAP32[$4277>>2]|0;
 $4421 = HEAP32[$7>>2]|0;
 $4422 = $4421 ^ $4420;
 HEAP32[$7>>2] = $4422;
 $4423 = HEAP32[$4263>>2]|0;
 $4424 = HEAP32[$4265>>2]|0;
 $4425 = $4424 ^ $4423;
 HEAP32[$4265>>2] = $4425;
 $4426 = HEAP32[$4268>>2]|0;
 $4427 = HEAP32[$4270>>2]|0;
 $4428 = $4427 ^ $4426;
 HEAP32[$4270>>2] = $4428;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _can_b_king_escape($ptree,$to,$pbb$0$0$0$val,$pbb$0$0$1$val,$pbb$0$0$2$val) {
 $ptree = $ptree|0;
 $to = $to|0;
 $pbb$0$0$0$val = $pbb$0$0$0$val|0;
 $pbb$0$0$1$val = $pbb$0$0$1$val|0;
 $pbb$0$0$2$val = $pbb$0$0$2$val|0;
 var $$phi$trans$insert = 0, $$phi$trans$insert10 = 0, $$phi$trans$insert12 = 0, $$phi$trans$insert14 = 0, $$phi$trans$insert16 = 0, $$phi$trans$insert18 = 0, $$phi$trans$insert20 = 0, $$phi$trans$insert22 = 0, $$phi$trans$insert24 = 0, $$phi$trans$insert26 = 0, $$phi$trans$insert6 = 0, $$phi$trans$insert8 = 0, $$pre = 0, $$pre11 = 0, $$pre13 = 0, $$pre15 = 0, $$pre17 = 0, $$pre19 = 0, $$pre21 = 0, $$pre23 = 0;
 var $$pre25 = 0, $$pre27 = 0, $$pre7 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $bb$sroa$0$02 = 0, $bb$sroa$1$01 = 0, $bb$sroa$2$03 = 0, $iret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ptree) + ($to)|0) + 512|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (34156304 + (($to*12)|0)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($ptree) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 ^ $4;
  HEAP32[$5>>2] = $7;
  $8 = ((34156304 + (($to*12)|0)|0) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($ptree) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 ^ $9;
  HEAP32[$10>>2] = $12;
  $13 = ((34156304 + (($to*12)|0)|0) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($ptree) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 ^ $14;
  HEAP32[$15>>2] = $17;
  $18 = (34157280 + (($to*12)|0)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($ptree) + 32|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 ^ $19;
  HEAP32[$20>>2] = $22;
  $23 = ((34157280 + (($to*12)|0)|0) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($ptree) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 ^ $24;
  HEAP32[$25>>2] = $27;
  $28 = ((34157280 + (($to*12)|0)|0) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($ptree) + 40|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 ^ $29;
  HEAP32[$30>>2] = $32;
  $33 = (34158256 + (($to*12)|0)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($ptree) + 44|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 ^ $34;
  HEAP32[$35>>2] = $37;
  $38 = ((34158256 + (($to*12)|0)|0) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($ptree) + 48|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 ^ $39;
  HEAP32[$40>>2] = $42;
  $43 = ((34158256 + (($to*12)|0)|0) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($ptree) + 52|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $46 ^ $44;
  HEAP32[$45>>2] = $47;
  $48 = (34159232 + (($to*12)|0)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($ptree) + 56|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $51 ^ $49;
  HEAP32[$50>>2] = $52;
  $53 = ((34159232 + (($to*12)|0)|0) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($ptree) + 60|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $56 ^ $54;
  HEAP32[$55>>2] = $57;
  $58 = ((34159232 + (($to*12)|0)|0) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($ptree) + 64|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $61 ^ $59;
  HEAP32[$60>>2] = $62;
  $100 = $37;$105 = $42;$110 = $47;$115 = $52;$120 = $57;$125 = $62;$128 = $4;$131 = $9;$134 = $14;$85 = $22;$90 = $27;$95 = $32;
 } else {
  $$phi$trans$insert = (($ptree) + 32|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$phi$trans$insert6 = (($ptree) + 36|0);
  $$pre7 = HEAP32[$$phi$trans$insert6>>2]|0;
  $$phi$trans$insert8 = (($ptree) + 40|0);
  $$pre9 = HEAP32[$$phi$trans$insert8>>2]|0;
  $$phi$trans$insert10 = (($ptree) + 44|0);
  $$pre11 = HEAP32[$$phi$trans$insert10>>2]|0;
  $$phi$trans$insert12 = (($ptree) + 48|0);
  $$pre13 = HEAP32[$$phi$trans$insert12>>2]|0;
  $$phi$trans$insert14 = (($ptree) + 52|0);
  $$pre15 = HEAP32[$$phi$trans$insert14>>2]|0;
  $$phi$trans$insert16 = (($ptree) + 56|0);
  $$pre17 = HEAP32[$$phi$trans$insert16>>2]|0;
  $$phi$trans$insert18 = (($ptree) + 60|0);
  $$pre19 = HEAP32[$$phi$trans$insert18>>2]|0;
  $$phi$trans$insert20 = (($ptree) + 64|0);
  $$pre21 = HEAP32[$$phi$trans$insert20>>2]|0;
  $$phi$trans$insert22 = (34156304 + (($to*12)|0)|0);
  $$pre23 = HEAP32[$$phi$trans$insert22>>2]|0;
  $$phi$trans$insert24 = ((34156304 + (($to*12)|0)|0) + 4|0);
  $$pre25 = HEAP32[$$phi$trans$insert24>>2]|0;
  $$phi$trans$insert26 = ((34156304 + (($to*12)|0)|0) + 8|0);
  $$pre27 = HEAP32[$$phi$trans$insert26>>2]|0;
  $100 = $$pre11;$105 = $$pre13;$110 = $$pre15;$115 = $$pre17;$120 = $$pre19;$125 = $$pre21;$128 = $$pre23;$131 = $$pre25;$134 = $$pre27;$85 = $$pre;$90 = $$pre7;$95 = $$pre9;
 }
 $63 = (($ptree) + 593|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = (34156304 + (($65*12)|0)|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($ptree) + 8|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $69 ^ $67;
 HEAP32[$68>>2] = $70;
 $71 = ((34156304 + (($65*12)|0)|0) + 4|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($ptree) + 12|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $74 ^ $72;
 HEAP32[$73>>2] = $75;
 $76 = ((34156304 + (($65*12)|0)|0) + 8|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($ptree) + 16|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 ^ $77;
 HEAP32[$78>>2] = $80;
 $81 = (34157280 + (($65*12)|0)|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (($ptree) + 32|0);
 $84 = $85 ^ $82;
 HEAP32[$83>>2] = $84;
 $86 = ((34157280 + (($65*12)|0)|0) + 4|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (($ptree) + 36|0);
 $89 = $90 ^ $87;
 HEAP32[$88>>2] = $89;
 $91 = ((34157280 + (($65*12)|0)|0) + 8|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (($ptree) + 40|0);
 $94 = $95 ^ $92;
 HEAP32[$93>>2] = $94;
 $96 = (34158256 + (($65*12)|0)|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = (($ptree) + 44|0);
 $99 = $100 ^ $97;
 HEAP32[$98>>2] = $99;
 $101 = ((34158256 + (($65*12)|0)|0) + 4|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($ptree) + 48|0);
 $104 = $105 ^ $102;
 HEAP32[$103>>2] = $104;
 $106 = ((34158256 + (($65*12)|0)|0) + 8|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = (($ptree) + 52|0);
 $109 = $110 ^ $107;
 HEAP32[$108>>2] = $109;
 $111 = (34159232 + (($65*12)|0)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = (($ptree) + 56|0);
 $114 = $115 ^ $112;
 HEAP32[$113>>2] = $114;
 $116 = ((34159232 + (($65*12)|0)|0) + 4|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (($ptree) + 60|0);
 $119 = $120 ^ $117;
 HEAP32[$118>>2] = $119;
 $121 = ((34159232 + (($65*12)|0)|0) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (($ptree) + 64|0);
 $124 = $125 ^ $122;
 HEAP32[$123>>2] = $124;
 $126 = (34156304 + (($to*12)|0)|0);
 $127 = $128 | $pbb$0$0$0$val;
 $129 = ((34156304 + (($to*12)|0)|0) + 4|0);
 $130 = $131 | $pbb$0$0$1$val;
 $132 = ((34156304 + (($to*12)|0)|0) + 8|0);
 $133 = $134 | $pbb$0$0$2$val;
 $135 = $127 | $70;
 $136 = $130 | $75;
 $137 = $133 | $80;
 $138 = (33578928 + (($65*12)|0)|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = $135 ^ -1;
 $141 = $139 & $140;
 $142 = ((33578928 + (($65*12)|0)|0) + 4|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = $136 ^ -1;
 $145 = $143 & $144;
 $146 = ((33578928 + (($65*12)|0)|0) + 8|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = $137 ^ -1;
 $149 = $147 & $148;
 $150 = $141 | $145;
 $151 = $150 | $149;
 $152 = ($151|0)==(0);
 L5: do {
  if ($152) {
   $iret$0 = 0;
  } else {
   $bb$sroa$0$02 = $141;$bb$sroa$1$01 = $145;$bb$sroa$2$03 = $149;
   while(1) {
    $153 = (_last_one210($bb$sroa$2$03,$bb$sroa$1$01,$bb$sroa$0$02)|0);
    $154 = (_is_black_attacked($ptree,$153)|0);
    $155 = ($154|0)==(0);
    if ($155) {
     $iret$0 = 1;
     break L5;
    }
    $156 = (34156304 + (($153*12)|0)|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = $157 ^ $bb$sroa$0$02;
    $159 = ((34156304 + (($153*12)|0)|0) + 4|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = $160 ^ $bb$sroa$1$01;
    $162 = ((34156304 + (($153*12)|0)|0) + 8|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = $163 ^ $bb$sroa$2$03;
    $165 = $158 | $161;
    $166 = $165 | $164;
    $167 = ($166|0)==(0);
    if ($167) {
     $iret$0 = 0;
     break;
    } else {
     $bb$sroa$0$02 = $158;$bb$sroa$1$01 = $161;$bb$sroa$2$03 = $164;
    }
   }
  }
 } while(0);
 $168 = HEAP8[$63>>0]|0;
 $169 = $168&255;
 $170 = (34157280 + (($169*12)|0)|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = HEAP32[$83>>2]|0;
 $173 = $172 ^ $171;
 HEAP32[$83>>2] = $173;
 $174 = ((34157280 + (($169*12)|0)|0) + 4|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = HEAP32[$88>>2]|0;
 $177 = $176 ^ $175;
 HEAP32[$88>>2] = $177;
 $178 = ((34157280 + (($169*12)|0)|0) + 8|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = HEAP32[$93>>2]|0;
 $181 = $180 ^ $179;
 HEAP32[$93>>2] = $181;
 $182 = (34158256 + (($169*12)|0)|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = HEAP32[$98>>2]|0;
 $185 = $184 ^ $183;
 HEAP32[$98>>2] = $185;
 $186 = ((34158256 + (($169*12)|0)|0) + 4|0);
 $187 = HEAP32[$186>>2]|0;
 $188 = HEAP32[$103>>2]|0;
 $189 = $188 ^ $187;
 HEAP32[$103>>2] = $189;
 $190 = ((34158256 + (($169*12)|0)|0) + 8|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = HEAP32[$108>>2]|0;
 $193 = $192 ^ $191;
 HEAP32[$108>>2] = $193;
 $194 = (34159232 + (($169*12)|0)|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = HEAP32[$113>>2]|0;
 $197 = $196 ^ $195;
 HEAP32[$113>>2] = $197;
 $198 = ((34159232 + (($169*12)|0)|0) + 4|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = HEAP32[$118>>2]|0;
 $201 = $200 ^ $199;
 HEAP32[$118>>2] = $201;
 $202 = ((34159232 + (($169*12)|0)|0) + 8|0);
 $203 = HEAP32[$202>>2]|0;
 $204 = HEAP32[$123>>2]|0;
 $205 = $204 ^ $203;
 HEAP32[$123>>2] = $205;
 $206 = (34156304 + (($169*12)|0)|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = HEAP32[$68>>2]|0;
 $209 = $208 ^ $207;
 HEAP32[$68>>2] = $209;
 $210 = ((34156304 + (($169*12)|0)|0) + 4|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = HEAP32[$73>>2]|0;
 $213 = $212 ^ $211;
 HEAP32[$73>>2] = $213;
 $214 = ((34156304 + (($169*12)|0)|0) + 8|0);
 $215 = HEAP32[$214>>2]|0;
 $216 = HEAP32[$78>>2]|0;
 $217 = $216 ^ $215;
 HEAP32[$78>>2] = $217;
 $218 = HEAP8[$0>>0]|0;
 $219 = ($218<<24>>24)==(0);
 if (!($219)) {
  STACKTOP = sp;return ($iret$0|0);
 }
 $220 = (34157280 + (($to*12)|0)|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = $173 ^ $221;
 HEAP32[$83>>2] = $222;
 $223 = ((34157280 + (($to*12)|0)|0) + 4|0);
 $224 = HEAP32[$223>>2]|0;
 $225 = $177 ^ $224;
 HEAP32[$88>>2] = $225;
 $226 = ((34157280 + (($to*12)|0)|0) + 8|0);
 $227 = HEAP32[$226>>2]|0;
 $228 = $181 ^ $227;
 HEAP32[$93>>2] = $228;
 $229 = (34158256 + (($to*12)|0)|0);
 $230 = HEAP32[$229>>2]|0;
 $231 = $185 ^ $230;
 HEAP32[$98>>2] = $231;
 $232 = ((34158256 + (($to*12)|0)|0) + 4|0);
 $233 = HEAP32[$232>>2]|0;
 $234 = $189 ^ $233;
 HEAP32[$103>>2] = $234;
 $235 = ((34158256 + (($to*12)|0)|0) + 8|0);
 $236 = HEAP32[$235>>2]|0;
 $237 = $193 ^ $236;
 HEAP32[$108>>2] = $237;
 $238 = (34159232 + (($to*12)|0)|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = $197 ^ $239;
 HEAP32[$113>>2] = $240;
 $241 = ((34159232 + (($to*12)|0)|0) + 4|0);
 $242 = HEAP32[$241>>2]|0;
 $243 = $201 ^ $242;
 HEAP32[$118>>2] = $243;
 $244 = ((34159232 + (($to*12)|0)|0) + 8|0);
 $245 = HEAP32[$244>>2]|0;
 $246 = $205 ^ $245;
 HEAP32[$123>>2] = $246;
 $247 = HEAP32[$126>>2]|0;
 $248 = (($ptree) + 20|0);
 $249 = HEAP32[$248>>2]|0;
 $250 = $249 ^ $247;
 HEAP32[$248>>2] = $250;
 $251 = HEAP32[$129>>2]|0;
 $252 = (($ptree) + 24|0);
 $253 = HEAP32[$252>>2]|0;
 $254 = $253 ^ $251;
 HEAP32[$252>>2] = $254;
 $255 = HEAP32[$132>>2]|0;
 $256 = (($ptree) + 28|0);
 $257 = HEAP32[$256>>2]|0;
 $258 = $257 ^ $255;
 HEAP32[$256>>2] = $258;
 STACKTOP = sp;return ($iret$0|0);
}
function _can_b_piece_capture($ptree,$to) {
 $ptree = $ptree|0;
 $to = $to|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bb_sum$sroa$0$0 = 0;
 var $bb_sum$sroa$1$0 = 0, $bb_sum$sroa$2$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($to) + 9)|0;
 $1 = ($to|0)<(72);
 if ($1) {
  $2 = ((($ptree) + ($0)|0) + 512|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(1);
  if ($4) {
   $5 = (($ptree) + 593|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6&255;
   $8 = ((220518304 + (($7*81)|0)|0) + ($0)|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   $11 = ($9<<24>>24)==(0);
   if ($11) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $12 = ((220518304 + (($7*81)|0)|0) + ($to)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($9<<24>>24)==($13<<24>>24);
   if ($14) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $15 = (_is_pinned_on_black_king($ptree,$0,$10)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $17 = (($ptree) + 212|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (33576000 + (($to*12)|0)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 & $18;
 $22 = (($ptree) + 216|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((33576000 + (($to*12)|0)|0) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 & $23;
 $27 = (($ptree) + 220|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((33576000 + (($to*12)|0)|0) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & $28;
 $32 = (($ptree) + 236|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (33576976 + (($to*12)|0)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 & $33;
 $37 = $36 | $21;
 $38 = (($ptree) + 240|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((33576976 + (($to*12)|0)|0) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 & $39;
 $43 = $42 | $26;
 $44 = (($ptree) + 244|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((33576976 + (($to*12)|0)|0) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 & $45;
 $49 = $48 | $31;
 $50 = (($ptree) + 92|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (33577952 + (($to*12)|0)|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53 & $51;
 $55 = $37 | $54;
 $56 = (($ptree) + 96|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ((33577952 + (($to*12)|0)|0) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $59 & $57;
 $61 = $43 | $60;
 $62 = (($ptree) + 100|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ((33577952 + (($to*12)|0)|0) + 8|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $65 & $63;
 $67 = $49 | $66;
 $68 = (($ptree) + 308|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($ptree) + 332|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $71 | $69;
 $73 = (($ptree) + 312|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($ptree) + 336|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $76 | $74;
 $78 = (($ptree) + 316|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (($ptree) + 340|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $81 | $79;
 $83 = (33578928 + (($to*12)|0)|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $84 & $72;
 $86 = $55 | $85;
 $87 = ((33578928 + (($to*12)|0)|0) + 4|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $88 & $77;
 $90 = $61 | $89;
 $91 = ((33578928 + (($to*12)|0)|0) + 8|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $92 & $82;
 $94 = $67 | $93;
 $95 = ((33572424 + ($to<<3)|0) + 6|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = $96&255;
 $98 = ((($ptree) + ($97<<2)|0) + 56|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ((33572424 + ($to<<3)|0) + 7|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = $99 >>> $102;
 $104 = $103 & 127;
 $105 = ((33704320 + (($to*1536)|0)|0) + (($104*12)|0)|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ((33572424 + ($to<<3)|0) + 4|0);
 $108 = HEAP8[$107>>0]|0;
 $109 = $108&255;
 $110 = ((($ptree) + ($109<<2)|0) + 44|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ((33572424 + ($to<<3)|0) + 5|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = $113&255;
 $115 = $111 >>> $114;
 $116 = $115 & 127;
 $117 = ((33579904 + (($to*1536)|0)|0) + (($116*12)|0)|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = $118 | $106;
 $120 = (((33704320 + (($to*1536)|0)|0) + (($104*12)|0)|0) + 4|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = (((33579904 + (($to*1536)|0)|0) + (($116*12)|0)|0) + 4|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = $123 | $121;
 $125 = (((33704320 + (($to*1536)|0)|0) + (($104*12)|0)|0) + 8|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = (((33579904 + (($to*1536)|0)|0) + (($116*12)|0)|0) + 8|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = $128 | $126;
 $130 = (($ptree) + 116|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $131 & $119;
 $133 = $86 | $132;
 $134 = (($ptree) + 120|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = $135 & $124;
 $137 = $90 | $136;
 $138 = (($ptree) + 124|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = $139 & $129;
 $141 = $94 | $140;
 $142 = (($ptree) + 140|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = (33572424 + ($to<<3)|0);
 $145 = HEAP8[$144>>0]|0;
 $146 = $145&255;
 $147 = ((($ptree) + ($146<<2)|0) + 8|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = ((($ptree) + ($146<<2)|0) + 20|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = $150 | $148;
 $152 = ((33572424 + ($to<<3)|0) + 1|0);
 $153 = HEAP8[$152>>0]|0;
 $154 = $153&255;
 $155 = $151 >>> $154;
 $156 = $155 & 127;
 $157 = ((33828736 + (($to*1536)|0)|0) + (($156*12)|0)|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = $158 & $143;
 $160 = $133 | $159;
 $161 = (($ptree) + 144|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = (((33828736 + (($to*1536)|0)|0) + (($156*12)|0)|0) + 4|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = $164 & $162;
 $166 = $137 | $165;
 $167 = (($ptree) + 148|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = (((33828736 + (($to*1536)|0)|0) + (($156*12)|0)|0) + 8|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = $170 & $168;
 $172 = $141 | $171;
 $173 = (($ptree) + 188|0);
 $174 = HEAP32[$173>>2]|0;
 $175 = (34160208 + (($to*12)|0)|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = $176 & $174;
 $178 = $177 | $143;
 $179 = (($ptree) + 192|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = ((34160208 + (($to*12)|0)|0) + 4|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = $182 & $180;
 $184 = $183 | $162;
 $185 = (($ptree) + 196|0);
 $186 = HEAP32[$185>>2]|0;
 $187 = ((34160208 + (($to*12)|0)|0) + 8|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = $188 & $186;
 $190 = $189 | $168;
 $191 = ((33572424 + ($to<<3)|0) + 2|0);
 $192 = HEAP8[$191>>0]|0;
 $193 = $192&255;
 $194 = ((($ptree) + ($193<<2)|0) + 32|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = ((33572424 + ($to<<3)|0) + 3|0);
 $197 = HEAP8[$196>>0]|0;
 $198 = $197&255;
 $199 = $195 >>> $198;
 $200 = $199 & 127;
 $201 = ((33953152 + (($to*1536)|0)|0) + (($200*12)|0)|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = $202 & $178;
 $204 = $160 | $203;
 $205 = (((33953152 + (($to*1536)|0)|0) + (($200*12)|0)|0) + 4|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = $206 & $184;
 $208 = $166 | $207;
 $209 = (((33953152 + (($to*1536)|0)|0) + (($200*12)|0)|0) + 8|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = $210 & $190;
 $212 = $172 | $211;
 $213 = (($ptree) + 593|0);
 $bb_sum$sroa$0$0 = $204;$bb_sum$sroa$1$0 = $208;$bb_sum$sroa$2$0 = $212;
 while(1) {
  $214 = $bb_sum$sroa$1$0 | $bb_sum$sroa$0$0;
  $215 = $214 | $bb_sum$sroa$2$0;
  $216 = ($215|0)==(0);
  if ($216) {
   $$0 = 0;
   label = 11;
   break;
  }
  $217 = (_last_one210($bb_sum$sroa$2$0,$bb_sum$sroa$1$0,$bb_sum$sroa$0$0)|0);
  $218 = (34156304 + (($217*12)|0)|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = $219 ^ $bb_sum$sroa$0$0;
  $221 = ((34156304 + (($217*12)|0)|0) + 4|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = $222 ^ $bb_sum$sroa$1$0;
  $224 = ((34156304 + (($217*12)|0)|0) + 8|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = $225 ^ $bb_sum$sroa$2$0;
  $227 = HEAP8[$213>>0]|0;
  $228 = $227&255;
  $229 = ((220518304 + (($228*81)|0)|0) + ($217)|0);
  $230 = HEAP8[$229>>0]|0;
  $231 = $230&255;
  $232 = ($230<<24>>24)==(0);
  if ($232) {
   $$0 = 1;
   label = 11;
   break;
  }
  $233 = ((220518304 + (($228*81)|0)|0) + ($to)|0);
  $234 = HEAP8[$233>>0]|0;
  $235 = ($230<<24>>24)==($234<<24>>24);
  if ($235) {
   $$0 = 1;
   label = 11;
   break;
  }
  $236 = (_is_pinned_on_black_king($ptree,$217,$231)|0);
  $237 = ($236|0)==(0);
  if ($237) {
   $$0 = 1;
   label = 11;
   break;
  } else {
   $bb_sum$sroa$0$0 = $220;$bb_sum$sroa$1$0 = $223;$bb_sum$sroa$2$0 = $226;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _ini_rand($u) {
 $u = $u|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $exitcond = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[33557160>>2] = 624;
 HEAP32[((33557160 + 4|0))>>2] = 0;
 HEAP32[((33557160 + 8|0))>>2] = -1727483681;
 HEAP32[((33557160 + 12|0))>>2] = $u;
 $$01 = $u;$i$02 = 1;
 while(1) {
  $0 = $$01 >>> 30;
  $1 = $0 ^ $$01;
  $2 = Math_imul($1, 1812433253)|0;
  $3 = (($2) + ($i$02))|0;
  $4 = ((33557160 + ($i$02<<2)|0) + 12|0);
  HEAP32[$4>>2] = $3;
  $5 = (($i$02) + 1)|0;
  $exitcond = ($5|0)==(624);
  if ($exitcond) {
   break;
  } else {
   $$01 = $3;$i$02 = $5;
  }
 }
 STACKTOP = sp;return;
}
function _rand32() {
 var $$pre = 0, $$pre4 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond3 = 0, $i$02 = 0, $i$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[33557160>>2]|0;
 $1 = ($0|0)==(624);
 if (!($1)) {
  $49 = $0;
  $48 = (($49) + 1)|0;
  HEAP32[33557160>>2] = $48;
  $50 = ((33557160 + ($49<<2)|0) + 12|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $51 >>> 11;
  $53 = $52 ^ $51;
  $54 = $53 << 7;
  $55 = $54 & -1658038656;
  $56 = $55 ^ $53;
  $57 = $56 << 15;
  $58 = $57 & -272236544;
  $59 = $58 ^ $56;
  $60 = $59 >>> 18;
  $61 = $60 ^ $59;
  STACKTOP = sp;return ($61|0);
 }
 HEAP32[33557160>>2] = 0;
 $$pre = HEAP32[((33557160 + 12|0))>>2]|0;
 $4 = $$pre;$i$02 = 0;
 while(1) {
  $2 = ((33557160 + ($i$02<<2)|0) + 12|0);
  $3 = $4 & -2147483648;
  $5 = (($i$02) + 1)|0;
  $6 = ((33557160 + ($5<<2)|0) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2147483646;
  $9 = $8 | $3;
  $10 = (($i$02) + 397)|0;
  $11 = ((33557160 + ($10<<2)|0) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $9 >>> 1;
  $14 = $7 & 1;
  $15 = ((33557160 + ($14<<2)|0) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 ^ $12;
  $18 = $17 ^ $13;
  HEAP32[$2>>2] = $18;
  $exitcond3 = ($5|0)==(227);
  if ($exitcond3) {
   break;
  } else {
   $4 = $7;$i$02 = $5;
  }
 }
 $$pre4 = HEAP32[((33557160 + 920|0))>>2]|0;
 $21 = $$pre4;$i$11 = 227;
 while(1) {
  $19 = ((33557160 + ($i$11<<2)|0) + 12|0);
  $20 = $21 & -2147483648;
  $22 = (($i$11) + 1)|0;
  $23 = ((33557160 + ($22<<2)|0) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $24 & 2147483646;
  $26 = $25 | $20;
  $27 = (($i$11) + -227)|0;
  $28 = ((33557160 + ($27<<2)|0) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $26 >>> 1;
  $31 = $24 & 1;
  $32 = ((33557160 + ($31<<2)|0) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $33 ^ $29;
  $35 = $34 ^ $30;
  HEAP32[$19>>2] = $35;
  $exitcond = ($22|0)==(623);
  if ($exitcond) {
   break;
  } else {
   $21 = $24;$i$11 = $22;
  }
 }
 $36 = HEAP32[((33557160 + 2504|0))>>2]|0;
 $37 = $36 & -2147483648;
 $38 = HEAP32[((33557160 + 12|0))>>2]|0;
 $39 = $38 & 2147483646;
 $40 = $39 | $37;
 $41 = HEAP32[((33557160 + 1596|0))>>2]|0;
 $42 = $40 >>> 1;
 $43 = $38 & 1;
 $44 = ((33557160 + ($43<<2)|0) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45 ^ $41;
 $47 = $46 ^ $42;
 HEAP32[((33557160 + 2504|0))>>2] = $47;
 $$pre5 = HEAP32[33557160>>2]|0;
 $49 = $$pre5;
 $48 = (($49) + 1)|0;
 HEAP32[33557160>>2] = $48;
 $50 = ((33557160 + ($49<<2)|0) + 12|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $51 >>> 11;
 $53 = $52 ^ $51;
 $54 = $53 << 7;
 $55 = $54 & -1658038656;
 $56 = $55 ^ $53;
 $57 = $56 << 15;
 $58 = $57 & -272236544;
 $59 = $58 ^ $56;
 $60 = $59 >>> 18;
 $61 = $60 ^ $59;
 STACKTOP = sp;return ($61|0);
}
function _rand64() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_rand32()|0);
 $1 = (_rand32()|0);
 tempRet0 = $0;
 STACKTOP = sp;return ($1|0);
}
function _check_futile_score_quies($ptree,$move,$old_val,$new_val,$turn) {
 $ptree = $ptree|0;
 $move = $move|0;
 $old_val = $old_val|0;
 $new_val = $new_val|0;
 $turn = $turn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $fmt$0 = 0, $fmt$1 = 0, $fmt$2 = 0, $fmt$3 = 0, $fmt$4 = 0, $ipc_cap$0 = 0, $ipc_cap$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $move & 16256;
 $1 = (($old_val|0) / 32)&-1;
 $2 = (($new_val|0) / 32)&-1;
 $3 = $move >>> 15;
 $4 = $3 & 15;
 $5 = ($4|0)==(8);
 $6 = (($2) - ($1))|0;
 if ($5) {
  $7 = ($turn|0)==(0);
  $8 = (($ptree) + 508|0);
  $9 = HEAP32[$8>>2]|0;
  if ($7) {
   $14 = (($2) - ($9))|0;
   $15 = $move >>> 19;
   $16 = $15 & 15;
   $fmt$0 = $14;$ipc_cap$0 = $16;
  } else {
   $10 = (($9) + ($2))|0;
   $11 = $move >>> 19;
   $12 = $11 & 15;
   $13 = (0 - ($12))|0;
   $fmt$0 = $10;$ipc_cap$0 = $13;
  }
  $17 = ($ipc_cap$0|0)==(0);
  if ($17) {
   $26 = HEAP32[34181160>>2]|0;
   $27 = ($6|0)>($26|0);
   if ($27) {
    HEAP32[34181160>>2] = $6;
    $fmt$1 = $fmt$0;
   } else {
    $fmt$1 = $fmt$0;
   }
  } else {
   $18 = (($ipc_cap$0) + 15)|0;
   $19 = (34184184 + ($18<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($fmt$0) - ($20))|0;
   $22 = (_estimate_score_diff($ptree,$move,$turn)|0);
   $23 = (($6) - ($22))|0;
   $24 = HEAP32[34181168>>2]|0;
   $25 = ($23|0)>($24|0);
   if ($25) {
    HEAP32[34181168>>2] = $23;
    $fmt$1 = $21;
   } else {
    $fmt$1 = $21;
   }
  }
  $28 = HEAP32[34181152>>2]|0;
  $29 = ($fmt$1|0)>($28|0);
  if (!($29)) {
   STACKTOP = sp;return;
  }
  HEAP32[34181152>>2] = $fmt$1;
  STACKTOP = sp;return;
 }
 $30 = (_estimate_score_diff($ptree,$move,$turn)|0);
 $31 = (($6) - ($30))|0;
 $32 = ($turn|0)==(0);
 $33 = (($ptree) + 508|0);
 $34 = HEAP32[$33>>2]|0;
 if ($32) {
  $39 = (($2) - ($34))|0;
  $40 = $move >>> 19;
  $41 = $40 & 15;
  $fmt$2 = $39;$ipc_cap$1 = $41;
 } else {
  $35 = (($34) + ($2))|0;
  $36 = $move >>> 19;
  $37 = $36 & 15;
  $38 = (0 - ($37))|0;
  $fmt$2 = $35;$ipc_cap$1 = $38;
 }
 $42 = ($0>>>0)>(10240);
 do {
  if ($42) {
   $43 = HEAP32[34181144>>2]|0;
   $44 = ($31|0)>($43|0);
   if ($44) {
    HEAP32[34181144>>2] = $31;
    $fmt$4 = $fmt$2;
   } else {
    $fmt$4 = $fmt$2;
   }
  } else {
   $45 = $move & 16384;
   $46 = ($45|0)==(0);
   if ($46) {
    $fmt$3 = $fmt$2;
   } else {
    $47 = (($4) + 7)|0;
    $48 = (34184312 + ($47<<2)|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (($fmt$2) - ($49))|0;
    $fmt$3 = $50;
   }
   $51 = ($ipc_cap$1|0)==(0);
   if ($51) {
    $58 = HEAP32[34181128>>2]|0;
    $59 = ($31|0)>($58|0);
    if (!($59)) {
     $fmt$4 = $fmt$3;
     break;
    }
    HEAP32[34181128>>2] = $31;
    $fmt$4 = $fmt$3;
    break;
   } else {
    $52 = (($ipc_cap$1) + 15)|0;
    $53 = (34184184 + ($52<<2)|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (($fmt$3) - ($54))|0;
    $56 = HEAP32[34181136>>2]|0;
    $57 = ($31|0)>($56|0);
    if (!($57)) {
     $fmt$4 = $55;
     break;
    }
    HEAP32[34181136>>2] = $31;
    $fmt$4 = $55;
    break;
   }
  }
 } while(0);
 $60 = HEAP32[34181152>>2]|0;
 $61 = ($fmt$4|0)>($60|0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 HEAP32[34181152>>2] = $fmt$4;
 STACKTOP = sp;return;
}
function _estimate_score_diff($ptree,$move,$turn) {
 $ptree = $ptree|0;
 $move = $move|0;
 $turn = $turn|0;
 var $$not = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $diff$0 = 0, $diff$0$ = 0, $ipc_cap$0 = 0, $ipc_move$0 = 0;
 var $ipro_pc_move$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ptree) + 593|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($ptree) + 594|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (80 - ($5))|0;
 $7 = $move >>> 7;
 $8 = $7 & 127;
 $9 = $move & 127;
 $10 = $move >>> 15;
 $11 = $10 & 15;
 $12 = ($11|0)==(8);
 if ($12) {
  $13 = $move >>> 19;
  $14 = $13 & 15;
  $15 = ($14|0)==(0);
  if ($15) {
   $diff$0 = 0;
   $293 = ($turn|0)==(0);
   $294 = (0 - ($diff$0))|0;
   $diff$0$ = $293 ? $diff$0 : $294;
   STACKTOP = sp;return ($diff$0$|0);
  }
  $16 = (($14) + 15)|0;
  $17 = (1024 + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($9))|0;
  $20 = (($19) + 3)|0;
  $21 = Math_imul($20, $19)|0;
  $22 = (($21|0) / 2)&-1;
  $23 = ((34184504 + (Math_imul($2, 2180052)|0)|0) + ($22<<1)|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24 << 16 >> 16;
  $26 = $14 ^ 15;
  $27 = (1024 + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (80 - ($9))|0;
  $30 = (($28) + ($29))|0;
  $31 = (($30) + 3)|0;
  $32 = Math_imul($31, $30)|0;
  $33 = (($32|0) / 2)&-1;
  $34 = ((34184504 + (Math_imul($6, 2180052)|0)|0) + ($33<<1)|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35 << 16 >> 16;
  $37 = (($36) - ($25))|0;
  $38 = (($37|0) / 32)&-1;
  $39 = ($turn|0)==(0);
  if ($39) {
   $43 = (34184184 + ($26<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + ($38))|0;
   $diff$0 = $45;
   $293 = ($turn|0)==(0);
   $294 = (0 - ($diff$0))|0;
   $diff$0$ = $293 ? $diff$0 : $294;
   STACKTOP = sp;return ($diff$0$|0);
  } else {
   $40 = (34184184 + ($16<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($38) - ($41))|0;
   $diff$0 = $42;
   $293 = ($turn|0)==(0);
   $294 = (0 - ($diff$0))|0;
   $diff$0$ = $293 ? $diff$0 : $294;
   STACKTOP = sp;return ($diff$0$|0);
  }
 }
 $46 = ($8>>>0)>(80);
 $47 = ($turn|0)!=(0);
 if ($46) {
  $48 = (($8) + -80)|0;
  $49 = (80 - ($8))|0;
  $50 = $47 ? $49 : $48;
  $51 = (($50) + 15)|0;
  $52 = (1024 + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + ($9))|0;
  $55 = (($54) + 3)|0;
  $56 = Math_imul($55, $54)|0;
  $57 = (($56|0) / 2)&-1;
  $58 = ((34184504 + (Math_imul($2, 2180052)|0)|0) + ($57<<1)|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = (15 - ($50))|0;
  $62 = (1024 + ($61<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (80 - ($9))|0;
  $65 = (($63) + ($64))|0;
  $66 = (($65) + 3)|0;
  $67 = Math_imul($66, $65)|0;
  $68 = (($67|0) / 2)&-1;
  $69 = ((34184504 + (Math_imul($6, 2180052)|0)|0) + ($68<<1)|0);
  $70 = HEAP16[$69>>1]|0;
  $71 = $70 << 16 >> 16;
  $72 = (($60) - ($71))|0;
  $73 = (($72|0) / 32)&-1;
  $diff$0 = $73;
  $293 = ($turn|0)==(0);
  $294 = (0 - ($diff$0))|0;
  $diff$0$ = $293 ? $diff$0 : $294;
  STACKTOP = sp;return ($diff$0$|0);
 }
 if ($47) {
  $74 = (0 - ($11))|0;
  $75 = $move >>> 19;
  $76 = $75 & 15;
  $77 = (-8 - ($11))|0;
  $ipc_cap$0 = $76;$ipc_move$0 = $74;$ipro_pc_move$0 = $77;
 } else {
  $78 = $move >>> 19;
  $79 = $78 & 15;
  $80 = (0 - ($79))|0;
  $81 = (($11) + 8)|0;
  $ipc_cap$0 = $80;$ipc_move$0 = $11;$ipro_pc_move$0 = $81;
 }
 $82 = $move & 16384;
 $83 = ($82|0)!=(0);
 $$not = $83 ^ 1;
 $84 = ($ipc_cap$0|0)==(0);
 $or$cond = $84 | $$not;
 $85 = (($ipc_move$0) + 15)|0;
 $86 = (1024 + ($85<<2)|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (($87) + ($8))|0;
 $89 = (($88) + 3)|0;
 $90 = Math_imul($89, $88)|0;
 $91 = (($90|0) / 2)&-1;
 $92 = ((34184504 + (Math_imul($2, 2180052)|0)|0) + ($91<<1)|0);
 $93 = HEAP16[$92>>1]|0;
 $94 = $93 << 16 >> 16;
 if (!($or$cond)) {
  $95 = (($ipro_pc_move$0) + 15)|0;
  $96 = (1024 + ($95<<2)|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (($97) + ($9))|0;
  $99 = (($98) + 3)|0;
  $100 = Math_imul($99, $98)|0;
  $101 = (($100|0) / 2)&-1;
  $102 = ((34184504 + (Math_imul($2, 2180052)|0)|0) + ($101<<1)|0);
  $103 = HEAP16[$102>>1]|0;
  $104 = $103 << 16 >> 16;
  $105 = (($104) - ($94))|0;
  $106 = (($ipc_cap$0) + 15)|0;
  $107 = (1024 + ($106<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($108) + ($9))|0;
  $110 = (($109) + 3)|0;
  $111 = Math_imul($110, $109)|0;
  $112 = (($111|0) / 2)&-1;
  $113 = ((34184504 + (Math_imul($2, 2180052)|0)|0) + ($112<<1)|0);
  $114 = HEAP16[$113>>1]|0;
  $115 = $114 << 16 >> 16;
  $116 = (($105) - ($115))|0;
  $117 = (15 - ($ipc_move$0))|0;
  $118 = (1024 + ($117<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (80 - ($8))|0;
  $121 = (($119) + ($120))|0;
  $122 = (($121) + 3)|0;
  $123 = Math_imul($122, $121)|0;
  $124 = (($123|0) / 2)&-1;
  $125 = ((34184504 + (Math_imul($6, 2180052)|0)|0) + ($124<<1)|0);
  $126 = HEAP16[$125>>1]|0;
  $127 = $126 << 16 >> 16;
  $128 = (($116) + ($127))|0;
  $129 = (15 - ($ipro_pc_move$0))|0;
  $130 = (1024 + ($129<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (80 - ($9))|0;
  $133 = (($131) + ($132))|0;
  $134 = (($133) + 3)|0;
  $135 = Math_imul($134, $133)|0;
  $136 = (($135|0) / 2)&-1;
  $137 = ((34184504 + (Math_imul($6, 2180052)|0)|0) + ($136<<1)|0);
  $138 = HEAP16[$137>>1]|0;
  $139 = $138 << 16 >> 16;
  $140 = (($128) - ($139))|0;
  $141 = (15 - ($ipc_cap$0))|0;
  $142 = (1024 + ($141<<2)|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (($143) + ($132))|0;
  $145 = (($144) + 3)|0;
  $146 = Math_imul($145, $144)|0;
  $147 = (($146|0) / 2)&-1;
  $148 = ((34184504 + (Math_imul($6, 2180052)|0)|0) + ($147<<1)|0);
  $149 = HEAP16[$148>>1]|0;
  $150 = $149 << 16 >> 16;
  $151 = (($140) + ($150))|0;
  $152 = (($151|0) / 32)&-1;
  $153 = (($ipc_move$0) + 7)|0;
  $154 = (34184312 + ($153<<2)|0);
  $155 = HEAP32[$154>>2]|0;
  if ($47) {
   $156 = (($152) - ($155))|0;
   $157 = (34184184 + ($106<<2)|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = (($156) - ($158))|0;
   $diff$0 = $159;
   $293 = ($turn|0)==(0);
   $294 = (0 - ($diff$0))|0;
   $diff$0$ = $293 ? $diff$0 : $294;
   STACKTOP = sp;return ($diff$0$|0);
  } else {
   $160 = (($155) + ($152))|0;
   $161 = (34184184 + ($106<<2)|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = (($160) + ($162))|0;
   $diff$0 = $163;
   $293 = ($turn|0)==(0);
   $294 = (0 - ($diff$0))|0;
   $diff$0$ = $293 ? $diff$0 : $294;
   STACKTOP = sp;return ($diff$0$|0);
  }
 }
 if (!($84)) {
  $164 = (($87) + ($9))|0;
  $165 = (($164) + 3)|0;
  $166 = Math_imul($165, $164)|0;
  $167 = (($166|0) / 2)&-1;
  $168 = ((34184504 + (Math_imul($2, 2180052)|0)|0) + ($167<<1)|0);
  $169 = HEAP16[$168>>1]|0;
  $170 = $169 << 16 >> 16;
  $171 = (($170) - ($94))|0;
  $172 = (($ipc_cap$0) + 15)|0;
  $173 = (1024 + ($172<<2)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = (($174) + ($9))|0;
  $176 = (($175) + 3)|0;
  $177 = Math_imul($176, $175)|0;
  $178 = (($177|0) / 2)&-1;
  $179 = ((34184504 + (Math_imul($2, 2180052)|0)|0) + ($178<<1)|0);
  $180 = HEAP16[$179>>1]|0;
  $181 = $180 << 16 >> 16;
  $182 = (($171) - ($181))|0;
  $183 = (15 - ($ipc_move$0))|0;
  $184 = (1024 + ($183<<2)|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = (80 - ($8))|0;
  $187 = (($185) + ($186))|0;
  $188 = (($187) + 3)|0;
  $189 = Math_imul($188, $187)|0;
  $190 = (($189|0) / 2)&-1;
  $191 = ((34184504 + (Math_imul($6, 2180052)|0)|0) + ($190<<1)|0);
  $192 = HEAP16[$191>>1]|0;
  $193 = $192 << 16 >> 16;
  $194 = (($182) + ($193))|0;
  $195 = (80 - ($9))|0;
  $196 = (($185) + ($195))|0;
  $197 = (($196) + 3)|0;
  $198 = Math_imul($197, $196)|0;
  $199 = (($198|0) / 2)&-1;
  $200 = ((34184504 + (Math_imul($6, 2180052)|0)|0) + ($199<<1)|0);
  $201 = HEAP16[$200>>1]|0;
  $202 = $201 << 16 >> 16;
  $203 = (($194) - ($202))|0;
  $204 = (15 - ($ipc_cap$0))|0;
  $205 = (1024 + ($204<<2)|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = (($206) + ($195))|0;
  $208 = (($207) + 3)|0;
  $209 = Math_imul($208, $207)|0;
  $210 = (($209|0) / 2)&-1;
  $211 = ((34184504 + (Math_imul($6, 2180052)|0)|0) + ($210<<1)|0);
  $212 = HEAP16[$211>>1]|0;
  $213 = $212 << 16 >> 16;
  $214 = (($203) + ($213))|0;
  $215 = (($214|0) / 32)&-1;
  $216 = (34184184 + ($172<<2)|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = (0 - ($217))|0;
  $219 = $47 ? $218 : $217;
  $220 = (($219) + ($215))|0;
  $diff$0 = $220;
  $293 = ($turn|0)==(0);
  $294 = (0 - ($diff$0))|0;
  $diff$0$ = $293 ? $diff$0 : $294;
  STACKTOP = sp;return ($diff$0$|0);
 }
 if ($83) {
  $221 = (($ipro_pc_move$0) + 15)|0;
  $222 = (1024 + ($221<<2)|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = (($223) + ($9))|0;
  $225 = (($224) + 3)|0;
  $226 = Math_imul($225, $224)|0;
  $227 = (($226|0) / 2)&-1;
  $228 = ((34184504 + (Math_imul($2, 2180052)|0)|0) + ($227<<1)|0);
  $229 = HEAP16[$228>>1]|0;
  $230 = $229 << 16 >> 16;
  $231 = (($230) - ($94))|0;
  $232 = (15 - ($ipc_move$0))|0;
  $233 = (1024 + ($232<<2)|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = (80 - ($8))|0;
  $236 = (($234) + ($235))|0;
  $237 = (($236) + 3)|0;
  $238 = Math_imul($237, $236)|0;
  $239 = (($238|0) / 2)&-1;
  $240 = ((34184504 + (Math_imul($6, 2180052)|0)|0) + ($239<<1)|0);
  $241 = HEAP16[$240>>1]|0;
  $242 = $241 << 16 >> 16;
  $243 = (($231) + ($242))|0;
  $244 = (15 - ($ipro_pc_move$0))|0;
  $245 = (1024 + ($244<<2)|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = (80 - ($9))|0;
  $248 = (($246) + ($247))|0;
  $249 = (($248) + 3)|0;
  $250 = Math_imul($249, $248)|0;
  $251 = (($250|0) / 2)&-1;
  $252 = ((34184504 + (Math_imul($6, 2180052)|0)|0) + ($251<<1)|0);
  $253 = HEAP16[$252>>1]|0;
  $254 = $253 << 16 >> 16;
  $255 = (($243) - ($254))|0;
  $256 = (($255|0) / 32)&-1;
  $257 = (($ipc_move$0) + 7)|0;
  $258 = (34184312 + ($257<<2)|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = (0 - ($259))|0;
  $261 = $47 ? $260 : $259;
  $262 = (($261) + ($256))|0;
  $diff$0 = $262;
  $293 = ($turn|0)==(0);
  $294 = (0 - ($diff$0))|0;
  $diff$0$ = $293 ? $diff$0 : $294;
  STACKTOP = sp;return ($diff$0$|0);
 } else {
  $263 = (($87) + ($9))|0;
  $264 = (($263) + 3)|0;
  $265 = Math_imul($264, $263)|0;
  $266 = (($265|0) / 2)&-1;
  $267 = ((34184504 + (Math_imul($2, 2180052)|0)|0) + ($266<<1)|0);
  $268 = HEAP16[$267>>1]|0;
  $269 = $268 << 16 >> 16;
  $270 = (($269) - ($94))|0;
  $271 = (15 - ($ipc_move$0))|0;
  $272 = (1024 + ($271<<2)|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = (80 - ($8))|0;
  $275 = (($273) + ($274))|0;
  $276 = (($275) + 3)|0;
  $277 = Math_imul($276, $275)|0;
  $278 = (($277|0) / 2)&-1;
  $279 = ((34184504 + (Math_imul($6, 2180052)|0)|0) + ($278<<1)|0);
  $280 = HEAP16[$279>>1]|0;
  $281 = $280 << 16 >> 16;
  $282 = (($270) + ($281))|0;
  $283 = (80 - ($9))|0;
  $284 = (($273) + ($283))|0;
  $285 = (($284) + 3)|0;
  $286 = Math_imul($285, $284)|0;
  $287 = (($286|0) / 2)&-1;
  $288 = ((34184504 + (Math_imul($6, 2180052)|0)|0) + ($287<<1)|0);
  $289 = HEAP16[$288>>1]|0;
  $290 = $289 << 16 >> 16;
  $291 = (($282) - ($290))|0;
  $292 = (($291|0) / 32)&-1;
  $diff$0 = $292;
  $293 = ($turn|0)==(0);
  $294 = (0 - ($diff$0))|0;
  $diff$0$ = $293 ? $diff$0 : $294;
  STACKTOP = sp;return ($diff$0$|0);
 }
 return 0|0;
}
function _eval_max_score($ptree,$move,$value,$turn,$diff) {
 $ptree = $ptree|0;
 $move = $move|0;
 $value = $value|0;
 $turn = $turn|0;
 $diff = $diff|0;
 var $$pn = 0, $$pn$in = 0, $$pn1 = 0, $$pn1$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ipc_cap$0 = 0, $score_mt$0 = 0, $score_mt$1 = 0, $score_mt$2 = 0, $score_mt$3 = 0, $score_mt$4 = 0, $score_sp$0 = 0;
 var $score_sp$1 = 0, $score_sp$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($value|0) / 32)&-1;
 $1 = $move & 16256;
 $2 = ($1>>>0)>(10240);
 $3 = (($0) + ($diff))|0;
 if ($2) {
  $4 = HEAP32[34181144>>2]|0;
  $5 = (($3) + 198)|0;
  $6 = (($5) + ($4))|0;
  $7 = ($turn|0)!=(0);
  $8 = (($ptree) + 508|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (0 - ($9))|0;
  $11 = $7 ? $10 : $9;
  $12 = HEAP32[34181152>>2]|0;
  $13 = (($12) + 793)|0;
  $14 = (($13) + ($11))|0;
  $score_mt$4 = $14;$score_sp$2 = $6;
  $47 = ($score_mt$4|0)<($score_sp$2|0);
  $48 = $47 ? $score_mt$4 : $score_sp$2;
  STACKTOP = sp;return ($48|0);
 }
 $15 = HEAP32[34181152>>2]|0;
 $16 = (($15) + 793)|0;
 $17 = ($turn|0)==(0);
 $18 = (($ptree) + 508|0);
 $19 = HEAP32[$18>>2]|0;
 if ($17) {
  $24 = (($16) + ($19))|0;
  $25 = $move >>> 19;
  $26 = $25 & 15;
  $ipc_cap$0 = $26;$score_mt$0 = $24;
 } else {
  $20 = (($16) - ($19))|0;
  $21 = $move >>> 19;
  $22 = $21 & 15;
  $23 = (0 - ($22))|0;
  $ipc_cap$0 = $23;$score_mt$0 = $20;
 }
 $27 = $move >>> 15;
 $28 = $27 & 15;
 $29 = ($28|0)==(8);
 $30 = ($ipc_cap$0|0)!=(0);
 if ($29) {
  if ($30) {
   $31 = (($ipc_cap$0) + 15)|0;
   $32 = (34184184 + ($31<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + ($score_mt$0))|0;
   $$pn1$in = 34181168;$score_mt$1 = $34;
  } else {
   $$pn1$in = 34181160;$score_mt$1 = $score_mt$0;
  }
  $$pn1 = HEAP32[$$pn1$in>>2]|0;
  $score_sp$0 = (($3) + 297)|0;
  $35 = (($score_sp$0) + ($$pn1))|0;
  $score_mt$4 = $score_mt$1;$score_sp$2 = $35;
  $47 = ($score_mt$4|0)<($score_sp$2|0);
  $48 = $47 ? $score_mt$4 : $score_sp$2;
  STACKTOP = sp;return ($48|0);
 }
 if ($30) {
  $36 = (($ipc_cap$0) + 15)|0;
  $37 = (34184184 + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + ($score_mt$0))|0;
  $$pn$in = 34181136;$score_mt$2 = $39;
 } else {
  $$pn$in = 34181128;$score_mt$2 = $score_mt$0;
 }
 $$pn = HEAP32[$$pn$in>>2]|0;
 $40 = $move & 16384;
 $41 = ($40|0)==(0);
 if ($41) {
  $score_mt$3 = $score_mt$2;
 } else {
  $42 = (($28) + 7)|0;
  $43 = (34184312 + ($42<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + ($score_mt$2))|0;
  $score_mt$3 = $45;
 }
 $score_sp$1 = (($3) + 198)|0;
 $46 = (($score_sp$1) + ($$pn))|0;
 $score_mt$4 = $score_mt$3;$score_sp$2 = $46;
 $47 = ($score_mt$4|0)<($score_sp$2|0);
 $48 = $47 ? $score_mt$4 : $score_sp$2;
 STACKTOP = sp;return ($48|0);
}
function _solve_problems($ptree,$nposition) {
 $ptree = $ptree|0;
 $nposition = $nposition|0;
 var $$0 = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $8 = 0, $9 = 0, $failure$011 = 0, $failure$1 = 0, $ianswer$05 = 0;
 var $move = 0, $or$cond = 0, $or$cond1 = 0, $success$010 = 0, $success$1 = 0, $te0 = 0, $te1 = 0, $uposition$09 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr18 = 0;
 var $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer29 = sp + 88|0;
 $vararg_buffer26 = sp + 8|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer15 = sp + 32|0;
 $vararg_buffer13 = sp + 80|0;
 $vararg_buffer10 = sp;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 48|0;
 $vararg_buffer2 = sp + 40|0;
 $vararg_buffer = sp + 16|0;
 $move = sp + 104|0;
 $te1 = sp + 100|0;
 $te0 = sp + 96|0;
 $0 = (_get_elapsed($te0)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($nposition|0)==(0);
 L4: do {
  if ($2) {
   $66 = 0;$69 = 0;
  } else {
   $3 = HEAP32[_stdout>>2]|0;
   $4 = (($ptree) + 2648|0);
   $49 = 0;$50 = 0;$failure$011 = 0;$success$010 = 0;$uposition$09 = 0;
   L6: while(1) {
    $5 = (_in_CSA($ptree,33555976,0,40)|0);
    $6 = ($5|0)<(0);
    if ($6) {
     $$0 = $5;
     label = 27;
     break;
    }
    $7 = ($5|0)>(2);
    if ($7) {
     label = 6;
     break;
    }
    _out(221116432,$vararg_buffer2);
    $ianswer$05 = 0;
    while(1) {
     $11 = (33555976 + ($ianswer$05<<3)|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(0);
     if ($13) {
      label = 16;
      break;
     }
     $14 = HEAP32[34184024>>2]|0;
     $15 = ($14|0)==(0);
     $16 = ($12<<24>>24)==(45);
     $or$cond = $15 | $16;
     if (!($or$cond)) {
      label = 12;
      break L6;
     }
     $$not = $15 ^ 1;
     $17 = ($12<<24>>24)==(43);
     $or$cond1 = $17 | $$not;
     if (!($or$cond1)) {
      label = 12;
      break L6;
     }
     $20 = ((33555976 + ($ianswer$05<<3)|0) + 1|0);
     $21 = (_interpret_CSA_move($ptree,$move,$20)|0);
     $22 = ($21|0)<(0);
     if ($22) {
      $$0 = $21;
      label = 27;
      break L6;
     }
     $23 = HEAP32[$move>>2]|0;
     $24 = (_make_move_root($ptree,$23,44)|0);
     $25 = ($24|0)<(0);
     if ($25) {
      $$0 = $24;
      label = 27;
      break L6;
     }
     HEAP32[$vararg_buffer10>>2] = $11;
     _out(221116488,$vararg_buffer10);
     $26 = (($ianswer$05) + 1)|0;
     $27 = ($26|0)<(8);
     if ($27) {
      $ianswer$05 = $26;
     } else {
      label = 8;
      break;
     }
    }
    if ((label|0) == 8) {
     label = 0;
     _out(221116496,$vararg_buffer4);
    }
    else if ((label|0) == 16) {
     label = 0;
     _out(221116496,$vararg_buffer13);
     $28 = ($ianswer$05|0)==(0);
     if ($28) {
      label = 17;
      break;
     }
    }
    $31 = (_out_board($ptree,$3,0,0)|0);
    $32 = ($31|0)<(0);
    if ($32) {
     $$0 = $31;
     label = 27;
     break;
    }
    $33 = (_get_elapsed(34181040)|0);
    $34 = ($33|0)<(0);
    if ($34) {
     $$0 = -1;
     label = 27;
     break;
    }
    $35 = HEAP32[34181040>>2]|0;
    HEAP32[34181048>>2] = $35;
    $36 = HEAP32[34180920>>2]|0;
    $37 = $36 | 1048960;
    HEAP32[34180920>>2] = $37;
    $38 = (_iterate($ptree)|0);
    HEAP32[34180920>>2] = $36;
    $39 = ($38|0)<(0);
    if ($39) {
     $$0 = $38;
     label = 27;
     break;
    }
    $40 = ($38|0)!=(0);
    $41 = $40&1;
    $success$1 = (($41) + ($success$010))|0;
    $42 = $41 ^ 1;
    $failure$1 = (($42) + ($failure$011))|0;
    $43 = $4;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($43) + 4)|0;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    $51 = (_i64Add(($45|0),($48|0),($49|0),($50|0))|0);
    $52 = tempRet0;
    $53 = HEAP32[((33570872 + 4|0))>>2]|0;
    $54 = (_str_CSA_move($53)|0);
    $55 = (($failure$1) + ($success$1))|0;
    $56 = $40 ? 221116600 : 221116608;
    HEAP32[$vararg_buffer19>>2] = $55;
    $vararg_ptr22 = (($vararg_buffer19) + 4|0);
    HEAP32[$vararg_ptr22>>2] = $54;
    $vararg_ptr23 = (($vararg_buffer19) + 8|0);
    HEAP32[$vararg_ptr23>>2] = $56;
    $vararg_ptr24 = (($vararg_buffer19) + 12|0);
    HEAP32[$vararg_ptr24>>2] = $success$1;
    $vararg_ptr25 = (($vararg_buffer19) + 16|0);
    HEAP32[$vararg_ptr25>>2] = $failure$1;
    _out(221116536,$vararg_buffer19);
    if ((($5|0) == 1)) {
     $66 = $51;$69 = $52;
     break L4;
    } else if ((($5|0) == 0)) {
     $57 = (_record_wind(33555976)|0);
     $58 = ($57|0)<(0);
     if ($58) {
      $$0 = $57;
      label = 27;
      break;
     }
     $59 = ($57|0)==(1);
     if ($59) {
      $66 = $51;$69 = $52;
      break L4;
     }
    }
    $60 = (($uposition$09) + 1)|0;
    $61 = ($60>>>0)<($nposition>>>0);
    if ($61) {
     $49 = $51;$50 = $52;$failure$011 = $failure$1;$success$010 = $success$1;$uposition$09 = $60;
    } else {
     $66 = $51;$69 = $52;
     break L4;
    }
   }
   if ((label|0) == 6) {
    $8 = HEAP32[144>>2]|0;
    $9 = HEAP32[((33555976 + 588|0))>>2]|0;
    $10 = HEAP32[368>>2]|0;
    HEAP32[$vararg_buffer>>2] = $9;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $10;
    (_snprintf(220525640,512,$8,$vararg_buffer)|0);
    HEAP32[220526664>>2] = 220525640;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    $18 = HEAP32[144>>2]|0;
    $19 = HEAP32[((33555976 + 588|0))>>2]|0;
    HEAP32[$vararg_buffer6>>2] = $19;
    $vararg_ptr9 = (($vararg_buffer6) + 4|0);
    HEAP32[$vararg_ptr9>>2] = 221116448;
    (_snprintf(220525640,512,$18,$vararg_buffer6)|0);
    HEAP32[220526664>>2] = 220525640;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 17) {
    $29 = HEAP32[144>>2]|0;
    $30 = HEAP32[((33555976 + 588|0))>>2]|0;
    HEAP32[$vararg_buffer15>>2] = $30;
    $vararg_ptr18 = (($vararg_buffer15) + 4|0);
    HEAP32[$vararg_ptr18>>2] = 221116504;
    (_snprintf(220525640,512,$29,$vararg_buffer15)|0);
    HEAP32[220526664>>2] = 220525640;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 27) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $62 = (_get_elapsed($te1)|0);
 $63 = ($62|0)<(0);
 if ($63) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $64 = $vararg_buffer26;
 $65 = $64;
 HEAP32[$65>>2] = $66;
 $67 = (($64) + 4)|0;
 $68 = $67;
 HEAP32[$68>>2] = $69;
 _out(221116624,$vararg_buffer26);
 $70 = HEAP32[$te1>>2]|0;
 $71 = HEAP32[$te0>>2]|0;
 $72 = (($70) - ($71))|0;
 $73 = (+($72>>>0));
 $74 = $73 / 1000.0;
 HEAPF64[tempDoublePtr>>3]=$74;HEAP32[$vararg_buffer29>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer29+4>>2]=HEAP32[tempDoublePtr+4>>2];
 _out(221116648,$vararg_buffer29);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _solve_mate_problems($ptree,$nposition) {
 $ptree = $ptree|0;
 $nposition = $nposition|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $record_move = 0, $uposition$04 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $record_move = sp + 8|0;
 $0 = ($nposition|0)==(0);
 L1: do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = (($ptree) + 572073|0);
   $uposition$04 = 0;
   L3: while(1) {
    while(1) {
     $2 = (_in_CSA($ptree,33555976,$record_move,104)|0);
     $3 = ($2|0)<(0);
     if ($3) {
      break L3;
     }
     $5 = ($2|0)>(0);
     if ($5) {
      break;
     }
     $6 = HEAP32[$record_move>>2]|0;
     $7 = (_make_move_root($ptree,$6,0)|0);
     $8 = ($7|0)<(0);
     if ($8) {
      $$0 = $7;
      break L1;
     }
    }
    $9 = HEAP8[$1>>0]|0;
    $10 = ($9<<24>>24)!=(0);
    $11 = $10 ? 221116688 : 221116704;
    HEAP32[$vararg_buffer>>2] = $uposition$04;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $11;
    _out(221116672,$vararg_buffer);
    $12 = HEAP32[34184024>>2]|0;
    $13 = (_dfpn($ptree,$12,1)|0);
    $14 = ($13|0)<(0);
    if ($14) {
     $$0 = $13;
     break L1;
    }
    if ((($2|0) == 1)) {
     $$0 = 1;
     break L1;
    } else if ((($2|0) == 0)) {
     $15 = (_record_wind(33555976)|0);
     $16 = ($15|0)<(0);
     if ($16) {
      $$0 = $15;
      break L1;
     }
     $17 = ($15|0)==(1);
     if ($17) {
      $$0 = 1;
      break L1;
     }
    }
    $18 = (($uposition$04) + 1)|0;
    $19 = ($18>>>0)<($nposition>>>0);
    if ($19) {
     $uposition$04 = $18;
    } else {
     $$0 = 1;
     break L1;
    }
   }
   $4 = HEAP32[432>>2]|0;
   HEAP32[220526664>>2] = $4;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ponder($ptree) {
 $ptree = $ptree|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0, $ispos4 = 0, $neg = 0, $neg5 = 0, $notlhs = 0, $notrhs = 0;
 var $or$cond$not = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 16|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer5 = sp + 48|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 24|0;
 $0 = HEAP32[34180920>>2]|0;
 $1 = $0 & 3145743;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[34184072>>2]|0;
 $ispos = ($3|0)>(-1);
 $neg = (0 - ($3))|0;
 $4 = $ispos ? $3 : $neg;
 $5 = HEAP32[((33556568 + 584|0))>>2]|0;
 $notlhs = ($4|0)>(30000);
 $notrhs = ($5|0)==(0);
 $or$cond$not = $notrhs | $notlhs;
 $6 = HEAP32[34181008>>2]|0;
 $7 = ($6|0)==(-1);
 $or$cond3 = $or$cond$not | $7;
 if ($or$cond3) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (_gen_legal_moves($ptree,34181176,1)|0);
 HEAP32[34183976>>2] = $8;
 $9 = (_get_elapsed(34181040)|0);
 $10 = ($9|0)<(0);
 if ($10) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 _out(221116712,$vararg_buffer);
 $11 = HEAP32[34180920>>2]|0;
 $12 = $11 | 32;
 HEAP32[34180920>>2] = $12;
 $13 = (_iterate($ptree)|0);
 $14 = HEAP32[34180920>>2]|0;
 $15 = $14 & -33;
 HEAP32[34180920>>2] = $15;
 $16 = ($13|0)<(0);
 if ($16) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = $14 & 1048;
 $18 = ($17|0)==(0);
 if (!($18)) {
  _out(221116744,$vararg_buffer1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = HEAP32[34184072>>2]|0;
 $ispos4 = ($19|0)>(-1);
 $neg5 = (0 - ($19))|0;
 $20 = $ispos4 ? $19 : $neg5;
 $21 = ($20|0)>(30000);
 if ($21) {
  _out(221116744,$vararg_buffer3);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = HEAP32[((33570872 + 4|0))>>2]|0;
 HEAP32[34181088>>2] = $22;
 $23 = (_str_CSA_move($22)|0);
 $24 = HEAP32[34184024>>2]|0;
 $25 = (984 + ($24)|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26 << 24 >> 24;
 $28 = HEAP32[34184072>>2]|0;
 $29 = (+($28|0));
 $30 = $29 / 100.0;
 HEAP32[$vararg_buffer5>>2] = $27;
 $vararg_ptr7 = (($vararg_buffer5) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $23;
 $vararg_ptr8 = (($vararg_buffer5) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$30;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
 _out(221116760,$vararg_buffer5);
 $31 = (_make_move_root($ptree,$22,4)|0);
 $32 = ($31|0)<(0);
 if ($32) {
  _out(221116744,$vararg_buffer9);
  $$0 = $31;
  STACKTOP = sp;return ($$0|0);
 }
 $33 = HEAP32[34180920>>2]|0;
 $34 = $33 & 15;
 $35 = ($34|0)==(0);
 if (!($35)) {
  _out(221116744,$vararg_buffer11);
  $36 = (_unmake_move_root($ptree)|0);
  $$0 = $36;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (_get_elapsed(34181040)|0);
 $38 = ($37|0)<(0);
 if ($38) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $39 = HEAP32[34180920>>2]|0;
 $40 = $39 | 64;
 HEAP32[34180920>>2] = $40;
 $41 = (_iterate($ptree)|0);
 $42 = HEAP32[34180920>>2]|0;
 $43 = $42 & 128;
 $44 = ($43|0)==(0);
 if ($44) {
  _out(221116744,$vararg_buffer13);
  $49 = HEAP32[34180920>>2]|0;
  $50 = $49 & -65;
  HEAP32[34180920>>2] = $50;
  $51 = (_unmake_move_root($ptree)|0);
  $$0 = $51;
  STACKTOP = sp;return ($$0|0);
 }
 $45 = $42 & -129;
 HEAP32[34180920>>2] = $45;
 $46 = ($41|0)<(0);
 if ($46) {
  $$0 = $41;
  STACKTOP = sp;return ($$0|0);
 }
 $47 = (_com_turn_start($ptree,1)|0);
 $48 = ($47|0)<(0);
 $$ = $48 ? $47 : 2;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _analyze($ptree) {
 $ptree = $ptree|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0, $neg = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[34180920>>2]|0;
 $1 = $0 & 15;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = HEAP32[221102520>>2]|0;
  $4 = ($3|0)==(-1);
  if ($4) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $5 = HEAP32[221102528>>2]|0;
  $6 = HEAP32[221102536>>2]|0;
  $7 = ($6|0)==(2147483647);
  $8 = $7 ? 221116832 : 221116840;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = -32600;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $8;
  (_sckt_out($3,221116792,$vararg_buffer)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (_get_elapsed(34181040)|0);
 $10 = ($9|0)<(0);
 if ($10) {
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = HEAP32[34180920>>2]|0;
 $12 = $11 | 64;
 HEAP32[34180920>>2] = $12;
 $13 = (_iterate($ptree)|0);
 $14 = HEAP32[34180920>>2]|0;
 $15 = $14 & -65;
 HEAP32[34180920>>2] = $15;
 $16 = HEAP32[34184072>>2]|0;
 $ispos = ($16|0)>(-1);
 $neg = (0 - ($16))|0;
 $17 = $ispos ? $16 : $neg;
 $18 = ($17|0)>(30000);
 $19 = HEAP32[221102520>>2]|0;
 $20 = ($19|0)!=(-1);
 $or$cond = $18 & $20;
 if (!($or$cond)) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = HEAP32[221102528>>2]|0;
 $22 = HEAP32[221102536>>2]|0;
 $23 = ($22|0)==(2147483647);
 $24 = $23 ? 221116832 : 221116840;
 HEAP32[$vararg_buffer3>>2] = $21;
 $vararg_ptr6 = (($vararg_buffer3) + 4|0);
 HEAP32[$vararg_ptr6>>2] = $24;
 (_sckt_out($19,221116848,$vararg_buffer3)|0);
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _shutdown_all() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[221102520>>2]|0;
 $1 = ($0|0)==(-1);
 do {
  if (!($1)) {
   _out_warning(221117136,$vararg_buffer);
   $2 = (_shutdown(($0|0),0)|0);
   $3 = ($2|0)==(-1);
   if ($3) {
    HEAP32[220526664>>2] = 221117160;
    break;
   }
   while(1) {
    $4 = (_recv(($0|0),(220525640|0),512,0)|0);
    if ((($4|0) == -1)) {
     label = 5;
     break;
    } else if ((($4|0) == 0)) {
     break;
    }
   }
   if ((label|0) == 5) {
    HEAP32[220526664>>2] = 221117184;
    break;
   }
   $5 = (_close(($0|0))|0);
   $6 = ($5|0)==(-1);
   if ($6) {
    HEAP32[220526664>>2] = 221117200;
   }
  }
 } while(0);
 HEAP32[221102520>>2] = -1;
 $7 = HEAP32[221099712>>2]|0;
 $8 = ($7|0)==(-1);
 do {
  if (!($8)) {
   _out_warning(221117136,$vararg_buffer1);
   $9 = (_shutdown(($7|0),0)|0);
   $10 = ($9|0)==(-1);
   if ($10) {
    HEAP32[220526664>>2] = 221117160;
    break;
   }
   while(1) {
    $11 = (_recv(($7|0),(220525640|0),512,0)|0);
    if ((($11|0) == -1)) {
     label = 12;
     break;
    } else if ((($11|0) == 0)) {
     break;
    }
   }
   if ((label|0) == 12) {
    HEAP32[220526664>>2] = 221117184;
    break;
   }
   $12 = (_close(($7|0))|0);
   $13 = ($12|0)==(-1);
   if ($13) {
    HEAP32[220526664>>2] = 221117200;
   }
  }
 } while(0);
 HEAP32[221099712>>2] = -1;
 $14 = HEAP32[220526680>>2]|0;
 $15 = ($14|0)==(-1);
 if ($15) {
  HEAP32[220526680>>2] = -1;
  STACKTOP = sp;return;
 }
 _out_warning(221117136,$vararg_buffer3);
 $16 = (_shutdown(($14|0),0)|0);
 $17 = ($16|0)==(-1);
 if ($17) {
  HEAP32[220526664>>2] = 221117160;
  HEAP32[220526680>>2] = -1;
  STACKTOP = sp;return;
 }
 while(1) {
  $18 = (_recv(($14|0),(220525640|0),512,0)|0);
  if ((($18|0) == -1)) {
   label = 19;
   break;
  } else if ((($18|0) == 0)) {
   break;
  }
 }
 if ((label|0) == 19) {
  HEAP32[220526664>>2] = 221117184;
  HEAP32[220526680>>2] = -1;
  STACKTOP = sp;return;
 }
 $19 = (_close(($14|0))|0);
 $20 = ($19|0)==(-1);
 if (!($20)) {
  HEAP32[220526680>>2] = -1;
  STACKTOP = sp;return;
 }
 HEAP32[220526664>>2] = 221117200;
 HEAP32[220526680>>2] = -1;
 STACKTOP = sp;return;
}
function _client_next_game($ptree,$str_addr,$iport) {
 $ptree = $ptree|0;
 $str_addr = $str_addr|0;
 $iport = $iport|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf1 = 0, $buf2 = 0, $my_turn$0$ph = 0, $str_name1$0$ph = 0, $str_name1$0$ph2 = 0, $str_name2$0$ph = 0, $str_name2$0$ph3 = 0, $str_name2$0$ph5 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0;
 var $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer2 = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $buf1 = sp + 296|0;
 $buf2 = sp + 40|0;
 HEAP8[220526152>>0] = 0;
 $0 = (_sckt_connect($str_addr,$iport)|0);
 HEAP32[221099712>>2] = $0;
 $1 = ($0|0)==(-1);
 if ($1) {
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($buf2) + 255|0);
 $3 = (($buf1) + 255|0);
 $4 = $0;
 L4: while(1) {
  HEAP32[$vararg_buffer>>2] = 221099200;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 221099456;
  $5 = (_sckt_out($4,221116864,$vararg_buffer)|0);
  $6 = ($5|0)<(0);
  if ($6) {
   $$0 = $5;
   label = 28;
   break;
  }
  _out(221116880,$vararg_buffer2);
  $my_turn$0$ph = 0;$str_name1$0$ph = 0;$str_name2$0$ph = 0;
  L7: while(1) {
   $str_name1$0$ph2 = $str_name1$0$ph;$str_name2$0$ph3 = $str_name2$0$ph;
   while(1) {
    $str_name2$0$ph5 = $str_name2$0$ph3;
    L11: while(1) {
     while(1) {
      $7 = (_next_cmdline(1)|0);
      $8 = ($7|0)<(0);
      if ($8) {
       $$0 = $7;
       label = 28;
       break L4;
      }
      $9 = HEAP32[34180920>>2]|0;
      $10 = $9 & 16;
      $11 = ($10|0)==(0);
      if (!($11)) {
       $$0 = 1;
       label = 28;
       break L4;
      }
      $12 = (_strcmp(220525128,221116920)|0);
      $13 = ($12|0)==(0);
      if ($13) {
       break L7;
      }
      $14 = (_strcmp(220525128,221116944)|0);
      $15 = ($14|0)==(0);
      if ($15) {
       $my_turn$0$ph = 1;$str_name1$0$ph = $str_name1$0$ph2;$str_name2$0$ph = $str_name2$0$ph5;
       continue L7;
      }
      $16 = (_memcmp(220525128,221116960,6)|0);
      $17 = ($16|0)==(0);
      if ($17) {
       break L11;
      }
      $18 = (_memcmp(220525128,221116968,6)|0);
      $19 = ($18|0)==(0);
      if ($19) {
       break;
      }
     }
     (_strncpy(($buf2|0),(((220525128 + 6|0))|0),255)|0);
     HEAP8[$2>>0] = 0;
     $str_name2$0$ph5 = $buf2;
    }
    (_strncpy(($buf1|0),(((220525128 + 6|0))|0),255)|0);
    HEAP8[$3>>0] = 0;
    $str_name1$0$ph2 = $buf1;$str_name2$0$ph3 = $str_name2$0$ph5;
   }
  }
  $20 = HEAP32[221099712>>2]|0;
  $21 = (_sckt_out($20,221116976,$vararg_buffer4)|0);
  $22 = ($21|0)<(0);
  if ($22) {
   $$0 = -2;
   label = 28;
   break;
  }
  $23 = (_next_cmdline(1)|0);
  $24 = ($23|0)<(0);
  if ($24) {
   $$0 = $23;
   label = 28;
   break;
  }
  $25 = HEAP32[34180920>>2]|0;
  $26 = $25 & 16;
  $27 = ($26|0)==(0);
  if (!($27)) {
   $$0 = 1;
   label = 28;
   break;
  }
  $28 = (_memcmp(220525128,221116984,7)|0);
  $29 = ($28|0)==(0);
  if (!($29)) {
   label = 21;
   break;
  }
  _shutdown_all();
  HEAP8[220526152>>0] = 0;
  $30 = (_sckt_connect($str_addr,$iport)|0);
  HEAP32[221099712>>2] = $30;
  $31 = ($30|0)==(-1);
  if ($31) {
   $$0 = -2;
   label = 28;
   break;
  } else {
   $4 = $30;
  }
 }
 if ((label|0) == 21) {
  $32 = (_memcmp(220525128,221116992,6)|0);
  $33 = ($32|0)==(0);
  if (!($33)) {
   $34 = HEAP32[784>>2]|0;
   HEAP32[220526664>>2] = $34;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  $35 = (_ini_game($ptree,1424,2,$str_name1$0$ph2,$str_name2$0$ph5)|0);
  $36 = ($35|0)<(0);
  if ($36) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $37 = (_get_elapsed(34181048)|0);
  $38 = ($37|0)<(0);
  if ($38) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[221098912>>2] = $my_turn$0$ph;
  $39 = HEAP32[221098920>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[221098920>>2] = $40;
  HEAP32[$vararg_buffer6>>2] = $40;
  _out(221117000,$vararg_buffer6);
  $41 = (984 + ($my_turn$0$ph)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42 << 24 >> 24;
  HEAP32[$vararg_buffer9>>2] = $43;
  _out(221117032,$vararg_buffer9);
  $44 = HEAP32[34184024>>2]|0;
  $45 = ($my_turn$0$ph|0)==($44|0);
  if ($45) {
   $46 = (_com_turn_start($ptree,0)|0);
   $47 = ($46|0)<(0);
   if ($47) {
    $$0 = $46;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 28) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sckt_connect($str_addr,$iport) {
 $str_addr = $str_addr|0;
 $iport = $iport|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sin = 0;
 var $ul_addr$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $sin = sp + 24|0;
 $0 = (_inet_addr(($str_addr|0))|0);
 $1 = ($0|0)==(-1);
 do {
  if ($1) {
   $2 = (_gethostbyname(($str_addr|0))|0);
   $3 = ($2|0)==(0|0);
   if (!($3)) {
    $4 = (($2) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = HEAP32[$5>>2]|0;
    $7 = HEAP32[$6>>2]|0;
    $ul_addr$0 = $7;
    break;
   }
   HEAP32[220526664>>2] = 221117048;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $ul_addr$0 = $0;
  }
 } while(0);
 $8 = (_socket(2,1,0)|0);
 $9 = ($8|0)==(-1);
 if ($9) {
  HEAP32[220526664>>2] = 221117072;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP16[$sin>>1] = 2;
 $10 = (($sin) + 4|0);
 HEAP32[$10>>2] = $ul_addr$0;
 $11 = $iport&65535;
 $12 = (_htons(($11|0))|0);
 $13 = (($sin) + 2|0);
 HEAP16[$13>>1] = $12;
 $14 = (_connect(($8|0),($sin|0),16)|0);
 $15 = ($14|0)==(-1);
 if (!($15)) {
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 _out(221117088,$vararg_buffer);
 while(1) {
  (_sleep(10)|0);
  HEAP16[$sin>>1] = 2;
  HEAP32[$10>>2] = $ul_addr$0;
  HEAP16[$13>>1] = $12;
  $16 = (_connect(($8|0),($sin|0),16)|0);
  $17 = ($16|0)==(-1);
  if (!($17)) {
   break;
  }
  _out(221117120,$vararg_buffer1);
 }
 _out(221117128,$vararg_buffer3);
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function _sckt_out($sd,$fmt,$varargs) {
 $sd = $sd|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg = 0, $buf = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 24|0;
 $arg = sp + 8|0;
 HEAP32[$arg>>2] = $varargs;
 $0 = (_vsnprintf($buf,256,$fmt,$arg)|0);
 $1 = ($0>>>0)>(255);
 if ($1) {
  HEAP32[220526664>>2] = 221117432;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$vararg_buffer>>2] = $buf;
 _out(221117464,$vararg_buffer);
 $2 = (_send(($sd|0),($buf|0),($0|0),0)|0);
 $3 = ($2|0)==(-1);
 if ($3) {
  HEAP32[220526664>>2] = 221117360;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $4 = (_get_elapsed(221098904)|0);
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sckt_recv_all($sd) {
 $sd = $sd|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 while(1) {
  $0 = (_recv(($sd|0),(220525640|0),512,0)|0);
  if ((($0|0) == 0) | (($0|0) == -1)) {
   break;
  }
 }
 STACKTOP = sp;return 1;
}
function _sckt_check($sd) {
 $sd = $sd|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $readfds = 0, $tv = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tv = sp + 128|0;
 $readfds = sp;
 $0 = (($tv) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$tv>>2] = 0;
 dest=$readfds+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $1 = $sd & 31;
 $2 = 1 << $1;
 $3 = $sd >>> 5;
 $4 = (($readfds) + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 | $2;
 HEAP32[$4>>2] = $6;
 $7 = (($sd) + 1)|0;
 $8 = (_select(($7|0),($readfds|0),(0|0),(0|0),($tv|0))|0);
 $9 = ($8|0)==(-1);
 if (!($9)) {
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[220526664>>2] = 221117216;
 $$0 = -2;
 STACKTOP = sp;return ($$0|0);
}
function _sckt_in($sd,$str,$n) {
 $sd = $sd|0;
 $str = $str|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $readfds = 0, $tv = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $tv = sp + 176|0;
 $readfds = sp + 48|0;
 $0 = (($tv) + 4|0);
 $1 = $sd & 31;
 $2 = 1 << $1;
 $3 = $sd >>> 5;
 $4 = (($readfds) + ($3<<2)|0);
 $5 = (($sd) + 1)|0;
 while(1) {
  _out(221117264,$vararg_buffer);
  HEAP32[$tv>>2] = 180;
  HEAP32[$0>>2] = 0;
  dest=$readfds+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $6 = HEAP32[$4>>2]|0;
  $7 = $6 | $2;
  HEAP32[$4>>2] = $7;
  $8 = (_select(($5|0),($readfds|0),(0|0),(0|0),($tv|0))|0);
  if ((($8|0) == -1)) {
   label = 3;
   break;
  } else if (!((($8|0) == 0))) {
   label = 4;
   break;
  }
  _out(221117344,$vararg_buffer3);
  $12 = (_sckt_out($sd,221117128,$vararg_buffer5)|0);
  $13 = ($12|0)==(-1);
  if ($13) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 3) {
  HEAP32[220526664>>2] = 221117288;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 4) {
  _out(221117336,$vararg_buffer1);
  $9 = (($n) + -1)|0;
  $10 = (_recv(($sd|0),($str|0),($9|0),0)|0);
  $11 = ($10|0)==(-1);
  if ($11) {
   HEAP32[220526664>>2] = 221117376;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = (($str) + ($10)|0);
  HEAP8[$14>>0] = 0;
  $15 = ($10|0)==(0);
  if ($15) {
   _out(221117392,$vararg_buffer7);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   HEAP32[$vararg_buffer9>>2] = $str;
   _out(221117416,$vararg_buffer9);
   $$0 = $10;
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 6) {
  HEAP32[220526664>>2] = 221117360;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _is_mate_in3ply($ptree,$turn,$ply) {
 $ptree = $ptree|0;
 $turn = $turn|0;
 $ply = $ply|0;
 var $$ = 0, $$0 = 0, $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $flag_skip$0$$ = 0, $flag_skip$0$ph = 0, $move$0$i = 0, $not$ = 0, $not$7 = 0, $not$8 = 0, $ptree$idx1$val = 0, $ptree$idx3$val = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $ptree;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $2 & 524287;
 $7 = (221117496 + ($6<<3)|0);
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = $10 & -524288;
 $15 = $13 ^ $10;
 $16 = $2 & -524288;
 $17 = (($ptree) + 500|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_bitshift64Shl(($18|0),0,42)|0);
 $20 = tempRet0;
 $21 = (_bitshift64Shl(($turn|0),0,63)|0);
 $22 = tempRet0;
 $23 = $16 ^ $21;
 $24 = $5 ^ $22;
 $25 = $23 ^ $19;
 $26 = $24 ^ $20;
 $27 = ($14|0)==($25|0);
 $28 = ($15|0)==($26|0);
 $29 = $27 & $28;
 if ($29) {
  $30 = $10 & 524287;
  $31 = ($30|0)==(0);
  if ($31) {
   $move$0$i = 0;
  } else {
   $32 = ($turn|0)!=(0);
   $33 = $10 & 127;
   $34 = ((($ptree) + ($33)|0) + 512|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35 << 24 >> 24;
   $37 = (0 - ($36))|0;
   $$sink$i = $32 ? $36 : $37;
   $38 = $$sink$i << 19;
   $39 = $38 | $30;
   $move$0$i = $39;
  }
  $40 = ((($ptree) + ($ply<<2)|0) + 142516|0);
  HEAP32[$40>>2] = $move$0$i;
  $not$ = ($move$0$i|0)!=(0);
  $$ = $not$&1;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 $41 = ($ply|0)>(125);
 if ($41) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $42 = (($ply) + -1)|0;
 $43 = ((($ptree) + ($42<<2)|0) + 2656|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($ptree) + ($ply<<5)|0) + 3168|0);
 HEAP32[$45>>2] = $44;
 $46 = ($turn|0)!=(0);
 $47 = HEAP32[$43>>2]|0;
 if ($46) {
  $48 = (_w_gen_checks($ptree,$47)|0);
  $51 = $48;
 } else {
  $49 = (_b_gen_checks($ptree,$47)|0);
  $51 = $49;
 }
 $50 = ((($ptree) + ($ply<<2)|0) + 2656|0);
 HEAP32[$50>>2] = $51;
 $52 = ((($ptree) + ($ply<<2)|0) + 142516|0);
 $53 = (($ptree) + 594|0);
 $54 = $turn ^ 1;
 $55 = (($ply) + 1)|0;
 $56 = ((($ptree) + ($55<<2)|0) + 142516|0);
 $57 = (($ptree) + 593|0);
 $flag_skip$0$ph = 0;
 L15: while(1) {
  while(1) {
   $58 = HEAP32[$45>>2]|0;
   $59 = HEAP32[$50>>2]|0;
   $60 = ($58|0)==($59|0);
   if ($60) {
    label = 24;
    break L15;
   }
   $61 = (($58) + 4|0);
   HEAP32[$45>>2] = $61;
   $62 = HEAP32[$58>>2]|0;
   HEAP32[$52>>2] = $62;
   $63 = $62 & 1073741824;
   $64 = ($flag_skip$0$ph|0)==(0);
   $not$7 = ($63|0)!=(0);
   $65 = $64 | $not$7;
   if ($65) {
    break;
   }
  }
  do {
   if ($46) {
    _make_move_w($ptree,$62,$ply);
    $66 = HEAP8[$53>>0]|0;
    $67 = $66&255;
    $68 = (_is_white_attacked($ptree,$67)|0);
    $69 = ($68|0)==(0);
    if ($69) {
     $76 = (_mate3_and($ptree,$54,$55,0)|0);
     $77 = HEAP32[$52>>2]|0;
     _unmake_move_w($ptree,$77,$ply);
     $81 = $76;
     break;
    } else {
     $74 = HEAP32[$52>>2]|0;
     _unmake_move_w($ptree,$74,$ply);
     $flag_skip$0$ph = 0;
     continue L15;
    }
   } else {
    _make_move_b($ptree,$62,$ply);
    $70 = HEAP8[$57>>0]|0;
    $71 = $70&255;
    $72 = (_is_black_attacked($ptree,$71)|0);
    $73 = ($72|0)==(0);
    if ($73) {
     $78 = (_mate3_and($ptree,$54,$55,0)|0);
     $79 = HEAP32[$52>>2]|0;
     _unmake_move_b($ptree,$79,$ply);
     $81 = $78;
     break;
    } else {
     $75 = HEAP32[$52>>2]|0;
     _unmake_move_b($ptree,$75,$ply);
     $flag_skip$0$ph = 0;
     continue L15;
    }
   }
  } while(0);
  $80 = ($81|0)==(0);
  $82 = HEAP32[$52>>2]|0;
  if (!($80)) {
   label = 21;
   break;
  }
  $105 = ($82|0)<(0);
  if (!($105)) {
   $flag_skip$0$ph = 0;
   continue;
  }
  $106 = HEAP32[$56>>2]|0;
  $107 = $106 ^ $82;
  $108 = $107 & 127;
  $not$8 = ($108|0)!=(0);
  $flag_skip$0$$ = $not$8&1;
  $flag_skip$0$ph = $flag_skip$0$$;
 }
 if ((label|0) == 21) {
  $83 = $ptree;
  $84 = $83;
  $85 = HEAP32[$84>>2]|0;
  $86 = (($83) + 4)|0;
  $87 = $86;
  $88 = HEAP32[$87>>2]|0;
  $ptree$idx3$val = HEAP32[$17>>2]|0;
  $89 = $85 & -524288;
  $90 = $82 & 524287;
  $91 = $89 | $90;
  $92 = (_bitshift64Shl(($ptree$idx3$val|0),0,42)|0);
  $93 = tempRet0;
  $94 = $91 ^ $21;
  $95 = $88 ^ $22;
  $96 = $94 ^ $92;
  $97 = $95 ^ $93;
  $98 = $97 ^ $91;
  $99 = $85 & 524287;
  $100 = (221117496 + ($99<<3)|0);
  $101 = $100;
  $102 = $101;
  HEAP32[$102>>2] = $96;
  $103 = (($101) + 4)|0;
  $104 = $103;
  HEAP32[$104>>2] = $98;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 24) {
  $109 = $ptree;
  $110 = $109;
  $111 = HEAP32[$110>>2]|0;
  $112 = (($109) + 4)|0;
  $113 = $112;
  $114 = HEAP32[$113>>2]|0;
  $ptree$idx1$val = HEAP32[$17>>2]|0;
  $115 = $111 & -524288;
  $116 = (_bitshift64Shl(($ptree$idx1$val|0),0,42)|0);
  $117 = tempRet0;
  $118 = $115 ^ $21;
  $119 = $114 ^ $22;
  $120 = $119 ^ $115;
  $121 = $118 ^ $116;
  $122 = $120 ^ $117;
  $123 = $111 & 524287;
  $124 = (221117496 + ($123<<3)|0);
  $125 = $124;
  $126 = $125;
  HEAP32[$126>>2] = $121;
  $127 = (($125) + 4)|0;
  $128 = $127;
  HEAP32[$128>>2] = $122;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _mate3_and($ptree,$turn,$ply,$flag) {
 $ptree = $ptree|0;
 $turn = $turn|0;
 $ply = $ply|0;
 $flag = $flag|0;
 var $$$i = 0, $$$i$i = 0, $$0 = 0, $$0$ph$i$i = 0, $$1$i = 0, $$1$i$i = 0, $$123$i$i = 0, $$13$i$i = 0, $$15$i$i = 0, $$18$i$i = 0, $$2$i$i = 0, $$2$ph$i$i = 0, $$2$ph$us$i$i = 0, $$23$i$i = 0, $$25$i$i = 0, $$26$i$i = 0, $$28$i$i = 0, $$3$i$i = 0, $$330$i$i = 0, $$330$us$i$i = 0;
 var $$4$i$i = 0, $$5$i$i = 0, $$6$i$i = 0, $$9$i$i = 0, $$inc$0$i$i = 0, $$mux$i$i = 0, $$pr = 0, $$pre$i = 0, $$pre$phi100$iZ2D = 0, $$pre$phi98$iZ2D = 0, $$pre72$i = 0, $$pre74$i = 0, $$pre97$i = 0, $$pre99$i = 0, $$sum$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $amove$i$i = 0, $asq = 0, $bb$sroa$0$0$i = 0;
 var $bb$sroa$0$0$i$i = 0, $bb$sroa$0$0$ph$be$i$i = 0, $bb$sroa$0$0$ph$i$i = 0, $bb$sroa$0$0$ph81$i$i = 0, $bb$sroa$0$049$i$i = 0, $bb$sroa$0$049$us$i$i = 0, $bb$sroa$0$1$i$i = 0, $bb$sroa$0$1$ph$i$i = 0, $bb$sroa$0$1$ph$us$i$i = 0, $bb$sroa$0$1$us$i$i = 0, $bb$sroa$1$0$i = 0, $bb$sroa$1$0$i$i = 0, $bb$sroa$1$0$ph$be$i$i = 0, $bb$sroa$1$0$ph$i$i = 0, $bb$sroa$1$0$ph80$i$i = 0, $bb$sroa$1$048$i$i = 0, $bb$sroa$1$048$us$i$i = 0, $bb$sroa$1$1$i$i = 0, $bb$sroa$1$1$ph$i$i = 0, $bb$sroa$1$1$ph$us$i$i = 0;
 var $bb$sroa$1$1$us$i$i = 0, $bb$sroa$2$0$i = 0, $bb$sroa$2$0$i$i = 0, $bb$sroa$2$0$ph$be$i$i = 0, $bb$sroa$2$0$ph$i$i = 0, $bb$sroa$2$0$ph79$i$i = 0, $bb$sroa$2$047$i$i = 0, $bb$sroa$2$047$us$i$i = 0, $bb$sroa$2$1$i$i = 0, $bb$sroa$2$1$ph$i$i = 0, $bb$sroa$2$1$ph$us$i$i = 0, $bb$sroa$2$1$us$i$i = 0, $bb_defender$sroa$0$0$i$i = 0, $bb_defender$sroa$1$0$i$i = 0, $bb_defender$sroa$2$0$i$i = 0, $dist$094$i$i = 0, $flag$0$i = 0, $flag_unpromo$019$i$i = 0, $flag_unpromo$020$i$i = 0, $flag_unpromo$031$i$i = 0;
 var $flag_unpromo$032$i$i = 0, $flag_unpromo$125$i$i = 0, $flag_unpromo$126$i$i = 0, $flag_unpromo$126$us$i$i = 0, $from$0$i$i = 0, $hand$0$i$i = 0, $i$052$i$i = 0, $i$052$in$i$i = 0, $i$266$i$i = 0, $i$266$in$i$i = 0, $inc$0$i$i = 0, $ispos$i = 0, $min_chuai$0$i$i = 0, $move$0 = 0, $move$0$i$i = 0, $move$0$in$i$i = 0, $move$1 = 0, $n0$0$lcssa$i$i = 0, $n0$089$i$i = 0, $n0$2$i$i = 0;
 var $n0$4$i$i = 0, $n1$0$lcssa$i$i = 0, $n1$090$i$i = 0, $n1$1$i$i = 0, $n1$3$i$i = 0, $neg$i = 0, $nmove$0$ph$be$i$i = 0, $nmove$0$ph77$i$i = 0, $nmove$0$ph82$i$i = 0, $nmove$1$i$i = 0, $nmove$10$i$i = 0, $nmove$11$i$i = 0, $nmove$139$i$i = 0, $nmove$2$i$i = 0, $nmove$3$i$i = 0, $nmove$4$i$i = 0, $nmove$5$i$i = 0, $nmove$6$i$i = 0, $nmove$7$i$i = 0, $nmove$8$i$i = 0;
 var $nmove$9$i$i = 0, $not$$i$i = 0, $or$cond$i = 0, $or$cond10$i$i = 0, $or$cond11$i$i = 0, $or$cond12$i$i = 0, $or$cond13$i$i = 0, $or$cond14$i$i = 0, $or$cond15$i$i = 0, $or$cond16$i$i = 0, $or$cond17$i$i = 0, $or$cond18$i$i = 0, $or$cond19$i$i = 0, $or$cond20$i$i = 0, $or$cond21$i$i = 0, $or$cond22$i$i = 0, $or$cond4$i$i = 0, $or$cond7$i = 0, $or$cond7$i$i = 0, $or$cond9$i$i = 0;
 var $pc$029$i$i = 0, $pc$030$i$i = 0, $pc$03038$i$i = 0, $phitmp$i = 0, $phitmp$i$i = 0, $phitmp1$i$i = 0, $scevgep$i$i = 0, $scevgep131$i$i = 0, $scevgep134$i$i = 0, $sq0$0$i = 0, $sq1$0$i = 0, $sq_k$0$i$i = 0, $sq_king$0$i = 0, $to$091$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp + 36|0;
 $amove$i$i = sp + 48|0;
 $2 = sp + 112|0;
 $3 = sp;
 $4 = sp + 24|0;
 $asq = sp + 124|0;
 $5 = ((($ptree) + ($ply<<5)|0) + 3184|0);
 HEAP32[$5>>2] = 0;
 $6 = ($turn|0)==(0);
 if ($6) {
  $15 = (($ptree) + 593|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  _w_attacks_to_piece($1,$ptree,$17);
  $18 = HEAP32[$1>>2]|0;
  $19 = (($1) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($1) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $bb$sroa$0$0$i = $18;$bb$sroa$1$0$i = $20;$bb$sroa$2$0$i = $22;$sq_king$0$i = $17;
 } else {
  $7 = (($ptree) + 594|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  _b_attacks_to_piece($0,$ptree,$9);
  $10 = HEAP32[$0>>2]|0;
  $11 = (($0) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($0) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $bb$sroa$0$0$i = $10;$bb$sroa$1$0$i = $12;$bb$sroa$2$0$i = $14;$sq_king$0$i = $9;
 }
 $23 = (_last_one210($bb$sroa$2$0$i,$bb$sroa$1$0$i,$bb$sroa$0$0$i)|0);
 $24 = (34156304 + (($23*12)|0)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 ^ $bb$sroa$0$0$i;
 $27 = ((34156304 + (($23*12)|0)|0) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 ^ $bb$sroa$1$0$i;
 $30 = ((34156304 + (($23*12)|0)|0) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 ^ $bb$sroa$2$0$i;
 $33 = $29 | $26;
 $34 = $33 | $32;
 $35 = ($34|0)==(0);
 if ($35) {
  $sq0$0$i = $23;$sq1$0$i = 81;
 } else {
  $36 = (_last_one210($32,$29,$26)|0);
  $37 = (33578928 + (($sq_king$0$i*12)|0)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (34156304 + (($36*12)|0)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 & $38;
  $42 = ((33578928 + (($sq_king$0$i*12)|0)|0) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((34156304 + (($36*12)|0)|0) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $45 & $43;
  $47 = $46 | $41;
  $48 = ((33578928 + (($sq_king$0$i*12)|0)|0) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((34156304 + (($36*12)|0)|0) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $51 & $49;
  $53 = $47 | $52;
  $54 = ($53|0)==(0);
  $$$i = $54 ? $23 : $36;
  $$1$i = $54 ? $36 : $23;
  $phitmp$i = $$1$i&255;
  $sq0$0$i = $$$i;$sq1$0$i = $phitmp$i;
 }
 $55 = $sq0$0$i&255;
 HEAP8[$asq>>0] = $55;
 $56 = (($asq) + 1|0);
 HEAP8[$56>>0] = $sq1$0$i;
 $57 = (($ptree) + 593|0);
 $58 = ((($ptree) + ($ply<<2)|0) + 142516|0);
 $59 = (($ptree) + 594|0);
 $60 = (($ply) + -1)|0;
 $61 = ((($ptree) + ($60<<2)|0) + 2656|0);
 $62 = ((($ptree) + ($ply<<5)|0) + 3168|0);
 $63 = ((($ptree) + ($ply<<2)|0) + 2656|0);
 $64 = (($4) + 4|0);
 $65 = (($4) + 8|0);
 $66 = (($3) + 4|0);
 $67 = (($3) + 8|0);
 $68 = ((($ptree) + ($ply<<5)|0) + 3188|0);
 $69 = ($turn|0)!=(0);
 $70 = (($ptree) + 20|0);
 $71 = (($ptree) + 24|0);
 $72 = (($ptree) + 28|0);
 $73 = (($2) + 4|0);
 $74 = (($2) + 8|0);
 $75 = (($ptree) + 504|0);
 $76 = (($ptree) + 368|0);
 $77 = (($ptree) + 372|0);
 $78 = (($ptree) + 376|0);
 $79 = ($flag|0)==(0);
 $80 = ((($ptree) + ($60<<2)|0) + 142516|0);
 $81 = (($ptree) + 500|0);
 $82 = (($ptree) + 356|0);
 $83 = (($ptree) + 360|0);
 $84 = (($ptree) + 364|0);
 $85 = ($flag|0)==(2);
 $86 = (($ptree) + 8|0);
 $87 = (($ptree) + 12|0);
 $88 = (($ptree) + 16|0);
 $89 = ($turn|0)==(1);
 $90 = (($ply) + 1)|0;
 $91 = ($ply|0)>(124);
 $92 = ((($ptree) + ($90<<2)|0) + 142516|0);
 $93 = ((($ptree) + ($90<<2)|0) + 2656|0);
 $94 = (($ply) + 2)|0;
 L8: while(1) {
  $95 = HEAP32[$5>>2]|0;
  L10: do {
   switch ($95|0) {
   case 5:  {
    label = 65;
    break;
   }
   case 7:  {
    label = 68;
    break;
   }
   case 1:  {
    label = 20;
    break;
   }
   case 4:  {
    $$pre72$i = HEAP32[$63>>2]|0;
    $351 = $$pre72$i;
    label = 63;
    break;
   }
   case 2:  {
    $$pre$i = HEAP32[$63>>2]|0;
    $343 = $$pre$i;
    label = 60;
    break;
   }
   case 0:  {
    HEAP32[$5>>2] = 1;
    $96 = HEAP8[$asq>>0]|0;
    $97 = $96 << 24 >> 24;
    if ($6) {
     $123 = HEAP8[$57>>0]|0;
     $124 = $123&255;
     $125 = (33578928 + (($124*12)|0)|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (34156304 + (($97*12)|0)|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = $128 & $126;
     $130 = ((33578928 + (($124*12)|0)|0) + 4|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ((34156304 + (($97*12)|0)|0) + 4|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = $133 & $131;
     $135 = $134 | $129;
     $136 = ((33578928 + (($124*12)|0)|0) + 8|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ((34156304 + (($97*12)|0)|0) + 8|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $139 & $137;
     $141 = $135 | $140;
     $142 = ($141|0)==(0);
     if ($142) {
      label = 18;
     } else {
      $143 = (_is_black_attacked($ptree,$97)|0);
      $144 = ($143|0)==(0);
      if ($144) {
       $145 = ((($ptree) + ($97)|0) + 512|0);
       $146 = HEAP8[$145>>0]|0;
       $147 = $146 << 24 >> 24;
       $148 = (0 - ($147))|0;
       $from$0$i$i = $124;$move$0$in$i$i = $148;
       label = 19;
      } else {
       label = 18;
      }
     }
    } else {
     $98 = HEAP8[$59>>0]|0;
     $99 = $98&255;
     $100 = (33578928 + (($99*12)|0)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (34156304 + (($97*12)|0)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = $103 & $101;
     $105 = ((33578928 + (($99*12)|0)|0) + 4|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ((34156304 + (($97*12)|0)|0) + 4|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = $108 & $106;
     $110 = $109 | $104;
     $111 = ((33578928 + (($99*12)|0)|0) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ((34156304 + (($97*12)|0)|0) + 8|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = $114 & $112;
     $116 = $110 | $115;
     $117 = ($116|0)==(0);
     if ($117) {
      label = 18;
     } else {
      $118 = (_is_white_attacked($ptree,$97)|0);
      $119 = ($118|0)==(0);
      if ($119) {
       $120 = ((($ptree) + ($97)|0) + 512|0);
       $121 = HEAP8[$120>>0]|0;
       $122 = $121 << 24 >> 24;
       $from$0$i$i = $99;$move$0$in$i$i = $122;
       label = 19;
      } else {
       label = 18;
      }
     }
    }
    if ((label|0) == 18) {
     label = 0;
     HEAP32[$58>>2] = 0;
     label = 20;
     break L10;
    }
    else if ((label|0) == 19) {
     label = 0;
     $move$0$i$i = $move$0$in$i$i << 19;
     $149 = $from$0$i$i << 7;
     $150 = $97 | $move$0$i$i;
     $151 = $150 | $149;
     $152 = $151 | 262144;
     HEAP32[$58>>2] = $152;
     $716 = $152;
     break L10;
    }
    break;
   }
   case 3:  {
    label = 62;
    break;
   }
   case 6:  {
    $$pre74$i = HEAP32[$63>>2]|0;
    $359 = $$pre74$i;
    label = 66;
    break;
   }
   case 8:  {
    label = 180;
    break;
   }
   case 9:  {
    label = 184;
    break;
   }
   default: {
    $$0 = 1;
    label = 226;
    break L8;
   }
   }
  } while(0);
  if ((label|0) == 20) {
   label = 0;
   HEAP32[$5>>2] = 2;
   $153 = HEAP32[$61>>2]|0;
   HEAP32[$62>>2] = $153;
   $154 = HEAP32[$61>>2]|0;
   HEAP32[$63>>2] = $154;
   $155 = HEAP8[$56>>0]|0;
   $156 = ($155<<24>>24)==(81);
   if ($156) {
    $157 = HEAP8[$asq>>0]|0;
    $158 = $157 << 24 >> 24;
    L28: do {
     if ($6) {
      _b_attacks_to_piece($4,$ptree,$158);
      $227 = HEAP32[$4>>2]|0;
      $228 = HEAP32[$64>>2]|0;
      $229 = HEAP32[$65>>2]|0;
      $230 = HEAP8[$57>>0]|0;
      $231 = $230&255;
      $232 = (34156304 + (($231*12)|0)|0);
      $233 = HEAP32[$232>>2]|0;
      $234 = $233 ^ -1;
      $235 = $227 & $234;
      $236 = ((34156304 + (($231*12)|0)|0) + 4|0);
      $237 = HEAP32[$236>>2]|0;
      $238 = $237 ^ -1;
      $239 = $228 & $238;
      $240 = ((34156304 + (($231*12)|0)|0) + 8|0);
      $241 = HEAP32[$240>>2]|0;
      $242 = $241 ^ -1;
      $243 = $229 & $242;
      $244 = ((($ptree) + ($158)|0) + 512|0);
      $245 = ($157<<24>>24)<(27);
      $246 = $245&1;
      $$9$i$i = $246 ^ 1;
      $247 = $158 | 16384;
      $248 = ($157<<24>>24)<(18);
      if (!($245)) {
       $$2$ph$i$i = $154;$bb$sroa$0$1$ph$i$i = $235;$bb$sroa$1$1$ph$i$i = $239;$bb$sroa$2$1$ph$i$i = $243;
       while(1) {
        $bb$sroa$0$1$i$i = $bb$sroa$0$1$ph$i$i;$bb$sroa$1$1$i$i = $bb$sroa$1$1$ph$i$i;$bb$sroa$2$1$i$i = $bb$sroa$2$1$ph$i$i;
        while(1) {
         $293 = $bb$sroa$1$1$i$i | $bb$sroa$2$1$i$i;
         $294 = $293 | $bb$sroa$0$1$i$i;
         $295 = ($294|0)==(0);
         if ($295) {
          $$4$i$i = $$2$ph$i$i;
          break L28;
         }
         $296 = (_first_one012($bb$sroa$0$1$i$i,$bb$sroa$1$1$i$i,$bb$sroa$2$1$i$i)|0);
         $297 = (34156304 + (($296*12)|0)|0);
         $298 = HEAP32[$297>>2]|0;
         $299 = $298 ^ $bb$sroa$0$1$i$i;
         $300 = ((34156304 + (($296*12)|0)|0) + 4|0);
         $301 = HEAP32[$300>>2]|0;
         $302 = $301 ^ $bb$sroa$1$1$i$i;
         $303 = ((34156304 + (($296*12)|0)|0) + 8|0);
         $304 = HEAP32[$303>>2]|0;
         $305 = $304 ^ $bb$sroa$2$1$i$i;
         $306 = HEAP8[$57>>0]|0;
         $307 = $306&255;
         $308 = ((220518304 + (($307*81)|0)|0) + ($296)|0);
         $309 = HEAP8[$308>>0]|0;
         $310 = ($309<<24>>24)==(0);
         if ($310) {
          break;
         }
         $311 = $309&255;
         $312 = (_is_pinned_on_black_king($ptree,$296,$311)|0);
         $313 = ($312|0)==(0);
         if ($313) {
          break;
         } else {
          $bb$sroa$0$1$i$i = $299;$bb$sroa$1$1$i$i = $302;$bb$sroa$2$1$i$i = $305;
         }
        }
        $314 = ((($ptree) + ($296)|0) + 512|0);
        $315 = HEAP8[$314>>0]|0;
        $316 = $315 << 24 >> 24;
        switch ($316|0) {
        case 3: case 2:  {
         if ($248) {
          $flag_unpromo$126$i$i = 0;
          label = 56;
         } else {
          $$330$i$i = $$2$ph$i$i;
         }
         break;
        }
        case 4:  {
         $317 = ($296|0)<(27);
         if ($317) {
          $flag_unpromo$126$i$i = 1;
          label = 56;
         } else {
          $$330$i$i = $$2$ph$i$i;
         }
         break;
        }
        case 7: case 6:  {
         $318 = ($296|0)<(27);
         $319 = $318&1;
         $$18$i$i = $319 ^ 1;
         if ($318) {
          $flag_unpromo$126$i$i = $$18$i$i;
          label = 56;
         } else {
          $$3$i$i = $$2$ph$i$i;$flag_unpromo$125$i$i = $$18$i$i;
          label = 57;
         }
         break;
        }
        case 1:  {
         $$3$i$i = $$2$ph$i$i;$flag_unpromo$125$i$i = $$9$i$i;
         label = 57;
         break;
        }
        default: {
         $$330$i$i = $$2$ph$i$i;
        }
        }
        if ((label|0) == 56) {
         label = 0;
         $320 = $296 << 7;
         $321 = $316 << 15;
         $322 = HEAP8[$244>>0]|0;
         $323 = $322 << 24 >> 24;
         $324 = (0 - ($323))|0;
         $325 = $324 << 19;
         $326 = $320 | $247;
         $327 = $326 | $321;
         $328 = $327 | $325;
         $329 = (($$2$ph$i$i) + 4|0);
         HEAP32[$$2$ph$i$i>>2] = $328;
         $$3$i$i = $329;$flag_unpromo$125$i$i = $flag_unpromo$126$i$i;
         label = 57;
        }
        if ((label|0) == 57) {
         label = 0;
         $330 = ($flag_unpromo$125$i$i|0)==(0);
         if ($330) {
          $$2$ph$i$i = $$3$i$i;$bb$sroa$0$1$ph$i$i = $299;$bb$sroa$1$1$ph$i$i = $302;$bb$sroa$2$1$ph$i$i = $305;
          continue;
         } else {
          $$330$i$i = $$3$i$i;
         }
        }
        $331 = $296 << 7;
        $332 = $331 | $158;
        $333 = $316 << 15;
        $334 = $332 | $333;
        $335 = HEAP8[$244>>0]|0;
        $336 = $335 << 24 >> 24;
        $337 = (0 - ($336))|0;
        $338 = $337 << 19;
        $339 = $334 | $338;
        $340 = (($$330$i$i) + 4|0);
        HEAP32[$$330$i$i>>2] = $339;
        $$2$ph$i$i = $340;$bb$sroa$0$1$ph$i$i = $299;$bb$sroa$1$1$ph$i$i = $302;$bb$sroa$2$1$ph$i$i = $305;
       }
      }
      $249 = $248&1;
      $$$i$i = $249 ^ 1;
      $$2$ph$us$i$i = $154;$bb$sroa$0$1$ph$us$i$i = $235;$bb$sroa$1$1$ph$us$i$i = $239;$bb$sroa$2$1$ph$us$i$i = $243;
      while(1) {
       $bb$sroa$0$1$us$i$i = $bb$sroa$0$1$ph$us$i$i;$bb$sroa$1$1$us$i$i = $bb$sroa$1$1$ph$us$i$i;$bb$sroa$2$1$us$i$i = $bb$sroa$2$1$ph$us$i$i;
       while(1) {
        $290 = $bb$sroa$1$1$us$i$i | $bb$sroa$2$1$us$i$i;
        $291 = $290 | $bb$sroa$0$1$us$i$i;
        $292 = ($291|0)==(0);
        if ($292) {
         $$4$i$i = $$2$ph$us$i$i;
         break L28;
        }
        $250 = (_first_one012($bb$sroa$0$1$us$i$i,$bb$sroa$1$1$us$i$i,$bb$sroa$2$1$us$i$i)|0);
        $251 = (34156304 + (($250*12)|0)|0);
        $252 = HEAP32[$251>>2]|0;
        $253 = $252 ^ $bb$sroa$0$1$us$i$i;
        $254 = ((34156304 + (($250*12)|0)|0) + 4|0);
        $255 = HEAP32[$254>>2]|0;
        $256 = $255 ^ $bb$sroa$1$1$us$i$i;
        $257 = ((34156304 + (($250*12)|0)|0) + 8|0);
        $258 = HEAP32[$257>>2]|0;
        $259 = $258 ^ $bb$sroa$2$1$us$i$i;
        $260 = HEAP8[$57>>0]|0;
        $261 = $260&255;
        $262 = ((220518304 + (($261*81)|0)|0) + ($250)|0);
        $263 = HEAP8[$262>>0]|0;
        $264 = ($263<<24>>24)==(0);
        if ($264) {
         break;
        }
        $265 = $263&255;
        $266 = (_is_pinned_on_black_king($ptree,$250,$265)|0);
        $267 = ($266|0)==(0);
        if ($267) {
         break;
        } else {
         $bb$sroa$0$1$us$i$i = $253;$bb$sroa$1$1$us$i$i = $256;$bb$sroa$2$1$us$i$i = $259;
        }
       }
       $268 = ((($ptree) + ($250)|0) + 512|0);
       $269 = HEAP8[$268>>0]|0;
       $270 = $269 << 24 >> 24;
       switch ($270|0) {
       case 4:  {
        $flag_unpromo$126$us$i$i = 1;
        label = 45;
        break;
       }
       case 3: case 2:  {
        $flag_unpromo$126$us$i$i = $$$i$i;
        label = 45;
        break;
       }
       case 1:  {
        $flag_unpromo$126$us$i$i = $$9$i$i;
        label = 45;
        break;
       }
       case 7: case 6:  {
        $flag_unpromo$126$us$i$i = 0;
        label = 45;
        break;
       }
       default: {
        $$pre97$i = $250 << 7;
        $$pre99$i = $270 << 15;
        $$330$us$i$i = $$2$ph$us$i$i;$$pre$phi100$iZ2D = $$pre99$i;$$pre$phi98$iZ2D = $$pre97$i;
       }
       }
       if ((label|0) == 45) {
        label = 0;
        $271 = $250 << 7;
        $272 = $270 << 15;
        $273 = HEAP8[$244>>0]|0;
        $274 = $273 << 24 >> 24;
        $275 = (0 - ($274))|0;
        $276 = $275 << 19;
        $277 = $271 | $247;
        $278 = $277 | $272;
        $279 = $278 | $276;
        $280 = (($$2$ph$us$i$i) + 4|0);
        HEAP32[$$2$ph$us$i$i>>2] = $279;
        $281 = ($flag_unpromo$126$us$i$i|0)==(0);
        if ($281) {
         $$2$ph$us$i$i = $280;$bb$sroa$0$1$ph$us$i$i = $253;$bb$sroa$1$1$ph$us$i$i = $256;$bb$sroa$2$1$ph$us$i$i = $259;
         continue;
        } else {
         $$330$us$i$i = $280;$$pre$phi100$iZ2D = $272;$$pre$phi98$iZ2D = $271;
        }
       }
       $282 = HEAP8[$244>>0]|0;
       $283 = $282 << 24 >> 24;
       $284 = (0 - ($283))|0;
       $285 = $284 << 19;
       $286 = $$pre$phi100$iZ2D | $158;
       $287 = $286 | $$pre$phi98$iZ2D;
       $288 = $287 | $285;
       $289 = (($$330$us$i$i) + 4|0);
       HEAP32[$$330$us$i$i>>2] = $288;
       $$2$ph$us$i$i = $289;$bb$sroa$0$1$ph$us$i$i = $253;$bb$sroa$1$1$ph$us$i$i = $256;$bb$sroa$2$1$ph$us$i$i = $259;
      }
     } else {
      _w_attacks_to_piece($3,$ptree,$158);
      $159 = HEAP32[$3>>2]|0;
      $160 = HEAP32[$66>>2]|0;
      $161 = HEAP32[$67>>2]|0;
      $162 = HEAP8[$59>>0]|0;
      $163 = $162&255;
      $164 = (34156304 + (($163*12)|0)|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = $165 ^ -1;
      $167 = $159 & $166;
      $168 = ((34156304 + (($163*12)|0)|0) + 4|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = $169 ^ -1;
      $171 = $160 & $170;
      $172 = ((34156304 + (($163*12)|0)|0) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = $173 ^ -1;
      $175 = $161 & $174;
      $176 = ((($ptree) + ($158)|0) + 512|0);
      $177 = ($157<<24>>24)>(53);
      $178 = $177&1;
      $$5$i$i = $178 ^ 1;
      $not$$i$i = ($157<<24>>24)<(63);
      $$mux$i$i = $not$$i$i&1;
      $$0$ph$i$i = $154;$bb$sroa$0$0$ph$i$i = $167;$bb$sroa$1$0$ph$i$i = $171;$bb$sroa$2$0$ph$i$i = $175;
      while(1) {
       $bb$sroa$0$0$i$i = $bb$sroa$0$0$ph$i$i;$bb$sroa$1$0$i$i = $bb$sroa$1$0$ph$i$i;$bb$sroa$2$0$i$i = $bb$sroa$2$0$ph$i$i;
       while(1) {
        $179 = $bb$sroa$1$0$i$i | $bb$sroa$2$0$i$i;
        $180 = $179 | $bb$sroa$0$0$i$i;
        $181 = ($180|0)==(0);
        if ($181) {
         $$4$i$i = $$0$ph$i$i;
         break L28;
        }
        $182 = (_last_one210($bb$sroa$2$0$i$i,$bb$sroa$1$0$i$i,$bb$sroa$0$0$i$i)|0);
        $183 = (34156304 + (($182*12)|0)|0);
        $184 = HEAP32[$183>>2]|0;
        $185 = $184 ^ $bb$sroa$0$0$i$i;
        $186 = ((34156304 + (($182*12)|0)|0) + 4|0);
        $187 = HEAP32[$186>>2]|0;
        $188 = $187 ^ $bb$sroa$1$0$i$i;
        $189 = ((34156304 + (($182*12)|0)|0) + 8|0);
        $190 = HEAP32[$189>>2]|0;
        $191 = $190 ^ $bb$sroa$2$0$i$i;
        $192 = HEAP8[$59>>0]|0;
        $193 = $192&255;
        $194 = ((220518304 + (($193*81)|0)|0) + ($182)|0);
        $195 = HEAP8[$194>>0]|0;
        $196 = ($195<<24>>24)==(0);
        if ($196) {
         break;
        }
        $197 = $195&255;
        $198 = (_is_pinned_on_white_king($ptree,$182,$197)|0);
        $199 = ($198|0)==(0);
        if ($199) {
         break;
        } else {
         $bb$sroa$0$0$i$i = $185;$bb$sroa$1$0$i$i = $188;$bb$sroa$2$0$i$i = $191;
        }
       }
       $200 = ((($ptree) + ($182)|0) + 512|0);
       $201 = HEAP8[$200>>0]|0;
       $202 = $201 << 24 >> 24;
       $203 = (0 - ($202))|0;
       switch ($203|0) {
       case 7: case 6:  {
        $205 = ($182|0)>(53);
        $or$cond7$i$i = $177 | $205;
        $206 = $or$cond7$i$i&1;
        $$15$i$i = $206 ^ 1;
        if ($or$cond7$i$i) {
         $flag_unpromo$020$i$i = $$15$i$i;
         label = 32;
        } else {
         $$1$i$i = $$0$ph$i$i;$flag_unpromo$019$i$i = $$15$i$i;
         label = 33;
        }
        break;
       }
       case 3: case 2:  {
        if ($177) {
         $flag_unpromo$020$i$i = $$mux$i$i;
         label = 32;
        } else {
         $$123$i$i = $$0$ph$i$i;
        }
        break;
       }
       case 4:  {
        $204 = ($182|0)>(53);
        $$13$i$i = $177 | $204;
        if ($$13$i$i) {
         $flag_unpromo$020$i$i = 1;
         label = 32;
        } else {
         $$123$i$i = $$0$ph$i$i;
        }
        break;
       }
       case 1:  {
        if ($177) {
         $flag_unpromo$020$i$i = $$5$i$i;
         label = 32;
        } else {
         $$1$i$i = $$0$ph$i$i;$flag_unpromo$019$i$i = $$5$i$i;
         label = 33;
        }
        break;
       }
       default: {
        $$123$i$i = $$0$ph$i$i;
       }
       }
       if ((label|0) == 32) {
        label = 0;
        $207 = $182 << 7;
        $208 = $203 << 15;
        $209 = HEAP8[$176>>0]|0;
        $210 = $209 << 24 >> 24;
        $211 = $210 << 19;
        $212 = $158 | $207;
        $213 = $212 | $208;
        $214 = $213 | $211;
        $215 = $214 | 16384;
        $216 = (($$0$ph$i$i) + 4|0);
        HEAP32[$$0$ph$i$i>>2] = $215;
        $$1$i$i = $216;$flag_unpromo$019$i$i = $flag_unpromo$020$i$i;
        label = 33;
       }
       if ((label|0) == 33) {
        label = 0;
        $217 = ($flag_unpromo$019$i$i|0)==(0);
        if ($217) {
         $$0$ph$i$i = $$1$i$i;$bb$sroa$0$0$ph$i$i = $185;$bb$sroa$1$0$ph$i$i = $188;$bb$sroa$2$0$ph$i$i = $191;
         continue;
        } else {
         $$123$i$i = $$1$i$i;
        }
       }
       $218 = $182 << 7;
       $219 = $218 | $158;
       $220 = $203 << 15;
       $221 = $219 | $220;
       $222 = HEAP8[$176>>0]|0;
       $223 = $222 << 24 >> 24;
       $224 = $223 << 19;
       $225 = $221 | $224;
       $226 = (($$123$i$i) + 4|0);
       HEAP32[$$123$i$i>>2] = $225;
       $$0$ph$i$i = $226;$bb$sroa$0$0$ph$i$i = $185;$bb$sroa$1$0$ph$i$i = $188;$bb$sroa$2$0$ph$i$i = $191;
      }
     }
    } while(0);
    HEAP32[$63>>2] = $$4$i$i;
    $343 = $$4$i$i;
    label = 60;
   } else {
    $343 = $154;
    label = 60;
   }
  }
  if ((label|0) == 60) {
   label = 0;
   $341 = HEAP32[$62>>2]|0;
   $342 = ($341|0)==($343|0);
   if ($342) {
    label = 62;
   } else {
    $344 = (($341) + 4|0);
    HEAP32[$62>>2] = $344;
    $345 = HEAP32[$341>>2]|0;
    HEAP32[$58>>2] = $345;
    $716 = $345;
   }
  }
  if ((label|0) == 62) {
   label = 0;
   HEAP32[$5>>2] = 4;
   $346 = HEAP32[$61>>2]|0;
   HEAP32[$62>>2] = $346;
   $347 = HEAP32[$61>>2]|0;
   $348 = (_gen_king_move($ptree,$asq,$turn,1,$347)|0);
   HEAP32[$63>>2] = $348;
   $351 = $348;
   label = 63;
  }
  if ((label|0) == 63) {
   label = 0;
   $349 = HEAP32[$62>>2]|0;
   $350 = ($349|0)==($351|0);
   if ($350) {
    label = 65;
   } else {
    $352 = (($349) + 4|0);
    HEAP32[$62>>2] = $352;
    $353 = HEAP32[$349>>2]|0;
    HEAP32[$58>>2] = $353;
    $716 = $353;
   }
  }
  if ((label|0) == 65) {
   label = 0;
   HEAP32[$5>>2] = 6;
   $354 = HEAP32[$61>>2]|0;
   HEAP32[$62>>2] = $354;
   $355 = HEAP32[$61>>2]|0;
   $356 = (_gen_king_move($ptree,$asq,$turn,0,$355)|0);
   HEAP32[$63>>2] = $356;
   $359 = $356;
   label = 66;
  }
  if ((label|0) == 66) {
   label = 0;
   $357 = HEAP32[$62>>2]|0;
   $358 = ($357|0)==($359|0);
   if ($358) {
    label = 68;
   } else {
    $360 = (($357) + 4|0);
    HEAP32[$62>>2] = $360;
    $361 = HEAP32[$357>>2]|0;
    HEAP32[$58>>2] = $361;
    $716 = $361;
   }
  }
  do {
   if ((label|0) == 68) {
    label = 0;
    HEAP32[$68>>2] = 0;
    HEAP32[$5>>2] = 8;
    $362 = HEAP32[$61>>2]|0;
    HEAP32[$62>>2] = $362;
    $363 = HEAP32[$61>>2]|0;
    HEAP32[$63>>2] = $363;
    $364 = HEAP8[$56>>0]|0;
    $365 = ($364<<24>>24)==(81);
    if ($365) {
     $366 = HEAP8[$asq>>0]|0;
     $367 = $366 << 24 >> 24;
     $368 = ((($ptree) + ($367)|0) + 512|0);
     $369 = HEAP8[$368>>0]|0;
     $370 = $369 << 24 >> 24;
     $ispos$i = ($369<<24>>24)>(-1);
     $neg$i = (0 - ($370))|0;
     $371 = $ispos$i ? $370 : $neg$i;
     $372 = ($371|0)==(3);
     if ($372) {
      label = 180;
     } else {
      if ($69) {
       $373 = HEAP8[$59>>0]|0;
       $374 = $373&255;
       $375 = HEAP32[$70>>2]|0;
       $376 = HEAP32[$71>>2]|0;
       $377 = HEAP32[$72>>2]|0;
       $378 = (34156304 + (($374*12)|0)|0);
       $379 = HEAP32[$378>>2]|0;
       $380 = $379 ^ -1;
       $381 = $375 & $380;
       $382 = ((34156304 + (($374*12)|0)|0) + 4|0);
       $383 = HEAP32[$382>>2]|0;
       $384 = $383 ^ -1;
       $385 = $376 & $384;
       $386 = ((34156304 + (($374*12)|0)|0) + 8|0);
       $387 = HEAP32[$386>>2]|0;
       $388 = $387 ^ -1;
       $389 = $377 & $388;
       $bb_defender$sroa$0$0$i$i = $381;$bb_defender$sroa$1$0$i$i = $385;$bb_defender$sroa$2$0$i$i = $389;$sq_k$0$i$i = $374;
      } else {
       $390 = HEAP8[$57>>0]|0;
       $391 = $390&255;
       $392 = HEAP32[$86>>2]|0;
       $393 = HEAP32[$87>>2]|0;
       $394 = HEAP32[$88>>2]|0;
       $395 = (34156304 + (($391*12)|0)|0);
       $396 = HEAP32[$395>>2]|0;
       $397 = $396 ^ -1;
       $398 = $392 & $397;
       $399 = ((34156304 + (($391*12)|0)|0) + 4|0);
       $400 = HEAP32[$399>>2]|0;
       $401 = $400 ^ -1;
       $402 = $393 & $401;
       $403 = ((34156304 + (($391*12)|0)|0) + 8|0);
       $404 = HEAP32[$403>>2]|0;
       $405 = $404 ^ -1;
       $406 = $394 & $405;
       $bb_defender$sroa$0$0$i$i = $398;$bb_defender$sroa$1$0$i$i = $402;$bb_defender$sroa$2$0$i$i = $406;$sq_k$0$i$i = $391;
      }
      $407 = ((220518304 + (($sq_k$0$i$i*81)|0)|0) + ($367)|0);
      $408 = HEAP8[$407>>0]|0;
      $409 = $408&255;
      if ((($409|0) == 3)) {
       $410 = ($sq_k$0$i$i>>>0)<(9);
       if ($410) {
        $inc$0$i$i = 1;$min_chuai$0$i$i = 2;
       } else {
        $411 = ($sq_k$0$i$i>>>0)>(71);
        $phitmp1$i$i = $411 ? 2 : 4;
        $inc$0$i$i = 1;$min_chuai$0$i$i = $phitmp1$i$i;
       }
      } else if ((($409|0) == 2)) {
       $412 = (1248 + ($sq_k$0$i$i)|0);
       $413 = HEAP8[$412>>0]|0;
       $414 = ($413<<24>>24)==(0);
       if ($414) {
        $inc$0$i$i = 9;$min_chuai$0$i$i = 2;
       } else {
        $415 = ($413<<24>>24)==(8);
        $phitmp$i$i = $415 ? 2 : 4;
        $inc$0$i$i = 9;$min_chuai$0$i$i = $phitmp$i$i;
       }
      } else if ((($409|0) == 4)) {
       $inc$0$i$i = 8;$min_chuai$0$i$i = 3;
      } else {
       $inc$0$i$i = 10;$min_chuai$0$i$i = 3;
      }
      $416 = ($sq_k$0$i$i|0)>($367|0);
      $417 = (0 - ($inc$0$i$i))|0;
      $$inc$0$i$i = $416 ? $417 : $inc$0$i$i;
      $418 = (($$inc$0$i$i) + ($sq_k$0$i$i))|0;
      $419 = ($418|0)==($367|0);
      L110: do {
       if ($419) {
        $n0$0$lcssa$i$i = 0;$n1$0$lcssa$i$i = 0;
        label = 177;
       } else {
        $dist$094$i$i = 1;$n0$089$i$i = 0;$n1$090$i$i = 0;$to$091$i$i = $418;
        L111: while(1) {
         _attacks_to_piece($2,$ptree,$to$091$i$i);
         $420 = HEAP32[$2>>2]|0;
         $421 = HEAP32[$73>>2]|0;
         $422 = HEAP32[$74>>2]|0;
         $423 = $420 & $bb_defender$sroa$0$0$i$i;
         $424 = $421 & $bb_defender$sroa$1$0$i$i;
         $425 = $422 & $bb_defender$sroa$2$0$i$i;
         $426 = $424 | $423;
         $427 = $426 | $425;
         $428 = ($427|0)==(0);
         L113: do {
          if ($428) {
           $nmove$0$ph77$i$i = 0;
          } else {
           $429 = ($to$091$i$i|0)>(53);
           $430 = $429&1;
           $$2$i$i = $430 ^ 1;
           $431 = ($to$091$i$i|0)>(62);
           $432 = ($to$091$i$i|0)<(27);
           $433 = $432&1;
           $$6$i$i = $433 ^ 1;
           $434 = ($to$091$i$i|0)<(18);
           $bb$sroa$0$0$ph81$i$i = $423;$bb$sroa$1$0$ph80$i$i = $424;$bb$sroa$2$0$ph79$i$i = $425;$nmove$0$ph82$i$i = 0;
           while(1) {
            L117: do {
             if ($69) {
              $bb$sroa$0$049$us$i$i = $bb$sroa$0$0$ph81$i$i;$bb$sroa$1$048$us$i$i = $bb$sroa$1$0$ph80$i$i;$bb$sroa$2$047$us$i$i = $bb$sroa$2$0$ph79$i$i;
              while(1) {
               $435 = (_last_one210($bb$sroa$2$047$us$i$i,$bb$sroa$1$048$us$i$i,$bb$sroa$0$049$us$i$i)|0);
               $436 = (34156304 + (($435*12)|0)|0);
               $437 = HEAP32[$436>>2]|0;
               $438 = $437 ^ $bb$sroa$0$049$us$i$i;
               $439 = ((34156304 + (($435*12)|0)|0) + 4|0);
               $440 = HEAP32[$439>>2]|0;
               $441 = $440 ^ $bb$sroa$1$048$us$i$i;
               $442 = ((34156304 + (($435*12)|0)|0) + 8|0);
               $443 = HEAP32[$442>>2]|0;
               $444 = $443 ^ $bb$sroa$2$047$us$i$i;
               $445 = ((220518304 + (($sq_k$0$i$i*81)|0)|0) + ($435)|0);
               $446 = HEAP8[$445>>0]|0;
               $447 = ($446<<24>>24)==(0);
               if ($447) {
                break;
               }
               $448 = $446&255;
               $449 = (_is_pinned_on_white_king($ptree,$435,$448)|0);
               $450 = ($449|0)==(0);
               if ($450) {
                break;
               }
               $451 = $441 | $438;
               $452 = $451 | $444;
               $453 = ($452|0)==(0);
               if ($453) {
                $nmove$0$ph77$i$i = $nmove$0$ph82$i$i;
                break L113;
               } else {
                $bb$sroa$0$049$us$i$i = $438;$bb$sroa$1$048$us$i$i = $441;$bb$sroa$2$047$us$i$i = $444;
               }
              }
              $454 = ((($ptree) + ($435)|0) + 512|0);
              $455 = HEAP8[$454>>0]|0;
              $456 = $455 << 24 >> 24;
              $457 = (0 - ($456))|0;
              switch ($457|0) {
              case 1:  {
               if ($429) {
                $487 = $435;$815 = $444;$816 = $441;$817 = $438;$flag_unpromo$032$i$i = $$2$i$i;$pc$029$i$i = 1;
                label = 101;
                break L117;
               } else {
                $818 = $444;$819 = $441;$820 = $438;$821 = $435;$flag_unpromo$031$i$i = $$2$i$i;$nmove$1$i$i = $nmove$0$ph82$i$i;$pc$030$i$i = 1;
                label = 102;
                break L117;
               }
               break;
              }
              case 3: case 2:  {
               if ($431) {
                $487 = $435;$815 = $444;$816 = $441;$817 = $438;$flag_unpromo$032$i$i = 0;$pc$029$i$i = $457;
                label = 101;
                break L117;
               }
               if ($429) {
                $487 = $435;$815 = $444;$816 = $441;$817 = $438;$flag_unpromo$032$i$i = 1;$pc$029$i$i = $457;
                label = 101;
                break L117;
               } else {
                $496 = $435;$812 = $444;$813 = $441;$814 = $438;$nmove$139$i$i = $nmove$0$ph82$i$i;$pc$03038$i$i = $457;
                label = 103;
                break L117;
               }
               break;
              }
              case 4:  {
               $458 = ($435|0)>(53);
               $$23$i$i = $429 | $458;
               if ($$23$i$i) {
                $487 = $435;$815 = $444;$816 = $441;$817 = $438;$flag_unpromo$032$i$i = 1;$pc$029$i$i = 4;
                label = 101;
                break L117;
               } else {
                $496 = $435;$812 = $444;$813 = $441;$814 = $438;$nmove$139$i$i = $nmove$0$ph82$i$i;$pc$03038$i$i = 4;
                label = 103;
                break L117;
               }
               break;
              }
              case 7: case 6:  {
               $459 = ($435|0)>(53);
               $or$cond4$i$i = $429 | $459;
               $460 = $or$cond4$i$i&1;
               $$25$i$i = $460 ^ 1;
               if ($or$cond4$i$i) {
                $487 = $435;$815 = $444;$816 = $441;$817 = $438;$flag_unpromo$032$i$i = $$25$i$i;$pc$029$i$i = $457;
                label = 101;
                break L117;
               } else {
                $818 = $444;$819 = $441;$820 = $438;$821 = $435;$flag_unpromo$031$i$i = $$25$i$i;$nmove$1$i$i = $nmove$0$ph82$i$i;$pc$030$i$i = $457;
                label = 102;
                break L117;
               }
               break;
              }
              default: {
               $496 = $435;$812 = $444;$813 = $441;$814 = $438;$nmove$139$i$i = $nmove$0$ph82$i$i;$pc$03038$i$i = $457;
               label = 103;
               break L117;
              }
              }
             } else {
              $bb$sroa$0$049$i$i = $bb$sroa$0$0$ph81$i$i;$bb$sroa$1$048$i$i = $bb$sroa$1$0$ph80$i$i;$bb$sroa$2$047$i$i = $bb$sroa$2$0$ph79$i$i;
              while(1) {
               $461 = (_last_one210($bb$sroa$2$047$i$i,$bb$sroa$1$048$i$i,$bb$sroa$0$049$i$i)|0);
               $462 = (34156304 + (($461*12)|0)|0);
               $463 = HEAP32[$462>>2]|0;
               $464 = $463 ^ $bb$sroa$0$049$i$i;
               $465 = ((34156304 + (($461*12)|0)|0) + 4|0);
               $466 = HEAP32[$465>>2]|0;
               $467 = $466 ^ $bb$sroa$1$048$i$i;
               $468 = ((34156304 + (($461*12)|0)|0) + 8|0);
               $469 = HEAP32[$468>>2]|0;
               $470 = $469 ^ $bb$sroa$2$047$i$i;
               $471 = ((220518304 + (($sq_k$0$i$i*81)|0)|0) + ($461)|0);
               $472 = HEAP8[$471>>0]|0;
               $473 = ($472<<24>>24)==(0);
               if ($473) {
                break;
               }
               $474 = $472&255;
               $475 = (_is_pinned_on_black_king($ptree,$461,$474)|0);
               $476 = ($475|0)==(0);
               if ($476) {
                break;
               }
               $477 = $467 | $464;
               $478 = $477 | $470;
               $479 = ($478|0)==(0);
               if ($479) {
                $nmove$0$ph77$i$i = $nmove$0$ph82$i$i;
                break L113;
               } else {
                $bb$sroa$0$049$i$i = $464;$bb$sroa$1$048$i$i = $467;$bb$sroa$2$047$i$i = $470;
               }
              }
              $480 = ((($ptree) + ($461)|0) + 512|0);
              $481 = HEAP8[$480>>0]|0;
              $482 = $481 << 24 >> 24;
              switch ($482|0) {
              case 1:  {
               if ($432) {
                $487 = $461;$815 = $470;$816 = $467;$817 = $464;$flag_unpromo$032$i$i = $$6$i$i;$pc$029$i$i = 1;
                label = 101;
                break L117;
               } else {
                $818 = $470;$819 = $467;$820 = $464;$821 = $461;$flag_unpromo$031$i$i = $$6$i$i;$nmove$1$i$i = $nmove$0$ph82$i$i;$pc$030$i$i = 1;
                label = 102;
                break L117;
               }
               break;
              }
              case 3: case 2:  {
               if ($434) {
                $487 = $461;$815 = $470;$816 = $467;$817 = $464;$flag_unpromo$032$i$i = 0;$pc$029$i$i = $482;
                label = 101;
                break L117;
               }
               if ($432) {
                $487 = $461;$815 = $470;$816 = $467;$817 = $464;$flag_unpromo$032$i$i = 1;$pc$029$i$i = $482;
                label = 101;
                break L117;
               } else {
                $496 = $461;$812 = $470;$813 = $467;$814 = $464;$nmove$139$i$i = $nmove$0$ph82$i$i;$pc$03038$i$i = $482;
                label = 103;
                break L117;
               }
               break;
              }
              case 4:  {
               $483 = ($461|0)<(27);
               $$26$i$i = $432 | $483;
               if ($$26$i$i) {
                $487 = $461;$815 = $470;$816 = $467;$817 = $464;$flag_unpromo$032$i$i = 1;$pc$029$i$i = 4;
                label = 101;
                break L117;
               } else {
                $496 = $461;$812 = $470;$813 = $467;$814 = $464;$nmove$139$i$i = $nmove$0$ph82$i$i;$pc$03038$i$i = 4;
                label = 103;
                break L117;
               }
               break;
              }
              case 7: case 6:  {
               $484 = ($461|0)<(27);
               $or$cond9$i$i = $432 | $484;
               $485 = $or$cond9$i$i&1;
               $$28$i$i = $485 ^ 1;
               if ($or$cond9$i$i) {
                $487 = $461;$815 = $470;$816 = $467;$817 = $464;$flag_unpromo$032$i$i = $$28$i$i;$pc$029$i$i = $482;
                label = 101;
                break L117;
               } else {
                $818 = $470;$819 = $467;$820 = $464;$821 = $461;$flag_unpromo$031$i$i = $$28$i$i;$nmove$1$i$i = $nmove$0$ph82$i$i;$pc$030$i$i = $482;
                label = 102;
                break L117;
               }
               break;
              }
              default: {
               $496 = $461;$812 = $470;$813 = $467;$814 = $464;$nmove$139$i$i = $nmove$0$ph82$i$i;$pc$03038$i$i = $482;
               label = 103;
               break L117;
              }
              }
             }
            } while(0);
            if ((label|0) == 101) {
             label = 0;
             $486 = $487 << 7;
             $488 = $pc$029$i$i << 15;
             $489 = $to$091$i$i | $486;
             $490 = $489 | $488;
             $491 = $490 | 16384;
             $492 = (($nmove$0$ph82$i$i) + 1)|0;
             $493 = (($amove$i$i) + ($nmove$0$ph82$i$i<<2)|0);
             HEAP32[$493>>2] = $491;
             $818 = $815;$819 = $816;$820 = $817;$821 = $487;$flag_unpromo$031$i$i = $flag_unpromo$032$i$i;$nmove$1$i$i = $492;$pc$030$i$i = $pc$029$i$i;
             label = 102;
            }
            if ((label|0) == 102) {
             label = 0;
             $494 = ($flag_unpromo$031$i$i|0)==(0);
             if ($494) {
              $bb$sroa$0$0$ph$be$i$i = $820;$bb$sroa$1$0$ph$be$i$i = $819;$bb$sroa$2$0$ph$be$i$i = $818;$nmove$0$ph$be$i$i = $nmove$1$i$i;
             } else {
              $496 = $821;$812 = $818;$813 = $819;$814 = $820;$nmove$139$i$i = $nmove$1$i$i;$pc$03038$i$i = $pc$030$i$i;
              label = 103;
             }
            }
            if ((label|0) == 103) {
             label = 0;
             $495 = $496 << 7;
             $497 = $495 | $to$091$i$i;
             $498 = $pc$03038$i$i << 15;
             $499 = $497 | $498;
             $500 = (($nmove$139$i$i) + 1)|0;
             $501 = (($amove$i$i) + ($nmove$139$i$i<<2)|0);
             HEAP32[$501>>2] = $499;
             $bb$sroa$0$0$ph$be$i$i = $814;$bb$sroa$1$0$ph$be$i$i = $813;$bb$sroa$2$0$ph$be$i$i = $812;$nmove$0$ph$be$i$i = $500;
            }
            $502 = $bb$sroa$1$0$ph$be$i$i | $bb$sroa$2$0$ph$be$i$i;
            $503 = $502 | $bb$sroa$0$0$ph$be$i$i;
            $504 = ($503|0)==(0);
            if ($504) {
             $nmove$0$ph77$i$i = $nmove$0$ph$be$i$i;
             break;
            } else {
             $bb$sroa$0$0$ph81$i$i = $bb$sroa$0$0$ph$be$i$i;$bb$sroa$1$0$ph80$i$i = $bb$sroa$1$0$ph$be$i$i;$bb$sroa$2$0$ph79$i$i = $bb$sroa$2$0$ph$be$i$i;$nmove$0$ph82$i$i = $nmove$0$ph$be$i$i;
            }
           }
          }
         } while(0);
         $505 = ($to$091$i$i|0)==($418|0);
         $506 = $505&1;
         $507 = (($nmove$0$ph77$i$i) + ($506))|0;
         $508 = ($507|0)>(1);
         if ($508) {
          $509 = ($n1$090$i$i|0)>(0);
          if ($509) {
           $510 = (($n0$089$i$i) + ($n1$090$i$i))|0;
           $i$052$in$i$i = $510;
           while(1) {
            $i$052$i$i = (($i$052$in$i$i) + -1)|0;
            $511 = (($363) + ($i$052$i$i<<2)|0);
            $512 = HEAP32[$511>>2]|0;
            $513 = (($i$052$i$i) + ($nmove$0$ph77$i$i))|0;
            $514 = (($363) + ($513<<2)|0);
            HEAP32[$514>>2] = $512;
            $515 = ($i$052$i$i|0)>($n0$089$i$i|0);
            if ($515) {
             $i$052$in$i$i = $i$052$i$i;
            } else {
             break;
            }
           }
          }
          $516 = ($nmove$0$ph77$i$i|0)>(0);
          if ($516) {
           $scevgep$i$i = (($363) + ($n0$089$i$i<<2)|0);
           $517 = $nmove$0$ph77$i$i << 2;
           _memcpy(($scevgep$i$i|0),($amove$i$i|0),($517|0))|0;
           $518 = (($nmove$0$ph77$i$i) + ($n0$089$i$i))|0;
           $n0$2$i$i = $518;$n1$1$i$i = $n1$090$i$i;
          } else {
           $n0$2$i$i = $n0$089$i$i;$n1$1$i$i = $n1$090$i$i;
          }
         } else {
          $519 = ($nmove$0$ph77$i$i|0)==(0);
          if ($519) {
           $n0$2$i$i = $n0$089$i$i;$n1$1$i$i = $n1$090$i$i;
          } else {
           $520 = HEAP32[$amove$i$i>>2]|0;
           $521 = (($n1$090$i$i) + 1)|0;
           $522 = (($n0$089$i$i) + ($n1$090$i$i))|0;
           $523 = (($363) + ($522<<2)|0);
           HEAP32[$523>>2] = $520;
           $n0$2$i$i = $n0$089$i$i;$n1$1$i$i = $521;
          }
         }
         $524 = ($507|0)!=(0);
         if ($524) {
          label = 116;
         } else {
          if ($85) {
           $n0$4$i$i = $n0$2$i$i;$n1$3$i$i = $n1$1$i$i;
          } else {
           $525 = HEAP32[$80>>2]|0;
           $526 = $525 & 127;
           $527 = ($526|0)==($367|0);
           $528 = ($dist$094$i$i|0)>($min_chuai$0$i$i|0);
           $or$cond10$i$i = $527 & $528;
           if ($or$cond10$i$i) {
            $n0$4$i$i = $n0$2$i$i;$n1$3$i$i = $n1$1$i$i;
           } else {
            label = 116;
           }
          }
         }
         do {
          if ((label|0) == 116) {
           label = 0;
           if ($69) {
            $529 = HEAP32[$75>>2]|0;
            do {
             if ($524) {
              $530 = $529 & 1572864;
              $531 = ($530|0)==(0);
              if (!($531)) {
               $532 = $to$091$i$i | 11136;
               HEAP32[$amove$i$i>>2] = $532;
               $nmove$4$i$i = 1;
               break;
              }
              $533 = $529 & 224;
              $534 = ($533|0)!=(0);
              $535 = ($to$091$i$i|0)<(72);
              $or$cond11$i$i = $534 & $535;
              if ($or$cond11$i$i) {
               $536 = $to$091$i$i | 10496;
               HEAP32[$amove$i$i>>2] = $536;
               $nmove$4$i$i = 1;
               break;
              }
              $537 = $529 & 31;
              $538 = ($537|0)!=(0);
              $or$cond12$i$i = $538 & $535;
              if (!($or$cond12$i$i)) {
               $nmove$4$i$i = 0;
               break;
              }
              $539 = HEAP32[$76>>2]|0;
              $540 = HEAP32[$77>>2]|0;
              $541 = $540 | $539;
              $542 = HEAP32[$78>>2]|0;
              $543 = $541 | $542;
              $544 = (1248 + ($to$091$i$i)|0);
              $545 = HEAP8[$544>>0]|0;
              $546 = $545&255;
              $547 = 67240192 >>> $546;
              $548 = $547 & $543;
              $549 = ($548|0)==(0);
              if (!($549)) {
               $nmove$4$i$i = 0;
               break;
              }
              $550 = (($to$091$i$i) + 9)|0;
              $551 = ((($ptree) + ($550)|0) + 512|0);
              $552 = HEAP8[$551>>0]|0;
              $553 = ($552<<24>>24)==(8);
              if ($553) {
               $554 = (_is_mate_w_pawn_drop($ptree,$to$091$i$i)|0);
               $555 = ($554|0)==(0);
               if (!($555)) {
                $nmove$4$i$i = 0;
                break;
               }
              }
              $556 = $to$091$i$i | 10368;
              HEAP32[$amove$i$i>>2] = $556;
              $nmove$4$i$i = 1;
             } else {
              $557 = $529 & 31;
              $558 = ($557|0)!=(0);
              $559 = ($to$091$i$i|0)<(72);
              $or$cond13$i$i = $558 & $559;
              do {
               if ($or$cond13$i$i) {
                $560 = HEAP32[$76>>2]|0;
                $561 = HEAP32[$77>>2]|0;
                $562 = $561 | $560;
                $563 = HEAP32[$78>>2]|0;
                $564 = $562 | $563;
                $565 = (1248 + ($to$091$i$i)|0);
                $566 = HEAP8[$565>>0]|0;
                $567 = $566&255;
                $568 = 67240192 >>> $567;
                $569 = $568 & $564;
                $570 = ($569|0)==(0);
                if (!($570)) {
                 $nmove$2$i$i = 0;
                 break;
                }
                $571 = (($to$091$i$i) + 9)|0;
                $572 = ((($ptree) + ($571)|0) + 512|0);
                $573 = HEAP8[$572>>0]|0;
                $574 = ($573<<24>>24)==(8);
                if ($574) {
                 $575 = (_is_mate_w_pawn_drop($ptree,$to$091$i$i)|0);
                 $576 = ($575|0)==(0);
                 if (!($576)) {
                  $nmove$2$i$i = 0;
                  break;
                 }
                }
                $577 = $to$091$i$i | 10368;
                HEAP32[$amove$i$i>>2] = $577;
                $nmove$2$i$i = 1;
               } else {
                $nmove$2$i$i = 0;
               }
              } while(0);
              $578 = $529 & 224;
              $579 = ($578|0)!=(0);
              $or$cond14$i$i = $579 & $559;
              if ($or$cond14$i$i) {
               $580 = $to$091$i$i | 10496;
               $581 = (($nmove$2$i$i) + 1)|0;
               $582 = (($amove$i$i) + ($nmove$2$i$i<<2)|0);
               HEAP32[$582>>2] = $580;
               $nmove$3$i$i = $581;
              } else {
               $nmove$3$i$i = $nmove$2$i$i;
              }
              $583 = $529 & 1572864;
              $584 = ($583|0)==(0);
              if ($584) {
               $nmove$4$i$i = $nmove$3$i$i;
               break;
              }
              $585 = $to$091$i$i | 11136;
              $586 = (($nmove$3$i$i) + 1)|0;
              $587 = (($amove$i$i) + ($nmove$3$i$i<<2)|0);
              HEAP32[$587>>2] = $585;
              $nmove$4$i$i = $586;
             }
            } while(0);
            $588 = $529 & 1792;
            $589 = ($588|0)!=(0);
            $590 = ($to$091$i$i|0)<(63);
            $or$cond15$i$i = $589 & $590;
            if ($or$cond15$i$i) {
             $591 = $to$091$i$i | 10624;
             $592 = (($nmove$4$i$i) + 1)|0;
             $593 = (($amove$i$i) + ($nmove$4$i$i<<2)|0);
             HEAP32[$593>>2] = $591;
             $hand$0$i$i = $529;$nmove$8$i$i = $592;
            } else {
             $hand$0$i$i = $529;$nmove$8$i$i = $nmove$4$i$i;
            }
           } else {
            $594 = HEAP32[$81>>2]|0;
            do {
             if ($524) {
              $595 = $594 & 1572864;
              $596 = ($595|0)==(0);
              if (!($596)) {
               $597 = $to$091$i$i | 11136;
               HEAP32[$amove$i$i>>2] = $597;
               $nmove$7$i$i = 1;
               break;
              }
              $598 = $594 & 224;
              $599 = ($598|0)!=(0);
              $600 = ($to$091$i$i|0)>(8);
              $or$cond16$i$i = $599 & $600;
              if ($or$cond16$i$i) {
               $601 = $to$091$i$i | 10496;
               HEAP32[$amove$i$i>>2] = $601;
               $nmove$7$i$i = 1;
               break;
              }
              $602 = $594 & 31;
              $603 = ($602|0)!=(0);
              $or$cond17$i$i = $603 & $600;
              if (!($or$cond17$i$i)) {
               $nmove$7$i$i = 0;
               break;
              }
              $604 = HEAP32[$82>>2]|0;
              $605 = HEAP32[$83>>2]|0;
              $606 = $605 | $604;
              $607 = HEAP32[$84>>2]|0;
              $608 = $606 | $607;
              $609 = (1248 + ($to$091$i$i)|0);
              $610 = HEAP8[$609>>0]|0;
              $611 = $610&255;
              $612 = 67240192 >>> $611;
              $613 = $612 & $608;
              $614 = ($613|0)==(0);
              if (!($614)) {
               $nmove$7$i$i = 0;
               break;
              }
              $615 = (($to$091$i$i) + -9)|0;
              $616 = ((($ptree) + ($615)|0) + 512|0);
              $617 = HEAP8[$616>>0]|0;
              $618 = ($617<<24>>24)==(-8);
              if ($618) {
               $619 = (_is_mate_b_pawn_drop($ptree,$to$091$i$i)|0);
               $620 = ($619|0)==(0);
               if (!($620)) {
                $nmove$7$i$i = 0;
                break;
               }
              }
              $621 = $to$091$i$i | 10368;
              HEAP32[$amove$i$i>>2] = $621;
              $nmove$7$i$i = 1;
             } else {
              $622 = $594 & 31;
              $623 = ($622|0)!=(0);
              $624 = ($to$091$i$i|0)>(8);
              $or$cond18$i$i = $623 & $624;
              do {
               if ($or$cond18$i$i) {
                $625 = HEAP32[$82>>2]|0;
                $626 = HEAP32[$83>>2]|0;
                $627 = $626 | $625;
                $628 = HEAP32[$84>>2]|0;
                $629 = $627 | $628;
                $630 = (1248 + ($to$091$i$i)|0);
                $631 = HEAP8[$630>>0]|0;
                $632 = $631&255;
                $633 = 67240192 >>> $632;
                $634 = $633 & $629;
                $635 = ($634|0)==(0);
                if (!($635)) {
                 $nmove$5$i$i = 0;
                 break;
                }
                $636 = (($to$091$i$i) + -9)|0;
                $637 = ((($ptree) + ($636)|0) + 512|0);
                $638 = HEAP8[$637>>0]|0;
                $639 = ($638<<24>>24)==(-8);
                if ($639) {
                 $640 = (_is_mate_b_pawn_drop($ptree,$to$091$i$i)|0);
                 $641 = ($640|0)==(0);
                 if (!($641)) {
                  $nmove$5$i$i = 0;
                  break;
                 }
                }
                $642 = $to$091$i$i | 10368;
                HEAP32[$amove$i$i>>2] = $642;
                $nmove$5$i$i = 1;
               } else {
                $nmove$5$i$i = 0;
               }
              } while(0);
              $643 = $594 & 224;
              $644 = ($643|0)!=(0);
              $or$cond19$i$i = $644 & $624;
              if ($or$cond19$i$i) {
               $645 = $to$091$i$i | 10496;
               $646 = (($nmove$5$i$i) + 1)|0;
               $647 = (($amove$i$i) + ($nmove$5$i$i<<2)|0);
               HEAP32[$647>>2] = $645;
               $nmove$6$i$i = $646;
              } else {
               $nmove$6$i$i = $nmove$5$i$i;
              }
              $648 = $594 & 1572864;
              $649 = ($648|0)==(0);
              if ($649) {
               $nmove$7$i$i = $nmove$6$i$i;
               break;
              }
              $650 = $to$091$i$i | 11136;
              $651 = (($nmove$6$i$i) + 1)|0;
              $652 = (($amove$i$i) + ($nmove$6$i$i<<2)|0);
              HEAP32[$652>>2] = $650;
              $nmove$7$i$i = $651;
             }
            } while(0);
            $653 = $594 & 1792;
            $654 = ($653|0)!=(0);
            $655 = ($to$091$i$i|0)>(17);
            $or$cond20$i$i = $654 & $655;
            if ($or$cond20$i$i) {
             $656 = $to$091$i$i | 10624;
             $657 = (($nmove$7$i$i) + 1)|0;
             $658 = (($amove$i$i) + ($nmove$7$i$i<<2)|0);
             HEAP32[$658>>2] = $656;
             $hand$0$i$i = $594;$nmove$8$i$i = $657;
            } else {
             $hand$0$i$i = $594;$nmove$8$i$i = $nmove$7$i$i;
            }
           }
           $659 = $hand$0$i$i & 14336;
           $660 = ($659|0)==(0);
           if ($660) {
            $nmove$9$i$i = $nmove$8$i$i;
           } else {
            $661 = $to$091$i$i | 10752;
            $662 = (($nmove$8$i$i) + 1)|0;
            $663 = (($amove$i$i) + ($nmove$8$i$i<<2)|0);
            HEAP32[$663>>2] = $661;
            $nmove$9$i$i = $662;
           }
           $664 = $hand$0$i$i & 114688;
           $665 = ($664|0)==(0);
           if ($665) {
            $nmove$10$i$i = $nmove$9$i$i;
           } else {
            $666 = $to$091$i$i | 10880;
            $667 = (($nmove$9$i$i) + 1)|0;
            $668 = (($amove$i$i) + ($nmove$9$i$i<<2)|0);
            HEAP32[$668>>2] = $666;
            $nmove$10$i$i = $667;
           }
           $669 = $hand$0$i$i & 393216;
           $670 = ($669|0)==(0);
           if ($670) {
            $nmove$11$i$i = $nmove$10$i$i;
           } else {
            $671 = $to$091$i$i | 11008;
            $672 = (($nmove$10$i$i) + 1)|0;
            $673 = (($amove$i$i) + ($nmove$10$i$i<<2)|0);
            HEAP32[$673>>2] = $671;
            $nmove$11$i$i = $672;
           }
           if (!($524)) {
            $674 = ($nmove$11$i$i|0)>(0);
            if (!($674)) {
             $n0$4$i$i = $n0$2$i$i;$n1$3$i$i = $n1$1$i$i;
             break;
            }
            $675 = (($n1$1$i$i) + ($n0$2$i$i))|0;
            $scevgep131$i$i = (($363) + ($675<<2)|0);
            $676 = $nmove$11$i$i << 2;
            _memcpy(($scevgep131$i$i|0),($amove$i$i|0),($676|0))|0;
            $677 = (($nmove$11$i$i) + ($n1$1$i$i))|0;
            $n0$4$i$i = $n0$2$i$i;$n1$3$i$i = $677;
            break;
           }
           $678 = ($nmove$11$i$i|0)!=(0);
           $or$cond21$i$i = $678 & $79;
           $679 = ($dist$094$i$i|0)>($min_chuai$0$i$i|0);
           $or$cond22$i$i = $or$cond21$i$i & $679;
           if ($or$cond22$i$i) {
            $680 = HEAP32[$80>>2]|0;
            $681 = $680 & 16256;
            $682 = ($681>>>0)>(10240);
            if ($682) {
             break L111;
            }
           }
           $685 = ($n1$1$i$i|0)>(0);
           if ($685) {
            $686 = (($n1$1$i$i) + ($n0$2$i$i))|0;
            $i$266$in$i$i = $686;
            while(1) {
             $i$266$i$i = (($i$266$in$i$i) + -1)|0;
             $687 = (($363) + ($i$266$i$i<<2)|0);
             $688 = HEAP32[$687>>2]|0;
             $689 = (($i$266$i$i) + ($nmove$11$i$i))|0;
             $690 = (($363) + ($689<<2)|0);
             HEAP32[$690>>2] = $688;
             $691 = ($i$266$i$i|0)>($n0$2$i$i|0);
             if ($691) {
              $i$266$in$i$i = $i$266$i$i;
             } else {
              break;
             }
            }
           }
           $692 = ($nmove$11$i$i|0)>(0);
           if (!($692)) {
            $n0$4$i$i = $n0$2$i$i;$n1$3$i$i = $n1$1$i$i;
            break;
           }
           $scevgep134$i$i = (($363) + ($n0$2$i$i<<2)|0);
           $693 = $nmove$11$i$i << 2;
           _memcpy(($scevgep134$i$i|0),($amove$i$i|0),($693|0))|0;
           $694 = (($nmove$11$i$i) + ($n0$2$i$i))|0;
           $n0$4$i$i = $694;$n1$3$i$i = $n1$1$i$i;
          }
         } while(0);
         $695 = (($dist$094$i$i) + 1)|0;
         $696 = (($to$091$i$i) + ($$inc$0$i$i))|0;
         $697 = ($696|0)==($367|0);
         if ($697) {
          $n0$0$lcssa$i$i = $n0$4$i$i;$n1$0$lcssa$i$i = $n1$3$i$i;
          label = 177;
          break L110;
         } else {
          $dist$094$i$i = $695;$n0$089$i$i = $n0$4$i$i;$n1$090$i$i = $n1$3$i$i;$to$091$i$i = $696;
         }
        }
        $683 = HEAP32[$amove$i$i>>2]|0;
        HEAP32[$363>>2] = $683;
        $684 = (($363) + 4|0);
        HEAP32[$63>>2] = $684;
       }
      } while(0);
      if ((label|0) == 177) {
       label = 0;
       $$sum$i$i = (($n0$0$lcssa$i$i) + ($n1$0$lcssa$i$i))|0;
       $698 = (($363) + ($$sum$i$i<<2)|0);
       HEAP32[$63>>2] = $698;
       $699 = ($n0$0$lcssa$i$i|0)<(0);
       if (!($699)) {
        HEAP32[$68>>2] = $n0$0$lcssa$i$i;
        $704 = $n0$0$lcssa$i$i;
        label = 181;
        break;
       }
      }
      HEAP32[$5>>2] = 10;
      HEAP32[$68>>2] = 0;
      $700 = HEAP32[$62>>2]|0;
      $701 = (($700) + 4|0);
      HEAP32[$62>>2] = $701;
      $702 = HEAP32[$700>>2]|0;
      HEAP32[$58>>2] = $702;
      $716 = $702;
     }
    } else {
     label = 180;
    }
   }
  } while(0);
  if ((label|0) == 180) {
   label = 0;
   $$pr = HEAP32[$68>>2]|0;
   $704 = $$pr;
   label = 181;
  }
  do {
   if ((label|0) == 181) {
    label = 0;
    $703 = (($704) + -1)|0;
    HEAP32[$68>>2] = $703;
    $705 = ($704|0)==(0);
    if ($705) {
     HEAP32[$5>>2] = 9;
     label = 184;
     break;
    } else {
     $706 = HEAP32[$62>>2]|0;
     $707 = (($706) + 4|0);
     HEAP32[$62>>2] = $707;
     $708 = HEAP32[$706>>2]|0;
     HEAP32[$58>>2] = $708;
     $716 = $708;
     break;
    }
   }
  } while(0);
  if ((label|0) == 184) {
   label = 0;
   $709 = HEAP32[$62>>2]|0;
   $710 = HEAP32[$63>>2]|0;
   $711 = ($709|0)==($710|0);
   if ($711) {
    $$0 = 1;
    label = 226;
    break;
   }
   $712 = (($709) + 4|0);
   HEAP32[$62>>2] = $712;
   $713 = HEAP32[$709>>2]|0;
   HEAP32[$58>>2] = $713;
   $716 = $713;
  }
  $714 = HEAP32[$5>>2]|0;
  $715 = ($714|0)==(10);
  if ($715) {
   $$0 = 0;
   label = 226;
   break;
  }
  if ($69) {
   _make_move_w($ptree,$716,$ply);
   if ($89) {
    $721 = HEAP8[$57>>0]|0;
    $722 = $721&255;
    $723 = (_is_black_attacked($ptree,$722)|0);
    $724 = ($723|0)==(0);
    if ($724) {
     $726 = (_is_b_mate_in_1ply($ptree)|0);
     $move$0 = $726;
     label = 194;
    } else {
     label = 195;
    }
   } else {
    label = 190;
   }
  } else {
   _make_move_b($ptree,$716,$ply);
   label = 190;
  }
  if ((label|0) == 190) {
   label = 0;
   $717 = HEAP8[$59>>0]|0;
   $718 = $717&255;
   $719 = (_is_white_attacked($ptree,$718)|0);
   $720 = ($719|0)==(0);
   if ($720) {
    $725 = (_is_w_mate_in_1ply($ptree)|0);
    $move$0 = $725;
    label = 194;
   } else {
    label = 195;
   }
  }
  if ((label|0) == 194) {
   label = 0;
   $727 = ($move$0|0)==(0);
   if ($727) {
    label = 195;
   } else {
    $move$1 = $move$0;
   }
  }
  L272: do {
   if ((label|0) == 195) {
    label = 0;
    $728 = HEAP32[$5>>2]|0;
    $729 = ($728|0)==(9);
    if ($729) {
     $730 = HEAP8[$asq>>0]|0;
     $731 = $730 << 24 >> 24;
     $732 = HEAP32[$58>>2]|0;
     $733 = $732 & 127;
     if ($91) {
      $move$1 = 0;
     } else {
      $734 = ($turn|0)!=(1);
      if ($734) {
       $735 = HEAP8[$59>>0]|0;
       $736 = $735&255;
       $737 = ((220518304 + (($736*81)|0)|0) + ($731)|0);
       $738 = HEAP8[$737>>0]|0;
       $739 = $738&255;
       $740 = ($738<<24>>24)==(0);
       if (!($740)) {
        $741 = ((220518304 + (($736*81)|0)|0) + ($733)|0);
        $742 = HEAP8[$741>>0]|0;
        $743 = ($738<<24>>24)==($742<<24>>24);
        if (!($743)) {
         $744 = (_is_pinned_on_white_king($ptree,$731,$739)|0);
         $745 = ($744|0)==(0);
         if (!($745)) {
          $move$1 = 0;
          break;
         }
        }
       }
       $746 = ((($ptree) + ($731)|0) + 512|0);
       $747 = HEAP8[$746>>0]|0;
       $748 = $747 << 24 >> 24;
       $749 = (0 - ($748))|0;
       $750 = ((($ptree) + ($733)|0) + 512|0);
       $751 = HEAP8[$750>>0]|0;
       $752 = $751 << 24 >> 24;
       $753 = $731 << 7;
       $754 = $753 | $733;
       $755 = $749 << 15;
       $756 = $754 | $755;
       $757 = $752 << 19;
       $758 = $756 | $757;
       HEAP32[$92>>2] = $758;
       $759 = $749 & -2;
       $760 = ($759|0)==(6);
       if ($760) {
        $761 = ($733>>>0)>(53);
        $762 = ($730<<24>>24)>(53);
        $or$cond$i = $761 | $762;
        if ($or$cond$i) {
         $763 = $758 | 16384;
         HEAP32[$92>>2] = $763;
         $793 = $763;
        } else {
         $793 = $758;
        }
       } else {
        $793 = $758;
       }
      } else {
       $764 = HEAP8[$57>>0]|0;
       $765 = $764&255;
       $766 = ((220518304 + (($765*81)|0)|0) + ($731)|0);
       $767 = HEAP8[$766>>0]|0;
       $768 = $767&255;
       $769 = ($767<<24>>24)==(0);
       if (!($769)) {
        $770 = ((220518304 + (($765*81)|0)|0) + ($733)|0);
        $771 = HEAP8[$770>>0]|0;
        $772 = ($767<<24>>24)==($771<<24>>24);
        if (!($772)) {
         $773 = (_is_pinned_on_black_king($ptree,$731,$768)|0);
         $774 = ($773|0)==(0);
         if (!($774)) {
          $move$1 = 0;
          break;
         }
        }
       }
       $775 = ((($ptree) + ($731)|0) + 512|0);
       $776 = HEAP8[$775>>0]|0;
       $777 = $776 << 24 >> 24;
       $778 = ((($ptree) + ($733)|0) + 512|0);
       $779 = HEAP8[$778>>0]|0;
       $780 = $779 << 24 >> 24;
       $781 = (0 - ($780))|0;
       $782 = $731 << 7;
       $783 = $782 | $733;
       $784 = $777 << 15;
       $785 = $783 | $784;
       $786 = $781 << 19;
       $787 = $785 | $786;
       HEAP32[$92>>2] = $787;
       $788 = $776 & -2;
       $789 = ($788<<24>>24)==(6);
       if ($789) {
        $790 = ($733>>>0)<(27);
        $791 = ($730<<24>>24)<(27);
        $or$cond7$i = $790 | $791;
        if ($or$cond7$i) {
         $792 = $787 | 16384;
         HEAP32[$92>>2] = $792;
         $793 = $792;
        } else {
         $793 = $787;
        }
       } else {
        $793 = $787;
       }
      }
      if ($734) {
       _make_move_w($ptree,$793,$90);
      } else {
       _make_move_b($ptree,$793,$90);
      }
      $794 = HEAP32[$58>>2]|0;
      $795 = $794 & 16256;
      $796 = ($795>>>0)<(10368);
      do {
       if ($796) {
        if ($734) {
         $797 = HEAP8[$59>>0]|0;
         $798 = $797&255;
         $799 = (_is_white_attacked($ptree,$798)|0);
         $800 = ($799|0)==(0);
         if ($800) {
          $flag$0$i = 1;
          break;
         }
         $805 = HEAP32[$92>>2]|0;
         _unmake_move_w($ptree,$805,$90);
         $move$1 = 0;
         break L272;
        } else {
         $801 = HEAP8[$57>>0]|0;
         $802 = $801&255;
         $803 = (_is_black_attacked($ptree,$802)|0);
         $804 = ($803|0)==(0);
         if ($804) {
          $flag$0$i = 1;
          break;
         }
         $806 = HEAP32[$92>>2]|0;
         _unmake_move_b($ptree,$806,$90);
         $move$1 = 0;
         break L272;
        }
       } else {
        $flag$0$i = 2;
       }
      } while(0);
      $807 = HEAP32[$63>>2]|0;
      HEAP32[$93>>2] = $807;
      $808 = (_mate3_and($ptree,$turn,$94,$flag$0$i)|0);
      $809 = HEAP32[$92>>2]|0;
      if ($734) {
       _unmake_move_w($ptree,$809,$90);
       $move$1 = $808;
       break;
      } else {
       _unmake_move_b($ptree,$809,$90);
       $move$1 = $808;
       break;
      }
     }
    } else {
     $move$1 = 0;
    }
   }
  } while(0);
  $810 = HEAP32[$58>>2]|0;
  if ($69) {
   _unmake_move_w($ptree,$810,$ply);
  } else {
   _unmake_move_b($ptree,$810,$ply);
  }
  $811 = ($move$1|0)==(0);
  if ($811) {
   $$0 = 0;
   label = 226;
   break;
  }
 }
 if ((label|0) == 226) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _gen_king_move($ptree,$psq,$turn,$is_capture,$pmove) {
 $ptree = $ptree|0;
 $psq = $psq|0;
 $turn = $turn|0;
 $is_capture = $is_capture|0;
 $pmove = $pmove|0;
 var $$0$be = 0, $$0$lcssa = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $bb$sroa$0$0 = 0, $bb$sroa$0$1 = 0, $bb$sroa$0$2$ph = 0, $bb$sroa$0$211 = 0, $bb$sroa$1$0 = 0, $bb$sroa$1$1 = 0, $bb$sroa$1$2$ph = 0, $bb$sroa$1$210 = 0, $bb$sroa$2$0 = 0, $bb$sroa$2$1 = 0, $bb$sroa$2$2$ph = 0, $bb$sroa$2$29 = 0, $from$0$ph = 0, $ispos = 0, $ispos3 = 0, $neg = 0, $neg4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($turn|0)!=(0);
 if ($0) {
  $1 = (($ptree) + 594|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = (33578928 + (($3*12)|0)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((33578928 + (($3*12)|0)|0) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((33578928 + (($3*12)|0)|0) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($is_capture|0)==(0);
  $11 = (($ptree) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  if ($10) {
   $34 = $12 ^ -1;
   $35 = $5 & $34;
   $36 = (($ptree) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $37 ^ -1;
   $39 = $7 & $38;
   $40 = (($ptree) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 ^ -1;
   $43 = $9 & $42;
   $bb$sroa$0$0 = $35;$bb$sroa$1$0 = $39;$bb$sroa$2$0 = $43;
  } else {
   $13 = $12 & $5;
   $14 = (($ptree) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 & $7;
   $17 = (($ptree) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 & $9;
   $20 = HEAP8[$psq>>0]|0;
   $21 = $20 << 24 >> 24;
   $22 = (34156304 + (($21*12)|0)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $23 ^ -1;
   $25 = $13 & $24;
   $26 = ((34156304 + (($21*12)|0)|0) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $27 ^ -1;
   $29 = $16 & $28;
   $30 = ((34156304 + (($21*12)|0)|0) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $31 ^ -1;
   $33 = $19 & $32;
   $bb$sroa$0$0 = $25;$bb$sroa$1$0 = $29;$bb$sroa$2$0 = $33;
  }
  $44 = (($ptree) + 20|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $45 ^ -1;
  $47 = $bb$sroa$0$0 & $46;
  $48 = (($ptree) + 24|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $49 ^ -1;
  $51 = $bb$sroa$1$0 & $50;
  $52 = (($ptree) + 28|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $53 ^ -1;
  $55 = $bb$sroa$2$0 & $54;
  $bb$sroa$0$2$ph = $47;$bb$sroa$1$2$ph = $51;$bb$sroa$2$2$ph = $55;$from$0$ph = $3;
 } else {
  $56 = (($ptree) + 593|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = (33578928 + (($58*12)|0)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((33578928 + (($58*12)|0)|0) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ((33578928 + (($58*12)|0)|0) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($is_capture|0)==(0);
  $66 = (($ptree) + 20|0);
  $67 = HEAP32[$66>>2]|0;
  if ($65) {
   $89 = $67 ^ -1;
   $90 = $60 & $89;
   $91 = (($ptree) + 24|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $92 ^ -1;
   $94 = $62 & $93;
   $95 = (($ptree) + 28|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $96 ^ -1;
   $98 = $64 & $97;
   $bb$sroa$0$1 = $90;$bb$sroa$1$1 = $94;$bb$sroa$2$1 = $98;
  } else {
   $68 = $67 & $60;
   $69 = (($ptree) + 24|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $70 & $62;
   $72 = (($ptree) + 28|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $73 & $64;
   $75 = HEAP8[$psq>>0]|0;
   $76 = $75 << 24 >> 24;
   $77 = (34156304 + (($76*12)|0)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $78 ^ -1;
   $80 = $68 & $79;
   $81 = ((34156304 + (($76*12)|0)|0) + 4|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $82 ^ -1;
   $84 = $71 & $83;
   $85 = ((34156304 + (($76*12)|0)|0) + 8|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $86 ^ -1;
   $88 = $74 & $87;
   $bb$sroa$0$1 = $80;$bb$sroa$1$1 = $84;$bb$sroa$2$1 = $88;
  }
  $99 = (($ptree) + 8|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $100 ^ -1;
  $102 = $bb$sroa$0$1 & $101;
  $103 = (($ptree) + 12|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = $104 ^ -1;
  $106 = $bb$sroa$1$1 & $105;
  $107 = (($ptree) + 16|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $108 ^ -1;
  $110 = $bb$sroa$2$1 & $109;
  $bb$sroa$0$2$ph = $102;$bb$sroa$1$2$ph = $106;$bb$sroa$2$2$ph = $110;$from$0$ph = $58;
 }
 $111 = $bb$sroa$1$2$ph | $bb$sroa$2$2$ph;
 $112 = $111 | $bb$sroa$0$2$ph;
 $113 = ($112|0)==(0);
 if ($113) {
  $$0$lcssa = $pmove;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $114 = (($psq) + 1|0);
 $115 = $from$0$ph << 7;
 $$012 = $pmove;$bb$sroa$0$211 = $bb$sroa$0$2$ph;$bb$sroa$1$210 = $bb$sroa$1$2$ph;$bb$sroa$2$29 = $bb$sroa$2$2$ph;
 while(1) {
  $116 = (_last_one210($bb$sroa$2$29,$bb$sroa$1$210,$bb$sroa$0$211)|0);
  $117 = (34156304 + (($116*12)|0)|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = $118 ^ $bb$sroa$0$211;
  $120 = ((34156304 + (($116*12)|0)|0) + 4|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $121 ^ $bb$sroa$1$210;
  $123 = ((34156304 + (($116*12)|0)|0) + 8|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $124 ^ $bb$sroa$2$29;
  $126 = HEAP8[$114>>0]|0;
  $127 = ($126<<24>>24)==(81);
  if ($127) {
   label = 15;
  } else {
   $128 = $126 << 24 >> 24;
   $129 = ((220518304 + (($from$0$ph*81)|0)|0) + ($128)|0);
   $130 = HEAP8[$129>>0]|0;
   $131 = ((220518304 + (($from$0$ph*81)|0)|0) + ($116)|0);
   $132 = HEAP8[$131>>0]|0;
   $133 = ($130<<24>>24)==($132<<24>>24);
   if ($133) {
    $$0$be = $$012;
   } else {
    label = 15;
   }
  }
  L20: do {
   if ((label|0) == 15) {
    label = 0;
    $137 = HEAP8[$psq>>0]|0;
    $138 = $137 << 24 >> 24;
    $139 = ($138|0)==($116|0);
    do {
     if (!($139)) {
      $140 = ((220518304 + (($from$0$ph*81)|0)|0) + ($138)|0);
      $141 = HEAP8[$140>>0]|0;
      $142 = $141&255;
      $143 = ((220518304 + (($from$0$ph*81)|0)|0) + ($116)|0);
      $144 = HEAP8[$143>>0]|0;
      $145 = ($141<<24>>24)==($144<<24>>24);
      if ($145) {
       $146 = $142 & 2;
       $147 = ($146|0)==(0);
       if (!($147)) {
        $148 = ((($ptree) + ($138)|0) + 512|0);
        $149 = HEAP8[$148>>0]|0;
        $150 = $149 << 24 >> 24;
        $ispos3 = ($149<<24>>24)>(-1);
        $neg4 = (0 - ($150))|0;
        $151 = $ispos3 ? $150 : $neg4;
        if ((($151|0) == 15) | (($151|0) == 7) | (($151|0) == 2)) {
         $$0$be = $$012;
         break L20;
        } else {
         break;
        }
       }
       $152 = $142 & 4;
       $153 = ($152|0)==(0);
       if (!($153)) {
        $154 = ((($ptree) + ($138)|0) + 512|0);
        $155 = HEAP8[$154>>0]|0;
        $156 = $155 << 24 >> 24;
        $ispos = ($155<<24>>24)>(-1);
        $neg = (0 - ($156))|0;
        $157 = $ispos ? $156 : $neg;
        if ((($157|0) == 14) | (($157|0) == 6)) {
         $$0$be = $$012;
         break L20;
        }
       }
      }
     }
    } while(0);
    if ($0) {
     $158 = (_is_white_attacked($ptree,$116)|0);
     $159 = ($158|0)==(0);
     if (!($159)) {
      $$0$be = $$012;
      break;
     }
     $160 = ((($ptree) + ($116)|0) + 512|0);
     $161 = HEAP8[$160>>0]|0;
     $162 = $161 << 24 >> 24;
     $163 = $162 << 19;
     $164 = $115 | $116;
     $165 = $164 | $163;
     $166 = $165 | 262144;
     $167 = (($$012) + 4|0);
     HEAP32[$$012>>2] = $166;
     $$0$be = $167;
     break;
    } else {
     $168 = (_is_black_attacked($ptree,$116)|0);
     $169 = ($168|0)==(0);
     if (!($169)) {
      $$0$be = $$012;
      break;
     }
     $170 = ((($ptree) + ($116)|0) + 512|0);
     $171 = HEAP8[$170>>0]|0;
     $172 = $171 << 24 >> 24;
     $173 = (0 - ($172))|0;
     $174 = $173 << 19;
     $175 = $115 | $116;
     $176 = $175 | $174;
     $177 = $176 | 262144;
     $178 = (($$012) + 4|0);
     HEAP32[$$012>>2] = $177;
     $$0$be = $178;
     break;
    }
   }
  } while(0);
  $134 = $122 | $125;
  $135 = $134 | $119;
  $136 = ($135|0)==(0);
  if ($136) {
   $$0$lcssa = $$0$be;
   break;
  } else {
   $$012 = $$0$be;$bb$sroa$0$211 = $119;$bb$sroa$1$210 = $122;$bb$sroa$2$29 = $125;
  }
 }
 STACKTOP = sp;return ($$0$lcssa|0);
}
function _b_gen_checks($__ptree__,$pmove) {
 $__ptree__ = $__ptree__|0;
 $pmove = $pmove|0;
 var $$ = 0, $$$63 = 0, $$$65 = 0, $$$67 = 0, $$$v = 0, $$0462 = 0, $$1 = 0, $$10$lcssa = 0, $$10407 = 0, $$11$lcssa = 0, $$11397 = 0, $$12$lcssa = 0, $$12388 = 0, $$13$lcssa = 0, $$13392 = 0, $$14$lcssa = 0, $$14378 = 0, $$15$lcssa = 0, $$15374 = 0, $$16$lcssa = 0;
 var $$16364 = 0, $$17$lcssa = 0, $$17357 = 0, $$18$lcssa = 0, $$18351 = 0, $$19$lcssa = 0, $$19346 = 0, $$2$lcssa = 0, $$20$lcssa = 0, $$20340 = 0, $$21$lcssa = 0, $$21335 = 0, $$22$lcssa = 0, $$22329 = 0, $$23$lcssa = 0, $$23322 = 0, $$24$lcssa = 0, $$24316 = 0, $$2456 = 0, $$25$lcssa = 0;
 var $$25310 = 0, $$26$lcssa = 0, $$26304 = 0, $$27$lcssa = 0, $$27298 = 0, $$28$lcssa = 0, $$28292 = 0, $$29$lcssa = 0, $$29285 = 0, $$3$lcssa = 0, $$30$lcssa = 0, $$30279 = 0, $$31$lcssa = 0, $$31273 = 0, $$32$ph512 = 0, $$32$ph519 = 0, $$33$ph492 = 0, $$33$ph499 = 0, $$34$ph472 = 0, $$34$ph479 = 0;
 var $$3449 = 0, $$35$lcssa = 0, $$35226 = 0, $$36223 = 0, $$37 = 0, $$38219 = 0, $$39 = 0, $$4$lcssa = 0, $$40$ph = 0, $$40142 = 0, $$41 = 0, $$42 = 0, $$43$lcssa = 0, $$43214 = 0, $$44 = 0, $$4443 = 0, $$45$lcssa = 0, $$45208 = 0, $$46$lcssa = 0, $$46201 = 0;
 var $$47$lcssa = 0, $$47193 = 0, $$48$lcssa = 0, $$48186 = 0, $$49 = 0, $$5$lcssa = 0, $$50$lcssa = 0, $$50178 = 0, $$51$lcssa = 0, $$51167 = 0, $$52$lcssa = 0, $$52156 = 0, $$53147 = 0, $$54 = 0, $$5436 = 0, $$55 = 0, $$55$v = 0, $$56 = 0, $$56$v = 0, $$57 = 0;
 var $$57$v = 0, $$58 = 0, $$58$v = 0, $$59 = 0, $$59$v = 0, $$6$lcssa = 0, $$60 = 0, $$60$v = 0, $$61 = 0, $$62 = 0, $$62$v = 0, $$63 = 0, $$63$v = 0, $$6430 = 0, $$65 = 0, $$65$v = 0, $$67 = 0, $$67$v = 0, $$69 = 0, $$69$v = 0;
 var $$7$lcssa = 0, $$71 = 0, $$71$v = 0, $$7421 = 0, $$8$lcssa = 0, $$8425 = 0, $$9$lcssa = 0, $$9411 = 0, $$not = 0, $$off = 0, $$ph229468 = 0, $$ph229474 = 0, $$ph230470 = 0, $$ph230475 = 0, $$ph241486 = 0, $$ph241493 = 0, $$ph242488 = 0, $$ph242494 = 0, $$ph243490 = 0, $$ph243495 = 0;
 var $$ph257506 = 0, $$ph257513 = 0, $$ph258508 = 0, $$ph258514 = 0, $$ph259510 = 0, $$ph259515 = 0, $$ph370 = 0, $$ph371 = 0, $$ph372 = 0, $$ph384 = 0, $$ph385 = 0, $$ph386 = 0, $$ph403 = 0, $$ph404 = 0, $$ph405 = 0, $$ph417 = 0, $$ph418 = 0, $$ph419 = 0, $$ph466 = 0, $$ph473 = 0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$pre621 = 0, $$pre622 = 0, $$pre623 = 0, $$pre624$pre = 0, $$pre625$pre = 0, $$pre626 = 0, $$pre627 = 0, $$pre635 = 0, $$pre638 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0;
 var $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0;
 var $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0;
 var $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0;
 var $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0;
 var $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0;
 var $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0;
 var $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0;
 var $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0;
 var $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0;
 var $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0;
 var $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0;
 var $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0;
 var $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0;
 var $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0;
 var $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0;
 var $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0;
 var $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0;
 var $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0;
 var $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0;
 var $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0;
 var $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0;
 var $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0;
 var $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0;
 var $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0;
 var $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0;
 var $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0;
 var $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0;
 var $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0;
 var $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0;
 var $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0;
 var $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0;
 var $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0;
 var $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0;
 var $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0;
 var $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0;
 var $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0;
 var $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0;
 var $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0;
 var $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0;
 var $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0;
 var $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0;
 var $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0;
 var $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0;
 var $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0;
 var $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0;
 var $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0;
 var $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0;
 var $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0;
 var $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0;
 var $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0;
 var $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0;
 var $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0;
 var $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0;
 var $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0;
 var $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0;
 var $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0;
 var $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0;
 var $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0;
 var $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bb_piece$sroa$0$0453 = 0, $bb_piece$sroa$0$1440 = 0, $bb_piece$sroa$0$2361 = 0, $bb_piece$sroa$0$3326 = 0, $bb_piece$sroa$0$4289 = 0, $bb_piece$sroa$0$5$ph516 = 0, $bb_piece$sroa$0$5267 = 0, $bb_piece$sroa$0$6$ph496 = 0, $bb_piece$sroa$0$6251 = 0, $bb_piece$sroa$0$7$ph476 = 0;
 var $bb_piece$sroa$0$7236 = 0, $bb_piece$sroa$1$0454 = 0, $bb_piece$sroa$1$1441 = 0, $bb_piece$sroa$1$2362 = 0, $bb_piece$sroa$1$3327 = 0, $bb_piece$sroa$1$4290 = 0, $bb_piece$sroa$1$5$ph517 = 0, $bb_piece$sroa$1$5268 = 0, $bb_piece$sroa$1$6$ph497 = 0, $bb_piece$sroa$1$6252 = 0, $bb_piece$sroa$1$7$ph477 = 0, $bb_piece$sroa$1$7237 = 0, $bb_piece$sroa$2$0455 = 0, $bb_piece$sroa$2$1442 = 0, $bb_piece$sroa$2$2363 = 0, $bb_piece$sroa$2$3328 = 0, $bb_piece$sroa$2$4291 = 0, $bb_piece$sroa$2$5$ph518 = 0, $bb_piece$sroa$2$5269 = 0, $bb_piece$sroa$2$6$ph498 = 0;
 var $bb_piece$sroa$2$6253 = 0, $bb_piece$sroa$2$7$ph478 = 0, $bb_piece$sroa$2$7238 = 0, $bb_tmp$sroa$0$0$i = 0, $bb_tmp$sroa$0$0$i103 = 0, $bb_tmp$sroa$0$0$i110 = 0, $bb_tmp$sroa$0$0$i117 = 0, $bb_tmp$sroa$0$0$i124 = 0, $bb_tmp$sroa$0$0$i131 = 0, $bb_tmp$sroa$0$0$i138 = 0, $bb_tmp$sroa$0$0$i75 = 0, $bb_tmp$sroa$0$0$i82 = 0, $bb_tmp$sroa$0$0$i89 = 0, $bb_tmp$sroa$0$0$i96 = 0, $bb_tmp$sroa$0$0$in$i = 0, $bb_tmp$sroa$0$0$in$i102 = 0, $bb_tmp$sroa$0$0$in$i109 = 0, $bb_tmp$sroa$0$0$in$i116 = 0, $bb_tmp$sroa$0$0$in$i123 = 0, $bb_tmp$sroa$0$0$in$i130 = 0;
 var $bb_tmp$sroa$0$0$in$i137 = 0, $bb_tmp$sroa$0$0$in$i74 = 0, $bb_tmp$sroa$0$0$in$i81 = 0, $bb_tmp$sroa$0$0$in$i88 = 0, $bb_tmp$sroa$0$0$in$i95 = 0, $bb_tmp$sroa$1$0$i = 0, $bb_tmp$sroa$1$0$i104 = 0, $bb_tmp$sroa$1$0$i118 = 0, $bb_tmp$sroa$1$0$i125 = 0, $bb_tmp$sroa$1$0$i132 = 0, $bb_tmp$sroa$1$0$i139 = 0, $bb_tmp$sroa$1$0$i76 = 0, $bb_tmp$sroa$1$0$i83 = 0, $bb_tmp$sroa$1$0$i90 = 0, $bb_tmp$sroa$1$0$in$i = 0, $bb_tmp$sroa$1$0$in$i101 = 0, $bb_tmp$sroa$1$0$in$i115 = 0, $bb_tmp$sroa$1$0$in$i122 = 0, $bb_tmp$sroa$1$0$in$i129 = 0, $bb_tmp$sroa$1$0$in$i136 = 0;
 var $bb_tmp$sroa$1$0$in$i73 = 0, $bb_tmp$sroa$1$0$in$i80 = 0, $bb_tmp$sroa$1$0$in$i87 = 0, $bb_tmp$sroa$2$0$i = 0, $bb_tmp$sroa$2$0$i105 = 0, $bb_tmp$sroa$2$0$i126 = 0, $bb_tmp$sroa$2$0$i133 = 0, $bb_tmp$sroa$2$0$i140 = 0, $bb_tmp$sroa$2$0$i77 = 0, $bb_tmp$sroa$2$0$i84 = 0, $bb_tmp$sroa$2$0$i91 = 0, $bb_tmp$sroa$2$0$in$i = 0, $bb_tmp$sroa$2$0$in$i100 = 0, $bb_tmp$sroa$2$0$in$i121 = 0, $bb_tmp$sroa$2$0$in$i128 = 0, $bb_tmp$sroa$2$0$in$i135 = 0, $bb_tmp$sroa$2$0$in$i72 = 0, $bb_tmp$sroa$2$0$in$i79 = 0, $bb_tmp$sroa$2$0$in$i86 = 0, $brmerge = 0;
 var $dist$0215 = 0, $dist2$0209 = 0, $dist2$1202 = 0, $dist2$2194 = 0, $dist2$3187 = 0, $dist6$0179 = 0, $dist6$1168 = 0, $dist6$2157 = 0, $dist6$3148 = 0, $file$0204 = 0, $file$0204$in = 0, $file$1 = 0, $file$1191 = 0, $file$1195 = 0, $file5$0181 = 0, $file5$0181$in = 0, $file5$1 = 0, $file5$1165 = 0, $file5$1171 = 0, $file5$2158 = 0;
 var $file5$2158$in = 0, $file5$3 = 0, $file5$3150 = 0, $min_dist$0 = 0, $min_dist3$0 = 0, $move$0 = 0, $move1$0 = 0, $move1$1 = 0, $move1$2 = 0, $move1$4 = 0, $move4$1 = 0, $move4$3 = 0, $move4$4 = 0, $move4$5 = 0, $or$cond = 0, $or$cond64 = 0, $or$cond64177 = 0, $or$cond66 = 0, $or$cond66166 = 0, $or$cond68 = 0;
 var $or$cond68155 = 0, $or$cond70 = 0, $or$cond70146 = 0, $rank$0180 = 0, $rank$0180$in = 0, $rank$1169 = 0, $rank$1169$in = 0, $rank$2 = 0, $rank$2153 = 0, $rank$2159 = 0, $rank$3 = 0, $rank$3149 = 0, $to$0 = 0, $to$0213 = 0, $to$0216 = 0, $to$1 = 0, $to$1207 = 0, $to$1210 = 0, $to$2203 = 0, $to$2203$in = 0;
 var $to$3196 = 0, $to$3196$in = 0, $to$4 = 0, $to$4185 = 0, $to$4188 = 0, $to$5182 = 0, $to$5182$in = 0, $to$6170 = 0, $to$6170$in = 0, $to$7160 = 0, $to$7160$in = 0, $to$8151 = 0, $to$8151$in = 0, $u0$0410 = 0, $u0$1377 = 0, $u0$2350 = 0, $u0$3314 = 0, $u1$0428 = 0, $u1$1395 = 0, $u1$2339 = 0;
 var $u1$3315 = 0, $u1$4302 = 0, $u1$5277 = 0, $u2$0429 = 0, $u2$1396 = 0, $u2$2303 = 0, $u2$3278 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__ptree__) + 594|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = ((33572424 + ($2<<3)|0) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ((($__ptree__) + ($5<<2)|0) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((33572424 + ($2<<3)|0) + 3|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $7 >>> $10;
 $12 = $11 & 127;
 $13 = ((33953152 + (($2*1536)|0)|0) + (($12*12)|0)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (((33953152 + (($2*1536)|0)|0) + (($12*12)|0)|0) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (((33953152 + (($2*1536)|0)|0) + (($12*12)|0)|0) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (33572424 + ($2<<3)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = ((($__ptree__) + ($21<<2)|0) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($__ptree__) + ($21<<2)|0) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 | $23;
 $27 = ((33572424 + ($2<<3)|0) + 1|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $26 >>> $29;
 $31 = $30 & 127;
 $32 = ((33828736 + (($2*1536)|0)|0) + (($31*12)|0)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (((33828736 + (($2*1536)|0)|0) + (($31*12)|0)|0) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (((33828736 + (($2*1536)|0)|0) + (($31*12)|0)|0) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $33 | $14;
 $39 = $35 | $16;
 $40 = $37 | $18;
 $41 = ((33572424 + ($2<<3)|0) + 6|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = ((($__ptree__) + ($43<<2)|0) + 56|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((33572424 + ($2<<3)|0) + 7|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = $45 >>> $48;
 $50 = $49 & 127;
 $51 = ((33704320 + (($2*1536)|0)|0) + (($50*12)|0)|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (((33704320 + (($2*1536)|0)|0) + (($50*12)|0)|0) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (((33704320 + (($2*1536)|0)|0) + (($50*12)|0)|0) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((33572424 + ($2<<3)|0) + 4|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = ((($__ptree__) + ($59<<2)|0) + 44|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((33572424 + ($2<<3)|0) + 5|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = $61 >>> $64;
 $66 = $65 & 127;
 $67 = ((33579904 + (($2*1536)|0)|0) + (($66*12)|0)|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (((33579904 + (($2*1536)|0)|0) + (($66*12)|0)|0) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (((33579904 + (($2*1536)|0)|0) + (($66*12)|0)|0) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $68 | $52;
 $74 = $70 | $54;
 $75 = $72 | $56;
 $76 = (($__ptree__) + 8|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $77 ^ -1;
 $79 = (($__ptree__) + 12|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $80 ^ -1;
 $82 = (($__ptree__) + 16|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 ^ -1;
 $85 = (($__ptree__) + 20|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $86 | $77;
 $88 = (($__ptree__) + 24|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 | $80;
 $91 = (($__ptree__) + 28|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $92 | $83;
 $94 = $87 ^ -1;
 $95 = $90 ^ -1;
 $96 = $93 ^ -1;
 $97 = (($__ptree__) + 593|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = $98&255;
 $100 = ((220518304 + (($2*81)|0)|0) + ($99)|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = ($101<<24>>24)==(0);
 if ($103) {
  $$1 = $pmove;
 } else {
  $104 = (_is_pinned_on_white_king($__ptree__,$99,$102)|0);
  $105 = ($104|0)==(0);
  if ($105) {
   $$1 = $pmove;
  } else {
   if ((($102|0) == 5)) {
    $109 = (33579904 + (($2*1536)|0)|0);
    $110 = ((33579904 + (($2*1536)|0)|0) + 4|0);
    $111 = ((33579904 + (($2*1536)|0)|0) + 8|0);
    $bb_tmp$sroa$0$0$in$i = $109;$bb_tmp$sroa$1$0$in$i = $110;$bb_tmp$sroa$2$0$in$i = $111;
   } else if ((($102|0) == 4)) {
    $106 = (33704320 + (($2*1536)|0)|0);
    $107 = ((33704320 + (($2*1536)|0)|0) + 4|0);
    $108 = ((33704320 + (($2*1536)|0)|0) + 8|0);
    $bb_tmp$sroa$0$0$in$i = $106;$bb_tmp$sroa$1$0$in$i = $107;$bb_tmp$sroa$2$0$in$i = $108;
   } else if ((($102|0) == 2)) {
    $112 = (33953152 + (($2*1536)|0)|0);
    $113 = ((33953152 + (($2*1536)|0)|0) + 4|0);
    $114 = ((33953152 + (($2*1536)|0)|0) + 8|0);
    $bb_tmp$sroa$0$0$in$i = $112;$bb_tmp$sroa$1$0$in$i = $113;$bb_tmp$sroa$2$0$in$i = $114;
   } else {
    $115 = (33828736 + (($2*1536)|0)|0);
    $116 = ((33828736 + (($2*1536)|0)|0) + 4|0);
    $117 = ((33828736 + (($2*1536)|0)|0) + 8|0);
    $bb_tmp$sroa$0$0$in$i = $115;$bb_tmp$sroa$1$0$in$i = $116;$bb_tmp$sroa$2$0$in$i = $117;
   }
   $bb_tmp$sroa$0$0$i = HEAP32[$bb_tmp$sroa$0$0$in$i>>2]|0;
   $bb_tmp$sroa$1$0$i = HEAP32[$bb_tmp$sroa$1$0$in$i>>2]|0;
   $bb_tmp$sroa$2$0$i = HEAP32[$bb_tmp$sroa$2$0$in$i>>2]|0;
   $118 = $bb_tmp$sroa$0$0$i ^ -1;
   $119 = $bb_tmp$sroa$1$0$i ^ -1;
   $120 = $bb_tmp$sroa$2$0$i ^ -1;
   $121 = (33578928 + (($99*12)|0)|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ((33578928 + (($99*12)|0)|0) + 4|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ((33578928 + (($99*12)|0)|0) + 8|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $118 & $78;
   $128 = $127 & $122;
   $129 = $119 & $81;
   $130 = $129 & $124;
   $131 = $120 & $84;
   $132 = $131 & $126;
   $133 = $130 | $132;
   $134 = $133 | $128;
   $135 = ($134|0)==(0);
   if ($135) {
    $$1 = $pmove;
   } else {
    $136 = $99 << 7;
    $$0462 = $pmove;$137 = $132;$138 = $130;$139 = $128;
    while(1) {
     $140 = (_last_one210($137,$138,$139)|0);
     $141 = (34156304 + (($140*12)|0)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = $142 ^ $139;
     $144 = ((34156304 + (($140*12)|0)|0) + 4|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = $145 ^ $138;
     $147 = ((34156304 + (($140*12)|0)|0) + 8|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = $148 ^ $137;
     $150 = ((($__ptree__) + ($140)|0) + 512|0);
     $151 = HEAP8[$150>>0]|0;
     $152 = $151 << 24 >> 24;
     $153 = (0 - ($152))|0;
     $154 = $153 << 19;
     $155 = $136 | $140;
     $156 = $155 | $154;
     $157 = $156 | 262144;
     $158 = (($$0462) + 4|0);
     HEAP32[$$0462>>2] = $157;
     $159 = $146 | $149;
     $160 = $159 | $143;
     $161 = ($160|0)==(0);
     if ($161) {
      $$1 = $158;
      break;
     } else {
      $$0462 = $158;$137 = $149;$138 = $146;$139 = $143;
     }
    }
   }
  }
 }
 $162 = (($__ptree__) + 332|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = (($__ptree__) + 336|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = (($__ptree__) + 340|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = $165 | $163;
 $169 = $168 | $167;
 $170 = ($169|0)==(0);
 if ($170) {
  $$2$lcssa = $$1;
 } else {
  $171 = (33578928 + (($2*12)|0)|0);
  $172 = ((33578928 + (($2*12)|0)|0) + 4|0);
  $173 = ((33578928 + (($2*12)|0)|0) + 8|0);
  $174 = (33828736 + (($2*1536)|0)|0);
  $175 = ((33828736 + (($2*1536)|0)|0) + 4|0);
  $176 = ((33828736 + (($2*1536)|0)|0) + 8|0);
  $177 = (33704320 + (($2*1536)|0)|0);
  $178 = ((33704320 + (($2*1536)|0)|0) + 4|0);
  $179 = ((33704320 + (($2*1536)|0)|0) + 8|0);
  $180 = (33579904 + (($2*1536)|0)|0);
  $181 = ((33579904 + (($2*1536)|0)|0) + 4|0);
  $182 = ((33579904 + (($2*1536)|0)|0) + 8|0);
  $183 = (33953152 + (($2*1536)|0)|0);
  $184 = ((33953152 + (($2*1536)|0)|0) + 4|0);
  $185 = ((33953152 + (($2*1536)|0)|0) + 8|0);
  $$2456 = $$1;$bb_piece$sroa$0$0453 = $163;$bb_piece$sroa$1$0454 = $165;$bb_piece$sroa$2$0455 = $167;
  while(1) {
   $192 = (_last_one210($bb_piece$sroa$2$0455,$bb_piece$sroa$1$0454,$bb_piece$sroa$0$0453)|0);
   $193 = (34156304 + (($192*12)|0)|0);
   $194 = HEAP32[$193>>2]|0;
   $188 = $194 ^ $bb_piece$sroa$0$0453;
   $195 = ((34156304 + (($192*12)|0)|0) + 4|0);
   $196 = HEAP32[$195>>2]|0;
   $187 = $196 ^ $bb_piece$sroa$1$0454;
   $197 = ((34156304 + (($192*12)|0)|0) + 8|0);
   $198 = HEAP32[$197>>2]|0;
   $190 = $198 ^ $bb_piece$sroa$2$0455;
   $199 = HEAP32[$171>>2]|0;
   $200 = $199 | $38;
   $201 = HEAP32[$172>>2]|0;
   $202 = $201 | $39;
   $203 = HEAP32[$173>>2]|0;
   $204 = $203 | $40;
   $205 = ((220518304 + (($2*81)|0)|0) + ($192)|0);
   $206 = HEAP8[$205>>0]|0;
   $207 = $206&255;
   $208 = ($206<<24>>24)==(0);
   if ($208) {
    $265 = $200;$268 = $202;$271 = $204;
   } else {
    $209 = (_is_pinned_on_white_king($__ptree__,$192,$207)|0);
    $210 = ($209|0)==(0);
    if ($210) {
     $265 = $200;$268 = $202;$271 = $204;
    } else {
     if ((($207|0) == 4)) {
      $bb_tmp$sroa$0$0$in$i137 = $177;$bb_tmp$sroa$1$0$in$i136 = $178;$bb_tmp$sroa$2$0$in$i135 = $179;
     } else if ((($207|0) == 2)) {
      $bb_tmp$sroa$0$0$in$i137 = $183;$bb_tmp$sroa$1$0$in$i136 = $184;$bb_tmp$sroa$2$0$in$i135 = $185;
     } else if ((($207|0) == 5)) {
      $bb_tmp$sroa$0$0$in$i137 = $180;$bb_tmp$sroa$1$0$in$i136 = $181;$bb_tmp$sroa$2$0$in$i135 = $182;
     } else {
      $bb_tmp$sroa$0$0$in$i137 = $174;$bb_tmp$sroa$1$0$in$i136 = $175;$bb_tmp$sroa$2$0$in$i135 = $176;
     }
     $bb_tmp$sroa$0$0$i138 = HEAP32[$bb_tmp$sroa$0$0$in$i137>>2]|0;
     $bb_tmp$sroa$1$0$i139 = HEAP32[$bb_tmp$sroa$1$0$in$i136>>2]|0;
     $bb_tmp$sroa$2$0$i140 = HEAP32[$bb_tmp$sroa$2$0$in$i135>>2]|0;
     $211 = $bb_tmp$sroa$0$0$i138 ^ -1;
     $212 = $bb_tmp$sroa$1$0$i139 ^ -1;
     $213 = $bb_tmp$sroa$2$0$i140 ^ -1;
     $214 = $200 | $211;
     $215 = $202 | $212;
     $216 = $204 | $213;
     $265 = $214;$268 = $215;$271 = $216;
    }
   }
   $217 = ((33572424 + ($192<<3)|0) + 2|0);
   $218 = HEAP8[$217>>0]|0;
   $219 = $218&255;
   $220 = ((($__ptree__) + ($219<<2)|0) + 32|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = ((33572424 + ($192<<3)|0) + 3|0);
   $223 = HEAP8[$222>>0]|0;
   $224 = $223&255;
   $225 = $221 >>> $224;
   $226 = $225 & 127;
   $227 = ((33953152 + (($192*1536)|0)|0) + (($226*12)|0)|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = (33572424 + ($192<<3)|0);
   $230 = HEAP8[$229>>0]|0;
   $231 = $230&255;
   $232 = ((($__ptree__) + ($231<<2)|0) + 8|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = ((($__ptree__) + ($231<<2)|0) + 20|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = $235 | $233;
   $237 = ((33572424 + ($192<<3)|0) + 1|0);
   $238 = HEAP8[$237>>0]|0;
   $239 = $238&255;
   $240 = $236 >>> $239;
   $241 = $240 & 127;
   $242 = ((33828736 + (($192*1536)|0)|0) + (($241*12)|0)|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = $243 | $228;
   $245 = (((33953152 + (($192*1536)|0)|0) + (($226*12)|0)|0) + 4|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = (((33828736 + (($192*1536)|0)|0) + (($241*12)|0)|0) + 4|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = $248 | $246;
   $250 = (((33953152 + (($192*1536)|0)|0) + (($226*12)|0)|0) + 8|0);
   $251 = HEAP32[$250>>2]|0;
   $252 = (((33828736 + (($192*1536)|0)|0) + (($241*12)|0)|0) + 8|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = $253 | $251;
   $255 = (33578928 + (($192*12)|0)|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = $244 | $256;
   $258 = ((33578928 + (($192*12)|0)|0) + 4|0);
   $259 = HEAP32[$258>>2]|0;
   $260 = $249 | $259;
   $261 = ((33578928 + (($192*12)|0)|0) + 8|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = $254 | $262;
   $264 = $265 & $78;
   $266 = $264 & $257;
   $267 = $268 & $81;
   $269 = $267 & $260;
   $270 = $271 & $84;
   $272 = $270 & $263;
   $273 = $269 | $272;
   $274 = $273 | $266;
   $275 = ($274|0)==(0);
   if ($275) {
    $$3$lcssa = $$2456;
   } else {
    $276 = $192 << 7;
    $$3449 = $$2456;$277 = $272;$278 = $269;$279 = $266;
    while(1) {
     $280 = (_last_one210($277,$278,$279)|0);
     $281 = (34156304 + (($280*12)|0)|0);
     $282 = HEAP32[$281>>2]|0;
     $283 = $282 ^ $279;
     $284 = ((34156304 + (($280*12)|0)|0) + 4|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = $285 ^ $278;
     $287 = ((34156304 + (($280*12)|0)|0) + 8|0);
     $288 = HEAP32[$287>>2]|0;
     $289 = $288 ^ $277;
     $290 = ((($__ptree__) + ($280)|0) + 512|0);
     $291 = HEAP8[$290>>0]|0;
     $292 = $291 << 24 >> 24;
     $293 = (0 - ($292))|0;
     $294 = $293 << 19;
     $295 = $276 | $280;
     $296 = $295 | $294;
     $297 = $296 | 491520;
     $298 = (($$3449) + 4|0);
     HEAP32[$$3449>>2] = $297;
     $299 = $286 | $289;
     $300 = $299 | $283;
     $301 = ($300|0)==(0);
     if ($301) {
      $$3$lcssa = $298;
      break;
     } else {
      $$3449 = $298;$277 = $289;$278 = $286;$279 = $283;
     }
    }
   }
   $186 = $187 | $188;
   $189 = $186 | $190;
   $191 = ($189|0)==(0);
   if ($191) {
    $$2$lcssa = $$3$lcssa;
    break;
   } else {
    $$2456 = $$3$lcssa;$bb_piece$sroa$0$0453 = $188;$bb_piece$sroa$1$0454 = $187;$bb_piece$sroa$2$0455 = $190;
   }
  }
 }
 $302 = (($__ptree__) + 308|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = (($__ptree__) + 312|0);
 $305 = HEAP32[$304>>2]|0;
 $306 = (($__ptree__) + 316|0);
 $307 = HEAP32[$306>>2]|0;
 $308 = $305 | $303;
 $309 = $308 | $307;
 $310 = ($309|0)==(0);
 if ($310) {
  $$4$lcssa = $$2$lcssa;
 } else {
  $311 = (33578928 + (($2*12)|0)|0);
  $312 = ((33578928 + (($2*12)|0)|0) + 4|0);
  $313 = ((33578928 + (($2*12)|0)|0) + 8|0);
  $314 = (33828736 + (($2*1536)|0)|0);
  $315 = ((33828736 + (($2*1536)|0)|0) + 4|0);
  $316 = ((33828736 + (($2*1536)|0)|0) + 8|0);
  $317 = (33704320 + (($2*1536)|0)|0);
  $318 = ((33704320 + (($2*1536)|0)|0) + 4|0);
  $319 = ((33704320 + (($2*1536)|0)|0) + 8|0);
  $320 = (33579904 + (($2*1536)|0)|0);
  $321 = ((33579904 + (($2*1536)|0)|0) + 4|0);
  $322 = ((33579904 + (($2*1536)|0)|0) + 8|0);
  $323 = (33953152 + (($2*1536)|0)|0);
  $324 = ((33953152 + (($2*1536)|0)|0) + 4|0);
  $325 = ((33953152 + (($2*1536)|0)|0) + 8|0);
  $$4443 = $$2$lcssa;$bb_piece$sroa$0$1440 = $303;$bb_piece$sroa$1$1441 = $305;$bb_piece$sroa$2$1442 = $307;
  while(1) {
   $332 = (_last_one210($bb_piece$sroa$2$1442,$bb_piece$sroa$1$1441,$bb_piece$sroa$0$1440)|0);
   $333 = (34156304 + (($332*12)|0)|0);
   $334 = HEAP32[$333>>2]|0;
   $328 = $334 ^ $bb_piece$sroa$0$1440;
   $335 = ((34156304 + (($332*12)|0)|0) + 4|0);
   $336 = HEAP32[$335>>2]|0;
   $327 = $336 ^ $bb_piece$sroa$1$1441;
   $337 = ((34156304 + (($332*12)|0)|0) + 8|0);
   $338 = HEAP32[$337>>2]|0;
   $330 = $338 ^ $bb_piece$sroa$2$1442;
   $339 = HEAP32[$311>>2]|0;
   $340 = $339 | $73;
   $341 = HEAP32[$312>>2]|0;
   $342 = $341 | $74;
   $343 = HEAP32[$313>>2]|0;
   $344 = $343 | $75;
   $345 = ((220518304 + (($2*81)|0)|0) + ($332)|0);
   $346 = HEAP8[$345>>0]|0;
   $347 = $346&255;
   $348 = ($346<<24>>24)==(0);
   if ($348) {
    $402 = $340;$405 = $342;$408 = $344;
   } else {
    $349 = (_is_pinned_on_white_king($__ptree__,$332,$347)|0);
    $350 = ($349|0)==(0);
    if ($350) {
     $402 = $340;$405 = $342;$408 = $344;
    } else {
     if ((($347|0) == 4)) {
      $bb_tmp$sroa$0$0$in$i130 = $317;$bb_tmp$sroa$1$0$in$i129 = $318;$bb_tmp$sroa$2$0$in$i128 = $319;
     } else if ((($347|0) == 5)) {
      $bb_tmp$sroa$0$0$in$i130 = $320;$bb_tmp$sroa$1$0$in$i129 = $321;$bb_tmp$sroa$2$0$in$i128 = $322;
     } else if ((($347|0) == 2)) {
      $bb_tmp$sroa$0$0$in$i130 = $323;$bb_tmp$sroa$1$0$in$i129 = $324;$bb_tmp$sroa$2$0$in$i128 = $325;
     } else {
      $bb_tmp$sroa$0$0$in$i130 = $314;$bb_tmp$sroa$1$0$in$i129 = $315;$bb_tmp$sroa$2$0$in$i128 = $316;
     }
     $bb_tmp$sroa$0$0$i131 = HEAP32[$bb_tmp$sroa$0$0$in$i130>>2]|0;
     $bb_tmp$sroa$1$0$i132 = HEAP32[$bb_tmp$sroa$1$0$in$i129>>2]|0;
     $bb_tmp$sroa$2$0$i133 = HEAP32[$bb_tmp$sroa$2$0$in$i128>>2]|0;
     $351 = $bb_tmp$sroa$0$0$i131 ^ -1;
     $352 = $bb_tmp$sroa$1$0$i132 ^ -1;
     $353 = $bb_tmp$sroa$2$0$i133 ^ -1;
     $354 = $340 | $351;
     $355 = $342 | $352;
     $356 = $344 | $353;
     $402 = $354;$405 = $355;$408 = $356;
    }
   }
   $357 = ((33572424 + ($332<<3)|0) + 6|0);
   $358 = HEAP8[$357>>0]|0;
   $359 = $358&255;
   $360 = ((($__ptree__) + ($359<<2)|0) + 56|0);
   $361 = HEAP32[$360>>2]|0;
   $362 = ((33572424 + ($332<<3)|0) + 7|0);
   $363 = HEAP8[$362>>0]|0;
   $364 = $363&255;
   $365 = $361 >>> $364;
   $366 = $365 & 127;
   $367 = ((33704320 + (($332*1536)|0)|0) + (($366*12)|0)|0);
   $368 = HEAP32[$367>>2]|0;
   $369 = ((33572424 + ($332<<3)|0) + 4|0);
   $370 = HEAP8[$369>>0]|0;
   $371 = $370&255;
   $372 = ((($__ptree__) + ($371<<2)|0) + 44|0);
   $373 = HEAP32[$372>>2]|0;
   $374 = ((33572424 + ($332<<3)|0) + 5|0);
   $375 = HEAP8[$374>>0]|0;
   $376 = $375&255;
   $377 = $373 >>> $376;
   $378 = $377 & 127;
   $379 = ((33579904 + (($332*1536)|0)|0) + (($378*12)|0)|0);
   $380 = HEAP32[$379>>2]|0;
   $381 = $380 | $368;
   $382 = (((33704320 + (($332*1536)|0)|0) + (($366*12)|0)|0) + 4|0);
   $383 = HEAP32[$382>>2]|0;
   $384 = (((33579904 + (($332*1536)|0)|0) + (($378*12)|0)|0) + 4|0);
   $385 = HEAP32[$384>>2]|0;
   $386 = $385 | $383;
   $387 = (((33704320 + (($332*1536)|0)|0) + (($366*12)|0)|0) + 8|0);
   $388 = HEAP32[$387>>2]|0;
   $389 = (((33579904 + (($332*1536)|0)|0) + (($378*12)|0)|0) + 8|0);
   $390 = HEAP32[$389>>2]|0;
   $391 = $390 | $388;
   $392 = (33578928 + (($332*12)|0)|0);
   $393 = HEAP32[$392>>2]|0;
   $394 = $381 | $393;
   $395 = ((33578928 + (($332*12)|0)|0) + 4|0);
   $396 = HEAP32[$395>>2]|0;
   $397 = $386 | $396;
   $398 = ((33578928 + (($332*12)|0)|0) + 8|0);
   $399 = HEAP32[$398>>2]|0;
   $400 = $391 | $399;
   $401 = $402 & $78;
   $403 = $401 & $394;
   $404 = $405 & $81;
   $406 = $404 & $397;
   $407 = $408 & $84;
   $409 = $407 & $400;
   $410 = $406 | $409;
   $411 = $410 | $403;
   $412 = ($411|0)==(0);
   if ($412) {
    $$5$lcssa = $$4443;
   } else {
    $413 = $332 << 7;
    $$5436 = $$4443;$414 = $409;$415 = $406;$416 = $403;
    while(1) {
     $417 = (_last_one210($414,$415,$416)|0);
     $418 = (34156304 + (($417*12)|0)|0);
     $419 = HEAP32[$418>>2]|0;
     $420 = $419 ^ $416;
     $421 = ((34156304 + (($417*12)|0)|0) + 4|0);
     $422 = HEAP32[$421>>2]|0;
     $423 = $422 ^ $415;
     $424 = ((34156304 + (($417*12)|0)|0) + 8|0);
     $425 = HEAP32[$424>>2]|0;
     $426 = $425 ^ $414;
     $427 = ((($__ptree__) + ($417)|0) + 512|0);
     $428 = HEAP8[$427>>0]|0;
     $429 = $428 << 24 >> 24;
     $430 = (0 - ($429))|0;
     $431 = $430 << 19;
     $432 = $413 | $417;
     $433 = $432 | $431;
     $434 = $433 | 458752;
     $435 = (($$5436) + 4|0);
     HEAP32[$$5436>>2] = $434;
     $436 = $423 | $426;
     $437 = $436 | $420;
     $438 = ($437|0)==(0);
     if ($438) {
      $$5$lcssa = $435;
      break;
     } else {
      $$5436 = $435;$414 = $426;$415 = $423;$416 = $420;
     }
    }
   }
   $326 = $327 | $328;
   $329 = $326 | $330;
   $331 = ($329|0)==(0);
   if ($331) {
    $$4$lcssa = $$5$lcssa;
    break;
   } else {
    $$4443 = $$5$lcssa;$bb_piece$sroa$0$1440 = $328;$bb_piece$sroa$1$1441 = $327;$bb_piece$sroa$2$1442 = $330;
   }
  }
 }
 $439 = (($__ptree__) + 288|0);
 $440 = HEAP32[$439>>2]|0;
 $441 = (($__ptree__) + 292|0);
 $442 = HEAP32[$441>>2]|0;
 $443 = $442 | $440;
 $444 = ($443|0)==(0);
 if ($444) {
  $$6$lcssa = $$4$lcssa;
 } else {
  $445 = (33578928 + (($2*12)|0)|0);
  $446 = $39 & $81;
  $447 = $40 & $84;
  $$6430 = $$4$lcssa;$u1$0428 = $440;$u2$0429 = $442;
  while(1) {
   $452 = (_last_one12($u1$0428,$u2$0429)|0);
   $453 = ((34156304 + (($452*12)|0)|0) + 4|0);
   $454 = HEAP32[$453>>2]|0;
   $450 = $454 ^ $u1$0428;
   $455 = ((34156304 + (($452*12)|0)|0) + 8|0);
   $456 = HEAP32[$455>>2]|0;
   $449 = $456 ^ $u2$0429;
   $457 = ((33572424 + ($452<<3)|0) + 2|0);
   $458 = HEAP8[$457>>0]|0;
   $459 = $458&255;
   $460 = ((($__ptree__) + ($459<<2)|0) + 32|0);
   $461 = HEAP32[$460>>2]|0;
   $462 = ((33572424 + ($452<<3)|0) + 3|0);
   $463 = HEAP8[$462>>0]|0;
   $464 = $463&255;
   $465 = $461 >>> $464;
   $466 = $465 & 127;
   $467 = ((33953152 + (($452*1536)|0)|0) + (($466*12)|0)|0);
   $468 = HEAP32[$467>>2]|0;
   $469 = (33572424 + ($452<<3)|0);
   $470 = HEAP8[$469>>0]|0;
   $471 = $470&255;
   $472 = ((($__ptree__) + ($471<<2)|0) + 8|0);
   $473 = HEAP32[$472>>2]|0;
   $474 = ((($__ptree__) + ($471<<2)|0) + 20|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = $475 | $473;
   $477 = ((33572424 + ($452<<3)|0) + 1|0);
   $478 = HEAP8[$477>>0]|0;
   $479 = $478&255;
   $480 = $476 >>> $479;
   $481 = $480 & 127;
   $482 = ((33828736 + (($452*1536)|0)|0) + (($481*12)|0)|0);
   $483 = HEAP32[$482>>2]|0;
   $484 = $483 | $468;
   $485 = (((33953152 + (($452*1536)|0)|0) + (($466*12)|0)|0) + 4|0);
   $486 = HEAP32[$485>>2]|0;
   $487 = (((33828736 + (($452*1536)|0)|0) + (($481*12)|0)|0) + 4|0);
   $488 = HEAP32[$487>>2]|0;
   $489 = $488 | $486;
   $490 = (((33953152 + (($452*1536)|0)|0) + (($466*12)|0)|0) + 8|0);
   $491 = HEAP32[$490>>2]|0;
   $492 = (((33828736 + (($452*1536)|0)|0) + (($481*12)|0)|0) + 8|0);
   $493 = HEAP32[$492>>2]|0;
   $494 = $493 | $491;
   $495 = ((220518304 + (($2*81)|0)|0) + ($452)|0);
   $496 = HEAP8[$495>>0]|0;
   $497 = ($496<<24>>24)==(0);
   if ($497) {
    label = 43;
   } else {
    $498 = $496&255;
    $499 = (_is_pinned_on_white_king($__ptree__,$452,$498)|0);
    $500 = ($499|0)==(0);
    if ($500) {
     label = 43;
    } else {
     $501 = $484 & $78;
     $502 = $489 & $81;
     $503 = $494 & $84;
     $$ph417 = $503;$$ph418 = $502;$$ph419 = $501;
    }
   }
   if ((label|0) == 43) {
    label = 0;
    $504 = HEAP32[$445>>2]|0;
    $505 = $504 | $38;
    $506 = $484 & $78;
    $507 = $506 & $505;
    $508 = $446 & $489;
    $509 = $447 & $494;
    $$ph417 = $509;$$ph418 = $508;$$ph419 = $507;
   }
   $510 = ($$ph419|0)==(0);
   if ($510) {
    $$7$lcssa = $$6430;
   } else {
    $511 = $452 << 7;
    $$7421 = $$6430;$512 = $$ph419;
    while(1) {
     $513 = (_last_one0($512)|0);
     $514 = (34156304 + (($513*12)|0)|0);
     $515 = HEAP32[$514>>2]|0;
     $516 = $515 ^ $512;
     $517 = ((($__ptree__) + ($513)|0) + 512|0);
     $518 = HEAP8[$517>>0]|0;
     $519 = $518 << 24 >> 24;
     $520 = (0 - ($519))|0;
     $521 = $520 << 19;
     $522 = $511 | $513;
     $523 = $522 | $521;
     $524 = $523 | 245760;
     $525 = (($$7421) + 4|0);
     HEAP32[$$7421>>2] = $524;
     $526 = ($515|0)==($512|0);
     if ($526) {
      $$7$lcssa = $525;
      break;
     } else {
      $$7421 = $525;$512 = $516;
     }
    }
   }
   $527 = $$ph418 | $$ph417;
   $528 = ($527|0)==(0);
   if ($528) {
    $$8$lcssa = $$7$lcssa;
   } else {
    $529 = $452 << 7;
    $$8425 = $$7$lcssa;$530 = $$ph418;$531 = $$ph417;
    while(1) {
     $532 = (_last_one12($530,$531)|0);
     $533 = ((34156304 + (($532*12)|0)|0) + 4|0);
     $534 = HEAP32[$533>>2]|0;
     $535 = $534 ^ $530;
     $536 = ((34156304 + (($532*12)|0)|0) + 8|0);
     $537 = HEAP32[$536>>2]|0;
     $538 = $537 ^ $531;
     $539 = ((($__ptree__) + ($532)|0) + 512|0);
     $540 = HEAP8[$539>>0]|0;
     $541 = $540 << 24 >> 24;
     $542 = (0 - ($541))|0;
     $543 = $542 << 19;
     $544 = $529 | $532;
     $545 = $544 | $543;
     $546 = $545 | 229376;
     $547 = (($$8425) + 4|0);
     HEAP32[$$8425>>2] = $546;
     $548 = $535 | $538;
     $549 = ($548|0)==(0);
     if ($549) {
      $$8$lcssa = $547;
      break;
     } else {
      $$8425 = $547;$530 = $535;$531 = $538;
     }
    }
   }
   $448 = $449 | $450;
   $451 = ($448|0)==(0);
   if ($451) {
    $$6$lcssa = $$8$lcssa;
    break;
   } else {
    $$6430 = $$8$lcssa;$u1$0428 = $450;$u2$0429 = $449;
   }
  }
 }
 $550 = (($__ptree__) + 284|0);
 $551 = HEAP32[$550>>2]|0;
 $552 = ($551|0)==(0);
 if ($552) {
  $$9$lcssa = $$6$lcssa;
 } else {
  $553 = (33578928 + (($2*12)|0)|0);
  $554 = ((33578928 + (($2*12)|0)|0) + 4|0);
  $555 = ((33578928 + (($2*12)|0)|0) + 8|0);
  $$9411 = $$6$lcssa;$u0$0410 = $551;
  while(1) {
   $558 = (_last_one0($u0$0410)|0);
   $559 = (34156304 + (($558*12)|0)|0);
   $557 = HEAP32[$559>>2]|0;
   $560 = $557 ^ $u0$0410;
   $561 = ((33572424 + ($558<<3)|0) + 2|0);
   $562 = HEAP8[$561>>0]|0;
   $563 = $562&255;
   $564 = ((($__ptree__) + ($563<<2)|0) + 32|0);
   $565 = HEAP32[$564>>2]|0;
   $566 = ((33572424 + ($558<<3)|0) + 3|0);
   $567 = HEAP8[$566>>0]|0;
   $568 = $567&255;
   $569 = $565 >>> $568;
   $570 = $569 & 127;
   $571 = ((33953152 + (($558*1536)|0)|0) + (($570*12)|0)|0);
   $572 = HEAP32[$571>>2]|0;
   $573 = (33572424 + ($558<<3)|0);
   $574 = HEAP8[$573>>0]|0;
   $575 = $574&255;
   $576 = ((($__ptree__) + ($575<<2)|0) + 8|0);
   $577 = HEAP32[$576>>2]|0;
   $578 = ((($__ptree__) + ($575<<2)|0) + 20|0);
   $579 = HEAP32[$578>>2]|0;
   $580 = $579 | $577;
   $581 = ((33572424 + ($558<<3)|0) + 1|0);
   $582 = HEAP8[$581>>0]|0;
   $583 = $582&255;
   $584 = $580 >>> $583;
   $585 = $584 & 127;
   $586 = ((33828736 + (($558*1536)|0)|0) + (($585*12)|0)|0);
   $587 = HEAP32[$586>>2]|0;
   $588 = $587 | $572;
   $589 = (((33953152 + (($558*1536)|0)|0) + (($570*12)|0)|0) + 4|0);
   $590 = HEAP32[$589>>2]|0;
   $591 = (((33828736 + (($558*1536)|0)|0) + (($585*12)|0)|0) + 4|0);
   $592 = HEAP32[$591>>2]|0;
   $593 = $592 | $590;
   $594 = (((33953152 + (($558*1536)|0)|0) + (($570*12)|0)|0) + 8|0);
   $595 = HEAP32[$594>>2]|0;
   $596 = (((33828736 + (($558*1536)|0)|0) + (($585*12)|0)|0) + 8|0);
   $597 = HEAP32[$596>>2]|0;
   $598 = $597 | $595;
   $599 = ((220518304 + (($2*81)|0)|0) + ($558)|0);
   $600 = HEAP8[$599>>0]|0;
   $601 = ($600<<24>>24)==(0);
   if ($601) {
    label = 56;
   } else {
    $602 = $600&255;
    $603 = (_is_pinned_on_white_king($__ptree__,$558,$602)|0);
    $604 = ($603|0)==(0);
    if ($604) {
     label = 56;
    } else {
     $605 = $588 & $78;
     $606 = $593 & $81;
     $607 = $598 & $84;
     $$ph403 = $607;$$ph404 = $606;$$ph405 = $605;
    }
   }
   if ((label|0) == 56) {
    label = 0;
    $608 = HEAP32[$553>>2]|0;
    $609 = $608 | $38;
    $610 = HEAP32[$554>>2]|0;
    $611 = $610 | $39;
    $612 = HEAP32[$555>>2]|0;
    $613 = $612 | $40;
    $614 = $588 & $78;
    $615 = $614 & $609;
    $616 = $593 & $81;
    $617 = $616 & $611;
    $618 = $598 & $84;
    $619 = $618 & $613;
    $$ph403 = $619;$$ph404 = $617;$$ph405 = $615;
   }
   $620 = $$ph404 | $$ph403;
   $621 = $620 | $$ph405;
   $622 = ($621|0)==(0);
   if ($622) {
    $$10$lcssa = $$9411;
   } else {
    $623 = $558 << 7;
    $$10407 = $$9411;$624 = $$ph403;$625 = $$ph404;$626 = $$ph405;
    while(1) {
     $627 = (_last_one210($624,$625,$626)|0);
     $628 = (34156304 + (($627*12)|0)|0);
     $629 = HEAP32[$628>>2]|0;
     $630 = $629 ^ $626;
     $631 = ((34156304 + (($627*12)|0)|0) + 4|0);
     $632 = HEAP32[$631>>2]|0;
     $633 = $632 ^ $625;
     $634 = ((34156304 + (($627*12)|0)|0) + 8|0);
     $635 = HEAP32[$634>>2]|0;
     $636 = $635 ^ $624;
     $637 = ((($__ptree__) + ($627)|0) + 512|0);
     $638 = HEAP8[$637>>0]|0;
     $639 = $638 << 24 >> 24;
     $640 = (0 - ($639))|0;
     $641 = $640 << 19;
     $642 = $623 | $627;
     $643 = $642 | $641;
     $644 = $643 | 245760;
     $645 = (($$10407) + 4|0);
     HEAP32[$$10407>>2] = $644;
     $646 = $633 | $636;
     $647 = $646 | $630;
     $648 = ($647|0)==(0);
     if ($648) {
      $$10$lcssa = $645;
      break;
     } else {
      $$10407 = $645;$624 = $636;$625 = $633;$626 = $630;
     }
    }
   }
   $556 = ($557|0)==($u0$0410|0);
   if ($556) {
    $$9$lcssa = $$10$lcssa;
    break;
   } else {
    $$9411 = $$10$lcssa;$u0$0410 = $560;
   }
  }
 }
 $649 = (($__ptree__) + 264|0);
 $650 = HEAP32[$649>>2]|0;
 $651 = (($__ptree__) + 268|0);
 $652 = HEAP32[$651>>2]|0;
 $653 = $652 | $650;
 $654 = ($653|0)==(0);
 if ($654) {
  $$11$lcssa = $$9$lcssa;
 } else {
  $655 = (33578928 + (($2*12)|0)|0);
  $656 = $74 & $81;
  $657 = $75 & $84;
  $$11397 = $$9$lcssa;$u1$1395 = $650;$u2$1396 = $652;
  while(1) {
   $662 = (_last_one12($u1$1395,$u2$1396)|0);
   $663 = ((34156304 + (($662*12)|0)|0) + 4|0);
   $664 = HEAP32[$663>>2]|0;
   $660 = $664 ^ $u1$1395;
   $665 = ((34156304 + (($662*12)|0)|0) + 8|0);
   $666 = HEAP32[$665>>2]|0;
   $659 = $666 ^ $u2$1396;
   $667 = ((33572424 + ($662<<3)|0) + 6|0);
   $668 = HEAP8[$667>>0]|0;
   $669 = $668&255;
   $670 = ((($__ptree__) + ($669<<2)|0) + 56|0);
   $671 = HEAP32[$670>>2]|0;
   $672 = ((33572424 + ($662<<3)|0) + 7|0);
   $673 = HEAP8[$672>>0]|0;
   $674 = $673&255;
   $675 = $671 >>> $674;
   $676 = $675 & 127;
   $677 = ((33704320 + (($662*1536)|0)|0) + (($676*12)|0)|0);
   $678 = HEAP32[$677>>2]|0;
   $679 = ((33572424 + ($662<<3)|0) + 4|0);
   $680 = HEAP8[$679>>0]|0;
   $681 = $680&255;
   $682 = ((($__ptree__) + ($681<<2)|0) + 44|0);
   $683 = HEAP32[$682>>2]|0;
   $684 = ((33572424 + ($662<<3)|0) + 5|0);
   $685 = HEAP8[$684>>0]|0;
   $686 = $685&255;
   $687 = $683 >>> $686;
   $688 = $687 & 127;
   $689 = ((33579904 + (($662*1536)|0)|0) + (($688*12)|0)|0);
   $690 = HEAP32[$689>>2]|0;
   $691 = $690 | $678;
   $692 = (((33704320 + (($662*1536)|0)|0) + (($676*12)|0)|0) + 4|0);
   $693 = HEAP32[$692>>2]|0;
   $694 = (((33579904 + (($662*1536)|0)|0) + (($688*12)|0)|0) + 4|0);
   $695 = HEAP32[$694>>2]|0;
   $696 = $695 | $693;
   $697 = (((33704320 + (($662*1536)|0)|0) + (($676*12)|0)|0) + 8|0);
   $698 = HEAP32[$697>>2]|0;
   $699 = (((33579904 + (($662*1536)|0)|0) + (($688*12)|0)|0) + 8|0);
   $700 = HEAP32[$699>>2]|0;
   $701 = $700 | $698;
   $702 = ((220518304 + (($2*81)|0)|0) + ($662)|0);
   $703 = HEAP8[$702>>0]|0;
   $704 = ($703<<24>>24)==(0);
   if ($704) {
    label = 66;
   } else {
    $705 = $703&255;
    $706 = (_is_pinned_on_white_king($__ptree__,$662,$705)|0);
    $707 = ($706|0)==(0);
    if ($707) {
     label = 66;
    } else {
     $708 = $691 & $78;
     $709 = $696 & $81;
     $710 = $701 & $84;
     $$ph384 = $710;$$ph385 = $709;$$ph386 = $708;
    }
   }
   if ((label|0) == 66) {
    label = 0;
    $711 = HEAP32[$655>>2]|0;
    $712 = $711 | $73;
    $713 = $691 & $78;
    $714 = $713 & $712;
    $715 = $656 & $696;
    $716 = $657 & $701;
    $$ph384 = $716;$$ph385 = $715;$$ph386 = $714;
   }
   $717 = ($$ph386|0)==(0);
   if ($717) {
    $$12$lcssa = $$11397;
   } else {
    $718 = $662 << 7;
    $$12388 = $$11397;$719 = $$ph386;
    while(1) {
     $720 = (_last_one0($719)|0);
     $721 = (34156304 + (($720*12)|0)|0);
     $722 = HEAP32[$721>>2]|0;
     $723 = $722 ^ $719;
     $724 = ((($__ptree__) + ($720)|0) + 512|0);
     $725 = HEAP8[$724>>0]|0;
     $726 = $725 << 24 >> 24;
     $727 = (0 - ($726))|0;
     $728 = $727 << 19;
     $729 = $718 | $720;
     $730 = $729 | $728;
     $731 = $730 | 212992;
     $732 = (($$12388) + 4|0);
     HEAP32[$$12388>>2] = $731;
     $733 = ($722|0)==($719|0);
     if ($733) {
      $$12$lcssa = $732;
      break;
     } else {
      $$12388 = $732;$719 = $723;
     }
    }
   }
   $734 = $$ph385 | $$ph384;
   $735 = ($734|0)==(0);
   if ($735) {
    $$13$lcssa = $$12$lcssa;
   } else {
    $736 = $662 << 7;
    $$13392 = $$12$lcssa;$737 = $$ph385;$738 = $$ph384;
    while(1) {
     $739 = (_last_one12($737,$738)|0);
     $740 = ((34156304 + (($739*12)|0)|0) + 4|0);
     $741 = HEAP32[$740>>2]|0;
     $742 = $741 ^ $737;
     $743 = ((34156304 + (($739*12)|0)|0) + 8|0);
     $744 = HEAP32[$743>>2]|0;
     $745 = $744 ^ $738;
     $746 = ((($__ptree__) + ($739)|0) + 512|0);
     $747 = HEAP8[$746>>0]|0;
     $748 = $747 << 24 >> 24;
     $749 = (0 - ($748))|0;
     $750 = $749 << 19;
     $751 = $736 | $739;
     $752 = $751 | $750;
     $753 = $752 | 196608;
     $754 = (($$13392) + 4|0);
     HEAP32[$$13392>>2] = $753;
     $755 = $742 | $745;
     $756 = ($755|0)==(0);
     if ($756) {
      $$13$lcssa = $754;
      break;
     } else {
      $$13392 = $754;$737 = $742;$738 = $745;
     }
    }
   }
   $658 = $659 | $660;
   $661 = ($658|0)==(0);
   if ($661) {
    $$11$lcssa = $$13$lcssa;
    break;
   } else {
    $$11397 = $$13$lcssa;$u1$1395 = $660;$u2$1396 = $659;
   }
  }
 }
 $757 = (($__ptree__) + 260|0);
 $758 = HEAP32[$757>>2]|0;
 $759 = ($758|0)==(0);
 if ($759) {
  $$14$lcssa = $$11$lcssa;
 } else {
  $760 = (33578928 + (($2*12)|0)|0);
  $761 = ((33578928 + (($2*12)|0)|0) + 4|0);
  $762 = ((33578928 + (($2*12)|0)|0) + 8|0);
  $$14378 = $$11$lcssa;$u0$1377 = $758;
  while(1) {
   $765 = (_last_one0($u0$1377)|0);
   $766 = (34156304 + (($765*12)|0)|0);
   $764 = HEAP32[$766>>2]|0;
   $767 = $764 ^ $u0$1377;
   $768 = ((33572424 + ($765<<3)|0) + 6|0);
   $769 = HEAP8[$768>>0]|0;
   $770 = $769&255;
   $771 = ((($__ptree__) + ($770<<2)|0) + 56|0);
   $772 = HEAP32[$771>>2]|0;
   $773 = ((33572424 + ($765<<3)|0) + 7|0);
   $774 = HEAP8[$773>>0]|0;
   $775 = $774&255;
   $776 = $772 >>> $775;
   $777 = $776 & 127;
   $778 = ((33704320 + (($765*1536)|0)|0) + (($777*12)|0)|0);
   $779 = HEAP32[$778>>2]|0;
   $780 = ((33572424 + ($765<<3)|0) + 4|0);
   $781 = HEAP8[$780>>0]|0;
   $782 = $781&255;
   $783 = ((($__ptree__) + ($782<<2)|0) + 44|0);
   $784 = HEAP32[$783>>2]|0;
   $785 = ((33572424 + ($765<<3)|0) + 5|0);
   $786 = HEAP8[$785>>0]|0;
   $787 = $786&255;
   $788 = $784 >>> $787;
   $789 = $788 & 127;
   $790 = ((33579904 + (($765*1536)|0)|0) + (($789*12)|0)|0);
   $791 = HEAP32[$790>>2]|0;
   $792 = $791 | $779;
   $793 = (((33704320 + (($765*1536)|0)|0) + (($777*12)|0)|0) + 4|0);
   $794 = HEAP32[$793>>2]|0;
   $795 = (((33579904 + (($765*1536)|0)|0) + (($789*12)|0)|0) + 4|0);
   $796 = HEAP32[$795>>2]|0;
   $797 = $796 | $794;
   $798 = (((33704320 + (($765*1536)|0)|0) + (($777*12)|0)|0) + 8|0);
   $799 = HEAP32[$798>>2]|0;
   $800 = (((33579904 + (($765*1536)|0)|0) + (($789*12)|0)|0) + 8|0);
   $801 = HEAP32[$800>>2]|0;
   $802 = $801 | $799;
   $803 = ((220518304 + (($2*81)|0)|0) + ($765)|0);
   $804 = HEAP8[$803>>0]|0;
   $805 = ($804<<24>>24)==(0);
   if ($805) {
    label = 79;
   } else {
    $806 = $804&255;
    $807 = (_is_pinned_on_white_king($__ptree__,$765,$806)|0);
    $808 = ($807|0)==(0);
    if ($808) {
     label = 79;
    } else {
     $809 = $792 & $78;
     $810 = $797 & $81;
     $811 = $802 & $84;
     $$ph370 = $811;$$ph371 = $810;$$ph372 = $809;
    }
   }
   if ((label|0) == 79) {
    label = 0;
    $812 = HEAP32[$760>>2]|0;
    $813 = $812 | $73;
    $814 = HEAP32[$761>>2]|0;
    $815 = $814 | $74;
    $816 = HEAP32[$762>>2]|0;
    $817 = $816 | $75;
    $818 = $792 & $78;
    $819 = $818 & $813;
    $820 = $797 & $81;
    $821 = $820 & $815;
    $822 = $802 & $84;
    $823 = $822 & $817;
    $$ph370 = $823;$$ph371 = $821;$$ph372 = $819;
   }
   $824 = $$ph371 | $$ph370;
   $825 = $824 | $$ph372;
   $826 = ($825|0)==(0);
   if ($826) {
    $$15$lcssa = $$14378;
   } else {
    $827 = $765 << 7;
    $$15374 = $$14378;$828 = $$ph370;$829 = $$ph371;$830 = $$ph372;
    while(1) {
     $831 = (_last_one210($828,$829,$830)|0);
     $832 = (34156304 + (($831*12)|0)|0);
     $833 = HEAP32[$832>>2]|0;
     $834 = $833 ^ $830;
     $835 = ((34156304 + (($831*12)|0)|0) + 4|0);
     $836 = HEAP32[$835>>2]|0;
     $837 = $836 ^ $829;
     $838 = ((34156304 + (($831*12)|0)|0) + 8|0);
     $839 = HEAP32[$838>>2]|0;
     $840 = $839 ^ $828;
     $841 = ((($__ptree__) + ($831)|0) + 512|0);
     $842 = HEAP8[$841>>0]|0;
     $843 = $842 << 24 >> 24;
     $844 = (0 - ($843))|0;
     $845 = $844 << 19;
     $846 = $827 | $831;
     $847 = $846 | $845;
     $848 = $847 | 212992;
     $849 = (($$15374) + 4|0);
     HEAP32[$$15374>>2] = $848;
     $850 = $837 | $840;
     $851 = $850 | $834;
     $852 = ($851|0)==(0);
     if ($852) {
      $$15$lcssa = $849;
      break;
     } else {
      $$15374 = $849;$828 = $840;$829 = $837;$830 = $834;
     }
    }
   }
   $763 = ($764|0)==($u0$1377|0);
   if ($763) {
    $$14$lcssa = $$15$lcssa;
    break;
   } else {
    $$14378 = $$15$lcssa;$u0$1377 = $767;
   }
  }
 }
 $853 = (($__ptree__) + 92|0);
 $854 = HEAP32[$853>>2]|0;
 $855 = (($__ptree__) + 96|0);
 $856 = HEAP32[$855>>2]|0;
 $857 = (($__ptree__) + 100|0);
 $858 = HEAP32[$857>>2]|0;
 $859 = $856 | $854;
 $860 = $859 | $858;
 $861 = ($860|0)==(0);
 if ($861) {
  $$16$lcssa = $$14$lcssa;
 } else {
  $862 = (33577952 + (($2*12)|0)|0);
  $863 = ((33577952 + (($2*12)|0)|0) + 4|0);
  $864 = ((33577952 + (($2*12)|0)|0) + 8|0);
  $865 = (33828736 + (($2*1536)|0)|0);
  $866 = ((33828736 + (($2*1536)|0)|0) + 4|0);
  $867 = ((33828736 + (($2*1536)|0)|0) + 8|0);
  $868 = (33704320 + (($2*1536)|0)|0);
  $869 = ((33704320 + (($2*1536)|0)|0) + 4|0);
  $870 = ((33704320 + (($2*1536)|0)|0) + 8|0);
  $871 = (33579904 + (($2*1536)|0)|0);
  $872 = ((33579904 + (($2*1536)|0)|0) + 4|0);
  $873 = ((33579904 + (($2*1536)|0)|0) + 8|0);
  $874 = (33953152 + (($2*1536)|0)|0);
  $875 = ((33953152 + (($2*1536)|0)|0) + 4|0);
  $876 = ((33953152 + (($2*1536)|0)|0) + 8|0);
  $$16364 = $$14$lcssa;$bb_piece$sroa$0$2361 = $854;$bb_piece$sroa$1$2362 = $856;$bb_piece$sroa$2$2363 = $858;
  while(1) {
   $883 = (_last_one210($bb_piece$sroa$2$2363,$bb_piece$sroa$1$2362,$bb_piece$sroa$0$2361)|0);
   $884 = (34156304 + (($883*12)|0)|0);
   $885 = HEAP32[$884>>2]|0;
   $879 = $885 ^ $bb_piece$sroa$0$2361;
   $886 = ((34156304 + (($883*12)|0)|0) + 4|0);
   $887 = HEAP32[$886>>2]|0;
   $878 = $887 ^ $bb_piece$sroa$1$2362;
   $888 = ((34156304 + (($883*12)|0)|0) + 8|0);
   $889 = HEAP32[$888>>2]|0;
   $881 = $889 ^ $bb_piece$sroa$2$2363;
   $890 = HEAP32[$862>>2]|0;
   $891 = HEAP32[$863>>2]|0;
   $892 = HEAP32[$864>>2]|0;
   $893 = ((220518304 + (($2*81)|0)|0) + ($883)|0);
   $894 = HEAP8[$893>>0]|0;
   $895 = $894&255;
   $896 = ($894<<24>>24)==(0);
   if ($896) {
    $912 = $890;$915 = $891;$918 = $892;
   } else {
    $897 = (_is_pinned_on_white_king($__ptree__,$883,$895)|0);
    $898 = ($897|0)==(0);
    if ($898) {
     $912 = $890;$915 = $891;$918 = $892;
    } else {
     if ((($895|0) == 5)) {
      $bb_tmp$sroa$0$0$in$i123 = $871;$bb_tmp$sroa$1$0$in$i122 = $872;$bb_tmp$sroa$2$0$in$i121 = $873;
     } else if ((($895|0) == 2)) {
      $bb_tmp$sroa$0$0$in$i123 = $874;$bb_tmp$sroa$1$0$in$i122 = $875;$bb_tmp$sroa$2$0$in$i121 = $876;
     } else if ((($895|0) == 4)) {
      $bb_tmp$sroa$0$0$in$i123 = $868;$bb_tmp$sroa$1$0$in$i122 = $869;$bb_tmp$sroa$2$0$in$i121 = $870;
     } else {
      $bb_tmp$sroa$0$0$in$i123 = $865;$bb_tmp$sroa$1$0$in$i122 = $866;$bb_tmp$sroa$2$0$in$i121 = $867;
     }
     $bb_tmp$sroa$0$0$i124 = HEAP32[$bb_tmp$sroa$0$0$in$i123>>2]|0;
     $bb_tmp$sroa$1$0$i125 = HEAP32[$bb_tmp$sroa$1$0$in$i122>>2]|0;
     $bb_tmp$sroa$2$0$i126 = HEAP32[$bb_tmp$sroa$2$0$in$i121>>2]|0;
     $899 = $bb_tmp$sroa$0$0$i124 ^ -1;
     $900 = $bb_tmp$sroa$1$0$i125 ^ -1;
     $901 = $bb_tmp$sroa$2$0$i126 ^ -1;
     $902 = $890 | $899;
     $903 = $891 | $900;
     $904 = $892 | $901;
     $912 = $902;$915 = $903;$918 = $904;
    }
   }
   $905 = (33575024 + (($883*12)|0)|0);
   $906 = HEAP32[$905>>2]|0;
   $907 = ((33575024 + (($883*12)|0)|0) + 4|0);
   $908 = HEAP32[$907>>2]|0;
   $909 = ((33575024 + (($883*12)|0)|0) + 8|0);
   $910 = HEAP32[$909>>2]|0;
   $911 = $912 & $78;
   $913 = $911 & $906;
   $914 = $915 & $81;
   $916 = $914 & $908;
   $917 = $918 & $84;
   $919 = $917 & $910;
   $920 = $916 | $919;
   $921 = $920 | $913;
   $922 = ($921|0)==(0);
   if ($922) {
    $$17$lcssa = $$16364;
   } else {
    $923 = $883 << 7;
    $924 = ((($__ptree__) + ($883)|0) + 512|0);
    $$17357 = $$16364;$925 = $919;$926 = $916;$927 = $913;
    while(1) {
     $928 = (_last_one210($925,$926,$927)|0);
     $929 = (34156304 + (($928*12)|0)|0);
     $930 = HEAP32[$929>>2]|0;
     $931 = $930 ^ $927;
     $932 = ((34156304 + (($928*12)|0)|0) + 4|0);
     $933 = HEAP32[$932>>2]|0;
     $934 = $933 ^ $926;
     $935 = ((34156304 + (($928*12)|0)|0) + 8|0);
     $936 = HEAP32[$935>>2]|0;
     $937 = $936 ^ $925;
     $938 = $928 | $923;
     $939 = HEAP8[$924>>0]|0;
     $940 = $939 << 24 >> 24;
     $941 = $940 << 15;
     $942 = $938 | $941;
     $943 = ((($__ptree__) + ($928)|0) + 512|0);
     $944 = HEAP8[$943>>0]|0;
     $945 = $944 << 24 >> 24;
     $946 = (0 - ($945))|0;
     $947 = $946 << 19;
     $948 = $942 | $947;
     $949 = (($$17357) + 4|0);
     HEAP32[$$17357>>2] = $948;
     $950 = $934 | $937;
     $951 = $950 | $931;
     $952 = ($951|0)==(0);
     if ($952) {
      $$17$lcssa = $949;
      break;
     } else {
      $$17357 = $949;$925 = $937;$926 = $934;$927 = $931;
     }
    }
   }
   $877 = $878 | $879;
   $880 = $877 | $881;
   $882 = ($880|0)==(0);
   if ($882) {
    $$16$lcssa = $$17$lcssa;
    break;
   } else {
    $$16364 = $$17$lcssa;$bb_piece$sroa$0$2361 = $879;$bb_piece$sroa$1$2362 = $878;$bb_piece$sroa$2$2363 = $881;
   }
  }
 }
 $953 = (($__ptree__) + 236|0);
 $954 = HEAP32[$953>>2]|0;
 $955 = ($954|0)==(0);
 if ($955) {
  $$18$lcssa = $$16$lcssa;
 } else {
  $956 = (33577952 + (($2*12)|0)|0);
  $957 = ((33577952 + (($2*12)|0)|0) + 4|0);
  $958 = (33828736 + (($2*1536)|0)|0);
  $959 = ((33828736 + (($2*1536)|0)|0) + 4|0);
  $960 = (33704320 + (($2*1536)|0)|0);
  $961 = ((33704320 + (($2*1536)|0)|0) + 4|0);
  $962 = (33579904 + (($2*1536)|0)|0);
  $963 = ((33579904 + (($2*1536)|0)|0) + 4|0);
  $964 = (33953152 + (($2*1536)|0)|0);
  $965 = ((33953152 + (($2*1536)|0)|0) + 4|0);
  $$18351 = $$16$lcssa;$u0$2350 = $954;
  while(1) {
   $968 = (_last_one0($u0$2350)|0);
   $969 = (34156304 + (($968*12)|0)|0);
   $967 = HEAP32[$969>>2]|0;
   $970 = $967 ^ $u0$2350;
   $971 = HEAP32[$956>>2]|0;
   $972 = HEAP32[$957>>2]|0;
   $973 = ((220518304 + (($2*81)|0)|0) + ($968)|0);
   $974 = HEAP8[$973>>0]|0;
   $975 = $974&255;
   $976 = ($974<<24>>24)==(0);
   if ($976) {
    $986 = $971;$991 = $972;
   } else {
    $977 = (_is_pinned_on_white_king($__ptree__,$968,$975)|0);
    $978 = ($977|0)==(0);
    if ($978) {
     $986 = $971;$991 = $972;
    } else {
     if ((($975|0) == 5)) {
      $bb_tmp$sroa$0$0$in$i116 = $962;$bb_tmp$sroa$1$0$in$i115 = $963;
     } else if ((($975|0) == 2)) {
      $bb_tmp$sroa$0$0$in$i116 = $964;$bb_tmp$sroa$1$0$in$i115 = $965;
     } else if ((($975|0) == 4)) {
      $bb_tmp$sroa$0$0$in$i116 = $960;$bb_tmp$sroa$1$0$in$i115 = $961;
     } else {
      $bb_tmp$sroa$0$0$in$i116 = $958;$bb_tmp$sroa$1$0$in$i115 = $959;
     }
     $bb_tmp$sroa$0$0$i117 = HEAP32[$bb_tmp$sroa$0$0$in$i116>>2]|0;
     $bb_tmp$sroa$1$0$i118 = HEAP32[$bb_tmp$sroa$1$0$in$i115>>2]|0;
     $979 = $bb_tmp$sroa$0$0$i117 ^ -1;
     $980 = $bb_tmp$sroa$1$0$i118 ^ -1;
     $981 = $971 | $979;
     $982 = $972 | $980;
     $986 = $981;$991 = $982;
    }
   }
   $983 = (33574048 + (($968*12)|0)|0);
   $984 = HEAP32[$983>>2]|0;
   $985 = $986 & $78;
   $987 = $985 & $984;
   $988 = ((33574048 + (($968*12)|0)|0) + 4|0);
   $989 = HEAP32[$988>>2]|0;
   $990 = $991 & $81;
   $992 = $990 & $989;
   $993 = $987 | $992;
   $994 = ($993|0)==(0);
   if ($994) {
    $$19$lcssa = $$18351;
   } else {
    $995 = $968 << 7;
    $$19346 = $$18351;$996 = $987;$997 = $992;
    while(1) {
     $998 = (_last_one01($996,$997)|0);
     $999 = (34156304 + (($998*12)|0)|0);
     $1000 = HEAP32[$999>>2]|0;
     $1001 = $1000 ^ $996;
     $1002 = ((34156304 + (($998*12)|0)|0) + 4|0);
     $1003 = HEAP32[$1002>>2]|0;
     $1004 = $1003 ^ $997;
     $1005 = ((($__ptree__) + ($998)|0) + 512|0);
     $1006 = HEAP8[$1005>>0]|0;
     $1007 = $1006 << 24 >> 24;
     $1008 = (0 - ($1007))|0;
     $1009 = $1008 << 19;
     $1010 = $995 | $998;
     $1011 = $1010 | $1009;
     $1012 = $1011 | 147456;
     $1013 = (($$19346) + 4|0);
     HEAP32[$$19346>>2] = $1012;
     $1014 = $1001 | $1004;
     $1015 = ($1014|0)==(0);
     if ($1015) {
      $$19$lcssa = $1013;
      break;
     } else {
      $$19346 = $1013;$996 = $1001;$997 = $1004;
     }
    }
   }
   $966 = ($967|0)==($u0$2350|0);
   if ($966) {
    $$18$lcssa = $$19$lcssa;
    break;
   } else {
    $$18351 = $$19$lcssa;$u0$2350 = $970;
   }
  }
 }
 $1016 = (($__ptree__) + 240|0);
 $1017 = HEAP32[$1016>>2]|0;
 $1018 = $1017 & 133955584;
 $1019 = ($1018|0)==(0);
 if ($1019) {
  $$20$lcssa = $$18$lcssa;$1065 = $1017;
 } else {
  $1020 = (33577952 + (($2*12)|0)|0);
  $1021 = (33828736 + (($2*1536)|0)|0);
  $1022 = (33704320 + (($2*1536)|0)|0);
  $1023 = (33579904 + (($2*1536)|0)|0);
  $1024 = (33953152 + (($2*1536)|0)|0);
  $$20340 = $$18$lcssa;$u1$2339 = $1018;
  while(1) {
   $1027 = (_last_one1($u1$2339)|0);
   $1028 = ((34156304 + (($1027*12)|0)|0) + 4|0);
   $1026 = HEAP32[$1028>>2]|0;
   $1029 = $1026 ^ $u1$2339;
   $1030 = HEAP32[$1020>>2]|0;
   $1031 = ((220518304 + (($2*81)|0)|0) + ($1027)|0);
   $1032 = HEAP8[$1031>>0]|0;
   $1033 = $1032&255;
   $1034 = ($1032<<24>>24)==(0);
   if ($1034) {
    $1042 = $1030;
   } else {
    $1035 = (_is_pinned_on_white_king($__ptree__,$1027,$1033)|0);
    $1036 = ($1035|0)==(0);
    if ($1036) {
     $1042 = $1030;
    } else {
     if ((($1033|0) == 5)) {
      $bb_tmp$sroa$0$0$in$i109 = $1023;
     } else if ((($1033|0) == 2)) {
      $bb_tmp$sroa$0$0$in$i109 = $1024;
     } else if ((($1033|0) == 4)) {
      $bb_tmp$sroa$0$0$in$i109 = $1022;
     } else {
      $bb_tmp$sroa$0$0$in$i109 = $1021;
     }
     $bb_tmp$sroa$0$0$i110 = HEAP32[$bb_tmp$sroa$0$0$in$i109>>2]|0;
     $1037 = $bb_tmp$sroa$0$0$i110 ^ -1;
     $1038 = $1030 | $1037;
     $1042 = $1038;
    }
   }
   $1039 = (33574048 + (($1027*12)|0)|0);
   $1040 = HEAP32[$1039>>2]|0;
   $1041 = $1042 & $78;
   $1043 = $1041 & $1040;
   $1044 = ($1043|0)==(0);
   if ($1044) {
    $$21$lcssa = $$20340;
   } else {
    $1045 = $1027 << 7;
    $$21335 = $$20340;$1046 = $1043;
    while(1) {
     $1047 = (_last_one0($1046)|0);
     $1048 = (34156304 + (($1047*12)|0)|0);
     $1049 = HEAP32[$1048>>2]|0;
     $1050 = $1049 ^ $1046;
     $1051 = ((($__ptree__) + ($1047)|0) + 512|0);
     $1052 = HEAP8[$1051>>0]|0;
     $1053 = $1052 << 24 >> 24;
     $1054 = (0 - ($1053))|0;
     $1055 = $1054 << 19;
     $1056 = $1045 | $1047;
     $1057 = $1056 | $1055;
     $1058 = $1057 | 147456;
     $1059 = (($$21335) + 4|0);
     HEAP32[$$21335>>2] = $1058;
     $1060 = ($1049|0)==($1046|0);
     if ($1060) {
      $$21$lcssa = $1059;
      break;
     } else {
      $$21335 = $1059;$1046 = $1050;
     }
    }
   }
   $1025 = ($1026|0)==($u1$2339|0);
   if ($1025) {
    break;
   } else {
    $$20340 = $$21$lcssa;$u1$2339 = $1029;
   }
  }
  $$pre = HEAP32[$1016>>2]|0;
  $$20$lcssa = $$21$lcssa;$1065 = $$pre;
 }
 $1061 = HEAP32[$953>>2]|0;
 $1062 = (($__ptree__) + 244|0);
 $1063 = HEAP32[$1062>>2]|0;
 $1064 = $1065 | $1061;
 $1066 = $1064 | $1063;
 $1067 = ($1066|0)==(0);
 if ($1067) {
  $$22$lcssa = $$20$lcssa;
 } else {
  $1068 = (33576976 + (($2*12)|0)|0);
  $1069 = ((33576976 + (($2*12)|0)|0) + 4|0);
  $1070 = ((33576976 + (($2*12)|0)|0) + 8|0);
  $1071 = (33828736 + (($2*1536)|0)|0);
  $1072 = ((33828736 + (($2*1536)|0)|0) + 4|0);
  $1073 = ((33828736 + (($2*1536)|0)|0) + 8|0);
  $1074 = (33704320 + (($2*1536)|0)|0);
  $1075 = ((33704320 + (($2*1536)|0)|0) + 4|0);
  $1076 = ((33704320 + (($2*1536)|0)|0) + 8|0);
  $1077 = (33579904 + (($2*1536)|0)|0);
  $1078 = ((33579904 + (($2*1536)|0)|0) + 4|0);
  $1079 = ((33579904 + (($2*1536)|0)|0) + 8|0);
  $1080 = (33953152 + (($2*1536)|0)|0);
  $1081 = ((33953152 + (($2*1536)|0)|0) + 4|0);
  $1082 = ((33953152 + (($2*1536)|0)|0) + 8|0);
  $$22329 = $$20$lcssa;$bb_piece$sroa$0$3326 = $1061;$bb_piece$sroa$1$3327 = $1065;$bb_piece$sroa$2$3328 = $1063;
  while(1) {
   $1089 = (_last_one210($bb_piece$sroa$2$3328,$bb_piece$sroa$1$3327,$bb_piece$sroa$0$3326)|0);
   $1090 = (34156304 + (($1089*12)|0)|0);
   $1091 = HEAP32[$1090>>2]|0;
   $1085 = $1091 ^ $bb_piece$sroa$0$3326;
   $1092 = ((34156304 + (($1089*12)|0)|0) + 4|0);
   $1093 = HEAP32[$1092>>2]|0;
   $1084 = $1093 ^ $bb_piece$sroa$1$3327;
   $1094 = ((34156304 + (($1089*12)|0)|0) + 8|0);
   $1095 = HEAP32[$1094>>2]|0;
   $1087 = $1095 ^ $bb_piece$sroa$2$3328;
   $1096 = HEAP32[$1068>>2]|0;
   $1097 = HEAP32[$1069>>2]|0;
   $1098 = HEAP32[$1070>>2]|0;
   $1099 = ((220518304 + (($2*81)|0)|0) + ($1089)|0);
   $1100 = HEAP8[$1099>>0]|0;
   $1101 = $1100&255;
   $1102 = ($1100<<24>>24)==(0);
   if ($1102) {
    $1118 = $1096;$1121 = $1097;$1124 = $1098;
   } else {
    $1103 = (_is_pinned_on_white_king($__ptree__,$1089,$1101)|0);
    $1104 = ($1103|0)==(0);
    if ($1104) {
     $1118 = $1096;$1121 = $1097;$1124 = $1098;
    } else {
     if ((($1101|0) == 5)) {
      $bb_tmp$sroa$0$0$in$i102 = $1077;$bb_tmp$sroa$1$0$in$i101 = $1078;$bb_tmp$sroa$2$0$in$i100 = $1079;
     } else if ((($1101|0) == 2)) {
      $bb_tmp$sroa$0$0$in$i102 = $1080;$bb_tmp$sroa$1$0$in$i101 = $1081;$bb_tmp$sroa$2$0$in$i100 = $1082;
     } else if ((($1101|0) == 4)) {
      $bb_tmp$sroa$0$0$in$i102 = $1074;$bb_tmp$sroa$1$0$in$i101 = $1075;$bb_tmp$sroa$2$0$in$i100 = $1076;
     } else {
      $bb_tmp$sroa$0$0$in$i102 = $1071;$bb_tmp$sroa$1$0$in$i101 = $1072;$bb_tmp$sroa$2$0$in$i100 = $1073;
     }
     $bb_tmp$sroa$0$0$i103 = HEAP32[$bb_tmp$sroa$0$0$in$i102>>2]|0;
     $bb_tmp$sroa$1$0$i104 = HEAP32[$bb_tmp$sroa$1$0$in$i101>>2]|0;
     $bb_tmp$sroa$2$0$i105 = HEAP32[$bb_tmp$sroa$2$0$in$i100>>2]|0;
     $1105 = $bb_tmp$sroa$0$0$i103 ^ -1;
     $1106 = $bb_tmp$sroa$1$0$i104 ^ -1;
     $1107 = $bb_tmp$sroa$2$0$i105 ^ -1;
     $1108 = $1096 | $1105;
     $1109 = $1097 | $1106;
     $1110 = $1098 | $1107;
     $1118 = $1108;$1121 = $1109;$1124 = $1110;
    }
   }
   $1111 = (33574048 + (($1089*12)|0)|0);
   $1112 = HEAP32[$1111>>2]|0;
   $1113 = ((33574048 + (($1089*12)|0)|0) + 4|0);
   $1114 = HEAP32[$1113>>2]|0;
   $1115 = ((33574048 + (($1089*12)|0)|0) + 8|0);
   $1116 = HEAP32[$1115>>2]|0;
   $1117 = $1118 & $78;
   $1119 = $1117 & $1112;
   $1120 = $1121 & $81;
   $1122 = $1120 & $1114;
   $1123 = $1124 & $84;
   $1125 = $1123 & $1116;
   $1126 = $1122 | $1125;
   $1127 = $1126 | $1119;
   $1128 = ($1127|0)==(0);
   if ($1128) {
    $$23$lcssa = $$22329;
   } else {
    $1129 = $1089 << 7;
    $$23322 = $$22329;$1130 = $1125;$1131 = $1122;$1132 = $1119;
    while(1) {
     $1133 = (_last_one210($1130,$1131,$1132)|0);
     $1134 = (34156304 + (($1133*12)|0)|0);
     $1135 = HEAP32[$1134>>2]|0;
     $1136 = $1135 ^ $1132;
     $1137 = ((34156304 + (($1133*12)|0)|0) + 4|0);
     $1138 = HEAP32[$1137>>2]|0;
     $1139 = $1138 ^ $1131;
     $1140 = ((34156304 + (($1133*12)|0)|0) + 8|0);
     $1141 = HEAP32[$1140>>2]|0;
     $1142 = $1141 ^ $1130;
     $1143 = ((($__ptree__) + ($1133)|0) + 512|0);
     $1144 = HEAP8[$1143>>0]|0;
     $1145 = $1144 << 24 >> 24;
     $1146 = (0 - ($1145))|0;
     $1147 = $1146 << 19;
     $1148 = $1129 | $1133;
     $1149 = $1148 | $1147;
     $1150 = $1149 | 131072;
     $1151 = (($$23322) + 4|0);
     HEAP32[$$23322>>2] = $1150;
     $1152 = $1139 | $1142;
     $1153 = $1152 | $1136;
     $1154 = ($1153|0)==(0);
     if ($1154) {
      $$23$lcssa = $1151;
      break;
     } else {
      $$23322 = $1151;$1130 = $1142;$1131 = $1139;$1132 = $1136;
     }
    }
   }
   $1083 = $1084 | $1085;
   $1086 = $1083 | $1087;
   $1088 = ($1086|0)==(0);
   if ($1088) {
    $$22$lcssa = $$23$lcssa;
    break;
   } else {
    $$22329 = $$23$lcssa;$bb_piece$sroa$0$3326 = $1085;$bb_piece$sroa$1$3327 = $1084;$bb_piece$sroa$2$3328 = $1087;
   }
  }
 }
 $1155 = (($__ptree__) + 212|0);
 $1156 = HEAP32[$1155>>2]|0;
 $1157 = (($__ptree__) + 216|0);
 $1158 = HEAP32[$1157>>2]|0;
 $1159 = $1158 & 134217216;
 $1160 = $1159 | $1156;
 $1161 = ($1160|0)==(0);
 if ($1161) {
  $$24$lcssa = $$22$lcssa;$1210 = $1158;
 } else {
  $1162 = (33577952 + (($2*12)|0)|0);
  $1163 = (33828736 + (($2*1536)|0)|0);
  $1164 = (33704320 + (($2*1536)|0)|0);
  $1165 = (33579904 + (($2*1536)|0)|0);
  $1166 = (33953152 + (($2*1536)|0)|0);
  $$24316 = $$22$lcssa;$u0$3314 = $1156;$u1$3315 = $1159;
  while(1) {
   $1171 = (_last_one01($u0$3314,$u1$3315)|0);
   $1172 = (34156304 + (($1171*12)|0)|0);
   $1173 = HEAP32[$1172>>2]|0;
   $1169 = $1173 ^ $u0$3314;
   $1174 = ((34156304 + (($1171*12)|0)|0) + 4|0);
   $1175 = HEAP32[$1174>>2]|0;
   $1168 = $1175 ^ $u1$3315;
   $1176 = HEAP32[$1162>>2]|0;
   $1177 = ((220518304 + (($2*81)|0)|0) + ($1171)|0);
   $1178 = HEAP8[$1177>>0]|0;
   $1179 = $1178&255;
   $1180 = ($1178<<24>>24)==(0);
   if ($1180) {
    $1188 = $1176;
   } else {
    $1181 = (_is_pinned_on_white_king($__ptree__,$1171,$1179)|0);
    $1182 = ($1181|0)==(0);
    if ($1182) {
     $1188 = $1176;
    } else {
     if ((($1179|0) == 5)) {
      $bb_tmp$sroa$0$0$in$i95 = $1165;
     } else if ((($1179|0) == 2)) {
      $bb_tmp$sroa$0$0$in$i95 = $1166;
     } else if ((($1179|0) == 4)) {
      $bb_tmp$sroa$0$0$in$i95 = $1164;
     } else {
      $bb_tmp$sroa$0$0$in$i95 = $1163;
     }
     $bb_tmp$sroa$0$0$i96 = HEAP32[$bb_tmp$sroa$0$0$in$i95>>2]|0;
     $1183 = $bb_tmp$sroa$0$0$i96 ^ -1;
     $1184 = $1176 | $1183;
     $1188 = $1184;
    }
   }
   $1185 = (33573072 + (($1171*12)|0)|0);
   $1186 = HEAP32[$1185>>2]|0;
   $1187 = $1188 & $78;
   $1189 = $1187 & $1186;
   $1190 = ($1189|0)==(0);
   if ($1190) {
    $$25$lcssa = $$24316;
   } else {
    $1191 = $1171 << 7;
    $$25310 = $$24316;$1192 = $1189;
    while(1) {
     $1193 = (_last_one0($1192)|0);
     $1194 = (34156304 + (($1193*12)|0)|0);
     $1195 = HEAP32[$1194>>2]|0;
     $1196 = $1195 ^ $1192;
     $1197 = ((($__ptree__) + ($1193)|0) + 512|0);
     $1198 = HEAP8[$1197>>0]|0;
     $1199 = $1198 << 24 >> 24;
     $1200 = (0 - ($1199))|0;
     $1201 = $1200 << 19;
     $1202 = $1191 | $1193;
     $1203 = $1202 | $1201;
     $1204 = $1203 | 114688;
     $1205 = (($$25310) + 4|0);
     HEAP32[$$25310>>2] = $1204;
     $1206 = ($1195|0)==($1192|0);
     if ($1206) {
      $$25$lcssa = $1205;
      break;
     } else {
      $$25310 = $1205;$1192 = $1196;
     }
    }
   }
   $1167 = $1168 | $1169;
   $1170 = ($1167|0)==(0);
   if ($1170) {
    break;
   } else {
    $$24316 = $$25$lcssa;$u0$3314 = $1169;$u1$3315 = $1168;
   }
  }
  $$pre621 = HEAP32[$1157>>2]|0;
  $$24$lcssa = $$25$lcssa;$1210 = $$pre621;
 }
 $1207 = (($__ptree__) + 220|0);
 $1208 = HEAP32[$1207>>2]|0;
 $1209 = $1210 & 262143;
 $1211 = $1208 | $1209;
 $1212 = ($1211|0)==(0);
 if ($1212) {
  $$26$lcssa = $$24$lcssa;
 } else {
  $1213 = (33576000 + (($2*12)|0)|0);
  $1214 = ((33576000 + (($2*12)|0)|0) + 4|0);
  $1215 = ((33576000 + (($2*12)|0)|0) + 8|0);
  $1216 = (33828736 + (($2*1536)|0)|0);
  $1217 = ((33828736 + (($2*1536)|0)|0) + 4|0);
  $1218 = ((33828736 + (($2*1536)|0)|0) + 8|0);
  $1219 = (33704320 + (($2*1536)|0)|0);
  $1220 = ((33704320 + (($2*1536)|0)|0) + 4|0);
  $1221 = ((33704320 + (($2*1536)|0)|0) + 8|0);
  $1222 = (33579904 + (($2*1536)|0)|0);
  $1223 = ((33579904 + (($2*1536)|0)|0) + 4|0);
  $1224 = ((33579904 + (($2*1536)|0)|0) + 8|0);
  $1225 = (33953152 + (($2*1536)|0)|0);
  $1226 = ((33953152 + (($2*1536)|0)|0) + 4|0);
  $1227 = ((33953152 + (($2*1536)|0)|0) + 8|0);
  $$26304 = $$24$lcssa;$u1$4302 = $1209;$u2$2303 = $1208;
  while(1) {
   $1232 = (_last_one12($u1$4302,$u2$2303)|0);
   $1233 = ((34156304 + (($1232*12)|0)|0) + 8|0);
   $1234 = HEAP32[$1233>>2]|0;
   $1229 = $1234 ^ $u2$2303;
   $1235 = ((34156304 + (($1232*12)|0)|0) + 4|0);
   $1236 = HEAP32[$1235>>2]|0;
   $1230 = $1236 ^ $u1$4302;
   $1237 = HEAP32[$1213>>2]|0;
   $1238 = HEAP32[$1214>>2]|0;
   $1239 = HEAP32[$1215>>2]|0;
   $1240 = ((220518304 + (($2*81)|0)|0) + ($1232)|0);
   $1241 = HEAP8[$1240>>0]|0;
   $1242 = $1241&255;
   $1243 = ($1241<<24>>24)==(0);
   if ($1243) {
    $1259 = $1237;$1262 = $1238;$1265 = $1239;
   } else {
    $1244 = (_is_pinned_on_white_king($__ptree__,$1232,$1242)|0);
    $1245 = ($1244|0)==(0);
    if ($1245) {
     $1259 = $1237;$1262 = $1238;$1265 = $1239;
    } else {
     if ((($1242|0) == 5)) {
      $bb_tmp$sroa$0$0$in$i88 = $1222;$bb_tmp$sroa$1$0$in$i87 = $1223;$bb_tmp$sroa$2$0$in$i86 = $1224;
     } else if ((($1242|0) == 2)) {
      $bb_tmp$sroa$0$0$in$i88 = $1225;$bb_tmp$sroa$1$0$in$i87 = $1226;$bb_tmp$sroa$2$0$in$i86 = $1227;
     } else if ((($1242|0) == 4)) {
      $bb_tmp$sroa$0$0$in$i88 = $1219;$bb_tmp$sroa$1$0$in$i87 = $1220;$bb_tmp$sroa$2$0$in$i86 = $1221;
     } else {
      $bb_tmp$sroa$0$0$in$i88 = $1216;$bb_tmp$sroa$1$0$in$i87 = $1217;$bb_tmp$sroa$2$0$in$i86 = $1218;
     }
     $bb_tmp$sroa$0$0$i89 = HEAP32[$bb_tmp$sroa$0$0$in$i88>>2]|0;
     $bb_tmp$sroa$1$0$i90 = HEAP32[$bb_tmp$sroa$1$0$in$i87>>2]|0;
     $bb_tmp$sroa$2$0$i91 = HEAP32[$bb_tmp$sroa$2$0$in$i86>>2]|0;
     $1246 = $bb_tmp$sroa$0$0$i89 ^ -1;
     $1247 = $bb_tmp$sroa$1$0$i90 ^ -1;
     $1248 = $bb_tmp$sroa$2$0$i91 ^ -1;
     $1249 = $1237 | $1246;
     $1250 = $1238 | $1247;
     $1251 = $1239 | $1248;
     $1259 = $1249;$1262 = $1250;$1265 = $1251;
    }
   }
   $1252 = (33573072 + (($1232*12)|0)|0);
   $1253 = HEAP32[$1252>>2]|0;
   $1254 = ((33573072 + (($1232*12)|0)|0) + 4|0);
   $1255 = HEAP32[$1254>>2]|0;
   $1256 = ((33573072 + (($1232*12)|0)|0) + 8|0);
   $1257 = HEAP32[$1256>>2]|0;
   $1258 = $1259 & $78;
   $1260 = $1258 & $1253;
   $1261 = $1262 & $81;
   $1263 = $1261 & $1255;
   $1264 = $1265 & $84;
   $1266 = $1264 & $1257;
   $1267 = $1263 | $1266;
   $1268 = $1267 | $1260;
   $1269 = ($1268|0)==(0);
   if ($1269) {
    $$27$lcssa = $$26304;
   } else {
    $1270 = $1232 << 7;
    $$27298 = $$26304;$1271 = $1266;$1272 = $1263;$1273 = $1260;
    while(1) {
     $1274 = (_last_one210($1271,$1272,$1273)|0);
     $1275 = (34156304 + (($1274*12)|0)|0);
     $1276 = HEAP32[$1275>>2]|0;
     $1277 = $1276 ^ $1273;
     $1278 = ((34156304 + (($1274*12)|0)|0) + 4|0);
     $1279 = HEAP32[$1278>>2]|0;
     $1280 = $1279 ^ $1272;
     $1281 = ((34156304 + (($1274*12)|0)|0) + 8|0);
     $1282 = HEAP32[$1281>>2]|0;
     $1283 = $1282 ^ $1271;
     $1284 = ((($__ptree__) + ($1274)|0) + 512|0);
     $1285 = HEAP8[$1284>>0]|0;
     $1286 = $1285 << 24 >> 24;
     $1287 = (0 - ($1286))|0;
     $1288 = $1287 << 19;
     $1289 = $1270 | $1274;
     $1290 = $1289 | $1288;
     $1291 = $1290 | 98304;
     $1292 = (($$27298) + 4|0);
     HEAP32[$$27298>>2] = $1291;
     $1293 = $1280 | $1283;
     $1294 = $1293 | $1277;
     $1295 = ($1294|0)==(0);
     if ($1295) {
      $$27$lcssa = $1292;
      break;
     } else {
      $$27298 = $1292;$1271 = $1283;$1272 = $1280;$1273 = $1277;
     }
    }
   }
   $1228 = $1229 | $1230;
   $1231 = ($1228|0)==(0);
   if ($1231) {
    $$26$lcssa = $$27$lcssa;
    break;
   } else {
    $$26304 = $$27$lcssa;$u1$4302 = $1230;$u2$2303 = $1229;
   }
  }
 }
 $1296 = (($__ptree__) + 188|0);
 $1297 = HEAP32[$1296>>2]|0;
 $1298 = (($__ptree__) + 192|0);
 $1299 = HEAP32[$1298>>2]|0;
 $1300 = (($__ptree__) + 196|0);
 $1301 = HEAP32[$1300>>2]|0;
 $1302 = $1299 | $1297;
 $1303 = $1302 | $1301;
 $1304 = ($1303|0)==(0);
 if ($1304) {
  $$28$lcssa = $$26$lcssa;$1406 = $1301;$1407 = $1299;
 } else {
  $1305 = (33577952 + (($2*12)|0)|0);
  $1306 = (33828736 + (($2*1536)|0)|0);
  $1307 = ((33828736 + (($2*1536)|0)|0) + 4|0);
  $1308 = ((33828736 + (($2*1536)|0)|0) + 8|0);
  $1309 = (33704320 + (($2*1536)|0)|0);
  $1310 = ((33704320 + (($2*1536)|0)|0) + 4|0);
  $1311 = ((33704320 + (($2*1536)|0)|0) + 8|0);
  $1312 = (33579904 + (($2*1536)|0)|0);
  $1313 = ((33579904 + (($2*1536)|0)|0) + 4|0);
  $1314 = ((33579904 + (($2*1536)|0)|0) + 8|0);
  $1315 = (33953152 + (($2*1536)|0)|0);
  $1316 = ((33953152 + (($2*1536)|0)|0) + 4|0);
  $1317 = ((33953152 + (($2*1536)|0)|0) + 8|0);
  $$28292 = $$26$lcssa;$bb_piece$sroa$0$4289 = $1297;$bb_piece$sroa$1$4290 = $1299;$bb_piece$sroa$2$4291 = $1301;
  while(1) {
   $1324 = (_last_one210($bb_piece$sroa$2$4291,$bb_piece$sroa$1$4290,$bb_piece$sroa$0$4289)|0);
   $1325 = (34156304 + (($1324*12)|0)|0);
   $1326 = HEAP32[$1325>>2]|0;
   $1320 = $1326 ^ $bb_piece$sroa$0$4289;
   $1327 = ((34156304 + (($1324*12)|0)|0) + 4|0);
   $1328 = HEAP32[$1327>>2]|0;
   $1319 = $1328 ^ $bb_piece$sroa$1$4290;
   $1329 = ((34156304 + (($1324*12)|0)|0) + 8|0);
   $1330 = HEAP32[$1329>>2]|0;
   $1322 = $1330 ^ $bb_piece$sroa$2$4291;
   $1331 = HEAP32[$1305>>2]|0;
   $1332 = ((220518304 + (($2*81)|0)|0) + ($1324)|0);
   $1333 = HEAP8[$1332>>0]|0;
   $1334 = $1333&255;
   $1335 = ($1333<<24>>24)==(0);
   if ($1335) {
    $1365 = $1331;$1369 = 0;$1373 = 0;
   } else {
    $1336 = (_is_pinned_on_white_king($__ptree__,$1324,$1334)|0);
    $1337 = ($1336|0)==(0);
    if ($1337) {
     $1365 = $1331;$1369 = 0;$1373 = 0;
    } else {
     if ((($1334|0) == 5)) {
      $bb_tmp$sroa$0$0$in$i81 = $1312;$bb_tmp$sroa$1$0$in$i80 = $1313;$bb_tmp$sroa$2$0$in$i79 = $1314;
     } else if ((($1334|0) == 2)) {
      $bb_tmp$sroa$0$0$in$i81 = $1315;$bb_tmp$sroa$1$0$in$i80 = $1316;$bb_tmp$sroa$2$0$in$i79 = $1317;
     } else if ((($1334|0) == 4)) {
      $bb_tmp$sroa$0$0$in$i81 = $1309;$bb_tmp$sroa$1$0$in$i80 = $1310;$bb_tmp$sroa$2$0$in$i79 = $1311;
     } else {
      $bb_tmp$sroa$0$0$in$i81 = $1306;$bb_tmp$sroa$1$0$in$i80 = $1307;$bb_tmp$sroa$2$0$in$i79 = $1308;
     }
     $bb_tmp$sroa$0$0$i82 = HEAP32[$bb_tmp$sroa$0$0$in$i81>>2]|0;
     $bb_tmp$sroa$1$0$i83 = HEAP32[$bb_tmp$sroa$1$0$in$i80>>2]|0;
     $bb_tmp$sroa$2$0$i84 = HEAP32[$bb_tmp$sroa$2$0$in$i79>>2]|0;
     $1338 = $bb_tmp$sroa$0$0$i82 ^ -1;
     $1339 = $bb_tmp$sroa$1$0$i83 ^ -1;
     $1340 = $bb_tmp$sroa$2$0$i84 ^ -1;
     $1341 = $1331 | $1338;
     $1365 = $1341;$1369 = $1339;$1373 = $1340;
    }
   }
   $1342 = ((33572424 + ($1324<<3)|0) + 2|0);
   $1343 = HEAP8[$1342>>0]|0;
   $1344 = $1343&255;
   $1345 = ((($__ptree__) + ($1344<<2)|0) + 32|0);
   $1346 = HEAP32[$1345>>2]|0;
   $1347 = ((33572424 + ($1324<<3)|0) + 3|0);
   $1348 = HEAP8[$1347>>0]|0;
   $1349 = $1348&255;
   $1350 = $1346 >>> $1349;
   $1351 = $1350 & 127;
   $1352 = ((33953152 + (($1324*1536)|0)|0) + (($1351*12)|0)|0);
   $1353 = HEAP32[$1352>>2]|0;
   $1354 = (((33953152 + (($1324*1536)|0)|0) + (($1351*12)|0)|0) + 4|0);
   $1355 = HEAP32[$1354>>2]|0;
   $1356 = (((33953152 + (($1324*1536)|0)|0) + (($1351*12)|0)|0) + 8|0);
   $1357 = HEAP32[$1356>>2]|0;
   $1358 = (34161184 + (($1324*12)|0)|0);
   $1359 = HEAP32[$1358>>2]|0;
   $1360 = ((34161184 + (($1324*12)|0)|0) + 4|0);
   $1361 = HEAP32[$1360>>2]|0;
   $1362 = ((34161184 + (($1324*12)|0)|0) + 8|0);
   $1363 = HEAP32[$1362>>2]|0;
   $1364 = $1365 & $78;
   $1366 = $1364 & $1353;
   $1367 = $1366 & $1359;
   $1368 = $1369 & $81;
   $1370 = $1368 & $1355;
   $1371 = $1370 & $1361;
   $1372 = $1373 & $84;
   $1374 = $1372 & $1357;
   $1375 = $1374 & $1363;
   $1376 = $1371 | $1375;
   $1377 = $1376 | $1367;
   $1378 = ($1377|0)==(0);
   if ($1378) {
    $$29$lcssa = $$28292;
   } else {
    $1379 = $1324 << 7;
    $$29285 = $$28292;$1380 = $1375;$1381 = $1371;$1382 = $1367;
    while(1) {
     $1383 = (_last_one210($1380,$1381,$1382)|0);
     $1384 = (34156304 + (($1383*12)|0)|0);
     $1385 = HEAP32[$1384>>2]|0;
     $1386 = $1385 ^ $1382;
     $1387 = ((34156304 + (($1383*12)|0)|0) + 4|0);
     $1388 = HEAP32[$1387>>2]|0;
     $1389 = $1388 ^ $1381;
     $1390 = ((34156304 + (($1383*12)|0)|0) + 8|0);
     $1391 = HEAP32[$1390>>2]|0;
     $1392 = $1391 ^ $1380;
     $1393 = ((($__ptree__) + ($1383)|0) + 512|0);
     $1394 = HEAP8[$1393>>0]|0;
     $1395 = $1394 << 24 >> 24;
     $1396 = (0 - ($1395))|0;
     $1397 = $1396 << 19;
     $1398 = $1379 | $1383;
     $1399 = $1398 | $1397;
     $1400 = $1399 | 81920;
     $1401 = (($$29285) + 4|0);
     HEAP32[$$29285>>2] = $1400;
     $1402 = $1389 | $1392;
     $1403 = $1402 | $1386;
     $1404 = ($1403|0)==(0);
     if ($1404) {
      $$29$lcssa = $1401;
      break;
     } else {
      $$29285 = $1401;$1380 = $1392;$1381 = $1389;$1382 = $1386;
     }
    }
   }
   $1318 = $1319 | $1320;
   $1321 = $1318 | $1322;
   $1323 = ($1321|0)==(0);
   if ($1323) {
    break;
   } else {
    $$28292 = $$29$lcssa;$bb_piece$sroa$0$4289 = $1320;$bb_piece$sroa$1$4290 = $1319;$bb_piece$sroa$2$4291 = $1322;
   }
  }
  $$pre622 = HEAP32[$1298>>2]|0;
  $$pre623 = HEAP32[$1300>>2]|0;
  $$28$lcssa = $$29$lcssa;$1406 = $$pre623;$1407 = $$pre622;
 }
 $1405 = $1406 | $1407;
 $1408 = ($1405|0)==(0);
 if ($1408) {
  $$30$lcssa = $$28$lcssa;
 } else {
  $1409 = (34160208 + (($2*12)|0)|0);
  $1410 = ((34160208 + (($2*12)|0)|0) + 4|0);
  $1411 = ((34160208 + (($2*12)|0)|0) + 8|0);
  $1412 = $78 & 511;
  $1413 = (33828736 + (($2*1536)|0)|0);
  $1414 = ((33828736 + (($2*1536)|0)|0) + 4|0);
  $1415 = ((33828736 + (($2*1536)|0)|0) + 8|0);
  $1416 = (33704320 + (($2*1536)|0)|0);
  $1417 = ((33704320 + (($2*1536)|0)|0) + 4|0);
  $1418 = ((33704320 + (($2*1536)|0)|0) + 8|0);
  $1419 = (33579904 + (($2*1536)|0)|0);
  $1420 = ((33579904 + (($2*1536)|0)|0) + 4|0);
  $1421 = ((33579904 + (($2*1536)|0)|0) + 8|0);
  $1422 = (33953152 + (($2*1536)|0)|0);
  $1423 = ((33953152 + (($2*1536)|0)|0) + 4|0);
  $1424 = ((33953152 + (($2*1536)|0)|0) + 8|0);
  $$30279 = $$28$lcssa;$u1$5277 = $1407;$u2$3278 = $1406;
  while(1) {
   $1429 = (_last_one12($u1$5277,$u2$3278)|0);
   $1430 = ((34156304 + (($1429*12)|0)|0) + 4|0);
   $1431 = HEAP32[$1430>>2]|0;
   $1427 = $1431 ^ $u1$5277;
   $1432 = ((34156304 + (($1429*12)|0)|0) + 8|0);
   $1433 = HEAP32[$1432>>2]|0;
   $1426 = $1433 ^ $u2$3278;
   $1434 = ((220518304 + (($2*81)|0)|0) + ($1429)|0);
   $1435 = HEAP8[$1434>>0]|0;
   $1436 = $1435&255;
   $1437 = ($1435<<24>>24)==(0);
   if ($1437) {
    label = 187;
   } else {
    $1438 = (_is_pinned_on_white_king($__ptree__,$1429,$1436)|0);
    $1439 = ($1438|0)==(0);
    if ($1439) {
     label = 187;
    } else {
     if ((($1436|0) == 5)) {
      $bb_tmp$sroa$0$0$in$i74 = $1419;$bb_tmp$sroa$1$0$in$i73 = $1420;$bb_tmp$sroa$2$0$in$i72 = $1421;
     } else if ((($1436|0) == 2)) {
      $bb_tmp$sroa$0$0$in$i74 = $1422;$bb_tmp$sroa$1$0$in$i73 = $1423;$bb_tmp$sroa$2$0$in$i72 = $1424;
     } else if ((($1436|0) == 4)) {
      $bb_tmp$sroa$0$0$in$i74 = $1416;$bb_tmp$sroa$1$0$in$i73 = $1417;$bb_tmp$sroa$2$0$in$i72 = $1418;
     } else {
      $bb_tmp$sroa$0$0$in$i74 = $1413;$bb_tmp$sroa$1$0$in$i73 = $1414;$bb_tmp$sroa$2$0$in$i72 = $1415;
     }
     $bb_tmp$sroa$0$0$i75 = HEAP32[$bb_tmp$sroa$0$0$in$i74>>2]|0;
     $bb_tmp$sroa$1$0$i76 = HEAP32[$bb_tmp$sroa$1$0$in$i73>>2]|0;
     $bb_tmp$sroa$2$0$i77 = HEAP32[$bb_tmp$sroa$2$0$in$i72>>2]|0;
     $1440 = $bb_tmp$sroa$0$0$i75 ^ -1;
     $1441 = $bb_tmp$sroa$1$0$i76 ^ -1;
     $1442 = $bb_tmp$sroa$2$0$i77 ^ -1;
     $1443 = $14 | $1440;
     $1444 = $16 | $1441;
     $1445 = $18 | $1442;
     $1446 = (34161184 + (($1429*12)|0)|0);
     $1447 = HEAP32[$1446>>2]|0;
     $1448 = $1447 & $1443;
     $1449 = ((34161184 + (($1429*12)|0)|0) + 4|0);
     $1450 = HEAP32[$1449>>2]|0;
     $1451 = $1450 & $1444;
     $1452 = ((34161184 + (($1429*12)|0)|0) + 8|0);
     $1453 = HEAP32[$1452>>2]|0;
     $1454 = $1453 & $1445;
     $1478 = $1451;$1481 = $1454;$1484 = $1448;
    }
   }
   if ((label|0) == 187) {
    label = 0;
    $1455 = HEAP32[$1409>>2]|0;
    $1456 = $1455 & $14;
    $1457 = HEAP32[$1410>>2]|0;
    $1458 = $1457 & $16;
    $1459 = HEAP32[$1411>>2]|0;
    $1460 = $1459 & $18;
    $1478 = $1458;$1481 = $1460;$1484 = $1456;
   }
   $1461 = ((33572424 + ($1429<<3)|0) + 2|0);
   $1462 = HEAP8[$1461>>0]|0;
   $1463 = $1462&255;
   $1464 = ((($__ptree__) + ($1463<<2)|0) + 32|0);
   $1465 = HEAP32[$1464>>2]|0;
   $1466 = ((33572424 + ($1429<<3)|0) + 3|0);
   $1467 = HEAP8[$1466>>0]|0;
   $1468 = $1467&255;
   $1469 = $1465 >>> $1468;
   $1470 = $1469 & 127;
   $1471 = ((33953152 + (($1429*1536)|0)|0) + (($1470*12)|0)|0);
   $1472 = HEAP32[$1471>>2]|0;
   $1473 = (((33953152 + (($1429*1536)|0)|0) + (($1470*12)|0)|0) + 4|0);
   $1474 = HEAP32[$1473>>2]|0;
   $1475 = (((33953152 + (($1429*1536)|0)|0) + (($1470*12)|0)|0) + 8|0);
   $1476 = HEAP32[$1475>>2]|0;
   $1477 = $1478 & $81;
   $1479 = $1477 & $1474;
   $1480 = $1481 & $84;
   $1482 = $1480 & $1476;
   $1483 = $1412 & $1484;
   $1485 = $1483 & $1472;
   $1486 = $1479 | $1482;
   $1487 = $1486 | $1485;
   $1488 = ($1487|0)==(0);
   if ($1488) {
    $$31$lcssa = $$30279;
   } else {
    $1489 = $1429 << 7;
    $$31273 = $$30279;$1490 = $1482;$1491 = $1479;$1492 = $1485;
    while(1) {
     $1493 = (_last_one210($1490,$1491,$1492)|0);
     $1494 = (34156304 + (($1493*12)|0)|0);
     $1495 = HEAP32[$1494>>2]|0;
     $1496 = $1495 ^ $1492;
     $1497 = ((34156304 + (($1493*12)|0)|0) + 4|0);
     $1498 = HEAP32[$1497>>2]|0;
     $1499 = $1498 ^ $1491;
     $1500 = ((34156304 + (($1493*12)|0)|0) + 8|0);
     $1501 = HEAP32[$1500>>2]|0;
     $1502 = $1501 ^ $1490;
     $1503 = ((($__ptree__) + ($1493)|0) + 512|0);
     $1504 = HEAP8[$1503>>0]|0;
     $1505 = $1504 << 24 >> 24;
     $1506 = (0 - ($1505))|0;
     $1507 = $1506 << 19;
     $1508 = $1489 | $1493;
     $1509 = $1508 | $1507;
     $1510 = $1509 | 65536;
     $1511 = (($$31273) + 4|0);
     HEAP32[$$31273>>2] = $1510;
     $1512 = $1499 | $1502;
     $1513 = $1512 | $1496;
     $1514 = ($1513|0)==(0);
     if ($1514) {
      $$31$lcssa = $1511;
      break;
     } else {
      $$31273 = $1511;$1490 = $1502;$1491 = $1499;$1492 = $1496;
     }
    }
   }
   $1425 = $1426 | $1427;
   $1428 = ($1425|0)==(0);
   if ($1428) {
    $$30$lcssa = $$31$lcssa;
    break;
   } else {
    $$30279 = $$31$lcssa;$u1$5277 = $1427;$u2$3278 = $1426;
   }
  }
 }
 $1515 = (33577952 + (($2*12)|0)|0);
 $1516 = HEAP32[$1515>>2]|0;
 $1517 = ($1&255)<(63);
 if ($1517) {
  $1518 = (($2) + 9)|0;
  $1519 = (34156304 + (($1518*12)|0)|0);
  $1520 = HEAP32[$1519>>2]|0;
  $1521 = $1520 | $1516;
  $1522 = ((34156304 + (($1518*12)|0)|0) + 4|0);
  $1523 = HEAP32[$1522>>2]|0;
  $1524 = ((34156304 + (($1518*12)|0)|0) + 8|0);
  $1525 = HEAP32[$1524>>2]|0;
  $1527 = $1521;$1529 = $1523;$1531 = $1525;
 } else {
  $1527 = $1516;$1529 = 0;$1531 = 0;
 }
 $1526 = $1527 & $78;
 $1528 = $1529 & $81;
 $1530 = $1531 & $84;
 $1532 = (($__ptree__) + 164|0);
 $1533 = HEAP32[$1532>>2]|0;
 $1534 = $1526 & $1533;
 $1535 = (($__ptree__) + 168|0);
 $1536 = HEAP32[$1535>>2]|0;
 $1537 = $1528 & $1536;
 $1538 = (($__ptree__) + 172|0);
 $1539 = HEAP32[$1538>>2]|0;
 $1540 = $1530 & $1539;
 $1541 = (($__ptree__) + 356|0);
 $1542 = HEAP32[$1541>>2]|0;
 $1543 = $1542 & $52;
 $1544 = (($__ptree__) + 360|0);
 $1545 = HEAP32[$1544>>2]|0;
 $1546 = $1545 & $54;
 $1547 = (($__ptree__) + 364|0);
 $1548 = HEAP32[$1547>>2]|0;
 $1549 = $1548 & $56;
 $1550 = $1546 | $1543;
 $1551 = $1550 | $1549;
 $1552 = ($1551|0)==(0);
 L286: do {
  if ($1552) {
   $$32$ph512 = $$30$lcssa;$$ph257506 = $1540;$$ph258508 = $1537;$$ph259510 = $1534;
  } else {
   $1553 = (($__ptree__) + 116|0);
   $1554 = (($__ptree__) + 120|0);
   $1555 = (($__ptree__) + 124|0);
   $$32$ph519 = $$30$lcssa;$$ph257513 = $1540;$$ph258514 = $1537;$$ph259515 = $1534;$bb_piece$sroa$0$5$ph516 = $1543;$bb_piece$sroa$1$5$ph517 = $1546;$bb_piece$sroa$2$5$ph518 = $1549;
   while(1) {
    $bb_piece$sroa$0$5267 = $bb_piece$sroa$0$5$ph516;$bb_piece$sroa$1$5268 = $bb_piece$sroa$1$5$ph517;$bb_piece$sroa$2$5269 = $bb_piece$sroa$2$5$ph518;
    while(1) {
     $1556 = (_last_one210($bb_piece$sroa$2$5269,$bb_piece$sroa$1$5268,$bb_piece$sroa$0$5267)|0);
     $1557 = (34156304 + (($1556*12)|0)|0);
     $1558 = HEAP32[$1557>>2]|0;
     $1559 = $1558 ^ $bb_piece$sroa$0$5267;
     $1560 = ((34156304 + (($1556*12)|0)|0) + 4|0);
     $1561 = HEAP32[$1560>>2]|0;
     $1562 = $1561 ^ $bb_piece$sroa$1$5268;
     $1563 = ((34156304 + (($1556*12)|0)|0) + 8|0);
     $1564 = HEAP32[$1563>>2]|0;
     $1565 = $1564 ^ $bb_piece$sroa$2$5269;
     $1566 = (($1556) + -9)|0;
     $1567 = ((($__ptree__) + ($1566)|0) + 512|0);
     $1568 = HEAP8[$1567>>0]|0;
     $1569 = ($1568<<24>>24)>(0);
     if (!($1569)) {
      $1573 = ((33572424 + ($1556<<3)|0) + 6|0);
      $1574 = HEAP8[$1573>>0]|0;
      $1575 = $1574&255;
      $1576 = ((($__ptree__) + ($1575<<2)|0) + 56|0);
      $1577 = HEAP32[$1576>>2]|0;
      $1578 = ((33572424 + ($1556<<3)|0) + 7|0);
      $1579 = HEAP8[$1578>>0]|0;
      $1580 = $1579&255;
      $1581 = $1577 >>> $1580;
      $1582 = $1581 & 127;
      $1583 = ((33704320 + (($1556*1536)|0)|0) + (($1582*12)|0)|0);
      $1584 = HEAP32[$1583>>2]|0;
      $1585 = (((33704320 + (($1556*1536)|0)|0) + (($1582*12)|0)|0) + 4|0);
      $1586 = HEAP32[$1585>>2]|0;
      $1587 = (((33704320 + (($1556*1536)|0)|0) + (($1582*12)|0)|0) + 8|0);
      $1588 = HEAP32[$1587>>2]|0;
      $1589 = HEAP32[$1553>>2]|0;
      $1590 = $1589 & $1584;
      $1591 = HEAP32[$1554>>2]|0;
      $1592 = $1591 & $1586;
      $1593 = $1592 | $1590;
      $1594 = HEAP32[$1555>>2]|0;
      $1595 = $1594 & $1588;
      $1596 = $1593 | $1595;
      $1597 = ($1596|0)==(0);
      if (!($1597)) {
       break;
      }
     }
     $1570 = $1562 | $1559;
     $1571 = $1570 | $1565;
     $1572 = ($1571|0)==(0);
     if ($1572) {
      $$32$ph512 = $$32$ph519;$$ph257506 = $$ph257513;$$ph258508 = $$ph258514;$$ph259510 = $$ph259515;
      break L286;
     } else {
      $bb_piece$sroa$0$5267 = $1559;$bb_piece$sroa$1$5268 = $1562;$bb_piece$sroa$2$5269 = $1565;
     }
    }
    $1598 = (34156304 + (($1566*12)|0)|0);
    $1599 = HEAP32[$1598>>2]|0;
    $1600 = $1599 ^ -1;
    $1601 = $$ph259515 & $1600;
    $1602 = ((34156304 + (($1566*12)|0)|0) + 4|0);
    $1603 = HEAP32[$1602>>2]|0;
    $1604 = $1603 ^ -1;
    $1605 = $$ph258514 & $1604;
    $1606 = ((34156304 + (($1566*12)|0)|0) + 8|0);
    $1607 = HEAP32[$1606>>2]|0;
    $1608 = $1607 ^ -1;
    $1609 = $$ph257513 & $1608;
    $1610 = $1556 << 7;
    $1611 = $1566 | $1610;
    $1612 = $1568 << 24 >> 24;
    $1613 = (0 - ($1612))|0;
    $1614 = $1613 << 19;
    $1615 = ($1556|0)<(36);
    $$$v = $1615 ? 49152 : 32768;
    $1616 = $1611 | $$$v;
    $$ = $1616 | $1614;
    HEAP32[$$32$ph519>>2] = $$;
    $1617 = (($$32$ph519) + 4|0);
    $1618 = $1562 | $1559;
    $1619 = $1618 | $1565;
    $1620 = ($1619|0)==(0);
    if ($1620) {
     $$32$ph512 = $1617;$$ph257506 = $1609;$$ph258508 = $1605;$$ph259510 = $1601;
     break;
    } else {
     $$32$ph519 = $1617;$$ph257513 = $1609;$$ph258514 = $1605;$$ph259515 = $1601;$bb_piece$sroa$0$5$ph516 = $1559;$bb_piece$sroa$1$5$ph517 = $1562;$bb_piece$sroa$2$5$ph518 = $1565;
    }
   }
  }
 } while(0);
 $1621 = HEAP32[$1541>>2]|0;
 $1622 = $1621 & $68;
 $1623 = HEAP32[$1544>>2]|0;
 $1624 = $1623 & $70;
 $1625 = HEAP32[$1547>>2]|0;
 $1626 = $1625 & $72;
 $1627 = $1624 | $1622;
 $1628 = $1627 | $1626;
 $1629 = ($1628|0)==(0);
 L297: do {
  if ($1629) {
   $$33$ph492 = $$32$ph512;$$ph241486 = $$ph257506;$$ph242488 = $$ph258508;$$ph243490 = $$ph259510;
  } else {
   $1630 = (($__ptree__) + 116|0);
   $1631 = (($__ptree__) + 120|0);
   $1632 = (($__ptree__) + 124|0);
   $$33$ph499 = $$32$ph512;$$ph241493 = $$ph257506;$$ph242494 = $$ph258508;$$ph243495 = $$ph259510;$bb_piece$sroa$0$6$ph496 = $1622;$bb_piece$sroa$1$6$ph497 = $1624;$bb_piece$sroa$2$6$ph498 = $1626;
   while(1) {
    $bb_piece$sroa$0$6251 = $bb_piece$sroa$0$6$ph496;$bb_piece$sroa$1$6252 = $bb_piece$sroa$1$6$ph497;$bb_piece$sroa$2$6253 = $bb_piece$sroa$2$6$ph498;
    while(1) {
     $1633 = (_last_one210($bb_piece$sroa$2$6253,$bb_piece$sroa$1$6252,$bb_piece$sroa$0$6251)|0);
     $1634 = (34156304 + (($1633*12)|0)|0);
     $1635 = HEAP32[$1634>>2]|0;
     $1636 = $1635 ^ $bb_piece$sroa$0$6251;
     $1637 = ((34156304 + (($1633*12)|0)|0) + 4|0);
     $1638 = HEAP32[$1637>>2]|0;
     $1639 = $1638 ^ $bb_piece$sroa$1$6252;
     $1640 = ((34156304 + (($1633*12)|0)|0) + 8|0);
     $1641 = HEAP32[$1640>>2]|0;
     $1642 = $1641 ^ $bb_piece$sroa$2$6253;
     $1643 = (($1633) + -9)|0;
     $1644 = ((($__ptree__) + ($1643)|0) + 512|0);
     $1645 = HEAP8[$1644>>0]|0;
     $1646 = ($1645<<24>>24)>(0);
     if (!($1646)) {
      $1650 = ((33572424 + ($1633<<3)|0) + 4|0);
      $1651 = HEAP8[$1650>>0]|0;
      $1652 = $1651&255;
      $1653 = ((($__ptree__) + ($1652<<2)|0) + 44|0);
      $1654 = HEAP32[$1653>>2]|0;
      $1655 = ((33572424 + ($1633<<3)|0) + 5|0);
      $1656 = HEAP8[$1655>>0]|0;
      $1657 = $1656&255;
      $1658 = $1654 >>> $1657;
      $1659 = $1658 & 127;
      $1660 = ((33579904 + (($1633*1536)|0)|0) + (($1659*12)|0)|0);
      $1661 = HEAP32[$1660>>2]|0;
      $1662 = (((33579904 + (($1633*1536)|0)|0) + (($1659*12)|0)|0) + 4|0);
      $1663 = HEAP32[$1662>>2]|0;
      $1664 = (((33579904 + (($1633*1536)|0)|0) + (($1659*12)|0)|0) + 8|0);
      $1665 = HEAP32[$1664>>2]|0;
      $1666 = HEAP32[$1630>>2]|0;
      $1667 = $1666 & $1661;
      $1668 = HEAP32[$1631>>2]|0;
      $1669 = $1668 & $1663;
      $1670 = $1669 | $1667;
      $1671 = HEAP32[$1632>>2]|0;
      $1672 = $1671 & $1665;
      $1673 = $1670 | $1672;
      $1674 = ($1673|0)==(0);
      if (!($1674)) {
       break;
      }
     }
     $1647 = $1639 | $1636;
     $1648 = $1647 | $1642;
     $1649 = ($1648|0)==(0);
     if ($1649) {
      $$33$ph492 = $$33$ph499;$$ph241486 = $$ph241493;$$ph242488 = $$ph242494;$$ph243490 = $$ph243495;
      break L297;
     } else {
      $bb_piece$sroa$0$6251 = $1636;$bb_piece$sroa$1$6252 = $1639;$bb_piece$sroa$2$6253 = $1642;
     }
    }
    $1675 = (34156304 + (($1643*12)|0)|0);
    $1676 = HEAP32[$1675>>2]|0;
    $1677 = $1676 ^ -1;
    $1678 = $$ph243495 & $1677;
    $1679 = ((34156304 + (($1643*12)|0)|0) + 4|0);
    $1680 = HEAP32[$1679>>2]|0;
    $1681 = $1680 ^ -1;
    $1682 = $$ph242494 & $1681;
    $1683 = ((34156304 + (($1643*12)|0)|0) + 8|0);
    $1684 = HEAP32[$1683>>2]|0;
    $1685 = $1684 ^ -1;
    $1686 = $$ph241493 & $1685;
    $1687 = $1633 << 7;
    $1688 = $1643 | $1687;
    $1689 = $1645 << 24 >> 24;
    $1690 = (0 - ($1689))|0;
    $1691 = $1690 << 19;
    $1692 = ($1633|0)<(36);
    $$55$v = $1692 ? 49152 : 32768;
    $1693 = $1688 | $$55$v;
    $$55 = $1693 | $1691;
    HEAP32[$$33$ph499>>2] = $$55;
    $1694 = (($$33$ph499) + 4|0);
    $1695 = $1639 | $1636;
    $1696 = $1695 | $1642;
    $1697 = ($1696|0)==(0);
    if ($1697) {
     $$33$ph492 = $1694;$$ph241486 = $1686;$$ph242488 = $1682;$$ph243490 = $1678;
     break;
    } else {
     $$33$ph499 = $1694;$$ph241493 = $1686;$$ph242494 = $1682;$$ph243495 = $1678;$bb_piece$sroa$0$6$ph496 = $1636;$bb_piece$sroa$1$6$ph497 = $1639;$bb_piece$sroa$2$6$ph498 = $1642;
    }
   }
  }
 } while(0);
 $1698 = HEAP32[$1541>>2]|0;
 $1699 = $1698 & $33;
 $1700 = HEAP32[$1544>>2]|0;
 $1701 = $1700 & $35;
 $1702 = HEAP32[$1547>>2]|0;
 $1703 = $1702 & $37;
 $1704 = $1701 | $1699;
 $1705 = $1704 | $1703;
 $1706 = ($1705|0)==(0);
 L308: do {
  if ($1706) {
   $$34$ph472 = $$33$ph492;$$ph229468 = $$ph242488;$$ph230470 = $$ph243490;$$ph466 = $$ph241486;
  } else {
   $1707 = (($__ptree__) + 140|0);
   $1708 = (($__ptree__) + 144|0);
   $1709 = (($__ptree__) + 148|0);
   $$34$ph479 = $$33$ph492;$$ph229474 = $$ph242488;$$ph230475 = $$ph243490;$$ph473 = $$ph241486;$bb_piece$sroa$0$7$ph476 = $1699;$bb_piece$sroa$1$7$ph477 = $1701;$bb_piece$sroa$2$7$ph478 = $1703;
   while(1) {
    $bb_piece$sroa$0$7236 = $bb_piece$sroa$0$7$ph476;$bb_piece$sroa$1$7237 = $bb_piece$sroa$1$7$ph477;$bb_piece$sroa$2$7238 = $bb_piece$sroa$2$7$ph478;
    while(1) {
     $1713 = (_last_one210($bb_piece$sroa$2$7238,$bb_piece$sroa$1$7237,$bb_piece$sroa$0$7236)|0);
     $1714 = (34156304 + (($1713*12)|0)|0);
     $1715 = HEAP32[$1714>>2]|0;
     $1716 = $1715 ^ $bb_piece$sroa$0$7236;
     $1717 = ((34156304 + (($1713*12)|0)|0) + 4|0);
     $1718 = HEAP32[$1717>>2]|0;
     $1719 = $1718 ^ $bb_piece$sroa$1$7237;
     $1720 = ((34156304 + (($1713*12)|0)|0) + 8|0);
     $1721 = HEAP32[$1720>>2]|0;
     $1722 = $1721 ^ $bb_piece$sroa$2$7238;
     $1723 = (($1713) + -9)|0;
     $1724 = ((($__ptree__) + ($1723)|0) + 512|0);
     $1725 = HEAP8[$1724>>0]|0;
     $1726 = ($1725<<24>>24)>(0);
     if (!($1726)) {
      $1730 = (33572424 + ($1713<<3)|0);
      $1731 = HEAP8[$1730>>0]|0;
      $1732 = $1731&255;
      $1733 = ((($__ptree__) + ($1732<<2)|0) + 8|0);
      $1734 = HEAP32[$1733>>2]|0;
      $1735 = ((($__ptree__) + ($1732<<2)|0) + 20|0);
      $1736 = HEAP32[$1735>>2]|0;
      $1737 = $1736 | $1734;
      $1738 = ((33572424 + ($1713<<3)|0) + 1|0);
      $1739 = HEAP8[$1738>>0]|0;
      $1740 = $1739&255;
      $1741 = $1737 >>> $1740;
      $1742 = $1741 & 127;
      $1743 = ((33828736 + (($1713*1536)|0)|0) + (($1742*12)|0)|0);
      $1744 = HEAP32[$1743>>2]|0;
      $1745 = (((33828736 + (($1713*1536)|0)|0) + (($1742*12)|0)|0) + 4|0);
      $1746 = HEAP32[$1745>>2]|0;
      $1747 = (((33828736 + (($1713*1536)|0)|0) + (($1742*12)|0)|0) + 8|0);
      $1748 = HEAP32[$1747>>2]|0;
      $1749 = HEAP32[$1707>>2]|0;
      $1750 = $1749 & $1744;
      $1751 = HEAP32[$1708>>2]|0;
      $1752 = $1751 & $1746;
      $1753 = $1752 | $1750;
      $1754 = HEAP32[$1709>>2]|0;
      $1755 = $1754 & $1748;
      $1756 = $1753 | $1755;
      $1757 = ($1756|0)==(0);
      if (!($1757)) {
       break;
      }
     }
     $1727 = $1719 | $1716;
     $1728 = $1727 | $1722;
     $1729 = ($1728|0)==(0);
     if ($1729) {
      $$34$ph472 = $$34$ph479;$$ph229468 = $$ph229474;$$ph230470 = $$ph230475;$$ph466 = $$ph473;
      break L308;
     } else {
      $bb_piece$sroa$0$7236 = $1716;$bb_piece$sroa$1$7237 = $1719;$bb_piece$sroa$2$7238 = $1722;
     }
    }
    $1758 = (34156304 + (($1723*12)|0)|0);
    $1759 = HEAP32[$1758>>2]|0;
    $1760 = $1759 ^ -1;
    $1761 = $$ph230475 & $1760;
    $1762 = ((34156304 + (($1723*12)|0)|0) + 4|0);
    $1763 = HEAP32[$1762>>2]|0;
    $1764 = $1763 ^ -1;
    $1765 = $$ph229474 & $1764;
    $1766 = ((34156304 + (($1723*12)|0)|0) + 8|0);
    $1767 = HEAP32[$1766>>2]|0;
    $1768 = $1767 ^ -1;
    $1769 = $$ph473 & $1768;
    $1770 = $1713 << 7;
    $1771 = $1723 | $1770;
    $1772 = $1725 << 24 >> 24;
    $1773 = (0 - ($1772))|0;
    $1774 = $1773 << 19;
    $1775 = ($1713|0)<(36);
    $$56$v = $1775 ? 49152 : 32768;
    $1776 = $1771 | $$56$v;
    $$56 = $1776 | $1774;
    HEAP32[$$34$ph479>>2] = $$56;
    $1777 = (($$34$ph479) + 4|0);
    $1778 = $1719 | $1716;
    $1779 = $1778 | $1722;
    $1780 = ($1779|0)==(0);
    if ($1780) {
     $$34$ph472 = $1777;$$ph229468 = $1765;$$ph230470 = $1761;$$ph466 = $1769;
     break;
    } else {
     $$34$ph479 = $1777;$$ph229474 = $1765;$$ph230475 = $1761;$$ph473 = $1769;$bb_piece$sroa$0$7$ph476 = $1716;$bb_piece$sroa$1$7$ph477 = $1719;$bb_piece$sroa$2$7$ph478 = $1722;
    }
   }
  }
 } while(0);
 $1710 = $$ph229468 | $$ph466;
 $1711 = $1710 | $$ph230470;
 $1712 = ($1711|0)==(0);
 if ($1712) {
  $$35$lcssa = $$34$ph472;
 } else {
  $$35226 = $$34$ph472;$1781 = $$ph466;$1782 = $$ph229468;$1783 = $$ph230470;
  while(1) {
   $1784 = (_last_one210($1781,$1782,$1783)|0);
   $1785 = (34156304 + (($1784*12)|0)|0);
   $1786 = HEAP32[$1785>>2]|0;
   $1787 = $1786 ^ $1783;
   $1788 = ((34156304 + (($1784*12)|0)|0) + 4|0);
   $1789 = HEAP32[$1788>>2]|0;
   $1790 = $1789 ^ $1782;
   $1791 = ((34156304 + (($1784*12)|0)|0) + 8|0);
   $1792 = HEAP32[$1791>>2]|0;
   $1793 = $1792 ^ $1781;
   $1794 = (($1784) + 9)|0;
   $1795 = $1794 << 7;
   $1796 = $1795 | $1784;
   $1797 = ((($__ptree__) + ($1784)|0) + 512|0);
   $1798 = HEAP8[$1797>>0]|0;
   $1799 = $1798 << 24 >> 24;
   $1800 = (0 - ($1799))|0;
   $1801 = $1800 << 19;
   $1802 = ($1794|0)<(36);
   $$57$v = $1802 ? 49152 : 32768;
   $1803 = $1796 | $$57$v;
   $$57 = $1803 | $1801;
   HEAP32[$$35226>>2] = $$57;
   $1804 = (($$35226) + 4|0);
   $1805 = $1790 | $1793;
   $1806 = $1805 | $1787;
   $1807 = ($1806|0)==(0);
   if ($1807) {
    $$35$lcssa = $1804;
    break;
   } else {
    $$35226 = $1804;$1781 = $1793;$1782 = $1790;$1783 = $1787;
   }
  }
 }
 $1808 = (($__ptree__) + 500|0);
 $1809 = HEAP32[$1808>>2]|0;
 $1810 = $1809 & 114688;
 $1811 = ($1810|0)==(0);
 do {
  if ($1811) {
   $$37 = $$35$lcssa;$1842 = $1809;
  } else {
   $1812 = HEAP32[$1515>>2]|0;
   $1813 = $1812 & $94;
   $1814 = ((33577952 + (($2*12)|0)|0) + 4|0);
   $1815 = HEAP32[$1814>>2]|0;
   $1816 = $1815 & $95;
   $1817 = ((33577952 + (($2*12)|0)|0) + 8|0);
   $1818 = HEAP32[$1817>>2]|0;
   $1819 = $1818 & $96;
   $1820 = $1816 | $1819;
   $1821 = $1820 | $1813;
   $1822 = ($1821|0)==(0);
   if ($1822) {
    $$37 = $$35$lcssa;$1842 = $1809;
    break;
   } else {
    $$36223 = $$35$lcssa;$1823 = $1819;$1824 = $1816;$1825 = $1813;
   }
   while(1) {
    $1826 = (_last_one210($1823,$1824,$1825)|0);
    $1827 = (34156304 + (($1826*12)|0)|0);
    $1828 = HEAP32[$1827>>2]|0;
    $1829 = $1828 ^ $1825;
    $1830 = ((34156304 + (($1826*12)|0)|0) + 4|0);
    $1831 = HEAP32[$1830>>2]|0;
    $1832 = $1831 ^ $1824;
    $1833 = ((34156304 + (($1826*12)|0)|0) + 8|0);
    $1834 = HEAP32[$1833>>2]|0;
    $1835 = $1834 ^ $1823;
    $1836 = $1826 | 10880;
    $1837 = (($$36223) + 4|0);
    HEAP32[$$36223>>2] = $1836;
    $1838 = $1832 | $1835;
    $1839 = $1838 | $1829;
    $1840 = ($1839|0)==(0);
    if ($1840) {
     break;
    } else {
     $$36223 = $1837;$1823 = $1835;$1824 = $1832;$1825 = $1829;
    }
   }
   $$pre624$pre = HEAP32[$1808>>2]|0;
   $$37 = $1837;$1842 = $$pre624$pre;
  }
 } while(0);
 $1841 = $1842 & 14336;
 $1843 = ($1841|0)==(0);
 do {
  if ($1843) {
   $$39 = $$37;$1875 = $1842;
  } else {
   $1844 = (33576976 + (($2*12)|0)|0);
   $1845 = HEAP32[$1844>>2]|0;
   $1846 = $1845 & $94;
   $1847 = ((33576976 + (($2*12)|0)|0) + 4|0);
   $1848 = HEAP32[$1847>>2]|0;
   $1849 = $1848 & $95;
   $1850 = ((33576976 + (($2*12)|0)|0) + 8|0);
   $1851 = HEAP32[$1850>>2]|0;
   $1852 = $1851 & $96;
   $1853 = $1849 | $1852;
   $1854 = $1853 | $1846;
   $1855 = ($1854|0)==(0);
   if ($1855) {
    $$39 = $$37;$1875 = $1842;
    break;
   } else {
    $$38219 = $$37;$1856 = $1852;$1857 = $1849;$1858 = $1846;
   }
   while(1) {
    $1859 = (_last_one210($1856,$1857,$1858)|0);
    $1860 = (34156304 + (($1859*12)|0)|0);
    $1861 = HEAP32[$1860>>2]|0;
    $1862 = $1861 ^ $1858;
    $1863 = ((34156304 + (($1859*12)|0)|0) + 4|0);
    $1864 = HEAP32[$1863>>2]|0;
    $1865 = $1864 ^ $1857;
    $1866 = ((34156304 + (($1859*12)|0)|0) + 8|0);
    $1867 = HEAP32[$1866>>2]|0;
    $1868 = $1867 ^ $1856;
    $1869 = $1859 | 10752;
    $1870 = (($$38219) + 4|0);
    HEAP32[$$38219>>2] = $1869;
    $1871 = $1865 | $1868;
    $1872 = $1871 | $1862;
    $1873 = ($1872|0)==(0);
    if ($1873) {
     break;
    } else {
     $$38219 = $1870;$1856 = $1868;$1857 = $1865;$1858 = $1862;
    }
   }
   $$pre625$pre = HEAP32[$1808>>2]|0;
   $$39 = $1870;$1875 = $$pre625$pre;
  }
 } while(0);
 $1874 = $1875 & 1792;
 $1876 = ($1874|0)==(0);
 $$not = $1517 ^ 1;
 $brmerge = $1876 | $$not;
 do {
  if ($brmerge) {
   $$41 = $$39;
  } else {
   $1877 = (($2) + 17)|0;
   $1878 = (1248 + ($2)|0);
   $1879 = HEAP8[$1878>>0]|0;
   $1880 = ($1879<<24>>24)==(0);
   if ($1880) {
    $$40142 = $$39;
   } else {
    $1881 = ((($__ptree__) + ($1877)|0) + 512|0);
    $1882 = HEAP8[$1881>>0]|0;
    $1883 = ($1882<<24>>24)==(0);
    if ($1883) {
     $1884 = $1877 | 10624;
     $1885 = (($$39) + 4|0);
     HEAP32[$$39>>2] = $1884;
     $$40$ph = $1885;
    } else {
     $$40$ph = $$39;
    }
    $1886 = ($1879<<24>>24)==(8);
    if ($1886) {
     $$41 = $$40$ph;
     break;
    } else {
     $$40142 = $$40$ph;
    }
   }
   $1887 = (($2) + 19)|0;
   $1888 = ((($__ptree__) + ($1887)|0) + 512|0);
   $1889 = HEAP8[$1888>>0]|0;
   $1890 = ($1889<<24>>24)==(0);
   if (!($1890)) {
    $$41 = $$40142;
    break;
   }
   $1891 = $1887 | 10624;
   $1892 = (($$40142) + 4|0);
   HEAP32[$$40142>>2] = $1891;
   $$41 = $1892;
  }
 } while(0);
 $1893 = HEAP32[$1808>>2]|0;
 $1894 = $1893 & 31;
 $1895 = ($1894|0)!=(0);
 $1896 = ($1&255)<(72);
 $or$cond = $1895 & $1896;
 do {
  if ($or$cond) {
   $1897 = HEAP32[$1541>>2]|0;
   $1898 = HEAP32[$1544>>2]|0;
   $1899 = $1898 | $1897;
   $1900 = HEAP32[$1547>>2]|0;
   $1901 = $1899 | $1900;
   $1902 = (1248 + ($2)|0);
   $1903 = HEAP8[$1902>>0]|0;
   $1904 = $1903&255;
   $1905 = 67240192 >>> $1904;
   $1906 = $1905 & $1901;
   $1907 = ($1906|0)==(0);
   if (!($1907)) {
    $$42 = $$41;
    break;
   }
   $1908 = (($2) + 9)|0;
   $1909 = ((($__ptree__) + ($1908)|0) + 512|0);
   $1910 = HEAP8[$1909>>0]|0;
   $1911 = ($1910<<24>>24)==(0);
   if (!($1911)) {
    $$42 = $$41;
    break;
   }
   $1912 = (_is_mate_b_pawn_drop($__ptree__,$1908)|0);
   $1913 = ($1912|0)==(0);
   if (!($1913)) {
    $$42 = $$41;
    break;
   }
   $1914 = $1908 | 10368;
   $1915 = (($$41) + 4|0);
   HEAP32[$$41>>2] = $1914;
   $$42 = $1915;
  } else {
   $$42 = $$41;
  }
 } while(0);
 $1916 = HEAP32[$1808>>2]|0;
 $1917 = $1916 & 224;
 $1918 = ($1917|0)==(0);
 if ($1918) {
  $$44 = $$42;$1932 = $1916;
 } else {
  $1919 = (1248 + ($2)|0);
  $1920 = HEAP8[$1919>>0]|0;
  if ((($1920<<24>>24) == 8) | (($1920<<24>>24) == 0)) {
   $min_dist$0 = 2;
  } else {
   $min_dist$0 = 3;
  }
  $to$0213 = (($2) + 9)|0;
  $1921 = ($to$0213>>>0)<(81);
  L356: do {
   if ($1921) {
    $$43214 = $$42;$dist$0215 = 1;$to$0216 = $to$0213;
    while(1) {
     $1922 = ((($__ptree__) + ($to$0216)|0) + 512|0);
     $1923 = HEAP8[$1922>>0]|0;
     $1924 = ($1923<<24>>24)==(0);
     if (!($1924)) {
      $$43$lcssa = $$43214;
      break L356;
     }
     $1925 = ($dist$0215|0)==(1);
     if ($1925) {
      $1926 = $to$0216 | 1073752320;
      $move$0 = $1926;
     } else {
      $1927 = ($dist$0215|0)>($min_dist$0|0);
      $$58$v = $1927 ? -2147473152 : 10496;
      $$58 = $$58$v | $to$0216;
      $move$0 = $$58;
     }
     $1928 = (($$43214) + 4|0);
     HEAP32[$$43214>>2] = $move$0;
     $1929 = (($dist$0215) + 1)|0;
     $to$0 = (($to$0216) + 9)|0;
     $1930 = ($to$0|0)<(81);
     if ($1930) {
      $$43214 = $1928;$dist$0215 = $1929;$to$0216 = $to$0;
     } else {
      $$43$lcssa = $1928;
      break;
     }
    }
   } else {
    $$43$lcssa = $$42;
   }
  } while(0);
  $$pre626 = HEAP32[$1808>>2]|0;
  $$44 = $$43$lcssa;$1932 = $$pre626;
 }
 $1931 = $1932 & 1572864;
 $1933 = ($1931|0)==(0);
 if ($1933) {
  $$49 = $$44;$1982 = $1932;
 } else {
  $1934 = (1248 + ($2)|0);
  $1935 = HEAP8[$1934>>0]|0;
  if ((($1935<<24>>24) == 8) | (($1935<<24>>24) == 0)) {
   $min_dist3$0 = 2;
  } else {
   $min_dist3$0 = 3;
  }
  $to$1207 = (($2) + 9)|0;
  $1936 = ($to$1207>>>0)<(81);
  L371: do {
   if ($1936) {
    $$45208 = $$44;$dist2$0209 = 1;$to$1210 = $to$1207;
    while(1) {
     $1937 = ((($__ptree__) + ($to$1210)|0) + 512|0);
     $1938 = HEAP8[$1937>>0]|0;
     $1939 = ($1938<<24>>24)==(0);
     if (!($1939)) {
      $$45$lcssa = $$45208;
      break L371;
     }
     $1940 = ($dist2$0209|0)==(1);
     if ($1940) {
      $1941 = $to$1210 | 1073752960;
      $move1$0 = $1941;
     } else {
      $1942 = ($dist2$0209|0)>($min_dist3$0|0);
      $$59$v = $1942 ? -2147472512 : 11136;
      $$59 = $$59$v | $to$1210;
      $move1$0 = $$59;
     }
     $1943 = (($$45208) + 4|0);
     HEAP32[$$45208>>2] = $move1$0;
     $1944 = (($dist2$0209) + 1)|0;
     $to$1 = (($to$1210) + 9)|0;
     $1945 = ($to$1|0)<(81);
     if ($1945) {
      $$45208 = $1943;$dist2$0209 = $1944;$to$1210 = $to$1;
     } else {
      $$45$lcssa = $1943;
      break;
     }
    }
   } else {
    $$45$lcssa = $$44;
   }
  } while(0);
  $1946 = ($1935<<24>>24)==(0);
  $$pre638 = $1935&255;
  L380: do {
   if ($1946) {
    $$46$lcssa = $$45$lcssa;
   } else {
    $$46201 = $$45$lcssa;$dist2$1202 = 1;$file$0204$in = $$pre638;$to$2203$in = $2;
    while(1) {
     $to$2203 = (($to$2203$in) + -1)|0;
     $file$0204 = (($file$0204$in) + -1)|0;
     $1947 = ((($__ptree__) + ($to$2203)|0) + 512|0);
     $1948 = HEAP8[$1947>>0]|0;
     $1949 = ($1948<<24>>24)==(0);
     if (!($1949)) {
      $$46$lcssa = $$46201;
      break L380;
     }
     $1950 = ($dist2$1202|0)==(1);
     if ($1950) {
      $1951 = $to$2203 | 1073752960;
      $move1$1 = $1951;
     } else {
      $1952 = ($dist2$1202|0)>($min_dist3$0|0);
      $$60$v = $1952 ? -2147472512 : 11136;
      $$60 = $$60$v | $to$2203;
      $move1$1 = $$60;
     }
     $1953 = (($$46201) + 4|0);
     HEAP32[$$46201>>2] = $move1$1;
     $1954 = (($dist2$1202) + 1)|0;
     $1955 = ($file$0204|0)>(0);
     if ($1955) {
      $$46201 = $1953;$dist2$1202 = $1954;$file$0204$in = $file$0204;$to$2203$in = $to$2203;
     } else {
      $$46$lcssa = $1953;
      break;
     }
    }
   }
  } while(0);
  $$off = (($1) + -9)<<24>>24;
  $1956 = ($$off&255)>(62);
  $$61 = $1956 ? 2 : 3;
  $file$1191 = (($$pre638) + 1)|0;
  $1957 = ($file$1191>>>0)<(9);
  L389: do {
   if ($1957) {
    $$47193 = $$46$lcssa;$dist2$2194 = 1;$file$1195 = $file$1191;$to$3196$in = $2;
    while(1) {
     $to$3196 = (($to$3196$in) + 1)|0;
     $1958 = ((($__ptree__) + ($to$3196)|0) + 512|0);
     $1959 = HEAP8[$1958>>0]|0;
     $1960 = ($1959<<24>>24)==(0);
     if (!($1960)) {
      $$47$lcssa = $$47193;
      break L389;
     }
     $1962 = ($dist2$2194|0)==(1);
     if ($1962) {
      $1963 = $to$3196 | 1073752960;
      $move1$2 = $1963;
     } else {
      $1964 = ($dist2$2194|0)>($$61|0);
      $$62$v = $1964 ? -2147472512 : 11136;
      $$62 = $$62$v | $to$3196;
      $move1$2 = $$62;
     }
     $1965 = (($$47193) + 4|0);
     HEAP32[$$47193>>2] = $move1$2;
     $1966 = (($dist2$2194) + 1)|0;
     $file$1 = (($file$1195) + 1)|0;
     $1967 = ($file$1|0)<(9);
     if ($1967) {
      $$47193 = $1965;$dist2$2194 = $1966;$file$1195 = $file$1;$to$3196$in = $to$3196;
     } else {
      $$47$lcssa = $1965;
      break;
     }
    }
   } else {
    $$47$lcssa = $$46$lcssa;
   }
  } while(0);
  $to$4185 = (($2) + -9)|0;
  $1961 = ($to$4185|0)>(-1);
  L398: do {
   if ($1961) {
    $$48186 = $$47$lcssa;$dist2$3187 = 1;$to$4188 = $to$4185;
    while(1) {
     $1968 = ((($__ptree__) + ($to$4188)|0) + 512|0);
     $1969 = HEAP8[$1968>>0]|0;
     $1970 = ($1969<<24>>24)==(0);
     if (!($1970)) {
      $$48$lcssa = $$48186;
      break L398;
     }
     $1971 = (1336 + ($to$4188)|0);
     $1972 = HEAP8[$1971>>0]|0;
     $1973 = ($1972<<24>>24)==(2);
     $$63$v = $1973 ? 1073752960 : 11136;
     $$63 = $$63$v | $to$4188;
     $1974 = ($dist2$3187|0)==(1);
     if ($1974) {
      $1975 = $to$4188 | 1073752960;
      $move1$4 = $1975;
     } else {
      $1976 = ($dist2$3187|0)>($$61|0);
      $1977 = $$63 | -2147483648;
      $$$63 = $1976 ? $1977 : $$63;
      $move1$4 = $$$63;
     }
     $1978 = (($$48186) + 4|0);
     HEAP32[$$48186>>2] = $move1$4;
     $1979 = (($dist2$3187) + 1)|0;
     $to$4 = (($to$4188) + -9)|0;
     $1980 = ($to$4|0)>(-1);
     if ($1980) {
      $$48186 = $1978;$dist2$3187 = $1979;$to$4188 = $to$4;
     } else {
      $$48$lcssa = $1978;
      break;
     }
    }
   } else {
    $$48$lcssa = $$47$lcssa;
   }
  } while(0);
  $$pre627 = HEAP32[$1808>>2]|0;
  $$49 = $$48$lcssa;$1982 = $$pre627;
 }
 $1981 = $1982 & 393216;
 $1983 = ($1981|0)==(0);
 if ($1983) {
  $$54 = $$49;
  STACKTOP = sp;return ($$54|0);
 }
 $1984 = (1248 + ($2)|0);
 $1985 = HEAP8[$1984>>0]|0;
 $1986 = (1336 + ($2)|0);
 $1987 = HEAP8[$1986>>0]|0;
 $1988 = ($1985<<24>>24)!=(0);
 $1989 = ($1987<<24>>24)!=(0);
 $or$cond64177 = $1988 & $1989;
 L411: do {
  if ($or$cond64177) {
   $1990 = $1987&255;
   $1991 = $1985&255;
   $$50178 = $$49;$dist6$0179 = 1;$file5$0181$in = $1991;$rank$0180$in = $1990;$to$5182$in = $2;
   while(1) {
    $rank$0180 = (($rank$0180$in) + -1)|0;
    $file5$0181 = (($file5$0181$in) + -1)|0;
    $to$5182 = (($to$5182$in) + -10)|0;
    $1992 = ((($__ptree__) + ($to$5182)|0) + 512|0);
    $1993 = HEAP8[$1992>>0]|0;
    $1994 = ($1993<<24>>24)==(0);
    if (!($1994)) {
     $$50$lcssa = $$50178;$$pre$phiZ2D = $1991;
     break L411;
    }
    $1995 = ($rank$0180|0)==(2);
    $$65$v = $1995 ? 1073752832 : 11008;
    $$65 = $$65$v | $to$5182;
    $1996 = ($dist6$0179|0)==(1);
    if ($1996) {
     $1997 = $to$5182 | 1073752832;
     $move4$1 = $1997;
    } else {
     $1998 = ($dist6$0179|0)>(2);
     $1999 = $$65 | -2147483648;
     $$$65 = $1998 ? $1999 : $$65;
     $move4$1 = $$$65;
    }
    $2000 = (($$50178) + 4|0);
    HEAP32[$$50178>>2] = $move4$1;
    $2001 = (($dist6$0179) + 1)|0;
    $2002 = ($file5$0181|0)>(0);
    $2003 = ($rank$0180|0)>(0);
    $or$cond64 = $2002 & $2003;
    if ($or$cond64) {
     $$50178 = $2000;$dist6$0179 = $2001;$file5$0181$in = $file5$0181;$rank$0180$in = $rank$0180;$to$5182$in = $to$5182;
    } else {
     $$50$lcssa = $2000;$$pre$phiZ2D = $1991;
     break;
    }
   }
  } else {
   $$pre635 = $1985&255;
   $$50$lcssa = $$49;$$pre$phiZ2D = $$pre635;
  }
 } while(0);
 $file5$1165 = (($$pre$phiZ2D) + 1)|0;
 $2004 = ($file5$1165>>>0)<(9);
 $or$cond66166 = $2004 & $1989;
 $2005 = $1987&255;
 L422: do {
  if ($or$cond66166) {
   $$51167 = $$50$lcssa;$dist6$1168 = 1;$file5$1171 = $file5$1165;$rank$1169$in = $2005;$to$6170$in = $2;
   while(1) {
    $rank$1169 = (($rank$1169$in) + -1)|0;
    $to$6170 = (($to$6170$in) + -8)|0;
    $2006 = ((($__ptree__) + ($to$6170)|0) + 512|0);
    $2007 = HEAP8[$2006>>0]|0;
    $2008 = ($2007<<24>>24)==(0);
    if (!($2008)) {
     $$51$lcssa = $$51167;
     break L422;
    }
    $2009 = ($rank$1169|0)==(2);
    $$67$v = $2009 ? 1073752832 : 11008;
    $$67 = $$67$v | $to$6170;
    $2010 = ($dist6$1168|0)==(1);
    if ($2010) {
     $2011 = $to$6170 | 1073752832;
     $move4$3 = $2011;
    } else {
     $2012 = ($dist6$1168|0)>(2);
     $2013 = $$67 | -2147483648;
     $$$67 = $2012 ? $2013 : $$67;
     $move4$3 = $$$67;
    }
    $2014 = (($$51167) + 4|0);
    HEAP32[$$51167>>2] = $move4$3;
    $2015 = (($dist6$1168) + 1)|0;
    $file5$1 = (($file5$1171) + 1)|0;
    $2016 = ($file5$1|0)<(9);
    $2017 = ($rank$1169|0)>(0);
    $or$cond66 = $2016 & $2017;
    if ($or$cond66) {
     $$51167 = $2014;$dist6$1168 = $2015;$file5$1171 = $file5$1;$rank$1169$in = $rank$1169;$to$6170$in = $to$6170;
    } else {
     $$51$lcssa = $2014;
     break;
    }
   }
  } else {
   $$51$lcssa = $$50$lcssa;
  }
 } while(0);
 $rank$2153 = (($2005) + 1)|0;
 $2018 = ($rank$2153>>>0)<(9);
 $or$cond68155 = $1988 & $2018;
 L431: do {
  if ($or$cond68155) {
   $$52156 = $$51$lcssa;$dist6$2157 = 1;$file5$2158$in = $$pre$phiZ2D;$rank$2159 = $rank$2153;$to$7160$in = $2;
   while(1) {
    $file5$2158 = (($file5$2158$in) + -1)|0;
    $to$7160 = (($to$7160$in) + 8)|0;
    $2019 = ((($__ptree__) + ($to$7160)|0) + 512|0);
    $2020 = HEAP8[$2019>>0]|0;
    $2021 = ($2020<<24>>24)==(0);
    if (!($2021)) {
     $$52$lcssa = $$52156;
     break L431;
    }
    $2022 = ($dist6$2157|0)==(1);
    if ($2022) {
     $2023 = $to$7160 | 1073752832;
     $move4$4 = $2023;
    } else {
     $2024 = ($dist6$2157|0)>(2);
     $$69$v = $2024 ? -2147472640 : 11008;
     $$69 = $$69$v | $to$7160;
     $move4$4 = $$69;
    }
    $2025 = (($$52156) + 4|0);
    HEAP32[$$52156>>2] = $move4$4;
    $2026 = (($dist6$2157) + 1)|0;
    $rank$2 = (($rank$2159) + 1)|0;
    $2027 = ($file5$2158|0)>(0);
    $2028 = ($rank$2|0)<(9);
    $or$cond68 = $2027 & $2028;
    if ($or$cond68) {
     $$52156 = $2025;$dist6$2157 = $2026;$file5$2158$in = $file5$2158;$rank$2159 = $rank$2;$to$7160$in = $to$7160;
    } else {
     $$52$lcssa = $2025;
     break;
    }
   }
  } else {
   $$52$lcssa = $$51$lcssa;
  }
 } while(0);
 $or$cond70146 = $2004 & $2018;
 if ($or$cond70146) {
  $$53147 = $$52$lcssa;$dist6$3148 = 1;$file5$3150 = $file5$1165;$rank$3149 = $rank$2153;$to$8151$in = $2;
 } else {
  $$54 = $$52$lcssa;
  STACKTOP = sp;return ($$54|0);
 }
 while(1) {
  $to$8151 = (($to$8151$in) + 10)|0;
  $2029 = ((($__ptree__) + ($to$8151)|0) + 512|0);
  $2030 = HEAP8[$2029>>0]|0;
  $2031 = ($2030<<24>>24)==(0);
  if (!($2031)) {
   $$54 = $$53147;
   label = 301;
   break;
  }
  $2032 = ($dist6$3148|0)==(1);
  if ($2032) {
   $2033 = $to$8151 | 1073752832;
   $move4$5 = $2033;
  } else {
   $2034 = ($dist6$3148|0)>(2);
   $$71$v = $2034 ? -2147472640 : 11008;
   $$71 = $$71$v | $to$8151;
   $move4$5 = $$71;
  }
  $2035 = (($$53147) + 4|0);
  HEAP32[$$53147>>2] = $move4$5;
  $2036 = (($dist6$3148) + 1)|0;
  $rank$3 = (($rank$3149) + 1)|0;
  $file5$3 = (($file5$3150) + 1)|0;
  $2037 = ($file5$3|0)<(9);
  $2038 = ($rank$3|0)<(9);
  $or$cond70 = $2037 & $2038;
  if ($or$cond70) {
   $$53147 = $2035;$dist6$3148 = $2036;$file5$3150 = $file5$3;$rank$3149 = $rank$3;$to$8151$in = $to$8151;
  } else {
   $$54 = $2035;
   label = 301;
   break;
  }
 }
 if ((label|0) == 301) {
  STACKTOP = sp;return ($$54|0);
 }
 return 0|0;
}
function _w_gen_checks($__ptree__,$pmove) {
 $__ptree__ = $__ptree__|0;
 $pmove = $pmove|0;
 var $$ = 0, $$$60 = 0, $$$65 = 0, $$$67 = 0, $$$v = 0, $$0462 = 0, $$1 = 0, $$10$lcssa = 0, $$10407 = 0, $$11$lcssa = 0, $$11397 = 0, $$12$lcssa = 0, $$12388 = 0, $$13$lcssa = 0, $$13392 = 0, $$14$lcssa = 0, $$14378 = 0, $$15$lcssa = 0, $$15374 = 0, $$16$lcssa = 0;
 var $$16364 = 0, $$17$lcssa = 0, $$17357 = 0, $$18$lcssa = 0, $$18351 = 0, $$19$lcssa = 0, $$19346 = 0, $$2$lcssa = 0, $$20$lcssa = 0, $$20340 = 0, $$21$lcssa = 0, $$21335 = 0, $$22$lcssa = 0, $$22329 = 0, $$23$lcssa = 0, $$23322 = 0, $$24$lcssa = 0, $$24316 = 0, $$2456 = 0, $$25$lcssa = 0;
 var $$25310 = 0, $$26$lcssa = 0, $$26304 = 0, $$27$lcssa = 0, $$27298 = 0, $$28$lcssa = 0, $$28292 = 0, $$29$lcssa = 0, $$29285 = 0, $$3$lcssa = 0, $$30$lcssa = 0, $$30279 = 0, $$31$lcssa = 0, $$31273 = 0, $$32$ph512 = 0, $$32$ph519 = 0, $$33$ph492 = 0, $$33$ph499 = 0, $$34$ph472 = 0, $$34$ph479 = 0;
 var $$3449 = 0, $$35$lcssa = 0, $$35226 = 0, $$36223 = 0, $$37 = 0, $$38219 = 0, $$39 = 0, $$4$lcssa = 0, $$40$ph = 0, $$40142 = 0, $$41 = 0, $$42 = 0, $$43$lcssa = 0, $$43214 = 0, $$44 = 0, $$4443 = 0, $$45$lcssa = 0, $$45208 = 0, $$46$lcssa = 0, $$46202 = 0;
 var $$47$lcssa = 0, $$47195 = 0, $$48$lcssa = 0, $$48187 = 0, $$49 = 0, $$5$lcssa = 0, $$50$lcssa = 0, $$50178 = 0, $$51$lcssa = 0, $$51167 = 0, $$52$lcssa = 0, $$52156 = 0, $$53147 = 0, $$54 = 0, $$5436 = 0, $$55 = 0, $$55$v = 0, $$56 = 0, $$56$v = 0, $$57 = 0;
 var $$57$v = 0, $$58 = 0, $$58$v = 0, $$59 = 0, $$59$v = 0, $$6$lcssa = 0, $$60 = 0, $$60$v = 0, $$61 = 0, $$62 = 0, $$62$v = 0, $$63 = 0, $$63$v = 0, $$6430 = 0, $$65 = 0, $$65$v = 0, $$67 = 0, $$67$v = 0, $$69 = 0, $$69$v = 0;
 var $$7$lcssa = 0, $$71 = 0, $$71$v = 0, $$7421 = 0, $$8$lcssa = 0, $$8425 = 0, $$9$lcssa = 0, $$9411 = 0, $$not = 0, $$off = 0, $$ph229468 = 0, $$ph229474 = 0, $$ph230470 = 0, $$ph230475 = 0, $$ph241486 = 0, $$ph241493 = 0, $$ph242488 = 0, $$ph242494 = 0, $$ph243490 = 0, $$ph243495 = 0;
 var $$ph257506 = 0, $$ph257513 = 0, $$ph258508 = 0, $$ph258514 = 0, $$ph259510 = 0, $$ph259515 = 0, $$ph370 = 0, $$ph371 = 0, $$ph372 = 0, $$ph384 = 0, $$ph385 = 0, $$ph386 = 0, $$ph403 = 0, $$ph404 = 0, $$ph405 = 0, $$ph417 = 0, $$ph418 = 0, $$ph419 = 0, $$ph466 = 0, $$ph473 = 0;
 var $$pre = 0, $$pre621 = 0, $$pre622 = 0, $$pre623 = 0, $$pre624$pre = 0, $$pre625$pre = 0, $$pre626 = 0, $$pre627 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0;
 var $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0;
 var $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0;
 var $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0;
 var $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0;
 var $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0;
 var $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0;
 var $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0;
 var $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0;
 var $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0;
 var $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0;
 var $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0;
 var $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0;
 var $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0;
 var $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0;
 var $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0;
 var $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0;
 var $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0;
 var $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0;
 var $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0;
 var $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0;
 var $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0;
 var $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0;
 var $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0;
 var $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0;
 var $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0;
 var $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0;
 var $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0;
 var $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0;
 var $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0;
 var $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0;
 var $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0;
 var $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0;
 var $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0;
 var $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0;
 var $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0;
 var $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0;
 var $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0;
 var $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0;
 var $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0;
 var $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0;
 var $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0;
 var $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0;
 var $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0;
 var $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0;
 var $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0;
 var $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0;
 var $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0;
 var $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0;
 var $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0;
 var $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0;
 var $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0;
 var $2016 = 0, $2017 = 0, $2018 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bb_piece$sroa$0$0453 = 0, $bb_piece$sroa$0$1440 = 0, $bb_piece$sroa$0$2361 = 0, $bb_piece$sroa$0$3326 = 0, $bb_piece$sroa$0$4289 = 0, $bb_piece$sroa$0$5$ph516 = 0, $bb_piece$sroa$0$5267 = 0, $bb_piece$sroa$0$6$ph496 = 0, $bb_piece$sroa$0$6251 = 0, $bb_piece$sroa$0$7$ph476 = 0, $bb_piece$sroa$0$7236 = 0, $bb_piece$sroa$1$0454 = 0, $bb_piece$sroa$1$1441 = 0;
 var $bb_piece$sroa$1$2362 = 0, $bb_piece$sroa$1$3327 = 0, $bb_piece$sroa$1$4290 = 0, $bb_piece$sroa$1$5$ph517 = 0, $bb_piece$sroa$1$5268 = 0, $bb_piece$sroa$1$6$ph497 = 0, $bb_piece$sroa$1$6252 = 0, $bb_piece$sroa$1$7$ph477 = 0, $bb_piece$sroa$1$7237 = 0, $bb_piece$sroa$2$0455 = 0, $bb_piece$sroa$2$1442 = 0, $bb_piece$sroa$2$2363 = 0, $bb_piece$sroa$2$3328 = 0, $bb_piece$sroa$2$4291 = 0, $bb_piece$sroa$2$5$ph518 = 0, $bb_piece$sroa$2$5269 = 0, $bb_piece$sroa$2$6$ph498 = 0, $bb_piece$sroa$2$6253 = 0, $bb_piece$sroa$2$7$ph478 = 0, $bb_piece$sroa$2$7238 = 0;
 var $bb_tmp$sroa$0$0$i = 0, $bb_tmp$sroa$0$0$i103 = 0, $bb_tmp$sroa$0$0$i124 = 0, $bb_tmp$sroa$0$0$i131 = 0, $bb_tmp$sroa$0$0$i138 = 0, $bb_tmp$sroa$0$0$i75 = 0, $bb_tmp$sroa$0$0$i82 = 0, $bb_tmp$sroa$0$0$i89 = 0, $bb_tmp$sroa$0$0$in$i = 0, $bb_tmp$sroa$0$0$in$i102 = 0, $bb_tmp$sroa$0$0$in$i123 = 0, $bb_tmp$sroa$0$0$in$i130 = 0, $bb_tmp$sroa$0$0$in$i137 = 0, $bb_tmp$sroa$0$0$in$i74 = 0, $bb_tmp$sroa$0$0$in$i81 = 0, $bb_tmp$sroa$0$0$in$i88 = 0, $bb_tmp$sroa$1$0$i = 0, $bb_tmp$sroa$1$0$i104 = 0, $bb_tmp$sroa$1$0$i118 = 0, $bb_tmp$sroa$1$0$i125 = 0;
 var $bb_tmp$sroa$1$0$i132 = 0, $bb_tmp$sroa$1$0$i139 = 0, $bb_tmp$sroa$1$0$i76 = 0, $bb_tmp$sroa$1$0$i83 = 0, $bb_tmp$sroa$1$0$i90 = 0, $bb_tmp$sroa$1$0$in$i = 0, $bb_tmp$sroa$1$0$in$i101 = 0, $bb_tmp$sroa$1$0$in$i115 = 0, $bb_tmp$sroa$1$0$in$i122 = 0, $bb_tmp$sroa$1$0$in$i129 = 0, $bb_tmp$sroa$1$0$in$i136 = 0, $bb_tmp$sroa$1$0$in$i73 = 0, $bb_tmp$sroa$1$0$in$i80 = 0, $bb_tmp$sroa$1$0$in$i87 = 0, $bb_tmp$sroa$2$0$i = 0, $bb_tmp$sroa$2$0$i105 = 0, $bb_tmp$sroa$2$0$i112 = 0, $bb_tmp$sroa$2$0$i119 = 0, $bb_tmp$sroa$2$0$i126 = 0, $bb_tmp$sroa$2$0$i133 = 0;
 var $bb_tmp$sroa$2$0$i140 = 0, $bb_tmp$sroa$2$0$i77 = 0, $bb_tmp$sroa$2$0$i84 = 0, $bb_tmp$sroa$2$0$i91 = 0, $bb_tmp$sroa$2$0$i98 = 0, $bb_tmp$sroa$2$0$in$i = 0, $bb_tmp$sroa$2$0$in$i100 = 0, $bb_tmp$sroa$2$0$in$i107 = 0, $bb_tmp$sroa$2$0$in$i114 = 0, $bb_tmp$sroa$2$0$in$i121 = 0, $bb_tmp$sroa$2$0$in$i128 = 0, $bb_tmp$sroa$2$0$in$i135 = 0, $bb_tmp$sroa$2$0$in$i72 = 0, $bb_tmp$sroa$2$0$in$i79 = 0, $bb_tmp$sroa$2$0$in$i86 = 0, $bb_tmp$sroa$2$0$in$i93 = 0, $brmerge = 0, $dist$0215 = 0, $dist2$0209 = 0, $dist2$1203 = 0;
 var $dist2$2196 = 0, $dist2$3188 = 0, $dist6$0179 = 0, $dist6$1168 = 0, $dist6$2157 = 0, $dist6$3148 = 0, $file$0 = 0, $file$0193 = 0, $file$0197 = 0, $file$1190 = 0, $file$1190$in = 0, $file5$0 = 0, $file5$0175 = 0, $file5$0181 = 0, $file5$1169 = 0, $file5$1169$in = 0, $file5$2 = 0, $file5$2160 = 0, $file5$3150 = 0, $file5$3150$in = 0;
 var $min_dist$0 = 0, $min_dist3$0 = 0, $move$0 = 0, $move1$0 = 0, $move1$2 = 0, $move1$3 = 0, $move1$4 = 0, $move4$1 = 0, $move4$3 = 0, $move4$4 = 0, $move4$5 = 0, $or$cond = 0, $or$cond64 = 0, $or$cond64177 = 0, $or$cond66 = 0, $or$cond66166 = 0, $or$cond68 = 0, $or$cond68155 = 0, $or$cond70 = 0, $or$cond70146 = 0;
 var $rank$0 = 0, $rank$0174 = 0, $rank$0180 = 0, $rank$1 = 0, $rank$1170 = 0, $rank$2158 = 0, $rank$2158$in = 0, $rank$3149 = 0, $rank$3149$in = 0, $to$0 = 0, $to$0213 = 0, $to$0216 = 0, $to$1 = 0, $to$1207 = 0, $to$1210 = 0, $to$2 = 0, $to$2201 = 0, $to$2204 = 0, $to$3198 = 0, $to$3198$in = 0;
 var $to$4189 = 0, $to$4189$in = 0, $to$5182 = 0, $to$5182$in = 0, $to$6171 = 0, $to$6171$in = 0, $to$7159 = 0, $to$7159$in = 0, $to$8151 = 0, $to$8151$in = 0, $u0$0428 = 0, $u0$1395 = 0, $u0$2302 = 0, $u0$3277 = 0, $u1$0429 = 0, $u1$1396 = 0, $u1$2339 = 0, $u1$3314 = 0, $u1$4303 = 0, $u1$5278 = 0;
 var $u2$0410 = 0, $u2$1377 = 0, $u2$2350 = 0, $u2$3315 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__ptree__) + 593|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = ((33572424 + ($2<<3)|0) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ((($__ptree__) + ($5<<2)|0) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((33572424 + ($2<<3)|0) + 3|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $7 >>> $10;
 $12 = $11 & 127;
 $13 = ((33953152 + (($2*1536)|0)|0) + (($12*12)|0)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (((33953152 + (($2*1536)|0)|0) + (($12*12)|0)|0) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (((33953152 + (($2*1536)|0)|0) + (($12*12)|0)|0) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (33572424 + ($2<<3)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = ((($__ptree__) + ($21<<2)|0) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($__ptree__) + ($21<<2)|0) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 | $23;
 $27 = ((33572424 + ($2<<3)|0) + 1|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $26 >>> $29;
 $31 = $30 & 127;
 $32 = ((33828736 + (($2*1536)|0)|0) + (($31*12)|0)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (((33828736 + (($2*1536)|0)|0) + (($31*12)|0)|0) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (((33828736 + (($2*1536)|0)|0) + (($31*12)|0)|0) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $33 | $14;
 $39 = $35 | $16;
 $40 = $37 | $18;
 $41 = ((33572424 + ($2<<3)|0) + 6|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = ((($__ptree__) + ($43<<2)|0) + 56|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((33572424 + ($2<<3)|0) + 7|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = $45 >>> $48;
 $50 = $49 & 127;
 $51 = ((33704320 + (($2*1536)|0)|0) + (($50*12)|0)|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (((33704320 + (($2*1536)|0)|0) + (($50*12)|0)|0) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (((33704320 + (($2*1536)|0)|0) + (($50*12)|0)|0) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((33572424 + ($2<<3)|0) + 4|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = ((($__ptree__) + ($59<<2)|0) + 44|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((33572424 + ($2<<3)|0) + 5|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = $61 >>> $64;
 $66 = $65 & 127;
 $67 = ((33579904 + (($2*1536)|0)|0) + (($66*12)|0)|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (((33579904 + (($2*1536)|0)|0) + (($66*12)|0)|0) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (((33579904 + (($2*1536)|0)|0) + (($66*12)|0)|0) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $68 | $52;
 $74 = $70 | $54;
 $75 = $72 | $56;
 $76 = (($__ptree__) + 20|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $77 ^ -1;
 $79 = (($__ptree__) + 24|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $80 ^ -1;
 $82 = (($__ptree__) + 28|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 ^ -1;
 $85 = (($__ptree__) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $86 | $77;
 $88 = (($__ptree__) + 12|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 | $80;
 $91 = (($__ptree__) + 16|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $92 | $83;
 $94 = $87 ^ -1;
 $95 = $90 ^ -1;
 $96 = $93 ^ -1;
 $97 = (($__ptree__) + 594|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = $98&255;
 $100 = ((220518304 + (($2*81)|0)|0) + ($99)|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = ($101<<24>>24)==(0);
 if ($103) {
  $$1 = $pmove;
 } else {
  $104 = (_is_pinned_on_black_king($__ptree__,$99,$102)|0);
  $105 = ($104|0)==(0);
  if ($105) {
   $$1 = $pmove;
  } else {
   if ((($102|0) == 2)) {
    $112 = (33953152 + (($2*1536)|0)|0);
    $113 = ((33953152 + (($2*1536)|0)|0) + 4|0);
    $114 = ((33953152 + (($2*1536)|0)|0) + 8|0);
    $bb_tmp$sroa$0$0$in$i = $112;$bb_tmp$sroa$1$0$in$i = $113;$bb_tmp$sroa$2$0$in$i = $114;
   } else if ((($102|0) == 4)) {
    $106 = (33704320 + (($2*1536)|0)|0);
    $107 = ((33704320 + (($2*1536)|0)|0) + 4|0);
    $108 = ((33704320 + (($2*1536)|0)|0) + 8|0);
    $bb_tmp$sroa$0$0$in$i = $106;$bb_tmp$sroa$1$0$in$i = $107;$bb_tmp$sroa$2$0$in$i = $108;
   } else if ((($102|0) == 5)) {
    $109 = (33579904 + (($2*1536)|0)|0);
    $110 = ((33579904 + (($2*1536)|0)|0) + 4|0);
    $111 = ((33579904 + (($2*1536)|0)|0) + 8|0);
    $bb_tmp$sroa$0$0$in$i = $109;$bb_tmp$sroa$1$0$in$i = $110;$bb_tmp$sroa$2$0$in$i = $111;
   } else {
    $115 = (33828736 + (($2*1536)|0)|0);
    $116 = ((33828736 + (($2*1536)|0)|0) + 4|0);
    $117 = ((33828736 + (($2*1536)|0)|0) + 8|0);
    $bb_tmp$sroa$0$0$in$i = $115;$bb_tmp$sroa$1$0$in$i = $116;$bb_tmp$sroa$2$0$in$i = $117;
   }
   $bb_tmp$sroa$0$0$i = HEAP32[$bb_tmp$sroa$0$0$in$i>>2]|0;
   $bb_tmp$sroa$1$0$i = HEAP32[$bb_tmp$sroa$1$0$in$i>>2]|0;
   $bb_tmp$sroa$2$0$i = HEAP32[$bb_tmp$sroa$2$0$in$i>>2]|0;
   $118 = $bb_tmp$sroa$0$0$i ^ -1;
   $119 = $bb_tmp$sroa$1$0$i ^ -1;
   $120 = $bb_tmp$sroa$2$0$i ^ -1;
   $121 = (33578928 + (($99*12)|0)|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ((33578928 + (($99*12)|0)|0) + 4|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ((33578928 + (($99*12)|0)|0) + 8|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $118 & $78;
   $128 = $127 & $122;
   $129 = $119 & $81;
   $130 = $129 & $124;
   $131 = $120 & $84;
   $132 = $131 & $126;
   $133 = $130 | $132;
   $134 = $133 | $128;
   $135 = ($134|0)==(0);
   if ($135) {
    $$1 = $pmove;
   } else {
    $136 = $99 << 7;
    $$0462 = $pmove;$137 = $128;$138 = $130;$139 = $132;
    while(1) {
     $140 = (_first_one012($137,$138,$139)|0);
     $141 = (34156304 + (($140*12)|0)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = $142 ^ $137;
     $144 = ((34156304 + (($140*12)|0)|0) + 4|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = $145 ^ $138;
     $147 = ((34156304 + (($140*12)|0)|0) + 8|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = $148 ^ $139;
     $150 = ((($__ptree__) + ($140)|0) + 512|0);
     $151 = HEAP8[$150>>0]|0;
     $152 = $151 << 24 >> 24;
     $153 = $152 << 19;
     $154 = $136 | $140;
     $155 = $154 | $153;
     $156 = $155 | 262144;
     $157 = (($$0462) + 4|0);
     HEAP32[$$0462>>2] = $156;
     $158 = $146 | $149;
     $159 = $158 | $143;
     $160 = ($159|0)==(0);
     if ($160) {
      $$1 = $157;
      break;
     } else {
      $$0462 = $157;$137 = $143;$138 = $146;$139 = $149;
     }
    }
   }
  }
 }
 $161 = (($__ptree__) + 344|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = (($__ptree__) + 348|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = (($__ptree__) + 352|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = $164 | $162;
 $168 = $167 | $166;
 $169 = ($168|0)==(0);
 if ($169) {
  $$2$lcssa = $$1;
 } else {
  $170 = (33578928 + (($2*12)|0)|0);
  $171 = ((33578928 + (($2*12)|0)|0) + 4|0);
  $172 = ((33578928 + (($2*12)|0)|0) + 8|0);
  $173 = (33828736 + (($2*1536)|0)|0);
  $174 = ((33828736 + (($2*1536)|0)|0) + 4|0);
  $175 = ((33828736 + (($2*1536)|0)|0) + 8|0);
  $176 = (33704320 + (($2*1536)|0)|0);
  $177 = ((33704320 + (($2*1536)|0)|0) + 4|0);
  $178 = ((33704320 + (($2*1536)|0)|0) + 8|0);
  $179 = (33579904 + (($2*1536)|0)|0);
  $180 = ((33579904 + (($2*1536)|0)|0) + 4|0);
  $181 = ((33579904 + (($2*1536)|0)|0) + 8|0);
  $182 = (33953152 + (($2*1536)|0)|0);
  $183 = ((33953152 + (($2*1536)|0)|0) + 4|0);
  $184 = ((33953152 + (($2*1536)|0)|0) + 8|0);
  $$2456 = $$1;$bb_piece$sroa$0$0453 = $162;$bb_piece$sroa$1$0454 = $164;$bb_piece$sroa$2$0455 = $166;
  while(1) {
   $191 = (_first_one012($bb_piece$sroa$0$0453,$bb_piece$sroa$1$0454,$bb_piece$sroa$2$0455)|0);
   $192 = (34156304 + (($191*12)|0)|0);
   $193 = HEAP32[$192>>2]|0;
   $187 = $193 ^ $bb_piece$sroa$0$0453;
   $194 = ((34156304 + (($191*12)|0)|0) + 4|0);
   $195 = HEAP32[$194>>2]|0;
   $186 = $195 ^ $bb_piece$sroa$1$0454;
   $196 = ((34156304 + (($191*12)|0)|0) + 8|0);
   $197 = HEAP32[$196>>2]|0;
   $189 = $197 ^ $bb_piece$sroa$2$0455;
   $198 = HEAP32[$170>>2]|0;
   $199 = $198 | $38;
   $200 = HEAP32[$171>>2]|0;
   $201 = $200 | $39;
   $202 = HEAP32[$172>>2]|0;
   $203 = $202 | $40;
   $204 = ((220518304 + (($2*81)|0)|0) + ($191)|0);
   $205 = HEAP8[$204>>0]|0;
   $206 = $205&255;
   $207 = ($205<<24>>24)==(0);
   if ($207) {
    $264 = $199;$267 = $201;$270 = $203;
   } else {
    $208 = (_is_pinned_on_black_king($__ptree__,$191,$206)|0);
    $209 = ($208|0)==(0);
    if ($209) {
     $264 = $199;$267 = $201;$270 = $203;
    } else {
     if ((($206|0) == 5)) {
      $bb_tmp$sroa$0$0$in$i137 = $179;$bb_tmp$sroa$1$0$in$i136 = $180;$bb_tmp$sroa$2$0$in$i135 = $181;
     } else if ((($206|0) == 2)) {
      $bb_tmp$sroa$0$0$in$i137 = $182;$bb_tmp$sroa$1$0$in$i136 = $183;$bb_tmp$sroa$2$0$in$i135 = $184;
     } else if ((($206|0) == 4)) {
      $bb_tmp$sroa$0$0$in$i137 = $176;$bb_tmp$sroa$1$0$in$i136 = $177;$bb_tmp$sroa$2$0$in$i135 = $178;
     } else {
      $bb_tmp$sroa$0$0$in$i137 = $173;$bb_tmp$sroa$1$0$in$i136 = $174;$bb_tmp$sroa$2$0$in$i135 = $175;
     }
     $bb_tmp$sroa$0$0$i138 = HEAP32[$bb_tmp$sroa$0$0$in$i137>>2]|0;
     $bb_tmp$sroa$1$0$i139 = HEAP32[$bb_tmp$sroa$1$0$in$i136>>2]|0;
     $bb_tmp$sroa$2$0$i140 = HEAP32[$bb_tmp$sroa$2$0$in$i135>>2]|0;
     $210 = $bb_tmp$sroa$0$0$i138 ^ -1;
     $211 = $bb_tmp$sroa$1$0$i139 ^ -1;
     $212 = $bb_tmp$sroa$2$0$i140 ^ -1;
     $213 = $199 | $210;
     $214 = $201 | $211;
     $215 = $203 | $212;
     $264 = $213;$267 = $214;$270 = $215;
    }
   }
   $216 = ((33572424 + ($191<<3)|0) + 2|0);
   $217 = HEAP8[$216>>0]|0;
   $218 = $217&255;
   $219 = ((($__ptree__) + ($218<<2)|0) + 32|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = ((33572424 + ($191<<3)|0) + 3|0);
   $222 = HEAP8[$221>>0]|0;
   $223 = $222&255;
   $224 = $220 >>> $223;
   $225 = $224 & 127;
   $226 = ((33953152 + (($191*1536)|0)|0) + (($225*12)|0)|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = (33572424 + ($191<<3)|0);
   $229 = HEAP8[$228>>0]|0;
   $230 = $229&255;
   $231 = ((($__ptree__) + ($230<<2)|0) + 8|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = ((($__ptree__) + ($230<<2)|0) + 20|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 | $232;
   $236 = ((33572424 + ($191<<3)|0) + 1|0);
   $237 = HEAP8[$236>>0]|0;
   $238 = $237&255;
   $239 = $235 >>> $238;
   $240 = $239 & 127;
   $241 = ((33828736 + (($191*1536)|0)|0) + (($240*12)|0)|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = $242 | $227;
   $244 = (((33953152 + (($191*1536)|0)|0) + (($225*12)|0)|0) + 4|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = (((33828736 + (($191*1536)|0)|0) + (($240*12)|0)|0) + 4|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = $247 | $245;
   $249 = (((33953152 + (($191*1536)|0)|0) + (($225*12)|0)|0) + 8|0);
   $250 = HEAP32[$249>>2]|0;
   $251 = (((33828736 + (($191*1536)|0)|0) + (($240*12)|0)|0) + 8|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = $252 | $250;
   $254 = (33578928 + (($191*12)|0)|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = $243 | $255;
   $257 = ((33578928 + (($191*12)|0)|0) + 4|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = $248 | $258;
   $260 = ((33578928 + (($191*12)|0)|0) + 8|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = $253 | $261;
   $263 = $264 & $78;
   $265 = $263 & $256;
   $266 = $267 & $81;
   $268 = $266 & $259;
   $269 = $270 & $84;
   $271 = $269 & $262;
   $272 = $268 | $271;
   $273 = $272 | $265;
   $274 = ($273|0)==(0);
   if ($274) {
    $$3$lcssa = $$2456;
   } else {
    $275 = $191 << 7;
    $$3449 = $$2456;$276 = $271;$277 = $268;$278 = $265;
    while(1) {
     $279 = (_last_one210($276,$277,$278)|0);
     $280 = (34156304 + (($279*12)|0)|0);
     $281 = HEAP32[$280>>2]|0;
     $282 = $281 ^ $278;
     $283 = ((34156304 + (($279*12)|0)|0) + 4|0);
     $284 = HEAP32[$283>>2]|0;
     $285 = $284 ^ $277;
     $286 = ((34156304 + (($279*12)|0)|0) + 8|0);
     $287 = HEAP32[$286>>2]|0;
     $288 = $287 ^ $276;
     $289 = ((($__ptree__) + ($279)|0) + 512|0);
     $290 = HEAP8[$289>>0]|0;
     $291 = $290 << 24 >> 24;
     $292 = $291 << 19;
     $293 = $275 | $279;
     $294 = $293 | $292;
     $295 = $294 | 491520;
     $296 = (($$3449) + 4|0);
     HEAP32[$$3449>>2] = $295;
     $297 = $285 | $288;
     $298 = $297 | $282;
     $299 = ($298|0)==(0);
     if ($299) {
      $$3$lcssa = $296;
      break;
     } else {
      $$3449 = $296;$276 = $288;$277 = $285;$278 = $282;
     }
    }
   }
   $185 = $186 | $187;
   $188 = $185 | $189;
   $190 = ($188|0)==(0);
   if ($190) {
    $$2$lcssa = $$3$lcssa;
    break;
   } else {
    $$2456 = $$3$lcssa;$bb_piece$sroa$0$0453 = $187;$bb_piece$sroa$1$0454 = $186;$bb_piece$sroa$2$0455 = $189;
   }
  }
 }
 $300 = (($__ptree__) + 320|0);
 $301 = HEAP32[$300>>2]|0;
 $302 = (($__ptree__) + 324|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = (($__ptree__) + 328|0);
 $305 = HEAP32[$304>>2]|0;
 $306 = $303 | $301;
 $307 = $306 | $305;
 $308 = ($307|0)==(0);
 if ($308) {
  $$4$lcssa = $$2$lcssa;
 } else {
  $309 = (33578928 + (($2*12)|0)|0);
  $310 = ((33578928 + (($2*12)|0)|0) + 4|0);
  $311 = ((33578928 + (($2*12)|0)|0) + 8|0);
  $312 = (33828736 + (($2*1536)|0)|0);
  $313 = ((33828736 + (($2*1536)|0)|0) + 4|0);
  $314 = ((33828736 + (($2*1536)|0)|0) + 8|0);
  $315 = (33704320 + (($2*1536)|0)|0);
  $316 = ((33704320 + (($2*1536)|0)|0) + 4|0);
  $317 = ((33704320 + (($2*1536)|0)|0) + 8|0);
  $318 = (33579904 + (($2*1536)|0)|0);
  $319 = ((33579904 + (($2*1536)|0)|0) + 4|0);
  $320 = ((33579904 + (($2*1536)|0)|0) + 8|0);
  $321 = (33953152 + (($2*1536)|0)|0);
  $322 = ((33953152 + (($2*1536)|0)|0) + 4|0);
  $323 = ((33953152 + (($2*1536)|0)|0) + 8|0);
  $$4443 = $$2$lcssa;$bb_piece$sroa$0$1440 = $301;$bb_piece$sroa$1$1441 = $303;$bb_piece$sroa$2$1442 = $305;
  while(1) {
   $330 = (_first_one012($bb_piece$sroa$0$1440,$bb_piece$sroa$1$1441,$bb_piece$sroa$2$1442)|0);
   $331 = (34156304 + (($330*12)|0)|0);
   $332 = HEAP32[$331>>2]|0;
   $326 = $332 ^ $bb_piece$sroa$0$1440;
   $333 = ((34156304 + (($330*12)|0)|0) + 4|0);
   $334 = HEAP32[$333>>2]|0;
   $325 = $334 ^ $bb_piece$sroa$1$1441;
   $335 = ((34156304 + (($330*12)|0)|0) + 8|0);
   $336 = HEAP32[$335>>2]|0;
   $328 = $336 ^ $bb_piece$sroa$2$1442;
   $337 = HEAP32[$309>>2]|0;
   $338 = $337 | $73;
   $339 = HEAP32[$310>>2]|0;
   $340 = $339 | $74;
   $341 = HEAP32[$311>>2]|0;
   $342 = $341 | $75;
   $343 = ((220518304 + (($2*81)|0)|0) + ($330)|0);
   $344 = HEAP8[$343>>0]|0;
   $345 = $344&255;
   $346 = ($344<<24>>24)==(0);
   if ($346) {
    $400 = $338;$403 = $340;$406 = $342;
   } else {
    $347 = (_is_pinned_on_black_king($__ptree__,$330,$345)|0);
    $348 = ($347|0)==(0);
    if ($348) {
     $400 = $338;$403 = $340;$406 = $342;
    } else {
     if ((($345|0) == 5)) {
      $bb_tmp$sroa$0$0$in$i130 = $318;$bb_tmp$sroa$1$0$in$i129 = $319;$bb_tmp$sroa$2$0$in$i128 = $320;
     } else if ((($345|0) == 2)) {
      $bb_tmp$sroa$0$0$in$i130 = $321;$bb_tmp$sroa$1$0$in$i129 = $322;$bb_tmp$sroa$2$0$in$i128 = $323;
     } else if ((($345|0) == 4)) {
      $bb_tmp$sroa$0$0$in$i130 = $315;$bb_tmp$sroa$1$0$in$i129 = $316;$bb_tmp$sroa$2$0$in$i128 = $317;
     } else {
      $bb_tmp$sroa$0$0$in$i130 = $312;$bb_tmp$sroa$1$0$in$i129 = $313;$bb_tmp$sroa$2$0$in$i128 = $314;
     }
     $bb_tmp$sroa$0$0$i131 = HEAP32[$bb_tmp$sroa$0$0$in$i130>>2]|0;
     $bb_tmp$sroa$1$0$i132 = HEAP32[$bb_tmp$sroa$1$0$in$i129>>2]|0;
     $bb_tmp$sroa$2$0$i133 = HEAP32[$bb_tmp$sroa$2$0$in$i128>>2]|0;
     $349 = $bb_tmp$sroa$0$0$i131 ^ -1;
     $350 = $bb_tmp$sroa$1$0$i132 ^ -1;
     $351 = $bb_tmp$sroa$2$0$i133 ^ -1;
     $352 = $338 | $349;
     $353 = $340 | $350;
     $354 = $342 | $351;
     $400 = $352;$403 = $353;$406 = $354;
    }
   }
   $355 = ((33572424 + ($330<<3)|0) + 6|0);
   $356 = HEAP8[$355>>0]|0;
   $357 = $356&255;
   $358 = ((($__ptree__) + ($357<<2)|0) + 56|0);
   $359 = HEAP32[$358>>2]|0;
   $360 = ((33572424 + ($330<<3)|0) + 7|0);
   $361 = HEAP8[$360>>0]|0;
   $362 = $361&255;
   $363 = $359 >>> $362;
   $364 = $363 & 127;
   $365 = ((33704320 + (($330*1536)|0)|0) + (($364*12)|0)|0);
   $366 = HEAP32[$365>>2]|0;
   $367 = ((33572424 + ($330<<3)|0) + 4|0);
   $368 = HEAP8[$367>>0]|0;
   $369 = $368&255;
   $370 = ((($__ptree__) + ($369<<2)|0) + 44|0);
   $371 = HEAP32[$370>>2]|0;
   $372 = ((33572424 + ($330<<3)|0) + 5|0);
   $373 = HEAP8[$372>>0]|0;
   $374 = $373&255;
   $375 = $371 >>> $374;
   $376 = $375 & 127;
   $377 = ((33579904 + (($330*1536)|0)|0) + (($376*12)|0)|0);
   $378 = HEAP32[$377>>2]|0;
   $379 = $378 | $366;
   $380 = (((33704320 + (($330*1536)|0)|0) + (($364*12)|0)|0) + 4|0);
   $381 = HEAP32[$380>>2]|0;
   $382 = (((33579904 + (($330*1536)|0)|0) + (($376*12)|0)|0) + 4|0);
   $383 = HEAP32[$382>>2]|0;
   $384 = $383 | $381;
   $385 = (((33704320 + (($330*1536)|0)|0) + (($364*12)|0)|0) + 8|0);
   $386 = HEAP32[$385>>2]|0;
   $387 = (((33579904 + (($330*1536)|0)|0) + (($376*12)|0)|0) + 8|0);
   $388 = HEAP32[$387>>2]|0;
   $389 = $388 | $386;
   $390 = (33578928 + (($330*12)|0)|0);
   $391 = HEAP32[$390>>2]|0;
   $392 = $379 | $391;
   $393 = ((33578928 + (($330*12)|0)|0) + 4|0);
   $394 = HEAP32[$393>>2]|0;
   $395 = $384 | $394;
   $396 = ((33578928 + (($330*12)|0)|0) + 8|0);
   $397 = HEAP32[$396>>2]|0;
   $398 = $389 | $397;
   $399 = $400 & $78;
   $401 = $399 & $392;
   $402 = $403 & $81;
   $404 = $402 & $395;
   $405 = $406 & $84;
   $407 = $405 & $398;
   $408 = $404 | $407;
   $409 = $408 | $401;
   $410 = ($409|0)==(0);
   if ($410) {
    $$5$lcssa = $$4443;
   } else {
    $411 = $330 << 7;
    $$5436 = $$4443;$412 = $401;$413 = $404;$414 = $407;
    while(1) {
     $415 = (_first_one012($412,$413,$414)|0);
     $416 = (34156304 + (($415*12)|0)|0);
     $417 = HEAP32[$416>>2]|0;
     $418 = $417 ^ $412;
     $419 = ((34156304 + (($415*12)|0)|0) + 4|0);
     $420 = HEAP32[$419>>2]|0;
     $421 = $420 ^ $413;
     $422 = ((34156304 + (($415*12)|0)|0) + 8|0);
     $423 = HEAP32[$422>>2]|0;
     $424 = $423 ^ $414;
     $425 = ((($__ptree__) + ($415)|0) + 512|0);
     $426 = HEAP8[$425>>0]|0;
     $427 = $426 << 24 >> 24;
     $428 = $427 << 19;
     $429 = $411 | $415;
     $430 = $429 | $428;
     $431 = $430 | 458752;
     $432 = (($$5436) + 4|0);
     HEAP32[$$5436>>2] = $431;
     $433 = $421 | $424;
     $434 = $433 | $418;
     $435 = ($434|0)==(0);
     if ($435) {
      $$5$lcssa = $432;
      break;
     } else {
      $$5436 = $432;$412 = $418;$413 = $421;$414 = $424;
     }
    }
   }
   $324 = $325 | $326;
   $327 = $324 | $328;
   $329 = ($327|0)==(0);
   if ($329) {
    $$4$lcssa = $$5$lcssa;
    break;
   } else {
    $$4443 = $$5$lcssa;$bb_piece$sroa$0$1440 = $326;$bb_piece$sroa$1$1441 = $325;$bb_piece$sroa$2$1442 = $328;
   }
  }
 }
 $436 = (($__ptree__) + 296|0);
 $437 = HEAP32[$436>>2]|0;
 $438 = (($__ptree__) + 300|0);
 $439 = HEAP32[$438>>2]|0;
 $440 = $439 | $437;
 $441 = ($440|0)==(0);
 if ($441) {
  $$6$lcssa = $$4$lcssa;
 } else {
  $442 = ((33578928 + (($2*12)|0)|0) + 8|0);
  $443 = $38 & $78;
  $444 = $39 & $81;
  $$6430 = $$4$lcssa;$u0$0428 = $437;$u1$0429 = $439;
  while(1) {
   $449 = (_first_one01($u0$0428,$u1$0429)|0);
   $450 = (34156304 + (($449*12)|0)|0);
   $451 = HEAP32[$450>>2]|0;
   $447 = $451 ^ $u0$0428;
   $452 = ((34156304 + (($449*12)|0)|0) + 4|0);
   $453 = HEAP32[$452>>2]|0;
   $446 = $453 ^ $u1$0429;
   $454 = ((33572424 + ($449<<3)|0) + 2|0);
   $455 = HEAP8[$454>>0]|0;
   $456 = $455&255;
   $457 = ((($__ptree__) + ($456<<2)|0) + 32|0);
   $458 = HEAP32[$457>>2]|0;
   $459 = ((33572424 + ($449<<3)|0) + 3|0);
   $460 = HEAP8[$459>>0]|0;
   $461 = $460&255;
   $462 = $458 >>> $461;
   $463 = $462 & 127;
   $464 = ((33953152 + (($449*1536)|0)|0) + (($463*12)|0)|0);
   $465 = HEAP32[$464>>2]|0;
   $466 = (33572424 + ($449<<3)|0);
   $467 = HEAP8[$466>>0]|0;
   $468 = $467&255;
   $469 = ((($__ptree__) + ($468<<2)|0) + 8|0);
   $470 = HEAP32[$469>>2]|0;
   $471 = ((($__ptree__) + ($468<<2)|0) + 20|0);
   $472 = HEAP32[$471>>2]|0;
   $473 = $472 | $470;
   $474 = ((33572424 + ($449<<3)|0) + 1|0);
   $475 = HEAP8[$474>>0]|0;
   $476 = $475&255;
   $477 = $473 >>> $476;
   $478 = $477 & 127;
   $479 = ((33828736 + (($449*1536)|0)|0) + (($478*12)|0)|0);
   $480 = HEAP32[$479>>2]|0;
   $481 = $480 | $465;
   $482 = (((33953152 + (($449*1536)|0)|0) + (($463*12)|0)|0) + 4|0);
   $483 = HEAP32[$482>>2]|0;
   $484 = (((33828736 + (($449*1536)|0)|0) + (($478*12)|0)|0) + 4|0);
   $485 = HEAP32[$484>>2]|0;
   $486 = $485 | $483;
   $487 = (((33953152 + (($449*1536)|0)|0) + (($463*12)|0)|0) + 8|0);
   $488 = HEAP32[$487>>2]|0;
   $489 = (((33828736 + (($449*1536)|0)|0) + (($478*12)|0)|0) + 8|0);
   $490 = HEAP32[$489>>2]|0;
   $491 = $490 | $488;
   $492 = ((220518304 + (($2*81)|0)|0) + ($449)|0);
   $493 = HEAP8[$492>>0]|0;
   $494 = ($493<<24>>24)==(0);
   if ($494) {
    label = 43;
   } else {
    $495 = $493&255;
    $496 = (_is_pinned_on_black_king($__ptree__,$449,$495)|0);
    $497 = ($496|0)==(0);
    if ($497) {
     label = 43;
    } else {
     $498 = $481 & $78;
     $499 = $486 & $81;
     $500 = $491 & $84;
     $$ph417 = $500;$$ph418 = $499;$$ph419 = $498;
    }
   }
   if ((label|0) == 43) {
    label = 0;
    $501 = HEAP32[$442>>2]|0;
    $502 = $501 | $40;
    $503 = $443 & $481;
    $504 = $444 & $486;
    $505 = $491 & $84;
    $506 = $505 & $502;
    $$ph417 = $506;$$ph418 = $504;$$ph419 = $503;
   }
   $507 = ($$ph417|0)==(0);
   if ($507) {
    $$7$lcssa = $$6430;
   } else {
    $508 = $449 << 7;
    $$7421 = $$6430;$509 = $$ph417;
    while(1) {
     $510 = (_first_one2($509)|0);
     $511 = ((34156304 + (($510*12)|0)|0) + 8|0);
     $512 = HEAP32[$511>>2]|0;
     $513 = $512 ^ $509;
     $514 = ((($__ptree__) + ($510)|0) + 512|0);
     $515 = HEAP8[$514>>0]|0;
     $516 = $515 << 24 >> 24;
     $517 = $516 << 19;
     $518 = $508 | $510;
     $519 = $518 | $517;
     $520 = $519 | 245760;
     $521 = (($$7421) + 4|0);
     HEAP32[$$7421>>2] = $520;
     $522 = ($512|0)==($509|0);
     if ($522) {
      $$7$lcssa = $521;
      break;
     } else {
      $$7421 = $521;$509 = $513;
     }
    }
   }
   $523 = $$ph419 | $$ph418;
   $524 = ($523|0)==(0);
   if ($524) {
    $$8$lcssa = $$7$lcssa;
   } else {
    $525 = $449 << 7;
    $$8425 = $$7$lcssa;$526 = $$ph419;$527 = $$ph418;
    while(1) {
     $528 = (_first_one01($526,$527)|0);
     $529 = (34156304 + (($528*12)|0)|0);
     $530 = HEAP32[$529>>2]|0;
     $531 = $530 ^ $526;
     $532 = ((34156304 + (($528*12)|0)|0) + 4|0);
     $533 = HEAP32[$532>>2]|0;
     $534 = $533 ^ $527;
     $535 = ((($__ptree__) + ($528)|0) + 512|0);
     $536 = HEAP8[$535>>0]|0;
     $537 = $536 << 24 >> 24;
     $538 = $537 << 19;
     $539 = $525 | $528;
     $540 = $539 | $538;
     $541 = $540 | 229376;
     $542 = (($$8425) + 4|0);
     HEAP32[$$8425>>2] = $541;
     $543 = $531 | $534;
     $544 = ($543|0)==(0);
     if ($544) {
      $$8$lcssa = $542;
      break;
     } else {
      $$8425 = $542;$526 = $531;$527 = $534;
     }
    }
   }
   $445 = $446 | $447;
   $448 = ($445|0)==(0);
   if ($448) {
    $$6$lcssa = $$8$lcssa;
    break;
   } else {
    $$6430 = $$8$lcssa;$u0$0428 = $447;$u1$0429 = $446;
   }
  }
 }
 $545 = (($__ptree__) + 304|0);
 $546 = HEAP32[$545>>2]|0;
 $547 = ($546|0)==(0);
 if ($547) {
  $$9$lcssa = $$6$lcssa;
 } else {
  $548 = (33578928 + (($2*12)|0)|0);
  $549 = ((33578928 + (($2*12)|0)|0) + 4|0);
  $550 = ((33578928 + (($2*12)|0)|0) + 8|0);
  $$9411 = $$6$lcssa;$u2$0410 = $546;
  while(1) {
   $553 = (_first_one2($u2$0410)|0);
   $554 = ((34156304 + (($553*12)|0)|0) + 8|0);
   $552 = HEAP32[$554>>2]|0;
   $555 = $552 ^ $u2$0410;
   $556 = ((33572424 + ($553<<3)|0) + 2|0);
   $557 = HEAP8[$556>>0]|0;
   $558 = $557&255;
   $559 = ((($__ptree__) + ($558<<2)|0) + 32|0);
   $560 = HEAP32[$559>>2]|0;
   $561 = ((33572424 + ($553<<3)|0) + 3|0);
   $562 = HEAP8[$561>>0]|0;
   $563 = $562&255;
   $564 = $560 >>> $563;
   $565 = $564 & 127;
   $566 = ((33953152 + (($553*1536)|0)|0) + (($565*12)|0)|0);
   $567 = HEAP32[$566>>2]|0;
   $568 = (33572424 + ($553<<3)|0);
   $569 = HEAP8[$568>>0]|0;
   $570 = $569&255;
   $571 = ((($__ptree__) + ($570<<2)|0) + 8|0);
   $572 = HEAP32[$571>>2]|0;
   $573 = ((($__ptree__) + ($570<<2)|0) + 20|0);
   $574 = HEAP32[$573>>2]|0;
   $575 = $574 | $572;
   $576 = ((33572424 + ($553<<3)|0) + 1|0);
   $577 = HEAP8[$576>>0]|0;
   $578 = $577&255;
   $579 = $575 >>> $578;
   $580 = $579 & 127;
   $581 = ((33828736 + (($553*1536)|0)|0) + (($580*12)|0)|0);
   $582 = HEAP32[$581>>2]|0;
   $583 = $582 | $567;
   $584 = (((33953152 + (($553*1536)|0)|0) + (($565*12)|0)|0) + 4|0);
   $585 = HEAP32[$584>>2]|0;
   $586 = (((33828736 + (($553*1536)|0)|0) + (($580*12)|0)|0) + 4|0);
   $587 = HEAP32[$586>>2]|0;
   $588 = $587 | $585;
   $589 = (((33953152 + (($553*1536)|0)|0) + (($565*12)|0)|0) + 8|0);
   $590 = HEAP32[$589>>2]|0;
   $591 = (((33828736 + (($553*1536)|0)|0) + (($580*12)|0)|0) + 8|0);
   $592 = HEAP32[$591>>2]|0;
   $593 = $592 | $590;
   $594 = ((220518304 + (($2*81)|0)|0) + ($553)|0);
   $595 = HEAP8[$594>>0]|0;
   $596 = ($595<<24>>24)==(0);
   if ($596) {
    label = 56;
   } else {
    $597 = $595&255;
    $598 = (_is_pinned_on_black_king($__ptree__,$553,$597)|0);
    $599 = ($598|0)==(0);
    if ($599) {
     label = 56;
    } else {
     $600 = $583 & $78;
     $601 = $588 & $81;
     $602 = $593 & $84;
     $$ph403 = $602;$$ph404 = $601;$$ph405 = $600;
    }
   }
   if ((label|0) == 56) {
    label = 0;
    $603 = HEAP32[$548>>2]|0;
    $604 = $603 | $38;
    $605 = HEAP32[$549>>2]|0;
    $606 = $605 | $39;
    $607 = HEAP32[$550>>2]|0;
    $608 = $607 | $40;
    $609 = $583 & $78;
    $610 = $609 & $604;
    $611 = $588 & $81;
    $612 = $611 & $606;
    $613 = $593 & $84;
    $614 = $613 & $608;
    $$ph403 = $614;$$ph404 = $612;$$ph405 = $610;
   }
   $615 = $$ph404 | $$ph403;
   $616 = $615 | $$ph405;
   $617 = ($616|0)==(0);
   if ($617) {
    $$10$lcssa = $$9411;
   } else {
    $618 = $553 << 7;
    $$10407 = $$9411;$619 = $$ph405;$620 = $$ph404;$621 = $$ph403;
    while(1) {
     $622 = (_first_one012($619,$620,$621)|0);
     $623 = (34156304 + (($622*12)|0)|0);
     $624 = HEAP32[$623>>2]|0;
     $625 = $624 ^ $619;
     $626 = ((34156304 + (($622*12)|0)|0) + 4|0);
     $627 = HEAP32[$626>>2]|0;
     $628 = $627 ^ $620;
     $629 = ((34156304 + (($622*12)|0)|0) + 8|0);
     $630 = HEAP32[$629>>2]|0;
     $631 = $630 ^ $621;
     $632 = ((($__ptree__) + ($622)|0) + 512|0);
     $633 = HEAP8[$632>>0]|0;
     $634 = $633 << 24 >> 24;
     $635 = $634 << 19;
     $636 = $618 | $622;
     $637 = $636 | $635;
     $638 = $637 | 245760;
     $639 = (($$10407) + 4|0);
     HEAP32[$$10407>>2] = $638;
     $640 = $628 | $631;
     $641 = $640 | $625;
     $642 = ($641|0)==(0);
     if ($642) {
      $$10$lcssa = $639;
      break;
     } else {
      $$10407 = $639;$619 = $625;$620 = $628;$621 = $631;
     }
    }
   }
   $551 = ($552|0)==($u2$0410|0);
   if ($551) {
    $$9$lcssa = $$10$lcssa;
    break;
   } else {
    $$9411 = $$10$lcssa;$u2$0410 = $555;
   }
  }
 }
 $643 = (($__ptree__) + 272|0);
 $644 = HEAP32[$643>>2]|0;
 $645 = (($__ptree__) + 276|0);
 $646 = HEAP32[$645>>2]|0;
 $647 = $646 | $644;
 $648 = ($647|0)==(0);
 if ($648) {
  $$11$lcssa = $$9$lcssa;
 } else {
  $649 = ((33578928 + (($2*12)|0)|0) + 8|0);
  $650 = $73 & $78;
  $651 = $74 & $81;
  $$11397 = $$9$lcssa;$u0$1395 = $644;$u1$1396 = $646;
  while(1) {
   $656 = (_first_one01($u0$1395,$u1$1396)|0);
   $657 = (34156304 + (($656*12)|0)|0);
   $658 = HEAP32[$657>>2]|0;
   $654 = $658 ^ $u0$1395;
   $659 = ((34156304 + (($656*12)|0)|0) + 4|0);
   $660 = HEAP32[$659>>2]|0;
   $653 = $660 ^ $u1$1396;
   $661 = ((33572424 + ($656<<3)|0) + 6|0);
   $662 = HEAP8[$661>>0]|0;
   $663 = $662&255;
   $664 = ((($__ptree__) + ($663<<2)|0) + 56|0);
   $665 = HEAP32[$664>>2]|0;
   $666 = ((33572424 + ($656<<3)|0) + 7|0);
   $667 = HEAP8[$666>>0]|0;
   $668 = $667&255;
   $669 = $665 >>> $668;
   $670 = $669 & 127;
   $671 = ((33704320 + (($656*1536)|0)|0) + (($670*12)|0)|0);
   $672 = HEAP32[$671>>2]|0;
   $673 = ((33572424 + ($656<<3)|0) + 4|0);
   $674 = HEAP8[$673>>0]|0;
   $675 = $674&255;
   $676 = ((($__ptree__) + ($675<<2)|0) + 44|0);
   $677 = HEAP32[$676>>2]|0;
   $678 = ((33572424 + ($656<<3)|0) + 5|0);
   $679 = HEAP8[$678>>0]|0;
   $680 = $679&255;
   $681 = $677 >>> $680;
   $682 = $681 & 127;
   $683 = ((33579904 + (($656*1536)|0)|0) + (($682*12)|0)|0);
   $684 = HEAP32[$683>>2]|0;
   $685 = $684 | $672;
   $686 = (((33704320 + (($656*1536)|0)|0) + (($670*12)|0)|0) + 4|0);
   $687 = HEAP32[$686>>2]|0;
   $688 = (((33579904 + (($656*1536)|0)|0) + (($682*12)|0)|0) + 4|0);
   $689 = HEAP32[$688>>2]|0;
   $690 = $689 | $687;
   $691 = (((33704320 + (($656*1536)|0)|0) + (($670*12)|0)|0) + 8|0);
   $692 = HEAP32[$691>>2]|0;
   $693 = (((33579904 + (($656*1536)|0)|0) + (($682*12)|0)|0) + 8|0);
   $694 = HEAP32[$693>>2]|0;
   $695 = $694 | $692;
   $696 = ((220518304 + (($2*81)|0)|0) + ($656)|0);
   $697 = HEAP8[$696>>0]|0;
   $698 = ($697<<24>>24)==(0);
   if ($698) {
    label = 66;
   } else {
    $699 = $697&255;
    $700 = (_is_pinned_on_black_king($__ptree__,$656,$699)|0);
    $701 = ($700|0)==(0);
    if ($701) {
     label = 66;
    } else {
     $702 = $685 & $78;
     $703 = $690 & $81;
     $704 = $695 & $84;
     $$ph384 = $704;$$ph385 = $703;$$ph386 = $702;
    }
   }
   if ((label|0) == 66) {
    label = 0;
    $705 = HEAP32[$649>>2]|0;
    $706 = $705 | $75;
    $707 = $650 & $685;
    $708 = $651 & $690;
    $709 = $695 & $84;
    $710 = $709 & $706;
    $$ph384 = $710;$$ph385 = $708;$$ph386 = $707;
   }
   $711 = ($$ph384|0)==(0);
   if ($711) {
    $$12$lcssa = $$11397;
   } else {
    $712 = $656 << 7;
    $$12388 = $$11397;$713 = $$ph384;
    while(1) {
     $714 = (_first_one2($713)|0);
     $715 = ((34156304 + (($714*12)|0)|0) + 8|0);
     $716 = HEAP32[$715>>2]|0;
     $717 = $716 ^ $713;
     $718 = ((($__ptree__) + ($714)|0) + 512|0);
     $719 = HEAP8[$718>>0]|0;
     $720 = $719 << 24 >> 24;
     $721 = $720 << 19;
     $722 = $712 | $714;
     $723 = $722 | $721;
     $724 = $723 | 212992;
     $725 = (($$12388) + 4|0);
     HEAP32[$$12388>>2] = $724;
     $726 = ($716|0)==($713|0);
     if ($726) {
      $$12$lcssa = $725;
      break;
     } else {
      $$12388 = $725;$713 = $717;
     }
    }
   }
   $727 = $$ph386 | $$ph385;
   $728 = ($727|0)==(0);
   if ($728) {
    $$13$lcssa = $$12$lcssa;
   } else {
    $729 = $656 << 7;
    $$13392 = $$12$lcssa;$730 = $$ph386;$731 = $$ph385;
    while(1) {
     $732 = (_first_one01($730,$731)|0);
     $733 = (34156304 + (($732*12)|0)|0);
     $734 = HEAP32[$733>>2]|0;
     $735 = $734 ^ $730;
     $736 = ((34156304 + (($732*12)|0)|0) + 4|0);
     $737 = HEAP32[$736>>2]|0;
     $738 = $737 ^ $731;
     $739 = ((($__ptree__) + ($732)|0) + 512|0);
     $740 = HEAP8[$739>>0]|0;
     $741 = $740 << 24 >> 24;
     $742 = $741 << 19;
     $743 = $729 | $732;
     $744 = $743 | $742;
     $745 = $744 | 196608;
     $746 = (($$13392) + 4|0);
     HEAP32[$$13392>>2] = $745;
     $747 = $735 | $738;
     $748 = ($747|0)==(0);
     if ($748) {
      $$13$lcssa = $746;
      break;
     } else {
      $$13392 = $746;$730 = $735;$731 = $738;
     }
    }
   }
   $652 = $653 | $654;
   $655 = ($652|0)==(0);
   if ($655) {
    $$11$lcssa = $$13$lcssa;
    break;
   } else {
    $$11397 = $$13$lcssa;$u0$1395 = $654;$u1$1396 = $653;
   }
  }
 }
 $749 = (($__ptree__) + 280|0);
 $750 = HEAP32[$749>>2]|0;
 $751 = ($750|0)==(0);
 if ($751) {
  $$14$lcssa = $$11$lcssa;
 } else {
  $752 = (33578928 + (($2*12)|0)|0);
  $753 = ((33578928 + (($2*12)|0)|0) + 4|0);
  $754 = ((33578928 + (($2*12)|0)|0) + 8|0);
  $$14378 = $$11$lcssa;$u2$1377 = $750;
  while(1) {
   $757 = (_first_one2($u2$1377)|0);
   $758 = ((34156304 + (($757*12)|0)|0) + 8|0);
   $756 = HEAP32[$758>>2]|0;
   $759 = $756 ^ $u2$1377;
   $760 = ((33572424 + ($757<<3)|0) + 6|0);
   $761 = HEAP8[$760>>0]|0;
   $762 = $761&255;
   $763 = ((($__ptree__) + ($762<<2)|0) + 56|0);
   $764 = HEAP32[$763>>2]|0;
   $765 = ((33572424 + ($757<<3)|0) + 7|0);
   $766 = HEAP8[$765>>0]|0;
   $767 = $766&255;
   $768 = $764 >>> $767;
   $769 = $768 & 127;
   $770 = ((33704320 + (($757*1536)|0)|0) + (($769*12)|0)|0);
   $771 = HEAP32[$770>>2]|0;
   $772 = ((33572424 + ($757<<3)|0) + 4|0);
   $773 = HEAP8[$772>>0]|0;
   $774 = $773&255;
   $775 = ((($__ptree__) + ($774<<2)|0) + 44|0);
   $776 = HEAP32[$775>>2]|0;
   $777 = ((33572424 + ($757<<3)|0) + 5|0);
   $778 = HEAP8[$777>>0]|0;
   $779 = $778&255;
   $780 = $776 >>> $779;
   $781 = $780 & 127;
   $782 = ((33579904 + (($757*1536)|0)|0) + (($781*12)|0)|0);
   $783 = HEAP32[$782>>2]|0;
   $784 = $783 | $771;
   $785 = (((33704320 + (($757*1536)|0)|0) + (($769*12)|0)|0) + 4|0);
   $786 = HEAP32[$785>>2]|0;
   $787 = (((33579904 + (($757*1536)|0)|0) + (($781*12)|0)|0) + 4|0);
   $788 = HEAP32[$787>>2]|0;
   $789 = $788 | $786;
   $790 = (((33704320 + (($757*1536)|0)|0) + (($769*12)|0)|0) + 8|0);
   $791 = HEAP32[$790>>2]|0;
   $792 = (((33579904 + (($757*1536)|0)|0) + (($781*12)|0)|0) + 8|0);
   $793 = HEAP32[$792>>2]|0;
   $794 = $793 | $791;
   $795 = ((220518304 + (($2*81)|0)|0) + ($757)|0);
   $796 = HEAP8[$795>>0]|0;
   $797 = ($796<<24>>24)==(0);
   if ($797) {
    label = 79;
   } else {
    $798 = $796&255;
    $799 = (_is_pinned_on_black_king($__ptree__,$757,$798)|0);
    $800 = ($799|0)==(0);
    if ($800) {
     label = 79;
    } else {
     $801 = $784 & $78;
     $802 = $789 & $81;
     $803 = $794 & $84;
     $$ph370 = $803;$$ph371 = $802;$$ph372 = $801;
    }
   }
   if ((label|0) == 79) {
    label = 0;
    $804 = HEAP32[$752>>2]|0;
    $805 = $804 | $73;
    $806 = HEAP32[$753>>2]|0;
    $807 = $806 | $74;
    $808 = HEAP32[$754>>2]|0;
    $809 = $808 | $75;
    $810 = $784 & $78;
    $811 = $810 & $805;
    $812 = $789 & $81;
    $813 = $812 & $807;
    $814 = $794 & $84;
    $815 = $814 & $809;
    $$ph370 = $815;$$ph371 = $813;$$ph372 = $811;
   }
   $816 = $$ph371 | $$ph370;
   $817 = $816 | $$ph372;
   $818 = ($817|0)==(0);
   if ($818) {
    $$15$lcssa = $$14378;
   } else {
    $819 = $757 << 7;
    $$15374 = $$14378;$820 = $$ph372;$821 = $$ph371;$822 = $$ph370;
    while(1) {
     $823 = (_first_one012($820,$821,$822)|0);
     $824 = (34156304 + (($823*12)|0)|0);
     $825 = HEAP32[$824>>2]|0;
     $826 = $825 ^ $820;
     $827 = ((34156304 + (($823*12)|0)|0) + 4|0);
     $828 = HEAP32[$827>>2]|0;
     $829 = $828 ^ $821;
     $830 = ((34156304 + (($823*12)|0)|0) + 8|0);
     $831 = HEAP32[$830>>2]|0;
     $832 = $831 ^ $822;
     $833 = ((($__ptree__) + ($823)|0) + 512|0);
     $834 = HEAP8[$833>>0]|0;
     $835 = $834 << 24 >> 24;
     $836 = $835 << 19;
     $837 = $819 | $823;
     $838 = $837 | $836;
     $839 = $838 | 212992;
     $840 = (($$15374) + 4|0);
     HEAP32[$$15374>>2] = $839;
     $841 = $829 | $832;
     $842 = $841 | $826;
     $843 = ($842|0)==(0);
     if ($843) {
      $$15$lcssa = $840;
      break;
     } else {
      $$15374 = $840;$820 = $826;$821 = $829;$822 = $832;
     }
    }
   }
   $755 = ($756|0)==($u2$1377|0);
   if ($755) {
    $$14$lcssa = $$15$lcssa;
    break;
   } else {
    $$14378 = $$15$lcssa;$u2$1377 = $759;
   }
  }
 }
 $844 = (($__ptree__) + 104|0);
 $845 = HEAP32[$844>>2]|0;
 $846 = (($__ptree__) + 108|0);
 $847 = HEAP32[$846>>2]|0;
 $848 = (($__ptree__) + 112|0);
 $849 = HEAP32[$848>>2]|0;
 $850 = $847 | $845;
 $851 = $850 | $849;
 $852 = ($851|0)==(0);
 if ($852) {
  $$16$lcssa = $$14$lcssa;
 } else {
  $853 = (33575024 + (($2*12)|0)|0);
  $854 = ((33575024 + (($2*12)|0)|0) + 4|0);
  $855 = ((33575024 + (($2*12)|0)|0) + 8|0);
  $856 = (33828736 + (($2*1536)|0)|0);
  $857 = ((33828736 + (($2*1536)|0)|0) + 4|0);
  $858 = ((33828736 + (($2*1536)|0)|0) + 8|0);
  $859 = (33704320 + (($2*1536)|0)|0);
  $860 = ((33704320 + (($2*1536)|0)|0) + 4|0);
  $861 = ((33704320 + (($2*1536)|0)|0) + 8|0);
  $862 = (33579904 + (($2*1536)|0)|0);
  $863 = ((33579904 + (($2*1536)|0)|0) + 4|0);
  $864 = ((33579904 + (($2*1536)|0)|0) + 8|0);
  $865 = (33953152 + (($2*1536)|0)|0);
  $866 = ((33953152 + (($2*1536)|0)|0) + 4|0);
  $867 = ((33953152 + (($2*1536)|0)|0) + 8|0);
  $$16364 = $$14$lcssa;$bb_piece$sroa$0$2361 = $845;$bb_piece$sroa$1$2362 = $847;$bb_piece$sroa$2$2363 = $849;
  while(1) {
   $874 = (_first_one012($bb_piece$sroa$0$2361,$bb_piece$sroa$1$2362,$bb_piece$sroa$2$2363)|0);
   $875 = (34156304 + (($874*12)|0)|0);
   $876 = HEAP32[$875>>2]|0;
   $870 = $876 ^ $bb_piece$sroa$0$2361;
   $877 = ((34156304 + (($874*12)|0)|0) + 4|0);
   $878 = HEAP32[$877>>2]|0;
   $869 = $878 ^ $bb_piece$sroa$1$2362;
   $879 = ((34156304 + (($874*12)|0)|0) + 8|0);
   $880 = HEAP32[$879>>2]|0;
   $872 = $880 ^ $bb_piece$sroa$2$2363;
   $881 = HEAP32[$853>>2]|0;
   $882 = HEAP32[$854>>2]|0;
   $883 = HEAP32[$855>>2]|0;
   $884 = ((220518304 + (($2*81)|0)|0) + ($874)|0);
   $885 = HEAP8[$884>>0]|0;
   $886 = $885&255;
   $887 = ($885<<24>>24)==(0);
   if ($887) {
    $903 = $881;$906 = $882;$909 = $883;
   } else {
    $888 = (_is_pinned_on_black_king($__ptree__,$874,$886)|0);
    $889 = ($888|0)==(0);
    if ($889) {
     $903 = $881;$906 = $882;$909 = $883;
    } else {
     if ((($886|0) == 5)) {
      $bb_tmp$sroa$0$0$in$i123 = $862;$bb_tmp$sroa$1$0$in$i122 = $863;$bb_tmp$sroa$2$0$in$i121 = $864;
     } else if ((($886|0) == 2)) {
      $bb_tmp$sroa$0$0$in$i123 = $865;$bb_tmp$sroa$1$0$in$i122 = $866;$bb_tmp$sroa$2$0$in$i121 = $867;
     } else if ((($886|0) == 4)) {
      $bb_tmp$sroa$0$0$in$i123 = $859;$bb_tmp$sroa$1$0$in$i122 = $860;$bb_tmp$sroa$2$0$in$i121 = $861;
     } else {
      $bb_tmp$sroa$0$0$in$i123 = $856;$bb_tmp$sroa$1$0$in$i122 = $857;$bb_tmp$sroa$2$0$in$i121 = $858;
     }
     $bb_tmp$sroa$0$0$i124 = HEAP32[$bb_tmp$sroa$0$0$in$i123>>2]|0;
     $bb_tmp$sroa$1$0$i125 = HEAP32[$bb_tmp$sroa$1$0$in$i122>>2]|0;
     $bb_tmp$sroa$2$0$i126 = HEAP32[$bb_tmp$sroa$2$0$in$i121>>2]|0;
     $890 = $bb_tmp$sroa$0$0$i124 ^ -1;
     $891 = $bb_tmp$sroa$1$0$i125 ^ -1;
     $892 = $bb_tmp$sroa$2$0$i126 ^ -1;
     $893 = $881 | $890;
     $894 = $882 | $891;
     $895 = $883 | $892;
     $903 = $893;$906 = $894;$909 = $895;
    }
   }
   $896 = (33577952 + (($874*12)|0)|0);
   $897 = HEAP32[$896>>2]|0;
   $898 = ((33577952 + (($874*12)|0)|0) + 4|0);
   $899 = HEAP32[$898>>2]|0;
   $900 = ((33577952 + (($874*12)|0)|0) + 8|0);
   $901 = HEAP32[$900>>2]|0;
   $902 = $903 & $78;
   $904 = $902 & $897;
   $905 = $906 & $81;
   $907 = $905 & $899;
   $908 = $909 & $84;
   $910 = $908 & $901;
   $911 = $907 | $910;
   $912 = $911 | $904;
   $913 = ($912|0)==(0);
   if ($913) {
    $$17$lcssa = $$16364;
   } else {
    $914 = $874 << 7;
    $915 = ((($__ptree__) + ($874)|0) + 512|0);
    $$17357 = $$16364;$916 = $904;$917 = $907;$918 = $910;
    while(1) {
     $919 = (_first_one012($916,$917,$918)|0);
     $920 = (34156304 + (($919*12)|0)|0);
     $921 = HEAP32[$920>>2]|0;
     $922 = $921 ^ $916;
     $923 = ((34156304 + (($919*12)|0)|0) + 4|0);
     $924 = HEAP32[$923>>2]|0;
     $925 = $924 ^ $917;
     $926 = ((34156304 + (($919*12)|0)|0) + 8|0);
     $927 = HEAP32[$926>>2]|0;
     $928 = $927 ^ $918;
     $929 = $919 | $914;
     $930 = HEAP8[$915>>0]|0;
     $931 = $930 << 24 >> 24;
     $932 = (0 - ($931))|0;
     $933 = $932 << 15;
     $934 = $929 | $933;
     $935 = ((($__ptree__) + ($919)|0) + 512|0);
     $936 = HEAP8[$935>>0]|0;
     $937 = $936 << 24 >> 24;
     $938 = $937 << 19;
     $939 = $934 | $938;
     $940 = (($$17357) + 4|0);
     HEAP32[$$17357>>2] = $939;
     $941 = $925 | $928;
     $942 = $941 | $922;
     $943 = ($942|0)==(0);
     if ($943) {
      $$17$lcssa = $940;
      break;
     } else {
      $$17357 = $940;$916 = $922;$917 = $925;$918 = $928;
     }
    }
   }
   $868 = $869 | $870;
   $871 = $868 | $872;
   $873 = ($871|0)==(0);
   if ($873) {
    $$16$lcssa = $$17$lcssa;
    break;
   } else {
    $$16364 = $$17$lcssa;$bb_piece$sroa$0$2361 = $870;$bb_piece$sroa$1$2362 = $869;$bb_piece$sroa$2$2363 = $872;
   }
  }
 }
 $944 = (($__ptree__) + 256|0);
 $945 = HEAP32[$944>>2]|0;
 $946 = ($945|0)==(0);
 if ($946) {
  $$18$lcssa = $$16$lcssa;
 } else {
  $947 = ((33575024 + (($2*12)|0)|0) + 8|0);
  $948 = ((33575024 + (($2*12)|0)|0) + 4|0);
  $949 = ((33828736 + (($2*1536)|0)|0) + 4|0);
  $950 = ((33828736 + (($2*1536)|0)|0) + 8|0);
  $951 = ((33704320 + (($2*1536)|0)|0) + 4|0);
  $952 = ((33704320 + (($2*1536)|0)|0) + 8|0);
  $953 = ((33579904 + (($2*1536)|0)|0) + 4|0);
  $954 = ((33579904 + (($2*1536)|0)|0) + 8|0);
  $955 = ((33953152 + (($2*1536)|0)|0) + 4|0);
  $956 = ((33953152 + (($2*1536)|0)|0) + 8|0);
  $$18351 = $$16$lcssa;$u2$2350 = $945;
  while(1) {
   $959 = (_first_one2($u2$2350)|0);
   $960 = ((34156304 + (($959*12)|0)|0) + 8|0);
   $958 = HEAP32[$960>>2]|0;
   $961 = $958 ^ $u2$2350;
   $962 = HEAP32[$947>>2]|0;
   $963 = HEAP32[$948>>2]|0;
   $964 = ((220518304 + (($2*81)|0)|0) + ($959)|0);
   $965 = HEAP8[$964>>0]|0;
   $966 = $965&255;
   $967 = ($965<<24>>24)==(0);
   if ($967) {
    $977 = $962;$982 = $963;
   } else {
    $968 = (_is_pinned_on_black_king($__ptree__,$959,$966)|0);
    $969 = ($968|0)==(0);
    if ($969) {
     $977 = $962;$982 = $963;
    } else {
     if ((($966|0) == 5)) {
      $bb_tmp$sroa$1$0$in$i115 = $953;$bb_tmp$sroa$2$0$in$i114 = $954;
     } else if ((($966|0) == 2)) {
      $bb_tmp$sroa$1$0$in$i115 = $955;$bb_tmp$sroa$2$0$in$i114 = $956;
     } else if ((($966|0) == 4)) {
      $bb_tmp$sroa$1$0$in$i115 = $951;$bb_tmp$sroa$2$0$in$i114 = $952;
     } else {
      $bb_tmp$sroa$1$0$in$i115 = $949;$bb_tmp$sroa$2$0$in$i114 = $950;
     }
     $bb_tmp$sroa$1$0$i118 = HEAP32[$bb_tmp$sroa$1$0$in$i115>>2]|0;
     $bb_tmp$sroa$2$0$i119 = HEAP32[$bb_tmp$sroa$2$0$in$i114>>2]|0;
     $970 = $bb_tmp$sroa$1$0$i118 ^ -1;
     $971 = $bb_tmp$sroa$2$0$i119 ^ -1;
     $972 = $963 | $970;
     $973 = $962 | $971;
     $977 = $973;$982 = $972;
    }
   }
   $974 = ((33576976 + (($959*12)|0)|0) + 8|0);
   $975 = HEAP32[$974>>2]|0;
   $976 = $977 & $84;
   $978 = $976 & $975;
   $979 = ((33576976 + (($959*12)|0)|0) + 4|0);
   $980 = HEAP32[$979>>2]|0;
   $981 = $982 & $81;
   $983 = $981 & $980;
   $984 = $983 | $978;
   $985 = ($984|0)==(0);
   if ($985) {
    $$19$lcssa = $$18351;
   } else {
    $986 = $959 << 7;
    $$19346 = $$18351;$987 = $983;$988 = $978;
    while(1) {
     $989 = (_first_one12($987,$988)|0);
     $990 = ((34156304 + (($989*12)|0)|0) + 4|0);
     $991 = HEAP32[$990>>2]|0;
     $992 = $991 ^ $987;
     $993 = ((34156304 + (($989*12)|0)|0) + 8|0);
     $994 = HEAP32[$993>>2]|0;
     $995 = $994 ^ $988;
     $996 = ((($__ptree__) + ($989)|0) + 512|0);
     $997 = HEAP8[$996>>0]|0;
     $998 = $997 << 24 >> 24;
     $999 = $998 << 19;
     $1000 = $986 | $989;
     $1001 = $1000 | $999;
     $1002 = $1001 | 147456;
     $1003 = (($$19346) + 4|0);
     HEAP32[$$19346>>2] = $1002;
     $1004 = $992 | $995;
     $1005 = ($1004|0)==(0);
     if ($1005) {
      $$19$lcssa = $1003;
      break;
     } else {
      $$19346 = $1003;$987 = $992;$988 = $995;
     }
    }
   }
   $957 = ($958|0)==($u2$2350|0);
   if ($957) {
    $$18$lcssa = $$19$lcssa;
    break;
   } else {
    $$18351 = $$19$lcssa;$u2$2350 = $961;
   }
  }
 }
 $1006 = (($__ptree__) + 252|0);
 $1007 = HEAP32[$1006>>2]|0;
 $1008 = $1007 & 511;
 $1009 = ($1008|0)==(0);
 if ($1009) {
  $$20$lcssa = $$18$lcssa;$1054 = $1007;
 } else {
  $1010 = ((33575024 + (($2*12)|0)|0) + 8|0);
  $1011 = ((33828736 + (($2*1536)|0)|0) + 8|0);
  $1012 = ((33704320 + (($2*1536)|0)|0) + 8|0);
  $1013 = ((33579904 + (($2*1536)|0)|0) + 8|0);
  $1014 = ((33953152 + (($2*1536)|0)|0) + 8|0);
  $$20340 = $$18$lcssa;$u1$2339 = $1008;
  while(1) {
   $1017 = (_first_one1($u1$2339)|0);
   $1018 = ((34156304 + (($1017*12)|0)|0) + 4|0);
   $1016 = HEAP32[$1018>>2]|0;
   $1019 = $1016 ^ $u1$2339;
   $1020 = HEAP32[$1010>>2]|0;
   $1021 = ((220518304 + (($2*81)|0)|0) + ($1017)|0);
   $1022 = HEAP8[$1021>>0]|0;
   $1023 = $1022&255;
   $1024 = ($1022<<24>>24)==(0);
   if ($1024) {
    $1032 = $1020;
   } else {
    $1025 = (_is_pinned_on_black_king($__ptree__,$1017,$1023)|0);
    $1026 = ($1025|0)==(0);
    if ($1026) {
     $1032 = $1020;
    } else {
     if ((($1023|0) == 5)) {
      $bb_tmp$sroa$2$0$in$i107 = $1013;
     } else if ((($1023|0) == 2)) {
      $bb_tmp$sroa$2$0$in$i107 = $1014;
     } else if ((($1023|0) == 4)) {
      $bb_tmp$sroa$2$0$in$i107 = $1012;
     } else {
      $bb_tmp$sroa$2$0$in$i107 = $1011;
     }
     $bb_tmp$sroa$2$0$i112 = HEAP32[$bb_tmp$sroa$2$0$in$i107>>2]|0;
     $1027 = $bb_tmp$sroa$2$0$i112 ^ -1;
     $1028 = $1020 | $1027;
     $1032 = $1028;
    }
   }
   $1029 = ((33576976 + (($1017*12)|0)|0) + 8|0);
   $1030 = HEAP32[$1029>>2]|0;
   $1031 = $1032 & $84;
   $1033 = $1031 & $1030;
   $1034 = ($1033|0)==(0);
   if ($1034) {
    $$21$lcssa = $$20340;
   } else {
    $1035 = $1017 << 7;
    $$21335 = $$20340;$1036 = $1033;
    while(1) {
     $1037 = (_first_one2($1036)|0);
     $1038 = ((34156304 + (($1037*12)|0)|0) + 8|0);
     $1039 = HEAP32[$1038>>2]|0;
     $1040 = $1039 ^ $1036;
     $1041 = ((($__ptree__) + ($1037)|0) + 512|0);
     $1042 = HEAP8[$1041>>0]|0;
     $1043 = $1042 << 24 >> 24;
     $1044 = $1043 << 19;
     $1045 = $1035 | $1037;
     $1046 = $1045 | $1044;
     $1047 = $1046 | 147456;
     $1048 = (($$21335) + 4|0);
     HEAP32[$$21335>>2] = $1047;
     $1049 = ($1039|0)==($1036|0);
     if ($1049) {
      $$21$lcssa = $1048;
      break;
     } else {
      $$21335 = $1048;$1036 = $1040;
     }
    }
   }
   $1015 = ($1016|0)==($u1$2339|0);
   if ($1015) {
    break;
   } else {
    $$20340 = $$21$lcssa;$u1$2339 = $1019;
   }
  }
  $$pre = HEAP32[$1006>>2]|0;
  $$20$lcssa = $$21$lcssa;$1054 = $$pre;
 }
 $1050 = (($__ptree__) + 248|0);
 $1051 = HEAP32[$1050>>2]|0;
 $1052 = HEAP32[$944>>2]|0;
 $1053 = $1054 | $1051;
 $1055 = $1053 | $1052;
 $1056 = ($1055|0)==(0);
 if ($1056) {
  $$22$lcssa = $$20$lcssa;
 } else {
  $1057 = (33574048 + (($2*12)|0)|0);
  $1058 = ((33574048 + (($2*12)|0)|0) + 4|0);
  $1059 = ((33574048 + (($2*12)|0)|0) + 8|0);
  $1060 = (33828736 + (($2*1536)|0)|0);
  $1061 = ((33828736 + (($2*1536)|0)|0) + 4|0);
  $1062 = ((33828736 + (($2*1536)|0)|0) + 8|0);
  $1063 = (33704320 + (($2*1536)|0)|0);
  $1064 = ((33704320 + (($2*1536)|0)|0) + 4|0);
  $1065 = ((33704320 + (($2*1536)|0)|0) + 8|0);
  $1066 = (33579904 + (($2*1536)|0)|0);
  $1067 = ((33579904 + (($2*1536)|0)|0) + 4|0);
  $1068 = ((33579904 + (($2*1536)|0)|0) + 8|0);
  $1069 = (33953152 + (($2*1536)|0)|0);
  $1070 = ((33953152 + (($2*1536)|0)|0) + 4|0);
  $1071 = ((33953152 + (($2*1536)|0)|0) + 8|0);
  $$22329 = $$20$lcssa;$bb_piece$sroa$0$3326 = $1051;$bb_piece$sroa$1$3327 = $1054;$bb_piece$sroa$2$3328 = $1052;
  while(1) {
   $1078 = (_first_one012($bb_piece$sroa$0$3326,$bb_piece$sroa$1$3327,$bb_piece$sroa$2$3328)|0);
   $1079 = (34156304 + (($1078*12)|0)|0);
   $1080 = HEAP32[$1079>>2]|0;
   $1074 = $1080 ^ $bb_piece$sroa$0$3326;
   $1081 = ((34156304 + (($1078*12)|0)|0) + 4|0);
   $1082 = HEAP32[$1081>>2]|0;
   $1073 = $1082 ^ $bb_piece$sroa$1$3327;
   $1083 = ((34156304 + (($1078*12)|0)|0) + 8|0);
   $1084 = HEAP32[$1083>>2]|0;
   $1076 = $1084 ^ $bb_piece$sroa$2$3328;
   $1085 = HEAP32[$1057>>2]|0;
   $1086 = HEAP32[$1058>>2]|0;
   $1087 = HEAP32[$1059>>2]|0;
   $1088 = ((220518304 + (($2*81)|0)|0) + ($1078)|0);
   $1089 = HEAP8[$1088>>0]|0;
   $1090 = $1089&255;
   $1091 = ($1089<<24>>24)==(0);
   if ($1091) {
    $1107 = $1085;$1110 = $1086;$1113 = $1087;
   } else {
    $1092 = (_is_pinned_on_black_king($__ptree__,$1078,$1090)|0);
    $1093 = ($1092|0)==(0);
    if ($1093) {
     $1107 = $1085;$1110 = $1086;$1113 = $1087;
    } else {
     if ((($1090|0) == 5)) {
      $bb_tmp$sroa$0$0$in$i102 = $1066;$bb_tmp$sroa$1$0$in$i101 = $1067;$bb_tmp$sroa$2$0$in$i100 = $1068;
     } else if ((($1090|0) == 2)) {
      $bb_tmp$sroa$0$0$in$i102 = $1069;$bb_tmp$sroa$1$0$in$i101 = $1070;$bb_tmp$sroa$2$0$in$i100 = $1071;
     } else if ((($1090|0) == 4)) {
      $bb_tmp$sroa$0$0$in$i102 = $1063;$bb_tmp$sroa$1$0$in$i101 = $1064;$bb_tmp$sroa$2$0$in$i100 = $1065;
     } else {
      $bb_tmp$sroa$0$0$in$i102 = $1060;$bb_tmp$sroa$1$0$in$i101 = $1061;$bb_tmp$sroa$2$0$in$i100 = $1062;
     }
     $bb_tmp$sroa$0$0$i103 = HEAP32[$bb_tmp$sroa$0$0$in$i102>>2]|0;
     $bb_tmp$sroa$1$0$i104 = HEAP32[$bb_tmp$sroa$1$0$in$i101>>2]|0;
     $bb_tmp$sroa$2$0$i105 = HEAP32[$bb_tmp$sroa$2$0$in$i100>>2]|0;
     $1094 = $bb_tmp$sroa$0$0$i103 ^ -1;
     $1095 = $bb_tmp$sroa$1$0$i104 ^ -1;
     $1096 = $bb_tmp$sroa$2$0$i105 ^ -1;
     $1097 = $1085 | $1094;
     $1098 = $1086 | $1095;
     $1099 = $1087 | $1096;
     $1107 = $1097;$1110 = $1098;$1113 = $1099;
    }
   }
   $1100 = (33576976 + (($1078*12)|0)|0);
   $1101 = HEAP32[$1100>>2]|0;
   $1102 = ((33576976 + (($1078*12)|0)|0) + 4|0);
   $1103 = HEAP32[$1102>>2]|0;
   $1104 = ((33576976 + (($1078*12)|0)|0) + 8|0);
   $1105 = HEAP32[$1104>>2]|0;
   $1106 = $1107 & $78;
   $1108 = $1106 & $1101;
   $1109 = $1110 & $81;
   $1111 = $1109 & $1103;
   $1112 = $1113 & $84;
   $1114 = $1112 & $1105;
   $1115 = $1111 | $1114;
   $1116 = $1115 | $1108;
   $1117 = ($1116|0)==(0);
   if ($1117) {
    $$23$lcssa = $$22329;
   } else {
    $1118 = $1078 << 7;
    $$23322 = $$22329;$1119 = $1108;$1120 = $1111;$1121 = $1114;
    while(1) {
     $1122 = (_first_one012($1119,$1120,$1121)|0);
     $1123 = (34156304 + (($1122*12)|0)|0);
     $1124 = HEAP32[$1123>>2]|0;
     $1125 = $1124 ^ $1119;
     $1126 = ((34156304 + (($1122*12)|0)|0) + 4|0);
     $1127 = HEAP32[$1126>>2]|0;
     $1128 = $1127 ^ $1120;
     $1129 = ((34156304 + (($1122*12)|0)|0) + 8|0);
     $1130 = HEAP32[$1129>>2]|0;
     $1131 = $1130 ^ $1121;
     $1132 = ((($__ptree__) + ($1122)|0) + 512|0);
     $1133 = HEAP8[$1132>>0]|0;
     $1134 = $1133 << 24 >> 24;
     $1135 = $1134 << 19;
     $1136 = $1118 | $1122;
     $1137 = $1136 | $1135;
     $1138 = $1137 | 131072;
     $1139 = (($$23322) + 4|0);
     HEAP32[$$23322>>2] = $1138;
     $1140 = $1128 | $1131;
     $1141 = $1140 | $1125;
     $1142 = ($1141|0)==(0);
     if ($1142) {
      $$23$lcssa = $1139;
      break;
     } else {
      $$23322 = $1139;$1119 = $1125;$1120 = $1128;$1121 = $1131;
     }
    }
   }
   $1072 = $1073 | $1074;
   $1075 = $1072 | $1076;
   $1077 = ($1075|0)==(0);
   if ($1077) {
    $$22$lcssa = $$23$lcssa;
    break;
   } else {
    $$22329 = $$23$lcssa;$bb_piece$sroa$0$3326 = $1074;$bb_piece$sroa$1$3327 = $1073;$bb_piece$sroa$2$3328 = $1076;
   }
  }
 }
 $1143 = (($__ptree__) + 232|0);
 $1144 = HEAP32[$1143>>2]|0;
 $1145 = (($__ptree__) + 228|0);
 $1146 = HEAP32[$1145>>2]|0;
 $1147 = $1146 & 262143;
 $1148 = $1144 | $1147;
 $1149 = ($1148|0)==(0);
 if ($1149) {
  $$24$lcssa = $$22$lcssa;$1197 = $1146;
 } else {
  $1150 = ((33575024 + (($2*12)|0)|0) + 8|0);
  $1151 = ((33828736 + (($2*1536)|0)|0) + 8|0);
  $1152 = ((33704320 + (($2*1536)|0)|0) + 8|0);
  $1153 = ((33579904 + (($2*1536)|0)|0) + 8|0);
  $1154 = ((33953152 + (($2*1536)|0)|0) + 8|0);
  $$24316 = $$22$lcssa;$u1$3314 = $1147;$u2$3315 = $1144;
  while(1) {
   $1159 = (_first_one12($u1$3314,$u2$3315)|0);
   $1160 = ((34156304 + (($1159*12)|0)|0) + 8|0);
   $1161 = HEAP32[$1160>>2]|0;
   $1156 = $1161 ^ $u2$3315;
   $1162 = ((34156304 + (($1159*12)|0)|0) + 4|0);
   $1163 = HEAP32[$1162>>2]|0;
   $1157 = $1163 ^ $u1$3314;
   $1164 = HEAP32[$1150>>2]|0;
   $1165 = ((220518304 + (($2*81)|0)|0) + ($1159)|0);
   $1166 = HEAP8[$1165>>0]|0;
   $1167 = $1166&255;
   $1168 = ($1166<<24>>24)==(0);
   if ($1168) {
    $1176 = $1164;
   } else {
    $1169 = (_is_pinned_on_black_king($__ptree__,$1159,$1167)|0);
    $1170 = ($1169|0)==(0);
    if ($1170) {
     $1176 = $1164;
    } else {
     if ((($1167|0) == 5)) {
      $bb_tmp$sroa$2$0$in$i93 = $1153;
     } else if ((($1167|0) == 2)) {
      $bb_tmp$sroa$2$0$in$i93 = $1154;
     } else if ((($1167|0) == 4)) {
      $bb_tmp$sroa$2$0$in$i93 = $1152;
     } else {
      $bb_tmp$sroa$2$0$in$i93 = $1151;
     }
     $bb_tmp$sroa$2$0$i98 = HEAP32[$bb_tmp$sroa$2$0$in$i93>>2]|0;
     $1171 = $bb_tmp$sroa$2$0$i98 ^ -1;
     $1172 = $1164 | $1171;
     $1176 = $1172;
    }
   }
   $1173 = ((33576000 + (($1159*12)|0)|0) + 8|0);
   $1174 = HEAP32[$1173>>2]|0;
   $1175 = $1176 & $84;
   $1177 = $1175 & $1174;
   $1178 = ($1177|0)==(0);
   if ($1178) {
    $$25$lcssa = $$24316;
   } else {
    $1179 = $1159 << 7;
    $$25310 = $$24316;$1180 = $1177;
    while(1) {
     $1181 = (_first_one2($1180)|0);
     $1182 = ((34156304 + (($1181*12)|0)|0) + 8|0);
     $1183 = HEAP32[$1182>>2]|0;
     $1184 = $1183 ^ $1180;
     $1185 = ((($__ptree__) + ($1181)|0) + 512|0);
     $1186 = HEAP8[$1185>>0]|0;
     $1187 = $1186 << 24 >> 24;
     $1188 = $1187 << 19;
     $1189 = $1179 | $1181;
     $1190 = $1189 | $1188;
     $1191 = $1190 | 114688;
     $1192 = (($$25310) + 4|0);
     HEAP32[$$25310>>2] = $1191;
     $1193 = ($1183|0)==($1180|0);
     if ($1193) {
      $$25$lcssa = $1192;
      break;
     } else {
      $$25310 = $1192;$1180 = $1184;
     }
    }
   }
   $1155 = $1156 | $1157;
   $1158 = ($1155|0)==(0);
   if ($1158) {
    break;
   } else {
    $$24316 = $$25$lcssa;$u1$3314 = $1157;$u2$3315 = $1156;
   }
  }
  $$pre621 = HEAP32[$1145>>2]|0;
  $$24$lcssa = $$25$lcssa;$1197 = $$pre621;
 }
 $1194 = (($__ptree__) + 224|0);
 $1195 = HEAP32[$1194>>2]|0;
 $1196 = $1197 & 134217216;
 $1198 = $1196 | $1195;
 $1199 = ($1198|0)==(0);
 if ($1199) {
  $$26$lcssa = $$24$lcssa;
 } else {
  $1200 = (33573072 + (($2*12)|0)|0);
  $1201 = ((33573072 + (($2*12)|0)|0) + 4|0);
  $1202 = ((33573072 + (($2*12)|0)|0) + 8|0);
  $1203 = (33828736 + (($2*1536)|0)|0);
  $1204 = ((33828736 + (($2*1536)|0)|0) + 4|0);
  $1205 = ((33828736 + (($2*1536)|0)|0) + 8|0);
  $1206 = (33704320 + (($2*1536)|0)|0);
  $1207 = ((33704320 + (($2*1536)|0)|0) + 4|0);
  $1208 = ((33704320 + (($2*1536)|0)|0) + 8|0);
  $1209 = (33579904 + (($2*1536)|0)|0);
  $1210 = ((33579904 + (($2*1536)|0)|0) + 4|0);
  $1211 = ((33579904 + (($2*1536)|0)|0) + 8|0);
  $1212 = (33953152 + (($2*1536)|0)|0);
  $1213 = ((33953152 + (($2*1536)|0)|0) + 4|0);
  $1214 = ((33953152 + (($2*1536)|0)|0) + 8|0);
  $$26304 = $$24$lcssa;$u0$2302 = $1195;$u1$4303 = $1196;
  while(1) {
   $1219 = (_first_one01($u0$2302,$u1$4303)|0);
   $1220 = (34156304 + (($1219*12)|0)|0);
   $1221 = HEAP32[$1220>>2]|0;
   $1217 = $1221 ^ $u0$2302;
   $1222 = ((34156304 + (($1219*12)|0)|0) + 4|0);
   $1223 = HEAP32[$1222>>2]|0;
   $1216 = $1223 ^ $u1$4303;
   $1224 = HEAP32[$1200>>2]|0;
   $1225 = HEAP32[$1201>>2]|0;
   $1226 = HEAP32[$1202>>2]|0;
   $1227 = ((220518304 + (($2*81)|0)|0) + ($1219)|0);
   $1228 = HEAP8[$1227>>0]|0;
   $1229 = $1228&255;
   $1230 = ($1228<<24>>24)==(0);
   if ($1230) {
    $1246 = $1224;$1249 = $1225;$1252 = $1226;
   } else {
    $1231 = (_is_pinned_on_black_king($__ptree__,$1219,$1229)|0);
    $1232 = ($1231|0)==(0);
    if ($1232) {
     $1246 = $1224;$1249 = $1225;$1252 = $1226;
    } else {
     if ((($1229|0) == 5)) {
      $bb_tmp$sroa$0$0$in$i88 = $1209;$bb_tmp$sroa$1$0$in$i87 = $1210;$bb_tmp$sroa$2$0$in$i86 = $1211;
     } else if ((($1229|0) == 2)) {
      $bb_tmp$sroa$0$0$in$i88 = $1212;$bb_tmp$sroa$1$0$in$i87 = $1213;$bb_tmp$sroa$2$0$in$i86 = $1214;
     } else if ((($1229|0) == 4)) {
      $bb_tmp$sroa$0$0$in$i88 = $1206;$bb_tmp$sroa$1$0$in$i87 = $1207;$bb_tmp$sroa$2$0$in$i86 = $1208;
     } else {
      $bb_tmp$sroa$0$0$in$i88 = $1203;$bb_tmp$sroa$1$0$in$i87 = $1204;$bb_tmp$sroa$2$0$in$i86 = $1205;
     }
     $bb_tmp$sroa$0$0$i89 = HEAP32[$bb_tmp$sroa$0$0$in$i88>>2]|0;
     $bb_tmp$sroa$1$0$i90 = HEAP32[$bb_tmp$sroa$1$0$in$i87>>2]|0;
     $bb_tmp$sroa$2$0$i91 = HEAP32[$bb_tmp$sroa$2$0$in$i86>>2]|0;
     $1233 = $bb_tmp$sroa$0$0$i89 ^ -1;
     $1234 = $bb_tmp$sroa$1$0$i90 ^ -1;
     $1235 = $bb_tmp$sroa$2$0$i91 ^ -1;
     $1236 = $1224 | $1233;
     $1237 = $1225 | $1234;
     $1238 = $1226 | $1235;
     $1246 = $1236;$1249 = $1237;$1252 = $1238;
    }
   }
   $1239 = (33576000 + (($1219*12)|0)|0);
   $1240 = HEAP32[$1239>>2]|0;
   $1241 = ((33576000 + (($1219*12)|0)|0) + 4|0);
   $1242 = HEAP32[$1241>>2]|0;
   $1243 = ((33576000 + (($1219*12)|0)|0) + 8|0);
   $1244 = HEAP32[$1243>>2]|0;
   $1245 = $1246 & $78;
   $1247 = $1245 & $1240;
   $1248 = $1249 & $81;
   $1250 = $1248 & $1242;
   $1251 = $1252 & $84;
   $1253 = $1251 & $1244;
   $1254 = $1250 | $1253;
   $1255 = $1254 | $1247;
   $1256 = ($1255|0)==(0);
   if ($1256) {
    $$27$lcssa = $$26304;
   } else {
    $1257 = $1219 << 7;
    $$27298 = $$26304;$1258 = $1247;$1259 = $1250;$1260 = $1253;
    while(1) {
     $1261 = (_first_one012($1258,$1259,$1260)|0);
     $1262 = (34156304 + (($1261*12)|0)|0);
     $1263 = HEAP32[$1262>>2]|0;
     $1264 = $1263 ^ $1258;
     $1265 = ((34156304 + (($1261*12)|0)|0) + 4|0);
     $1266 = HEAP32[$1265>>2]|0;
     $1267 = $1266 ^ $1259;
     $1268 = ((34156304 + (($1261*12)|0)|0) + 8|0);
     $1269 = HEAP32[$1268>>2]|0;
     $1270 = $1269 ^ $1260;
     $1271 = ((($__ptree__) + ($1261)|0) + 512|0);
     $1272 = HEAP8[$1271>>0]|0;
     $1273 = $1272 << 24 >> 24;
     $1274 = $1273 << 19;
     $1275 = $1257 | $1261;
     $1276 = $1275 | $1274;
     $1277 = $1276 | 98304;
     $1278 = (($$27298) + 4|0);
     HEAP32[$$27298>>2] = $1277;
     $1279 = $1267 | $1270;
     $1280 = $1279 | $1264;
     $1281 = ($1280|0)==(0);
     if ($1281) {
      $$27$lcssa = $1278;
      break;
     } else {
      $$27298 = $1278;$1258 = $1264;$1259 = $1267;$1260 = $1270;
     }
    }
   }
   $1215 = $1216 | $1217;
   $1218 = ($1215|0)==(0);
   if ($1218) {
    $$26$lcssa = $$27$lcssa;
    break;
   } else {
    $$26304 = $$27$lcssa;$u0$2302 = $1217;$u1$4303 = $1216;
   }
  }
 }
 $1282 = (($__ptree__) + 200|0);
 $1283 = HEAP32[$1282>>2]|0;
 $1284 = (($__ptree__) + 204|0);
 $1285 = HEAP32[$1284>>2]|0;
 $1286 = (($__ptree__) + 208|0);
 $1287 = HEAP32[$1286>>2]|0;
 $1288 = $1285 | $1283;
 $1289 = $1288 | $1287;
 $1290 = ($1289|0)==(0);
 if ($1290) {
  $$28$lcssa = $$26$lcssa;$1391 = $1285;$1392 = $1283;
 } else {
  $1291 = ((33575024 + (($2*12)|0)|0) + 8|0);
  $1292 = (33828736 + (($2*1536)|0)|0);
  $1293 = ((33828736 + (($2*1536)|0)|0) + 4|0);
  $1294 = ((33828736 + (($2*1536)|0)|0) + 8|0);
  $1295 = (33704320 + (($2*1536)|0)|0);
  $1296 = ((33704320 + (($2*1536)|0)|0) + 4|0);
  $1297 = ((33704320 + (($2*1536)|0)|0) + 8|0);
  $1298 = (33579904 + (($2*1536)|0)|0);
  $1299 = ((33579904 + (($2*1536)|0)|0) + 4|0);
  $1300 = ((33579904 + (($2*1536)|0)|0) + 8|0);
  $1301 = (33953152 + (($2*1536)|0)|0);
  $1302 = ((33953152 + (($2*1536)|0)|0) + 4|0);
  $1303 = ((33953152 + (($2*1536)|0)|0) + 8|0);
  $$28292 = $$26$lcssa;$bb_piece$sroa$0$4289 = $1283;$bb_piece$sroa$1$4290 = $1285;$bb_piece$sroa$2$4291 = $1287;
  while(1) {
   $1310 = (_first_one012($bb_piece$sroa$0$4289,$bb_piece$sroa$1$4290,$bb_piece$sroa$2$4291)|0);
   $1311 = (34156304 + (($1310*12)|0)|0);
   $1312 = HEAP32[$1311>>2]|0;
   $1306 = $1312 ^ $bb_piece$sroa$0$4289;
   $1313 = ((34156304 + (($1310*12)|0)|0) + 4|0);
   $1314 = HEAP32[$1313>>2]|0;
   $1305 = $1314 ^ $bb_piece$sroa$1$4290;
   $1315 = ((34156304 + (($1310*12)|0)|0) + 8|0);
   $1316 = HEAP32[$1315>>2]|0;
   $1308 = $1316 ^ $bb_piece$sroa$2$4291;
   $1317 = HEAP32[$1291>>2]|0;
   $1318 = ((220518304 + (($2*81)|0)|0) + ($1310)|0);
   $1319 = HEAP8[$1318>>0]|0;
   $1320 = $1319&255;
   $1321 = ($1319<<24>>24)==(0);
   if ($1321) {
    $1351 = 0;$1355 = 0;$1359 = $1317;
   } else {
    $1322 = (_is_pinned_on_black_king($__ptree__,$1310,$1320)|0);
    $1323 = ($1322|0)==(0);
    if ($1323) {
     $1351 = 0;$1355 = 0;$1359 = $1317;
    } else {
     if ((($1320|0) == 5)) {
      $bb_tmp$sroa$0$0$in$i81 = $1298;$bb_tmp$sroa$1$0$in$i80 = $1299;$bb_tmp$sroa$2$0$in$i79 = $1300;
     } else if ((($1320|0) == 2)) {
      $bb_tmp$sroa$0$0$in$i81 = $1301;$bb_tmp$sroa$1$0$in$i80 = $1302;$bb_tmp$sroa$2$0$in$i79 = $1303;
     } else if ((($1320|0) == 4)) {
      $bb_tmp$sroa$0$0$in$i81 = $1295;$bb_tmp$sroa$1$0$in$i80 = $1296;$bb_tmp$sroa$2$0$in$i79 = $1297;
     } else {
      $bb_tmp$sroa$0$0$in$i81 = $1292;$bb_tmp$sroa$1$0$in$i80 = $1293;$bb_tmp$sroa$2$0$in$i79 = $1294;
     }
     $bb_tmp$sroa$0$0$i82 = HEAP32[$bb_tmp$sroa$0$0$in$i81>>2]|0;
     $bb_tmp$sroa$1$0$i83 = HEAP32[$bb_tmp$sroa$1$0$in$i80>>2]|0;
     $bb_tmp$sroa$2$0$i84 = HEAP32[$bb_tmp$sroa$2$0$in$i79>>2]|0;
     $1324 = $bb_tmp$sroa$0$0$i82 ^ -1;
     $1325 = $bb_tmp$sroa$1$0$i83 ^ -1;
     $1326 = $bb_tmp$sroa$2$0$i84 ^ -1;
     $1327 = $1317 | $1326;
     $1351 = $1324;$1355 = $1325;$1359 = $1327;
    }
   }
   $1328 = ((33572424 + ($1310<<3)|0) + 2|0);
   $1329 = HEAP8[$1328>>0]|0;
   $1330 = $1329&255;
   $1331 = ((($__ptree__) + ($1330<<2)|0) + 32|0);
   $1332 = HEAP32[$1331>>2]|0;
   $1333 = ((33572424 + ($1310<<3)|0) + 3|0);
   $1334 = HEAP8[$1333>>0]|0;
   $1335 = $1334&255;
   $1336 = $1332 >>> $1335;
   $1337 = $1336 & 127;
   $1338 = ((33953152 + (($1310*1536)|0)|0) + (($1337*12)|0)|0);
   $1339 = HEAP32[$1338>>2]|0;
   $1340 = (((33953152 + (($1310*1536)|0)|0) + (($1337*12)|0)|0) + 4|0);
   $1341 = HEAP32[$1340>>2]|0;
   $1342 = (((33953152 + (($1310*1536)|0)|0) + (($1337*12)|0)|0) + 8|0);
   $1343 = HEAP32[$1342>>2]|0;
   $1344 = (34160208 + (($1310*12)|0)|0);
   $1345 = HEAP32[$1344>>2]|0;
   $1346 = ((34160208 + (($1310*12)|0)|0) + 4|0);
   $1347 = HEAP32[$1346>>2]|0;
   $1348 = ((34160208 + (($1310*12)|0)|0) + 8|0);
   $1349 = HEAP32[$1348>>2]|0;
   $1350 = $1351 & $78;
   $1352 = $1350 & $1339;
   $1353 = $1352 & $1345;
   $1354 = $1355 & $81;
   $1356 = $1354 & $1341;
   $1357 = $1356 & $1347;
   $1358 = $1359 & $84;
   $1360 = $1358 & $1343;
   $1361 = $1360 & $1349;
   $1362 = $1357 | $1361;
   $1363 = $1362 | $1353;
   $1364 = ($1363|0)==(0);
   if ($1364) {
    $$29$lcssa = $$28292;
   } else {
    $1365 = $1310 << 7;
    $$29285 = $$28292;$1366 = $1353;$1367 = $1357;$1368 = $1361;
    while(1) {
     $1369 = (_first_one012($1366,$1367,$1368)|0);
     $1370 = (34156304 + (($1369*12)|0)|0);
     $1371 = HEAP32[$1370>>2]|0;
     $1372 = $1371 ^ $1366;
     $1373 = ((34156304 + (($1369*12)|0)|0) + 4|0);
     $1374 = HEAP32[$1373>>2]|0;
     $1375 = $1374 ^ $1367;
     $1376 = ((34156304 + (($1369*12)|0)|0) + 8|0);
     $1377 = HEAP32[$1376>>2]|0;
     $1378 = $1377 ^ $1368;
     $1379 = ((($__ptree__) + ($1369)|0) + 512|0);
     $1380 = HEAP8[$1379>>0]|0;
     $1381 = $1380 << 24 >> 24;
     $1382 = $1381 << 19;
     $1383 = $1365 | $1369;
     $1384 = $1383 | $1382;
     $1385 = $1384 | 81920;
     $1386 = (($$29285) + 4|0);
     HEAP32[$$29285>>2] = $1385;
     $1387 = $1375 | $1378;
     $1388 = $1387 | $1372;
     $1389 = ($1388|0)==(0);
     if ($1389) {
      $$29$lcssa = $1386;
      break;
     } else {
      $$29285 = $1386;$1366 = $1372;$1367 = $1375;$1368 = $1378;
     }
    }
   }
   $1304 = $1305 | $1306;
   $1307 = $1304 | $1308;
   $1309 = ($1307|0)==(0);
   if ($1309) {
    break;
   } else {
    $$28292 = $$29$lcssa;$bb_piece$sroa$0$4289 = $1306;$bb_piece$sroa$1$4290 = $1305;$bb_piece$sroa$2$4291 = $1308;
   }
  }
  $$pre622 = HEAP32[$1282>>2]|0;
  $$pre623 = HEAP32[$1284>>2]|0;
  $$28$lcssa = $$29$lcssa;$1391 = $$pre623;$1392 = $$pre622;
 }
 $1390 = $1391 | $1392;
 $1393 = ($1390|0)==(0);
 if ($1393) {
  $$30$lcssa = $$28$lcssa;
 } else {
  $1394 = (34161184 + (($2*12)|0)|0);
  $1395 = ((34161184 + (($2*12)|0)|0) + 4|0);
  $1396 = ((34161184 + (($2*12)|0)|0) + 8|0);
  $1397 = $84 & 133955584;
  $1398 = (33828736 + (($2*1536)|0)|0);
  $1399 = ((33828736 + (($2*1536)|0)|0) + 4|0);
  $1400 = ((33828736 + (($2*1536)|0)|0) + 8|0);
  $1401 = (33704320 + (($2*1536)|0)|0);
  $1402 = ((33704320 + (($2*1536)|0)|0) + 4|0);
  $1403 = ((33704320 + (($2*1536)|0)|0) + 8|0);
  $1404 = (33579904 + (($2*1536)|0)|0);
  $1405 = ((33579904 + (($2*1536)|0)|0) + 4|0);
  $1406 = ((33579904 + (($2*1536)|0)|0) + 8|0);
  $1407 = (33953152 + (($2*1536)|0)|0);
  $1408 = ((33953152 + (($2*1536)|0)|0) + 4|0);
  $1409 = ((33953152 + (($2*1536)|0)|0) + 8|0);
  $$30279 = $$28$lcssa;$u0$3277 = $1392;$u1$5278 = $1391;
  while(1) {
   $1414 = (_first_one01($u0$3277,$u1$5278)|0);
   $1415 = (34156304 + (($1414*12)|0)|0);
   $1416 = HEAP32[$1415>>2]|0;
   $1412 = $1416 ^ $u0$3277;
   $1417 = ((34156304 + (($1414*12)|0)|0) + 4|0);
   $1418 = HEAP32[$1417>>2]|0;
   $1411 = $1418 ^ $u1$5278;
   $1419 = ((220518304 + (($2*81)|0)|0) + ($1414)|0);
   $1420 = HEAP8[$1419>>0]|0;
   $1421 = $1420&255;
   $1422 = ($1420<<24>>24)==(0);
   if ($1422) {
    label = 187;
   } else {
    $1423 = (_is_pinned_on_black_king($__ptree__,$1414,$1421)|0);
    $1424 = ($1423|0)==(0);
    if ($1424) {
     label = 187;
    } else {
     if ((($1421|0) == 5)) {
      $bb_tmp$sroa$0$0$in$i74 = $1404;$bb_tmp$sroa$1$0$in$i73 = $1405;$bb_tmp$sroa$2$0$in$i72 = $1406;
     } else if ((($1421|0) == 2)) {
      $bb_tmp$sroa$0$0$in$i74 = $1407;$bb_tmp$sroa$1$0$in$i73 = $1408;$bb_tmp$sroa$2$0$in$i72 = $1409;
     } else if ((($1421|0) == 4)) {
      $bb_tmp$sroa$0$0$in$i74 = $1401;$bb_tmp$sroa$1$0$in$i73 = $1402;$bb_tmp$sroa$2$0$in$i72 = $1403;
     } else {
      $bb_tmp$sroa$0$0$in$i74 = $1398;$bb_tmp$sroa$1$0$in$i73 = $1399;$bb_tmp$sroa$2$0$in$i72 = $1400;
     }
     $bb_tmp$sroa$0$0$i75 = HEAP32[$bb_tmp$sroa$0$0$in$i74>>2]|0;
     $bb_tmp$sroa$1$0$i76 = HEAP32[$bb_tmp$sroa$1$0$in$i73>>2]|0;
     $bb_tmp$sroa$2$0$i77 = HEAP32[$bb_tmp$sroa$2$0$in$i72>>2]|0;
     $1425 = $bb_tmp$sroa$0$0$i75 ^ -1;
     $1426 = $bb_tmp$sroa$1$0$i76 ^ -1;
     $1427 = $bb_tmp$sroa$2$0$i77 ^ -1;
     $1428 = $14 | $1425;
     $1429 = $16 | $1426;
     $1430 = $18 | $1427;
     $1431 = (34160208 + (($1414*12)|0)|0);
     $1432 = HEAP32[$1431>>2]|0;
     $1433 = $1432 & $1428;
     $1434 = ((34160208 + (($1414*12)|0)|0) + 4|0);
     $1435 = HEAP32[$1434>>2]|0;
     $1436 = $1435 & $1429;
     $1437 = ((34160208 + (($1414*12)|0)|0) + 8|0);
     $1438 = HEAP32[$1437>>2]|0;
     $1439 = $1438 & $1430;
     $1463 = $1433;$1466 = $1436;$1469 = $1439;
    }
   }
   if ((label|0) == 187) {
    label = 0;
    $1440 = HEAP32[$1394>>2]|0;
    $1441 = $1440 & $14;
    $1442 = HEAP32[$1395>>2]|0;
    $1443 = $1442 & $16;
    $1444 = HEAP32[$1396>>2]|0;
    $1445 = $1444 & $18;
    $1463 = $1441;$1466 = $1443;$1469 = $1445;
   }
   $1446 = ((33572424 + ($1414<<3)|0) + 2|0);
   $1447 = HEAP8[$1446>>0]|0;
   $1448 = $1447&255;
   $1449 = ((($__ptree__) + ($1448<<2)|0) + 32|0);
   $1450 = HEAP32[$1449>>2]|0;
   $1451 = ((33572424 + ($1414<<3)|0) + 3|0);
   $1452 = HEAP8[$1451>>0]|0;
   $1453 = $1452&255;
   $1454 = $1450 >>> $1453;
   $1455 = $1454 & 127;
   $1456 = ((33953152 + (($1414*1536)|0)|0) + (($1455*12)|0)|0);
   $1457 = HEAP32[$1456>>2]|0;
   $1458 = (((33953152 + (($1414*1536)|0)|0) + (($1455*12)|0)|0) + 4|0);
   $1459 = HEAP32[$1458>>2]|0;
   $1460 = (((33953152 + (($1414*1536)|0)|0) + (($1455*12)|0)|0) + 8|0);
   $1461 = HEAP32[$1460>>2]|0;
   $1462 = $1463 & $78;
   $1464 = $1462 & $1457;
   $1465 = $1466 & $81;
   $1467 = $1465 & $1459;
   $1468 = $1397 & $1469;
   $1470 = $1468 & $1461;
   $1471 = $1467 | $1470;
   $1472 = $1471 | $1464;
   $1473 = ($1472|0)==(0);
   if ($1473) {
    $$31$lcssa = $$30279;
   } else {
    $1474 = $1414 << 7;
    $$31273 = $$30279;$1475 = $1464;$1476 = $1467;$1477 = $1470;
    while(1) {
     $1478 = (_first_one012($1475,$1476,$1477)|0);
     $1479 = (34156304 + (($1478*12)|0)|0);
     $1480 = HEAP32[$1479>>2]|0;
     $1481 = $1480 ^ $1475;
     $1482 = ((34156304 + (($1478*12)|0)|0) + 4|0);
     $1483 = HEAP32[$1482>>2]|0;
     $1484 = $1483 ^ $1476;
     $1485 = ((34156304 + (($1478*12)|0)|0) + 8|0);
     $1486 = HEAP32[$1485>>2]|0;
     $1487 = $1486 ^ $1477;
     $1488 = ((($__ptree__) + ($1478)|0) + 512|0);
     $1489 = HEAP8[$1488>>0]|0;
     $1490 = $1489 << 24 >> 24;
     $1491 = $1490 << 19;
     $1492 = $1474 | $1478;
     $1493 = $1492 | $1491;
     $1494 = $1493 | 65536;
     $1495 = (($$31273) + 4|0);
     HEAP32[$$31273>>2] = $1494;
     $1496 = $1484 | $1487;
     $1497 = $1496 | $1481;
     $1498 = ($1497|0)==(0);
     if ($1498) {
      $$31$lcssa = $1495;
      break;
     } else {
      $$31273 = $1495;$1475 = $1481;$1476 = $1484;$1477 = $1487;
     }
    }
   }
   $1410 = $1411 | $1412;
   $1413 = ($1410|0)==(0);
   if ($1413) {
    $$30$lcssa = $$31$lcssa;
    break;
   } else {
    $$30279 = $$31$lcssa;$u0$3277 = $1412;$u1$5278 = $1411;
   }
  }
 }
 $1499 = ((33575024 + (($2*12)|0)|0) + 8|0);
 $1500 = HEAP32[$1499>>2]|0;
 $1501 = ($1&255)>(17);
 if ($1501) {
  $1502 = (($2) + -9)|0;
  $1503 = (34156304 + (($1502*12)|0)|0);
  $1504 = HEAP32[$1503>>2]|0;
  $1505 = ((34156304 + (($1502*12)|0)|0) + 4|0);
  $1506 = HEAP32[$1505>>2]|0;
  $1507 = ((34156304 + (($1502*12)|0)|0) + 8|0);
  $1508 = HEAP32[$1507>>2]|0;
  $1509 = $1508 | $1500;
  $1511 = $1504;$1513 = $1506;$1515 = $1509;
 } else {
  $1511 = 0;$1513 = 0;$1515 = $1500;
 }
 $1510 = $1511 & $78;
 $1512 = $1513 & $81;
 $1514 = $1515 & $84;
 $1516 = (($__ptree__) + 176|0);
 $1517 = HEAP32[$1516>>2]|0;
 $1518 = $1510 & $1517;
 $1519 = (($__ptree__) + 180|0);
 $1520 = HEAP32[$1519>>2]|0;
 $1521 = $1512 & $1520;
 $1522 = (($__ptree__) + 184|0);
 $1523 = HEAP32[$1522>>2]|0;
 $1524 = $1514 & $1523;
 $1525 = (($__ptree__) + 368|0);
 $1526 = HEAP32[$1525>>2]|0;
 $1527 = $1526 & $52;
 $1528 = (($__ptree__) + 372|0);
 $1529 = HEAP32[$1528>>2]|0;
 $1530 = $1529 & $54;
 $1531 = (($__ptree__) + 376|0);
 $1532 = HEAP32[$1531>>2]|0;
 $1533 = $1532 & $56;
 $1534 = $1530 | $1527;
 $1535 = $1534 | $1533;
 $1536 = ($1535|0)==(0);
 L286: do {
  if ($1536) {
   $$32$ph512 = $$30$lcssa;$$ph257506 = $1524;$$ph258508 = $1521;$$ph259510 = $1518;
  } else {
   $1537 = (($__ptree__) + 128|0);
   $1538 = (($__ptree__) + 132|0);
   $1539 = (($__ptree__) + 136|0);
   $$32$ph519 = $$30$lcssa;$$ph257513 = $1524;$$ph258514 = $1521;$$ph259515 = $1518;$bb_piece$sroa$0$5$ph516 = $1527;$bb_piece$sroa$1$5$ph517 = $1530;$bb_piece$sroa$2$5$ph518 = $1533;
   while(1) {
    $bb_piece$sroa$0$5267 = $bb_piece$sroa$0$5$ph516;$bb_piece$sroa$1$5268 = $bb_piece$sroa$1$5$ph517;$bb_piece$sroa$2$5269 = $bb_piece$sroa$2$5$ph518;
    while(1) {
     $1540 = (_first_one012($bb_piece$sroa$0$5267,$bb_piece$sroa$1$5268,$bb_piece$sroa$2$5269)|0);
     $1541 = (34156304 + (($1540*12)|0)|0);
     $1542 = HEAP32[$1541>>2]|0;
     $1543 = $1542 ^ $bb_piece$sroa$0$5267;
     $1544 = ((34156304 + (($1540*12)|0)|0) + 4|0);
     $1545 = HEAP32[$1544>>2]|0;
     $1546 = $1545 ^ $bb_piece$sroa$1$5268;
     $1547 = ((34156304 + (($1540*12)|0)|0) + 8|0);
     $1548 = HEAP32[$1547>>2]|0;
     $1549 = $1548 ^ $bb_piece$sroa$2$5269;
     $1550 = (($1540) + 9)|0;
     $1551 = ((($__ptree__) + ($1550)|0) + 512|0);
     $1552 = HEAP8[$1551>>0]|0;
     $1553 = ($1552<<24>>24)<(0);
     if (!($1553)) {
      $1557 = ((33572424 + ($1540<<3)|0) + 6|0);
      $1558 = HEAP8[$1557>>0]|0;
      $1559 = $1558&255;
      $1560 = ((($__ptree__) + ($1559<<2)|0) + 56|0);
      $1561 = HEAP32[$1560>>2]|0;
      $1562 = ((33572424 + ($1540<<3)|0) + 7|0);
      $1563 = HEAP8[$1562>>0]|0;
      $1564 = $1563&255;
      $1565 = $1561 >>> $1564;
      $1566 = $1565 & 127;
      $1567 = ((33704320 + (($1540*1536)|0)|0) + (($1566*12)|0)|0);
      $1568 = HEAP32[$1567>>2]|0;
      $1569 = (((33704320 + (($1540*1536)|0)|0) + (($1566*12)|0)|0) + 4|0);
      $1570 = HEAP32[$1569>>2]|0;
      $1571 = (((33704320 + (($1540*1536)|0)|0) + (($1566*12)|0)|0) + 8|0);
      $1572 = HEAP32[$1571>>2]|0;
      $1573 = HEAP32[$1537>>2]|0;
      $1574 = $1573 & $1568;
      $1575 = HEAP32[$1538>>2]|0;
      $1576 = $1575 & $1570;
      $1577 = $1576 | $1574;
      $1578 = HEAP32[$1539>>2]|0;
      $1579 = $1578 & $1572;
      $1580 = $1577 | $1579;
      $1581 = ($1580|0)==(0);
      if (!($1581)) {
       break;
      }
     }
     $1554 = $1546 | $1543;
     $1555 = $1554 | $1549;
     $1556 = ($1555|0)==(0);
     if ($1556) {
      $$32$ph512 = $$32$ph519;$$ph257506 = $$ph257513;$$ph258508 = $$ph258514;$$ph259510 = $$ph259515;
      break L286;
     } else {
      $bb_piece$sroa$0$5267 = $1543;$bb_piece$sroa$1$5268 = $1546;$bb_piece$sroa$2$5269 = $1549;
     }
    }
    $1582 = (34156304 + (($1550*12)|0)|0);
    $1583 = HEAP32[$1582>>2]|0;
    $1584 = $1583 ^ -1;
    $1585 = $$ph259515 & $1584;
    $1586 = ((34156304 + (($1550*12)|0)|0) + 4|0);
    $1587 = HEAP32[$1586>>2]|0;
    $1588 = $1587 ^ -1;
    $1589 = $$ph258514 & $1588;
    $1590 = ((34156304 + (($1550*12)|0)|0) + 8|0);
    $1591 = HEAP32[$1590>>2]|0;
    $1592 = $1591 ^ -1;
    $1593 = $$ph257513 & $1592;
    $1594 = $1540 << 7;
    $1595 = $1550 | $1594;
    $1596 = $1552 << 24 >> 24;
    $1597 = $1596 << 19;
    $1598 = ($1540|0)>(44);
    $$$v = $1598 ? 49152 : 32768;
    $1599 = $1595 | $$$v;
    $$ = $1599 | $1597;
    HEAP32[$$32$ph519>>2] = $$;
    $1600 = (($$32$ph519) + 4|0);
    $1601 = $1546 | $1543;
    $1602 = $1601 | $1549;
    $1603 = ($1602|0)==(0);
    if ($1603) {
     $$32$ph512 = $1600;$$ph257506 = $1593;$$ph258508 = $1589;$$ph259510 = $1585;
     break;
    } else {
     $$32$ph519 = $1600;$$ph257513 = $1593;$$ph258514 = $1589;$$ph259515 = $1585;$bb_piece$sroa$0$5$ph516 = $1543;$bb_piece$sroa$1$5$ph517 = $1546;$bb_piece$sroa$2$5$ph518 = $1549;
    }
   }
  }
 } while(0);
 $1604 = HEAP32[$1525>>2]|0;
 $1605 = $1604 & $68;
 $1606 = HEAP32[$1528>>2]|0;
 $1607 = $1606 & $70;
 $1608 = HEAP32[$1531>>2]|0;
 $1609 = $1608 & $72;
 $1610 = $1607 | $1605;
 $1611 = $1610 | $1609;
 $1612 = ($1611|0)==(0);
 L297: do {
  if ($1612) {
   $$33$ph492 = $$32$ph512;$$ph241486 = $$ph257506;$$ph242488 = $$ph258508;$$ph243490 = $$ph259510;
  } else {
   $1613 = (($__ptree__) + 128|0);
   $1614 = (($__ptree__) + 132|0);
   $1615 = (($__ptree__) + 136|0);
   $$33$ph499 = $$32$ph512;$$ph241493 = $$ph257506;$$ph242494 = $$ph258508;$$ph243495 = $$ph259510;$bb_piece$sroa$0$6$ph496 = $1605;$bb_piece$sroa$1$6$ph497 = $1607;$bb_piece$sroa$2$6$ph498 = $1609;
   while(1) {
    $bb_piece$sroa$0$6251 = $bb_piece$sroa$0$6$ph496;$bb_piece$sroa$1$6252 = $bb_piece$sroa$1$6$ph497;$bb_piece$sroa$2$6253 = $bb_piece$sroa$2$6$ph498;
    while(1) {
     $1616 = (_first_one012($bb_piece$sroa$0$6251,$bb_piece$sroa$1$6252,$bb_piece$sroa$2$6253)|0);
     $1617 = (34156304 + (($1616*12)|0)|0);
     $1618 = HEAP32[$1617>>2]|0;
     $1619 = $1618 ^ $bb_piece$sroa$0$6251;
     $1620 = ((34156304 + (($1616*12)|0)|0) + 4|0);
     $1621 = HEAP32[$1620>>2]|0;
     $1622 = $1621 ^ $bb_piece$sroa$1$6252;
     $1623 = ((34156304 + (($1616*12)|0)|0) + 8|0);
     $1624 = HEAP32[$1623>>2]|0;
     $1625 = $1624 ^ $bb_piece$sroa$2$6253;
     $1626 = (($1616) + 9)|0;
     $1627 = ((($__ptree__) + ($1626)|0) + 512|0);
     $1628 = HEAP8[$1627>>0]|0;
     $1629 = ($1628<<24>>24)<(0);
     if (!($1629)) {
      $1633 = ((33572424 + ($1616<<3)|0) + 4|0);
      $1634 = HEAP8[$1633>>0]|0;
      $1635 = $1634&255;
      $1636 = ((($__ptree__) + ($1635<<2)|0) + 44|0);
      $1637 = HEAP32[$1636>>2]|0;
      $1638 = ((33572424 + ($1616<<3)|0) + 5|0);
      $1639 = HEAP8[$1638>>0]|0;
      $1640 = $1639&255;
      $1641 = $1637 >>> $1640;
      $1642 = $1641 & 127;
      $1643 = ((33579904 + (($1616*1536)|0)|0) + (($1642*12)|0)|0);
      $1644 = HEAP32[$1643>>2]|0;
      $1645 = (((33579904 + (($1616*1536)|0)|0) + (($1642*12)|0)|0) + 4|0);
      $1646 = HEAP32[$1645>>2]|0;
      $1647 = (((33579904 + (($1616*1536)|0)|0) + (($1642*12)|0)|0) + 8|0);
      $1648 = HEAP32[$1647>>2]|0;
      $1649 = HEAP32[$1613>>2]|0;
      $1650 = $1649 & $1644;
      $1651 = HEAP32[$1614>>2]|0;
      $1652 = $1651 & $1646;
      $1653 = $1652 | $1650;
      $1654 = HEAP32[$1615>>2]|0;
      $1655 = $1654 & $1648;
      $1656 = $1653 | $1655;
      $1657 = ($1656|0)==(0);
      if (!($1657)) {
       break;
      }
     }
     $1630 = $1622 | $1619;
     $1631 = $1630 | $1625;
     $1632 = ($1631|0)==(0);
     if ($1632) {
      $$33$ph492 = $$33$ph499;$$ph241486 = $$ph241493;$$ph242488 = $$ph242494;$$ph243490 = $$ph243495;
      break L297;
     } else {
      $bb_piece$sroa$0$6251 = $1619;$bb_piece$sroa$1$6252 = $1622;$bb_piece$sroa$2$6253 = $1625;
     }
    }
    $1658 = (34156304 + (($1626*12)|0)|0);
    $1659 = HEAP32[$1658>>2]|0;
    $1660 = $1659 ^ -1;
    $1661 = $$ph243495 & $1660;
    $1662 = ((34156304 + (($1626*12)|0)|0) + 4|0);
    $1663 = HEAP32[$1662>>2]|0;
    $1664 = $1663 ^ -1;
    $1665 = $$ph242494 & $1664;
    $1666 = ((34156304 + (($1626*12)|0)|0) + 8|0);
    $1667 = HEAP32[$1666>>2]|0;
    $1668 = $1667 ^ -1;
    $1669 = $$ph241493 & $1668;
    $1670 = $1616 << 7;
    $1671 = $1626 | $1670;
    $1672 = $1628 << 24 >> 24;
    $1673 = $1672 << 19;
    $1674 = ($1616|0)>(44);
    $$55$v = $1674 ? 49152 : 32768;
    $1675 = $1671 | $$55$v;
    $$55 = $1675 | $1673;
    HEAP32[$$33$ph499>>2] = $$55;
    $1676 = (($$33$ph499) + 4|0);
    $1677 = $1622 | $1619;
    $1678 = $1677 | $1625;
    $1679 = ($1678|0)==(0);
    if ($1679) {
     $$33$ph492 = $1676;$$ph241486 = $1669;$$ph242488 = $1665;$$ph243490 = $1661;
     break;
    } else {
     $$33$ph499 = $1676;$$ph241493 = $1669;$$ph242494 = $1665;$$ph243495 = $1661;$bb_piece$sroa$0$6$ph496 = $1619;$bb_piece$sroa$1$6$ph497 = $1622;$bb_piece$sroa$2$6$ph498 = $1625;
    }
   }
  }
 } while(0);
 $1680 = HEAP32[$1525>>2]|0;
 $1681 = $1680 & $33;
 $1682 = HEAP32[$1528>>2]|0;
 $1683 = $1682 & $35;
 $1684 = HEAP32[$1531>>2]|0;
 $1685 = $1684 & $37;
 $1686 = $1683 | $1681;
 $1687 = $1686 | $1685;
 $1688 = ($1687|0)==(0);
 L308: do {
  if ($1688) {
   $$34$ph472 = $$33$ph492;$$ph229468 = $$ph242488;$$ph230470 = $$ph243490;$$ph466 = $$ph241486;
  } else {
   $1689 = (($__ptree__) + 152|0);
   $1690 = (($__ptree__) + 156|0);
   $1691 = (($__ptree__) + 160|0);
   $$34$ph479 = $$33$ph492;$$ph229474 = $$ph242488;$$ph230475 = $$ph243490;$$ph473 = $$ph241486;$bb_piece$sroa$0$7$ph476 = $1681;$bb_piece$sroa$1$7$ph477 = $1683;$bb_piece$sroa$2$7$ph478 = $1685;
   while(1) {
    $bb_piece$sroa$0$7236 = $bb_piece$sroa$0$7$ph476;$bb_piece$sroa$1$7237 = $bb_piece$sroa$1$7$ph477;$bb_piece$sroa$2$7238 = $bb_piece$sroa$2$7$ph478;
    while(1) {
     $1695 = (_first_one012($bb_piece$sroa$0$7236,$bb_piece$sroa$1$7237,$bb_piece$sroa$2$7238)|0);
     $1696 = (34156304 + (($1695*12)|0)|0);
     $1697 = HEAP32[$1696>>2]|0;
     $1698 = $1697 ^ $bb_piece$sroa$0$7236;
     $1699 = ((34156304 + (($1695*12)|0)|0) + 4|0);
     $1700 = HEAP32[$1699>>2]|0;
     $1701 = $1700 ^ $bb_piece$sroa$1$7237;
     $1702 = ((34156304 + (($1695*12)|0)|0) + 8|0);
     $1703 = HEAP32[$1702>>2]|0;
     $1704 = $1703 ^ $bb_piece$sroa$2$7238;
     $1705 = (($1695) + 9)|0;
     $1706 = ((($__ptree__) + ($1705)|0) + 512|0);
     $1707 = HEAP8[$1706>>0]|0;
     $1708 = ($1707<<24>>24)<(0);
     if (!($1708)) {
      $1712 = (33572424 + ($1695<<3)|0);
      $1713 = HEAP8[$1712>>0]|0;
      $1714 = $1713&255;
      $1715 = ((($__ptree__) + ($1714<<2)|0) + 8|0);
      $1716 = HEAP32[$1715>>2]|0;
      $1717 = ((($__ptree__) + ($1714<<2)|0) + 20|0);
      $1718 = HEAP32[$1717>>2]|0;
      $1719 = $1718 | $1716;
      $1720 = ((33572424 + ($1695<<3)|0) + 1|0);
      $1721 = HEAP8[$1720>>0]|0;
      $1722 = $1721&255;
      $1723 = $1719 >>> $1722;
      $1724 = $1723 & 127;
      $1725 = ((33828736 + (($1695*1536)|0)|0) + (($1724*12)|0)|0);
      $1726 = HEAP32[$1725>>2]|0;
      $1727 = (((33828736 + (($1695*1536)|0)|0) + (($1724*12)|0)|0) + 4|0);
      $1728 = HEAP32[$1727>>2]|0;
      $1729 = (((33828736 + (($1695*1536)|0)|0) + (($1724*12)|0)|0) + 8|0);
      $1730 = HEAP32[$1729>>2]|0;
      $1731 = HEAP32[$1689>>2]|0;
      $1732 = $1731 & $1726;
      $1733 = HEAP32[$1690>>2]|0;
      $1734 = $1733 & $1728;
      $1735 = $1734 | $1732;
      $1736 = HEAP32[$1691>>2]|0;
      $1737 = $1736 & $1730;
      $1738 = $1735 | $1737;
      $1739 = ($1738|0)==(0);
      if (!($1739)) {
       break;
      }
     }
     $1709 = $1701 | $1698;
     $1710 = $1709 | $1704;
     $1711 = ($1710|0)==(0);
     if ($1711) {
      $$34$ph472 = $$34$ph479;$$ph229468 = $$ph229474;$$ph230470 = $$ph230475;$$ph466 = $$ph473;
      break L308;
     } else {
      $bb_piece$sroa$0$7236 = $1698;$bb_piece$sroa$1$7237 = $1701;$bb_piece$sroa$2$7238 = $1704;
     }
    }
    $1740 = (34156304 + (($1705*12)|0)|0);
    $1741 = HEAP32[$1740>>2]|0;
    $1742 = $1741 ^ -1;
    $1743 = $$ph230475 & $1742;
    $1744 = ((34156304 + (($1705*12)|0)|0) + 4|0);
    $1745 = HEAP32[$1744>>2]|0;
    $1746 = $1745 ^ -1;
    $1747 = $$ph229474 & $1746;
    $1748 = ((34156304 + (($1705*12)|0)|0) + 8|0);
    $1749 = HEAP32[$1748>>2]|0;
    $1750 = $1749 ^ -1;
    $1751 = $$ph473 & $1750;
    $1752 = $1695 << 7;
    $1753 = $1705 | $1752;
    $1754 = $1707 << 24 >> 24;
    $1755 = $1754 << 19;
    $1756 = ($1695|0)>(44);
    $$56$v = $1756 ? 49152 : 32768;
    $1757 = $1753 | $$56$v;
    $$56 = $1757 | $1755;
    HEAP32[$$34$ph479>>2] = $$56;
    $1758 = (($$34$ph479) + 4|0);
    $1759 = $1701 | $1698;
    $1760 = $1759 | $1704;
    $1761 = ($1760|0)==(0);
    if ($1761) {
     $$34$ph472 = $1758;$$ph229468 = $1747;$$ph230470 = $1743;$$ph466 = $1751;
     break;
    } else {
     $$34$ph479 = $1758;$$ph229474 = $1747;$$ph230475 = $1743;$$ph473 = $1751;$bb_piece$sroa$0$7$ph476 = $1698;$bb_piece$sroa$1$7$ph477 = $1701;$bb_piece$sroa$2$7$ph478 = $1704;
    }
   }
  }
 } while(0);
 $1692 = $$ph229468 | $$ph466;
 $1693 = $1692 | $$ph230470;
 $1694 = ($1693|0)==(0);
 if ($1694) {
  $$35$lcssa = $$34$ph472;
 } else {
  $$35226 = $$34$ph472;$1762 = $$ph230470;$1763 = $$ph229468;$1764 = $$ph466;
  while(1) {
   $1765 = (_first_one012($1762,$1763,$1764)|0);
   $1766 = (34156304 + (($1765*12)|0)|0);
   $1767 = HEAP32[$1766>>2]|0;
   $1768 = $1767 ^ $1762;
   $1769 = ((34156304 + (($1765*12)|0)|0) + 4|0);
   $1770 = HEAP32[$1769>>2]|0;
   $1771 = $1770 ^ $1763;
   $1772 = ((34156304 + (($1765*12)|0)|0) + 8|0);
   $1773 = HEAP32[$1772>>2]|0;
   $1774 = $1773 ^ $1764;
   $1775 = (($1765) + -9)|0;
   $1776 = $1775 << 7;
   $1777 = $1776 | $1765;
   $1778 = ((($__ptree__) + ($1765)|0) + 512|0);
   $1779 = HEAP8[$1778>>0]|0;
   $1780 = $1779 << 24 >> 24;
   $1781 = $1780 << 19;
   $1782 = ($1775|0)>(44);
   $$57$v = $1782 ? 49152 : 32768;
   $1783 = $1777 | $$57$v;
   $$57 = $1783 | $1781;
   HEAP32[$$35226>>2] = $$57;
   $1784 = (($$35226) + 4|0);
   $1785 = $1771 | $1774;
   $1786 = $1785 | $1768;
   $1787 = ($1786|0)==(0);
   if ($1787) {
    $$35$lcssa = $1784;
    break;
   } else {
    $$35226 = $1784;$1762 = $1768;$1763 = $1771;$1764 = $1774;
   }
  }
 }
 $1788 = (($__ptree__) + 504|0);
 $1789 = HEAP32[$1788>>2]|0;
 $1790 = $1789 & 114688;
 $1791 = ($1790|0)==(0);
 do {
  if ($1791) {
   $$37 = $$35$lcssa;$1822 = $1789;
  } else {
   $1792 = (33575024 + (($2*12)|0)|0);
   $1793 = HEAP32[$1792>>2]|0;
   $1794 = $1793 & $94;
   $1795 = ((33575024 + (($2*12)|0)|0) + 4|0);
   $1796 = HEAP32[$1795>>2]|0;
   $1797 = $1796 & $95;
   $1798 = HEAP32[$1499>>2]|0;
   $1799 = $1798 & $96;
   $1800 = $1797 | $1799;
   $1801 = $1800 | $1794;
   $1802 = ($1801|0)==(0);
   if ($1802) {
    $$37 = $$35$lcssa;$1822 = $1789;
    break;
   } else {
    $$36223 = $$35$lcssa;$1803 = $1794;$1804 = $1797;$1805 = $1799;
   }
   while(1) {
    $1806 = (_first_one012($1803,$1804,$1805)|0);
    $1807 = (34156304 + (($1806*12)|0)|0);
    $1808 = HEAP32[$1807>>2]|0;
    $1809 = $1808 ^ $1803;
    $1810 = ((34156304 + (($1806*12)|0)|0) + 4|0);
    $1811 = HEAP32[$1810>>2]|0;
    $1812 = $1811 ^ $1804;
    $1813 = ((34156304 + (($1806*12)|0)|0) + 8|0);
    $1814 = HEAP32[$1813>>2]|0;
    $1815 = $1814 ^ $1805;
    $1816 = $1806 | 10880;
    $1817 = (($$36223) + 4|0);
    HEAP32[$$36223>>2] = $1816;
    $1818 = $1812 | $1815;
    $1819 = $1818 | $1809;
    $1820 = ($1819|0)==(0);
    if ($1820) {
     break;
    } else {
     $$36223 = $1817;$1803 = $1809;$1804 = $1812;$1805 = $1815;
    }
   }
   $$pre624$pre = HEAP32[$1788>>2]|0;
   $$37 = $1817;$1822 = $$pre624$pre;
  }
 } while(0);
 $1821 = $1822 & 14336;
 $1823 = ($1821|0)==(0);
 do {
  if ($1823) {
   $$39 = $$37;$1855 = $1822;
  } else {
   $1824 = (33574048 + (($2*12)|0)|0);
   $1825 = HEAP32[$1824>>2]|0;
   $1826 = $1825 & $94;
   $1827 = ((33574048 + (($2*12)|0)|0) + 4|0);
   $1828 = HEAP32[$1827>>2]|0;
   $1829 = $1828 & $95;
   $1830 = ((33574048 + (($2*12)|0)|0) + 8|0);
   $1831 = HEAP32[$1830>>2]|0;
   $1832 = $1831 & $96;
   $1833 = $1829 | $1832;
   $1834 = $1833 | $1826;
   $1835 = ($1834|0)==(0);
   if ($1835) {
    $$39 = $$37;$1855 = $1822;
    break;
   } else {
    $$38219 = $$37;$1836 = $1826;$1837 = $1829;$1838 = $1832;
   }
   while(1) {
    $1839 = (_first_one012($1836,$1837,$1838)|0);
    $1840 = (34156304 + (($1839*12)|0)|0);
    $1841 = HEAP32[$1840>>2]|0;
    $1842 = $1841 ^ $1836;
    $1843 = ((34156304 + (($1839*12)|0)|0) + 4|0);
    $1844 = HEAP32[$1843>>2]|0;
    $1845 = $1844 ^ $1837;
    $1846 = ((34156304 + (($1839*12)|0)|0) + 8|0);
    $1847 = HEAP32[$1846>>2]|0;
    $1848 = $1847 ^ $1838;
    $1849 = $1839 | 10752;
    $1850 = (($$38219) + 4|0);
    HEAP32[$$38219>>2] = $1849;
    $1851 = $1845 | $1848;
    $1852 = $1851 | $1842;
    $1853 = ($1852|0)==(0);
    if ($1853) {
     break;
    } else {
     $$38219 = $1850;$1836 = $1842;$1837 = $1845;$1838 = $1848;
    }
   }
   $$pre625$pre = HEAP32[$1788>>2]|0;
   $$39 = $1850;$1855 = $$pre625$pre;
  }
 } while(0);
 $1854 = $1855 & 1792;
 $1856 = ($1854|0)==(0);
 $$not = $1501 ^ 1;
 $brmerge = $1856 | $$not;
 do {
  if ($brmerge) {
   $$41 = $$39;
  } else {
   $1857 = (($2) + -19)|0;
   $1858 = (1248 + ($2)|0);
   $1859 = HEAP8[$1858>>0]|0;
   $1860 = ($1859<<24>>24)==(0);
   if ($1860) {
    $$40142 = $$39;
   } else {
    $1861 = ((($__ptree__) + ($1857)|0) + 512|0);
    $1862 = HEAP8[$1861>>0]|0;
    $1863 = ($1862<<24>>24)==(0);
    if ($1863) {
     $1864 = $1857 | 10624;
     $1865 = (($$39) + 4|0);
     HEAP32[$$39>>2] = $1864;
     $$40$ph = $1865;
    } else {
     $$40$ph = $$39;
    }
    $1866 = ($1859<<24>>24)==(8);
    if ($1866) {
     $$41 = $$40$ph;
     break;
    } else {
     $$40142 = $$40$ph;
    }
   }
   $1867 = (($2) + -17)|0;
   $1868 = ((($__ptree__) + ($1867)|0) + 512|0);
   $1869 = HEAP8[$1868>>0]|0;
   $1870 = ($1869<<24>>24)==(0);
   if (!($1870)) {
    $$41 = $$40142;
    break;
   }
   $1871 = $1867 | 10624;
   $1872 = (($$40142) + 4|0);
   HEAP32[$$40142>>2] = $1871;
   $$41 = $1872;
  }
 } while(0);
 $1873 = HEAP32[$1788>>2]|0;
 $1874 = $1873 & 31;
 $1875 = ($1874|0)!=(0);
 $1876 = ($1&255)>(8);
 $or$cond = $1875 & $1876;
 do {
  if ($or$cond) {
   $1877 = HEAP32[$1525>>2]|0;
   $1878 = HEAP32[$1528>>2]|0;
   $1879 = $1878 | $1877;
   $1880 = HEAP32[$1531>>2]|0;
   $1881 = $1879 | $1880;
   $1882 = (1248 + ($2)|0);
   $1883 = HEAP8[$1882>>0]|0;
   $1884 = $1883&255;
   $1885 = 67240192 >>> $1884;
   $1886 = $1885 & $1881;
   $1887 = ($1886|0)==(0);
   if (!($1887)) {
    $$42 = $$41;
    break;
   }
   $1888 = (($2) + -9)|0;
   $1889 = ((($__ptree__) + ($1888)|0) + 512|0);
   $1890 = HEAP8[$1889>>0]|0;
   $1891 = ($1890<<24>>24)==(0);
   if (!($1891)) {
    $$42 = $$41;
    break;
   }
   $1892 = (_is_mate_w_pawn_drop($__ptree__,$1888)|0);
   $1893 = ($1892|0)==(0);
   if (!($1893)) {
    $$42 = $$41;
    break;
   }
   $1894 = $1888 | 10368;
   $1895 = (($$41) + 4|0);
   HEAP32[$$41>>2] = $1894;
   $$42 = $1895;
  } else {
   $$42 = $$41;
  }
 } while(0);
 $1896 = HEAP32[$1788>>2]|0;
 $1897 = $1896 & 224;
 $1898 = ($1897|0)==(0);
 if ($1898) {
  $$44 = $$42;$1912 = $1896;
 } else {
  $1899 = (1248 + ($2)|0);
  $1900 = HEAP8[$1899>>0]|0;
  if ((($1900<<24>>24) == 8) | (($1900<<24>>24) == 0)) {
   $min_dist$0 = 2;
  } else {
   $min_dist$0 = 3;
  }
  $to$0213 = (($2) + -9)|0;
  $1901 = ($to$0213|0)>(-1);
  L356: do {
   if ($1901) {
    $$43214 = $$42;$dist$0215 = 1;$to$0216 = $to$0213;
    while(1) {
     $1902 = ((($__ptree__) + ($to$0216)|0) + 512|0);
     $1903 = HEAP8[$1902>>0]|0;
     $1904 = ($1903<<24>>24)==(0);
     if (!($1904)) {
      $$43$lcssa = $$43214;
      break L356;
     }
     $1905 = ($dist$0215|0)==(1);
     if ($1905) {
      $1906 = $to$0216 | 1073752320;
      $move$0 = $1906;
     } else {
      $1907 = ($dist$0215|0)>($min_dist$0|0);
      $$58$v = $1907 ? -2147473152 : 10496;
      $$58 = $$58$v | $to$0216;
      $move$0 = $$58;
     }
     $1908 = (($$43214) + 4|0);
     HEAP32[$$43214>>2] = $move$0;
     $1909 = (($dist$0215) + 1)|0;
     $to$0 = (($to$0216) + -9)|0;
     $1910 = ($to$0|0)>(-1);
     if ($1910) {
      $$43214 = $1908;$dist$0215 = $1909;$to$0216 = $to$0;
     } else {
      $$43$lcssa = $1908;
      break;
     }
    }
   } else {
    $$43$lcssa = $$42;
   }
  } while(0);
  $$pre626 = HEAP32[$1788>>2]|0;
  $$44 = $$43$lcssa;$1912 = $$pre626;
 }
 $1911 = $1912 & 1572864;
 $1913 = ($1911|0)==(0);
 if ($1913) {
  $$49 = $$44;$1963 = $1912;
 } else {
  $1914 = (1248 + ($2)|0);
  $1915 = HEAP8[$1914>>0]|0;
  if ((($1915<<24>>24) == 8) | (($1915<<24>>24) == 0)) {
   $min_dist3$0 = 2;
  } else {
   $min_dist3$0 = 3;
  }
  $to$1207 = (($2) + -9)|0;
  $1916 = ($to$1207|0)>(-1);
  L371: do {
   if ($1916) {
    $$45208 = $$44;$dist2$0209 = 1;$to$1210 = $to$1207;
    while(1) {
     $1917 = ((($__ptree__) + ($to$1210)|0) + 512|0);
     $1918 = HEAP8[$1917>>0]|0;
     $1919 = ($1918<<24>>24)==(0);
     if (!($1919)) {
      $$45$lcssa = $$45208;
      break L371;
     }
     $1921 = ($dist2$0209|0)==(1);
     if ($1921) {
      $1922 = $to$1210 | 1073752960;
      $move1$0 = $1922;
     } else {
      $1923 = ($dist2$0209|0)>($min_dist3$0|0);
      $$59$v = $1923 ? -2147472512 : 11136;
      $$59 = $$59$v | $to$1210;
      $move1$0 = $$59;
     }
     $1924 = (($$45208) + 4|0);
     HEAP32[$$45208>>2] = $move1$0;
     $1925 = (($dist2$0209) + 1)|0;
     $to$1 = (($to$1210) + -9)|0;
     $1926 = ($to$1|0)>(-1);
     if ($1926) {
      $$45208 = $1924;$dist2$0209 = $1925;$to$1210 = $to$1;
     } else {
      $$45$lcssa = $1924;
      break;
     }
    }
   } else {
    $$45$lcssa = $$44;
   }
  } while(0);
  $to$2201 = (($2) + 9)|0;
  $1920 = ($to$2201>>>0)<(81);
  L380: do {
   if ($1920) {
    $$46202 = $$45$lcssa;$dist2$1203 = 1;$to$2204 = $to$2201;
    while(1) {
     $1927 = ((($__ptree__) + ($to$2204)|0) + 512|0);
     $1928 = HEAP8[$1927>>0]|0;
     $1929 = ($1928<<24>>24)==(0);
     if (!($1929)) {
      $$46$lcssa = $$46202;
      break L380;
     }
     $1930 = (1336 + ($to$2204)|0);
     $1931 = HEAP8[$1930>>0]|0;
     $1932 = ($1931<<24>>24)==(6);
     $$60$v = $1932 ? 1073752960 : 11136;
     $$60 = $$60$v | $to$2204;
     $1933 = ($dist2$1203|0)==(1);
     if ($1933) {
      $1934 = $to$2204 | 1073752960;
      $move1$2 = $1934;
     } else {
      $1935 = ($dist2$1203|0)>($min_dist3$0|0);
      $1936 = $$60 | -2147483648;
      $$$60 = $1935 ? $1936 : $$60;
      $move1$2 = $$$60;
     }
     $1937 = (($$46202) + 4|0);
     HEAP32[$$46202>>2] = $move1$2;
     $1938 = (($dist2$1203) + 1)|0;
     $to$2 = (($to$2204) + 9)|0;
     $1939 = ($to$2|0)<(81);
     if ($1939) {
      $$46202 = $1937;$dist2$1203 = $1938;$to$2204 = $to$2;
     } else {
      $$46$lcssa = $1937;
      break;
     }
    }
   } else {
    $$46$lcssa = $$45$lcssa;
   }
  } while(0);
  $$off = (($1) + -9)<<24>>24;
  $1940 = ($$off&255)>(62);
  $$61 = $1940 ? 2 : 3;
  $1941 = $1915&255;
  $file$0193 = (($1941) + 1)|0;
  $1942 = ($file$0193>>>0)<(9);
  L389: do {
   if ($1942) {
    $$47195 = $$46$lcssa;$dist2$2196 = 1;$file$0197 = $file$0193;$to$3198$in = $2;
    while(1) {
     $to$3198 = (($to$3198$in) + 1)|0;
     $1943 = ((($__ptree__) + ($to$3198)|0) + 512|0);
     $1944 = HEAP8[$1943>>0]|0;
     $1945 = ($1944<<24>>24)==(0);
     if (!($1945)) {
      $$47$lcssa = $$47195;
      break L389;
     }
     $1946 = ($dist2$2196|0)==(1);
     if ($1946) {
      $1947 = $to$3198 | 1073752960;
      $move1$3 = $1947;
     } else {
      $1948 = ($dist2$2196|0)>($$61|0);
      $$62$v = $1948 ? -2147472512 : 11136;
      $$62 = $$62$v | $to$3198;
      $move1$3 = $$62;
     }
     $1949 = (($$47195) + 4|0);
     HEAP32[$$47195>>2] = $move1$3;
     $1950 = (($dist2$2196) + 1)|0;
     $file$0 = (($file$0197) + 1)|0;
     $1951 = ($file$0|0)<(9);
     if ($1951) {
      $$47195 = $1949;$dist2$2196 = $1950;$file$0197 = $file$0;$to$3198$in = $to$3198;
     } else {
      $$47$lcssa = $1949;
      break;
     }
    }
   } else {
    $$47$lcssa = $$46$lcssa;
   }
  } while(0);
  $1952 = ($1915<<24>>24)==(0);
  L398: do {
   if ($1952) {
    $$48$lcssa = $$47$lcssa;
   } else {
    $$48187 = $$47$lcssa;$dist2$3188 = 1;$file$1190$in = $1941;$to$4189$in = $2;
    while(1) {
     $to$4189 = (($to$4189$in) + -1)|0;
     $file$1190 = (($file$1190$in) + -1)|0;
     $1953 = ((($__ptree__) + ($to$4189)|0) + 512|0);
     $1954 = HEAP8[$1953>>0]|0;
     $1955 = ($1954<<24>>24)==(0);
     if (!($1955)) {
      $$48$lcssa = $$48187;
      break L398;
     }
     $1956 = ($dist2$3188|0)==(1);
     if ($1956) {
      $1957 = $to$4189 | 1073752960;
      $move1$4 = $1957;
     } else {
      $1958 = ($dist2$3188|0)>($$61|0);
      $$63$v = $1958 ? -2147472512 : 11136;
      $$63 = $$63$v | $to$4189;
      $move1$4 = $$63;
     }
     $1959 = (($$48187) + 4|0);
     HEAP32[$$48187>>2] = $move1$4;
     $1960 = (($dist2$3188) + 1)|0;
     $1961 = ($file$1190|0)>(0);
     if ($1961) {
      $$48187 = $1959;$dist2$3188 = $1960;$file$1190$in = $file$1190;$to$4189$in = $to$4189;
     } else {
      $$48$lcssa = $1959;
      break;
     }
    }
   }
  } while(0);
  $$pre627 = HEAP32[$1788>>2]|0;
  $$49 = $$48$lcssa;$1963 = $$pre627;
 }
 $1962 = $1963 & 393216;
 $1964 = ($1962|0)==(0);
 if ($1964) {
  $$54 = $$49;
  STACKTOP = sp;return ($$54|0);
 }
 $1965 = (1248 + ($2)|0);
 $1966 = HEAP8[$1965>>0]|0;
 $1967 = $1966&255;
 $1968 = (1336 + ($2)|0);
 $1969 = HEAP8[$1968>>0]|0;
 $1970 = $1969&255;
 $rank$0174 = (($1970) + 1)|0;
 $file5$0175 = (($1967) + 1)|0;
 $1971 = ($file5$0175>>>0)<(9);
 $1972 = ($rank$0174>>>0)<(9);
 $or$cond64177 = $1971 & $1972;
 L411: do {
  if ($or$cond64177) {
   $$50178 = $$49;$dist6$0179 = 1;$file5$0181 = $file5$0175;$rank$0180 = $rank$0174;$to$5182$in = $2;
   while(1) {
    $to$5182 = (($to$5182$in) + 10)|0;
    $1973 = ((($__ptree__) + ($to$5182)|0) + 512|0);
    $1974 = HEAP8[$1973>>0]|0;
    $1975 = ($1974<<24>>24)==(0);
    if (!($1975)) {
     $$50$lcssa = $$50178;
     break L411;
    }
    $1976 = ($rank$0180|0)==(6);
    $$65$v = $1976 ? 1073752832 : 11008;
    $$65 = $$65$v | $to$5182;
    $1977 = ($dist6$0179|0)==(1);
    if ($1977) {
     $1978 = $to$5182 | 1073752832;
     $move4$1 = $1978;
    } else {
     $1979 = ($dist6$0179|0)>(2);
     $1980 = $$65 | -2147483648;
     $$$65 = $1979 ? $1980 : $$65;
     $move4$1 = $$$65;
    }
    $1981 = (($$50178) + 4|0);
    HEAP32[$$50178>>2] = $move4$1;
    $1982 = (($dist6$0179) + 1)|0;
    $rank$0 = (($rank$0180) + 1)|0;
    $file5$0 = (($file5$0181) + 1)|0;
    $1983 = ($file5$0|0)<(9);
    $1984 = ($rank$0|0)<(9);
    $or$cond64 = $1983 & $1984;
    if ($or$cond64) {
     $$50178 = $1981;$dist6$0179 = $1982;$file5$0181 = $file5$0;$rank$0180 = $rank$0;$to$5182$in = $to$5182;
    } else {
     $$50$lcssa = $1981;
     break;
    }
   }
  } else {
   $$50$lcssa = $$49;
  }
 } while(0);
 $1985 = ($1966<<24>>24)!=(0);
 $or$cond66166 = $1985 & $1972;
 L420: do {
  if ($or$cond66166) {
   $$51167 = $$50$lcssa;$dist6$1168 = 1;$file5$1169$in = $1967;$rank$1170 = $rank$0174;$to$6171$in = $2;
   while(1) {
    $file5$1169 = (($file5$1169$in) + -1)|0;
    $to$6171 = (($to$6171$in) + 8)|0;
    $1986 = ((($__ptree__) + ($to$6171)|0) + 512|0);
    $1987 = HEAP8[$1986>>0]|0;
    $1988 = ($1987<<24>>24)==(0);
    if (!($1988)) {
     $$51$lcssa = $$51167;
     break L420;
    }
    $1989 = ($rank$1170|0)==(6);
    $$67$v = $1989 ? 1073752832 : 11008;
    $$67 = $$67$v | $to$6171;
    $1990 = ($dist6$1168|0)==(1);
    if ($1990) {
     $1991 = $to$6171 | 1073752832;
     $move4$3 = $1991;
    } else {
     $1992 = ($dist6$1168|0)>(2);
     $1993 = $$67 | -2147483648;
     $$$67 = $1992 ? $1993 : $$67;
     $move4$3 = $$$67;
    }
    $1994 = (($$51167) + 4|0);
    HEAP32[$$51167>>2] = $move4$3;
    $1995 = (($dist6$1168) + 1)|0;
    $rank$1 = (($rank$1170) + 1)|0;
    $1996 = ($file5$1169|0)>(0);
    $1997 = ($rank$1|0)<(9);
    $or$cond66 = $1996 & $1997;
    if ($or$cond66) {
     $$51167 = $1994;$dist6$1168 = $1995;$file5$1169$in = $file5$1169;$rank$1170 = $rank$1;$to$6171$in = $to$6171;
    } else {
     $$51$lcssa = $1994;
     break;
    }
   }
  } else {
   $$51$lcssa = $$50$lcssa;
  }
 } while(0);
 $1998 = ($1969<<24>>24)!=(0);
 $or$cond68155 = $1971 & $1998;
 L429: do {
  if ($or$cond68155) {
   $$52156 = $$51$lcssa;$dist6$2157 = 1;$file5$2160 = $file5$0175;$rank$2158$in = $1970;$to$7159$in = $2;
   while(1) {
    $rank$2158 = (($rank$2158$in) + -1)|0;
    $to$7159 = (($to$7159$in) + -8)|0;
    $1999 = ((($__ptree__) + ($to$7159)|0) + 512|0);
    $2000 = HEAP8[$1999>>0]|0;
    $2001 = ($2000<<24>>24)==(0);
    if (!($2001)) {
     $$52$lcssa = $$52156;
     break L429;
    }
    $2002 = ($dist6$2157|0)==(1);
    if ($2002) {
     $2003 = $to$7159 | 1073752832;
     $move4$4 = $2003;
    } else {
     $2004 = ($dist6$2157|0)>(2);
     $$69$v = $2004 ? -2147472640 : 11008;
     $$69 = $$69$v | $to$7159;
     $move4$4 = $$69;
    }
    $2005 = (($$52156) + 4|0);
    HEAP32[$$52156>>2] = $move4$4;
    $2006 = (($dist6$2157) + 1)|0;
    $file5$2 = (($file5$2160) + 1)|0;
    $2007 = ($file5$2|0)<(9);
    $2008 = ($rank$2158|0)>(0);
    $or$cond68 = $2007 & $2008;
    if ($or$cond68) {
     $$52156 = $2005;$dist6$2157 = $2006;$file5$2160 = $file5$2;$rank$2158$in = $rank$2158;$to$7159$in = $to$7159;
    } else {
     $$52$lcssa = $2005;
     break;
    }
   }
  } else {
   $$52$lcssa = $$51$lcssa;
  }
 } while(0);
 $or$cond70146 = $1985 & $1998;
 if ($or$cond70146) {
  $$53147 = $$52$lcssa;$dist6$3148 = 1;$file5$3150$in = $1967;$rank$3149$in = $1970;$to$8151$in = $2;
 } else {
  $$54 = $$52$lcssa;
  STACKTOP = sp;return ($$54|0);
 }
 while(1) {
  $rank$3149 = (($rank$3149$in) + -1)|0;
  $file5$3150 = (($file5$3150$in) + -1)|0;
  $to$8151 = (($to$8151$in) + -10)|0;
  $2009 = ((($__ptree__) + ($to$8151)|0) + 512|0);
  $2010 = HEAP8[$2009>>0]|0;
  $2011 = ($2010<<24>>24)==(0);
  if (!($2011)) {
   $$54 = $$53147;
   label = 299;
   break;
  }
  $2012 = ($dist6$3148|0)==(1);
  if ($2012) {
   $2013 = $to$8151 | 1073752832;
   $move4$5 = $2013;
  } else {
   $2014 = ($dist6$3148|0)>(2);
   $$71$v = $2014 ? -2147472640 : 11008;
   $$71 = $$71$v | $to$8151;
   $move4$5 = $$71;
  }
  $2015 = (($$53147) + 4|0);
  HEAP32[$$53147>>2] = $move4$5;
  $2016 = (($dist6$3148) + 1)|0;
  $2017 = ($file5$3150|0)>(0);
  $2018 = ($rank$3149|0)>(0);
  $or$cond70 = $2017 & $2018;
  if ($or$cond70) {
   $$53147 = $2015;$dist6$3148 = $2016;$file5$3150$in = $file5$3150;$rank$3149$in = $rank$3149;$to$8151$in = $to$8151;
  } else {
   $$54 = $2015;
   label = 299;
   break;
  }
 }
 if ((label|0) == 299) {
  STACKTOP = sp;return ($$54|0);
 }
 return 0|0;
}
function _b_have_checks($__ptree__) {
 $__ptree__ = $__ptree__|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pr76 = 0, $$pr78 = 0, $$pre = 0, $$pre122 = 0, $$pre123 = 0, $$pre124 = 0, $$pre125 = 0, $$pre126 = 0, $$pre132 = 0, $$pre133 = 0, $$pre134 = 0, $$pre135 = 0, $$sink = 0, $$sink80 = 0, $$sink81 = 0, $$sink82 = 0, $$sink83 = 0, $$sink84 = 0;
 var $$sink85 = 0, $$sink86 = 0, $$sink87 = 0, $$sink88 = 0, $$sink89 = 0, $$sink90 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0;
 var $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0;
 var $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0;
 var $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0;
 var $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0;
 var $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0;
 var $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0;
 var $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0;
 var $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0;
 var $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0;
 var $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0;
 var $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0;
 var $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0;
 var $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0;
 var $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0;
 var $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bb_piece$sroa$0$0 = 0, $bb_piece$sroa$0$1 = 0, $bb_piece$sroa$0$2 = 0, $bb_piece$sroa$0$3 = 0, $bb_piece$sroa$0$4 = 0, $bb_piece$sroa$0$5102 = 0, $bb_piece$sroa$0$696 = 0, $bb_piece$sroa$0$791 = 0, $bb_piece$sroa$1$0 = 0, $bb_piece$sroa$1$1 = 0;
 var $bb_piece$sroa$1$2 = 0, $bb_piece$sroa$1$3 = 0, $bb_piece$sroa$1$4 = 0, $bb_piece$sroa$1$5103 = 0, $bb_piece$sroa$1$697 = 0, $bb_piece$sroa$1$792 = 0, $bb_piece$sroa$2$0 = 0, $bb_piece$sroa$2$1 = 0, $bb_piece$sroa$2$2 = 0, $bb_piece$sroa$2$3 = 0, $bb_piece$sroa$2$4 = 0, $bb_piece$sroa$2$5104 = 0, $bb_piece$sroa$2$698 = 0, $bb_piece$sroa$2$793 = 0, $bb_tmp$sroa$0$0$i = 0, $bb_tmp$sroa$0$0$i12 = 0, $bb_tmp$sroa$0$0$i19 = 0, $bb_tmp$sroa$0$0$i26 = 0, $bb_tmp$sroa$0$0$i33 = 0, $bb_tmp$sroa$0$0$i40 = 0;
 var $bb_tmp$sroa$0$0$i47 = 0, $bb_tmp$sroa$0$0$i5 = 0, $bb_tmp$sroa$0$0$i54 = 0, $bb_tmp$sroa$0$0$i61 = 0, $bb_tmp$sroa$0$0$i68 = 0, $bb_tmp$sroa$0$0$in$i = 0, $bb_tmp$sroa$0$0$in$i11 = 0, $bb_tmp$sroa$0$0$in$i18 = 0, $bb_tmp$sroa$0$0$in$i25 = 0, $bb_tmp$sroa$0$0$in$i32 = 0, $bb_tmp$sroa$0$0$in$i39 = 0, $bb_tmp$sroa$0$0$in$i4 = 0, $bb_tmp$sroa$0$0$in$i46 = 0, $bb_tmp$sroa$0$0$in$i53 = 0, $bb_tmp$sroa$0$0$in$i60 = 0, $bb_tmp$sroa$0$0$in$i67 = 0, $bb_tmp$sroa$1$0$i = 0, $bb_tmp$sroa$1$0$i13 = 0, $bb_tmp$sroa$1$0$i20 = 0, $bb_tmp$sroa$1$0$i34 = 0;
 var $bb_tmp$sroa$1$0$i48 = 0, $bb_tmp$sroa$1$0$i55 = 0, $bb_tmp$sroa$1$0$i6 = 0, $bb_tmp$sroa$1$0$i62 = 0, $bb_tmp$sroa$1$0$i69 = 0, $bb_tmp$sroa$1$0$in$i = 0, $bb_tmp$sroa$1$0$in$i10 = 0, $bb_tmp$sroa$1$0$in$i17 = 0, $bb_tmp$sroa$1$0$in$i3 = 0, $bb_tmp$sroa$1$0$in$i31 = 0, $bb_tmp$sroa$1$0$in$i45 = 0, $bb_tmp$sroa$1$0$in$i52 = 0, $bb_tmp$sroa$1$0$in$i59 = 0, $bb_tmp$sroa$1$0$in$i66 = 0, $bb_tmp$sroa$2$0$i = 0, $bb_tmp$sroa$2$0$i14 = 0, $bb_tmp$sroa$2$0$i21 = 0, $bb_tmp$sroa$2$0$i35 = 0, $bb_tmp$sroa$2$0$i56 = 0, $bb_tmp$sroa$2$0$i63 = 0;
 var $bb_tmp$sroa$2$0$i7 = 0, $bb_tmp$sroa$2$0$i70 = 0, $bb_tmp$sroa$2$0$in$i = 0, $bb_tmp$sroa$2$0$in$i16 = 0, $bb_tmp$sroa$2$0$in$i2 = 0, $bb_tmp$sroa$2$0$in$i30 = 0, $bb_tmp$sroa$2$0$in$i51 = 0, $bb_tmp$sroa$2$0$in$i58 = 0, $bb_tmp$sroa$2$0$in$i65 = 0, $bb_tmp$sroa$2$0$in$i9 = 0, $or$cond = 0, $or$cond1 = 0, $u0$0 = 0, $u0$1 = 0, $u0$2 = 0, $u0$3 = 0, $u1$0 = 0, $u1$1 = 0, $u1$2 = 0, $u1$3 = 0;
 var $u1$4 = 0, $u1$5 = 0, $u2$0 = 0, $u2$1 = 0, $u2$2 = 0, $u2$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__ptree__) + 594|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($__ptree__) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($__ptree__) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 | $4;
 $8 = (($__ptree__) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($__ptree__) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 | $9;
 $13 = (($__ptree__) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($__ptree__) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 | $14;
 $18 = $7 ^ -1;
 $19 = $12 ^ -1;
 $20 = $17 ^ -1;
 $21 = (($__ptree__) + 500|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & 114688;
 $24 = ($23|0)==(0);
 if (!($24)) {
  $25 = (33577952 + (($2*12)|0)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & $18;
  $28 = ((33577952 + (($2*12)|0)|0) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 & $19;
  $31 = ((33577952 + (($2*12)|0)|0) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 & $20;
  $34 = $30 | $27;
  $35 = $34 | $33;
  $36 = ($35|0)==(0);
  if (!($36)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $37 = $22 & 14336;
 $38 = ($37|0)==(0);
 if (!($38)) {
  $39 = (33576976 + (($2*12)|0)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 & $18;
  $42 = ((33576976 + (($2*12)|0)|0) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $43 & $19;
  $45 = ((33576976 + (($2*12)|0)|0) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $46 & $20;
  $48 = $44 | $41;
  $49 = $48 | $47;
  $50 = ($49|0)==(0);
  if (!($50)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $51 = $22 & 1792;
 $52 = ($51|0)!=(0);
 $53 = ($1&255)<(63);
 $or$cond = $52 & $53;
 L9: do {
  if ($or$cond) {
   $54 = (1248 + ($2)|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = ($55<<24>>24)==(0);
   do {
    if (!($56)) {
     $57 = (($2) + 17)|0;
     $58 = ((($__ptree__) + ($57)|0) + 512|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = ($59<<24>>24)==(0);
     if ($60) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     } else {
      $61 = ($55<<24>>24)==(8);
      if ($61) {
       break L9;
      } else {
       break;
      }
     }
    }
   } while(0);
   $62 = (($2) + 19)|0;
   $63 = ((($__ptree__) + ($62)|0) + 512|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = ($64<<24>>24)==(0);
   if ($65) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $66 = $22 & 224;
 $67 = ($66|0)==(0);
 if (!($67)) {
  $68 = (($2) + 9)|0;
  $69 = ($68>>>0)<(81);
  if ($69) {
   $70 = ((($__ptree__) + ($68)|0) + 512|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = ($71<<24>>24)==(0);
   if ($72) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $73 = $22 & 1572864;
 $74 = ($73|0)==(0);
 if (!($74)) {
  $75 = (($2) + 9)|0;
  $76 = ($75>>>0)<(81);
  if ($76) {
   $77 = ((($__ptree__) + ($75)|0) + 512|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = ($78<<24>>24)==(0);
   if ($79) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $80 = (1248 + ($2)|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = ($81<<24>>24)==(0);
  do {
   if ($82) {
    label = 19;
   } else {
    $83 = (($2) + -1)|0;
    $84 = ((($__ptree__) + ($83)|0) + 512|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = ($85<<24>>24)==(0);
    if ($86) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    } else {
     $87 = ($81&255)<(8);
     if ($87) {
      label = 19;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   $88 = (($2) + 1)|0;
   $89 = ((($__ptree__) + ($88)|0) + 512|0);
   $90 = HEAP8[$89>>0]|0;
   $91 = ($90<<24>>24)==(0);
   if ($91) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $92 = (($2) + -9)|0;
  $93 = ($92|0)>(-1);
  if ($93) {
   $94 = ((($__ptree__) + ($92)|0) + 512|0);
   $95 = HEAP8[$94>>0]|0;
   $96 = ($95<<24>>24)==(0);
   if ($96) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $97 = $22 & 393216;
 $98 = ($97|0)==(0);
 do {
  if (!($98)) {
   $99 = (1248 + ($2)|0);
   $100 = HEAP8[$99>>0]|0;
   $101 = ($100<<24>>24)==(0);
   $$phi$trans$insert = (1336 + ($2)|0);
   $$pre135 = HEAP8[$$phi$trans$insert>>0]|0;
   if ($101) {
    $$pr76 = 0;
    label = 27;
   } else {
    $102 = ($$pre135<<24>>24)==(0);
    if (!($102)) {
     $103 = (($2) + -10)|0;
     $104 = ((($__ptree__) + ($103)|0) + 512|0);
     $105 = HEAP8[$104>>0]|0;
     $106 = ($105<<24>>24)==(0);
     if ($106) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $107 = ($100&255)<(8);
    if ($107) {
     $$pr76 = $100;
     label = 27;
    } else {
     $$pr78 = $100;
     label = 30;
    }
   }
   if ((label|0) == 27) {
    $108 = ($$pre135<<24>>24)==(0);
    if (!($108)) {
     $109 = (($2) + -8)|0;
     $110 = ((($__ptree__) + ($109)|0) + 512|0);
     $111 = HEAP8[$110>>0]|0;
     $112 = ($111<<24>>24)==(0);
     if ($112) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $113 = ($$pr76<<24>>24)==(0);
    if (!($113)) {
     $$pr78 = $$pr76;
     label = 30;
    }
   }
   if ((label|0) == 30) {
    $114 = ($$pre135&255)<(8);
    if ($114) {
     $115 = (($2) + 8)|0;
     $116 = ((($__ptree__) + ($115)|0) + 512|0);
     $117 = HEAP8[$116>>0]|0;
     $118 = ($117<<24>>24)==(0);
     if ($118) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $119 = ($$pr78&255)<(8);
    if (!($119)) {
     break;
    }
   }
   $120 = ($$pre135&255)<(8);
   if ($120) {
    $121 = (($2) + 10)|0;
    $122 = ((($__ptree__) + ($121)|0) + 512|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = ($123<<24>>24)==(0);
    if ($124) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $125 = $22 & 31;
 $126 = ($125|0)!=(0);
 $127 = ($1&255)<(72);
 $or$cond1 = $126 & $127;
 do {
  if ($or$cond1) {
   $128 = (($2) + 9)|0;
   $129 = ((($__ptree__) + ($128)|0) + 512|0);
   $130 = HEAP8[$129>>0]|0;
   $131 = ($130<<24>>24)==(0);
   if ($131) {
    $132 = (($__ptree__) + 356|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (($__ptree__) + 360|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $135 | $133;
    $137 = (($__ptree__) + 364|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = $136 | $138;
    $140 = (1248 + ($2)|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141&255;
    $143 = 67240192 >>> $142;
    $144 = $143 & $139;
    $145 = ($144|0)==(0);
    if ($145) {
     $146 = (_is_mate_b_pawn_drop($__ptree__,$128)|0);
     $147 = ($146|0)==(0);
     if ($147) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$pre132 = HEAP32[$3>>2]|0;
      $$pre133 = HEAP32[$8>>2]|0;
      $$pre134 = HEAP32[$13>>2]|0;
      $222 = $$pre132;$224 = $$pre133;$226 = $$pre134;
      break;
     }
    } else {
     $222 = $4;$224 = $9;$226 = $14;
    }
   } else {
    $222 = $4;$224 = $9;$226 = $14;
   }
  } else {
   $222 = $4;$224 = $9;$226 = $14;
  }
 } while(0);
 $148 = ((33572424 + ($2<<3)|0) + 2|0);
 $149 = HEAP8[$148>>0]|0;
 $150 = $149&255;
 $151 = ((($__ptree__) + ($150<<2)|0) + 32|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = ((33572424 + ($2<<3)|0) + 3|0);
 $154 = HEAP8[$153>>0]|0;
 $155 = $154&255;
 $156 = $152 >>> $155;
 $157 = $156 & 127;
 $158 = ((33953152 + (($2*1536)|0)|0) + (($157*12)|0)|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = (((33953152 + (($2*1536)|0)|0) + (($157*12)|0)|0) + 4|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = (((33953152 + (($2*1536)|0)|0) + (($157*12)|0)|0) + 8|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = (33572424 + ($2<<3)|0);
 $165 = HEAP8[$164>>0]|0;
 $166 = $165&255;
 $167 = ((($__ptree__) + ($166<<2)|0) + 8|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = ((($__ptree__) + ($166<<2)|0) + 20|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = $170 | $168;
 $172 = ((33572424 + ($2<<3)|0) + 1|0);
 $173 = HEAP8[$172>>0]|0;
 $174 = $173&255;
 $175 = $171 >>> $174;
 $176 = $175 & 127;
 $177 = ((33828736 + (($2*1536)|0)|0) + (($176*12)|0)|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = (((33828736 + (($2*1536)|0)|0) + (($176*12)|0)|0) + 4|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = (((33828736 + (($2*1536)|0)|0) + (($176*12)|0)|0) + 8|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = $178 | $159;
 $184 = $180 | $161;
 $185 = $182 | $163;
 $186 = ((33572424 + ($2<<3)|0) + 6|0);
 $187 = HEAP8[$186>>0]|0;
 $188 = $187&255;
 $189 = ((($__ptree__) + ($188<<2)|0) + 56|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = ((33572424 + ($2<<3)|0) + 7|0);
 $192 = HEAP8[$191>>0]|0;
 $193 = $192&255;
 $194 = $190 >>> $193;
 $195 = $194 & 127;
 $196 = ((33704320 + (($2*1536)|0)|0) + (($195*12)|0)|0);
 $197 = HEAP32[$196>>2]|0;
 $198 = (((33704320 + (($2*1536)|0)|0) + (($195*12)|0)|0) + 4|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = (((33704320 + (($2*1536)|0)|0) + (($195*12)|0)|0) + 8|0);
 $201 = HEAP32[$200>>2]|0;
 $202 = ((33572424 + ($2<<3)|0) + 4|0);
 $203 = HEAP8[$202>>0]|0;
 $204 = $203&255;
 $205 = ((($__ptree__) + ($204<<2)|0) + 44|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = ((33572424 + ($2<<3)|0) + 5|0);
 $208 = HEAP8[$207>>0]|0;
 $209 = $208&255;
 $210 = $206 >>> $209;
 $211 = $210 & 127;
 $212 = ((33579904 + (($2*1536)|0)|0) + (($211*12)|0)|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = (((33579904 + (($2*1536)|0)|0) + (($211*12)|0)|0) + 4|0);
 $215 = HEAP32[$214>>2]|0;
 $216 = (((33579904 + (($2*1536)|0)|0) + (($211*12)|0)|0) + 8|0);
 $217 = HEAP32[$216>>2]|0;
 $218 = $213 | $197;
 $219 = $215 | $199;
 $220 = $217 | $201;
 $221 = $222 ^ -1;
 $223 = $224 ^ -1;
 $225 = $226 ^ -1;
 $227 = (($__ptree__) + 593|0);
 $228 = HEAP8[$227>>0]|0;
 $229 = $228&255;
 $230 = ((220518304 + (($2*81)|0)|0) + ($229)|0);
 $231 = HEAP8[$230>>0]|0;
 $232 = $231&255;
 $233 = ($231<<24>>24)==(0);
 if (!($233)) {
  $234 = (_is_pinned_on_white_king($__ptree__,$229,$232)|0);
  $235 = ($234|0)==(0);
  if (!($235)) {
   if ((($232|0) == 2)) {
    $242 = (33953152 + (($2*1536)|0)|0);
    $243 = ((33953152 + (($2*1536)|0)|0) + 4|0);
    $244 = ((33953152 + (($2*1536)|0)|0) + 8|0);
    $bb_tmp$sroa$0$0$in$i = $242;$bb_tmp$sroa$1$0$in$i = $243;$bb_tmp$sroa$2$0$in$i = $244;
   } else if ((($232|0) == 5)) {
    $239 = (33579904 + (($2*1536)|0)|0);
    $240 = ((33579904 + (($2*1536)|0)|0) + 4|0);
    $241 = ((33579904 + (($2*1536)|0)|0) + 8|0);
    $bb_tmp$sroa$0$0$in$i = $239;$bb_tmp$sroa$1$0$in$i = $240;$bb_tmp$sroa$2$0$in$i = $241;
   } else if ((($232|0) == 4)) {
    $236 = (33704320 + (($2*1536)|0)|0);
    $237 = ((33704320 + (($2*1536)|0)|0) + 4|0);
    $238 = ((33704320 + (($2*1536)|0)|0) + 8|0);
    $bb_tmp$sroa$0$0$in$i = $236;$bb_tmp$sroa$1$0$in$i = $237;$bb_tmp$sroa$2$0$in$i = $238;
   } else {
    $245 = (33828736 + (($2*1536)|0)|0);
    $246 = ((33828736 + (($2*1536)|0)|0) + 4|0);
    $247 = ((33828736 + (($2*1536)|0)|0) + 8|0);
    $bb_tmp$sroa$0$0$in$i = $245;$bb_tmp$sroa$1$0$in$i = $246;$bb_tmp$sroa$2$0$in$i = $247;
   }
   $bb_tmp$sroa$0$0$i = HEAP32[$bb_tmp$sroa$0$0$in$i>>2]|0;
   $bb_tmp$sroa$1$0$i = HEAP32[$bb_tmp$sroa$1$0$in$i>>2]|0;
   $bb_tmp$sroa$2$0$i = HEAP32[$bb_tmp$sroa$2$0$in$i>>2]|0;
   $248 = $bb_tmp$sroa$0$0$i ^ -1;
   $249 = $bb_tmp$sroa$1$0$i ^ -1;
   $250 = $bb_tmp$sroa$2$0$i ^ -1;
   $251 = (33578928 + (($229*12)|0)|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = ((33578928 + (($229*12)|0)|0) + 4|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = ((33578928 + (($229*12)|0)|0) + 8|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = $248 & $221;
   $258 = $257 & $252;
   $259 = $249 & $223;
   $260 = $259 & $254;
   $261 = $250 & $225;
   $262 = $261 & $256;
   $263 = $260 | $258;
   $264 = $263 | $262;
   $265 = ($264|0)==(0);
   if (!($265)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $266 = (($__ptree__) + 332|0);
 $267 = HEAP32[$266>>2]|0;
 $268 = (($__ptree__) + 336|0);
 $269 = HEAP32[$268>>2]|0;
 $270 = (($__ptree__) + 340|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = (33578928 + (($2*12)|0)|0);
 $273 = ((33578928 + (($2*12)|0)|0) + 4|0);
 $274 = ((33578928 + (($2*12)|0)|0) + 8|0);
 $275 = (33828736 + (($2*1536)|0)|0);
 $276 = ((33828736 + (($2*1536)|0)|0) + 4|0);
 $277 = ((33828736 + (($2*1536)|0)|0) + 8|0);
 $278 = (33704320 + (($2*1536)|0)|0);
 $279 = ((33704320 + (($2*1536)|0)|0) + 4|0);
 $280 = ((33704320 + (($2*1536)|0)|0) + 8|0);
 $281 = (33579904 + (($2*1536)|0)|0);
 $282 = ((33579904 + (($2*1536)|0)|0) + 4|0);
 $283 = ((33579904 + (($2*1536)|0)|0) + 8|0);
 $284 = (33953152 + (($2*1536)|0)|0);
 $285 = ((33953152 + (($2*1536)|0)|0) + 4|0);
 $286 = ((33953152 + (($2*1536)|0)|0) + 8|0);
 $bb_piece$sroa$0$0 = $267;$bb_piece$sroa$1$0 = $269;$bb_piece$sroa$2$0 = $271;
 while(1) {
  $287 = $bb_piece$sroa$1$0 | $bb_piece$sroa$0$0;
  $288 = $287 | $bb_piece$sroa$2$0;
  $289 = ($288|0)==(0);
  if ($289) {
   break;
  }
  $290 = (_last_one210($bb_piece$sroa$2$0,$bb_piece$sroa$1$0,$bb_piece$sroa$0$0)|0);
  $291 = (34156304 + (($290*12)|0)|0);
  $292 = HEAP32[$291>>2]|0;
  $293 = $292 ^ $bb_piece$sroa$0$0;
  $294 = ((34156304 + (($290*12)|0)|0) + 4|0);
  $295 = HEAP32[$294>>2]|0;
  $296 = $295 ^ $bb_piece$sroa$1$0;
  $297 = ((34156304 + (($290*12)|0)|0) + 8|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = $298 ^ $bb_piece$sroa$2$0;
  $300 = HEAP32[$272>>2]|0;
  $301 = $300 | $183;
  $302 = HEAP32[$273>>2]|0;
  $303 = $302 | $184;
  $304 = HEAP32[$274>>2]|0;
  $305 = $304 | $185;
  $306 = ((220518304 + (($2*81)|0)|0) + ($290)|0);
  $307 = HEAP8[$306>>0]|0;
  $308 = $307&255;
  $309 = ($307<<24>>24)==(0);
  if ($309) {
   $366 = $301;$369 = $303;$372 = $305;
  } else {
   $310 = (_is_pinned_on_white_king($__ptree__,$290,$308)|0);
   $311 = ($310|0)==(0);
   if ($311) {
    $366 = $301;$369 = $303;$372 = $305;
   } else {
    if ((($308|0) == 2)) {
     $bb_tmp$sroa$0$0$in$i67 = $284;$bb_tmp$sroa$1$0$in$i66 = $285;$bb_tmp$sroa$2$0$in$i65 = $286;
    } else if ((($308|0) == 5)) {
     $bb_tmp$sroa$0$0$in$i67 = $281;$bb_tmp$sroa$1$0$in$i66 = $282;$bb_tmp$sroa$2$0$in$i65 = $283;
    } else if ((($308|0) == 4)) {
     $bb_tmp$sroa$0$0$in$i67 = $278;$bb_tmp$sroa$1$0$in$i66 = $279;$bb_tmp$sroa$2$0$in$i65 = $280;
    } else {
     $bb_tmp$sroa$0$0$in$i67 = $275;$bb_tmp$sroa$1$0$in$i66 = $276;$bb_tmp$sroa$2$0$in$i65 = $277;
    }
    $bb_tmp$sroa$0$0$i68 = HEAP32[$bb_tmp$sroa$0$0$in$i67>>2]|0;
    $bb_tmp$sroa$1$0$i69 = HEAP32[$bb_tmp$sroa$1$0$in$i66>>2]|0;
    $bb_tmp$sroa$2$0$i70 = HEAP32[$bb_tmp$sroa$2$0$in$i65>>2]|0;
    $312 = $bb_tmp$sroa$0$0$i68 ^ -1;
    $313 = $bb_tmp$sroa$1$0$i69 ^ -1;
    $314 = $bb_tmp$sroa$2$0$i70 ^ -1;
    $315 = $301 | $312;
    $316 = $303 | $313;
    $317 = $305 | $314;
    $366 = $315;$369 = $316;$372 = $317;
   }
  }
  $318 = ((33572424 + ($290<<3)|0) + 2|0);
  $319 = HEAP8[$318>>0]|0;
  $320 = $319&255;
  $321 = ((($__ptree__) + ($320<<2)|0) + 32|0);
  $322 = HEAP32[$321>>2]|0;
  $323 = ((33572424 + ($290<<3)|0) + 3|0);
  $324 = HEAP8[$323>>0]|0;
  $325 = $324&255;
  $326 = $322 >>> $325;
  $327 = $326 & 127;
  $328 = ((33953152 + (($290*1536)|0)|0) + (($327*12)|0)|0);
  $329 = HEAP32[$328>>2]|0;
  $330 = (33572424 + ($290<<3)|0);
  $331 = HEAP8[$330>>0]|0;
  $332 = $331&255;
  $333 = ((($__ptree__) + ($332<<2)|0) + 8|0);
  $334 = HEAP32[$333>>2]|0;
  $335 = ((($__ptree__) + ($332<<2)|0) + 20|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = $336 | $334;
  $338 = ((33572424 + ($290<<3)|0) + 1|0);
  $339 = HEAP8[$338>>0]|0;
  $340 = $339&255;
  $341 = $337 >>> $340;
  $342 = $341 & 127;
  $343 = ((33828736 + (($290*1536)|0)|0) + (($342*12)|0)|0);
  $344 = HEAP32[$343>>2]|0;
  $345 = $344 | $329;
  $346 = (((33953152 + (($290*1536)|0)|0) + (($327*12)|0)|0) + 4|0);
  $347 = HEAP32[$346>>2]|0;
  $348 = (((33828736 + (($290*1536)|0)|0) + (($342*12)|0)|0) + 4|0);
  $349 = HEAP32[$348>>2]|0;
  $350 = $349 | $347;
  $351 = (((33953152 + (($290*1536)|0)|0) + (($327*12)|0)|0) + 8|0);
  $352 = HEAP32[$351>>2]|0;
  $353 = (((33828736 + (($290*1536)|0)|0) + (($342*12)|0)|0) + 8|0);
  $354 = HEAP32[$353>>2]|0;
  $355 = $354 | $352;
  $356 = (33578928 + (($290*12)|0)|0);
  $357 = HEAP32[$356>>2]|0;
  $358 = $345 | $357;
  $359 = ((33578928 + (($290*12)|0)|0) + 4|0);
  $360 = HEAP32[$359>>2]|0;
  $361 = $350 | $360;
  $362 = ((33578928 + (($290*12)|0)|0) + 8|0);
  $363 = HEAP32[$362>>2]|0;
  $364 = $355 | $363;
  $365 = $366 & $221;
  $367 = $365 & $358;
  $368 = $369 & $223;
  $370 = $368 & $361;
  $371 = $372 & $225;
  $373 = $371 & $364;
  $374 = $370 | $367;
  $375 = $374 | $373;
  $376 = ($375|0)==(0);
  if ($376) {
   $bb_piece$sroa$0$0 = $293;$bb_piece$sroa$1$0 = $296;$bb_piece$sroa$2$0 = $299;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $377 = (($__ptree__) + 308|0);
 $378 = HEAP32[$377>>2]|0;
 $379 = (($__ptree__) + 312|0);
 $380 = HEAP32[$379>>2]|0;
 $381 = (($__ptree__) + 316|0);
 $382 = HEAP32[$381>>2]|0;
 $bb_piece$sroa$0$1 = $378;$bb_piece$sroa$1$1 = $380;$bb_piece$sroa$2$1 = $382;
 while(1) {
  $383 = $bb_piece$sroa$1$1 | $bb_piece$sroa$0$1;
  $384 = $383 | $bb_piece$sroa$2$1;
  $385 = ($384|0)==(0);
  if ($385) {
   break;
  }
  $386 = (_last_one210($bb_piece$sroa$2$1,$bb_piece$sroa$1$1,$bb_piece$sroa$0$1)|0);
  $387 = (34156304 + (($386*12)|0)|0);
  $388 = HEAP32[$387>>2]|0;
  $389 = $388 ^ $bb_piece$sroa$0$1;
  $390 = ((34156304 + (($386*12)|0)|0) + 4|0);
  $391 = HEAP32[$390>>2]|0;
  $392 = $391 ^ $bb_piece$sroa$1$1;
  $393 = ((34156304 + (($386*12)|0)|0) + 8|0);
  $394 = HEAP32[$393>>2]|0;
  $395 = $394 ^ $bb_piece$sroa$2$1;
  $396 = HEAP32[$272>>2]|0;
  $397 = $396 | $218;
  $398 = HEAP32[$273>>2]|0;
  $399 = $398 | $219;
  $400 = HEAP32[$274>>2]|0;
  $401 = $400 | $220;
  $402 = ((220518304 + (($2*81)|0)|0) + ($386)|0);
  $403 = HEAP8[$402>>0]|0;
  $404 = $403&255;
  $405 = ($403<<24>>24)==(0);
  if ($405) {
   $459 = $397;$462 = $399;$465 = $401;
  } else {
   $406 = (_is_pinned_on_white_king($__ptree__,$386,$404)|0);
   $407 = ($406|0)==(0);
   if ($407) {
    $459 = $397;$462 = $399;$465 = $401;
   } else {
    if ((($404|0) == 4)) {
     $bb_tmp$sroa$0$0$in$i60 = $278;$bb_tmp$sroa$1$0$in$i59 = $279;$bb_tmp$sroa$2$0$in$i58 = $280;
    } else if ((($404|0) == 5)) {
     $bb_tmp$sroa$0$0$in$i60 = $281;$bb_tmp$sroa$1$0$in$i59 = $282;$bb_tmp$sroa$2$0$in$i58 = $283;
    } else if ((($404|0) == 2)) {
     $bb_tmp$sroa$0$0$in$i60 = $284;$bb_tmp$sroa$1$0$in$i59 = $285;$bb_tmp$sroa$2$0$in$i58 = $286;
    } else {
     $bb_tmp$sroa$0$0$in$i60 = $275;$bb_tmp$sroa$1$0$in$i59 = $276;$bb_tmp$sroa$2$0$in$i58 = $277;
    }
    $bb_tmp$sroa$0$0$i61 = HEAP32[$bb_tmp$sroa$0$0$in$i60>>2]|0;
    $bb_tmp$sroa$1$0$i62 = HEAP32[$bb_tmp$sroa$1$0$in$i59>>2]|0;
    $bb_tmp$sroa$2$0$i63 = HEAP32[$bb_tmp$sroa$2$0$in$i58>>2]|0;
    $408 = $bb_tmp$sroa$0$0$i61 ^ -1;
    $409 = $bb_tmp$sroa$1$0$i62 ^ -1;
    $410 = $bb_tmp$sroa$2$0$i63 ^ -1;
    $411 = $397 | $408;
    $412 = $399 | $409;
    $413 = $401 | $410;
    $459 = $411;$462 = $412;$465 = $413;
   }
  }
  $414 = ((33572424 + ($386<<3)|0) + 6|0);
  $415 = HEAP8[$414>>0]|0;
  $416 = $415&255;
  $417 = ((($__ptree__) + ($416<<2)|0) + 56|0);
  $418 = HEAP32[$417>>2]|0;
  $419 = ((33572424 + ($386<<3)|0) + 7|0);
  $420 = HEAP8[$419>>0]|0;
  $421 = $420&255;
  $422 = $418 >>> $421;
  $423 = $422 & 127;
  $424 = ((33704320 + (($386*1536)|0)|0) + (($423*12)|0)|0);
  $425 = HEAP32[$424>>2]|0;
  $426 = ((33572424 + ($386<<3)|0) + 4|0);
  $427 = HEAP8[$426>>0]|0;
  $428 = $427&255;
  $429 = ((($__ptree__) + ($428<<2)|0) + 44|0);
  $430 = HEAP32[$429>>2]|0;
  $431 = ((33572424 + ($386<<3)|0) + 5|0);
  $432 = HEAP8[$431>>0]|0;
  $433 = $432&255;
  $434 = $430 >>> $433;
  $435 = $434 & 127;
  $436 = ((33579904 + (($386*1536)|0)|0) + (($435*12)|0)|0);
  $437 = HEAP32[$436>>2]|0;
  $438 = $437 | $425;
  $439 = (((33704320 + (($386*1536)|0)|0) + (($423*12)|0)|0) + 4|0);
  $440 = HEAP32[$439>>2]|0;
  $441 = (((33579904 + (($386*1536)|0)|0) + (($435*12)|0)|0) + 4|0);
  $442 = HEAP32[$441>>2]|0;
  $443 = $442 | $440;
  $444 = (((33704320 + (($386*1536)|0)|0) + (($423*12)|0)|0) + 8|0);
  $445 = HEAP32[$444>>2]|0;
  $446 = (((33579904 + (($386*1536)|0)|0) + (($435*12)|0)|0) + 8|0);
  $447 = HEAP32[$446>>2]|0;
  $448 = $447 | $445;
  $449 = (33578928 + (($386*12)|0)|0);
  $450 = HEAP32[$449>>2]|0;
  $451 = $438 | $450;
  $452 = ((33578928 + (($386*12)|0)|0) + 4|0);
  $453 = HEAP32[$452>>2]|0;
  $454 = $443 | $453;
  $455 = ((33578928 + (($386*12)|0)|0) + 8|0);
  $456 = HEAP32[$455>>2]|0;
  $457 = $448 | $456;
  $458 = $459 & $221;
  $460 = $458 & $451;
  $461 = $462 & $223;
  $463 = $461 & $454;
  $464 = $465 & $225;
  $466 = $464 & $457;
  $467 = $463 | $460;
  $468 = $467 | $466;
  $469 = ($468|0)==(0);
  if ($469) {
   $bb_piece$sroa$0$1 = $389;$bb_piece$sroa$1$1 = $392;$bb_piece$sroa$2$1 = $395;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $470 = (($__ptree__) + 288|0);
 $471 = HEAP32[$470>>2]|0;
 $472 = (($__ptree__) + 292|0);
 $473 = HEAP32[$472>>2]|0;
 $u1$0 = $471;$u2$0 = $473;
 while(1) {
  $474 = $u2$0 | $u1$0;
  $475 = ($474|0)==(0);
  if ($475) {
   break;
  }
  $476 = (_last_one12($u1$0,$u2$0)|0);
  $477 = ((34156304 + (($476*12)|0)|0) + 4|0);
  $478 = HEAP32[$477>>2]|0;
  $479 = $478 ^ $u1$0;
  $480 = ((34156304 + (($476*12)|0)|0) + 8|0);
  $481 = HEAP32[$480>>2]|0;
  $482 = $481 ^ $u2$0;
  $483 = ((33572424 + ($476<<3)|0) + 2|0);
  $484 = HEAP8[$483>>0]|0;
  $485 = $484&255;
  $486 = ((($__ptree__) + ($485<<2)|0) + 32|0);
  $487 = HEAP32[$486>>2]|0;
  $488 = ((33572424 + ($476<<3)|0) + 3|0);
  $489 = HEAP8[$488>>0]|0;
  $490 = $489&255;
  $491 = $487 >>> $490;
  $492 = $491 & 127;
  $493 = ((33953152 + (($476*1536)|0)|0) + (($492*12)|0)|0);
  $494 = HEAP32[$493>>2]|0;
  $495 = (33572424 + ($476<<3)|0);
  $496 = HEAP8[$495>>0]|0;
  $497 = $496&255;
  $498 = ((($__ptree__) + ($497<<2)|0) + 8|0);
  $499 = HEAP32[$498>>2]|0;
  $500 = ((($__ptree__) + ($497<<2)|0) + 20|0);
  $501 = HEAP32[$500>>2]|0;
  $502 = $501 | $499;
  $503 = ((33572424 + ($476<<3)|0) + 1|0);
  $504 = HEAP8[$503>>0]|0;
  $505 = $504&255;
  $506 = $502 >>> $505;
  $507 = $506 & 127;
  $508 = ((33828736 + (($476*1536)|0)|0) + (($507*12)|0)|0);
  $509 = HEAP32[$508>>2]|0;
  $510 = $509 | $494;
  $511 = (((33953152 + (($476*1536)|0)|0) + (($492*12)|0)|0) + 4|0);
  $512 = HEAP32[$511>>2]|0;
  $513 = (((33828736 + (($476*1536)|0)|0) + (($507*12)|0)|0) + 4|0);
  $514 = HEAP32[$513>>2]|0;
  $515 = $514 | $512;
  $516 = (((33953152 + (($476*1536)|0)|0) + (($492*12)|0)|0) + 8|0);
  $517 = HEAP32[$516>>2]|0;
  $518 = (((33828736 + (($476*1536)|0)|0) + (($507*12)|0)|0) + 8|0);
  $519 = HEAP32[$518>>2]|0;
  $520 = $519 | $517;
  $521 = ((220518304 + (($2*81)|0)|0) + ($476)|0);
  $522 = HEAP8[$521>>0]|0;
  $523 = ($522<<24>>24)==(0);
  if ($523) {
   label = 72;
  } else {
   $524 = $522&255;
   $525 = (_is_pinned_on_white_king($__ptree__,$476,$524)|0);
   $526 = ($525|0)==(0);
   if ($526) {
    label = 72;
   } else {
    $$sink = $520;$$sink80 = $515;$$sink81 = $510;
   }
  }
  if ((label|0) == 72) {
   label = 0;
   $527 = HEAP32[$272>>2]|0;
   $528 = $527 | $183;
   $529 = $528 & $510;
   $530 = $515 & $184;
   $531 = $520 & $185;
   $$sink = $531;$$sink80 = $530;$$sink81 = $529;
  }
  $532 = $$sink81 & $221;
  $533 = $$sink80 & $223;
  $534 = $$sink & $225;
  $535 = $533 | $532;
  $536 = $535 | $534;
  $537 = ($536|0)==(0);
  if ($537) {
   $u1$0 = $479;$u2$0 = $482;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $538 = (($__ptree__) + 284|0);
 $539 = HEAP32[$538>>2]|0;
 $u0$0 = $539;
 while(1) {
  $540 = ($u0$0|0)==(0);
  if ($540) {
   break;
  }
  $541 = (_last_one0($u0$0)|0);
  $542 = (34156304 + (($541*12)|0)|0);
  $543 = HEAP32[$542>>2]|0;
  $544 = $543 ^ $u0$0;
  $545 = ((33572424 + ($541<<3)|0) + 2|0);
  $546 = HEAP8[$545>>0]|0;
  $547 = $546&255;
  $548 = ((($__ptree__) + ($547<<2)|0) + 32|0);
  $549 = HEAP32[$548>>2]|0;
  $550 = ((33572424 + ($541<<3)|0) + 3|0);
  $551 = HEAP8[$550>>0]|0;
  $552 = $551&255;
  $553 = $549 >>> $552;
  $554 = $553 & 127;
  $555 = ((33953152 + (($541*1536)|0)|0) + (($554*12)|0)|0);
  $556 = HEAP32[$555>>2]|0;
  $557 = (33572424 + ($541<<3)|0);
  $558 = HEAP8[$557>>0]|0;
  $559 = $558&255;
  $560 = ((($__ptree__) + ($559<<2)|0) + 8|0);
  $561 = HEAP32[$560>>2]|0;
  $562 = ((($__ptree__) + ($559<<2)|0) + 20|0);
  $563 = HEAP32[$562>>2]|0;
  $564 = $563 | $561;
  $565 = ((33572424 + ($541<<3)|0) + 1|0);
  $566 = HEAP8[$565>>0]|0;
  $567 = $566&255;
  $568 = $564 >>> $567;
  $569 = $568 & 127;
  $570 = ((33828736 + (($541*1536)|0)|0) + (($569*12)|0)|0);
  $571 = HEAP32[$570>>2]|0;
  $572 = $571 | $556;
  $573 = (((33953152 + (($541*1536)|0)|0) + (($554*12)|0)|0) + 4|0);
  $574 = HEAP32[$573>>2]|0;
  $575 = (((33828736 + (($541*1536)|0)|0) + (($569*12)|0)|0) + 4|0);
  $576 = HEAP32[$575>>2]|0;
  $577 = $576 | $574;
  $578 = (((33953152 + (($541*1536)|0)|0) + (($554*12)|0)|0) + 8|0);
  $579 = HEAP32[$578>>2]|0;
  $580 = (((33828736 + (($541*1536)|0)|0) + (($569*12)|0)|0) + 8|0);
  $581 = HEAP32[$580>>2]|0;
  $582 = $581 | $579;
  $583 = ((220518304 + (($2*81)|0)|0) + ($541)|0);
  $584 = HEAP8[$583>>0]|0;
  $585 = ($584<<24>>24)==(0);
  if ($585) {
   label = 78;
  } else {
   $586 = $584&255;
   $587 = (_is_pinned_on_white_king($__ptree__,$541,$586)|0);
   $588 = ($587|0)==(0);
   if ($588) {
    label = 78;
   } else {
    $$sink82 = $582;$$sink83 = $577;$$sink84 = $572;
   }
  }
  if ((label|0) == 78) {
   label = 0;
   $589 = HEAP32[$272>>2]|0;
   $590 = $589 | $183;
   $591 = HEAP32[$273>>2]|0;
   $592 = $591 | $184;
   $593 = HEAP32[$274>>2]|0;
   $594 = $593 | $185;
   $595 = $590 & $572;
   $596 = $592 & $577;
   $597 = $594 & $582;
   $$sink82 = $597;$$sink83 = $596;$$sink84 = $595;
  }
  $598 = $$sink84 & $221;
  $599 = $$sink83 & $223;
  $600 = $$sink82 & $225;
  $601 = $599 | $598;
  $602 = $601 | $600;
  $603 = ($602|0)==(0);
  if ($603) {
   $u0$0 = $544;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $604 = (($__ptree__) + 264|0);
 $605 = HEAP32[$604>>2]|0;
 $606 = (($__ptree__) + 268|0);
 $607 = HEAP32[$606>>2]|0;
 $u1$1 = $605;$u2$1 = $607;
 while(1) {
  $608 = $u2$1 | $u1$1;
  $609 = ($608|0)==(0);
  if ($609) {
   break;
  }
  $610 = (_last_one12($u1$1,$u2$1)|0);
  $611 = ((34156304 + (($610*12)|0)|0) + 4|0);
  $612 = HEAP32[$611>>2]|0;
  $613 = $612 ^ $u1$1;
  $614 = ((34156304 + (($610*12)|0)|0) + 8|0);
  $615 = HEAP32[$614>>2]|0;
  $616 = $615 ^ $u2$1;
  $617 = ((33572424 + ($610<<3)|0) + 6|0);
  $618 = HEAP8[$617>>0]|0;
  $619 = $618&255;
  $620 = ((($__ptree__) + ($619<<2)|0) + 56|0);
  $621 = HEAP32[$620>>2]|0;
  $622 = ((33572424 + ($610<<3)|0) + 7|0);
  $623 = HEAP8[$622>>0]|0;
  $624 = $623&255;
  $625 = $621 >>> $624;
  $626 = $625 & 127;
  $627 = ((33704320 + (($610*1536)|0)|0) + (($626*12)|0)|0);
  $628 = HEAP32[$627>>2]|0;
  $629 = ((33572424 + ($610<<3)|0) + 4|0);
  $630 = HEAP8[$629>>0]|0;
  $631 = $630&255;
  $632 = ((($__ptree__) + ($631<<2)|0) + 44|0);
  $633 = HEAP32[$632>>2]|0;
  $634 = ((33572424 + ($610<<3)|0) + 5|0);
  $635 = HEAP8[$634>>0]|0;
  $636 = $635&255;
  $637 = $633 >>> $636;
  $638 = $637 & 127;
  $639 = ((33579904 + (($610*1536)|0)|0) + (($638*12)|0)|0);
  $640 = HEAP32[$639>>2]|0;
  $641 = $640 | $628;
  $642 = (((33704320 + (($610*1536)|0)|0) + (($626*12)|0)|0) + 4|0);
  $643 = HEAP32[$642>>2]|0;
  $644 = (((33579904 + (($610*1536)|0)|0) + (($638*12)|0)|0) + 4|0);
  $645 = HEAP32[$644>>2]|0;
  $646 = $645 | $643;
  $647 = (((33704320 + (($610*1536)|0)|0) + (($626*12)|0)|0) + 8|0);
  $648 = HEAP32[$647>>2]|0;
  $649 = (((33579904 + (($610*1536)|0)|0) + (($638*12)|0)|0) + 8|0);
  $650 = HEAP32[$649>>2]|0;
  $651 = $650 | $648;
  $652 = ((220518304 + (($2*81)|0)|0) + ($610)|0);
  $653 = HEAP8[$652>>0]|0;
  $654 = ($653<<24>>24)==(0);
  if ($654) {
   label = 84;
  } else {
   $655 = $653&255;
   $656 = (_is_pinned_on_white_king($__ptree__,$610,$655)|0);
   $657 = ($656|0)==(0);
   if ($657) {
    label = 84;
   } else {
    $$sink85 = $651;$$sink86 = $646;$$sink87 = $641;
   }
  }
  if ((label|0) == 84) {
   label = 0;
   $658 = HEAP32[$272>>2]|0;
   $659 = $658 | $218;
   $660 = $659 & $641;
   $661 = $646 & $219;
   $662 = $651 & $220;
   $$sink85 = $662;$$sink86 = $661;$$sink87 = $660;
  }
  $663 = $$sink87 & $221;
  $664 = $$sink86 & $223;
  $665 = $$sink85 & $225;
  $666 = $664 | $663;
  $667 = $666 | $665;
  $668 = ($667|0)==(0);
  if ($668) {
   $u1$1 = $613;$u2$1 = $616;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $669 = (($__ptree__) + 260|0);
 $670 = HEAP32[$669>>2]|0;
 $u0$1 = $670;
 while(1) {
  $671 = ($u0$1|0)==(0);
  if ($671) {
   break;
  }
  $672 = (_last_one0($u0$1)|0);
  $673 = (34156304 + (($672*12)|0)|0);
  $674 = HEAP32[$673>>2]|0;
  $675 = $674 ^ $u0$1;
  $676 = ((33572424 + ($672<<3)|0) + 6|0);
  $677 = HEAP8[$676>>0]|0;
  $678 = $677&255;
  $679 = ((($__ptree__) + ($678<<2)|0) + 56|0);
  $680 = HEAP32[$679>>2]|0;
  $681 = ((33572424 + ($672<<3)|0) + 7|0);
  $682 = HEAP8[$681>>0]|0;
  $683 = $682&255;
  $684 = $680 >>> $683;
  $685 = $684 & 127;
  $686 = ((33704320 + (($672*1536)|0)|0) + (($685*12)|0)|0);
  $687 = HEAP32[$686>>2]|0;
  $688 = ((33572424 + ($672<<3)|0) + 4|0);
  $689 = HEAP8[$688>>0]|0;
  $690 = $689&255;
  $691 = ((($__ptree__) + ($690<<2)|0) + 44|0);
  $692 = HEAP32[$691>>2]|0;
  $693 = ((33572424 + ($672<<3)|0) + 5|0);
  $694 = HEAP8[$693>>0]|0;
  $695 = $694&255;
  $696 = $692 >>> $695;
  $697 = $696 & 127;
  $698 = ((33579904 + (($672*1536)|0)|0) + (($697*12)|0)|0);
  $699 = HEAP32[$698>>2]|0;
  $700 = $699 | $687;
  $701 = (((33704320 + (($672*1536)|0)|0) + (($685*12)|0)|0) + 4|0);
  $702 = HEAP32[$701>>2]|0;
  $703 = (((33579904 + (($672*1536)|0)|0) + (($697*12)|0)|0) + 4|0);
  $704 = HEAP32[$703>>2]|0;
  $705 = $704 | $702;
  $706 = (((33704320 + (($672*1536)|0)|0) + (($685*12)|0)|0) + 8|0);
  $707 = HEAP32[$706>>2]|0;
  $708 = (((33579904 + (($672*1536)|0)|0) + (($697*12)|0)|0) + 8|0);
  $709 = HEAP32[$708>>2]|0;
  $710 = $709 | $707;
  $711 = ((220518304 + (($2*81)|0)|0) + ($672)|0);
  $712 = HEAP8[$711>>0]|0;
  $713 = ($712<<24>>24)==(0);
  if ($713) {
   label = 90;
  } else {
   $714 = $712&255;
   $715 = (_is_pinned_on_white_king($__ptree__,$672,$714)|0);
   $716 = ($715|0)==(0);
   if ($716) {
    label = 90;
   } else {
    $$sink88 = $710;$$sink89 = $705;$$sink90 = $700;
   }
  }
  if ((label|0) == 90) {
   label = 0;
   $717 = HEAP32[$272>>2]|0;
   $718 = $717 | $218;
   $719 = HEAP32[$273>>2]|0;
   $720 = $719 | $219;
   $721 = HEAP32[$274>>2]|0;
   $722 = $721 | $220;
   $723 = $718 & $700;
   $724 = $720 & $705;
   $725 = $722 & $710;
   $$sink88 = $725;$$sink89 = $724;$$sink90 = $723;
  }
  $726 = $$sink90 & $221;
  $727 = $$sink89 & $223;
  $728 = $$sink88 & $225;
  $729 = $727 | $726;
  $730 = $729 | $728;
  $731 = ($730|0)==(0);
  if ($731) {
   $u0$1 = $675;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $732 = (($__ptree__) + 92|0);
 $733 = HEAP32[$732>>2]|0;
 $734 = (($__ptree__) + 96|0);
 $735 = HEAP32[$734>>2]|0;
 $736 = (($__ptree__) + 100|0);
 $737 = HEAP32[$736>>2]|0;
 $738 = (33577952 + (($2*12)|0)|0);
 $739 = ((33577952 + (($2*12)|0)|0) + 4|0);
 $740 = ((33577952 + (($2*12)|0)|0) + 8|0);
 $bb_piece$sroa$0$2 = $733;$bb_piece$sroa$1$2 = $735;$bb_piece$sroa$2$2 = $737;
 while(1) {
  $741 = $bb_piece$sroa$1$2 | $bb_piece$sroa$0$2;
  $742 = $741 | $bb_piece$sroa$2$2;
  $743 = ($742|0)==(0);
  if ($743) {
   break;
  }
  $744 = (_last_one210($bb_piece$sroa$2$2,$bb_piece$sroa$1$2,$bb_piece$sroa$0$2)|0);
  $745 = (34156304 + (($744*12)|0)|0);
  $746 = HEAP32[$745>>2]|0;
  $747 = $746 ^ $bb_piece$sroa$0$2;
  $748 = ((34156304 + (($744*12)|0)|0) + 4|0);
  $749 = HEAP32[$748>>2]|0;
  $750 = $749 ^ $bb_piece$sroa$1$2;
  $751 = ((34156304 + (($744*12)|0)|0) + 8|0);
  $752 = HEAP32[$751>>2]|0;
  $753 = $752 ^ $bb_piece$sroa$2$2;
  $754 = HEAP32[$738>>2]|0;
  $755 = HEAP32[$739>>2]|0;
  $756 = HEAP32[$740>>2]|0;
  $757 = ((220518304 + (($2*81)|0)|0) + ($744)|0);
  $758 = HEAP8[$757>>0]|0;
  $759 = $758&255;
  $760 = ($758<<24>>24)==(0);
  if ($760) {
   $776 = $754;$779 = $755;$782 = $756;
  } else {
   $761 = (_is_pinned_on_white_king($__ptree__,$744,$759)|0);
   $762 = ($761|0)==(0);
   if ($762) {
    $776 = $754;$779 = $755;$782 = $756;
   } else {
    if ((($759|0) == 2)) {
     $bb_tmp$sroa$0$0$in$i53 = $284;$bb_tmp$sroa$1$0$in$i52 = $285;$bb_tmp$sroa$2$0$in$i51 = $286;
    } else if ((($759|0) == 5)) {
     $bb_tmp$sroa$0$0$in$i53 = $281;$bb_tmp$sroa$1$0$in$i52 = $282;$bb_tmp$sroa$2$0$in$i51 = $283;
    } else if ((($759|0) == 4)) {
     $bb_tmp$sroa$0$0$in$i53 = $278;$bb_tmp$sroa$1$0$in$i52 = $279;$bb_tmp$sroa$2$0$in$i51 = $280;
    } else {
     $bb_tmp$sroa$0$0$in$i53 = $275;$bb_tmp$sroa$1$0$in$i52 = $276;$bb_tmp$sroa$2$0$in$i51 = $277;
    }
    $bb_tmp$sroa$0$0$i54 = HEAP32[$bb_tmp$sroa$0$0$in$i53>>2]|0;
    $bb_tmp$sroa$1$0$i55 = HEAP32[$bb_tmp$sroa$1$0$in$i52>>2]|0;
    $bb_tmp$sroa$2$0$i56 = HEAP32[$bb_tmp$sroa$2$0$in$i51>>2]|0;
    $763 = $bb_tmp$sroa$0$0$i54 ^ -1;
    $764 = $bb_tmp$sroa$1$0$i55 ^ -1;
    $765 = $bb_tmp$sroa$2$0$i56 ^ -1;
    $766 = $754 | $763;
    $767 = $755 | $764;
    $768 = $756 | $765;
    $776 = $766;$779 = $767;$782 = $768;
   }
  }
  $769 = (33575024 + (($744*12)|0)|0);
  $770 = HEAP32[$769>>2]|0;
  $771 = ((33575024 + (($744*12)|0)|0) + 4|0);
  $772 = HEAP32[$771>>2]|0;
  $773 = ((33575024 + (($744*12)|0)|0) + 8|0);
  $774 = HEAP32[$773>>2]|0;
  $775 = $776 & $221;
  $777 = $775 & $770;
  $778 = $779 & $223;
  $780 = $778 & $772;
  $781 = $782 & $225;
  $783 = $781 & $774;
  $784 = $780 | $777;
  $785 = $784 | $783;
  $786 = ($785|0)==(0);
  if ($786) {
   $bb_piece$sroa$0$2 = $747;$bb_piece$sroa$1$2 = $750;$bb_piece$sroa$2$2 = $753;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $787 = (($__ptree__) + 236|0);
 $788 = HEAP32[$787>>2]|0;
 $u0$2 = $788;
 while(1) {
  $789 = ($u0$2|0)==(0);
  if ($789) {
   break;
  }
  $790 = (_last_one0($u0$2)|0);
  $791 = (34156304 + (($790*12)|0)|0);
  $792 = HEAP32[$791>>2]|0;
  $793 = $792 ^ $u0$2;
  $794 = HEAP32[$738>>2]|0;
  $795 = HEAP32[$739>>2]|0;
  $796 = ((220518304 + (($2*81)|0)|0) + ($790)|0);
  $797 = HEAP8[$796>>0]|0;
  $798 = $797&255;
  $799 = ($797<<24>>24)==(0);
  if ($799) {
   $809 = $794;$814 = $795;
  } else {
   $800 = (_is_pinned_on_white_king($__ptree__,$790,$798)|0);
   $801 = ($800|0)==(0);
   if ($801) {
    $809 = $794;$814 = $795;
   } else {
    if ((($798|0) == 5)) {
     $bb_tmp$sroa$0$0$in$i46 = $281;$bb_tmp$sroa$1$0$in$i45 = $282;
    } else if ((($798|0) == 2)) {
     $bb_tmp$sroa$0$0$in$i46 = $284;$bb_tmp$sroa$1$0$in$i45 = $285;
    } else if ((($798|0) == 4)) {
     $bb_tmp$sroa$0$0$in$i46 = $278;$bb_tmp$sroa$1$0$in$i45 = $279;
    } else {
     $bb_tmp$sroa$0$0$in$i46 = $275;$bb_tmp$sroa$1$0$in$i45 = $276;
    }
    $bb_tmp$sroa$0$0$i47 = HEAP32[$bb_tmp$sroa$0$0$in$i46>>2]|0;
    $bb_tmp$sroa$1$0$i48 = HEAP32[$bb_tmp$sroa$1$0$in$i45>>2]|0;
    $802 = $bb_tmp$sroa$0$0$i47 ^ -1;
    $803 = $bb_tmp$sroa$1$0$i48 ^ -1;
    $804 = $794 | $802;
    $805 = $795 | $803;
    $809 = $804;$814 = $805;
   }
  }
  $806 = (33574048 + (($790*12)|0)|0);
  $807 = HEAP32[$806>>2]|0;
  $808 = $809 & $221;
  $810 = $808 & $807;
  $811 = ((33574048 + (($790*12)|0)|0) + 4|0);
  $812 = HEAP32[$811>>2]|0;
  $813 = $814 & $223;
  $815 = $813 & $812;
  $816 = $815 | $810;
  $817 = ($816|0)==(0);
  if ($817) {
   $u0$2 = $793;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $818 = (($__ptree__) + 240|0);
 $819 = HEAP32[$818>>2]|0;
 $820 = $819 & 133955584;
 $u1$2 = $820;
 while(1) {
  $821 = ($u1$2|0)==(0);
  if ($821) {
   break;
  }
  $822 = (_last_one1($u1$2)|0);
  $823 = ((34156304 + (($822*12)|0)|0) + 4|0);
  $824 = HEAP32[$823>>2]|0;
  $825 = $824 ^ $u1$2;
  $826 = HEAP32[$738>>2]|0;
  $827 = ((220518304 + (($2*81)|0)|0) + ($822)|0);
  $828 = HEAP8[$827>>0]|0;
  $829 = $828&255;
  $830 = ($828<<24>>24)==(0);
  if ($830) {
   $838 = $826;
  } else {
   $831 = (_is_pinned_on_white_king($__ptree__,$822,$829)|0);
   $832 = ($831|0)==(0);
   if ($832) {
    $838 = $826;
   } else {
    if ((($829|0) == 5)) {
     $bb_tmp$sroa$0$0$in$i39 = $281;
    } else if ((($829|0) == 2)) {
     $bb_tmp$sroa$0$0$in$i39 = $284;
    } else if ((($829|0) == 4)) {
     $bb_tmp$sroa$0$0$in$i39 = $278;
    } else {
     $bb_tmp$sroa$0$0$in$i39 = $275;
    }
    $bb_tmp$sroa$0$0$i40 = HEAP32[$bb_tmp$sroa$0$0$in$i39>>2]|0;
    $833 = $bb_tmp$sroa$0$0$i40 ^ -1;
    $834 = $826 | $833;
    $838 = $834;
   }
  }
  $835 = (33574048 + (($822*12)|0)|0);
  $836 = HEAP32[$835>>2]|0;
  $837 = $838 & $221;
  $839 = $837 & $836;
  $840 = ($839|0)==(0);
  if ($840) {
   $u1$2 = $825;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $841 = HEAP32[$787>>2]|0;
 $842 = HEAP32[$818>>2]|0;
 $843 = (($__ptree__) + 244|0);
 $844 = HEAP32[$843>>2]|0;
 $845 = (33576976 + (($2*12)|0)|0);
 $846 = ((33576976 + (($2*12)|0)|0) + 4|0);
 $847 = ((33576976 + (($2*12)|0)|0) + 8|0);
 $bb_piece$sroa$0$3 = $841;$bb_piece$sroa$1$3 = $842;$bb_piece$sroa$2$3 = $844;
 while(1) {
  $848 = $bb_piece$sroa$1$3 | $bb_piece$sroa$0$3;
  $849 = $848 | $bb_piece$sroa$2$3;
  $850 = ($849|0)==(0);
  if ($850) {
   break;
  }
  $851 = (_last_one210($bb_piece$sroa$2$3,$bb_piece$sroa$1$3,$bb_piece$sroa$0$3)|0);
  $852 = (34156304 + (($851*12)|0)|0);
  $853 = HEAP32[$852>>2]|0;
  $854 = $853 ^ $bb_piece$sroa$0$3;
  $855 = ((34156304 + (($851*12)|0)|0) + 4|0);
  $856 = HEAP32[$855>>2]|0;
  $857 = $856 ^ $bb_piece$sroa$1$3;
  $858 = ((34156304 + (($851*12)|0)|0) + 8|0);
  $859 = HEAP32[$858>>2]|0;
  $860 = $859 ^ $bb_piece$sroa$2$3;
  $861 = HEAP32[$845>>2]|0;
  $862 = HEAP32[$846>>2]|0;
  $863 = HEAP32[$847>>2]|0;
  $864 = ((220518304 + (($2*81)|0)|0) + ($851)|0);
  $865 = HEAP8[$864>>0]|0;
  $866 = $865&255;
  $867 = ($865<<24>>24)==(0);
  if ($867) {
   $883 = $861;$886 = $862;$889 = $863;
  } else {
   $868 = (_is_pinned_on_white_king($__ptree__,$851,$866)|0);
   $869 = ($868|0)==(0);
   if ($869) {
    $883 = $861;$886 = $862;$889 = $863;
   } else {
    if ((($866|0) == 5)) {
     $bb_tmp$sroa$0$0$in$i32 = $281;$bb_tmp$sroa$1$0$in$i31 = $282;$bb_tmp$sroa$2$0$in$i30 = $283;
    } else if ((($866|0) == 2)) {
     $bb_tmp$sroa$0$0$in$i32 = $284;$bb_tmp$sroa$1$0$in$i31 = $285;$bb_tmp$sroa$2$0$in$i30 = $286;
    } else if ((($866|0) == 4)) {
     $bb_tmp$sroa$0$0$in$i32 = $278;$bb_tmp$sroa$1$0$in$i31 = $279;$bb_tmp$sroa$2$0$in$i30 = $280;
    } else {
     $bb_tmp$sroa$0$0$in$i32 = $275;$bb_tmp$sroa$1$0$in$i31 = $276;$bb_tmp$sroa$2$0$in$i30 = $277;
    }
    $bb_tmp$sroa$0$0$i33 = HEAP32[$bb_tmp$sroa$0$0$in$i32>>2]|0;
    $bb_tmp$sroa$1$0$i34 = HEAP32[$bb_tmp$sroa$1$0$in$i31>>2]|0;
    $bb_tmp$sroa$2$0$i35 = HEAP32[$bb_tmp$sroa$2$0$in$i30>>2]|0;
    $870 = $bb_tmp$sroa$0$0$i33 ^ -1;
    $871 = $bb_tmp$sroa$1$0$i34 ^ -1;
    $872 = $bb_tmp$sroa$2$0$i35 ^ -1;
    $873 = $861 | $870;
    $874 = $862 | $871;
    $875 = $863 | $872;
    $883 = $873;$886 = $874;$889 = $875;
   }
  }
  $876 = (33574048 + (($851*12)|0)|0);
  $877 = HEAP32[$876>>2]|0;
  $878 = ((33574048 + (($851*12)|0)|0) + 4|0);
  $879 = HEAP32[$878>>2]|0;
  $880 = ((33574048 + (($851*12)|0)|0) + 8|0);
  $881 = HEAP32[$880>>2]|0;
  $882 = $883 & $221;
  $884 = $882 & $877;
  $885 = $886 & $223;
  $887 = $885 & $879;
  $888 = $889 & $225;
  $890 = $888 & $881;
  $891 = $887 | $884;
  $892 = $891 | $890;
  $893 = ($892|0)==(0);
  if ($893) {
   $bb_piece$sroa$0$3 = $854;$bb_piece$sroa$1$3 = $857;$bb_piece$sroa$2$3 = $860;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $894 = (($__ptree__) + 212|0);
 $895 = HEAP32[$894>>2]|0;
 $896 = (($__ptree__) + 216|0);
 $897 = HEAP32[$896>>2]|0;
 $898 = $897 & 134217216;
 $u0$3 = $895;$u1$3 = $898;
 while(1) {
  $899 = $u1$3 | $u0$3;
  $900 = ($899|0)==(0);
  if ($900) {
   break;
  }
  $901 = (_last_one01($u0$3,$u1$3)|0);
  $902 = (34156304 + (($901*12)|0)|0);
  $903 = HEAP32[$902>>2]|0;
  $904 = $903 ^ $u0$3;
  $905 = ((34156304 + (($901*12)|0)|0) + 4|0);
  $906 = HEAP32[$905>>2]|0;
  $907 = $906 ^ $u1$3;
  $908 = HEAP32[$738>>2]|0;
  $909 = ((220518304 + (($2*81)|0)|0) + ($901)|0);
  $910 = HEAP8[$909>>0]|0;
  $911 = $910&255;
  $912 = ($910<<24>>24)==(0);
  if ($912) {
   $920 = $908;
  } else {
   $913 = (_is_pinned_on_white_king($__ptree__,$901,$911)|0);
   $914 = ($913|0)==(0);
   if ($914) {
    $920 = $908;
   } else {
    if ((($911|0) == 5)) {
     $bb_tmp$sroa$0$0$in$i25 = $281;
    } else if ((($911|0) == 2)) {
     $bb_tmp$sroa$0$0$in$i25 = $284;
    } else if ((($911|0) == 4)) {
     $bb_tmp$sroa$0$0$in$i25 = $278;
    } else {
     $bb_tmp$sroa$0$0$in$i25 = $275;
    }
    $bb_tmp$sroa$0$0$i26 = HEAP32[$bb_tmp$sroa$0$0$in$i25>>2]|0;
    $915 = $bb_tmp$sroa$0$0$i26 ^ -1;
    $916 = $908 | $915;
    $920 = $916;
   }
  }
  $917 = (33573072 + (($901*12)|0)|0);
  $918 = HEAP32[$917>>2]|0;
  $919 = $920 & $221;
  $921 = $919 & $918;
  $922 = ($921|0)==(0);
  if ($922) {
   $u0$3 = $904;$u1$3 = $907;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $923 = (($__ptree__) + 220|0);
 $924 = HEAP32[$923>>2]|0;
 $925 = HEAP32[$896>>2]|0;
 $926 = $925 & 262143;
 $927 = (33576000 + (($2*12)|0)|0);
 $928 = ((33576000 + (($2*12)|0)|0) + 4|0);
 $929 = ((33576000 + (($2*12)|0)|0) + 8|0);
 $u1$4 = $926;$u2$2 = $924;
 while(1) {
  $930 = $u2$2 | $u1$4;
  $931 = ($930|0)==(0);
  if ($931) {
   break;
  }
  $932 = (_last_one12($u1$4,$u2$2)|0);
  $933 = ((34156304 + (($932*12)|0)|0) + 8|0);
  $934 = HEAP32[$933>>2]|0;
  $935 = $934 ^ $u2$2;
  $936 = ((34156304 + (($932*12)|0)|0) + 4|0);
  $937 = HEAP32[$936>>2]|0;
  $938 = $937 ^ $u1$4;
  $939 = HEAP32[$927>>2]|0;
  $940 = HEAP32[$928>>2]|0;
  $941 = HEAP32[$929>>2]|0;
  $942 = ((220518304 + (($2*81)|0)|0) + ($932)|0);
  $943 = HEAP8[$942>>0]|0;
  $944 = $943&255;
  $945 = ($943<<24>>24)==(0);
  if ($945) {
   $961 = $939;$964 = $940;$967 = $941;
  } else {
   $946 = (_is_pinned_on_white_king($__ptree__,$932,$944)|0);
   $947 = ($946|0)==(0);
   if ($947) {
    $961 = $939;$964 = $940;$967 = $941;
   } else {
    if ((($944|0) == 5)) {
     $bb_tmp$sroa$0$0$in$i18 = $281;$bb_tmp$sroa$1$0$in$i17 = $282;$bb_tmp$sroa$2$0$in$i16 = $283;
    } else if ((($944|0) == 2)) {
     $bb_tmp$sroa$0$0$in$i18 = $284;$bb_tmp$sroa$1$0$in$i17 = $285;$bb_tmp$sroa$2$0$in$i16 = $286;
    } else if ((($944|0) == 4)) {
     $bb_tmp$sroa$0$0$in$i18 = $278;$bb_tmp$sroa$1$0$in$i17 = $279;$bb_tmp$sroa$2$0$in$i16 = $280;
    } else {
     $bb_tmp$sroa$0$0$in$i18 = $275;$bb_tmp$sroa$1$0$in$i17 = $276;$bb_tmp$sroa$2$0$in$i16 = $277;
    }
    $bb_tmp$sroa$0$0$i19 = HEAP32[$bb_tmp$sroa$0$0$in$i18>>2]|0;
    $bb_tmp$sroa$1$0$i20 = HEAP32[$bb_tmp$sroa$1$0$in$i17>>2]|0;
    $bb_tmp$sroa$2$0$i21 = HEAP32[$bb_tmp$sroa$2$0$in$i16>>2]|0;
    $948 = $bb_tmp$sroa$0$0$i19 ^ -1;
    $949 = $bb_tmp$sroa$1$0$i20 ^ -1;
    $950 = $bb_tmp$sroa$2$0$i21 ^ -1;
    $951 = $939 | $948;
    $952 = $940 | $949;
    $953 = $941 | $950;
    $961 = $951;$964 = $952;$967 = $953;
   }
  }
  $954 = (33573072 + (($932*12)|0)|0);
  $955 = HEAP32[$954>>2]|0;
  $956 = ((33573072 + (($932*12)|0)|0) + 4|0);
  $957 = HEAP32[$956>>2]|0;
  $958 = ((33573072 + (($932*12)|0)|0) + 8|0);
  $959 = HEAP32[$958>>2]|0;
  $960 = $961 & $221;
  $962 = $960 & $955;
  $963 = $964 & $223;
  $965 = $963 & $957;
  $966 = $967 & $225;
  $968 = $966 & $959;
  $969 = $965 | $962;
  $970 = $969 | $968;
  $971 = ($970|0)==(0);
  if ($971) {
   $u1$4 = $938;$u2$2 = $935;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $972 = (($__ptree__) + 188|0);
 $973 = HEAP32[$972>>2]|0;
 $974 = (($__ptree__) + 192|0);
 $975 = HEAP32[$974>>2]|0;
 $976 = (($__ptree__) + 196|0);
 $977 = HEAP32[$976>>2]|0;
 $bb_piece$sroa$0$4 = $973;$bb_piece$sroa$1$4 = $975;$bb_piece$sroa$2$4 = $977;
 while(1) {
  $978 = $bb_piece$sroa$1$4 | $bb_piece$sroa$0$4;
  $979 = $978 | $bb_piece$sroa$2$4;
  $980 = ($979|0)==(0);
  if ($980) {
   break;
  }
  $981 = (_last_one210($bb_piece$sroa$2$4,$bb_piece$sroa$1$4,$bb_piece$sroa$0$4)|0);
  $982 = (34156304 + (($981*12)|0)|0);
  $983 = HEAP32[$982>>2]|0;
  $984 = $983 ^ $bb_piece$sroa$0$4;
  $985 = ((34156304 + (($981*12)|0)|0) + 4|0);
  $986 = HEAP32[$985>>2]|0;
  $987 = $986 ^ $bb_piece$sroa$1$4;
  $988 = ((34156304 + (($981*12)|0)|0) + 8|0);
  $989 = HEAP32[$988>>2]|0;
  $990 = $989 ^ $bb_piece$sroa$2$4;
  $991 = HEAP32[$738>>2]|0;
  $992 = ((220518304 + (($2*81)|0)|0) + ($981)|0);
  $993 = HEAP8[$992>>0]|0;
  $994 = $993&255;
  $995 = ($993<<24>>24)==(0);
  if ($995) {
   $1025 = $991;$1029 = 0;$1033 = 0;
  } else {
   $996 = (_is_pinned_on_white_king($__ptree__,$981,$994)|0);
   $997 = ($996|0)==(0);
   if ($997) {
    $1025 = $991;$1029 = 0;$1033 = 0;
   } else {
    if ((($994|0) == 5)) {
     $bb_tmp$sroa$0$0$in$i11 = $281;$bb_tmp$sroa$1$0$in$i10 = $282;$bb_tmp$sroa$2$0$in$i9 = $283;
    } else if ((($994|0) == 2)) {
     $bb_tmp$sroa$0$0$in$i11 = $284;$bb_tmp$sroa$1$0$in$i10 = $285;$bb_tmp$sroa$2$0$in$i9 = $286;
    } else if ((($994|0) == 4)) {
     $bb_tmp$sroa$0$0$in$i11 = $278;$bb_tmp$sroa$1$0$in$i10 = $279;$bb_tmp$sroa$2$0$in$i9 = $280;
    } else {
     $bb_tmp$sroa$0$0$in$i11 = $275;$bb_tmp$sroa$1$0$in$i10 = $276;$bb_tmp$sroa$2$0$in$i9 = $277;
    }
    $bb_tmp$sroa$0$0$i12 = HEAP32[$bb_tmp$sroa$0$0$in$i11>>2]|0;
    $bb_tmp$sroa$1$0$i13 = HEAP32[$bb_tmp$sroa$1$0$in$i10>>2]|0;
    $bb_tmp$sroa$2$0$i14 = HEAP32[$bb_tmp$sroa$2$0$in$i9>>2]|0;
    $998 = $bb_tmp$sroa$0$0$i12 ^ -1;
    $999 = $bb_tmp$sroa$1$0$i13 ^ -1;
    $1000 = $bb_tmp$sroa$2$0$i14 ^ -1;
    $1001 = $991 | $998;
    $1025 = $1001;$1029 = $999;$1033 = $1000;
   }
  }
  $1002 = ((33572424 + ($981<<3)|0) + 2|0);
  $1003 = HEAP8[$1002>>0]|0;
  $1004 = $1003&255;
  $1005 = ((($__ptree__) + ($1004<<2)|0) + 32|0);
  $1006 = HEAP32[$1005>>2]|0;
  $1007 = ((33572424 + ($981<<3)|0) + 3|0);
  $1008 = HEAP8[$1007>>0]|0;
  $1009 = $1008&255;
  $1010 = $1006 >>> $1009;
  $1011 = $1010 & 127;
  $1012 = ((33953152 + (($981*1536)|0)|0) + (($1011*12)|0)|0);
  $1013 = HEAP32[$1012>>2]|0;
  $1014 = (((33953152 + (($981*1536)|0)|0) + (($1011*12)|0)|0) + 4|0);
  $1015 = HEAP32[$1014>>2]|0;
  $1016 = (((33953152 + (($981*1536)|0)|0) + (($1011*12)|0)|0) + 8|0);
  $1017 = HEAP32[$1016>>2]|0;
  $1018 = (34161184 + (($981*12)|0)|0);
  $1019 = HEAP32[$1018>>2]|0;
  $1020 = ((34161184 + (($981*12)|0)|0) + 4|0);
  $1021 = HEAP32[$1020>>2]|0;
  $1022 = ((34161184 + (($981*12)|0)|0) + 8|0);
  $1023 = HEAP32[$1022>>2]|0;
  $1024 = $1025 & $221;
  $1026 = $1024 & $1013;
  $1027 = $1026 & $1019;
  $1028 = $1029 & $223;
  $1030 = $1028 & $1015;
  $1031 = $1030 & $1021;
  $1032 = $1033 & $225;
  $1034 = $1032 & $1017;
  $1035 = $1034 & $1023;
  $1036 = $1031 | $1027;
  $1037 = $1036 | $1035;
  $1038 = ($1037|0)==(0);
  if ($1038) {
   $bb_piece$sroa$0$4 = $984;$bb_piece$sroa$1$4 = $987;$bb_piece$sroa$2$4 = $990;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $1039 = HEAP32[$974>>2]|0;
 $1040 = HEAP32[$976>>2]|0;
 $1041 = (34160208 + (($2*12)|0)|0);
 $1042 = ((34160208 + (($2*12)|0)|0) + 4|0);
 $1043 = ((34160208 + (($2*12)|0)|0) + 8|0);
 $1044 = $221 & 511;
 $u1$5 = $1039;$u2$3 = $1040;
 while(1) {
  $1045 = $u2$3 | $u1$5;
  $1046 = ($1045|0)==(0);
  if ($1046) {
   break;
  }
  $1047 = (_last_one12($u1$5,$u2$3)|0);
  $1048 = ((34156304 + (($1047*12)|0)|0) + 4|0);
  $1049 = HEAP32[$1048>>2]|0;
  $1050 = $1049 ^ $u1$5;
  $1051 = ((34156304 + (($1047*12)|0)|0) + 8|0);
  $1052 = HEAP32[$1051>>2]|0;
  $1053 = $1052 ^ $u2$3;
  $1054 = ((220518304 + (($2*81)|0)|0) + ($1047)|0);
  $1055 = HEAP8[$1054>>0]|0;
  $1056 = $1055&255;
  $1057 = ($1055<<24>>24)==(0);
  if ($1057) {
   label = 171;
  } else {
   $1058 = (_is_pinned_on_white_king($__ptree__,$1047,$1056)|0);
   $1059 = ($1058|0)==(0);
   if ($1059) {
    label = 171;
   } else {
    if ((($1056|0) == 4)) {
     $bb_tmp$sroa$0$0$in$i4 = $278;$bb_tmp$sroa$1$0$in$i3 = $279;$bb_tmp$sroa$2$0$in$i2 = $280;
    } else if ((($1056|0) == 5)) {
     $bb_tmp$sroa$0$0$in$i4 = $281;$bb_tmp$sroa$1$0$in$i3 = $282;$bb_tmp$sroa$2$0$in$i2 = $283;
    } else if ((($1056|0) == 2)) {
     $bb_tmp$sroa$0$0$in$i4 = $284;$bb_tmp$sroa$1$0$in$i3 = $285;$bb_tmp$sroa$2$0$in$i2 = $286;
    } else {
     $bb_tmp$sroa$0$0$in$i4 = $275;$bb_tmp$sroa$1$0$in$i3 = $276;$bb_tmp$sroa$2$0$in$i2 = $277;
    }
    $bb_tmp$sroa$0$0$i5 = HEAP32[$bb_tmp$sroa$0$0$in$i4>>2]|0;
    $bb_tmp$sroa$1$0$i6 = HEAP32[$bb_tmp$sroa$1$0$in$i3>>2]|0;
    $bb_tmp$sroa$2$0$i7 = HEAP32[$bb_tmp$sroa$2$0$in$i2>>2]|0;
    $1060 = $bb_tmp$sroa$0$0$i5 ^ -1;
    $1061 = $bb_tmp$sroa$1$0$i6 ^ -1;
    $1062 = $bb_tmp$sroa$2$0$i7 ^ -1;
    $1063 = $159 | $1060;
    $1064 = $161 | $1061;
    $1065 = $163 | $1062;
    $1066 = (34161184 + (($1047*12)|0)|0);
    $1067 = HEAP32[$1066>>2]|0;
    $1068 = $1067 & $1063;
    $1069 = ((34161184 + (($1047*12)|0)|0) + 4|0);
    $1070 = HEAP32[$1069>>2]|0;
    $1071 = $1070 & $1064;
    $1072 = ((34161184 + (($1047*12)|0)|0) + 8|0);
    $1073 = HEAP32[$1072>>2]|0;
    $1074 = $1073 & $1065;
    $1098 = $1071;$1101 = $1074;$1104 = $1068;
   }
  }
  if ((label|0) == 171) {
   label = 0;
   $1075 = HEAP32[$1041>>2]|0;
   $1076 = $1075 & $159;
   $1077 = HEAP32[$1042>>2]|0;
   $1078 = $1077 & $161;
   $1079 = HEAP32[$1043>>2]|0;
   $1080 = $1079 & $163;
   $1098 = $1078;$1101 = $1080;$1104 = $1076;
  }
  $1081 = ((33572424 + ($1047<<3)|0) + 2|0);
  $1082 = HEAP8[$1081>>0]|0;
  $1083 = $1082&255;
  $1084 = ((($__ptree__) + ($1083<<2)|0) + 32|0);
  $1085 = HEAP32[$1084>>2]|0;
  $1086 = ((33572424 + ($1047<<3)|0) + 3|0);
  $1087 = HEAP8[$1086>>0]|0;
  $1088 = $1087&255;
  $1089 = $1085 >>> $1088;
  $1090 = $1089 & 127;
  $1091 = ((33953152 + (($1047*1536)|0)|0) + (($1090*12)|0)|0);
  $1092 = HEAP32[$1091>>2]|0;
  $1093 = (((33953152 + (($1047*1536)|0)|0) + (($1090*12)|0)|0) + 4|0);
  $1094 = HEAP32[$1093>>2]|0;
  $1095 = (((33953152 + (($1047*1536)|0)|0) + (($1090*12)|0)|0) + 8|0);
  $1096 = HEAP32[$1095>>2]|0;
  $1097 = $1098 & $223;
  $1099 = $1097 & $1094;
  $1100 = $1101 & $225;
  $1102 = $1100 & $1096;
  $1103 = $1044 & $1104;
  $1105 = $1103 & $1092;
  $1106 = $1099 | $1105;
  $1107 = $1106 | $1102;
  $1108 = ($1107|0)==(0);
  if ($1108) {
   $u1$5 = $1050;$u2$3 = $1053;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $1109 = HEAP32[$738>>2]|0;
 if ($53) {
  $1110 = (($2) + 9)|0;
  $1111 = (34156304 + (($1110*12)|0)|0);
  $1112 = HEAP32[$1111>>2]|0;
  $1113 = $1112 | $1109;
  $1114 = ((34156304 + (($1110*12)|0)|0) + 4|0);
  $1115 = HEAP32[$1114>>2]|0;
  $1116 = ((34156304 + (($1110*12)|0)|0) + 8|0);
  $1117 = HEAP32[$1116>>2]|0;
  $1119 = $1113;$1121 = $1115;$1123 = $1117;
 } else {
  $1119 = $1109;$1121 = 0;$1123 = 0;
 }
 $1118 = $1119 & $221;
 $1120 = $1121 & $223;
 $1122 = $1123 & $225;
 $1124 = (($__ptree__) + 164|0);
 $1125 = HEAP32[$1124>>2]|0;
 $1126 = $1118 & $1125;
 $1127 = (($__ptree__) + 168|0);
 $1128 = HEAP32[$1127>>2]|0;
 $1129 = $1120 & $1128;
 $1130 = (($__ptree__) + 172|0);
 $1131 = HEAP32[$1130>>2]|0;
 $1132 = $1122 & $1131;
 $1133 = $1129 | $1126;
 $1134 = $1133 | $1132;
 $1135 = ($1134|0)==(0);
 if (!($1135)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1136 = (($__ptree__) + 356|0);
 $1137 = HEAP32[$1136>>2]|0;
 $1138 = $1137 & $197;
 $1139 = (($__ptree__) + 360|0);
 $1140 = HEAP32[$1139>>2]|0;
 $1141 = $1140 & $199;
 $1142 = (($__ptree__) + 364|0);
 $1143 = HEAP32[$1142>>2]|0;
 $1144 = $1143 & $201;
 $1145 = $1141 | $1138;
 $1146 = $1145 | $1144;
 $1147 = ($1146|0)==(0);
 do {
  if ($1147) {
   $1194 = $1137;$1196 = $1140;$1198 = $1143;
  } else {
   $1148 = (($__ptree__) + 116|0);
   $1149 = (($__ptree__) + 120|0);
   $1150 = (($__ptree__) + 124|0);
   $bb_piece$sroa$0$5102 = $1138;$bb_piece$sroa$1$5103 = $1141;$bb_piece$sroa$2$5104 = $1144;
   while(1) {
    $1151 = (_last_one210($bb_piece$sroa$2$5104,$bb_piece$sroa$1$5103,$bb_piece$sroa$0$5102)|0);
    $1152 = (34156304 + (($1151*12)|0)|0);
    $1153 = HEAP32[$1152>>2]|0;
    $1154 = $1153 ^ $bb_piece$sroa$0$5102;
    $1155 = ((34156304 + (($1151*12)|0)|0) + 4|0);
    $1156 = HEAP32[$1155>>2]|0;
    $1157 = $1156 ^ $bb_piece$sroa$1$5103;
    $1158 = ((34156304 + (($1151*12)|0)|0) + 8|0);
    $1159 = HEAP32[$1158>>2]|0;
    $1160 = $1159 ^ $bb_piece$sroa$2$5104;
    $1161 = (($1151) + -9)|0;
    $1162 = ((($__ptree__) + ($1161)|0) + 512|0);
    $1163 = HEAP8[$1162>>0]|0;
    $1164 = ($1163<<24>>24)>(0);
    if (!($1164)) {
     $1168 = ((33572424 + ($1151<<3)|0) + 6|0);
     $1169 = HEAP8[$1168>>0]|0;
     $1170 = $1169&255;
     $1171 = ((($__ptree__) + ($1170<<2)|0) + 56|0);
     $1172 = HEAP32[$1171>>2]|0;
     $1173 = ((33572424 + ($1151<<3)|0) + 7|0);
     $1174 = HEAP8[$1173>>0]|0;
     $1175 = $1174&255;
     $1176 = $1172 >>> $1175;
     $1177 = $1176 & 127;
     $1178 = ((33704320 + (($1151*1536)|0)|0) + (($1177*12)|0)|0);
     $1179 = HEAP32[$1178>>2]|0;
     $1180 = (((33704320 + (($1151*1536)|0)|0) + (($1177*12)|0)|0) + 4|0);
     $1181 = HEAP32[$1180>>2]|0;
     $1182 = (((33704320 + (($1151*1536)|0)|0) + (($1177*12)|0)|0) + 8|0);
     $1183 = HEAP32[$1182>>2]|0;
     $1184 = HEAP32[$1148>>2]|0;
     $1185 = $1184 & $1179;
     $1186 = HEAP32[$1149>>2]|0;
     $1187 = $1186 & $1181;
     $1188 = $1187 | $1185;
     $1189 = HEAP32[$1150>>2]|0;
     $1190 = $1189 & $1183;
     $1191 = $1188 | $1190;
     $1192 = ($1191|0)==(0);
     if (!($1192)) {
      $$0 = 1;
      label = 193;
      break;
     }
    }
    $1165 = $1157 | $1154;
    $1166 = $1165 | $1160;
    $1167 = ($1166|0)==(0);
    if ($1167) {
     label = 181;
     break;
    } else {
     $bb_piece$sroa$0$5102 = $1154;$bb_piece$sroa$1$5103 = $1157;$bb_piece$sroa$2$5104 = $1160;
    }
   }
   if ((label|0) == 181) {
    $$pre = HEAP32[$1136>>2]|0;
    $$pre122 = HEAP32[$1139>>2]|0;
    $$pre123 = HEAP32[$1142>>2]|0;
    $1194 = $$pre;$1196 = $$pre122;$1198 = $$pre123;
    break;
   }
   else if ((label|0) == 193) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $1193 = $1194 & $213;
 $1195 = $1196 & $215;
 $1197 = $1198 & $217;
 $1199 = $1195 | $1193;
 $1200 = $1199 | $1197;
 $1201 = ($1200|0)==(0);
 do {
  if ($1201) {
   $1248 = $1194;$1250 = $1196;$1252 = $1198;
  } else {
   $1202 = (($__ptree__) + 116|0);
   $1203 = (($__ptree__) + 120|0);
   $1204 = (($__ptree__) + 124|0);
   $bb_piece$sroa$0$696 = $1193;$bb_piece$sroa$1$697 = $1195;$bb_piece$sroa$2$698 = $1197;
   while(1) {
    $1205 = (_last_one210($bb_piece$sroa$2$698,$bb_piece$sroa$1$697,$bb_piece$sroa$0$696)|0);
    $1206 = (34156304 + (($1205*12)|0)|0);
    $1207 = HEAP32[$1206>>2]|0;
    $1208 = $1207 ^ $bb_piece$sroa$0$696;
    $1209 = ((34156304 + (($1205*12)|0)|0) + 4|0);
    $1210 = HEAP32[$1209>>2]|0;
    $1211 = $1210 ^ $bb_piece$sroa$1$697;
    $1212 = ((34156304 + (($1205*12)|0)|0) + 8|0);
    $1213 = HEAP32[$1212>>2]|0;
    $1214 = $1213 ^ $bb_piece$sroa$2$698;
    $1215 = (($1205) + -9)|0;
    $1216 = ((($__ptree__) + ($1215)|0) + 512|0);
    $1217 = HEAP8[$1216>>0]|0;
    $1218 = ($1217<<24>>24)>(0);
    if (!($1218)) {
     $1222 = ((33572424 + ($1205<<3)|0) + 4|0);
     $1223 = HEAP8[$1222>>0]|0;
     $1224 = $1223&255;
     $1225 = ((($__ptree__) + ($1224<<2)|0) + 44|0);
     $1226 = HEAP32[$1225>>2]|0;
     $1227 = ((33572424 + ($1205<<3)|0) + 5|0);
     $1228 = HEAP8[$1227>>0]|0;
     $1229 = $1228&255;
     $1230 = $1226 >>> $1229;
     $1231 = $1230 & 127;
     $1232 = ((33579904 + (($1205*1536)|0)|0) + (($1231*12)|0)|0);
     $1233 = HEAP32[$1232>>2]|0;
     $1234 = (((33579904 + (($1205*1536)|0)|0) + (($1231*12)|0)|0) + 4|0);
     $1235 = HEAP32[$1234>>2]|0;
     $1236 = (((33579904 + (($1205*1536)|0)|0) + (($1231*12)|0)|0) + 8|0);
     $1237 = HEAP32[$1236>>2]|0;
     $1238 = HEAP32[$1202>>2]|0;
     $1239 = $1238 & $1233;
     $1240 = HEAP32[$1203>>2]|0;
     $1241 = $1240 & $1235;
     $1242 = $1241 | $1239;
     $1243 = HEAP32[$1204>>2]|0;
     $1244 = $1243 & $1237;
     $1245 = $1242 | $1244;
     $1246 = ($1245|0)==(0);
     if (!($1246)) {
      $$0 = 1;
      label = 193;
      break;
     }
    }
    $1219 = $1211 | $1208;
    $1220 = $1219 | $1214;
    $1221 = ($1220|0)==(0);
    if ($1221) {
     label = 187;
     break;
    } else {
     $bb_piece$sroa$0$696 = $1208;$bb_piece$sroa$1$697 = $1211;$bb_piece$sroa$2$698 = $1214;
    }
   }
   if ((label|0) == 187) {
    $$pre124 = HEAP32[$1136>>2]|0;
    $$pre125 = HEAP32[$1139>>2]|0;
    $$pre126 = HEAP32[$1142>>2]|0;
    $1248 = $$pre124;$1250 = $$pre125;$1252 = $$pre126;
    break;
   }
   else if ((label|0) == 193) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $1247 = $1248 & $178;
 $1249 = $1250 & $180;
 $1251 = $1252 & $182;
 $1253 = $1249 | $1247;
 $1254 = $1253 | $1251;
 $1255 = ($1254|0)==(0);
 if ($1255) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1256 = (($__ptree__) + 140|0);
 $1257 = (($__ptree__) + 144|0);
 $1258 = (($__ptree__) + 148|0);
 $bb_piece$sroa$0$791 = $1247;$bb_piece$sroa$1$792 = $1249;$bb_piece$sroa$2$793 = $1251;
 while(1) {
  $1259 = (_last_one210($bb_piece$sroa$2$793,$bb_piece$sroa$1$792,$bb_piece$sroa$0$791)|0);
  $1260 = (34156304 + (($1259*12)|0)|0);
  $1261 = HEAP32[$1260>>2]|0;
  $1262 = $1261 ^ $bb_piece$sroa$0$791;
  $1263 = ((34156304 + (($1259*12)|0)|0) + 4|0);
  $1264 = HEAP32[$1263>>2]|0;
  $1265 = $1264 ^ $bb_piece$sroa$1$792;
  $1266 = ((34156304 + (($1259*12)|0)|0) + 8|0);
  $1267 = HEAP32[$1266>>2]|0;
  $1268 = $1267 ^ $bb_piece$sroa$2$793;
  $1269 = (($1259) + -9)|0;
  $1270 = ((($__ptree__) + ($1269)|0) + 512|0);
  $1271 = HEAP8[$1270>>0]|0;
  $1272 = ($1271<<24>>24)>(0);
  if (!($1272)) {
   $1276 = (33572424 + ($1259<<3)|0);
   $1277 = HEAP8[$1276>>0]|0;
   $1278 = $1277&255;
   $1279 = ((($__ptree__) + ($1278<<2)|0) + 8|0);
   $1280 = HEAP32[$1279>>2]|0;
   $1281 = ((($__ptree__) + ($1278<<2)|0) + 20|0);
   $1282 = HEAP32[$1281>>2]|0;
   $1283 = $1282 | $1280;
   $1284 = ((33572424 + ($1259<<3)|0) + 1|0);
   $1285 = HEAP8[$1284>>0]|0;
   $1286 = $1285&255;
   $1287 = $1283 >>> $1286;
   $1288 = $1287 & 127;
   $1289 = ((33828736 + (($1259*1536)|0)|0) + (($1288*12)|0)|0);
   $1290 = HEAP32[$1289>>2]|0;
   $1291 = (((33828736 + (($1259*1536)|0)|0) + (($1288*12)|0)|0) + 4|0);
   $1292 = HEAP32[$1291>>2]|0;
   $1293 = (((33828736 + (($1259*1536)|0)|0) + (($1288*12)|0)|0) + 8|0);
   $1294 = HEAP32[$1293>>2]|0;
   $1295 = HEAP32[$1256>>2]|0;
   $1296 = $1295 & $1290;
   $1297 = HEAP32[$1257>>2]|0;
   $1298 = $1297 & $1292;
   $1299 = $1298 | $1296;
   $1300 = HEAP32[$1258>>2]|0;
   $1301 = $1300 & $1294;
   $1302 = $1299 | $1301;
   $1303 = ($1302|0)==(0);
   if (!($1303)) {
    $$0 = 1;
    label = 193;
    break;
   }
  }
  $1273 = $1265 | $1262;
  $1274 = $1273 | $1268;
  $1275 = ($1274|0)==(0);
  if ($1275) {
   $$0 = 0;
   label = 193;
   break;
  } else {
   $bb_piece$sroa$0$791 = $1262;$bb_piece$sroa$1$792 = $1265;$bb_piece$sroa$2$793 = $1268;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _w_have_checks($__ptree__) {
 $__ptree__ = $__ptree__|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pr76 = 0, $$pr78 = 0, $$pre = 0, $$pre122 = 0, $$pre123 = 0, $$pre124 = 0, $$pre125 = 0, $$pre126 = 0, $$pre132 = 0, $$pre133 = 0, $$pre134 = 0, $$pre135 = 0, $$sink = 0, $$sink80 = 0, $$sink81 = 0, $$sink82 = 0, $$sink83 = 0, $$sink84 = 0;
 var $$sink85 = 0, $$sink86 = 0, $$sink87 = 0, $$sink88 = 0, $$sink89 = 0, $$sink90 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0;
 var $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0;
 var $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0;
 var $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0;
 var $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0;
 var $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0;
 var $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0;
 var $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0;
 var $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0;
 var $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0;
 var $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0;
 var $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0;
 var $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0;
 var $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0;
 var $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0;
 var $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bb_piece$sroa$0$0 = 0, $bb_piece$sroa$0$1 = 0, $bb_piece$sroa$0$2 = 0, $bb_piece$sroa$0$3 = 0, $bb_piece$sroa$0$4 = 0, $bb_piece$sroa$0$5102 = 0, $bb_piece$sroa$0$696 = 0, $bb_piece$sroa$0$791 = 0, $bb_piece$sroa$1$0 = 0, $bb_piece$sroa$1$1 = 0;
 var $bb_piece$sroa$1$2 = 0, $bb_piece$sroa$1$3 = 0, $bb_piece$sroa$1$4 = 0, $bb_piece$sroa$1$5103 = 0, $bb_piece$sroa$1$697 = 0, $bb_piece$sroa$1$792 = 0, $bb_piece$sroa$2$0 = 0, $bb_piece$sroa$2$1 = 0, $bb_piece$sroa$2$2 = 0, $bb_piece$sroa$2$3 = 0, $bb_piece$sroa$2$4 = 0, $bb_piece$sroa$2$5104 = 0, $bb_piece$sroa$2$698 = 0, $bb_piece$sroa$2$793 = 0, $bb_tmp$sroa$0$0$i = 0, $bb_tmp$sroa$0$0$i12 = 0, $bb_tmp$sroa$0$0$i19 = 0, $bb_tmp$sroa$0$0$i33 = 0, $bb_tmp$sroa$0$0$i5 = 0, $bb_tmp$sroa$0$0$i54 = 0;
 var $bb_tmp$sroa$0$0$i61 = 0, $bb_tmp$sroa$0$0$i68 = 0, $bb_tmp$sroa$0$0$in$i = 0, $bb_tmp$sroa$0$0$in$i11 = 0, $bb_tmp$sroa$0$0$in$i18 = 0, $bb_tmp$sroa$0$0$in$i32 = 0, $bb_tmp$sroa$0$0$in$i4 = 0, $bb_tmp$sroa$0$0$in$i53 = 0, $bb_tmp$sroa$0$0$in$i60 = 0, $bb_tmp$sroa$0$0$in$i67 = 0, $bb_tmp$sroa$1$0$i = 0, $bb_tmp$sroa$1$0$i13 = 0, $bb_tmp$sroa$1$0$i20 = 0, $bb_tmp$sroa$1$0$i34 = 0, $bb_tmp$sroa$1$0$i48 = 0, $bb_tmp$sroa$1$0$i55 = 0, $bb_tmp$sroa$1$0$i6 = 0, $bb_tmp$sroa$1$0$i62 = 0, $bb_tmp$sroa$1$0$i69 = 0, $bb_tmp$sroa$1$0$in$i = 0;
 var $bb_tmp$sroa$1$0$in$i10 = 0, $bb_tmp$sroa$1$0$in$i17 = 0, $bb_tmp$sroa$1$0$in$i3 = 0, $bb_tmp$sroa$1$0$in$i31 = 0, $bb_tmp$sroa$1$0$in$i45 = 0, $bb_tmp$sroa$1$0$in$i52 = 0, $bb_tmp$sroa$1$0$in$i59 = 0, $bb_tmp$sroa$1$0$in$i66 = 0, $bb_tmp$sroa$2$0$i = 0, $bb_tmp$sroa$2$0$i14 = 0, $bb_tmp$sroa$2$0$i21 = 0, $bb_tmp$sroa$2$0$i28 = 0, $bb_tmp$sroa$2$0$i35 = 0, $bb_tmp$sroa$2$0$i42 = 0, $bb_tmp$sroa$2$0$i49 = 0, $bb_tmp$sroa$2$0$i56 = 0, $bb_tmp$sroa$2$0$i63 = 0, $bb_tmp$sroa$2$0$i7 = 0, $bb_tmp$sroa$2$0$i70 = 0, $bb_tmp$sroa$2$0$in$i = 0;
 var $bb_tmp$sroa$2$0$in$i16 = 0, $bb_tmp$sroa$2$0$in$i2 = 0, $bb_tmp$sroa$2$0$in$i23 = 0, $bb_tmp$sroa$2$0$in$i30 = 0, $bb_tmp$sroa$2$0$in$i37 = 0, $bb_tmp$sroa$2$0$in$i44 = 0, $bb_tmp$sroa$2$0$in$i51 = 0, $bb_tmp$sroa$2$0$in$i58 = 0, $bb_tmp$sroa$2$0$in$i65 = 0, $bb_tmp$sroa$2$0$in$i9 = 0, $or$cond = 0, $or$cond1 = 0, $u0$0 = 0, $u0$1 = 0, $u0$2 = 0, $u0$3 = 0, $u1$0 = 0, $u1$1 = 0, $u1$2 = 0, $u1$3 = 0;
 var $u1$4 = 0, $u1$5 = 0, $u2$0 = 0, $u2$1 = 0, $u2$2 = 0, $u2$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__ptree__) + 593|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($__ptree__) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($__ptree__) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 | $4;
 $8 = (($__ptree__) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($__ptree__) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 | $9;
 $13 = (($__ptree__) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($__ptree__) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 | $14;
 $18 = $7 ^ -1;
 $19 = $12 ^ -1;
 $20 = $17 ^ -1;
 $21 = (($__ptree__) + 504|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & 114688;
 $24 = ($23|0)==(0);
 if (!($24)) {
  $25 = (33575024 + (($2*12)|0)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & $18;
  $28 = ((33575024 + (($2*12)|0)|0) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 & $19;
  $31 = ((33575024 + (($2*12)|0)|0) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 & $20;
  $34 = $30 | $27;
  $35 = $34 | $33;
  $36 = ($35|0)==(0);
  if (!($36)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $37 = $22 & 14336;
 $38 = ($37|0)==(0);
 if (!($38)) {
  $39 = (33574048 + (($2*12)|0)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 & $18;
  $42 = ((33574048 + (($2*12)|0)|0) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $43 & $19;
  $45 = ((33574048 + (($2*12)|0)|0) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $46 & $20;
  $48 = $44 | $41;
  $49 = $48 | $47;
  $50 = ($49|0)==(0);
  if (!($50)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $51 = $22 & 1792;
 $52 = ($51|0)!=(0);
 $53 = ($1&255)>(17);
 $or$cond = $52 & $53;
 L9: do {
  if ($or$cond) {
   $54 = (1248 + ($2)|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = ($55<<24>>24)==(0);
   do {
    if (!($56)) {
     $57 = (($2) + -19)|0;
     $58 = ((($__ptree__) + ($57)|0) + 512|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = ($59<<24>>24)==(0);
     if ($60) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     } else {
      $61 = ($55<<24>>24)==(8);
      if ($61) {
       break L9;
      } else {
       break;
      }
     }
    }
   } while(0);
   $62 = (($2) + -17)|0;
   $63 = ((($__ptree__) + ($62)|0) + 512|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = ($64<<24>>24)==(0);
   if ($65) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $66 = $22 & 224;
 $67 = ($66|0)==(0);
 if (!($67)) {
  $68 = (($2) + -9)|0;
  $69 = ($68|0)>(-1);
  if ($69) {
   $70 = ((($__ptree__) + ($68)|0) + 512|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = ($71<<24>>24)==(0);
   if ($72) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $73 = $22 & 1572864;
 $74 = ($73|0)==(0);
 if (!($74)) {
  $75 = (($2) + 9)|0;
  $76 = ($75>>>0)<(81);
  if ($76) {
   $77 = ((($__ptree__) + ($75)|0) + 512|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = ($78<<24>>24)==(0);
   if ($79) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $80 = (1248 + ($2)|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = ($81<<24>>24)==(0);
  do {
   if ($82) {
    label = 19;
   } else {
    $83 = (($2) + -1)|0;
    $84 = ((($__ptree__) + ($83)|0) + 512|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = ($85<<24>>24)==(0);
    if ($86) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    } else {
     $87 = ($81&255)<(8);
     if ($87) {
      label = 19;
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   $88 = (($2) + 1)|0;
   $89 = ((($__ptree__) + ($88)|0) + 512|0);
   $90 = HEAP8[$89>>0]|0;
   $91 = ($90<<24>>24)==(0);
   if ($91) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $92 = (($2) + -9)|0;
  $93 = ($92|0)>(-1);
  if ($93) {
   $94 = ((($__ptree__) + ($92)|0) + 512|0);
   $95 = HEAP8[$94>>0]|0;
   $96 = ($95<<24>>24)==(0);
   if ($96) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $97 = $22 & 393216;
 $98 = ($97|0)==(0);
 do {
  if (!($98)) {
   $99 = (1248 + ($2)|0);
   $100 = HEAP8[$99>>0]|0;
   $101 = ($100<<24>>24)==(0);
   $$phi$trans$insert = (1336 + ($2)|0);
   $$pre135 = HEAP8[$$phi$trans$insert>>0]|0;
   if ($101) {
    $$pr76 = 0;
    label = 27;
   } else {
    $102 = ($$pre135<<24>>24)==(0);
    if (!($102)) {
     $103 = (($2) + -10)|0;
     $104 = ((($__ptree__) + ($103)|0) + 512|0);
     $105 = HEAP8[$104>>0]|0;
     $106 = ($105<<24>>24)==(0);
     if ($106) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $107 = ($100&255)<(8);
    if ($107) {
     $$pr76 = $100;
     label = 27;
    } else {
     $$pr78 = $100;
     label = 30;
    }
   }
   if ((label|0) == 27) {
    $108 = ($$pre135<<24>>24)==(0);
    if (!($108)) {
     $109 = (($2) + -8)|0;
     $110 = ((($__ptree__) + ($109)|0) + 512|0);
     $111 = HEAP8[$110>>0]|0;
     $112 = ($111<<24>>24)==(0);
     if ($112) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $113 = ($$pr76<<24>>24)==(0);
    if (!($113)) {
     $$pr78 = $$pr76;
     label = 30;
    }
   }
   if ((label|0) == 30) {
    $114 = ($$pre135&255)<(8);
    if ($114) {
     $115 = (($2) + 8)|0;
     $116 = ((($__ptree__) + ($115)|0) + 512|0);
     $117 = HEAP8[$116>>0]|0;
     $118 = ($117<<24>>24)==(0);
     if ($118) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $119 = ($$pr78&255)<(8);
    if (!($119)) {
     break;
    }
   }
   $120 = ($$pre135&255)<(8);
   if ($120) {
    $121 = (($2) + 10)|0;
    $122 = ((($__ptree__) + ($121)|0) + 512|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = ($123<<24>>24)==(0);
    if ($124) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $125 = $22 & 31;
 $126 = ($125|0)!=(0);
 $127 = ($1&255)>(8);
 $or$cond1 = $126 & $127;
 do {
  if ($or$cond1) {
   $128 = (($2) + -9)|0;
   $129 = ((($__ptree__) + ($128)|0) + 512|0);
   $130 = HEAP8[$129>>0]|0;
   $131 = ($130<<24>>24)==(0);
   if ($131) {
    $132 = (($__ptree__) + 368|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (($__ptree__) + 372|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $135 | $133;
    $137 = (($__ptree__) + 376|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = $136 | $138;
    $140 = (1248 + ($2)|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141&255;
    $143 = 67240192 >>> $142;
    $144 = $143 & $139;
    $145 = ($144|0)==(0);
    if ($145) {
     $146 = (_is_mate_w_pawn_drop($__ptree__,$128)|0);
     $147 = ($146|0)==(0);
     if ($147) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$pre132 = HEAP32[$5>>2]|0;
      $$pre133 = HEAP32[$10>>2]|0;
      $$pre134 = HEAP32[$15>>2]|0;
      $222 = $$pre132;$224 = $$pre133;$226 = $$pre134;
      break;
     }
    } else {
     $222 = $6;$224 = $11;$226 = $16;
    }
   } else {
    $222 = $6;$224 = $11;$226 = $16;
   }
  } else {
   $222 = $6;$224 = $11;$226 = $16;
  }
 } while(0);
 $148 = ((33572424 + ($2<<3)|0) + 2|0);
 $149 = HEAP8[$148>>0]|0;
 $150 = $149&255;
 $151 = ((($__ptree__) + ($150<<2)|0) + 32|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = ((33572424 + ($2<<3)|0) + 3|0);
 $154 = HEAP8[$153>>0]|0;
 $155 = $154&255;
 $156 = $152 >>> $155;
 $157 = $156 & 127;
 $158 = ((33953152 + (($2*1536)|0)|0) + (($157*12)|0)|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = (((33953152 + (($2*1536)|0)|0) + (($157*12)|0)|0) + 4|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = (((33953152 + (($2*1536)|0)|0) + (($157*12)|0)|0) + 8|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = (33572424 + ($2<<3)|0);
 $165 = HEAP8[$164>>0]|0;
 $166 = $165&255;
 $167 = ((($__ptree__) + ($166<<2)|0) + 8|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = ((($__ptree__) + ($166<<2)|0) + 20|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = $170 | $168;
 $172 = ((33572424 + ($2<<3)|0) + 1|0);
 $173 = HEAP8[$172>>0]|0;
 $174 = $173&255;
 $175 = $171 >>> $174;
 $176 = $175 & 127;
 $177 = ((33828736 + (($2*1536)|0)|0) + (($176*12)|0)|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = (((33828736 + (($2*1536)|0)|0) + (($176*12)|0)|0) + 4|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = (((33828736 + (($2*1536)|0)|0) + (($176*12)|0)|0) + 8|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = $178 | $159;
 $184 = $180 | $161;
 $185 = $182 | $163;
 $186 = ((33572424 + ($2<<3)|0) + 6|0);
 $187 = HEAP8[$186>>0]|0;
 $188 = $187&255;
 $189 = ((($__ptree__) + ($188<<2)|0) + 56|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = ((33572424 + ($2<<3)|0) + 7|0);
 $192 = HEAP8[$191>>0]|0;
 $193 = $192&255;
 $194 = $190 >>> $193;
 $195 = $194 & 127;
 $196 = ((33704320 + (($2*1536)|0)|0) + (($195*12)|0)|0);
 $197 = HEAP32[$196>>2]|0;
 $198 = (((33704320 + (($2*1536)|0)|0) + (($195*12)|0)|0) + 4|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = (((33704320 + (($2*1536)|0)|0) + (($195*12)|0)|0) + 8|0);
 $201 = HEAP32[$200>>2]|0;
 $202 = ((33572424 + ($2<<3)|0) + 4|0);
 $203 = HEAP8[$202>>0]|0;
 $204 = $203&255;
 $205 = ((($__ptree__) + ($204<<2)|0) + 44|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = ((33572424 + ($2<<3)|0) + 5|0);
 $208 = HEAP8[$207>>0]|0;
 $209 = $208&255;
 $210 = $206 >>> $209;
 $211 = $210 & 127;
 $212 = ((33579904 + (($2*1536)|0)|0) + (($211*12)|0)|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = (((33579904 + (($2*1536)|0)|0) + (($211*12)|0)|0) + 4|0);
 $215 = HEAP32[$214>>2]|0;
 $216 = (((33579904 + (($2*1536)|0)|0) + (($211*12)|0)|0) + 8|0);
 $217 = HEAP32[$216>>2]|0;
 $218 = $213 | $197;
 $219 = $215 | $199;
 $220 = $217 | $201;
 $221 = $222 ^ -1;
 $223 = $224 ^ -1;
 $225 = $226 ^ -1;
 $227 = (($__ptree__) + 594|0);
 $228 = HEAP8[$227>>0]|0;
 $229 = $228&255;
 $230 = ((220518304 + (($2*81)|0)|0) + ($229)|0);
 $231 = HEAP8[$230>>0]|0;
 $232 = $231&255;
 $233 = ($231<<24>>24)==(0);
 if (!($233)) {
  $234 = (_is_pinned_on_black_king($__ptree__,$229,$232)|0);
  $235 = ($234|0)==(0);
  if (!($235)) {
   if ((($232|0) == 4)) {
    $236 = (33704320 + (($2*1536)|0)|0);
    $237 = ((33704320 + (($2*1536)|0)|0) + 4|0);
    $238 = ((33704320 + (($2*1536)|0)|0) + 8|0);
    $bb_tmp$sroa$0$0$in$i = $236;$bb_tmp$sroa$1$0$in$i = $237;$bb_tmp$sroa$2$0$in$i = $238;
   } else if ((($232|0) == 5)) {
    $239 = (33579904 + (($2*1536)|0)|0);
    $240 = ((33579904 + (($2*1536)|0)|0) + 4|0);
    $241 = ((33579904 + (($2*1536)|0)|0) + 8|0);
    $bb_tmp$sroa$0$0$in$i = $239;$bb_tmp$sroa$1$0$in$i = $240;$bb_tmp$sroa$2$0$in$i = $241;
   } else if ((($232|0) == 2)) {
    $242 = (33953152 + (($2*1536)|0)|0);
    $243 = ((33953152 + (($2*1536)|0)|0) + 4|0);
    $244 = ((33953152 + (($2*1536)|0)|0) + 8|0);
    $bb_tmp$sroa$0$0$in$i = $242;$bb_tmp$sroa$1$0$in$i = $243;$bb_tmp$sroa$2$0$in$i = $244;
   } else {
    $245 = (33828736 + (($2*1536)|0)|0);
    $246 = ((33828736 + (($2*1536)|0)|0) + 4|0);
    $247 = ((33828736 + (($2*1536)|0)|0) + 8|0);
    $bb_tmp$sroa$0$0$in$i = $245;$bb_tmp$sroa$1$0$in$i = $246;$bb_tmp$sroa$2$0$in$i = $247;
   }
   $bb_tmp$sroa$0$0$i = HEAP32[$bb_tmp$sroa$0$0$in$i>>2]|0;
   $bb_tmp$sroa$1$0$i = HEAP32[$bb_tmp$sroa$1$0$in$i>>2]|0;
   $bb_tmp$sroa$2$0$i = HEAP32[$bb_tmp$sroa$2$0$in$i>>2]|0;
   $248 = $bb_tmp$sroa$0$0$i ^ -1;
   $249 = $bb_tmp$sroa$1$0$i ^ -1;
   $250 = $bb_tmp$sroa$2$0$i ^ -1;
   $251 = (33578928 + (($229*12)|0)|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = ((33578928 + (($229*12)|0)|0) + 4|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = ((33578928 + (($229*12)|0)|0) + 8|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = $248 & $221;
   $258 = $257 & $252;
   $259 = $249 & $223;
   $260 = $259 & $254;
   $261 = $250 & $225;
   $262 = $261 & $256;
   $263 = $260 | $258;
   $264 = $263 | $262;
   $265 = ($264|0)==(0);
   if (!($265)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $266 = (($__ptree__) + 344|0);
 $267 = HEAP32[$266>>2]|0;
 $268 = (($__ptree__) + 348|0);
 $269 = HEAP32[$268>>2]|0;
 $270 = (($__ptree__) + 352|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = (33578928 + (($2*12)|0)|0);
 $273 = ((33578928 + (($2*12)|0)|0) + 4|0);
 $274 = ((33578928 + (($2*12)|0)|0) + 8|0);
 $275 = (33828736 + (($2*1536)|0)|0);
 $276 = ((33828736 + (($2*1536)|0)|0) + 4|0);
 $277 = ((33828736 + (($2*1536)|0)|0) + 8|0);
 $278 = (33704320 + (($2*1536)|0)|0);
 $279 = ((33704320 + (($2*1536)|0)|0) + 4|0);
 $280 = ((33704320 + (($2*1536)|0)|0) + 8|0);
 $281 = (33579904 + (($2*1536)|0)|0);
 $282 = ((33579904 + (($2*1536)|0)|0) + 4|0);
 $283 = ((33579904 + (($2*1536)|0)|0) + 8|0);
 $284 = (33953152 + (($2*1536)|0)|0);
 $285 = ((33953152 + (($2*1536)|0)|0) + 4|0);
 $286 = ((33953152 + (($2*1536)|0)|0) + 8|0);
 $bb_piece$sroa$0$0 = $267;$bb_piece$sroa$1$0 = $269;$bb_piece$sroa$2$0 = $271;
 while(1) {
  $287 = $bb_piece$sroa$1$0 | $bb_piece$sroa$0$0;
  $288 = $287 | $bb_piece$sroa$2$0;
  $289 = ($288|0)==(0);
  if ($289) {
   break;
  }
  $290 = (_first_one012($bb_piece$sroa$0$0,$bb_piece$sroa$1$0,$bb_piece$sroa$2$0)|0);
  $291 = (34156304 + (($290*12)|0)|0);
  $292 = HEAP32[$291>>2]|0;
  $293 = $292 ^ $bb_piece$sroa$0$0;
  $294 = ((34156304 + (($290*12)|0)|0) + 4|0);
  $295 = HEAP32[$294>>2]|0;
  $296 = $295 ^ $bb_piece$sroa$1$0;
  $297 = ((34156304 + (($290*12)|0)|0) + 8|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = $298 ^ $bb_piece$sroa$2$0;
  $300 = HEAP32[$272>>2]|0;
  $301 = $300 | $183;
  $302 = HEAP32[$273>>2]|0;
  $303 = $302 | $184;
  $304 = HEAP32[$274>>2]|0;
  $305 = $304 | $185;
  $306 = ((220518304 + (($2*81)|0)|0) + ($290)|0);
  $307 = HEAP8[$306>>0]|0;
  $308 = $307&255;
  $309 = ($307<<24>>24)==(0);
  if ($309) {
   $366 = $301;$369 = $303;$372 = $305;
  } else {
   $310 = (_is_pinned_on_black_king($__ptree__,$290,$308)|0);
   $311 = ($310|0)==(0);
   if ($311) {
    $366 = $301;$369 = $303;$372 = $305;
   } else {
    if ((($308|0) == 2)) {
     $bb_tmp$sroa$0$0$in$i67 = $284;$bb_tmp$sroa$1$0$in$i66 = $285;$bb_tmp$sroa$2$0$in$i65 = $286;
    } else if ((($308|0) == 4)) {
     $bb_tmp$sroa$0$0$in$i67 = $278;$bb_tmp$sroa$1$0$in$i66 = $279;$bb_tmp$sroa$2$0$in$i65 = $280;
    } else if ((($308|0) == 5)) {
     $bb_tmp$sroa$0$0$in$i67 = $281;$bb_tmp$sroa$1$0$in$i66 = $282;$bb_tmp$sroa$2$0$in$i65 = $283;
    } else {
     $bb_tmp$sroa$0$0$in$i67 = $275;$bb_tmp$sroa$1$0$in$i66 = $276;$bb_tmp$sroa$2$0$in$i65 = $277;
    }
    $bb_tmp$sroa$0$0$i68 = HEAP32[$bb_tmp$sroa$0$0$in$i67>>2]|0;
    $bb_tmp$sroa$1$0$i69 = HEAP32[$bb_tmp$sroa$1$0$in$i66>>2]|0;
    $bb_tmp$sroa$2$0$i70 = HEAP32[$bb_tmp$sroa$2$0$in$i65>>2]|0;
    $312 = $bb_tmp$sroa$0$0$i68 ^ -1;
    $313 = $bb_tmp$sroa$1$0$i69 ^ -1;
    $314 = $bb_tmp$sroa$2$0$i70 ^ -1;
    $315 = $301 | $312;
    $316 = $303 | $313;
    $317 = $305 | $314;
    $366 = $315;$369 = $316;$372 = $317;
   }
  }
  $318 = ((33572424 + ($290<<3)|0) + 2|0);
  $319 = HEAP8[$318>>0]|0;
  $320 = $319&255;
  $321 = ((($__ptree__) + ($320<<2)|0) + 32|0);
  $322 = HEAP32[$321>>2]|0;
  $323 = ((33572424 + ($290<<3)|0) + 3|0);
  $324 = HEAP8[$323>>0]|0;
  $325 = $324&255;
  $326 = $322 >>> $325;
  $327 = $326 & 127;
  $328 = ((33953152 + (($290*1536)|0)|0) + (($327*12)|0)|0);
  $329 = HEAP32[$328>>2]|0;
  $330 = (33572424 + ($290<<3)|0);
  $331 = HEAP8[$330>>0]|0;
  $332 = $331&255;
  $333 = ((($__ptree__) + ($332<<2)|0) + 8|0);
  $334 = HEAP32[$333>>2]|0;
  $335 = ((($__ptree__) + ($332<<2)|0) + 20|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = $336 | $334;
  $338 = ((33572424 + ($290<<3)|0) + 1|0);
  $339 = HEAP8[$338>>0]|0;
  $340 = $339&255;
  $341 = $337 >>> $340;
  $342 = $341 & 127;
  $343 = ((33828736 + (($290*1536)|0)|0) + (($342*12)|0)|0);
  $344 = HEAP32[$343>>2]|0;
  $345 = $344 | $329;
  $346 = (((33953152 + (($290*1536)|0)|0) + (($327*12)|0)|0) + 4|0);
  $347 = HEAP32[$346>>2]|0;
  $348 = (((33828736 + (($290*1536)|0)|0) + (($342*12)|0)|0) + 4|0);
  $349 = HEAP32[$348>>2]|0;
  $350 = $349 | $347;
  $351 = (((33953152 + (($290*1536)|0)|0) + (($327*12)|0)|0) + 8|0);
  $352 = HEAP32[$351>>2]|0;
  $353 = (((33828736 + (($290*1536)|0)|0) + (($342*12)|0)|0) + 8|0);
  $354 = HEAP32[$353>>2]|0;
  $355 = $354 | $352;
  $356 = (33578928 + (($290*12)|0)|0);
  $357 = HEAP32[$356>>2]|0;
  $358 = $345 | $357;
  $359 = ((33578928 + (($290*12)|0)|0) + 4|0);
  $360 = HEAP32[$359>>2]|0;
  $361 = $350 | $360;
  $362 = ((33578928 + (($290*12)|0)|0) + 8|0);
  $363 = HEAP32[$362>>2]|0;
  $364 = $355 | $363;
  $365 = $366 & $221;
  $367 = $365 & $358;
  $368 = $369 & $223;
  $370 = $368 & $361;
  $371 = $372 & $225;
  $373 = $371 & $364;
  $374 = $370 | $367;
  $375 = $374 | $373;
  $376 = ($375|0)==(0);
  if ($376) {
   $bb_piece$sroa$0$0 = $293;$bb_piece$sroa$1$0 = $296;$bb_piece$sroa$2$0 = $299;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $377 = (($__ptree__) + 320|0);
 $378 = HEAP32[$377>>2]|0;
 $379 = (($__ptree__) + 324|0);
 $380 = HEAP32[$379>>2]|0;
 $381 = (($__ptree__) + 328|0);
 $382 = HEAP32[$381>>2]|0;
 $bb_piece$sroa$0$1 = $378;$bb_piece$sroa$1$1 = $380;$bb_piece$sroa$2$1 = $382;
 while(1) {
  $383 = $bb_piece$sroa$1$1 | $bb_piece$sroa$0$1;
  $384 = $383 | $bb_piece$sroa$2$1;
  $385 = ($384|0)==(0);
  if ($385) {
   break;
  }
  $386 = (_first_one012($bb_piece$sroa$0$1,$bb_piece$sroa$1$1,$bb_piece$sroa$2$1)|0);
  $387 = (34156304 + (($386*12)|0)|0);
  $388 = HEAP32[$387>>2]|0;
  $389 = $388 ^ $bb_piece$sroa$0$1;
  $390 = ((34156304 + (($386*12)|0)|0) + 4|0);
  $391 = HEAP32[$390>>2]|0;
  $392 = $391 ^ $bb_piece$sroa$1$1;
  $393 = ((34156304 + (($386*12)|0)|0) + 8|0);
  $394 = HEAP32[$393>>2]|0;
  $395 = $394 ^ $bb_piece$sroa$2$1;
  $396 = HEAP32[$272>>2]|0;
  $397 = $396 | $218;
  $398 = HEAP32[$273>>2]|0;
  $399 = $398 | $219;
  $400 = HEAP32[$274>>2]|0;
  $401 = $400 | $220;
  $402 = ((220518304 + (($2*81)|0)|0) + ($386)|0);
  $403 = HEAP8[$402>>0]|0;
  $404 = $403&255;
  $405 = ($403<<24>>24)==(0);
  if ($405) {
   $459 = $397;$462 = $399;$465 = $401;
  } else {
   $406 = (_is_pinned_on_black_king($__ptree__,$386,$404)|0);
   $407 = ($406|0)==(0);
   if ($407) {
    $459 = $397;$462 = $399;$465 = $401;
   } else {
    if ((($404|0) == 2)) {
     $bb_tmp$sroa$0$0$in$i60 = $284;$bb_tmp$sroa$1$0$in$i59 = $285;$bb_tmp$sroa$2$0$in$i58 = $286;
    } else if ((($404|0) == 5)) {
     $bb_tmp$sroa$0$0$in$i60 = $281;$bb_tmp$sroa$1$0$in$i59 = $282;$bb_tmp$sroa$2$0$in$i58 = $283;
    } else if ((($404|0) == 4)) {
     $bb_tmp$sroa$0$0$in$i60 = $278;$bb_tmp$sroa$1$0$in$i59 = $279;$bb_tmp$sroa$2$0$in$i58 = $280;
    } else {
     $bb_tmp$sroa$0$0$in$i60 = $275;$bb_tmp$sroa$1$0$in$i59 = $276;$bb_tmp$sroa$2$0$in$i58 = $277;
    }
    $bb_tmp$sroa$0$0$i61 = HEAP32[$bb_tmp$sroa$0$0$in$i60>>2]|0;
    $bb_tmp$sroa$1$0$i62 = HEAP32[$bb_tmp$sroa$1$0$in$i59>>2]|0;
    $bb_tmp$sroa$2$0$i63 = HEAP32[$bb_tmp$sroa$2$0$in$i58>>2]|0;
    $408 = $bb_tmp$sroa$0$0$i61 ^ -1;
    $409 = $bb_tmp$sroa$1$0$i62 ^ -1;
    $410 = $bb_tmp$sroa$2$0$i63 ^ -1;
    $411 = $397 | $408;
    $412 = $399 | $409;
    $413 = $401 | $410;
    $459 = $411;$462 = $412;$465 = $413;
   }
  }
  $414 = ((33572424 + ($386<<3)|0) + 6|0);
  $415 = HEAP8[$414>>0]|0;
  $416 = $415&255;
  $417 = ((($__ptree__) + ($416<<2)|0) + 56|0);
  $418 = HEAP32[$417>>2]|0;
  $419 = ((33572424 + ($386<<3)|0) + 7|0);
  $420 = HEAP8[$419>>0]|0;
  $421 = $420&255;
  $422 = $418 >>> $421;
  $423 = $422 & 127;
  $424 = ((33704320 + (($386*1536)|0)|0) + (($423*12)|0)|0);
  $425 = HEAP32[$424>>2]|0;
  $426 = ((33572424 + ($386<<3)|0) + 4|0);
  $427 = HEAP8[$426>>0]|0;
  $428 = $427&255;
  $429 = ((($__ptree__) + ($428<<2)|0) + 44|0);
  $430 = HEAP32[$429>>2]|0;
  $431 = ((33572424 + ($386<<3)|0) + 5|0);
  $432 = HEAP8[$431>>0]|0;
  $433 = $432&255;
  $434 = $430 >>> $433;
  $435 = $434 & 127;
  $436 = ((33579904 + (($386*1536)|0)|0) + (($435*12)|0)|0);
  $437 = HEAP32[$436>>2]|0;
  $438 = $437 | $425;
  $439 = (((33704320 + (($386*1536)|0)|0) + (($423*12)|0)|0) + 4|0);
  $440 = HEAP32[$439>>2]|0;
  $441 = (((33579904 + (($386*1536)|0)|0) + (($435*12)|0)|0) + 4|0);
  $442 = HEAP32[$441>>2]|0;
  $443 = $442 | $440;
  $444 = (((33704320 + (($386*1536)|0)|0) + (($423*12)|0)|0) + 8|0);
  $445 = HEAP32[$444>>2]|0;
  $446 = (((33579904 + (($386*1536)|0)|0) + (($435*12)|0)|0) + 8|0);
  $447 = HEAP32[$446>>2]|0;
  $448 = $447 | $445;
  $449 = (33578928 + (($386*12)|0)|0);
  $450 = HEAP32[$449>>2]|0;
  $451 = $438 | $450;
  $452 = ((33578928 + (($386*12)|0)|0) + 4|0);
  $453 = HEAP32[$452>>2]|0;
  $454 = $443 | $453;
  $455 = ((33578928 + (($386*12)|0)|0) + 8|0);
  $456 = HEAP32[$455>>2]|0;
  $457 = $448 | $456;
  $458 = $459 & $221;
  $460 = $458 & $451;
  $461 = $462 & $223;
  $463 = $461 & $454;
  $464 = $465 & $225;
  $466 = $464 & $457;
  $467 = $463 | $460;
  $468 = $467 | $466;
  $469 = ($468|0)==(0);
  if ($469) {
   $bb_piece$sroa$0$1 = $389;$bb_piece$sroa$1$1 = $392;$bb_piece$sroa$2$1 = $395;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $470 = (($__ptree__) + 296|0);
 $471 = HEAP32[$470>>2]|0;
 $472 = (($__ptree__) + 300|0);
 $473 = HEAP32[$472>>2]|0;
 $u0$0 = $471;$u1$0 = $473;
 while(1) {
  $474 = $u1$0 | $u0$0;
  $475 = ($474|0)==(0);
  if ($475) {
   break;
  }
  $476 = (_first_one01($u0$0,$u1$0)|0);
  $477 = (34156304 + (($476*12)|0)|0);
  $478 = HEAP32[$477>>2]|0;
  $479 = $478 ^ $u0$0;
  $480 = ((34156304 + (($476*12)|0)|0) + 4|0);
  $481 = HEAP32[$480>>2]|0;
  $482 = $481 ^ $u1$0;
  $483 = ((33572424 + ($476<<3)|0) + 2|0);
  $484 = HEAP8[$483>>0]|0;
  $485 = $484&255;
  $486 = ((($__ptree__) + ($485<<2)|0) + 32|0);
  $487 = HEAP32[$486>>2]|0;
  $488 = ((33572424 + ($476<<3)|0) + 3|0);
  $489 = HEAP8[$488>>0]|0;
  $490 = $489&255;
  $491 = $487 >>> $490;
  $492 = $491 & 127;
  $493 = ((33953152 + (($476*1536)|0)|0) + (($492*12)|0)|0);
  $494 = HEAP32[$493>>2]|0;
  $495 = (33572424 + ($476<<3)|0);
  $496 = HEAP8[$495>>0]|0;
  $497 = $496&255;
  $498 = ((($__ptree__) + ($497<<2)|0) + 8|0);
  $499 = HEAP32[$498>>2]|0;
  $500 = ((($__ptree__) + ($497<<2)|0) + 20|0);
  $501 = HEAP32[$500>>2]|0;
  $502 = $501 | $499;
  $503 = ((33572424 + ($476<<3)|0) + 1|0);
  $504 = HEAP8[$503>>0]|0;
  $505 = $504&255;
  $506 = $502 >>> $505;
  $507 = $506 & 127;
  $508 = ((33828736 + (($476*1536)|0)|0) + (($507*12)|0)|0);
  $509 = HEAP32[$508>>2]|0;
  $510 = $509 | $494;
  $511 = (((33953152 + (($476*1536)|0)|0) + (($492*12)|0)|0) + 4|0);
  $512 = HEAP32[$511>>2]|0;
  $513 = (((33828736 + (($476*1536)|0)|0) + (($507*12)|0)|0) + 4|0);
  $514 = HEAP32[$513>>2]|0;
  $515 = $514 | $512;
  $516 = (((33953152 + (($476*1536)|0)|0) + (($492*12)|0)|0) + 8|0);
  $517 = HEAP32[$516>>2]|0;
  $518 = (((33828736 + (($476*1536)|0)|0) + (($507*12)|0)|0) + 8|0);
  $519 = HEAP32[$518>>2]|0;
  $520 = $519 | $517;
  $521 = ((220518304 + (($2*81)|0)|0) + ($476)|0);
  $522 = HEAP8[$521>>0]|0;
  $523 = ($522<<24>>24)==(0);
  if ($523) {
   label = 72;
  } else {
   $524 = $522&255;
   $525 = (_is_pinned_on_black_king($__ptree__,$476,$524)|0);
   $526 = ($525|0)==(0);
   if ($526) {
    label = 72;
   } else {
    $$sink = $520;$$sink80 = $515;$$sink81 = $510;
   }
  }
  if ((label|0) == 72) {
   label = 0;
   $527 = HEAP32[$274>>2]|0;
   $528 = $527 | $185;
   $529 = $510 & $183;
   $530 = $515 & $184;
   $531 = $528 & $520;
   $$sink = $531;$$sink80 = $530;$$sink81 = $529;
  }
  $532 = $$sink81 & $221;
  $533 = $$sink80 & $223;
  $534 = $$sink & $225;
  $535 = $533 | $532;
  $536 = $535 | $534;
  $537 = ($536|0)==(0);
  if ($537) {
   $u0$0 = $479;$u1$0 = $482;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $538 = (($__ptree__) + 304|0);
 $539 = HEAP32[$538>>2]|0;
 $u2$0 = $539;
 while(1) {
  $540 = ($u2$0|0)==(0);
  if ($540) {
   break;
  }
  $541 = (_first_one2($u2$0)|0);
  $542 = ((34156304 + (($541*12)|0)|0) + 8|0);
  $543 = HEAP32[$542>>2]|0;
  $544 = $543 ^ $u2$0;
  $545 = ((33572424 + ($541<<3)|0) + 2|0);
  $546 = HEAP8[$545>>0]|0;
  $547 = $546&255;
  $548 = ((($__ptree__) + ($547<<2)|0) + 32|0);
  $549 = HEAP32[$548>>2]|0;
  $550 = ((33572424 + ($541<<3)|0) + 3|0);
  $551 = HEAP8[$550>>0]|0;
  $552 = $551&255;
  $553 = $549 >>> $552;
  $554 = $553 & 127;
  $555 = ((33953152 + (($541*1536)|0)|0) + (($554*12)|0)|0);
  $556 = HEAP32[$555>>2]|0;
  $557 = (33572424 + ($541<<3)|0);
  $558 = HEAP8[$557>>0]|0;
  $559 = $558&255;
  $560 = ((($__ptree__) + ($559<<2)|0) + 8|0);
  $561 = HEAP32[$560>>2]|0;
  $562 = ((($__ptree__) + ($559<<2)|0) + 20|0);
  $563 = HEAP32[$562>>2]|0;
  $564 = $563 | $561;
  $565 = ((33572424 + ($541<<3)|0) + 1|0);
  $566 = HEAP8[$565>>0]|0;
  $567 = $566&255;
  $568 = $564 >>> $567;
  $569 = $568 & 127;
  $570 = ((33828736 + (($541*1536)|0)|0) + (($569*12)|0)|0);
  $571 = HEAP32[$570>>2]|0;
  $572 = $571 | $556;
  $573 = (((33953152 + (($541*1536)|0)|0) + (($554*12)|0)|0) + 4|0);
  $574 = HEAP32[$573>>2]|0;
  $575 = (((33828736 + (($541*1536)|0)|0) + (($569*12)|0)|0) + 4|0);
  $576 = HEAP32[$575>>2]|0;
  $577 = $576 | $574;
  $578 = (((33953152 + (($541*1536)|0)|0) + (($554*12)|0)|0) + 8|0);
  $579 = HEAP32[$578>>2]|0;
  $580 = (((33828736 + (($541*1536)|0)|0) + (($569*12)|0)|0) + 8|0);
  $581 = HEAP32[$580>>2]|0;
  $582 = $581 | $579;
  $583 = ((220518304 + (($2*81)|0)|0) + ($541)|0);
  $584 = HEAP8[$583>>0]|0;
  $585 = ($584<<24>>24)==(0);
  if ($585) {
   label = 78;
  } else {
   $586 = $584&255;
   $587 = (_is_pinned_on_black_king($__ptree__,$541,$586)|0);
   $588 = ($587|0)==(0);
   if ($588) {
    label = 78;
   } else {
    $$sink82 = $582;$$sink83 = $577;$$sink84 = $572;
   }
  }
  if ((label|0) == 78) {
   label = 0;
   $589 = HEAP32[$272>>2]|0;
   $590 = $589 | $183;
   $591 = HEAP32[$273>>2]|0;
   $592 = $591 | $184;
   $593 = HEAP32[$274>>2]|0;
   $594 = $593 | $185;
   $595 = $590 & $572;
   $596 = $592 & $577;
   $597 = $594 & $582;
   $$sink82 = $597;$$sink83 = $596;$$sink84 = $595;
  }
  $598 = $$sink84 & $221;
  $599 = $$sink83 & $223;
  $600 = $$sink82 & $225;
  $601 = $599 | $598;
  $602 = $601 | $600;
  $603 = ($602|0)==(0);
  if ($603) {
   $u2$0 = $544;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $604 = (($__ptree__) + 272|0);
 $605 = HEAP32[$604>>2]|0;
 $606 = (($__ptree__) + 276|0);
 $607 = HEAP32[$606>>2]|0;
 $u0$1 = $605;$u1$1 = $607;
 while(1) {
  $608 = $u1$1 | $u0$1;
  $609 = ($608|0)==(0);
  if ($609) {
   break;
  }
  $610 = (_first_one01($u0$1,$u1$1)|0);
  $611 = (34156304 + (($610*12)|0)|0);
  $612 = HEAP32[$611>>2]|0;
  $613 = $612 ^ $u0$1;
  $614 = ((34156304 + (($610*12)|0)|0) + 4|0);
  $615 = HEAP32[$614>>2]|0;
  $616 = $615 ^ $u1$1;
  $617 = ((33572424 + ($610<<3)|0) + 6|0);
  $618 = HEAP8[$617>>0]|0;
  $619 = $618&255;
  $620 = ((($__ptree__) + ($619<<2)|0) + 56|0);
  $621 = HEAP32[$620>>2]|0;
  $622 = ((33572424 + ($610<<3)|0) + 7|0);
  $623 = HEAP8[$622>>0]|0;
  $624 = $623&255;
  $625 = $621 >>> $624;
  $626 = $625 & 127;
  $627 = ((33704320 + (($610*1536)|0)|0) + (($626*12)|0)|0);
  $628 = HEAP32[$627>>2]|0;
  $629 = ((33572424 + ($610<<3)|0) + 4|0);
  $630 = HEAP8[$629>>0]|0;
  $631 = $630&255;
  $632 = ((($__ptree__) + ($631<<2)|0) + 44|0);
  $633 = HEAP32[$632>>2]|0;
  $634 = ((33572424 + ($610<<3)|0) + 5|0);
  $635 = HEAP8[$634>>0]|0;
  $636 = $635&255;
  $637 = $633 >>> $636;
  $638 = $637 & 127;
  $639 = ((33579904 + (($610*1536)|0)|0) + (($638*12)|0)|0);
  $640 = HEAP32[$639>>2]|0;
  $641 = $640 | $628;
  $642 = (((33704320 + (($610*1536)|0)|0) + (($626*12)|0)|0) + 4|0);
  $643 = HEAP32[$642>>2]|0;
  $644 = (((33579904 + (($610*1536)|0)|0) + (($638*12)|0)|0) + 4|0);
  $645 = HEAP32[$644>>2]|0;
  $646 = $645 | $643;
  $647 = (((33704320 + (($610*1536)|0)|0) + (($626*12)|0)|0) + 8|0);
  $648 = HEAP32[$647>>2]|0;
  $649 = (((33579904 + (($610*1536)|0)|0) + (($638*12)|0)|0) + 8|0);
  $650 = HEAP32[$649>>2]|0;
  $651 = $650 | $648;
  $652 = ((220518304 + (($2*81)|0)|0) + ($610)|0);
  $653 = HEAP8[$652>>0]|0;
  $654 = ($653<<24>>24)==(0);
  if ($654) {
   label = 84;
  } else {
   $655 = $653&255;
   $656 = (_is_pinned_on_black_king($__ptree__,$610,$655)|0);
   $657 = ($656|0)==(0);
   if ($657) {
    label = 84;
   } else {
    $$sink85 = $651;$$sink86 = $646;$$sink87 = $641;
   }
  }
  if ((label|0) == 84) {
   label = 0;
   $658 = HEAP32[$274>>2]|0;
   $659 = $658 | $220;
   $660 = $641 & $218;
   $661 = $646 & $219;
   $662 = $659 & $651;
   $$sink85 = $662;$$sink86 = $661;$$sink87 = $660;
  }
  $663 = $$sink87 & $221;
  $664 = $$sink86 & $223;
  $665 = $$sink85 & $225;
  $666 = $664 | $663;
  $667 = $666 | $665;
  $668 = ($667|0)==(0);
  if ($668) {
   $u0$1 = $613;$u1$1 = $616;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $669 = (($__ptree__) + 280|0);
 $670 = HEAP32[$669>>2]|0;
 $u2$1 = $670;
 while(1) {
  $671 = ($u2$1|0)==(0);
  if ($671) {
   break;
  }
  $672 = (_first_one2($u2$1)|0);
  $673 = ((34156304 + (($672*12)|0)|0) + 8|0);
  $674 = HEAP32[$673>>2]|0;
  $675 = $674 ^ $u2$1;
  $676 = ((33572424 + ($672<<3)|0) + 6|0);
  $677 = HEAP8[$676>>0]|0;
  $678 = $677&255;
  $679 = ((($__ptree__) + ($678<<2)|0) + 56|0);
  $680 = HEAP32[$679>>2]|0;
  $681 = ((33572424 + ($672<<3)|0) + 7|0);
  $682 = HEAP8[$681>>0]|0;
  $683 = $682&255;
  $684 = $680 >>> $683;
  $685 = $684 & 127;
  $686 = ((33704320 + (($672*1536)|0)|0) + (($685*12)|0)|0);
  $687 = HEAP32[$686>>2]|0;
  $688 = ((33572424 + ($672<<3)|0) + 4|0);
  $689 = HEAP8[$688>>0]|0;
  $690 = $689&255;
  $691 = ((($__ptree__) + ($690<<2)|0) + 44|0);
  $692 = HEAP32[$691>>2]|0;
  $693 = ((33572424 + ($672<<3)|0) + 5|0);
  $694 = HEAP8[$693>>0]|0;
  $695 = $694&255;
  $696 = $692 >>> $695;
  $697 = $696 & 127;
  $698 = ((33579904 + (($672*1536)|0)|0) + (($697*12)|0)|0);
  $699 = HEAP32[$698>>2]|0;
  $700 = $699 | $687;
  $701 = (((33704320 + (($672*1536)|0)|0) + (($685*12)|0)|0) + 4|0);
  $702 = HEAP32[$701>>2]|0;
  $703 = (((33579904 + (($672*1536)|0)|0) + (($697*12)|0)|0) + 4|0);
  $704 = HEAP32[$703>>2]|0;
  $705 = $704 | $702;
  $706 = (((33704320 + (($672*1536)|0)|0) + (($685*12)|0)|0) + 8|0);
  $707 = HEAP32[$706>>2]|0;
  $708 = (((33579904 + (($672*1536)|0)|0) + (($697*12)|0)|0) + 8|0);
  $709 = HEAP32[$708>>2]|0;
  $710 = $709 | $707;
  $711 = ((220518304 + (($2*81)|0)|0) + ($672)|0);
  $712 = HEAP8[$711>>0]|0;
  $713 = ($712<<24>>24)==(0);
  if ($713) {
   label = 90;
  } else {
   $714 = $712&255;
   $715 = (_is_pinned_on_black_king($__ptree__,$672,$714)|0);
   $716 = ($715|0)==(0);
   if ($716) {
    label = 90;
   } else {
    $$sink88 = $710;$$sink89 = $705;$$sink90 = $700;
   }
  }
  if ((label|0) == 90) {
   label = 0;
   $717 = HEAP32[$272>>2]|0;
   $718 = $717 | $218;
   $719 = HEAP32[$273>>2]|0;
   $720 = $719 | $219;
   $721 = HEAP32[$274>>2]|0;
   $722 = $721 | $220;
   $723 = $718 & $700;
   $724 = $720 & $705;
   $725 = $722 & $710;
   $$sink88 = $725;$$sink89 = $724;$$sink90 = $723;
  }
  $726 = $$sink90 & $221;
  $727 = $$sink89 & $223;
  $728 = $$sink88 & $225;
  $729 = $727 | $726;
  $730 = $729 | $728;
  $731 = ($730|0)==(0);
  if ($731) {
   $u2$1 = $675;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $732 = (($__ptree__) + 104|0);
 $733 = HEAP32[$732>>2]|0;
 $734 = (($__ptree__) + 108|0);
 $735 = HEAP32[$734>>2]|0;
 $736 = (($__ptree__) + 112|0);
 $737 = HEAP32[$736>>2]|0;
 $738 = (33575024 + (($2*12)|0)|0);
 $739 = ((33575024 + (($2*12)|0)|0) + 4|0);
 $740 = ((33575024 + (($2*12)|0)|0) + 8|0);
 $bb_piece$sroa$0$2 = $733;$bb_piece$sroa$1$2 = $735;$bb_piece$sroa$2$2 = $737;
 while(1) {
  $741 = $bb_piece$sroa$1$2 | $bb_piece$sroa$0$2;
  $742 = $741 | $bb_piece$sroa$2$2;
  $743 = ($742|0)==(0);
  if ($743) {
   break;
  }
  $744 = (_first_one012($bb_piece$sroa$0$2,$bb_piece$sroa$1$2,$bb_piece$sroa$2$2)|0);
  $745 = (34156304 + (($744*12)|0)|0);
  $746 = HEAP32[$745>>2]|0;
  $747 = $746 ^ $bb_piece$sroa$0$2;
  $748 = ((34156304 + (($744*12)|0)|0) + 4|0);
  $749 = HEAP32[$748>>2]|0;
  $750 = $749 ^ $bb_piece$sroa$1$2;
  $751 = ((34156304 + (($744*12)|0)|0) + 8|0);
  $752 = HEAP32[$751>>2]|0;
  $753 = $752 ^ $bb_piece$sroa$2$2;
  $754 = HEAP32[$738>>2]|0;
  $755 = HEAP32[$739>>2]|0;
  $756 = HEAP32[$740>>2]|0;
  $757 = ((220518304 + (($2*81)|0)|0) + ($744)|0);
  $758 = HEAP8[$757>>0]|0;
  $759 = $758&255;
  $760 = ($758<<24>>24)==(0);
  if ($760) {
   $776 = $754;$779 = $755;$782 = $756;
  } else {
   $761 = (_is_pinned_on_black_king($__ptree__,$744,$759)|0);
   $762 = ($761|0)==(0);
   if ($762) {
    $776 = $754;$779 = $755;$782 = $756;
   } else {
    if ((($759|0) == 5)) {
     $bb_tmp$sroa$0$0$in$i53 = $281;$bb_tmp$sroa$1$0$in$i52 = $282;$bb_tmp$sroa$2$0$in$i51 = $283;
    } else if ((($759|0) == 2)) {
     $bb_tmp$sroa$0$0$in$i53 = $284;$bb_tmp$sroa$1$0$in$i52 = $285;$bb_tmp$sroa$2$0$in$i51 = $286;
    } else if ((($759|0) == 4)) {
     $bb_tmp$sroa$0$0$in$i53 = $278;$bb_tmp$sroa$1$0$in$i52 = $279;$bb_tmp$sroa$2$0$in$i51 = $280;
    } else {
     $bb_tmp$sroa$0$0$in$i53 = $275;$bb_tmp$sroa$1$0$in$i52 = $276;$bb_tmp$sroa$2$0$in$i51 = $277;
    }
    $bb_tmp$sroa$0$0$i54 = HEAP32[$bb_tmp$sroa$0$0$in$i53>>2]|0;
    $bb_tmp$sroa$1$0$i55 = HEAP32[$bb_tmp$sroa$1$0$in$i52>>2]|0;
    $bb_tmp$sroa$2$0$i56 = HEAP32[$bb_tmp$sroa$2$0$in$i51>>2]|0;
    $763 = $bb_tmp$sroa$0$0$i54 ^ -1;
    $764 = $bb_tmp$sroa$1$0$i55 ^ -1;
    $765 = $bb_tmp$sroa$2$0$i56 ^ -1;
    $766 = $754 | $763;
    $767 = $755 | $764;
    $768 = $756 | $765;
    $776 = $766;$779 = $767;$782 = $768;
   }
  }
  $769 = (33577952 + (($744*12)|0)|0);
  $770 = HEAP32[$769>>2]|0;
  $771 = ((33577952 + (($744*12)|0)|0) + 4|0);
  $772 = HEAP32[$771>>2]|0;
  $773 = ((33577952 + (($744*12)|0)|0) + 8|0);
  $774 = HEAP32[$773>>2]|0;
  $775 = $776 & $221;
  $777 = $775 & $770;
  $778 = $779 & $223;
  $780 = $778 & $772;
  $781 = $782 & $225;
  $783 = $781 & $774;
  $784 = $780 | $777;
  $785 = $784 | $783;
  $786 = ($785|0)==(0);
  if ($786) {
   $bb_piece$sroa$0$2 = $747;$bb_piece$sroa$1$2 = $750;$bb_piece$sroa$2$2 = $753;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $787 = (($__ptree__) + 256|0);
 $788 = HEAP32[$787>>2]|0;
 $u2$2 = $788;
 while(1) {
  $789 = ($u2$2|0)==(0);
  if ($789) {
   break;
  }
  $790 = (_first_one2($u2$2)|0);
  $791 = ((34156304 + (($790*12)|0)|0) + 8|0);
  $792 = HEAP32[$791>>2]|0;
  $793 = $792 ^ $u2$2;
  $794 = HEAP32[$740>>2]|0;
  $795 = HEAP32[$739>>2]|0;
  $796 = ((220518304 + (($2*81)|0)|0) + ($790)|0);
  $797 = HEAP8[$796>>0]|0;
  $798 = $797&255;
  $799 = ($797<<24>>24)==(0);
  if ($799) {
   $809 = $794;$814 = $795;
  } else {
   $800 = (_is_pinned_on_black_king($__ptree__,$790,$798)|0);
   $801 = ($800|0)==(0);
   if ($801) {
    $809 = $794;$814 = $795;
   } else {
    if ((($798|0) == 4)) {
     $bb_tmp$sroa$1$0$in$i45 = $279;$bb_tmp$sroa$2$0$in$i44 = $280;
    } else if ((($798|0) == 2)) {
     $bb_tmp$sroa$1$0$in$i45 = $285;$bb_tmp$sroa$2$0$in$i44 = $286;
    } else if ((($798|0) == 5)) {
     $bb_tmp$sroa$1$0$in$i45 = $282;$bb_tmp$sroa$2$0$in$i44 = $283;
    } else {
     $bb_tmp$sroa$1$0$in$i45 = $276;$bb_tmp$sroa$2$0$in$i44 = $277;
    }
    $bb_tmp$sroa$1$0$i48 = HEAP32[$bb_tmp$sroa$1$0$in$i45>>2]|0;
    $bb_tmp$sroa$2$0$i49 = HEAP32[$bb_tmp$sroa$2$0$in$i44>>2]|0;
    $802 = $bb_tmp$sroa$1$0$i48 ^ -1;
    $803 = $bb_tmp$sroa$2$0$i49 ^ -1;
    $804 = $795 | $802;
    $805 = $794 | $803;
    $809 = $805;$814 = $804;
   }
  }
  $806 = ((33576976 + (($790*12)|0)|0) + 8|0);
  $807 = HEAP32[$806>>2]|0;
  $808 = $809 & $225;
  $810 = $808 & $807;
  $811 = ((33576976 + (($790*12)|0)|0) + 4|0);
  $812 = HEAP32[$811>>2]|0;
  $813 = $814 & $223;
  $815 = $813 & $812;
  $816 = $815 | $810;
  $817 = ($816|0)==(0);
  if ($817) {
   $u2$2 = $793;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $818 = (($__ptree__) + 252|0);
 $819 = HEAP32[$818>>2]|0;
 $820 = $819 & 511;
 $u1$2 = $820;
 while(1) {
  $821 = ($u1$2|0)==(0);
  if ($821) {
   break;
  }
  $822 = (_first_one1($u1$2)|0);
  $823 = ((34156304 + (($822*12)|0)|0) + 4|0);
  $824 = HEAP32[$823>>2]|0;
  $825 = $824 ^ $u1$2;
  $826 = HEAP32[$740>>2]|0;
  $827 = ((220518304 + (($2*81)|0)|0) + ($822)|0);
  $828 = HEAP8[$827>>0]|0;
  $829 = $828&255;
  $830 = ($828<<24>>24)==(0);
  if ($830) {
   $838 = $826;
  } else {
   $831 = (_is_pinned_on_black_king($__ptree__,$822,$829)|0);
   $832 = ($831|0)==(0);
   if ($832) {
    $838 = $826;
   } else {
    if ((($829|0) == 5)) {
     $bb_tmp$sroa$2$0$in$i37 = $283;
    } else if ((($829|0) == 2)) {
     $bb_tmp$sroa$2$0$in$i37 = $286;
    } else if ((($829|0) == 4)) {
     $bb_tmp$sroa$2$0$in$i37 = $280;
    } else {
     $bb_tmp$sroa$2$0$in$i37 = $277;
    }
    $bb_tmp$sroa$2$0$i42 = HEAP32[$bb_tmp$sroa$2$0$in$i37>>2]|0;
    $833 = $bb_tmp$sroa$2$0$i42 ^ -1;
    $834 = $826 | $833;
    $838 = $834;
   }
  }
  $835 = ((33576976 + (($822*12)|0)|0) + 8|0);
  $836 = HEAP32[$835>>2]|0;
  $837 = $838 & $225;
  $839 = $837 & $836;
  $840 = ($839|0)==(0);
  if ($840) {
   $u1$2 = $825;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $841 = (($__ptree__) + 248|0);
 $842 = HEAP32[$841>>2]|0;
 $843 = HEAP32[$818>>2]|0;
 $844 = HEAP32[$787>>2]|0;
 $845 = (33574048 + (($2*12)|0)|0);
 $846 = ((33574048 + (($2*12)|0)|0) + 4|0);
 $847 = ((33574048 + (($2*12)|0)|0) + 8|0);
 $bb_piece$sroa$0$3 = $842;$bb_piece$sroa$1$3 = $843;$bb_piece$sroa$2$3 = $844;
 while(1) {
  $848 = $bb_piece$sroa$1$3 | $bb_piece$sroa$0$3;
  $849 = $848 | $bb_piece$sroa$2$3;
  $850 = ($849|0)==(0);
  if ($850) {
   break;
  }
  $851 = (_first_one012($bb_piece$sroa$0$3,$bb_piece$sroa$1$3,$bb_piece$sroa$2$3)|0);
  $852 = (34156304 + (($851*12)|0)|0);
  $853 = HEAP32[$852>>2]|0;
  $854 = $853 ^ $bb_piece$sroa$0$3;
  $855 = ((34156304 + (($851*12)|0)|0) + 4|0);
  $856 = HEAP32[$855>>2]|0;
  $857 = $856 ^ $bb_piece$sroa$1$3;
  $858 = ((34156304 + (($851*12)|0)|0) + 8|0);
  $859 = HEAP32[$858>>2]|0;
  $860 = $859 ^ $bb_piece$sroa$2$3;
  $861 = HEAP32[$845>>2]|0;
  $862 = HEAP32[$846>>2]|0;
  $863 = HEAP32[$847>>2]|0;
  $864 = ((220518304 + (($2*81)|0)|0) + ($851)|0);
  $865 = HEAP8[$864>>0]|0;
  $866 = $865&255;
  $867 = ($865<<24>>24)==(0);
  if ($867) {
   $883 = $861;$886 = $862;$889 = $863;
  } else {
   $868 = (_is_pinned_on_black_king($__ptree__,$851,$866)|0);
   $869 = ($868|0)==(0);
   if ($869) {
    $883 = $861;$886 = $862;$889 = $863;
   } else {
    if ((($866|0) == 4)) {
     $bb_tmp$sroa$0$0$in$i32 = $278;$bb_tmp$sroa$1$0$in$i31 = $279;$bb_tmp$sroa$2$0$in$i30 = $280;
    } else if ((($866|0) == 5)) {
     $bb_tmp$sroa$0$0$in$i32 = $281;$bb_tmp$sroa$1$0$in$i31 = $282;$bb_tmp$sroa$2$0$in$i30 = $283;
    } else if ((($866|0) == 2)) {
     $bb_tmp$sroa$0$0$in$i32 = $284;$bb_tmp$sroa$1$0$in$i31 = $285;$bb_tmp$sroa$2$0$in$i30 = $286;
    } else {
     $bb_tmp$sroa$0$0$in$i32 = $275;$bb_tmp$sroa$1$0$in$i31 = $276;$bb_tmp$sroa$2$0$in$i30 = $277;
    }
    $bb_tmp$sroa$0$0$i33 = HEAP32[$bb_tmp$sroa$0$0$in$i32>>2]|0;
    $bb_tmp$sroa$1$0$i34 = HEAP32[$bb_tmp$sroa$1$0$in$i31>>2]|0;
    $bb_tmp$sroa$2$0$i35 = HEAP32[$bb_tmp$sroa$2$0$in$i30>>2]|0;
    $870 = $bb_tmp$sroa$0$0$i33 ^ -1;
    $871 = $bb_tmp$sroa$1$0$i34 ^ -1;
    $872 = $bb_tmp$sroa$2$0$i35 ^ -1;
    $873 = $861 | $870;
    $874 = $862 | $871;
    $875 = $863 | $872;
    $883 = $873;$886 = $874;$889 = $875;
   }
  }
  $876 = (33576976 + (($851*12)|0)|0);
  $877 = HEAP32[$876>>2]|0;
  $878 = ((33576976 + (($851*12)|0)|0) + 4|0);
  $879 = HEAP32[$878>>2]|0;
  $880 = ((33576976 + (($851*12)|0)|0) + 8|0);
  $881 = HEAP32[$880>>2]|0;
  $882 = $883 & $221;
  $884 = $882 & $877;
  $885 = $886 & $223;
  $887 = $885 & $879;
  $888 = $889 & $225;
  $890 = $888 & $881;
  $891 = $887 | $884;
  $892 = $891 | $890;
  $893 = ($892|0)==(0);
  if ($893) {
   $bb_piece$sroa$0$3 = $854;$bb_piece$sroa$1$3 = $857;$bb_piece$sroa$2$3 = $860;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $894 = (($__ptree__) + 232|0);
 $895 = HEAP32[$894>>2]|0;
 $896 = (($__ptree__) + 228|0);
 $897 = HEAP32[$896>>2]|0;
 $898 = $897 & 262143;
 $u1$3 = $898;$u2$3 = $895;
 while(1) {
  $899 = $u2$3 | $u1$3;
  $900 = ($899|0)==(0);
  if ($900) {
   break;
  }
  $901 = (_first_one12($u1$3,$u2$3)|0);
  $902 = ((34156304 + (($901*12)|0)|0) + 8|0);
  $903 = HEAP32[$902>>2]|0;
  $904 = $903 ^ $u2$3;
  $905 = ((34156304 + (($901*12)|0)|0) + 4|0);
  $906 = HEAP32[$905>>2]|0;
  $907 = $906 ^ $u1$3;
  $908 = HEAP32[$740>>2]|0;
  $909 = ((220518304 + (($2*81)|0)|0) + ($901)|0);
  $910 = HEAP8[$909>>0]|0;
  $911 = $910&255;
  $912 = ($910<<24>>24)==(0);
  if ($912) {
   $920 = $908;
  } else {
   $913 = (_is_pinned_on_black_king($__ptree__,$901,$911)|0);
   $914 = ($913|0)==(0);
   if ($914) {
    $920 = $908;
   } else {
    if ((($911|0) == 5)) {
     $bb_tmp$sroa$2$0$in$i23 = $283;
    } else if ((($911|0) == 2)) {
     $bb_tmp$sroa$2$0$in$i23 = $286;
    } else if ((($911|0) == 4)) {
     $bb_tmp$sroa$2$0$in$i23 = $280;
    } else {
     $bb_tmp$sroa$2$0$in$i23 = $277;
    }
    $bb_tmp$sroa$2$0$i28 = HEAP32[$bb_tmp$sroa$2$0$in$i23>>2]|0;
    $915 = $bb_tmp$sroa$2$0$i28 ^ -1;
    $916 = $908 | $915;
    $920 = $916;
   }
  }
  $917 = ((33576000 + (($901*12)|0)|0) + 8|0);
  $918 = HEAP32[$917>>2]|0;
  $919 = $920 & $225;
  $921 = $919 & $918;
  $922 = ($921|0)==(0);
  if ($922) {
   $u1$3 = $907;$u2$3 = $904;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $923 = (($__ptree__) + 224|0);
 $924 = HEAP32[$923>>2]|0;
 $925 = HEAP32[$896>>2]|0;
 $926 = $925 & 134217216;
 $927 = (33573072 + (($2*12)|0)|0);
 $928 = ((33573072 + (($2*12)|0)|0) + 4|0);
 $929 = ((33573072 + (($2*12)|0)|0) + 8|0);
 $u0$2 = $924;$u1$4 = $926;
 while(1) {
  $930 = $u1$4 | $u0$2;
  $931 = ($930|0)==(0);
  if ($931) {
   break;
  }
  $932 = (_first_one01($u0$2,$u1$4)|0);
  $933 = (34156304 + (($932*12)|0)|0);
  $934 = HEAP32[$933>>2]|0;
  $935 = $934 ^ $u0$2;
  $936 = ((34156304 + (($932*12)|0)|0) + 4|0);
  $937 = HEAP32[$936>>2]|0;
  $938 = $937 ^ $u1$4;
  $939 = HEAP32[$927>>2]|0;
  $940 = HEAP32[$928>>2]|0;
  $941 = HEAP32[$929>>2]|0;
  $942 = ((220518304 + (($2*81)|0)|0) + ($932)|0);
  $943 = HEAP8[$942>>0]|0;
  $944 = $943&255;
  $945 = ($943<<24>>24)==(0);
  if ($945) {
   $961 = $939;$964 = $940;$967 = $941;
  } else {
   $946 = (_is_pinned_on_black_king($__ptree__,$932,$944)|0);
   $947 = ($946|0)==(0);
   if ($947) {
    $961 = $939;$964 = $940;$967 = $941;
   } else {
    if ((($944|0) == 5)) {
     $bb_tmp$sroa$0$0$in$i18 = $281;$bb_tmp$sroa$1$0$in$i17 = $282;$bb_tmp$sroa$2$0$in$i16 = $283;
    } else if ((($944|0) == 2)) {
     $bb_tmp$sroa$0$0$in$i18 = $284;$bb_tmp$sroa$1$0$in$i17 = $285;$bb_tmp$sroa$2$0$in$i16 = $286;
    } else if ((($944|0) == 4)) {
     $bb_tmp$sroa$0$0$in$i18 = $278;$bb_tmp$sroa$1$0$in$i17 = $279;$bb_tmp$sroa$2$0$in$i16 = $280;
    } else {
     $bb_tmp$sroa$0$0$in$i18 = $275;$bb_tmp$sroa$1$0$in$i17 = $276;$bb_tmp$sroa$2$0$in$i16 = $277;
    }
    $bb_tmp$sroa$0$0$i19 = HEAP32[$bb_tmp$sroa$0$0$in$i18>>2]|0;
    $bb_tmp$sroa$1$0$i20 = HEAP32[$bb_tmp$sroa$1$0$in$i17>>2]|0;
    $bb_tmp$sroa$2$0$i21 = HEAP32[$bb_tmp$sroa$2$0$in$i16>>2]|0;
    $948 = $bb_tmp$sroa$0$0$i19 ^ -1;
    $949 = $bb_tmp$sroa$1$0$i20 ^ -1;
    $950 = $bb_tmp$sroa$2$0$i21 ^ -1;
    $951 = $939 | $948;
    $952 = $940 | $949;
    $953 = $941 | $950;
    $961 = $951;$964 = $952;$967 = $953;
   }
  }
  $954 = (33576000 + (($932*12)|0)|0);
  $955 = HEAP32[$954>>2]|0;
  $956 = ((33576000 + (($932*12)|0)|0) + 4|0);
  $957 = HEAP32[$956>>2]|0;
  $958 = ((33576000 + (($932*12)|0)|0) + 8|0);
  $959 = HEAP32[$958>>2]|0;
  $960 = $961 & $221;
  $962 = $960 & $955;
  $963 = $964 & $223;
  $965 = $963 & $957;
  $966 = $967 & $225;
  $968 = $966 & $959;
  $969 = $965 | $962;
  $970 = $969 | $968;
  $971 = ($970|0)==(0);
  if ($971) {
   $u0$2 = $935;$u1$4 = $938;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $972 = (($__ptree__) + 200|0);
 $973 = HEAP32[$972>>2]|0;
 $974 = (($__ptree__) + 204|0);
 $975 = HEAP32[$974>>2]|0;
 $976 = (($__ptree__) + 208|0);
 $977 = HEAP32[$976>>2]|0;
 $bb_piece$sroa$0$4 = $973;$bb_piece$sroa$1$4 = $975;$bb_piece$sroa$2$4 = $977;
 while(1) {
  $978 = $bb_piece$sroa$1$4 | $bb_piece$sroa$0$4;
  $979 = $978 | $bb_piece$sroa$2$4;
  $980 = ($979|0)==(0);
  if ($980) {
   break;
  }
  $981 = (_first_one012($bb_piece$sroa$0$4,$bb_piece$sroa$1$4,$bb_piece$sroa$2$4)|0);
  $982 = (34156304 + (($981*12)|0)|0);
  $983 = HEAP32[$982>>2]|0;
  $984 = $983 ^ $bb_piece$sroa$0$4;
  $985 = ((34156304 + (($981*12)|0)|0) + 4|0);
  $986 = HEAP32[$985>>2]|0;
  $987 = $986 ^ $bb_piece$sroa$1$4;
  $988 = ((34156304 + (($981*12)|0)|0) + 8|0);
  $989 = HEAP32[$988>>2]|0;
  $990 = $989 ^ $bb_piece$sroa$2$4;
  $991 = HEAP32[$740>>2]|0;
  $992 = ((220518304 + (($2*81)|0)|0) + ($981)|0);
  $993 = HEAP8[$992>>0]|0;
  $994 = $993&255;
  $995 = ($993<<24>>24)==(0);
  if ($995) {
   $1025 = 0;$1029 = 0;$1033 = $991;
  } else {
   $996 = (_is_pinned_on_black_king($__ptree__,$981,$994)|0);
   $997 = ($996|0)==(0);
   if ($997) {
    $1025 = 0;$1029 = 0;$1033 = $991;
   } else {
    if ((($994|0) == 5)) {
     $bb_tmp$sroa$0$0$in$i11 = $281;$bb_tmp$sroa$1$0$in$i10 = $282;$bb_tmp$sroa$2$0$in$i9 = $283;
    } else if ((($994|0) == 2)) {
     $bb_tmp$sroa$0$0$in$i11 = $284;$bb_tmp$sroa$1$0$in$i10 = $285;$bb_tmp$sroa$2$0$in$i9 = $286;
    } else if ((($994|0) == 4)) {
     $bb_tmp$sroa$0$0$in$i11 = $278;$bb_tmp$sroa$1$0$in$i10 = $279;$bb_tmp$sroa$2$0$in$i9 = $280;
    } else {
     $bb_tmp$sroa$0$0$in$i11 = $275;$bb_tmp$sroa$1$0$in$i10 = $276;$bb_tmp$sroa$2$0$in$i9 = $277;
    }
    $bb_tmp$sroa$0$0$i12 = HEAP32[$bb_tmp$sroa$0$0$in$i11>>2]|0;
    $bb_tmp$sroa$1$0$i13 = HEAP32[$bb_tmp$sroa$1$0$in$i10>>2]|0;
    $bb_tmp$sroa$2$0$i14 = HEAP32[$bb_tmp$sroa$2$0$in$i9>>2]|0;
    $998 = $bb_tmp$sroa$0$0$i12 ^ -1;
    $999 = $bb_tmp$sroa$1$0$i13 ^ -1;
    $1000 = $bb_tmp$sroa$2$0$i14 ^ -1;
    $1001 = $991 | $1000;
    $1025 = $998;$1029 = $999;$1033 = $1001;
   }
  }
  $1002 = ((33572424 + ($981<<3)|0) + 2|0);
  $1003 = HEAP8[$1002>>0]|0;
  $1004 = $1003&255;
  $1005 = ((($__ptree__) + ($1004<<2)|0) + 32|0);
  $1006 = HEAP32[$1005>>2]|0;
  $1007 = ((33572424 + ($981<<3)|0) + 3|0);
  $1008 = HEAP8[$1007>>0]|0;
  $1009 = $1008&255;
  $1010 = $1006 >>> $1009;
  $1011 = $1010 & 127;
  $1012 = ((33953152 + (($981*1536)|0)|0) + (($1011*12)|0)|0);
  $1013 = HEAP32[$1012>>2]|0;
  $1014 = (((33953152 + (($981*1536)|0)|0) + (($1011*12)|0)|0) + 4|0);
  $1015 = HEAP32[$1014>>2]|0;
  $1016 = (((33953152 + (($981*1536)|0)|0) + (($1011*12)|0)|0) + 8|0);
  $1017 = HEAP32[$1016>>2]|0;
  $1018 = (34160208 + (($981*12)|0)|0);
  $1019 = HEAP32[$1018>>2]|0;
  $1020 = ((34160208 + (($981*12)|0)|0) + 4|0);
  $1021 = HEAP32[$1020>>2]|0;
  $1022 = ((34160208 + (($981*12)|0)|0) + 8|0);
  $1023 = HEAP32[$1022>>2]|0;
  $1024 = $1025 & $221;
  $1026 = $1024 & $1013;
  $1027 = $1026 & $1019;
  $1028 = $1029 & $223;
  $1030 = $1028 & $1015;
  $1031 = $1030 & $1021;
  $1032 = $1033 & $225;
  $1034 = $1032 & $1017;
  $1035 = $1034 & $1023;
  $1036 = $1031 | $1027;
  $1037 = $1036 | $1035;
  $1038 = ($1037|0)==(0);
  if ($1038) {
   $bb_piece$sroa$0$4 = $984;$bb_piece$sroa$1$4 = $987;$bb_piece$sroa$2$4 = $990;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $1039 = HEAP32[$972>>2]|0;
 $1040 = HEAP32[$974>>2]|0;
 $1041 = (34161184 + (($2*12)|0)|0);
 $1042 = ((34161184 + (($2*12)|0)|0) + 4|0);
 $1043 = ((34161184 + (($2*12)|0)|0) + 8|0);
 $1044 = $225 & 133955584;
 $u0$3 = $1039;$u1$5 = $1040;
 while(1) {
  $1045 = $u1$5 | $u0$3;
  $1046 = ($1045|0)==(0);
  if ($1046) {
   break;
  }
  $1047 = (_first_one01($u0$3,$u1$5)|0);
  $1048 = (34156304 + (($1047*12)|0)|0);
  $1049 = HEAP32[$1048>>2]|0;
  $1050 = $1049 ^ $u0$3;
  $1051 = ((34156304 + (($1047*12)|0)|0) + 4|0);
  $1052 = HEAP32[$1051>>2]|0;
  $1053 = $1052 ^ $u1$5;
  $1054 = ((220518304 + (($2*81)|0)|0) + ($1047)|0);
  $1055 = HEAP8[$1054>>0]|0;
  $1056 = $1055&255;
  $1057 = ($1055<<24>>24)==(0);
  if ($1057) {
   label = 171;
  } else {
   $1058 = (_is_pinned_on_black_king($__ptree__,$1047,$1056)|0);
   $1059 = ($1058|0)==(0);
   if ($1059) {
    label = 171;
   } else {
    if ((($1056|0) == 5)) {
     $bb_tmp$sroa$0$0$in$i4 = $281;$bb_tmp$sroa$1$0$in$i3 = $282;$bb_tmp$sroa$2$0$in$i2 = $283;
    } else if ((($1056|0) == 2)) {
     $bb_tmp$sroa$0$0$in$i4 = $284;$bb_tmp$sroa$1$0$in$i3 = $285;$bb_tmp$sroa$2$0$in$i2 = $286;
    } else if ((($1056|0) == 4)) {
     $bb_tmp$sroa$0$0$in$i4 = $278;$bb_tmp$sroa$1$0$in$i3 = $279;$bb_tmp$sroa$2$0$in$i2 = $280;
    } else {
     $bb_tmp$sroa$0$0$in$i4 = $275;$bb_tmp$sroa$1$0$in$i3 = $276;$bb_tmp$sroa$2$0$in$i2 = $277;
    }
    $bb_tmp$sroa$0$0$i5 = HEAP32[$bb_tmp$sroa$0$0$in$i4>>2]|0;
    $bb_tmp$sroa$1$0$i6 = HEAP32[$bb_tmp$sroa$1$0$in$i3>>2]|0;
    $bb_tmp$sroa$2$0$i7 = HEAP32[$bb_tmp$sroa$2$0$in$i2>>2]|0;
    $1060 = $bb_tmp$sroa$0$0$i5 ^ -1;
    $1061 = $bb_tmp$sroa$1$0$i6 ^ -1;
    $1062 = $bb_tmp$sroa$2$0$i7 ^ -1;
    $1063 = $159 | $1060;
    $1064 = $161 | $1061;
    $1065 = $163 | $1062;
    $1066 = (34160208 + (($1047*12)|0)|0);
    $1067 = HEAP32[$1066>>2]|0;
    $1068 = $1067 & $1063;
    $1069 = ((34160208 + (($1047*12)|0)|0) + 4|0);
    $1070 = HEAP32[$1069>>2]|0;
    $1071 = $1070 & $1064;
    $1072 = ((34160208 + (($1047*12)|0)|0) + 8|0);
    $1073 = HEAP32[$1072>>2]|0;
    $1074 = $1073 & $1065;
    $1098 = $1068;$1101 = $1071;$1104 = $1074;
   }
  }
  if ((label|0) == 171) {
   label = 0;
   $1075 = HEAP32[$1041>>2]|0;
   $1076 = $1075 & $159;
   $1077 = HEAP32[$1042>>2]|0;
   $1078 = $1077 & $161;
   $1079 = HEAP32[$1043>>2]|0;
   $1080 = $1079 & $163;
   $1098 = $1076;$1101 = $1078;$1104 = $1080;
  }
  $1081 = ((33572424 + ($1047<<3)|0) + 2|0);
  $1082 = HEAP8[$1081>>0]|0;
  $1083 = $1082&255;
  $1084 = ((($__ptree__) + ($1083<<2)|0) + 32|0);
  $1085 = HEAP32[$1084>>2]|0;
  $1086 = ((33572424 + ($1047<<3)|0) + 3|0);
  $1087 = HEAP8[$1086>>0]|0;
  $1088 = $1087&255;
  $1089 = $1085 >>> $1088;
  $1090 = $1089 & 127;
  $1091 = ((33953152 + (($1047*1536)|0)|0) + (($1090*12)|0)|0);
  $1092 = HEAP32[$1091>>2]|0;
  $1093 = (((33953152 + (($1047*1536)|0)|0) + (($1090*12)|0)|0) + 4|0);
  $1094 = HEAP32[$1093>>2]|0;
  $1095 = (((33953152 + (($1047*1536)|0)|0) + (($1090*12)|0)|0) + 8|0);
  $1096 = HEAP32[$1095>>2]|0;
  $1097 = $1098 & $221;
  $1099 = $1097 & $1092;
  $1100 = $1101 & $223;
  $1102 = $1100 & $1094;
  $1103 = $1044 & $1104;
  $1105 = $1103 & $1096;
  $1106 = $1102 | $1099;
  $1107 = $1106 | $1105;
  $1108 = ($1107|0)==(0);
  if ($1108) {
   $u0$3 = $1050;$u1$5 = $1053;
  } else {
   $$0 = 1;
   label = 193;
   break;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 $1109 = HEAP32[$740>>2]|0;
 if ($53) {
  $1110 = (($2) + -9)|0;
  $1111 = (34156304 + (($1110*12)|0)|0);
  $1112 = HEAP32[$1111>>2]|0;
  $1113 = ((34156304 + (($1110*12)|0)|0) + 4|0);
  $1114 = HEAP32[$1113>>2]|0;
  $1115 = ((34156304 + (($1110*12)|0)|0) + 8|0);
  $1116 = HEAP32[$1115>>2]|0;
  $1117 = $1116 | $1109;
  $1119 = $1112;$1121 = $1114;$1123 = $1117;
 } else {
  $1119 = 0;$1121 = 0;$1123 = $1109;
 }
 $1118 = $1119 & $221;
 $1120 = $1121 & $223;
 $1122 = $1123 & $225;
 $1124 = (($__ptree__) + 176|0);
 $1125 = HEAP32[$1124>>2]|0;
 $1126 = $1118 & $1125;
 $1127 = (($__ptree__) + 180|0);
 $1128 = HEAP32[$1127>>2]|0;
 $1129 = $1120 & $1128;
 $1130 = (($__ptree__) + 184|0);
 $1131 = HEAP32[$1130>>2]|0;
 $1132 = $1122 & $1131;
 $1133 = $1129 | $1126;
 $1134 = $1133 | $1132;
 $1135 = ($1134|0)==(0);
 if (!($1135)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1136 = (($__ptree__) + 368|0);
 $1137 = HEAP32[$1136>>2]|0;
 $1138 = $1137 & $197;
 $1139 = (($__ptree__) + 372|0);
 $1140 = HEAP32[$1139>>2]|0;
 $1141 = $1140 & $199;
 $1142 = (($__ptree__) + 376|0);
 $1143 = HEAP32[$1142>>2]|0;
 $1144 = $1143 & $201;
 $1145 = $1141 | $1138;
 $1146 = $1145 | $1144;
 $1147 = ($1146|0)==(0);
 do {
  if ($1147) {
   $1194 = $1137;$1196 = $1140;$1198 = $1143;
  } else {
   $1148 = (($__ptree__) + 128|0);
   $1149 = (($__ptree__) + 132|0);
   $1150 = (($__ptree__) + 136|0);
   $bb_piece$sroa$0$5102 = $1138;$bb_piece$sroa$1$5103 = $1141;$bb_piece$sroa$2$5104 = $1144;
   while(1) {
    $1151 = (_first_one012($bb_piece$sroa$0$5102,$bb_piece$sroa$1$5103,$bb_piece$sroa$2$5104)|0);
    $1152 = (34156304 + (($1151*12)|0)|0);
    $1153 = HEAP32[$1152>>2]|0;
    $1154 = $1153 ^ $bb_piece$sroa$0$5102;
    $1155 = ((34156304 + (($1151*12)|0)|0) + 4|0);
    $1156 = HEAP32[$1155>>2]|0;
    $1157 = $1156 ^ $bb_piece$sroa$1$5103;
    $1158 = ((34156304 + (($1151*12)|0)|0) + 8|0);
    $1159 = HEAP32[$1158>>2]|0;
    $1160 = $1159 ^ $bb_piece$sroa$2$5104;
    $1161 = (($1151) + 9)|0;
    $1162 = ((($__ptree__) + ($1161)|0) + 512|0);
    $1163 = HEAP8[$1162>>0]|0;
    $1164 = ($1163<<24>>24)<(0);
    if (!($1164)) {
     $1168 = ((33572424 + ($1151<<3)|0) + 6|0);
     $1169 = HEAP8[$1168>>0]|0;
     $1170 = $1169&255;
     $1171 = ((($__ptree__) + ($1170<<2)|0) + 56|0);
     $1172 = HEAP32[$1171>>2]|0;
     $1173 = ((33572424 + ($1151<<3)|0) + 7|0);
     $1174 = HEAP8[$1173>>0]|0;
     $1175 = $1174&255;
     $1176 = $1172 >>> $1175;
     $1177 = $1176 & 127;
     $1178 = ((33704320 + (($1151*1536)|0)|0) + (($1177*12)|0)|0);
     $1179 = HEAP32[$1178>>2]|0;
     $1180 = (((33704320 + (($1151*1536)|0)|0) + (($1177*12)|0)|0) + 4|0);
     $1181 = HEAP32[$1180>>2]|0;
     $1182 = (((33704320 + (($1151*1536)|0)|0) + (($1177*12)|0)|0) + 8|0);
     $1183 = HEAP32[$1182>>2]|0;
     $1184 = HEAP32[$1148>>2]|0;
     $1185 = $1184 & $1179;
     $1186 = HEAP32[$1149>>2]|0;
     $1187 = $1186 & $1181;
     $1188 = $1187 | $1185;
     $1189 = HEAP32[$1150>>2]|0;
     $1190 = $1189 & $1183;
     $1191 = $1188 | $1190;
     $1192 = ($1191|0)==(0);
     if (!($1192)) {
      $$0 = 1;
      label = 193;
      break;
     }
    }
    $1165 = $1157 | $1154;
    $1166 = $1165 | $1160;
    $1167 = ($1166|0)==(0);
    if ($1167) {
     label = 181;
     break;
    } else {
     $bb_piece$sroa$0$5102 = $1154;$bb_piece$sroa$1$5103 = $1157;$bb_piece$sroa$2$5104 = $1160;
    }
   }
   if ((label|0) == 181) {
    $$pre = HEAP32[$1136>>2]|0;
    $$pre122 = HEAP32[$1139>>2]|0;
    $$pre123 = HEAP32[$1142>>2]|0;
    $1194 = $$pre;$1196 = $$pre122;$1198 = $$pre123;
    break;
   }
   else if ((label|0) == 193) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $1193 = $1194 & $213;
 $1195 = $1196 & $215;
 $1197 = $1198 & $217;
 $1199 = $1195 | $1193;
 $1200 = $1199 | $1197;
 $1201 = ($1200|0)==(0);
 do {
  if ($1201) {
   $1248 = $1194;$1250 = $1196;$1252 = $1198;
  } else {
   $1202 = (($__ptree__) + 128|0);
   $1203 = (($__ptree__) + 132|0);
   $1204 = (($__ptree__) + 136|0);
   $bb_piece$sroa$0$696 = $1193;$bb_piece$sroa$1$697 = $1195;$bb_piece$sroa$2$698 = $1197;
   while(1) {
    $1205 = (_first_one012($bb_piece$sroa$0$696,$bb_piece$sroa$1$697,$bb_piece$sroa$2$698)|0);
    $1206 = (34156304 + (($1205*12)|0)|0);
    $1207 = HEAP32[$1206>>2]|0;
    $1208 = $1207 ^ $bb_piece$sroa$0$696;
    $1209 = ((34156304 + (($1205*12)|0)|0) + 4|0);
    $1210 = HEAP32[$1209>>2]|0;
    $1211 = $1210 ^ $bb_piece$sroa$1$697;
    $1212 = ((34156304 + (($1205*12)|0)|0) + 8|0);
    $1213 = HEAP32[$1212>>2]|0;
    $1214 = $1213 ^ $bb_piece$sroa$2$698;
    $1215 = (($1205) + 9)|0;
    $1216 = ((($__ptree__) + ($1215)|0) + 512|0);
    $1217 = HEAP8[$1216>>0]|0;
    $1218 = ($1217<<24>>24)<(0);
    if (!($1218)) {
     $1222 = ((33572424 + ($1205<<3)|0) + 4|0);
     $1223 = HEAP8[$1222>>0]|0;
     $1224 = $1223&255;
     $1225 = ((($__ptree__) + ($1224<<2)|0) + 44|0);
     $1226 = HEAP32[$1225>>2]|0;
     $1227 = ((33572424 + ($1205<<3)|0) + 5|0);
     $1228 = HEAP8[$1227>>0]|0;
     $1229 = $1228&255;
     $1230 = $1226 >>> $1229;
     $1231 = $1230 & 127;
     $1232 = ((33579904 + (($1205*1536)|0)|0) + (($1231*12)|0)|0);
     $1233 = HEAP32[$1232>>2]|0;
     $1234 = (((33579904 + (($1205*1536)|0)|0) + (($1231*12)|0)|0) + 4|0);
     $1235 = HEAP32[$1234>>2]|0;
     $1236 = (((33579904 + (($1205*1536)|0)|0) + (($1231*12)|0)|0) + 8|0);
     $1237 = HEAP32[$1236>>2]|0;
     $1238 = HEAP32[$1202>>2]|0;
     $1239 = $1238 & $1233;
     $1240 = HEAP32[$1203>>2]|0;
     $1241 = $1240 & $1235;
     $1242 = $1241 | $1239;
     $1243 = HEAP32[$1204>>2]|0;
     $1244 = $1243 & $1237;
     $1245 = $1242 | $1244;
     $1246 = ($1245|0)==(0);
     if (!($1246)) {
      $$0 = 1;
      label = 193;
      break;
     }
    }
    $1219 = $1211 | $1208;
    $1220 = $1219 | $1214;
    $1221 = ($1220|0)==(0);
    if ($1221) {
     label = 187;
     break;
    } else {
     $bb_piece$sroa$0$696 = $1208;$bb_piece$sroa$1$697 = $1211;$bb_piece$sroa$2$698 = $1214;
    }
   }
   if ((label|0) == 187) {
    $$pre124 = HEAP32[$1136>>2]|0;
    $$pre125 = HEAP32[$1139>>2]|0;
    $$pre126 = HEAP32[$1142>>2]|0;
    $1248 = $$pre124;$1250 = $$pre125;$1252 = $$pre126;
    break;
   }
   else if ((label|0) == 193) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $1247 = $1248 & $178;
 $1249 = $1250 & $180;
 $1251 = $1252 & $182;
 $1253 = $1249 | $1247;
 $1254 = $1253 | $1251;
 $1255 = ($1254|0)==(0);
 if ($1255) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1256 = (($__ptree__) + 152|0);
 $1257 = (($__ptree__) + 156|0);
 $1258 = (($__ptree__) + 160|0);
 $bb_piece$sroa$0$791 = $1247;$bb_piece$sroa$1$792 = $1249;$bb_piece$sroa$2$793 = $1251;
 while(1) {
  $1259 = (_first_one012($bb_piece$sroa$0$791,$bb_piece$sroa$1$792,$bb_piece$sroa$2$793)|0);
  $1260 = (34156304 + (($1259*12)|0)|0);
  $1261 = HEAP32[$1260>>2]|0;
  $1262 = $1261 ^ $bb_piece$sroa$0$791;
  $1263 = ((34156304 + (($1259*12)|0)|0) + 4|0);
  $1264 = HEAP32[$1263>>2]|0;
  $1265 = $1264 ^ $bb_piece$sroa$1$792;
  $1266 = ((34156304 + (($1259*12)|0)|0) + 8|0);
  $1267 = HEAP32[$1266>>2]|0;
  $1268 = $1267 ^ $bb_piece$sroa$2$793;
  $1269 = (($1259) + 9)|0;
  $1270 = ((($__ptree__) + ($1269)|0) + 512|0);
  $1271 = HEAP8[$1270>>0]|0;
  $1272 = ($1271<<24>>24)<(0);
  if (!($1272)) {
   $1276 = (33572424 + ($1259<<3)|0);
   $1277 = HEAP8[$1276>>0]|0;
   $1278 = $1277&255;
   $1279 = ((($__ptree__) + ($1278<<2)|0) + 8|0);
   $1280 = HEAP32[$1279>>2]|0;
   $1281 = ((($__ptree__) + ($1278<<2)|0) + 20|0);
   $1282 = HEAP32[$1281>>2]|0;
   $1283 = $1282 | $1280;
   $1284 = ((33572424 + ($1259<<3)|0) + 1|0);
   $1285 = HEAP8[$1284>>0]|0;
   $1286 = $1285&255;
   $1287 = $1283 >>> $1286;
   $1288 = $1287 & 127;
   $1289 = ((33828736 + (($1259*1536)|0)|0) + (($1288*12)|0)|0);
   $1290 = HEAP32[$1289>>2]|0;
   $1291 = (((33828736 + (($1259*1536)|0)|0) + (($1288*12)|0)|0) + 4|0);
   $1292 = HEAP32[$1291>>2]|0;
   $1293 = (((33828736 + (($1259*1536)|0)|0) + (($1288*12)|0)|0) + 8|0);
   $1294 = HEAP32[$1293>>2]|0;
   $1295 = HEAP32[$1256>>2]|0;
   $1296 = $1295 & $1290;
   $1297 = HEAP32[$1257>>2]|0;
   $1298 = $1297 & $1292;
   $1299 = $1298 | $1296;
   $1300 = HEAP32[$1258>>2]|0;
   $1301 = $1300 & $1294;
   $1302 = $1299 | $1301;
   $1303 = ($1302|0)==(0);
   if (!($1303)) {
    $$0 = 1;
    label = 193;
    break;
   }
  }
  $1273 = $1265 | $1262;
  $1274 = $1273 | $1268;
  $1275 = ($1274|0)==(0);
  if ($1275) {
   $$0 = 0;
   label = 193;
   break;
  } else {
   $bb_piece$sroa$0$791 = $1262;$bb_piece$sroa$1$792 = $1265;$bb_piece$sroa$2$793 = $1268;
  }
 }
 if ((label|0) == 193) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _phash($move,$turn) {
 $move = $move|0;
 $turn = $turn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $turn << 31;
 $1 = $0 | $move;
 $2 = (($1) + 1778268046)|0;
 $3 = $2 >>> 16;
 $4 = $3 ^ $2;
 $5 = ($4*257)|0;
 $6 = $5 >>> 4;
 $7 = $6 ^ $5;
 $8 = $7 >>> 7;
 $9 = $8 & 2047;
 $10 = $7 >>> 18;
 $11 = (225311800 + ($9<<1)|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = $13 ^ $10;
 STACKTOP = sp;return ($14|0);
}
function _dfpn($ptree,$turn,$ply) {
 $ptree = $ptree|0;
 $turn = $turn|0;
 $ply = $ply|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf1 = 0, $buf2 = 0, $cond = 0, $cpu0 = 0, $cpu1 = 0;
 var $elapse0 = 0, $elapse1 = 0, $i$0$lcssa = 0, $i$03 = 0, $iret$0 = 0, $u$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0;
 var $vararg_buffer37 = 0, $vararg_buffer41 = 0, $vararg_buffer45 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer7 = 0, $vararg_ptr13 = 0, $vararg_ptr40 = 0, $vararg_ptr44 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer50 = sp + 176|0;
 $vararg_buffer45 = sp + 40|0;
 $vararg_buffer41 = sp + 24|0;
 $vararg_buffer37 = sp + 152|0;
 $vararg_buffer35 = sp + 80|0;
 $vararg_buffer33 = sp + 16|0;
 $vararg_buffer30 = sp + 112|0;
 $vararg_buffer27 = sp + 128|0;
 $vararg_buffer25 = sp + 144|0;
 $vararg_buffer23 = sp + 168|0;
 $vararg_buffer21 = sp + 64|0;
 $vararg_buffer19 = sp + 72|0;
 $vararg_buffer17 = sp + 88|0;
 $vararg_buffer14 = sp + 96|0;
 $vararg_buffer10 = sp;
 $vararg_buffer7 = sp + 104|0;
 $vararg_buffer5 = sp + 120|0;
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer1 = sp + 136|0;
 $vararg_buffer = sp + 8|0;
 $cpu0 = sp + 192|0;
 $cpu1 = sp + 188|0;
 $elapse0 = sp + 184|0;
 $elapse1 = sp + 180|0;
 $buf1 = sp + 216|0;
 $buf2 = sp + 200|0;
 $0 = (_get_cputime($cpu0)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_get_elapsed($elapse0)|0);
 $3 = ($2|0)<(0);
 if ($3) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[34180944>>2]|0;
 $5 = ($4>>>0)>(1600015);
 if ($5) {
  $u$0 = 100000;
 } else {
  $6 = $4 >>> 4;
  $7 = ($4>>>0)<(160000);
  $$ = $7 ? 10000 : $6;
  $u$0 = $$;
 }
 HEAP32[34180952>>2] = $u$0;
 HEAP32[34180960>>2] = 0;
 HEAP32[34183984>>2] = 0;
 HEAP32[34181064>>2] = -1;
 HEAP32[34181056>>2] = -1;
 $8 = HEAP32[34180920>>2]|0;
 $9 = $8 & -4745;
 $10 = $9 | 128;
 HEAP32[34180920>>2] = $10;
 $11 = (($ptree) + 2648|0);
 $12 = $11;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 HEAP32[((225315904 + 12|0))>>2] = $ply;
 HEAP32[((225315904 + 8|0))>>2] = $turn;
 HEAP32[((225315904 + 16|0))>>2] = 0;
 $16 = 225315904;
 $17 = $16;
 HEAP32[$17>>2] = 50000000;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = ((225315904 + (($ply*80)|0)|0) + 2097216|0);
 HEAP32[$20>>2] = 8388606;
 $21 = ((225315904 + (($ply*80)|0)|0) + 2097220|0);
 HEAP32[$21>>2] = 8388606;
 $22 = ((225315904 + (($ply*80)|0)|0) + 2097244|0);
 HEAP32[$22>>2] = $turn;
 $23 = ((225315904 + (($ply*80)|0)|0) + 2097176|0);
 HEAP32[$23>>2] = ((225315904 + 24|0));
 $24 = ((225315904 + (($ply*80)|0)|0) + 2097200|0);
 $25 = $24;
 $26 = $25;
 HEAP32[$26>>2] = 1;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = 0;
 $29 = (_mid($ptree,$ply)|0);
 $30 = ($29|0)>(-1);
 if ($30) {
  $31 = HEAP32[$20>>2]|0;
  $32 = ($31|0)==(8388607);
  if ($32) {
   $iret$0 = $29;
  } else {
   $33 = HEAP32[$21>>2]|0;
   $34 = ($33|0)==(8388607);
   if ($34) {
    $iret$0 = $29;
   } else {
    $cond = ($31|0)==(8388606);
    if ($cond) {
     (_snprintf($buf1,16,227423640,$vararg_buffer)|0);
    } else {
     HEAP32[$vararg_buffer1>>2] = $31;
     (_snprintf($buf1,16,227423648,$vararg_buffer1)|0);
    }
    $35 = (($buf1) + 15|0);
    HEAP8[$35>>0] = 0;
    $36 = HEAP32[$21>>2]|0;
    if ((($36|0) == 8388606)) {
     (_snprintf($buf2,16,227423640,$vararg_buffer5)|0);
    } else if ((($36|0) == 8388607)) {
     (_snprintf($buf2,16,227423632,$vararg_buffer3)|0);
    } else {
     HEAP32[$vararg_buffer7>>2] = $36;
     (_snprintf($buf2,16,227423648,$vararg_buffer7)|0);
    }
    $37 = (($buf2) + 15|0);
    HEAP8[$37>>0] = 0;
    HEAP32[$vararg_buffer10>>2] = $buf1;
    $vararg_ptr13 = (($vararg_buffer10) + 4|0);
    HEAP32[$vararg_ptr13>>2] = $buf2;
    _out(227423320,$vararg_buffer10);
    HEAP32[$20>>2] = 8388607;
    HEAP32[$21>>2] = 8388607;
    $38 = (_mid($ptree,$ply)|0);
    $iret$0 = $38;
   }
  }
 } else {
  $iret$0 = $29;
 }
 $39 = HEAP32[34180920>>2]|0;
 $40 = $39 & -129;
 HEAP32[34180920>>2] = $40;
 $41 = $39 & 4096;
 $42 = ($41|0)==(0);
 if (!($42)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $43 = ($iret$0|0)<(0);
 do {
  if ($43) {
   $44 = HEAP32[220526680>>2]|0;
   $45 = ($44|0)==(-1);
   if (!($45)) {
    HEAP32[$vararg_buffer14>>2] = $iret$0;
    (_sckt_out($44,227423344,$vararg_buffer14)|0);
   }
   if ((($iret$0|0) == -102)) {
    _out(227423384,$vararg_buffer19);
    break;
   } else if ((($iret$0|0) == -103)) {
    _out(227423408,$vararg_buffer21);
    break;
   } else if ((($iret$0|0) == -104)) {
    _out(227423432,$vararg_buffer23);
    break;
   } else if ((($iret$0|0) == -101)) {
    _out(227423360,$vararg_buffer17);
    break;
   } else {
    _out(227423456,$vararg_buffer25);
    break;
   }
  } else {
   $46 = HEAP32[$21>>2]|0;
   $47 = ($46|0)==(8388607);
   if (!($47)) {
    _out(227423496,$vararg_buffer33);
    $62 = HEAP32[220526680>>2]|0;
    $63 = ($62|0)==(-1);
    if ($63) {
     break;
    }
    (_sckt_out($62,227423512,$vararg_buffer35)|0);
    break;
   }
   $48 = ((225315904 + (($ply*80)|0)|0) + 2097240|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)>(0);
   $51 = HEAP32[$23>>2]|0;
   L43: do {
    if ($50) {
     $i$03 = 0;
     while(1) {
      $54 = ((($51) + ($i$03<<6)|0) + 36|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = ($55|0)==(8388607);
      $53 = (($i$03) + 1)|0;
      if ($56) {
       $i$0$lcssa = $i$03;
       break L43;
      }
      $52 = ($53|0)<($49|0);
      if ($52) {
       $i$03 = $53;
      } else {
       $i$0$lcssa = $53;
       break;
      }
     }
    } else {
     $i$0$lcssa = 0;
    }
   } while(0);
   $57 = ((($51) + ($i$0$lcssa<<6)|0) + 32|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (_str_CSA_move($58)|0);
   HEAP32[$vararg_buffer27>>2] = $59;
   _out(227423472,$vararg_buffer27);
   $60 = HEAP32[220526680>>2]|0;
   $61 = ($60|0)==(-1);
   if (!($61)) {
    HEAP32[$vararg_buffer30>>2] = $59;
    (_sckt_out($60,227423488,$vararg_buffer30)|0);
   }
  }
 } while(0);
 $64 = (+_dfpn_hash_sat());
 $65 = $64;
 $66 = $64 > 3.0;
 if ($66) {
  $67 = HEAP32[227423520>>2]|0;
  $68 = (($67) + 1)|0;
  $69 = $68 & 255;
  HEAP32[227423520>>2] = $69;
 }
 $70 = (_get_cputime($cpu1)|0);
 $71 = ($70|0)<(0);
 if ($71) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $72 = (_get_elapsed($elapse1)|0);
 $73 = ($72|0)<(0);
 if ($73) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $74 = HEAP32[$cpu1>>2]|0;
 $75 = HEAP32[$cpu0>>2]|0;
 $76 = (($74) - ($75))|0;
 $77 = (+($76>>>0));
 $78 = $77 * 100.0;
 $79 = HEAP32[$elapse1>>2]|0;
 $80 = HEAP32[$elapse0>>2]|0;
 $81 = (($79) + 1)|0;
 $82 = (($81) - ($80))|0;
 $83 = (+($82>>>0));
 $84 = $78 / $83;
 $85 = $11;
 $86 = $85;
 $87 = HEAP32[$86>>2]|0;
 $88 = (($85) + 4)|0;
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 $91 = (+($87>>>0)) + (4294967296.0*(+($90>>>0)));
 $92 = $91 * 1000.0;
 $93 = $92 / $83;
 $94 = $93;
 $95 = $94 + 0.5;
 $96 = (~~(($95))>>>0);
 HEAP32[34180944>>2] = $96;
 $97 = $vararg_buffer37;
 $98 = $97;
 HEAP32[$98>>2] = $87;
 $99 = (($97) + 4)|0;
 $100 = $99;
 HEAP32[$100>>2] = $90;
 $vararg_ptr40 = (($vararg_buffer37) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$65;HEAP32[$vararg_ptr40>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr40+4>>2]=HEAP32[tempDoublePtr+4>>2];
 _out(227423528,$vararg_buffer37);
 $101 = HEAP32[227423520>>2]|0;
 $102 = HEAP32[((225315904 + 16|0))>>2]|0;
 HEAP32[$vararg_buffer41>>2] = $101;
 $vararg_ptr44 = (($vararg_buffer41) + 4|0);
 HEAP32[$vararg_ptr44>>2] = $102;
 _out(227423552,$vararg_buffer41);
 $103 = HEAP32[$elapse1>>2]|0;
 $104 = HEAP32[$elapse0>>2]|0;
 $105 = (($103) + 1)|0;
 $106 = (($105) - ($104))|0;
 $107 = (+($106>>>0));
 $108 = $107 / 1000.0;
 $109 = $108;
 $110 = $84;
 $111 = $93 / 1000.0;
 $112 = $111;
 HEAPF64[tempDoublePtr>>3]=$109;HEAP32[$vararg_buffer45>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer45+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr48 = (($vararg_buffer45) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$110;HEAP32[$vararg_ptr48>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr48+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr49 = (($vararg_buffer45) + 16|0);
 HEAPF64[tempDoublePtr>>3]=$112;HEAP32[$vararg_ptr49>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr49+4>>2]=HEAP32[tempDoublePtr+4>>2];
 _out(227423576,$vararg_buffer45);
 _out(227423616,$vararg_buffer50);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _mid($ptree,$ply) {
 $ptree = $ptree|0;
 $ply = $ply|0;
 var $$0 = 0, $$9 = 0, $$min$0$i = 0, $$min$2$i = 0, $$pre = 0, $$pre24 = 0, $$sink$i = 0, $$sink$in$i = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $delta_2p1$0 = 0, $delta_2p1$0$ = 0, $dist_c$07$i = 0, $dist_c$1$i = 0, $exitcond$i = 0, $exitcond$i3 = 0;
 var $exitcond16$i = 0, $exitcond7$i = 0, $i$01$i = 0, $i$010$i = 0, $i$04$i = 0, $i$12$i = 0, $i$18$i = 0, $ispos$i = 0, $ispos1$i = 0, $min$03$i = 0, $min$1$i = 0, $min$21$i = 0, $min$3$i = 0, $neg$i = 0, $neg2$i = 0, $not$ = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i6 = 0, $or$cond1 = 0;
 var $or$cond3$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $priori_c$012$i = 0, $priori_c$1$i = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((225315904 + (($ply*80)|0)|0) + 2097176|0);
 $1 = (($ptree) + 2648|0);
 $2 = $1;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = 225315904;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (_i64Add(($4|0),($7|0),1,0)|0);
 $15 = tempRet0;
 $16 = $1;
 $17 = $16;
 HEAP32[$17>>2] = $14;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 $20 = ($13>>>0)>($15>>>0);
 $21 = ($13|0)==($15|0);
 $22 = ($10>>>0)>($14>>>0);
 $23 = $21 & $22;
 $24 = $20 | $23;
 if (!($24)) {
  $$0 = -101;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = HEAP32[34180952>>2]|0;
 $26 = HEAP32[34180960>>2]|0;
 $27 = (($26) + 1)|0;
 HEAP32[34180960>>2] = $27;
 $28 = ($25>>>0)<($27>>>0);
 if ($28) {
  $29 = (_detect_signals($ptree)|0);
  $30 = ($29|0)==(0);
  if (!($30)) {
   $$0 = -105;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $31 = ($ply|0)>(124);
 if ($31) {
  $$0 = -102;
  STACKTOP = sp;return ($$0|0);
 }
 $32 = (_init_children($ptree,$ply)|0);
 $33 = ($32|0)==(0);
 if (!($33)) {
  $34 = ((225315904 + (($ply*80)|0)|0) + 2097216|0);
  HEAP32[$34>>2] = 0;
  $35 = ((225315904 + (($ply*80)|0)|0) + 2097220|0);
  HEAP32[$35>>2] = 8388607;
  $36 = ((225315904 + (($ply*80)|0)|0) + 2097192|0);
  $37 = $36;
  $38 = $37;
  HEAP32[$38>>2] = 1;
  $39 = (($37) + 4)|0;
  $40 = $39;
  HEAP32[$40>>2] = 0;
  _dfpn_hash_store($ptree,225315904,$ply);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $41 = ((225315904 + (($ply*80)|0)|0) + 2097240|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0);
 if ($43) {
  $44 = ((225315904 + (($ply*80)|0)|0) + 2097216|0);
  HEAP32[$44>>2] = 8388607;
  $45 = ((225315904 + (($ply*80)|0)|0) + 2097220|0);
  HEAP32[$45>>2] = 0;
  $46 = ((225315904 + (($ply*80)|0)|0) + 2097192|0);
  $47 = $46;
  $48 = $47;
  HEAP32[$48>>2] = 1;
  $49 = (($47) + 4)|0;
  $50 = $49;
  HEAP32[$50>>2] = 0;
  _dfpn_hash_store($ptree,225315904,$ply);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $51 = $ptree;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = (($51) + 4)|0;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = ((225315904 + (($ply*80)|0)|0) + 2097184|0);
 $58 = $57;
 $59 = $58;
 HEAP32[$59>>2] = $53;
 $60 = (($58) + 4)|0;
 $61 = $60;
 HEAP32[$61>>2] = $56;
 $62 = (($ptree) + 500|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ((225315904 + (($ply*80)|0)|0) + 2097212|0);
 HEAP32[$64>>2] = $63;
 $$sum = (($ply) + 1)|0;
 $65 = ((225315904 + (($ply*80)|0)|0) + 2097228|0);
 $66 = ((225315904 + (($ply*80)|0)|0) + 2097224|0);
 $67 = ((225315904 + (($ply*80)|0)|0) + 2097216|0);
 $68 = ((225315904 + (($ply*80)|0)|0) + 2097220|0);
 $69 = ((225315904 + (($ply*80)|0)|0) + 2097248|0);
 $70 = ((225315904 + (($$sum*80)|0)|0) + 2097216|0);
 $71 = ((225315904 + (($$sum*80)|0)|0) + 2097220|0);
 $72 = ((225315904 + (($ply*80)|0)|0) + 2097244|0);
 $73 = ((225315904 + (($$sum*80)|0)|0) + 2097244|0);
 $74 = ((225315904 + (($$sum*80)|0)|0) + 2097176|0);
 $75 = ((225315904 + (($$sum*80)|0)|0) + 2097200|0);
 $76 = ((225315904 + (($ply*80)|0)|0) + 2097200|0);
 $77 = (($ptree) + 594|0);
 $78 = (($ptree) + 593|0);
 $80 = $42;
 while(1) {
  $79 = ($80|0)>(0);
  if ($79) {
   $81 = HEAP32[$0>>2]|0;
   $i$04$i = 0;$min$03$i = -1;
   while(1) {
    $82 = ((($81) + ($i$04$i<<6)|0) + 60|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($83|0)==(1);
    if ($84) {
     $min$1$i = $min$03$i;
    } else {
     $85 = ((($81) + ($i$04$i<<6)|0) + 40|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ($86>>>0)<($min$03$i>>>0);
     $$min$0$i = $87 ? $86 : $min$03$i;
     $min$1$i = $$min$0$i;
    }
    $88 = (($i$04$i) + 1)|0;
    $exitcond7$i = ($88|0)==($80|0);
    if ($exitcond7$i) {
     break;
    } else {
     $i$04$i = $88;$min$03$i = $min$1$i;
    }
   }
   $89 = ($min$1$i>>>0)<(8388606);
   if ($89) {
    $97 = $min$1$i;
   } else {
    $i$12$i = 0;$min$21$i = $min$1$i;
    while(1) {
     $90 = ((($81) + ($i$12$i<<6)|0) + 60|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $93 = ((($81) + ($i$12$i<<6)|0) + 40|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = ($94>>>0)<($min$21$i>>>0);
      $$min$2$i = $95 ? $94 : $min$21$i;
      $min$3$i = $$min$2$i;
     } else {
      $min$3$i = $min$21$i;
     }
     $96 = (($i$12$i) + 1)|0;
     $exitcond$i = ($96|0)==($80|0);
     if ($exitcond$i) {
      $97 = $min$3$i;
      break;
     } else {
      $i$12$i = $96;$min$21$i = $min$3$i;
     }
    }
   }
  } else {
   $97 = -1;
  }
  HEAP32[$65>>2] = $97;
  $98 = (_sum_phi_c($0)|0);
  HEAP32[$66>>2] = $98;
  $99 = ($98|0)==(-1);
  if ($99) {
   $$0 = -103;
   label = 66;
   break;
  }
  $100 = HEAP32[((225315904 + 16|0))>>2]|0;
  $101 = ($100>>>0)<($98>>>0);
  $102 = ($98>>>0)<(8388606);
  $or$cond = $101 & $102;
  if ($or$cond) {
   HEAP32[((225315904 + 16|0))>>2] = $98;
  }
  $103 = HEAP32[$67>>2]|0;
  $104 = ($103>>>0)>($97>>>0);
  if (!($104)) {
   label = 65;
   break;
  }
  $105 = HEAP32[$68>>2]|0;
  $106 = ($105>>>0)>($98>>>0);
  if (!($106)) {
   label = 65;
   break;
  }
  $107 = HEAP32[$0>>2]|0;
  if ($79) {
   $125 = 8388607;$128 = -1;$131 = -1;$138 = 8388607;$142 = 8388607;$i$010$i = 0;$priori_c$012$i = -1;
   while(1) {
    $108 = ((($107) + ($i$010$i<<6)|0) + 60|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==(1);
    L44: do {
     if ($110) {
      $145 = $125;$296 = $142;$297 = $138;$298 = $131;$299 = $128;$priori_c$1$i = $priori_c$012$i;
     } else {
      $111 = ((($107) + ($i$010$i<<6)|0) + 36|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = ((($107) + ($i$010$i<<6)|0) + 40|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = ((($107) + ($i$010$i<<6)|0) + 8|0);
      $116 = $115;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($116) + 4)|0;
      $120 = $119;
      $121 = HEAP32[$120>>2]|0;
      $122 = ((($107) + ($i$010$i<<6)|0) + 44|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ($114>>>0)<($125>>>0);
      do {
       if (!($124)) {
        $126 = ($114|0)==($125|0);
        $127 = ($121>>>0)<($128>>>0);
        $129 = ($121|0)==($128|0);
        $130 = ($118>>>0)<($131>>>0);
        $132 = $129 & $130;
        $133 = $127 | $132;
        $or$cond$i = $126 & $133;
        if (!($or$cond$i)) {
         $134 = ($118|0)==($131|0);
         $135 = ($121|0)==($128|0);
         $136 = $134 & $135;
         $or$cond3$i = $126 & $136;
         if ($or$cond3$i) {
          $137 = ($112>>>0)<($138>>>0);
          if ($137) {
           break;
          }
          $139 = ($112|0)==($138|0);
          $140 = ($123>>>0)<($priori_c$012$i>>>0);
          $or$cond5$i = $139 & $140;
          if ($or$cond5$i) {
           break;
          }
         }
         $141 = ($114>>>0)<($142>>>0);
         $$9 = $141 ? $114 : $142;
         $145 = $125;$296 = $$9;$297 = $138;$298 = $131;$299 = $128;$priori_c$1$i = $priori_c$012$i;
         break L44;
        }
       }
      } while(0);
      HEAP32[$69>>2] = $i$010$i;
      $145 = $114;$296 = $125;$297 = $112;$298 = $118;$299 = $121;$priori_c$1$i = $123;
     }
    } while(0);
    $143 = (($i$010$i) + 1)|0;
    $exitcond16$i = ($143|0)==($80|0);
    if ($exitcond16$i) {
     break;
    } else {
     $125 = $145;$128 = $299;$131 = $298;$138 = $297;$142 = $296;$i$010$i = $143;$priori_c$012$i = $priori_c$1$i;
    }
   }
   $144 = ($145>>>0)<(8388606);
   if ($144) {
    $184 = $80;$209 = $297;$216 = $145;$300 = $296;
   } else {
    $146 = HEAP32[$72>>2]|0;
    $147 = ($146|0)==(0);
    $$sink$in$i = $147 ? $78 : $77;
    $$sink$i = HEAP8[$$sink$in$i>>0]|0;
    $148 = $$sink$i&255;
    if ($79) {
     $149 = (1336 + ($148)|0);
     $150 = (1248 + ($148)|0);
     $301 = $145;$302 = $297;$dist_c$07$i = 2147483647;$i$18$i = 0;
     while(1) {
      $151 = ((($107) + ($i$18$i<<6)|0) + 60|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = ($152|0)==(1);
      if ($153) {
       $154 = ((($107) + ($i$18$i<<6)|0) + 32|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = $155 & 127;
       $157 = (1336 + ($156)|0);
       $158 = HEAP8[$157>>0]|0;
       $159 = $158&255;
       $160 = HEAP8[$149>>0]|0;
       $161 = $160&255;
       $162 = (($159) - ($161))|0;
       $ispos$i = ($162|0)>(-1);
       $neg$i = (0 - ($162))|0;
       $163 = $ispos$i ? $162 : $neg$i;
       $164 = (1248 + ($156)|0);
       $165 = HEAP8[$164>>0]|0;
       $166 = $165&255;
       $167 = HEAP8[$150>>0]|0;
       $168 = $167&255;
       $169 = (($166) - ($168))|0;
       $ispos1$i = ($169|0)>(-1);
       $neg2$i = (0 - ($169))|0;
       $170 = $ispos1$i ? $169 : $neg2$i;
       $171 = ($163|0)<($170|0);
       $172 = $171 ? $170 : $163;
       $173 = ((($107) + ($i$18$i<<6)|0) + 36|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ((($107) + ($i$18$i<<6)|0) + 40|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($103>>>0)>($176>>>0);
       if ($177) {
        $178 = ($dist_c$07$i|0)==(2147483647);
        $179 = ($172|0)<($dist_c$07$i|0);
        $or$cond6$i = $178 | $179;
        if ($or$cond6$i) {
         HEAP32[$69>>2] = $i$18$i;
         $303 = $176;$304 = $174;$dist_c$1$i = $172;
        } else {
         $303 = $301;$304 = $302;$dist_c$1$i = $dist_c$07$i;
        }
       } else {
        $303 = $301;$304 = $302;$dist_c$1$i = $dist_c$07$i;
       }
      } else {
       $303 = $301;$304 = $302;$dist_c$1$i = $dist_c$07$i;
      }
      $180 = (($i$18$i) + 1)|0;
      $exitcond$i3 = ($180|0)==($80|0);
      if ($exitcond$i3) {
       $294 = $303;$295 = $304;
       label = 42;
       break;
      } else {
       $301 = $303;$302 = $304;$dist_c$07$i = $dist_c$1$i;$i$18$i = $180;
      }
     }
    } else {
     $294 = $145;$295 = $297;
     label = 42;
    }
   }
  } else {
   $294 = 8388607;$295 = 8388607;
   label = 42;
  }
  if ((label|0) == 42) {
   label = 0;
   $181 = HEAP32[$69>>2]|0;
   $182 = ((($107) + ($181<<6)|0) + 60|0);
   HEAP32[$182>>2] = 0;
   $$pre24 = HEAP32[$41>>2]|0;
   $184 = $$pre24;$209 = $295;$216 = $294;$300 = 8388607;
  }
  $183 = ($184|0)>(0);
  $185 = HEAP32[$67>>2]|0;
  L68: do {
   if ($183) {
    $i$01$i = 0;
    while(1) {
     $186 = ((($107) + ($i$01$i<<6)|0) + 40|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ($185>>>0)>($187>>>0);
     if ($188) {
      $189 = ((($107) + ($i$01$i<<6)|0) + 60|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = ($190|0)==(1);
      if (!($191)) {
       $192 = ((($107) + ($i$01$i<<6)|0) + 48|0);
       $193 = HEAP32[$192>>2]|0;
       $194 = ($193|0)==(0);
       if ($194) {
        $195 = ((($107) + ($i$01$i<<6)|0) + 16|0);
        $196 = $195;
        $197 = $196;
        $198 = HEAP32[$197>>2]|0;
        $199 = (($196) + 4)|0;
        $200 = $199;
        $201 = HEAP32[$200>>2]|0;
        $202 = ($198|0)==(0);
        $203 = ($201|0)==(0);
        $204 = $202 & $203;
        $205 = ($187>>>0)>(2000);
        $or$cond$i6 = $204 | $205;
        if (!($or$cond$i6)) {
         $218 = $300;
         break L68;
        }
       }
      }
     }
     $206 = (($i$01$i) + 1)|0;
     $207 = ($206|0)<($184|0);
     if ($207) {
      $i$01$i = $206;
     } else {
      $218 = $185;
      break;
     }
    }
   } else {
    $218 = $185;
   }
  } while(0);
  $208 = ($209|0)==(8388606);
  do {
   if ($208) {
    HEAP32[$70>>2] = 8388607;
   } else {
    $210 = HEAP32[$68>>2]|0;
    $211 = ($210>>>0)>(8388605);
    if ($211) {
     HEAP32[$70>>2] = 8388606;
     break;
    } else {
     $212 = (($210) + ($209))|0;
     $213 = HEAP32[$66>>2]|0;
     $214 = (($212) - ($213))|0;
     HEAP32[$70>>2] = $214;
     break;
    }
   }
  } while(0);
  $215 = ($216|0)==(8388606);
  if ($215) {
   $storemerge = 8388607;
  } else {
   $217 = ($218|0)==(8388605);
   if ($217) {
    $$0 = -104;
    label = 66;
    break;
   }
   $not$ = ($218>>>0)<(8388606);
   $219 = $not$&1;
   $delta_2p1$0 = (($219) + ($218))|0;
   $220 = ($delta_2p1$0>>>0)<($185>>>0);
   $delta_2p1$0$ = $220 ? $delta_2p1$0 : $185;
   $storemerge = $delta_2p1$0$;
  }
  HEAP32[$71>>2] = $storemerge;
  $221 = HEAP32[$72>>2]|0;
  $222 = $221 ^ 1;
  HEAP32[$73>>2] = $222;
  $223 = (($107) + ($184<<6)|0);
  HEAP32[$74>>2] = $223;
  $224 = HEAP32[$69>>2]|0;
  $225 = ((($107) + ($224<<6)|0) + 8|0);
  $226 = $225;
  $227 = $226;
  $228 = HEAP32[$227>>2]|0;
  $229 = (($226) + 4)|0;
  $230 = $229;
  $231 = HEAP32[$230>>2]|0;
  $232 = ($228|0)==(0);
  $233 = ($231|0)==(0);
  $234 = $232 & $233;
  $235 = $234&1;
  $236 = $75;
  $237 = $236;
  HEAP32[$237>>2] = $235;
  $238 = (($236) + 4)|0;
  $239 = $238;
  HEAP32[$239>>2] = 0;
  $240 = ($221|0)==(0);
  $241 = ((($107) + ($224<<6)|0) + 32|0);
  $242 = HEAP32[$241>>2]|0;
  if ($240) {
   _make_move_b($ptree,$242,$ply);
  } else {
   _make_move_w($ptree,$242,$ply);
  }
  $243 = (_mid($ptree,$$sum)|0);
  $244 = HEAP32[$72>>2]|0;
  $245 = ($244|0)==(0);
  $246 = HEAP32[$69>>2]|0;
  $247 = HEAP32[$0>>2]|0;
  $248 = ((($247) + ($246<<6)|0) + 32|0);
  $249 = HEAP32[$248>>2]|0;
  if ($245) {
   _unmake_move_b($ptree,$249,$ply);
  } else {
   _unmake_move_w($ptree,$249,$ply);
  }
  $250 = HEAP32[34183984>>2]|0;
  $251 = ($250|0)!=(0);
  $252 = ($243|0)<(0);
  $or$cond1 = $251 | $252;
  if ($or$cond1) {
   $$0 = $243;
   label = 66;
   break;
  }
  $253 = $75;
  $254 = $253;
  $255 = HEAP32[$254>>2]|0;
  $256 = (($253) + 4)|0;
  $257 = $256;
  $258 = HEAP32[$257>>2]|0;
  $259 = $76;
  $260 = $259;
  $261 = HEAP32[$260>>2]|0;
  $262 = (($259) + 4)|0;
  $263 = $262;
  $264 = HEAP32[$263>>2]|0;
  $265 = (_i64Add(($261|0),($264|0),($255|0),($258|0))|0);
  $266 = tempRet0;
  $267 = $76;
  $268 = $267;
  HEAP32[$268>>2] = $265;
  $269 = (($267) + 4)|0;
  $270 = $269;
  HEAP32[$270>>2] = $266;
  $271 = HEAP32[$69>>2]|0;
  $272 = HEAP32[$0>>2]|0;
  $273 = ((($272) + ($271<<6)|0) + 16|0);
  $274 = $273;
  $275 = $274;
  HEAP32[$275>>2] = $255;
  $276 = (($274) + 4)|0;
  $277 = $276;
  HEAP32[$277>>2] = $258;
  $278 = (($272) + ($271<<6)|0);
  $279 = HEAP32[$72>>2]|0;
  $280 = $279 ^ 1;
  _dfpn_hash_probe(225315904,$278,$ply,$280);
  $$pre = HEAP32[$41>>2]|0;
  $80 = $$pre;
 }
 if ((label|0) == 65) {
  HEAP32[$67>>2] = $97;
  HEAP32[$68>>2] = $98;
  $281 = $1;
  $282 = $281;
  $283 = HEAP32[$282>>2]|0;
  $284 = (($281) + 4)|0;
  $285 = $284;
  $286 = HEAP32[$285>>2]|0;
  $287 = (_i64Subtract(($283|0),($286|0),($4|0),($7|0))|0);
  $288 = tempRet0;
  $289 = ((225315904 + (($ply*80)|0)|0) + 2097192|0);
  $290 = $289;
  $291 = $290;
  HEAP32[$291>>2] = $287;
  $292 = (($290) + 4)|0;
  $293 = $292;
  HEAP32[$293>>2] = $288;
  _dfpn_hash_store($ptree,225315904,$ply);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 66) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _init_children($ptree,$ply) {
 $ptree = $ptree|0;
 $ply = $ply|0;
 var $$0 = 0, $$pre = 0, $$pre27 = 0, $$sink = 0, $$sink$in = 0, $$sink2 = 0, $$sink2$in = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $amove = 0, $bb_intercept$sroa$0$018 = 0, $bb_intercept$sroa$0$1 = 0, $bb_intercept$sroa$1$017 = 0, $bb_intercept$sroa$1$1 = 0, $bb_intercept$sroa$2$016 = 0, $bb_intercept$sroa$2$1 = 0, $cond = 0, $cond1 = 0, $ip = 0, $min_hand_b$0 = 0, $n$06 = 0, $n$1 = 0, $n$213 = 0, $n$3 = 0, $or$cond = 0, $or$cond3 = 0, $pmove$08 = 0, $pmove$119 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $amove = sp + 8|0;
 $ip = sp;
 $0 = ((225315904 + (($ply*80)|0)|0) + 2097176|0);
 $1 = HEAP32[((225315904 + 8|0))>>2]|0;
 $2 = ((225315904 + (($ply*80)|0)|0) + 2097244|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 $5 = ($3|0)!=(0);
 L1: do {
  if ($4) {
   $6 = (($ptree) + 593|0);
   $7 = (($ptree) + 594|0);
   $$sink$in = $5 ? $6 : $7;
   $$sink = HEAP8[$$sink$in>>0]|0;
   $8 = $$sink&255;
   $9 = ($1|0)==(0);
   if ($9) {
    $11 = (_b_gen_checks($ptree,$amove)|0);
    $13 = $11;
   } else {
    $10 = (_w_gen_checks($ptree,$amove)|0);
    $13 = $10;
   }
   $12 = ($amove|0)==($13|0);
   if ($12) {
    $n$3 = 0;
   } else {
    $14 = ((225315904 + (($ply*80)|0)|0) + 2097200|0);
    $15 = (($ptree) + 500|0);
    $16 = (($ply) + -3)|0;
    $17 = (33578928 + (($8*12)|0)|0);
    $18 = ((33578928 + (($8*12)|0)|0) + 4|0);
    $19 = ((33578928 + (($8*12)|0)|0) + 8|0);
    $n$06 = 0;$pmove$08 = $amove;
    L83: while(1) {
     $20 = HEAP32[$pmove$08>>2]|0;
     $21 = $20 >>> 7;
     $22 = $21 & 127;
     $23 = $20 & 127;
     $24 = HEAP32[$2>>2]|0;
     $25 = ($24|0)==(0);
     if ($25) {
      _make_move_b($ptree,$20,$ply);
     } else {
      _make_move_w($ptree,$20,$ply);
     }
     $26 = HEAP32[$2>>2]|0;
     $27 = ($26|0)==(0);
     if ($27) {
      $32 = HEAP8[$6>>0]|0;
      $33 = $32&255;
      $34 = (_is_black_attacked($ptree,$33)|0);
      $35 = ($34|0)==(0);
      if ($35) {
       label = 16;
      } else {
       label = 13;
      }
     } else {
      $28 = HEAP8[$7>>0]|0;
      $29 = $28&255;
      $30 = (_is_white_attacked($ptree,$29)|0);
      $31 = ($30|0)==(0);
      if ($31) {
       label = 16;
      } else {
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       label = 0;
       $36 = HEAP32[$2>>2]|0;
       $37 = ($36|0)==(0);
       $38 = HEAP32[$pmove$08>>2]|0;
       if ($37) {
        _unmake_move_b($ptree,$38,$ply);
        $n$1 = $n$06;
        break;
       } else {
        _unmake_move_w($ptree,$38,$ply);
        $n$1 = $n$06;
        break;
       }
      }
      else if ((label|0) == 16) {
       label = 0;
       $39 = $14;
       $40 = $39;
       $41 = HEAP32[$40>>2]|0;
       $42 = (($39) + 4)|0;
       $43 = $42;
       $44 = HEAP32[$43>>2]|0;
       $45 = ($41|0)==(0);
       $46 = ($44|0)==(0);
       $47 = $45 & $46;
       do {
        if (!($47)) {
         $48 = HEAP32[$2>>2]|0;
         $49 = ($48|0)==(0);
         if ($49) {
          $52 = (_w_have_evasion($ptree)|0);
          $53 = ($52|0)==(0);
          if ($53) {
           break L83;
          } else {
           break;
          }
         } else {
          $50 = (_b_have_evasion($ptree)|0);
          $51 = ($50|0)==(0);
          if ($51) {
           break L83;
          } else {
           break;
          }
         }
        }
       } while(0);
       $74 = ($22>>>0)<(81);
       do {
        if ($74) {
         $75 = HEAP32[$0>>2]|0;
         $76 = ((($75) + ($n$06<<6)|0) + 60|0);
         HEAP32[$76>>2] = 0;
         $77 = ((($75) + ($n$06<<6)|0) + 44|0);
         HEAP32[$77>>2] = 1;
         $109 = $75;
        } else {
         $78 = ($22|0)==(83);
         if (!($78)) {
          $79 = HEAP32[$17>>2]|0;
          $80 = (34156304 + (($23*12)|0)|0);
          $81 = HEAP32[$80>>2]|0;
          $82 = $81 & $79;
          $83 = HEAP32[$18>>2]|0;
          $84 = ((34156304 + (($23*12)|0)|0) + 4|0);
          $85 = HEAP32[$84>>2]|0;
          $86 = $85 & $83;
          $87 = $86 | $82;
          $88 = HEAP32[$19>>2]|0;
          $89 = ((34156304 + (($23*12)|0)|0) + 8|0);
          $90 = HEAP32[$89>>2]|0;
          $91 = $90 & $88;
          $92 = $87 | $91;
          $93 = ($92|0)==(0);
          if ($93) {
           $97 = ((220518304 + (($8*81)|0)|0) + ($23)|0);
           $98 = HEAP8[$97>>0]|0;
           $99 = $98&255;
           $100 = $99 << 1;
           $101 = (($100) + 100)|0;
           $102 = ($8>>>0)<($23>>>0);
           $103 = $102&1;
           $104 = $101 | $103;
           $105 = HEAP32[$0>>2]|0;
           $106 = ((($105) + ($n$06<<6)|0) + 60|0);
           HEAP32[$106>>2] = $104;
           $107 = ((($105) + ($n$06<<6)|0) + 44|0);
           HEAP32[$107>>2] = 1;
           $109 = $105;
           break;
          }
         }
         $94 = HEAP32[$0>>2]|0;
         $95 = ((($94) + ($n$06<<6)|0) + 60|0);
         HEAP32[$95>>2] = 0;
         $96 = ((($94) + ($n$06<<6)|0) + 44|0);
         HEAP32[$96>>2] = 1;
         $109 = $94;
        }
       } while(0);
       $108 = ((($109) + ($n$06<<6)|0) + 8|0);
       $110 = $108;
       $111 = $110;
       HEAP32[$111>>2] = 0;
       $112 = (($110) + 4)|0;
       $113 = $112;
       HEAP32[$113>>2] = 0;
       $114 = ((($109) + ($n$06<<6)|0) + 36|0);
       HEAP32[$114>>2] = 1;
       $115 = ((($109) + ($n$06<<6)|0) + 40|0);
       HEAP32[$115>>2] = 1;
       $116 = ((($109) + ($n$06<<6)|0) + 56|0);
       HEAP32[$116>>2] = 0;
       $117 = ((($109) + ($n$06<<6)|0) + 52|0);
       HEAP32[$117>>2] = 0;
       $118 = ((($109) + ($n$06<<6)|0) + 48|0);
       HEAP32[$118>>2] = 0;
       $119 = $ptree;
       $120 = $119;
       $121 = HEAP32[$120>>2]|0;
       $122 = (($119) + 4)|0;
       $123 = $122;
       $124 = HEAP32[$123>>2]|0;
       $125 = (($109) + ($n$06<<6)|0);
       $126 = $125;
       $127 = $126;
       HEAP32[$127>>2] = $121;
       $128 = (($126) + 4)|0;
       $129 = $128;
       HEAP32[$129>>2] = $124;
       $130 = HEAP32[$15>>2]|0;
       $131 = ((($109) + ($n$06<<6)|0) + 24|0);
       HEAP32[$131>>2] = $130;
       $132 = HEAP32[$15>>2]|0;
       $133 = ((($109) + ($n$06<<6)|0) + 28|0);
       HEAP32[$133>>2] = $132;
       $134 = HEAP32[$pmove$08>>2]|0;
       $135 = ((($109) + ($n$06<<6)|0) + 32|0);
       HEAP32[$135>>2] = $134;
       $136 = ((($109) + ($n$06<<6)|0) + 16|0);
       $137 = $136;
       $138 = $137;
       HEAP32[$138>>2] = -1;
       $139 = (($137) + 4)|0;
       $140 = $139;
       HEAP32[$140>>2] = -1;
       $141 = $ptree;
       $142 = $141;
       $143 = HEAP32[$142>>2]|0;
       $144 = (($141) + 4)|0;
       $145 = $144;
       $146 = HEAP32[$145>>2]|0;
       $147 = HEAP32[$15>>2]|0;
       $148 = (_dfpn_detect_rep(225315904,$143,$146,$147,$16,$ip)|0);
       $cond1 = ($148|0)==(1);
       $149 = HEAP32[$0>>2]|0;
       if ($cond1) {
        $150 = ((($149) + ($n$06<<6)|0) + 56|0);
        HEAP32[$150>>2] = 1;
        $151 = ((($149) + ($n$06<<6)|0) + 48|0);
        HEAP32[$151>>2] = 1;
        $152 = HEAP32[$ip>>2]|0;
        $153 = ((225315904 + (($152*80)|0)|0) + 2097220|0);
        $154 = HEAP32[$153>>2]|0;
        $155 = ((($149) + ($n$06<<6)|0) + 40|0);
        HEAP32[$155>>2] = $154;
       } else {
        $156 = (($149) + ($n$06<<6)|0);
        $157 = HEAP32[$2>>2]|0;
        $158 = $157 ^ 1;
        _dfpn_hash_probe(225315904,$156,$ply,$158);
       }
       $159 = HEAP32[$2>>2]|0;
       $160 = ($159|0)==(0);
       $161 = HEAP32[$pmove$08>>2]|0;
       if ($160) {
        _unmake_move_b($ptree,$161,$ply);
       } else {
        _unmake_move_w($ptree,$161,$ply);
       }
       $162 = (($n$06) + 1)|0;
       $n$1 = $162;
      }
     } while(0);
     $163 = (($pmove$08) + 4|0);
     $164 = ($163|0)==($13|0);
     if ($164) {
      $n$3 = $n$1;
      break L1;
     } else {
      $n$06 = $n$1;$pmove$08 = $163;
     }
    }
    $54 = HEAP32[$pmove$08>>2]|0;
    $55 = HEAP32[$0>>2]|0;
    $56 = (($55) + 32|0);
    HEAP32[$56>>2] = $54;
    $57 = (($55) + 36|0);
    HEAP32[$57>>2] = 8388607;
    $58 = (($55) + 40|0);
    HEAP32[$58>>2] = 0;
    $59 = ((225315904 + (($ply*80)|0)|0) + 2097248|0);
    HEAP32[$59>>2] = 0;
    $60 = ((225315904 + (($ply*80)|0)|0) + 2097240|0);
    HEAP32[$60>>2] = 1;
    $61 = HEAP32[$2>>2]|0;
    $62 = ($61|0)==(0);
    $63 = HEAP32[$15>>2]|0;
    $64 = (($ptree) + 504|0);
    $65 = HEAP32[$64>>2]|0;
    if ($62) {
     $67 = (_dfpn_max_hand_w($63,$65)|0);
     $70 = $67;
    } else {
     $66 = (_dfpn_max_hand_b($63,$65)|0);
     $70 = $66;
    }
    $68 = HEAP32[$0>>2]|0;
    $69 = (($68) + 28|0);
    HEAP32[$69>>2] = $70;
    $71 = HEAP32[$2>>2]|0;
    $72 = ($71|0)==(0);
    $73 = HEAP32[$pmove$08>>2]|0;
    if ($72) {
     _unmake_move_b($ptree,$73,$ply);
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    } else {
     _unmake_move_w($ptree,$73,$ply);
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
  } else {
   if ($5) {
    $165 = (_w_gen_evasion($ptree,$amove)|0);
    $173 = $165;
   } else {
    $166 = (_b_gen_evasion($ptree,$amove)|0);
    $173 = $166;
   }
   $167 = HEAP32[$2>>2]|0;
   $168 = ($167|0)==(0);
   $169 = (($ptree) + 594|0);
   $170 = (($ptree) + 593|0);
   $$sink2$in = $168 ? $170 : $169;
   $$sink2 = HEAP8[$$sink2$in>>0]|0;
   $171 = $$sink2&255;
   $172 = ($amove|0)==($173|0);
   if ($172) {
    $n$3 = 0;
   } else {
    $174 = (33578928 + (($171*12)|0)|0);
    $175 = ((33578928 + (($171*12)|0)|0) + 4|0);
    $176 = ((33578928 + (($171*12)|0)|0) + 8|0);
    $177 = (($ptree) + 500|0);
    $178 = (($ply) + -3)|0;
    $179 = (($ptree) + 504|0);
    $180 = ((225315904 + (($ply*80)|0)|0) + 2097200|0);
    $182 = $167;$bb_intercept$sroa$0$018 = 0;$bb_intercept$sroa$1$017 = 0;$bb_intercept$sroa$2$016 = 0;$n$213 = 0;$pmove$119 = $amove;
    L8: while(1) {
     $181 = ($182|0)==(0);
     $183 = HEAP32[$pmove$119>>2]|0;
     if ($181) {
      _make_move_b($ptree,$183,$ply);
     } else {
      _make_move_w($ptree,$183,$ply);
     }
     $184 = HEAP32[$0>>2]|0;
     $185 = ((($184) + ($n$213<<6)|0) + 60|0);
     HEAP32[$185>>2] = 0;
     $186 = HEAP32[$pmove$119>>2]|0;
     $187 = $186 & 127;
     $188 = $186 & 491520;
     $189 = ($188|0)!=(262144);
     $190 = $186 & 7864320;
     $191 = ($190|0)==(0);
     $or$cond = $189 & $191;
     do {
      if ($or$cond) {
       $227 = $186 & 16256;
       $228 = ($227>>>0)<(10368);
       if ($228) {
        $229 = ((($184) + ($n$213<<6)|0) + 44|0);
        HEAP32[$229>>2] = 4;
        $230 = (34156304 + (($187*12)|0)|0);
        $231 = HEAP32[$230>>2]|0;
        $232 = $231 | $bb_intercept$sroa$0$018;
        $233 = ((34156304 + (($187*12)|0)|0) + 4|0);
        $234 = HEAP32[$233>>2]|0;
        $235 = $234 | $bb_intercept$sroa$1$017;
        $236 = ((34156304 + (($187*12)|0)|0) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = $237 | $bb_intercept$sroa$2$016;
        $bb_intercept$sroa$0$1 = $232;$bb_intercept$sroa$1$1 = $235;$bb_intercept$sroa$2$1 = $238;
        break;
       }
       $239 = (34156304 + (($187*12)|0)|0);
       $240 = HEAP32[$239>>2]|0;
       $241 = $240 & $bb_intercept$sroa$0$018;
       $242 = ((34156304 + (($187*12)|0)|0) + 4|0);
       $243 = HEAP32[$242>>2]|0;
       $244 = $243 & $bb_intercept$sroa$1$017;
       $245 = $244 | $241;
       $246 = ((34156304 + (($187*12)|0)|0) + 8|0);
       $247 = HEAP32[$246>>2]|0;
       $248 = $247 & $bb_intercept$sroa$2$016;
       $249 = $245 | $248;
       $250 = ($249|0)==(0);
       if ($250) {
        $251 = HEAP32[$174>>2]|0;
        $252 = $251 & $240;
        $253 = HEAP32[$175>>2]|0;
        $254 = $253 & $243;
        $255 = $254 | $252;
        $256 = HEAP32[$176>>2]|0;
        $257 = $256 & $247;
        $258 = $255 | $257;
        $259 = ($258|0)==(0);
        if ($259) {
         $262 = ((($184) + ($n$213<<6)|0) + 44|0);
         HEAP32[$262>>2] = 6;
         HEAP32[$185>>2] = 1;
         $bb_intercept$sroa$0$1 = $bb_intercept$sroa$0$018;$bb_intercept$sroa$1$1 = $bb_intercept$sroa$1$017;$bb_intercept$sroa$2$1 = $bb_intercept$sroa$2$016;
         break;
        }
       }
       $260 = ((($184) + ($n$213<<6)|0) + 44|0);
       HEAP32[$260>>2] = 5;
       $261 = (($187) + 100)|0;
       HEAP32[$185>>2] = $261;
       $bb_intercept$sroa$0$1 = $bb_intercept$sroa$0$018;$bb_intercept$sroa$1$1 = $bb_intercept$sroa$1$017;$bb_intercept$sroa$2$1 = $bb_intercept$sroa$2$016;
      } else {
       $or$cond3 = $189 | $191;
       $192 = ((($184) + ($n$213<<6)|0) + 44|0);
       do {
        if ($or$cond3) {
         if ($191) {
          HEAP32[$192>>2] = 4;
          break;
         } else {
          HEAP32[$192>>2] = 3;
          break;
         }
        } else {
         HEAP32[$192>>2] = 2;
        }
       } while(0);
       $193 = $180;
       $194 = $193;
       $195 = HEAP32[$194>>2]|0;
       $196 = (($193) + 4)|0;
       $197 = $196;
       $198 = HEAP32[$197>>2]|0;
       $199 = ($195|0)==(0);
       $200 = ($198|0)==(0);
       $201 = $199 & $200;
       if ($201) {
        $bb_intercept$sroa$0$1 = $bb_intercept$sroa$0$018;$bb_intercept$sroa$1$1 = $bb_intercept$sroa$1$017;$bb_intercept$sroa$2$1 = $bb_intercept$sroa$2$016;
       } else {
        $202 = HEAP32[$2>>2]|0;
        $203 = ($202|0)==(0);
        if ($203) {
         $206 = (_w_have_checks($ptree)|0);
         $207 = ($206|0)==(0);
         if ($207) {
          break L8;
         } else {
          $bb_intercept$sroa$0$1 = $bb_intercept$sroa$0$018;$bb_intercept$sroa$1$1 = $bb_intercept$sroa$1$017;$bb_intercept$sroa$2$1 = $bb_intercept$sroa$2$016;
          break;
         }
        } else {
         $204 = (_b_have_checks($ptree)|0);
         $205 = ($204|0)==(0);
         if ($205) {
          break L8;
         } else {
          $bb_intercept$sroa$0$1 = $bb_intercept$sroa$0$018;$bb_intercept$sroa$1$1 = $bb_intercept$sroa$1$017;$bb_intercept$sroa$2$1 = $bb_intercept$sroa$2$016;
          break;
         }
        }
       }
      }
     } while(0);
     $263 = HEAP32[$0>>2]|0;
     $264 = ((($263) + ($n$213<<6)|0) + 56|0);
     HEAP32[$264>>2] = 0;
     $265 = ((($263) + ($n$213<<6)|0) + 52|0);
     HEAP32[$265>>2] = 0;
     $266 = ((($263) + ($n$213<<6)|0) + 48|0);
     HEAP32[$266>>2] = 0;
     $267 = $ptree;
     $268 = $267;
     $269 = HEAP32[$268>>2]|0;
     $270 = (($267) + 4)|0;
     $271 = $270;
     $272 = HEAP32[$271>>2]|0;
     $273 = (($263) + ($n$213<<6)|0);
     $274 = $273;
     $275 = $274;
     HEAP32[$275>>2] = $269;
     $276 = (($274) + 4)|0;
     $277 = $276;
     HEAP32[$277>>2] = $272;
     $278 = HEAP32[$177>>2]|0;
     $279 = ((($263) + ($n$213<<6)|0) + 24|0);
     HEAP32[$279>>2] = $278;
     $280 = HEAP32[$177>>2]|0;
     $281 = ((($263) + ($n$213<<6)|0) + 28|0);
     HEAP32[$281>>2] = $280;
     $282 = ((($263) + ($n$213<<6)|0) + 8|0);
     $283 = $282;
     $284 = $283;
     HEAP32[$284>>2] = 0;
     $285 = (($283) + 4)|0;
     $286 = $285;
     HEAP32[$286>>2] = 0;
     $287 = ((($263) + ($n$213<<6)|0) + 36|0);
     HEAP32[$287>>2] = 1;
     $288 = ((($263) + ($n$213<<6)|0) + 40|0);
     HEAP32[$288>>2] = 1;
     $289 = HEAP32[$pmove$119>>2]|0;
     $290 = ((($263) + ($n$213<<6)|0) + 32|0);
     HEAP32[$290>>2] = $289;
     $291 = ((($263) + ($n$213<<6)|0) + 16|0);
     $292 = $291;
     $293 = $292;
     HEAP32[$293>>2] = -1;
     $294 = (($292) + 4)|0;
     $295 = $294;
     HEAP32[$295>>2] = -1;
     $296 = $ptree;
     $297 = $296;
     $298 = HEAP32[$297>>2]|0;
     $299 = (($296) + 4)|0;
     $300 = $299;
     $301 = HEAP32[$300>>2]|0;
     $302 = HEAP32[$177>>2]|0;
     $303 = (_dfpn_detect_rep(225315904,$298,$301,$302,$178,$ip)|0);
     $cond = ($303|0)==(1);
     $304 = HEAP32[$0>>2]|0;
     if ($cond) {
      $305 = ((($304) + ($n$213<<6)|0) + 56|0);
      HEAP32[$305>>2] = 1;
      $306 = ((($304) + ($n$213<<6)|0) + 52|0);
      HEAP32[$306>>2] = 1;
      $307 = HEAP32[$ip>>2]|0;
      $308 = ((225315904 + (($307*80)|0)|0) + 2097216|0);
      $309 = HEAP32[$308>>2]|0;
      $310 = ((($304) + ($n$213<<6)|0) + 36|0);
      HEAP32[$310>>2] = $309;
      $315 = $304;
     } else {
      $311 = (($304) + ($n$213<<6)|0);
      $312 = HEAP32[$2>>2]|0;
      $313 = $312 ^ 1;
      _dfpn_hash_probe(225315904,$311,$ply,$313);
      $$pre = HEAP32[$0>>2]|0;
      $315 = $$pre;
     }
     $314 = ((($315) + ($n$213<<6)|0) + 8|0);
     $316 = $314;
     $317 = $316;
     $318 = HEAP32[$317>>2]|0;
     $319 = (($316) + 4)|0;
     $320 = $319;
     $321 = HEAP32[$320>>2]|0;
     $322 = ($318|0)==(0);
     $323 = ($321|0)==(0);
     $324 = $322 & $323;
     do {
      if ($324) {
       $325 = ((($315) + ($n$213<<6)|0) + 56|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = ($326|0)==(0);
       if ($327) {
        $328 = HEAP32[$2>>2]|0;
        $329 = ($328|0)==(1);
        if ($329) {
         $334 = HEAP8[$170>>0]|0;
         $335 = $334&255;
         $336 = (_is_black_attacked($ptree,$335)|0);
         $337 = ($336|0)==(0);
         if (!($337)) {
          break;
         }
        } else {
         $330 = HEAP8[$169>>0]|0;
         $331 = $330&255;
         $332 = (_is_white_attacked($ptree,$331)|0);
         $333 = ($332|0)==(0);
         if (!($333)) {
          break;
         }
        }
        $338 = HEAP32[$2>>2]|0;
        $339 = ($338|0)==(1);
        if ($339) {
         $341 = (_is_b_mate_in_1ply($ptree)|0);
         $343 = $341;
        } else {
         $340 = (_is_w_mate_in_1ply($ptree)|0);
         $343 = $340;
        }
        $342 = ($343|0)==(0);
        if (!($342)) {
         $344 = $343 >>> 7;
         $345 = $344 & 127;
         $346 = HEAP32[$2>>2]|0;
         $347 = ($346|0)==(0);
         if ($347) {
          $348 = HEAP32[$177>>2]|0;
          $349 = HEAP32[$179>>2]|0;
          $350 = (($349) + ($348))|0;
          $356 = $350;
         } else {
          $356 = 0;
         }
         $351 = ($345>>>0)>(80);
         do {
          if ($351) {
           $352 = (($345) + -80)|0;
           $353 = (227423656 + ($352<<2)|0);
           $354 = HEAP32[$353>>2]|0;
           if ($347) {
            $357 = (($356) - ($354))|0;
            $min_hand_b$0 = $357;
            break;
           } else {
            $355 = (($354) + ($356))|0;
            $min_hand_b$0 = $355;
            break;
           }
          } else {
           $min_hand_b$0 = $356;
          }
         } while(0);
         $358 = HEAP32[$0>>2]|0;
         $359 = ((($358) + ($n$213<<6)|0) + 28|0);
         HEAP32[$359>>2] = $min_hand_b$0;
         $360 = ((($358) + ($n$213<<6)|0) + 8|0);
         $361 = $360;
         $362 = $361;
         HEAP32[$362>>2] = 1;
         $363 = (($361) + 4)|0;
         $364 = $363;
         HEAP32[$364>>2] = 0;
         $365 = ((($358) + ($n$213<<6)|0) + 36|0);
         HEAP32[$365>>2] = 0;
         $366 = ((($358) + ($n$213<<6)|0) + 40|0);
         HEAP32[$366>>2] = 8388607;
        }
       }
      }
     } while(0);
     $367 = HEAP32[$2>>2]|0;
     $368 = ($367|0)==(0);
     $369 = HEAP32[$pmove$119>>2]|0;
     if ($368) {
      _unmake_move_b($ptree,$369,$ply);
     } else {
      _unmake_move_w($ptree,$369,$ply);
     }
     $370 = (($n$213) + 1)|0;
     $371 = (($pmove$119) + 4|0);
     $372 = ($371|0)==($173|0);
     if ($372) {
      $n$3 = $370;
      break L1;
     }
     $$pre27 = HEAP32[$2>>2]|0;
     $182 = $$pre27;$bb_intercept$sroa$0$018 = $bb_intercept$sroa$0$1;$bb_intercept$sroa$1$017 = $bb_intercept$sroa$1$1;$bb_intercept$sroa$2$016 = $bb_intercept$sroa$2$1;$n$213 = $370;$pmove$119 = $371;
    }
    $208 = HEAP32[$pmove$119>>2]|0;
    $209 = HEAP32[$0>>2]|0;
    $210 = (($209) + 32|0);
    HEAP32[$210>>2] = $208;
    $211 = (($209) + 36|0);
    HEAP32[$211>>2] = 8388607;
    $212 = (($209) + 40|0);
    HEAP32[$212>>2] = 0;
    $213 = ((225315904 + (($ply*80)|0)|0) + 2097248|0);
    HEAP32[$213>>2] = 0;
    $214 = ((225315904 + (($ply*80)|0)|0) + 2097240|0);
    HEAP32[$214>>2] = 1;
    $215 = HEAP32[$2>>2]|0;
    $216 = ($215|0)==(0);
    $217 = HEAP32[$177>>2]|0;
    $218 = HEAP32[$179>>2]|0;
    if ($216) {
     $220 = (_dfpn_max_hand_w($217,$218)|0);
     $223 = $220;
    } else {
     $219 = (_dfpn_max_hand_b($217,$218)|0);
     $223 = $219;
    }
    $221 = HEAP32[$0>>2]|0;
    $222 = (($221) + 28|0);
    HEAP32[$222>>2] = $223;
    $224 = HEAP32[$2>>2]|0;
    $225 = ($224|0)==(0);
    $226 = HEAP32[$pmove$119>>2]|0;
    if ($225) {
     _unmake_move_b($ptree,$226,$ply);
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    } else {
     _unmake_move_w($ptree,$226,$ply);
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $373 = ((225315904 + (($ply*80)|0)|0) + 2097240|0);
 HEAP32[$373>>2] = $n$3;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sum_phi_c($pnode) {
 $pnode = $pnode|0;
 var $$0 = 0, $$value_chuai$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aphi = 0, $have_inf_1$013 = 0, $have_inf_1$12 = 0, $i$012 = 0, $i$15 = 0;
 var $i$15$in = 0, $j$0 = 0, $ntype$014 = 0, $ntype$1 = 0, $or$cond = 0, $sum$010 = 0, $sum$1 = 0, $sum$2$lcssa = 0, $sum$2$lcssa27 = 0, $sum$24 = 0, $value_chuai$0$lcssa232526 = 0, $value_chuai$0$sum$2 = 0, $value_chuai$011 = 0, $value_chuai$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2064|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $aphi = sp;
 $0 = (($pnode) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = HEAP32[$pnode>>2]|0;
  $have_inf_1$013 = 0;$i$012 = 0;$ntype$014 = 0;$sum$010 = 0;$value_chuai$011 = 0;
  L3: while(1) {
   $4 = ((($3) + ($i$012<<6)|0) + 60|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($3) + ($i$012<<6)|0) + 36|0);
   $7 = HEAP32[$6>>2]|0;
   do {
    if ((($7|0) == 8388607)) {
     $$0 = 8388607;
     label = 21;
     break L3;
    } else if ((($7|0) == 8388606)) {
     $have_inf_1$12 = 1;$ntype$1 = $ntype$014;$sum$1 = $sum$010;$value_chuai$1 = $value_chuai$011;
    } else {
     $8 = ($have_inf_1$013|0)!=(0);
     $9 = ($7|0)==(0);
     $or$cond = $8 | $9;
     if ($or$cond) {
      $have_inf_1$12 = $have_inf_1$013;$ntype$1 = $ntype$014;$sum$1 = $sum$010;$value_chuai$1 = $value_chuai$011;
     } else {
      if ((($5|0) == 1)) {
       $10 = ($value_chuai$011>>>0)<($7>>>0);
       $$value_chuai$0 = $10 ? $7 : $value_chuai$011;
       $have_inf_1$12 = 0;$ntype$1 = $ntype$014;$sum$1 = $sum$010;$value_chuai$1 = $$value_chuai$0;
       break;
      } else if (!((($5|0) == 0))) {
       label = 7;
      }
      if ((label|0) == 7) {
       label = 0;
       $11 = ($7|0)==(1);
       if ($11) {
        $13 = ((($aphi) + ($ntype$014<<3)|0) + 4|0);
        HEAP32[$13>>2] = $5;
        $j$0 = 0;
        while(1) {
         $14 = ((($aphi) + ($j$0<<3)|0) + 4|0);
         $15 = HEAP32[$14>>2]|0;
         $16 = ($15|0)==($5|0);
         $17 = (($j$0) + 1)|0;
         if ($16) {
          break;
         } else {
          $j$0 = $17;
         }
        }
        $18 = ($j$0|0)==($ntype$014|0);
        $19 = (($aphi) + ($j$0<<3)|0);
        if ($18) {
         HEAP32[$19>>2] = 1;
         $20 = (($ntype$014) + 1)|0;
         $have_inf_1$12 = 0;$ntype$1 = $20;$sum$1 = $sum$010;$value_chuai$1 = $value_chuai$011;
         break;
        }
        $21 = HEAP32[$19>>2]|0;
        $22 = ($21|0)==(0);
        if (!($22)) {
         $have_inf_1$12 = 0;$ntype$1 = $ntype$014;$sum$1 = $sum$010;$value_chuai$1 = $value_chuai$011;
         break;
        }
        HEAP32[$19>>2] = 1;
        $have_inf_1$12 = 0;$ntype$1 = $ntype$014;$sum$1 = $sum$010;$value_chuai$1 = $value_chuai$011;
        break;
       }
      }
      $12 = (($7) + ($sum$010))|0;
      $have_inf_1$12 = 0;$ntype$1 = $ntype$014;$sum$1 = $12;$value_chuai$1 = $value_chuai$011;
     }
    }
   } while(0);
   $23 = (($i$012) + 1)|0;
   $24 = ($23|0)<($1|0);
   if ($24) {
    $have_inf_1$013 = $have_inf_1$12;$i$012 = $23;$ntype$014 = $ntype$1;$sum$010 = $sum$1;$value_chuai$011 = $value_chuai$1;
   } else {
    break;
   }
  }
  if ((label|0) == 21) {
   STACKTOP = sp;return ($$0|0);
  }
  $25 = ($have_inf_1$12|0)==(0);
  if (!($25)) {
   $$0 = 8388606;
   STACKTOP = sp;return ($$0|0);
  }
  $26 = ($ntype$1|0)>(0);
  if ($26) {
   $i$15$in = $ntype$1;$sum$24 = $sum$1;
   while(1) {
    $i$15 = (($i$15$in) + -1)|0;
    $27 = (($aphi) + ($i$15<<3)|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($sum$24))|0;
    $30 = ($i$15|0)>(0);
    if ($30) {
     $i$15$in = $i$15;$sum$24 = $29;
    } else {
     $sum$2$lcssa = $29;
     break;
    }
   }
  } else {
   $sum$2$lcssa = $sum$1;
  }
  $31 = ($sum$2$lcssa>>>0)>(8388605);
  if ($31) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $sum$2$lcssa27 = $sum$2$lcssa;$value_chuai$0$lcssa232526 = $value_chuai$1;
  }
 } else {
  $sum$2$lcssa27 = 0;$value_chuai$0$lcssa232526 = 0;
 }
 $32 = ($sum$2$lcssa27|0)==(0);
 $value_chuai$0$sum$2 = $32 ? $value_chuai$0$lcssa232526 : $sum$2$lcssa27;
 $$0 = $value_chuai$0$sum$2;
 STACKTOP = sp;return ($$0|0);
}
function _dfpn_ini_hash() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $u$01 = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[225315896>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  (_memory_free($0)|0);
 }
 $2 = HEAP32[220526672>>2]|0;
 $3 = 1 << $2;
 $4 = (($3) + 33)|0;
 $5 = ($4*24)|0;
 $6 = (_memory_alloc($5)|0);
 HEAP32[225315896>>2] = $6;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($3) + -1)|0;
 HEAP32[227423624>>2] = $8;
 HEAP32[227423520>>2] = 0;
 $u$01 = 0;
 while(1) {
  $9 = ((($6) + (($u$01*24)|0)|0) + 16|0);
  $10 = $9;
  $11 = $10;
  HEAP32[$11>>2] = 0;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = 0;
  $14 = (($u$01) + 1)|0;
  $15 = ($14>>>0)<($4>>>0);
  if ($15) {
   $u$01 = $14;
  } else {
   break;
  }
 }
 $16 = $3 >>> 10;
 $17 = $5 >>> 20;
 HEAP32[$vararg_buffer>>2] = $16;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $17;
 _out(227423720,$vararg_buffer);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _dfpn_hash_sat() {
 var $$op = 0, $$used$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $n$0 = 0;
 var $u$02 = 0, $used$0$lcssa = 0, $used$01 = 0, $used$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[227423624>>2]|0;
 $1 = ($0>>>0)>(65535);
 $2 = (($0) + 1)|0;
 $n$0 = $1 ? 65536 : $2;
 $3 = ($n$0|0)==(0);
 if ($3) {
  $used$0$lcssa = 0;
  $32 = ($used$0$lcssa*100)|0;
  $33 = (+($32>>>0));
  $34 = (+($n$0>>>0));
  $35 = $33 / $34;
  STACKTOP = sp;return (+$35);
 }
 $4 = HEAP32[225315896>>2]|0;
 $5 = HEAP32[227423520>>2]|0;
 $6 = ($0>>>0)<(65535);
 $$op = (($0) + 1)|0;
 $7 = $6 ? $$op : 65536;
 $u$02 = 0;$used$01 = 0;
 while(1) {
  $8 = ((($4) + (($u$02*24)|0)|0) + 16|0);
  $9 = $8;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) + 4)|0;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 8191;
  $16 = ($11|0)==(0);
  $17 = ($15|0)==(0);
  $18 = $16 & $17;
  if ($18) {
   $used$1 = $used$01;
  } else {
   $19 = ((($4) + (($u$02*24)|0)|0) + 8|0);
   $20 = $19;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = (($20) + 4)|0;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   $26 = (_bitshift64Lshr(($22|0),($25|0),46)|0);
   $27 = tempRet0;
   $28 = $26 & 255;
   $29 = ($28|0)==($5|0);
   $30 = $29&1;
   $$used$0 = (($30) + ($used$01))|0;
   $used$1 = $$used$0;
  }
  $31 = (($u$02) + 1)|0;
  $exitcond = ($31|0)==($7|0);
  if ($exitcond) {
   $used$0$lcssa = $used$1;
   break;
  } else {
   $u$02 = $31;$used$01 = $used$1;
  }
 }
 $32 = ($used$0$lcssa*100)|0;
 $33 = (+($32>>>0));
 $34 = (+($n$0>>>0));
 $35 = $33 / $34;
 STACKTOP = sp;return (+$35);
}
function _dfpn_hash_probe($pdfpn_tree,$pchild,$ply,$turn) {
 $pdfpn_tree = $pdfpn_tree|0;
 $pchild = $pchild|0;
 $ply = $ply|0;
 $turn = $turn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $not$ = 0, $not$8 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond52 = 0, $or$cond54 = 0, $or$cond56 = 0, $or$cond58 = 0, $or$cond60 = 0, $or$cond62 = 0, $or$cond64 = 0, $or$cond66 = 0, $or$cond68 = 0, $or$cond70 = 0, $or$cond72 = 0, $or$cond74 = 0;
 var $relation$0 = 0, $relation$0$ = 0, $u$026 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pdfpn_tree) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $pchild;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $not$ = ($1|0)!=($turn|0);
 $8 = $not$ << 31 >> 31;
 $9 = ($8|0)<(0);
 $10 = $9 << 31 >> 31;
 $11 = $8 ^ $4;
 $12 = $10 ^ $7;
 $13 = (($pchild) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[227423624>>2]|0;
 $16 = $11 & $15;
 $17 = (($16) + 32)|0;
 $18 = ($16>>>0)<(4294967264);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = HEAP32[225315896>>2]|0;
 $20 = $14 & 31;
 $21 = $14 & 224;
 $22 = $14 & 1792;
 $23 = $14 & 14336;
 $24 = $14 & 114688;
 $25 = $14 & 393216;
 $26 = $14 & 1572864;
 $not$8 = ($turn|0)!=(0);
 $27 = $not$8&1;
 $u$026 = $16;
 L4: while(1) {
  $28 = (($19) + (($u$026*24)|0)|0);
  $29 = $28;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($29) + 4)|0;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($19) + (($u$026*24)|0)|0) + 8|0);
  $36 = $35;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($36) + 4)|0;
  $40 = $39;
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($19) + (($u$026*24)|0)|0) + 16|0);
  $43 = $42;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($43) + 4)|0;
  $47 = $46;
  $48 = HEAP32[$47>>2]|0;
  $49 = $31 & 2097151;
  $50 = $38 & 8388607;
  $51 = (_bitshift64Lshr(($38|0),($41|0),23)|0);
  $52 = tempRet0;
  $53 = $51 & 8388607;
  $54 = (_bitshift64Lshr(($38|0),($41|0),63)|0);
  $55 = tempRet0;
  $56 = (_bitshift64Lshr(($38|0),($41|0),62)|0);
  $57 = tempRet0;
  $58 = $56 & 1;
  $59 = $48 & 8191;
  $60 = ($45|0)==(0);
  $61 = ($59|0)==(0);
  $62 = $60 & $61;
  if ($62) {
   label = 16;
   break;
  }
  $63 = (_bitshift64Lshr(($38|0),($41|0),54)|0);
  $64 = tempRet0;
  $65 = $63 & 255;
  $66 = (($65) + ($16))|0;
  $67 = ($66>>>0)<($u$026>>>0);
  if ($67) {
   label = 16;
   break;
  }
  $68 = ($66>>>0)>($u$026>>>0);
  do {
   if (!($68)) {
    $69 = $31 ^ $11;
    $70 = $34 ^ $12;
    $71 = ($70>>>0)>(0);
    $72 = ($70|0)==(0);
    $73 = ($69>>>0)>(2097151);
    $74 = $72 & $73;
    $75 = $71 | $74;
    if (!($75)) {
     $76 = ($14|0)==($49|0);
     if ($76) {
      label = 8;
      break L4;
     }
     $87 = $31 & 31;
     $88 = ($20>>>0)<($87>>>0);
     $89 = $31 & 224;
     $90 = ($21>>>0)<($89>>>0);
     $or$cond52 = $88 | $90;
     $91 = $31 & 1792;
     $92 = ($22>>>0)<($91>>>0);
     $or$cond54 = $or$cond52 | $92;
     $93 = $31 & 14336;
     $94 = ($23>>>0)<($93>>>0);
     $or$cond56 = $or$cond54 | $94;
     $95 = $31 & 114688;
     $96 = ($24>>>0)<($95>>>0);
     $or$cond58 = $or$cond56 | $96;
     $97 = $31 & 393216;
     $98 = ($25>>>0)<($97>>>0);
     $or$cond60 = $or$cond58 | $98;
     $99 = $31 & 1572864;
     $100 = ($26>>>0)<($99>>>0);
     $or$cond62 = $or$cond60 | $100;
     if ($or$cond62) {
      $101 = ($87>>>0)<($20>>>0);
      $102 = $31 & 224;
      $103 = ($102>>>0)<($21>>>0);
      $or$cond64 = $101 | $103;
      $104 = $31 & 1792;
      $105 = ($104>>>0)<($22>>>0);
      $or$cond66 = $or$cond64 | $105;
      $106 = $31 & 14336;
      $107 = ($106>>>0)<($23>>>0);
      $or$cond68 = $or$cond66 | $107;
      $108 = $31 & 114688;
      $109 = ($108>>>0)<($24>>>0);
      $or$cond70 = $or$cond68 | $109;
      $110 = $31 & 393216;
      $111 = ($110>>>0)<($25>>>0);
      $or$cond72 = $or$cond70 | $111;
      $112 = $31 & 1572864;
      $113 = ($112>>>0)<($26>>>0);
      $or$cond74 = $or$cond72 | $113;
      if ($or$cond74) {
       break;
      } else {
       $relation$0 = 1;
      }
     } else {
      $relation$0 = 0;
     }
     $114 = ($relation$0|0)==($27|0);
     $115 = ($53|0)==(0);
     $or$cond = $114 & $115;
     $116 = ($50|0)==(8388607);
     $or$cond1 = $or$cond & $116;
     if ($or$cond1) {
      label = 12;
      break L4;
     }
     $relation$0$ = $relation$0 ^ $27;
     $127 = ($relation$0$|0)==(1);
     $128 = ($53|0)==(8388607);
     $or$cond2 = $127 & $128;
     $129 = ($50|0)==(0);
     $or$cond3 = $or$cond2 & $129;
     if ($or$cond3) {
      label = 14;
      break L4;
     }
    }
   }
  } while(0);
  $140 = (($u$026) + 1)|0;
  $141 = ($140>>>0)<($17>>>0);
  if ($141) {
   $u$026 = $140;
  } else {
   label = 16;
   break;
  }
 }
 if ((label|0) == 8) {
  $77 = (($pchild) + 36|0);
  HEAP32[$77>>2] = $53;
  $78 = (($pchild) + 40|0);
  HEAP32[$78>>2] = $50;
  $79 = (($pchild) + 8|0);
  $80 = $79;
  $81 = $80;
  HEAP32[$81>>2] = $45;
  $82 = (($80) + 4)|0;
  $83 = $82;
  HEAP32[$83>>2] = $59;
  $84 = (($pchild) + 28|0);
  HEAP32[$84>>2] = $14;
  $85 = (($pchild) + 52|0);
  HEAP32[$85>>2] = $54;
  $86 = (($pchild) + 48|0);
  HEAP32[$86>>2] = $58;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 12) {
  $117 = (($pchild) + 36|0);
  HEAP32[$117>>2] = 0;
  $118 = (($pchild) + 40|0);
  HEAP32[$118>>2] = 8388607;
  $119 = (($pchild) + 8|0);
  $120 = $119;
  $121 = $120;
  HEAP32[$121>>2] = $45;
  $122 = (($120) + 4)|0;
  $123 = $122;
  HEAP32[$123>>2] = $59;
  $124 = (($pchild) + 28|0);
  HEAP32[$124>>2] = $49;
  $125 = (($pchild) + 52|0);
  HEAP32[$125>>2] = $54;
  $126 = (($pchild) + 48|0);
  HEAP32[$126>>2] = $58;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 14) {
  $130 = (($pchild) + 36|0);
  HEAP32[$130>>2] = 8388607;
  $131 = (($pchild) + 40|0);
  HEAP32[$131>>2] = 0;
  $132 = (($pchild) + 8|0);
  $133 = $132;
  $134 = $133;
  HEAP32[$134>>2] = $45;
  $135 = (($133) + 4)|0;
  $136 = $135;
  HEAP32[$136>>2] = $59;
  $137 = (($pchild) + 28|0);
  HEAP32[$137>>2] = $49;
  $138 = (($pchild) + 52|0);
  HEAP32[$138>>2] = $54;
  $139 = (($pchild) + 48|0);
  HEAP32[$139>>2] = $58;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
}
function _dfpn_hash_store($ptree,$pdfpn_tree,$ply) {
 $ptree = $ptree|0;
 $pdfpn_tree = $pdfpn_tree|0;
 $ply = $ply|0;
 var $$$i$i = 0, $$$i1$i = 0, $$in = 0, $$in47 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i11 = 0;
 var $exitcond10$i = 0, $exitcond15$i = 0, $h0$0$i = 0, $h0$0$i10 = 0, $hand$0$lcssa$i = 0, $hand$0$ph$i = 0, $hand$010$i = 0, $hand$06$i = 0, $hand$1$1$i$i = 0, $hand$1$1$i2$i = 0, $hand$1$2$i$i = 0, $hand$1$2$i3$i = 0, $hand$1$3$i$i = 0, $hand$1$3$i4$i = 0, $hand$1$4$i$i = 0, $hand$1$4$i5$i = 0, $hand$1$5$i$i = 0, $hand$1$5$i6$i = 0, $hand$1$i = 0, $hand$1$ph$i = 0;
 var $hand$18$i = 0, $hand$2$i = 0, $hand$23$i = 0, $hand$3$i = 0, $i$011$i = 0, $i$040 = 0, $i$07$i = 0, $i$14$i = 0, $i$19$i = 0, $is_delta_loop$042 = 0, $is_delta_loop$2 = 0, $is_delta_loop$26263 = 0, $is_delta_loop$26264 = 0, $is_phi_loop$041 = 0, $is_phi_loop$1 = 0, $is_phi_loop$3 = 0, $is_phi_loop$36165 = 0, $is_phi_loop$36166 = 0, $min_hand_b$0 = 0, $min_hand_b$1 = 0;
 var $min_hand_b$15969 = 0, $min_hand_b$15970 = 0, $min_u$020 = 0, $min_u$2 = 0, $min_u$3 = 0, $min_u$4$lcssa = 0, $min_u$414 = 0, $min_u$517 = 0, $min_u$6 = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond6 = 0, $or$cond72 = 0, $or$cond74 = 0, $or$cond76 = 0, $or$cond78 = 0, $or$cond80 = 0, $or$cond82 = 0;
 var $or$cond84 = 0, $or$cond86 = 0, $or$cond88 = 0, $or$cond90 = 0, $or$cond92 = 0, $or$cond94 = 0, $turn_win$0 = 0, $u$033 = 0, $u$1$min_u$0 = 0, $u$121 = 0, $u1$0 = 0, $u1$0$in$lcssa = 0, $u1$0$in27 = 0, $u1$0$in27$phi = 0, $u1$026 = 0, $u1$028 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($pdfpn_tree) + (($ply*80)|0)|0) + 2097176|0);
 $1 = (($pdfpn_tree) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($pdfpn_tree) + (($ply*80)|0)|0) + 2097244|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $ptree;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $not$ = ($2|0)!=($4|0);
 $11 = $not$ << 31 >> 31;
 $12 = ($11|0)<(0);
 $13 = $12 << 31 >> 31;
 $14 = $11 ^ $7;
 $15 = $13 ^ $10;
 $16 = $14 & -2097152;
 $17 = HEAP32[227423624>>2]|0;
 $18 = $14 & $17;
 $19 = ((($pdfpn_tree) + (($ply*80)|0)|0) + 2097216|0);
 $20 = HEAP32[$19>>2]|0;
 L1: do {
  if ((($20|0) == 8388607)) {
   $183 = ((($pdfpn_tree) + (($ply*80)|0)|0) + 2097220|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = ($184|0)==(0);
   if ($185) {
    $186 = (($ptree) + 500|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = (($ptree) + 504|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = (($189) + ($187))|0;
    $191 = ((($pdfpn_tree) + (($ply*80)|0)|0) + 2097240|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = ($4|0)==(0);
    if ($193) {
     $294 = $187 & 31;
     $295 = ($294|0)==(0);
     $296 = $190 & 31;
     $$$i1$i = $295 ? 0 : $296;
     $297 = $187 & 224;
     $298 = ($297|0)==(0);
     if ($298) {
      $hand$1$1$i2$i = $$$i1$i;
     } else {
      $299 = $190 & 224;
      $300 = $$$i1$i | $299;
      $hand$1$1$i2$i = $300;
     }
     $301 = $187 & 1792;
     $302 = ($301|0)==(0);
     if ($302) {
      $hand$1$2$i3$i = $hand$1$1$i2$i;
     } else {
      $303 = $190 & 1792;
      $304 = (($hand$1$1$i2$i) + ($303))|0;
      $hand$1$2$i3$i = $304;
     }
     $305 = $187 & 14336;
     $306 = ($305|0)==(0);
     if ($306) {
      $hand$1$3$i4$i = $hand$1$2$i3$i;
     } else {
      $307 = $190 & 14336;
      $308 = (($hand$1$2$i3$i) + ($307))|0;
      $hand$1$3$i4$i = $308;
     }
     $309 = $187 & 114688;
     $310 = ($309|0)==(0);
     if ($310) {
      $hand$1$4$i5$i = $hand$1$3$i4$i;
     } else {
      $311 = $190 & 114688;
      $312 = (($hand$1$3$i4$i) + ($311))|0;
      $hand$1$4$i5$i = $312;
     }
     $313 = $187 & 393216;
     $314 = ($313|0)==(0);
     if ($314) {
      $hand$1$5$i6$i = $hand$1$4$i5$i;
     } else {
      $315 = $190 & 393216;
      $316 = (($hand$1$4$i5$i) + ($315))|0;
      $hand$1$5$i6$i = $316;
     }
     $317 = $187 & 1572864;
     $318 = ($317|0)==(0);
     if ($318) {
      $hand$1$ph$i = $hand$1$5$i6$i;
     } else {
      $319 = $190 & 1572864;
      $320 = (($hand$1$5$i6$i) + ($319))|0;
      $hand$1$ph$i = $320;
     }
     $321 = ($192|0)>(0);
     if ($321) {
      $322 = HEAP32[$0>>2]|0;
      $hand$18$i = $hand$1$ph$i;$i$19$i = 0;
      while(1) {
       $323 = ((($322) + ($i$19$i<<6)|0) + 28|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = ((($322) + ($i$19$i<<6)|0) + 32|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = $326 >>> 7;
       $328 = $327 & 127;
       $329 = $326 >>> 19;
       $330 = $329 & 15;
       $331 = ($328>>>0)>(80);
       if ($331) {
        $332 = (($328) + -80)|0;
        $333 = (227423656 + ($332<<2)|0);
        $334 = HEAP32[$333>>2]|0;
        $335 = (($334) + ($324))|0;
        $h0$0$i10 = $335;
       } else {
        $336 = (227423808 + ($330<<2)|0);
        $337 = HEAP32[$336>>2]|0;
        $338 = $337 & $324;
        $339 = ($338|0)==(0);
        if ($339) {
         $h0$0$i10 = $324;
        } else {
         $340 = (227423656 + ($330<<2)|0);
         $341 = HEAP32[$340>>2]|0;
         $342 = (($324) - ($341))|0;
         $h0$0$i10 = $342;
        }
       }
       $343 = $hand$18$i & 31;
       $344 = $h0$0$i10 & 31;
       $345 = ($343>>>0)<($344>>>0);
       $346 = $345 ? $343 : $344;
       $347 = $hand$18$i & 224;
       $348 = $h0$0$i10 & 224;
       $349 = ($347>>>0)<($348>>>0);
       $350 = $349 ? $347 : $348;
       $351 = $350 | $346;
       $352 = $hand$18$i & 1792;
       $353 = $h0$0$i10 & 1792;
       $354 = ($352>>>0)<($353>>>0);
       $355 = $354 ? $352 : $353;
       $356 = $351 | $355;
       $357 = $hand$18$i & 14336;
       $358 = $h0$0$i10 & 14336;
       $359 = ($357>>>0)<($358>>>0);
       $360 = $359 ? $357 : $358;
       $361 = $356 | $360;
       $362 = $hand$18$i & 114688;
       $363 = $h0$0$i10 & 114688;
       $364 = ($362>>>0)<($363>>>0);
       $365 = $364 ? $362 : $363;
       $366 = $361 | $365;
       $367 = $hand$18$i & 393216;
       $368 = $h0$0$i10 & 393216;
       $369 = ($367>>>0)<($368>>>0);
       $370 = $369 ? $367 : $368;
       $371 = $366 | $370;
       $372 = $hand$18$i & 1572864;
       $373 = $h0$0$i10 & 1572864;
       $374 = ($372>>>0)<($373>>>0);
       $375 = $374 ? $372 : $373;
       $376 = (($371) + ($375))|0;
       $377 = (($i$19$i) + 1)|0;
       $exitcond$i11 = ($377|0)==($192|0);
       if ($exitcond$i11) {
        $hand$2$i = $376;
        break;
       } else {
        $hand$18$i = $376;$i$19$i = $377;
       }
      }
     } else {
      $hand$2$i = $hand$1$ph$i;
     }
    } else {
     $194 = $189 & 31;
     $195 = ($194|0)==(0);
     $196 = $190 & -32;
     $$$i$i = $195 ? $190 : $196;
     $197 = $189 & 224;
     $198 = ($197|0)==(0);
     if ($198) {
      $hand$1$1$i$i = $$$i$i;
     } else {
      $199 = $190 & 224;
      $200 = (($$$i$i) - ($199))|0;
      $hand$1$1$i$i = $200;
     }
     $201 = $189 & 1792;
     $202 = ($201|0)==(0);
     if ($202) {
      $hand$1$2$i$i = $hand$1$1$i$i;
     } else {
      $203 = $190 & 1792;
      $204 = (($hand$1$1$i$i) - ($203))|0;
      $hand$1$2$i$i = $204;
     }
     $205 = $189 & 14336;
     $206 = ($205|0)==(0);
     if ($206) {
      $hand$1$3$i$i = $hand$1$2$i$i;
     } else {
      $207 = $190 & 14336;
      $208 = (($hand$1$2$i$i) - ($207))|0;
      $hand$1$3$i$i = $208;
     }
     $209 = $189 & 114688;
     $210 = ($209|0)==(0);
     if ($210) {
      $hand$1$4$i$i = $hand$1$3$i$i;
     } else {
      $211 = $190 & 114688;
      $212 = (($hand$1$3$i$i) - ($211))|0;
      $hand$1$4$i$i = $212;
     }
     $213 = $189 & 393216;
     $214 = ($213|0)==(0);
     if ($214) {
      $hand$1$5$i$i = $hand$1$4$i$i;
     } else {
      $215 = $190 & 393216;
      $216 = (($hand$1$4$i$i) - ($215))|0;
      $hand$1$5$i$i = $216;
     }
     $217 = $189 & 1572864;
     $218 = ($217|0)==(0);
     if ($218) {
      $hand$0$ph$i = $hand$1$5$i$i;
     } else {
      $219 = $190 & 1572864;
      $220 = (($hand$1$5$i$i) - ($219))|0;
      $hand$0$ph$i = $220;
     }
     $221 = ($192|0)>(0);
     if ($221) {
      $222 = HEAP32[$0>>2]|0;
      $hand$010$i = $hand$0$ph$i;$i$011$i = 0;
      while(1) {
       $223 = ((($222) + ($i$011$i<<6)|0) + 28|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = $hand$010$i & 31;
       $226 = $224 & 31;
       $227 = ($226>>>0)<($225>>>0);
       $228 = $227 ? $225 : $226;
       $229 = $hand$010$i & 224;
       $230 = $224 & 224;
       $231 = ($230>>>0)<($229>>>0);
       $232 = $231 ? $229 : $230;
       $233 = $232 | $228;
       $234 = $hand$010$i & 1792;
       $235 = $224 & 1792;
       $236 = ($235>>>0)<($234>>>0);
       $237 = $236 ? $234 : $235;
       $238 = $233 | $237;
       $239 = $hand$010$i & 14336;
       $240 = $224 & 14336;
       $241 = ($240>>>0)<($239>>>0);
       $242 = $241 ? $239 : $240;
       $243 = $238 | $242;
       $244 = $hand$010$i & 114688;
       $245 = $224 & 114688;
       $246 = ($245>>>0)<($244>>>0);
       $247 = $246 ? $244 : $245;
       $248 = $243 | $247;
       $249 = $hand$010$i & 393216;
       $250 = $224 & 393216;
       $251 = ($250>>>0)<($249>>>0);
       $252 = $251 ? $249 : $250;
       $253 = $248 | $252;
       $254 = $hand$010$i & 1572864;
       $255 = $224 & 1572864;
       $256 = ($255>>>0)<($254>>>0);
       $257 = $256 ? $254 : $255;
       $258 = (($253) + ($257))|0;
       $259 = (($i$011$i) + 1)|0;
       $exitcond15$i = ($259|0)==($192|0);
       if ($exitcond15$i) {
        $hand$0$lcssa$i = $258;
        break;
       } else {
        $hand$010$i = $258;$i$011$i = $259;
       }
      }
     } else {
      $hand$0$lcssa$i = $hand$0$ph$i;
     }
     $260 = $190 & 31;
     $261 = $hand$0$lcssa$i & 31;
     $262 = ($260>>>0)<($261>>>0);
     $263 = $262 ? $260 : $261;
     $264 = $190 & 224;
     $265 = $hand$0$lcssa$i & 224;
     $266 = ($264>>>0)<($265>>>0);
     $267 = $266 ? $264 : $265;
     $268 = $267 | $263;
     $269 = $190 & 1792;
     $270 = $hand$0$lcssa$i & 1792;
     $271 = ($269>>>0)<($270>>>0);
     $272 = $271 ? $269 : $270;
     $273 = $268 | $272;
     $274 = $190 & 14336;
     $275 = $hand$0$lcssa$i & 14336;
     $276 = ($274>>>0)<($275>>>0);
     $277 = $276 ? $274 : $275;
     $278 = $273 | $277;
     $279 = $190 & 114688;
     $280 = $hand$0$lcssa$i & 114688;
     $281 = ($279>>>0)<($280>>>0);
     $282 = $281 ? $279 : $280;
     $283 = $278 | $282;
     $284 = $190 & 393216;
     $285 = $hand$0$lcssa$i & 393216;
     $286 = ($284>>>0)<($285>>>0);
     $287 = $286 ? $284 : $285;
     $288 = $283 | $287;
     $289 = $190 & 1572864;
     $290 = $hand$0$lcssa$i & 1572864;
     $291 = ($289>>>0)<($290>>>0);
     $292 = $291 ? $289 : $290;
     $293 = (($288) + ($292))|0;
     $hand$2$i = $293;
    }
    $378 = $4 ^ 1;
    $min_hand_b$0 = $hand$2$i;$turn_win$0 = $378;
    label = 77;
   } else {
    label = 72;
   }
  } else if ((($20|0) == 0)) {
   $21 = ((($pdfpn_tree) + (($ply*80)|0)|0) + 2097220|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(8388607);
   if ($23) {
    $24 = (($ptree) + 500|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($ptree) + 504|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($pdfpn_tree) + (($ply*80)|0)|0) + 2097240|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($4|0)==(0);
    if (!($30)) {
     $41 = (($27) + ($25))|0;
     $42 = ($29|0)>(0);
     if (!($42)) {
      $min_hand_b$0 = $41;$turn_win$0 = $4;
      label = 77;
      break;
     }
     $43 = HEAP32[$0>>2]|0;
     $44 = $41 & 31;
     $45 = $41 & 224;
     $46 = $41 & 1792;
     $47 = $41 & 14336;
     $48 = $41 & 114688;
     $49 = $41 & 393216;
     $50 = $41 & 1572864;
     $hand$06$i = $41;$i$07$i = 0;
     while(1) {
      $51 = ((($43) + ($i$07$i<<6)|0) + 36|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = ($52|0)==(8388607);
      do {
       if ($53) {
        $54 = ((($43) + ($i$07$i<<6)|0) + 40|0);
        $55 = HEAP32[$54>>2]|0;
        $56 = ($55|0)==(0);
        if ($56) {
         $57 = ((($43) + ($i$07$i<<6)|0) + 28|0);
         $58 = HEAP32[$57>>2]|0;
         $59 = $58 & 31;
         $60 = ($44>>>0)<($59>>>0);
         $61 = $60 ? $44 : $59;
         $62 = $58 & 224;
         $63 = ($45>>>0)<($62>>>0);
         $64 = $63 ? $45 : $62;
         $65 = $64 | $61;
         $66 = $58 & 1792;
         $67 = ($46>>>0)<($66>>>0);
         $68 = $67 ? $46 : $66;
         $69 = $65 | $68;
         $70 = $58 & 14336;
         $71 = ($47>>>0)<($70>>>0);
         $72 = $71 ? $47 : $70;
         $73 = $69 | $72;
         $74 = $58 & 114688;
         $75 = ($48>>>0)<($74>>>0);
         $76 = $75 ? $48 : $74;
         $77 = $73 | $76;
         $78 = $58 & 393216;
         $79 = ($49>>>0)<($78>>>0);
         $80 = $79 ? $49 : $78;
         $81 = $77 | $80;
         $82 = $58 & 1572864;
         $83 = ($50>>>0)<($82>>>0);
         $84 = $83 ? $50 : $82;
         $85 = (($81) + ($84))|0;
         $86 = $hand$06$i & 31;
         $87 = $85 & 31;
         $88 = ($86>>>0)<($87>>>0);
         if (!($88)) {
          $89 = $hand$06$i & 224;
          $90 = $85 & 224;
          $91 = ($89>>>0)<($90>>>0);
          if (!($91)) {
           $92 = $hand$06$i & 1792;
           $93 = $85 & 1792;
           $94 = ($92>>>0)<($93>>>0);
           if (!($94)) {
            $95 = $hand$06$i & 14336;
            $96 = $85 & 14336;
            $97 = ($95>>>0)<($96>>>0);
            if (!($97)) {
             $98 = $hand$06$i & 114688;
             $99 = $85 & 114688;
             $100 = ($98>>>0)<($99>>>0);
             if (!($100)) {
              $101 = $hand$06$i & 393216;
              $102 = $85 & 393216;
              $103 = ($101>>>0)<($102>>>0);
              if (!($103)) {
               $104 = $hand$06$i & 1572864;
               $105 = $85 & 1572864;
               $106 = ($104>>>0)<($105>>>0);
               if (!($106)) {
                $hand$1$i = $85;
                break;
               }
              }
             }
            }
           }
          }
         }
         $hand$1$i = $hand$06$i;
        } else {
         $hand$1$i = $hand$06$i;
        }
       } else {
        $hand$1$i = $hand$06$i;
       }
      } while(0);
      $107 = (($i$07$i) + 1)|0;
      $exitcond10$i = ($107|0)==($29|0);
      if ($exitcond10$i) {
       $min_hand_b$0 = $hand$1$i;$turn_win$0 = $4;
       label = 77;
       break L1;
      } else {
       $hand$06$i = $hand$1$i;$i$07$i = $107;
      }
     }
    }
    $31 = ($29|0)>(0);
    if ($31) {
     $32 = HEAP32[$0>>2]|0;
     $33 = (($27) + ($25))|0;
     $34 = $33 & 31;
     $35 = $33 & 224;
     $36 = $33 & 1792;
     $37 = $33 & 14336;
     $38 = $33 & 114688;
     $39 = $33 & 393216;
     $40 = $33 & 1572864;
     $hand$23$i = 0;$i$14$i = 0;
     while(1) {
      $108 = ((($32) + ($i$14$i<<6)|0) + 36|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = ($109|0)==(8388607);
      do {
       if ($110) {
        $111 = ((($32) + ($i$14$i<<6)|0) + 40|0);
        $112 = HEAP32[$111>>2]|0;
        $113 = ($112|0)==(0);
        if ($113) {
         $114 = ((($32) + ($i$14$i<<6)|0) + 28|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = ((($32) + ($i$14$i<<6)|0) + 32|0);
         $117 = HEAP32[$116>>2]|0;
         $118 = $117 >>> 7;
         $119 = $118 & 127;
         $120 = $117 >>> 19;
         $121 = $120 & 15;
         $122 = ($119>>>0)>(80);
         if ($122) {
          $123 = (($119) + -80)|0;
          $124 = (227423656 + ($123<<2)|0);
          $125 = HEAP32[$124>>2]|0;
          $126 = (($125) + ($115))|0;
          $h0$0$i = $126;
         } else {
          $127 = (227423808 + ($121<<2)|0);
          $128 = HEAP32[$127>>2]|0;
          $129 = $128 & $115;
          $130 = ($129|0)==(0);
          if ($130) {
           $h0$0$i = $115;
          } else {
           $131 = (227423656 + ($121<<2)|0);
           $132 = HEAP32[$131>>2]|0;
           $133 = (($115) - ($132))|0;
           $h0$0$i = $133;
          }
         }
         $134 = $h0$0$i & 31;
         $135 = ($34>>>0)<($134>>>0);
         $136 = $135 ? $34 : $134;
         $137 = $h0$0$i & 224;
         $138 = ($35>>>0)<($137>>>0);
         $139 = $138 ? $35 : $137;
         $140 = $139 | $136;
         $141 = $h0$0$i & 1792;
         $142 = ($36>>>0)<($141>>>0);
         $143 = $142 ? $36 : $141;
         $144 = $140 | $143;
         $145 = $h0$0$i & 14336;
         $146 = ($37>>>0)<($145>>>0);
         $147 = $146 ? $37 : $145;
         $148 = $144 | $147;
         $149 = $h0$0$i & 114688;
         $150 = ($38>>>0)<($149>>>0);
         $151 = $150 ? $38 : $149;
         $152 = $148 | $151;
         $153 = $h0$0$i & 393216;
         $154 = ($39>>>0)<($153>>>0);
         $155 = $154 ? $39 : $153;
         $156 = $152 | $155;
         $157 = $h0$0$i & 1572864;
         $158 = ($40>>>0)<($157>>>0);
         $159 = $158 ? $40 : $157;
         $160 = (($156) + ($159))|0;
         $161 = $160 & 31;
         $162 = $hand$23$i & 31;
         $163 = ($161>>>0)<($162>>>0);
         if (!($163)) {
          $164 = $160 & 224;
          $165 = $hand$23$i & 224;
          $166 = ($164>>>0)<($165>>>0);
          if (!($166)) {
           $167 = $160 & 1792;
           $168 = $hand$23$i & 1792;
           $169 = ($167>>>0)<($168>>>0);
           if (!($169)) {
            $170 = $160 & 14336;
            $171 = $hand$23$i & 14336;
            $172 = ($170>>>0)<($171>>>0);
            if (!($172)) {
             $173 = $160 & 114688;
             $174 = $hand$23$i & 114688;
             $175 = ($173>>>0)<($174>>>0);
             if (!($175)) {
              $176 = $160 & 393216;
              $177 = $hand$23$i & 393216;
              $178 = ($176>>>0)<($177>>>0);
              if (!($178)) {
               $179 = $160 & 1572864;
               $180 = $hand$23$i & 1572864;
               $181 = ($179>>>0)<($180>>>0);
               if (!($181)) {
                $hand$3$i = $160;
                break;
               }
              }
             }
            }
           }
          }
         }
         $hand$3$i = $hand$23$i;
        } else {
         $hand$3$i = $hand$23$i;
        }
       } else {
        $hand$3$i = $hand$23$i;
       }
      } while(0);
      $182 = (($i$14$i) + 1)|0;
      $exitcond$i = ($182|0)==($29|0);
      if ($exitcond$i) {
       $min_hand_b$0 = $hand$3$i;$turn_win$0 = $4;
       label = 77;
       break;
      } else {
       $hand$23$i = $hand$3$i;$i$14$i = $182;
      }
     }
    } else {
     $min_hand_b$0 = 0;$turn_win$0 = 0;
     label = 77;
    }
   } else {
    label = 72;
   }
  } else {
   label = 72;
  }
 } while(0);
 if ((label|0) == 72) {
  $379 = (($ptree) + 500|0);
  $380 = HEAP32[$379>>2]|0;
  $381 = $380 | $16;
  $382 = ((($pdfpn_tree) + (($ply*80)|0)|0) + 2097240|0);
  $383 = HEAP32[$382>>2]|0;
  $384 = ($383|0)>(0);
  if ($384) {
   $385 = HEAP32[$0>>2]|0;
   $i$040 = 0;$is_delta_loop$042 = 0;$is_phi_loop$041 = 1;
   while(1) {
    $386 = ((($385) + ($i$040<<6)|0) + 40|0);
    $387 = HEAP32[$386>>2]|0;
    $388 = ($20|0)==($387|0);
    if ($388) {
     $389 = ((($385) + ($i$040<<6)|0) + 48|0);
     $390 = HEAP32[$389>>2]|0;
     $391 = $390 & $is_phi_loop$041;
     $is_phi_loop$1 = $391;
    } else {
     $is_phi_loop$1 = $is_phi_loop$041;
    }
    $392 = ((($385) + ($i$040<<6)|0) + 52|0);
    $393 = HEAP32[$392>>2]|0;
    $394 = $393 | $is_delta_loop$042;
    $395 = (($i$040) + 1)|0;
    $exitcond = ($395|0)==($383|0);
    if ($exitcond) {
     $584 = $381;$586 = $15;$is_delta_loop$2 = $394;$is_phi_loop$3 = $is_phi_loop$1;$min_hand_b$1 = $380;
     label = 89;
     break;
    } else {
     $i$040 = $395;$is_delta_loop$042 = $394;$is_phi_loop$041 = $is_phi_loop$1;
    }
   }
  } else {
   $584 = $381;$586 = $15;$is_delta_loop$2 = 0;$is_phi_loop$3 = 1;$min_hand_b$1 = $380;
   label = 89;
  }
 }
 else if ((label|0) == 77) {
  $396 = $min_hand_b$0 | $16;
  $397 = (($18) + 32)|0;
  $398 = ($18>>>0)<(4294967264);
  if ($398) {
   $399 = HEAP32[225315896>>2]|0;
   $400 = ($turn_win$0|0)==(0);
   $401 = $min_hand_b$0 & 31;
   $402 = $min_hand_b$0 & 224;
   $403 = $min_hand_b$0 & 1792;
   $404 = $min_hand_b$0 & 14336;
   $405 = $min_hand_b$0 & 114688;
   $406 = $min_hand_b$0 & 393216;
   $407 = $min_hand_b$0 & 1572864;
   $u$033 = $18;
   while(1) {
    $408 = (($399) + (($u$033*24)|0)|0);
    $409 = $408;
    $410 = $409;
    $411 = HEAP32[$410>>2]|0;
    $412 = (($409) + 4)|0;
    $413 = $412;
    $414 = HEAP32[$413>>2]|0;
    $415 = ((($399) + (($u$033*24)|0)|0) + 16|0);
    $416 = $415;
    $417 = $416;
    $418 = HEAP32[$417>>2]|0;
    $419 = (($416) + 4)|0;
    $420 = $419;
    $421 = HEAP32[$420>>2]|0;
    $422 = $421 & 8191;
    $423 = ($418|0)==(0);
    $424 = ($422|0)==(0);
    $425 = $423 & $424;
    do {
     if (!($425)) {
      $426 = ((($399) + (($u$033*24)|0)|0) + 8|0);
      $427 = $426;
      $428 = $427;
      $429 = HEAP32[$428>>2]|0;
      $430 = (($427) + 4)|0;
      $431 = $430;
      $432 = HEAP32[$431>>2]|0;
      $433 = (_bitshift64Lshr(($429|0),($432|0),54)|0);
      $434 = tempRet0;
      $435 = $433 & 255;
      $436 = (($435) + ($18))|0;
      $437 = ($u$033|0)!=($436|0);
      $438 = ($396|0)==($411|0);
      $439 = ($15|0)==($414|0);
      $440 = $438 & $439;
      $or$cond3 = $437 | $440;
      $441 = $411 ^ $396;
      $442 = $414 ^ $15;
      $443 = ($442>>>0)>(0);
      $444 = ($442|0)==(0);
      $445 = ($441>>>0)>(2097151);
      $446 = $444 & $445;
      $447 = $443 | $446;
      $or$cond5 = $or$cond3 | $447;
      if (!($or$cond5)) {
       $448 = $411 & 31;
       if ($400) {
        $449 = ($448>>>0)<($401>>>0);
        $450 = $411 & 224;
        $451 = ($450>>>0)<($402>>>0);
        $or$cond72 = $449 | $451;
        $452 = $411 & 1792;
        $453 = ($452>>>0)<($403>>>0);
        $or$cond74 = $or$cond72 | $453;
        $454 = $411 & 14336;
        $455 = ($454>>>0)<($404>>>0);
        $or$cond76 = $or$cond74 | $455;
        $456 = $411 & 114688;
        $457 = ($456>>>0)<($405>>>0);
        $or$cond78 = $or$cond76 | $457;
        $458 = $411 & 393216;
        $459 = ($458>>>0)<($406>>>0);
        $or$cond80 = $or$cond78 | $459;
        $460 = $411 & 1572864;
        $461 = ($460>>>0)<($407>>>0);
        $or$cond82 = $or$cond80 | $461;
        if ($or$cond82) {
         break;
        }
       } else {
        $462 = ($401>>>0)<($448>>>0);
        $463 = $411 & 224;
        $464 = ($402>>>0)<($463>>>0);
        $or$cond84 = $462 | $464;
        $465 = $411 & 1792;
        $466 = ($403>>>0)<($465>>>0);
        $or$cond86 = $or$cond84 | $466;
        $467 = $411 & 14336;
        $468 = ($404>>>0)<($467>>>0);
        $or$cond88 = $or$cond86 | $468;
        $469 = $411 & 114688;
        $470 = ($405>>>0)<($469>>>0);
        $or$cond90 = $or$cond88 | $470;
        $471 = $411 & 393216;
        $472 = ($406>>>0)<($471>>>0);
        $or$cond92 = $or$cond90 | $472;
        $473 = $411 & 1572864;
        $474 = ($407>>>0)<($473>>>0);
        $or$cond94 = $or$cond92 | $474;
        if ($or$cond94) {
         break;
        }
       }
       $u1$026 = (($u$033) + 1)|0;
       $475 = ((($399) + (($u1$026*24)|0)|0) + 16|0);
       $476 = $475;
       $477 = $476;
       $478 = HEAP32[$477>>2]|0;
       $479 = (($476) + 4)|0;
       $480 = $479;
       $481 = HEAP32[$480>>2]|0;
       $482 = $481 & 8191;
       $483 = ($478|0)==(0);
       $484 = ($482|0)==(0);
       $485 = $483 & $484;
       L116: do {
        if ($485) {
         $u1$0$in$lcssa = $u$033;
        } else {
         $521 = $478;$524 = $481;$u1$0$in27 = $u$033;$u1$028 = $u1$026;
         while(1) {
          $$in = ((($399) + (($u1$028*24)|0)|0) + 8|0);
          $486 = $$in;
          $487 = $486;
          $488 = HEAP32[$487>>2]|0;
          $489 = (($486) + 4)|0;
          $490 = $489;
          $491 = HEAP32[$490>>2]|0;
          $492 = (_bitshift64Lshr(($488|0),($491|0),54)|0);
          $493 = tempRet0;
          $494 = $492 & 255;
          $495 = ($494|0)==(0);
          if ($495) {
           $u1$0$in$lcssa = $u1$0$in27;
           break L116;
          }
          $$in47 = (($399) + (($u1$028*24)|0)|0);
          $496 = $$in47;
          $497 = $496;
          $498 = HEAP32[$497>>2]|0;
          $499 = (($496) + 4)|0;
          $500 = $499;
          $501 = HEAP32[$500>>2]|0;
          $502 = $491 & -1069547521;
          $503 = (($494) + 1023)|0;
          $504 = (_bitshift64Shl(($503|0),0,54)|0);
          $505 = tempRet0;
          $506 = $504 | $488;
          $507 = $505 | $502;
          $508 = (($399) + (($u1$0$in27*24)|0)|0);
          $509 = $508;
          $510 = $509;
          HEAP32[$510>>2] = $498;
          $511 = (($509) + 4)|0;
          $512 = $511;
          HEAP32[$512>>2] = $501;
          $513 = ((($399) + (($u1$0$in27*24)|0)|0) + 8|0);
          $514 = $513;
          $515 = $514;
          HEAP32[$515>>2] = $506;
          $516 = (($514) + 4)|0;
          $517 = $516;
          HEAP32[$517>>2] = $507;
          $518 = ((($399) + (($u1$0$in27*24)|0)|0) + 16|0);
          $519 = $518;
          $520 = $519;
          HEAP32[$520>>2] = $521;
          $522 = (($519) + 4)|0;
          $523 = $522;
          HEAP32[$523>>2] = $524;
          $u1$0 = (($u1$028) + 1)|0;
          $525 = ((($399) + (($u1$0*24)|0)|0) + 16|0);
          $526 = $525;
          $527 = $526;
          $528 = HEAP32[$527>>2]|0;
          $529 = (($526) + 4)|0;
          $530 = $529;
          $531 = HEAP32[$530>>2]|0;
          $532 = $531 & 8191;
          $533 = ($528|0)==(0);
          $534 = ($532|0)==(0);
          $535 = $533 & $534;
          if ($535) {
           $u1$0$in$lcssa = $u1$028;
           break;
          } else {
           $u1$0$in27$phi = $u1$028;$521 = $528;$524 = $531;$u1$028 = $u1$0;$u1$0$in27 = $u1$0$in27$phi;
          }
         }
        }
       } while(0);
       $536 = ((($399) + (($u1$0$in$lcssa*24)|0)|0) + 16|0);
       $537 = $536;
       $538 = $537;
       HEAP32[$538>>2] = 0;
       $539 = (($537) + 4)|0;
       $540 = $539;
       HEAP32[$540>>2] = 0;
      }
     }
    } while(0);
    $541 = (($u$033) + 1)|0;
    $542 = ($541>>>0)<($397>>>0);
    if ($542) {
     $u$033 = $541;
    } else {
     $584 = $396;$586 = $15;$is_delta_loop$2 = 0;$is_phi_loop$3 = 0;$min_hand_b$1 = $min_hand_b$0;
     label = 89;
     break;
    }
   }
  } else {
   $790 = $396;$791 = $15;$is_delta_loop$26264 = 0;$is_phi_loop$36166 = 0;$min_hand_b$15970 = $min_hand_b$0;
   label = 98;
  }
 }
 if ((label|0) == 89) {
  $543 = (($18) + 96)|0;
  $544 = ($18>>>0)<(4294967200);
  if ($544) {
   $545 = (($17) + 34)|0;
   $546 = HEAP32[225315896>>2]|0;
   $547 = HEAP32[227423520>>2]|0;
   $591 = -1;$594 = -1;$min_u$020 = -1;$u$121 = $18;
   while(1) {
    $548 = ($u$121|0)==($545|0);
    if ($548) {
     $min_u$2 = $min_u$020;
     break;
    }
    $549 = (($546) + (($u$121*24)|0)|0);
    $550 = $549;
    $551 = $550;
    $552 = HEAP32[$551>>2]|0;
    $553 = (($550) + 4)|0;
    $554 = $553;
    $555 = HEAP32[$554>>2]|0;
    $556 = ((($546) + (($u$121*24)|0)|0) + 8|0);
    $557 = $556;
    $558 = $557;
    $559 = HEAP32[$558>>2]|0;
    $560 = (($557) + 4)|0;
    $561 = $560;
    $562 = HEAP32[$561>>2]|0;
    $563 = ((($546) + (($u$121*24)|0)|0) + 16|0);
    $564 = $563;
    $565 = $564;
    $566 = HEAP32[$565>>2]|0;
    $567 = (($564) + 4)|0;
    $568 = $567;
    $569 = HEAP32[$568>>2]|0;
    $570 = (_bitshift64Lshr(($559|0),($562|0),54)|0);
    $571 = tempRet0;
    $572 = $570 & 255;
    $573 = $569 & 8191;
    $574 = ($566|0)==(0);
    $575 = ($573|0)==(0);
    $576 = $574 & $575;
    if ($576) {
     $min_u$2 = $u$121;
     break;
    }
    $577 = (_bitshift64Lshr(($559|0),($562|0),46)|0);
    $578 = tempRet0;
    $579 = $577 & 255;
    $580 = ($579|0)==($547|0);
    if (!($580)) {
     $min_u$2 = $u$121;
     break;
    }
    $581 = (($u$121) - ($572))|0;
    $582 = ($18|0)==($581|0);
    $583 = ($584|0)==($552|0);
    $585 = ($586|0)==($555|0);
    $587 = $583 & $585;
    $or$cond6 = $582 & $587;
    if ($or$cond6) {
     $min_u$2 = $u$121;
     break;
    }
    $588 = ($18>>>0)<=($581>>>0);
    $589 = ($572|0)==(31);
    $or$cond = $588 & $589;
    if ($or$cond) {
     $min_u$2 = $min_u$020;
     break;
    }
    $590 = ($573>>>0)<($591>>>0);
    $592 = ($573|0)==($591|0);
    $593 = ($566>>>0)<($594>>>0);
    $595 = $592 & $593;
    $596 = $590 | $595;
    $u$1$min_u$0 = $596 ? $u$121 : $min_u$020;
    $597 = $596 ? $566 : $594;
    $598 = $596 ? $573 : $591;
    $599 = (($u$121) + 1)|0;
    $600 = ($599>>>0)<($543>>>0);
    if ($600) {
     $591 = $598;$594 = $597;$min_u$020 = $u$1$min_u$0;$u$121 = $599;
    } else {
     $min_u$2 = $u$1$min_u$0;
     break;
    }
   }
   $601 = ($min_u$2|0)==(-1);
   if ($601) {
    $790 = $584;$791 = $586;$is_delta_loop$26264 = $is_delta_loop$2;$is_phi_loop$36166 = $is_phi_loop$3;$min_hand_b$15970 = $min_hand_b$1;
    label = 98;
   } else {
    $776 = $584;$779 = $586;$is_delta_loop$26263 = $is_delta_loop$2;$is_phi_loop$36165 = $is_phi_loop$3;$min_hand_b$15969 = $min_hand_b$1;$min_u$3 = $min_u$2;
   }
  } else {
   $790 = $584;$791 = $586;$is_delta_loop$26264 = $is_delta_loop$2;$is_phi_loop$36166 = $is_phi_loop$3;$min_hand_b$15970 = $min_hand_b$1;
   label = 98;
  }
 }
 if ((label|0) == 98) {
  HEAP32[$vararg_buffer>>2] = 227423792;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 319;
  _out_warning(227423760,$vararg_buffer);
  $776 = $790;$779 = $791;$is_delta_loop$26263 = $is_delta_loop$26264;$is_phi_loop$36165 = $is_phi_loop$36166;$min_hand_b$15969 = $min_hand_b$15970;$min_u$3 = $18;
 }
 $602 = HEAP32[225315896>>2]|0;
 $603 = ((($602) + (($min_u$3*24)|0)|0) + 8|0);
 $604 = $603;
 $605 = $604;
 $606 = HEAP32[$605>>2]|0;
 $607 = (($604) + 4)|0;
 $608 = $607;
 $609 = HEAP32[$608>>2]|0;
 $610 = ((($602) + (($min_u$3*24)|0)|0) + 16|0);
 $611 = $610;
 $612 = $611;
 $613 = HEAP32[$612>>2]|0;
 $614 = (($611) + 4)|0;
 $615 = $614;
 $616 = HEAP32[$615>>2]|0;
 $617 = (_bitshift64Lshr(($606|0),($609|0),54)|0);
 $618 = tempRet0;
 $619 = $617 & 255;
 $620 = $616 & 8191;
 $621 = ($613|0)==(0);
 $622 = ($620|0)==(0);
 $623 = $621 & $622;
 L136: do {
  if ($623) {
   label = 103;
  } else {
   $624 = (_bitshift64Lshr(($606|0),($609|0),46)|0);
   $625 = tempRet0;
   $626 = $624 & 255;
   $627 = HEAP32[227423520>>2]|0;
   $628 = ($626|0)==($627|0);
   if ($628) {
    $629 = (($min_u$3) - ($619))|0;
    $630 = ($18>>>0)>($629>>>0);
    if ($630) {
     $631 = (($18) + 31)|0;
     $632 = ($min_u$3>>>0)<($631>>>0);
     if ($632) {
      $min_u$517 = $min_u$3;
      while(1) {
       $687 = (($min_u$517) + 1)|0;
       $688 = ((($602) + (($687*24)|0)|0) + 8|0);
       $689 = $688;
       $690 = $689;
       $691 = HEAP32[$690>>2]|0;
       $692 = (($689) + 4)|0;
       $693 = $692;
       $694 = HEAP32[$693>>2]|0;
       $695 = ((($602) + (($687*24)|0)|0) + 16|0);
       $696 = (_bitshift64Lshr(($691|0),($694|0),54)|0);
       $697 = tempRet0;
       $698 = $696 & 255;
       $699 = (($687) - ($698))|0;
       $700 = ($18>>>0)>($699>>>0);
       if (!($700)) {
        $754 = $626;$min_u$6 = $min_u$517;
        break L136;
       }
       $701 = (($602) + (($687*24)|0)|0);
       $702 = $695;
       $703 = $702;
       $704 = HEAP32[$703>>2]|0;
       $705 = (($702) + 4)|0;
       $706 = $705;
       $707 = HEAP32[$706>>2]|0;
       $708 = $701;
       $709 = $708;
       $710 = HEAP32[$709>>2]|0;
       $711 = (($708) + 4)|0;
       $712 = $711;
       $713 = HEAP32[$712>>2]|0;
       $714 = $695;
       $715 = $714;
       HEAP32[$715>>2] = 0;
       $716 = (($714) + 4)|0;
       $717 = $716;
       HEAP32[$717>>2] = 0;
       $718 = $694 & -1069547521;
       $719 = (($698) + 1023)|0;
       $720 = (_bitshift64Shl(($719|0),0,54)|0);
       $721 = tempRet0;
       $722 = $720 | $691;
       $723 = $721 | $718;
       $724 = (($602) + (($min_u$517*24)|0)|0);
       $725 = $724;
       $726 = $725;
       HEAP32[$726>>2] = $710;
       $727 = (($725) + 4)|0;
       $728 = $727;
       HEAP32[$728>>2] = $713;
       $729 = ((($602) + (($min_u$517*24)|0)|0) + 8|0);
       $730 = $729;
       $731 = $730;
       HEAP32[$731>>2] = $722;
       $732 = (($730) + 4)|0;
       $733 = $732;
       HEAP32[$733>>2] = $723;
       $734 = ((($602) + (($min_u$517*24)|0)|0) + 16|0);
       $735 = $734;
       $736 = $735;
       HEAP32[$736>>2] = $704;
       $737 = (($735) + 4)|0;
       $738 = $737;
       HEAP32[$738>>2] = $707;
       $739 = ($687>>>0)<($631>>>0);
       if ($739) {
        $min_u$517 = $687;
       } else {
        $754 = $626;$min_u$6 = $687;
        break;
       }
      }
     } else {
      $754 = $626;$min_u$6 = $min_u$3;
     }
    } else {
     label = 103;
    }
   } else {
    label = 103;
   }
  }
 } while(0);
 if ((label|0) == 103) {
  $633 = ($18>>>0)<($min_u$3>>>0);
  L145: do {
   if ($633) {
    $min_u$414 = $min_u$3;
    while(1) {
     $634 = (($min_u$414) + -1)|0;
     $635 = ((($602) + (($634*24)|0)|0) + 8|0);
     $636 = $635;
     $637 = $636;
     $638 = HEAP32[$637>>2]|0;
     $639 = (($636) + 4)|0;
     $640 = $639;
     $641 = HEAP32[$640>>2]|0;
     $642 = ((($602) + (($634*24)|0)|0) + 16|0);
     $643 = (_bitshift64Lshr(($638|0),($641|0),54)|0);
     $644 = tempRet0;
     $645 = $643 & 255;
     $646 = (($634) - ($645))|0;
     $647 = ($646>>>0)>($18>>>0);
     if (!($647)) {
      $min_u$4$lcssa = $min_u$414;
      break L145;
     }
     $648 = (($602) + (($634*24)|0)|0);
     $649 = $642;
     $650 = $649;
     $651 = HEAP32[$650>>2]|0;
     $652 = (($649) + 4)|0;
     $653 = $652;
     $654 = HEAP32[$653>>2]|0;
     $655 = $648;
     $656 = $655;
     $657 = HEAP32[$656>>2]|0;
     $658 = (($655) + 4)|0;
     $659 = $658;
     $660 = HEAP32[$659>>2]|0;
     $661 = $642;
     $662 = $661;
     HEAP32[$662>>2] = 0;
     $663 = (($661) + 4)|0;
     $664 = $663;
     HEAP32[$664>>2] = 0;
     $665 = $641 & -1069547521;
     $666 = (($645) + 1)|0;
     $667 = (_bitshift64Shl(($666|0),0,54)|0);
     $668 = tempRet0;
     $669 = $667 | $638;
     $670 = $668 | $665;
     $671 = (($602) + (($min_u$414*24)|0)|0);
     $672 = $671;
     $673 = $672;
     HEAP32[$673>>2] = $657;
     $674 = (($672) + 4)|0;
     $675 = $674;
     HEAP32[$675>>2] = $660;
     $676 = ((($602) + (($min_u$414*24)|0)|0) + 8|0);
     $677 = $676;
     $678 = $677;
     HEAP32[$678>>2] = $669;
     $679 = (($677) + 4)|0;
     $680 = $679;
     HEAP32[$680>>2] = $670;
     $681 = ((($602) + (($min_u$414*24)|0)|0) + 16|0);
     $682 = $681;
     $683 = $682;
     HEAP32[$683>>2] = $651;
     $684 = (($682) + 4)|0;
     $685 = $684;
     HEAP32[$685>>2] = $654;
     $686 = ($18>>>0)<($634>>>0);
     if ($686) {
      $min_u$414 = $634;
     } else {
      $min_u$4$lcssa = $634;
      break;
     }
    }
   } else {
    $min_u$4$lcssa = $min_u$3;
   }
  } while(0);
  $$pre = HEAP32[227423520>>2]|0;
  $754 = $$pre;$min_u$6 = $min_u$4$lcssa;
 }
 $740 = (($min_u$6) - ($18))|0;
 $741 = ((($pdfpn_tree) + (($ply*80)|0)|0) + 2097236|0);
 HEAP32[$741>>2] = $is_phi_loop$36165;
 $742 = ((($pdfpn_tree) + (($ply*80)|0)|0) + 2097232|0);
 HEAP32[$742>>2] = $is_delta_loop$26263;
 $743 = ((($pdfpn_tree) + (($ply*80)|0)|0) + 2097208|0);
 HEAP32[$743>>2] = $min_hand_b$15969;
 $744 = (_bitshift64Shl(($is_phi_loop$36165|0),0,63)|0);
 $745 = tempRet0;
 $746 = (_bitshift64Shl(($is_delta_loop$26263|0),0,62)|0);
 $747 = tempRet0;
 $748 = $746 | $744;
 $749 = $747 | $745;
 $750 = (_bitshift64Shl(($740|0),0,54)|0);
 $751 = tempRet0;
 $752 = $748 | $750;
 $753 = $749 | $751;
 $755 = (_bitshift64Shl(($754|0),0,46)|0);
 $756 = tempRet0;
 $757 = $752 | $755;
 $758 = $753 | $756;
 $759 = (_bitshift64Shl(($20|0),0,23)|0);
 $760 = tempRet0;
 $761 = $757 | $759;
 $762 = $758 | $760;
 $763 = ((($pdfpn_tree) + (($ply*80)|0)|0) + 2097220|0);
 $764 = HEAP32[$763>>2]|0;
 $765 = $761 | $764;
 $766 = ((($pdfpn_tree) + (($ply*80)|0)|0) + 2097192|0);
 $767 = $766;
 $768 = $767;
 $769 = HEAP32[$768>>2]|0;
 $770 = (($767) + 4)|0;
 $771 = $770;
 $772 = HEAP32[$771>>2]|0;
 $773 = (($602) + (($min_u$6*24)|0)|0);
 $774 = $773;
 $775 = $774;
 HEAP32[$775>>2] = $776;
 $777 = (($774) + 4)|0;
 $778 = $777;
 HEAP32[$778>>2] = $779;
 $780 = ((($602) + (($min_u$6*24)|0)|0) + 8|0);
 $781 = $780;
 $782 = $781;
 HEAP32[$782>>2] = $765;
 $783 = (($781) + 4)|0;
 $784 = $783;
 HEAP32[$784>>2] = $762;
 $785 = ((($602) + (($min_u$6*24)|0)|0) + 16|0);
 $786 = $785;
 $787 = $786;
 HEAP32[$787>>2] = $769;
 $788 = (($786) + 4)|0;
 $789 = $788;
 HEAP32[$789>>2] = $772;
 STACKTOP = sp;return;
}
function _dfpn_max_hand_b($hand_b,$hand_w) {
 $hand_b = $hand_b|0;
 $hand_w = $hand_w|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hand$1$1 = 0, $hand$1$2 = 0, $hand$1$3 = 0, $hand$1$4 = 0, $hand$1$5 = 0, $hand$1$6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($hand_w) + ($hand_b))|0;
 $1 = $hand_b & 31;
 $2 = ($1|0)==(0);
 $3 = $0 & 31;
 $$ = $2 ? 0 : $3;
 $4 = $hand_b & 224;
 $5 = ($4|0)==(0);
 if ($5) {
  $hand$1$1 = $$;
 } else {
  $6 = $0 & 224;
  $7 = $6 | $$;
  $hand$1$1 = $7;
 }
 $8 = $hand_b & 1792;
 $9 = ($8|0)==(0);
 if ($9) {
  $hand$1$2 = $hand$1$1;
 } else {
  $10 = $0 & 1792;
  $11 = (($10) + ($hand$1$1))|0;
  $hand$1$2 = $11;
 }
 $12 = $hand_b & 14336;
 $13 = ($12|0)==(0);
 if ($13) {
  $hand$1$3 = $hand$1$2;
 } else {
  $14 = $0 & 14336;
  $15 = (($14) + ($hand$1$2))|0;
  $hand$1$3 = $15;
 }
 $16 = $hand_b & 114688;
 $17 = ($16|0)==(0);
 if ($17) {
  $hand$1$4 = $hand$1$3;
 } else {
  $18 = $0 & 114688;
  $19 = (($18) + ($hand$1$3))|0;
  $hand$1$4 = $19;
 }
 $20 = $hand_b & 393216;
 $21 = ($20|0)==(0);
 if ($21) {
  $hand$1$5 = $hand$1$4;
 } else {
  $22 = $0 & 393216;
  $23 = (($22) + ($hand$1$4))|0;
  $hand$1$5 = $23;
 }
 $24 = $hand_b & 1572864;
 $25 = ($24|0)==(0);
 if ($25) {
  $hand$1$6 = $hand$1$5;
  STACKTOP = sp;return ($hand$1$6|0);
 }
 $26 = $0 & 1572864;
 $27 = (($26) + ($hand$1$5))|0;
 $hand$1$6 = $27;
 STACKTOP = sp;return ($hand$1$6|0);
}
function _dfpn_max_hand_w($hand_b,$hand_w) {
 $hand_b = $hand_b|0;
 $hand_w = $hand_w|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hand$1$1 = 0, $hand$1$2 = 0, $hand$1$3 = 0, $hand$1$4 = 0, $hand$1$5 = 0, $hand$1$6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($hand_w) + ($hand_b))|0;
 $1 = $hand_w & 31;
 $2 = ($1|0)==(0);
 $3 = $0 & -32;
 $$ = $2 ? $0 : $3;
 $4 = $hand_w & 224;
 $5 = ($4|0)==(0);
 if ($5) {
  $hand$1$1 = $$;
 } else {
  $6 = $0 & 224;
  $7 = (($$) - ($6))|0;
  $hand$1$1 = $7;
 }
 $8 = $hand_w & 1792;
 $9 = ($8|0)==(0);
 if ($9) {
  $hand$1$2 = $hand$1$1;
 } else {
  $10 = $0 & 1792;
  $11 = (($hand$1$1) - ($10))|0;
  $hand$1$2 = $11;
 }
 $12 = $hand_w & 14336;
 $13 = ($12|0)==(0);
 if ($13) {
  $hand$1$3 = $hand$1$2;
 } else {
  $14 = $0 & 14336;
  $15 = (($hand$1$2) - ($14))|0;
  $hand$1$3 = $15;
 }
 $16 = $hand_w & 114688;
 $17 = ($16|0)==(0);
 if ($17) {
  $hand$1$4 = $hand$1$3;
 } else {
  $18 = $0 & 114688;
  $19 = (($hand$1$3) - ($18))|0;
  $hand$1$4 = $19;
 }
 $20 = $hand_w & 393216;
 $21 = ($20|0)==(0);
 if ($21) {
  $hand$1$5 = $hand$1$4;
 } else {
  $22 = $0 & 393216;
  $23 = (($hand$1$4) - ($22))|0;
  $hand$1$5 = $23;
 }
 $24 = $hand_w & 1572864;
 $25 = ($24|0)==(0);
 if ($25) {
  $hand$1$6 = $hand$1$5;
  STACKTOP = sp;return ($hand$1$6|0);
 }
 $26 = $0 & 1572864;
 $27 = (($hand$1$5) - ($26))|0;
 $hand$1$6 = $27;
 STACKTOP = sp;return ($hand$1$6|0);
}
function _dfpn_detect_rep($pdfpn_tree,$0,$1,$hand_b,$ply,$ip) {
 $pdfpn_tree = $pdfpn_tree|0;
 $0 = $0|0;
 $1 = $1|0;
 $hand_b = $hand_b|0;
 $ply = $ply|0;
 $ip = $ip|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$ip>>2] = $ply;
 $2 = (($pdfpn_tree) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>($ply|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $6 = $ply;
 }
 while(1) {
  $5 = ((($pdfpn_tree) + (($6*80)|0)|0) + 2097184|0);
  $7 = $5;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)==($0|0);
  $14 = ($12|0)==($1|0);
  $15 = $13 & $14;
  if ($15) {
   $16 = ((($pdfpn_tree) + (($6*80)|0)|0) + 2097212|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($hand_b|0);
   if ($18) {
    $$0 = 1;
    label = 5;
    break;
   }
  }
  $19 = (($6) + -2)|0;
  HEAP32[$ip>>2] = $19;
  $20 = ($19|0)<($3|0);
  if ($20) {
   $$0 = 0;
   label = 5;
   break;
  } else {
   $6 = $19;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _isgraph($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -33)|0;
 $1 = ($0>>>0)<(94);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 STACKTOP = sp;return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$026 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $w$0$lcssa = 0, $w$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$026 = $s;
   while(1) {
    $12 = HEAP8[$$026>>0]|0;
    $13 = ($12<<24>>24)==(0);
    if ($13) {
     $$0 = $$026;
     label = 13;
     break;
    }
    $14 = ($12<<24>>24)==($5<<24>>24);
    $9 = (($$026) + 1|0);
    if ($14) {
     $$0 = $$026;
     label = 13;
     break;
    }
    $8 = $9;
    $10 = $8 & 3;
    $11 = ($10|0)==(0);
    if ($11) {
     $$02$lcssa = $9;
     break L5;
    } else {
     $$026 = $9;
    }
   }
   if ((label|0) == 13) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L15: do {
  if ($21) {
   $30 = $16;$w$03 = $$02$lcssa;
   while(1) {
    $29 = $30 ^ $15;
    $31 = (($29) + -16843009)|0;
    $32 = $29 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    $23 = (($w$03) + 4|0);
    if (!($35)) {
     $w$0$lcssa = $w$03;
     break L15;
    }
    $22 = HEAP32[$23>>2]|0;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if ($28) {
     $30 = $22;$w$03 = $23;
    } else {
     $w$0$lcssa = $23;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$02$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond = $38 | $39;
  $40 = (($$1) + 1|0);
  if ($or$cond) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strcspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$025 = 0, $$03$lcssa = 0, $$034 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $byteset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $2 = (($c) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if (!($4)) {
   ;HEAP32[$byteset+0>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
   $$025 = $c;$13 = $0;
   while(1) {
    $12 = $13&255;
    $14 = $12 & 31;
    $15 = 1 << $14;
    $16 = $12 >>> 5;
    $17 = (($byteset) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 | $15;
    HEAP32[$17>>2] = $19;
    $20 = (($$025) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     break;
    } else {
     $$025 = $20;$13 = $21;
    }
   }
   $10 = HEAP8[$s>>0]|0;
   $11 = ($10<<24>>24)==(0);
   L7: do {
    if ($11) {
     $$03$lcssa = $s;
    } else {
     $$034 = $s;$27 = $10;
     while(1) {
      $26 = $27&255;
      $28 = $26 >>> 5;
      $29 = (($byteset) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = $26 & 31;
      $32 = 1 << $31;
      $33 = $30 & $32;
      $34 = ($33|0)==(0);
      $24 = (($$034) + 1|0);
      if (!($34)) {
       $$03$lcssa = $$034;
       break L7;
      }
      $23 = HEAP8[$24>>0]|0;
      $25 = ($23<<24>>24)==(0);
      if ($25) {
       $$03$lcssa = $24;
       break;
      } else {
       $$034 = $24;$27 = $23;
      }
     }
    }
   } while(0);
   $35 = $$03$lcssa;
   $36 = $s;
   $37 = (($35) - ($36))|0;
   $$0 = $37;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $5 = $0 << 24 >> 24;
 $6 = (___strchrnul($s,$5)|0);
 $7 = $6;
 $8 = $s;
 $9 = (($7) - ($8))|0;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _strspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$026 = 0, $$03 = 0, $$1$lcssa = 0, $$14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byteset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 ;HEAP32[$byteset+0>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($c) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $$03 = $s;
  while(1) {
   $5 = HEAP8[$$03>>0]|0;
   $6 = ($5<<24>>24)==($0<<24>>24);
   $7 = (($$03) + 1|0);
   if ($6) {
    $$03 = $7;
   } else {
    break;
   }
  }
  $8 = $$03;
  $9 = $s;
  $10 = (($8) - ($9))|0;
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$026 = $c;$14 = $0;
 }
 while(1) {
  $13 = $14&255;
  $15 = $13 & 31;
  $16 = 1 << $15;
  $17 = $13 >>> 5;
  $18 = (($byteset) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 | $16;
  HEAP32[$18>>2] = $20;
  $21 = (($$026) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   break;
  } else {
   $$026 = $21;$14 = $22;
  }
 }
 $11 = HEAP8[$s>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L12: do {
  if ($12) {
   $$1$lcssa = $s;
  } else {
   $$14 = $s;$28 = $11;
   while(1) {
    $27 = $28&255;
    $29 = $27 >>> 5;
    $30 = (($byteset) + ($29<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $27 & 31;
    $33 = 1 << $32;
    $34 = $31 & $33;
    $35 = ($34|0)==(0);
    $25 = (($$14) + 1|0);
    if ($35) {
     $$1$lcssa = $$14;
     break L12;
    }
    $24 = HEAP8[$25>>0]|0;
    $26 = ($24<<24>>24)==(0);
    if ($26) {
     $$1$lcssa = $25;
     break;
    } else {
     $$14 = $25;$28 = $24;
    }
   }
  }
 } while(0);
 $36 = $$1$lcssa;
 $37 = $s;
 $38 = (($36) - ($37))|0;
 $$0 = $38;
 STACKTOP = sp;return ($$0|0);
}
function _strtok_r($s,$sep,$p) {
 $s = $s|0;
 $sep = $sep|0;
 $p = $p|0;
 var $$0 = 0, $$01 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $1 = HEAP32[$p>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$01 = $1;
  }
 } else {
  $$01 = $s;
 }
 $3 = (_strspn($$01,$sep)|0);
 $4 = (($$01) + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  HEAP32[$p>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (_strcspn($4,$sep)|0);
 $$sum = (($7) + ($3))|0;
 $8 = (($$01) + ($$sum)|0);
 HEAP32[$p>>2] = $8;
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  HEAP32[$p>>2] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$sum2 = (($$sum) + 1)|0;
  $11 = (($$01) + ($$sum2)|0);
  HEAP32[$p>>2] = $11;
  HEAP8[$8>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[227423872>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((227423872 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((227423872 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[227423872>>2] = $22;
     } else {
      $23 = HEAP32[((227423872 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((227423872 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((227423872 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((227423872 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[227423872>>2] = $74;
      } else {
       $75 = HEAP32[((227423872 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((227423872 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((227423872 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((227423872 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[227423872>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[227423872>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((227423872 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((227423872 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((227423872 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((227423872 + 8|0))>>2] = $81;
     HEAP32[((227423872 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((227423872 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((227423872 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((227423872 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((227423872 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((227423872 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((227423872 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((227423872 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((227423872 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((227423872 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((227423872 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((227423872 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((227423872 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((227423872 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[227423872>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[227423872>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((227423872 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((227423872 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((227423872 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((227423872 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((227423872 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((227423872 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((227423872 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L126: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((227423872 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((227423872 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((227423872 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((227423872 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((227423872 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((227423872 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((227423872 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((227423872 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((227423872 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((227423872 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((227423872 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[227423872>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          do {
           if ($431) {
            $432 = $428 | $429;
            HEAP32[227423872>>2] = $432;
            $$sum14$pre$i = (($426) + 2)|0;
            $$pre$i25 = ((227423872 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
           } else {
            $$sum17$i = (($426) + 2)|0;
            $433 = ((227423872 + ($$sum17$i<<2)|0) + 40|0);
            $434 = HEAP32[$433>>2]|0;
            $435 = HEAP32[((227423872 + 16|0))>>2]|0;
            $436 = ($434>>>0)<($435>>>0);
            if (!($436)) {
             $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((227423872 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((227423872 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((227423872 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L224: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L224;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((227423872 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L204;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((227423872 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((227423872 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((227423872 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((227423872 + 20|0))>>2] = $516;
   HEAP32[((227423872 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((227423872 + 8|0))>>2] = 0;
   HEAP32[((227423872 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((227423872 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((227423872 + 12|0))>>2] = $530;
  $531 = HEAP32[((227423872 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((227423872 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[227424344>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((227424344 + 8|0))>>2] = $540;
    HEAP32[((227424344 + 4|0))>>2] = $540;
    HEAP32[((227424344 + 12|0))>>2] = -1;
    HEAP32[((227424344 + 16|0))>>2] = -1;
    HEAP32[((227424344 + 20|0))>>2] = 0;
    HEAP32[((227423872 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[227424344>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((227424344 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((227423872 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((227423872 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((227423872 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((227423872 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((227423872 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((227423872 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((227424344 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((227423872 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((227423872 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((227424344 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((227423872 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((227423872 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((227423872 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((227423872 + 432|0))>>2] = $633;
  $634 = HEAP32[((227423872 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((227423872 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((227423872 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((227423872 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((227423872 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((227423872 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((227423872 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((227423872 + 460|0))>>2] = 0;
    $641 = HEAP32[227424344>>2]|0;
    HEAP32[((227423872 + 36|0))>>2] = $641;
    HEAP32[((227423872 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((227423872 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((227423872 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((227423872 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((227423872 + 24|0))>>2] = $654;
    HEAP32[((227423872 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((227424344 + 16|0))>>2]|0;
    HEAP32[((227423872 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((227423872 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((227423872 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((227423872 + 24|0))>>2] = $684;
       HEAP32[((227423872 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((227424344 + 16|0))>>2]|0;
       HEAP32[((227423872 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((227423872 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((227423872 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((227423872 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((227423872 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L348: do {
       if ($730) {
        $731 = HEAP32[((227423872 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((227423872 + 12|0))>>2] = $732;
        HEAP32[((227423872 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((227423872 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((227423872 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((227423872 + 8|0))>>2] = $738;
         HEAP32[((227423872 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L356: do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((227423872 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = HEAP32[((227423872 + 16|0))>>2]|0;
             $757 = ($750>>>0)<($756>>>0);
             if ($757) {
              _abort();
              // unreachable;
             }
             $758 = (($750) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($721|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[227423872>>2]|0;
            $765 = $764 & $763;
            HEAP32[227423872>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre57$i$i = (($752) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $767 = HEAP32[((227423872 + 16|0))>>2]|0;
             $768 = ($752>>>0)<($767>>>0);
             if ($768) {
              _abort();
              // unreachable;
             }
             $769 = (($752) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770|0)==($721|0);
             if ($771) {
              $$pre$phi58$i$iZ2D = $769;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((227423872 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((227423872 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if ($802) {
            break;
           }
           $$sum30$i$i = (($tsize$246$i) + 28)|0;
           $$sum113$i = (($$sum30$i$i) + ($720))|0;
           $803 = (($tbase$247$i) + ($$sum113$i)|0);
           $804 = HEAP32[$803>>2]|0;
           $805 = ((227423872 + ($804<<2)|0) + 304|0);
           $806 = HEAP32[$805>>2]|0;
           $807 = ($721|0)==($806|0);
           do {
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $808 = 1 << $804;
             $809 = $808 ^ -1;
             $810 = HEAP32[((227423872 + 4|0))>>2]|0;
             $811 = $810 & $809;
             HEAP32[((227423872 + 4|0))>>2] = $811;
             break L356;
            } else {
             $812 = HEAP32[((227423872 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break L356;
             }
            }
           } while(0);
           $819 = HEAP32[((227423872 + 16|0))>>2]|0;
           $820 = ($R$1$i$i>>>0)<($819>>>0);
           if ($820) {
            _abort();
            // unreachable;
           }
           $821 = (($R$1$i$i) + 24|0);
           HEAP32[$821>>2] = $774;
           $$sum3132$i$i = $720 | 16;
           $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
           $822 = (($tbase$247$i) + ($$sum114$i)|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = ($823|0)==(0|0);
           do {
            if (!($824)) {
             $825 = HEAP32[((227423872 + 16|0))>>2]|0;
             $826 = ($823>>>0)<($825>>>0);
             if ($826) {
              _abort();
              // unreachable;
             } else {
              $827 = (($R$1$i$i) + 16|0);
              HEAP32[$827>>2] = $823;
              $828 = (($823) + 24|0);
              HEAP32[$828>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
           $829 = (($tbase$247$i) + ($$sum115$i)|0);
           $830 = HEAP32[$829>>2]|0;
           $831 = ($830|0)==(0|0);
           if ($831) {
            break;
           }
           $832 = HEAP32[((227423872 + 16|0))>>2]|0;
           $833 = ($830>>>0)<($832>>>0);
           if ($833) {
            _abort();
            // unreachable;
           } else {
            $834 = (($R$1$i$i) + 20|0);
            HEAP32[$834>>2] = $830;
            $835 = (($830) + 24|0);
            HEAP32[$835>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((227423872 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[227423872>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         do {
          if ($851) {
           $852 = $848 | $849;
           HEAP32[227423872>>2] = $852;
           $$sum26$pre$i$i = (($846) + 2)|0;
           $$pre$i25$i = ((227423872 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
          } else {
           $$sum29$i$i = (($846) + 2)|0;
           $853 = ((227423872 + ($$sum29$i$i<<2)|0) + 40|0);
           $854 = HEAP32[$853>>2]|0;
           $855 = HEAP32[((227423872 + 16|0))>>2]|0;
           $856 = ($854>>>0)<($855>>>0);
           if (!($856)) {
            $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        do {
         if ($861) {
          $I7$0$i$i = 0;
         } else {
          $862 = ($qsize$0$i$i>>>0)>(16777215);
          if ($862) {
           $I7$0$i$i = 31;
           break;
          }
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        } while(0);
        $885 = ((227423872 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((227423872 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((227423872 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L445: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L445;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((227423872 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L348;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((227423872 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((227423872 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((227423872 + 24|0))>>2] = $958;
    HEAP32[((227423872 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((227424344 + 16|0))>>2]|0;
    HEAP32[((227423872 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((227423872 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((227423872 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((227423872 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((227423872 + 448|0))+12>>2]|0;
    HEAP32[((227423872 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((227423872 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((227423872 + 460|0))>>2] = 0;
    HEAP32[((227423872 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((227423872 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[227423872>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      do {
       if ($990) {
        $991 = $987 | $988;
        HEAP32[227423872>>2] = $991;
        $$sum10$pre$i$i = (($985) + 2)|0;
        $$pre$i$i = ((227423872 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
       } else {
        $$sum11$i$i = (($985) + 2)|0;
        $992 = ((227423872 + ($$sum11$i$i<<2)|0) + 40|0);
        $993 = HEAP32[$992>>2]|0;
        $994 = HEAP32[((227423872 + 16|0))>>2]|0;
        $995 = ($993>>>0)<($994>>>0);
        if (!($995)) {
         $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((227423872 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((227423872 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((227423872 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L499: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L499;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((227423872 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((227423872 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((227423872 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((227423872 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((227423872 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((227423872 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((227423872 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((227423872 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((227423872 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((227423872 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[227423872>>2]|0;
     $36 = $35 & $34;
     HEAP32[227423872>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((227423872 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((227423872 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((227423872 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((227423872 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((227423872 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((227423872 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((227423872 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((227423872 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((227423872 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((227423872 + 12|0))>>2] = $122;
   HEAP32[((227423872 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((227423872 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((227423872 + 20|0))>>2] = 0;
   HEAP32[((227423872 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((227423872 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((227423872 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((227423872 + 8|0))>>2] = $130;
   HEAP32[((227423872 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((227423872 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((227423872 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[227423872>>2]|0;
     $154 = $153 & $152;
     HEAP32[227423872>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((227423872 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((227423872 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((227423872 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((227423872 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((227423872 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((227423872 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((227423872 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((227423872 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((227423872 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((227423872 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((227423872 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((227423872 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((227423872 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[227423872>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[227423872>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((227423872 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((227423872 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((227423872 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((227423872 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((227423872 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((227423872 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L205: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L205;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((227423872 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((227423872 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((227423872 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((227423872 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((227423872 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((227423872 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$121 = 0, $$122 = 0, $$18 = 0, $$19 = 0, $$base = 0, $$base16 = 0, $$lcssa = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum1352 = 0, $$sum14 = 0, $$sum15 = 0, $$sum9 = 0, $$sum934 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$123 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$744 = 0;
 var $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond26 = 0, $or$cond2628 = 0, $phitmp93 = 0, $x$068 = 0, $x$135 = 0, $x$253 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $278 = 0;$279 = 0;
  tempRet0 = $278;
  STACKTOP = sp;return ($279|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   break;
  }
 }
 $16 = ($13|0)==(45);
 do {
  if ((($13|0) == 43) | (($13|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $13;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond = $27 & $28;
 do {
  if ($or$cond) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    $$base = $25 ? 8 : $base;
    $$1 = $$base;$c$1 = $37;
    label = 32;
    break;
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum15 = (($46) + 1)|0;
   $47 = (227424368 + ($$sum15)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $278 = 0;$279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;return ($279|0);
    }
    if ($51) {
     $278 = 0;$279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;return ($279|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $278 = 0;$279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;return ($279|0);
   } else {
    $$122 = 16;$c$123 = $46;
    label = 47;
   }
  } else {
   $$base16 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (227424368 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base16>>>0);
   if ($60) {
    $$1 = $$base16;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $278 = 0;$279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;return ($279|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $70 = $67;$x$068 = 0;
    while(1) {
     $69 = (($x$068) + ($70))|0;
     $71 = HEAP32[$3>>2]|0;
     $72 = HEAP32[$4>>2]|0;
     $73 = ($71>>>0)<($72>>>0);
     if ($73) {
      $74 = (($71) + 1|0);
      HEAP32[$3>>2] = $74;
      $75 = HEAP8[$71>>0]|0;
      $76 = $75&255;
      $c$2$be = $76;
     } else {
      $77 = (___shgetc($f)|0);
      $c$2$be = $77;
     }
     $78 = (($c$2$be) + -48)|0;
     $79 = ($78>>>0)<(10);
     $80 = ($69>>>0)<(429496729);
     $$ = $79 & $80;
     if (!($$)) {
      break;
     }
     $phitmp93 = ($69*10)|0;
     $70 = $78;$x$068 = $phitmp93;
    }
    $280 = $69;$281 = 0;$c$2$lcssa = $c$2$be;
   } else {
    $280 = 0;$281 = 0;$c$2$lcssa = $c$1;
   }
   $81 = (($c$2$lcssa) + -48)|0;
   $82 = ($81>>>0)<(10);
   if ($82) {
    $83 = $280;$84 = $281;$88 = $81;$c$359 = $c$2$lcssa;
    while(1) {
     $85 = (___muldi3(($83|0),($84|0),10,0)|0);
     $86 = tempRet0;
     $87 = ($88|0)<(0);
     $89 = $87 << 31 >> 31;
     $90 = $88 ^ -1;
     $91 = $89 ^ -1;
     $92 = ($86>>>0)>($91>>>0);
     $93 = ($86|0)==($91|0);
     $94 = ($85>>>0)>($90>>>0);
     $95 = $93 & $94;
     $96 = $92 | $95;
     if ($96) {
      $$lcssa = $88;$282 = $83;$283 = $84;$c$3$lcssa = $c$359;
      break;
     }
     $97 = (_i64Add(($85|0),($86|0),($88|0),($89|0))|0);
     $98 = tempRet0;
     $99 = HEAP32[$3>>2]|0;
     $100 = HEAP32[$4>>2]|0;
     $101 = ($99>>>0)<($100>>>0);
     if ($101) {
      $102 = (($99) + 1|0);
      HEAP32[$3>>2] = $102;
      $103 = HEAP8[$99>>0]|0;
      $104 = $103&255;
      $c$3$be = $104;
     } else {
      $105 = (___shgetc($f)|0);
      $c$3$be = $105;
     }
     $106 = (($c$3$be) + -48)|0;
     $107 = ($106>>>0)<(10);
     $108 = ($98>>>0)<(429496729);
     $109 = ($98|0)==(429496729);
     $110 = ($97>>>0)<(2576980378);
     $111 = $109 & $110;
     $112 = $108 | $111;
     $or$cond17 = $107 & $112;
     if ($or$cond17) {
      $83 = $97;$84 = $98;$88 = $106;$c$359 = $c$3$be;
     } else {
      $$lcssa = $106;$282 = $97;$283 = $98;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $113 = ($$lcssa>>>0)>(9);
    if ($113) {
     $252 = $283;$255 = $282;
    } else {
     $$121 = 10;$284 = $282;$285 = $283;$c$8 = $c$3$lcssa;
     label = 73;
    }
   } else {
    $252 = $281;$255 = $280;
   }
  } else {
   $$122 = $$1;$c$123 = $c$1;
   label = 47;
  }
 }
 L70: do {
  if ((label|0) == 47) {
   $114 = (($$122) + -1)|0;
   $115 = $114 & $$122;
   $116 = ($115|0)==(0);
   if ($116) {
    $121 = ($$122*23)|0;
    $122 = $121 >>> 5;
    $123 = $122 & 7;
    $124 = (227424632 + ($123)|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $125 << 24 >> 24;
    $$sum934 = (($c$123) + 1)|0;
    $127 = (227424368 + ($$sum934)|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128&255;
    $130 = ($129>>>0)<($$122>>>0);
    if ($130) {
     $133 = $129;$x$135 = 0;
     while(1) {
      $131 = $x$135 << $126;
      $132 = $133 | $131;
      $134 = HEAP32[$3>>2]|0;
      $135 = HEAP32[$4>>2]|0;
      $136 = ($134>>>0)<($135>>>0);
      if ($136) {
       $137 = (($134) + 1|0);
       HEAP32[$3>>2] = $137;
       $138 = HEAP8[$134>>0]|0;
       $139 = $138&255;
       $c$4$be = $139;
      } else {
       $140 = (___shgetc($f)|0);
       $c$4$be = $140;
      }
      $$sum9 = (($c$4$be) + 1)|0;
      $141 = (227424368 + ($$sum9)|0);
      $142 = HEAP8[$141>>0]|0;
      $143 = $142&255;
      $144 = ($143>>>0)<($$122>>>0);
      $145 = ($132>>>0)<(134217728);
      $$18 = $144 & $145;
      if ($$18) {
       $133 = $143;$x$135 = $132;
      } else {
       break;
      }
     }
     $149 = $142;$152 = 0;$155 = $132;$c$4$lcssa = $c$4$be;
    } else {
     $149 = $128;$152 = 0;$155 = 0;$c$4$lcssa = $c$123;
    }
    $146 = (_bitshift64Lshr(-1,-1,($126|0))|0);
    $147 = tempRet0;
    $148 = $149&255;
    $150 = ($148>>>0)>=($$122>>>0);
    $151 = ($152>>>0)>($147>>>0);
    $153 = ($152|0)==($147|0);
    $154 = ($155>>>0)>($146>>>0);
    $156 = $153 & $154;
    $157 = $151 | $156;
    $or$cond2628 = $150 | $157;
    if ($or$cond2628) {
     $$121 = $$122;$284 = $155;$285 = $152;$c$8 = $c$4$lcssa;
     label = 73;
     break;
    } else {
     $158 = $155;$159 = $152;$163 = $149;
    }
    while(1) {
     $160 = (_bitshift64Shl(($158|0),($159|0),($126|0))|0);
     $161 = tempRet0;
     $162 = $163&255;
     $164 = $162 | $160;
     $165 = HEAP32[$3>>2]|0;
     $166 = HEAP32[$4>>2]|0;
     $167 = ($165>>>0)<($166>>>0);
     if ($167) {
      $168 = (($165) + 1|0);
      HEAP32[$3>>2] = $168;
      $169 = HEAP8[$165>>0]|0;
      $170 = $169&255;
      $c$5$be = $170;
     } else {
      $171 = (___shgetc($f)|0);
      $c$5$be = $171;
     }
     $$sum10 = (($c$5$be) + 1)|0;
     $172 = (227424368 + ($$sum10)|0);
     $173 = HEAP8[$172>>0]|0;
     $174 = $173&255;
     $175 = ($174>>>0)>=($$122>>>0);
     $176 = ($161>>>0)>($147>>>0);
     $177 = ($161|0)==($147|0);
     $178 = ($164>>>0)>($146>>>0);
     $179 = $177 & $178;
     $180 = $176 | $179;
     $or$cond26 = $175 | $180;
     if ($or$cond26) {
      $$121 = $$122;$284 = $164;$285 = $161;$c$8 = $c$5$be;
      label = 73;
      break L70;
     } else {
      $158 = $164;$159 = $161;$163 = $173;
     }
    }
   }
   $$sum1352 = (($c$123) + 1)|0;
   $117 = (227424368 + ($$sum1352)|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = ($119>>>0)<($$122>>>0);
   if ($120) {
    $183 = $119;$x$253 = 0;
    while(1) {
     $181 = Math_imul($x$253, $$122)|0;
     $182 = (($183) + ($181))|0;
     $184 = HEAP32[$3>>2]|0;
     $185 = HEAP32[$4>>2]|0;
     $186 = ($184>>>0)<($185>>>0);
     if ($186) {
      $187 = (($184) + 1|0);
      HEAP32[$3>>2] = $187;
      $188 = HEAP8[$184>>0]|0;
      $189 = $188&255;
      $c$6$be = $189;
     } else {
      $190 = (___shgetc($f)|0);
      $c$6$be = $190;
     }
     $$sum13 = (($c$6$be) + 1)|0;
     $191 = (227424368 + ($$sum13)|0);
     $192 = HEAP8[$191>>0]|0;
     $193 = $192&255;
     $194 = ($193>>>0)<($$122>>>0);
     $195 = ($182>>>0)<(119304647);
     $$19 = $194 & $195;
     if ($$19) {
      $183 = $193;$x$253 = $182;
     } else {
      break;
     }
    }
    $197 = $192;$286 = $182;$287 = 0;$c$6$lcssa = $c$6$be;
   } else {
    $197 = $118;$286 = 0;$287 = 0;$c$6$lcssa = $c$123;
   }
   $196 = $197&255;
   $198 = ($196>>>0)<($$122>>>0);
   if ($198) {
    $199 = (___udivdi3(-1,-1,($$122|0),0)|0);
    $200 = tempRet0;
    $202 = $287;$205 = $286;$211 = $197;$c$744 = $c$6$lcssa;
    while(1) {
     $201 = ($202>>>0)>($200>>>0);
     $203 = ($202|0)==($200|0);
     $204 = ($205>>>0)>($199>>>0);
     $206 = $203 & $204;
     $207 = $201 | $206;
     if ($207) {
      $$121 = $$122;$284 = $205;$285 = $202;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $208 = (___muldi3(($205|0),($202|0),($$122|0),0)|0);
     $209 = tempRet0;
     $210 = $211&255;
     $212 = $210 ^ -1;
     $213 = ($209>>>0)>(4294967295);
     $214 = ($209|0)==(-1);
     $215 = ($208>>>0)>($212>>>0);
     $216 = $214 & $215;
     $217 = $213 | $216;
     if ($217) {
      $$121 = $$122;$284 = $205;$285 = $202;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $218 = (_i64Add(($210|0),0,($208|0),($209|0))|0);
     $219 = tempRet0;
     $220 = HEAP32[$3>>2]|0;
     $221 = HEAP32[$4>>2]|0;
     $222 = ($220>>>0)<($221>>>0);
     if ($222) {
      $223 = (($220) + 1|0);
      HEAP32[$3>>2] = $223;
      $224 = HEAP8[$220>>0]|0;
      $225 = $224&255;
      $c$7$be = $225;
     } else {
      $226 = (___shgetc($f)|0);
      $c$7$be = $226;
     }
     $$sum14 = (($c$7$be) + 1)|0;
     $227 = (227424368 + ($$sum14)|0);
     $228 = HEAP8[$227>>0]|0;
     $229 = $228&255;
     $230 = ($229>>>0)<($$122>>>0);
     if ($230) {
      $202 = $219;$205 = $218;$211 = $228;$c$744 = $c$7$be;
     } else {
      $$121 = $$122;$284 = $218;$285 = $219;$c$8 = $c$7$be;
      label = 73;
      break;
     }
    }
   } else {
    $$121 = $$122;$284 = $286;$285 = $287;$c$8 = $c$6$lcssa;
    label = 73;
   }
  }
 } while(0);
 if ((label|0) == 73) {
  $$sum11 = (($c$8) + 1)|0;
  $231 = (227424368 + ($$sum11)|0);
  $232 = HEAP8[$231>>0]|0;
  $233 = $232&255;
  $234 = ($233>>>0)<($$121>>>0);
  if ($234) {
   while(1) {
    $235 = HEAP32[$3>>2]|0;
    $236 = HEAP32[$4>>2]|0;
    $237 = ($235>>>0)<($236>>>0);
    if ($237) {
     $238 = (($235) + 1|0);
     HEAP32[$3>>2] = $238;
     $239 = HEAP8[$235>>0]|0;
     $240 = $239&255;
     $c$9$be = $240;
    } else {
     $241 = (___shgetc($f)|0);
     $c$9$be = $241;
    }
    $$sum12 = (($c$9$be) + 1)|0;
    $242 = (227424368 + ($$sum12)|0);
    $243 = HEAP8[$242>>0]|0;
    $244 = $243&255;
    $245 = ($244>>>0)<($$121>>>0);
    if (!($245)) {
     break;
    }
   }
   $246 = (___errno_location()|0);
   HEAP32[$246>>2] = 34;
   $252 = $1;$255 = $0;
  } else {
   $252 = $285;$255 = $284;
  }
 }
 $247 = HEAP32[$4>>2]|0;
 $248 = ($247|0)==(0|0);
 if (!($248)) {
  $249 = HEAP32[$3>>2]|0;
  $250 = (($249) + -1|0);
  HEAP32[$3>>2] = $250;
 }
 $251 = ($252>>>0)<($1>>>0);
 $253 = ($252|0)==($1|0);
 $254 = ($255>>>0)<($0>>>0);
 $256 = $253 & $254;
 $257 = $251 | $256;
 if (!($257)) {
  $258 = $0 & 1;
  $259 = ($258|0)==(0);
  $260 = (0)==(0);
  $261 = $259 & $260;
  $262 = ($neg$0|0)==(0);
  $or$cond20 = $261 & $262;
  if ($or$cond20) {
   $263 = (___errno_location()|0);
   HEAP32[$263>>2] = 34;
   $264 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $265 = tempRet0;
   $278 = $265;$279 = $264;
   tempRet0 = $278;
   STACKTOP = sp;return ($279|0);
  }
  $266 = ($252>>>0)>($1>>>0);
  $267 = ($252|0)==($1|0);
  $268 = ($255>>>0)>($0>>>0);
  $269 = $267 & $268;
  $270 = $266 | $269;
  if ($270) {
   $271 = (___errno_location()|0);
   HEAP32[$271>>2] = 34;
   $278 = $1;$279 = $0;
   tempRet0 = $278;
   STACKTOP = sp;return ($279|0);
  }
 }
 $272 = ($neg$0|0)<(0);
 $273 = $272 << 31 >> 31;
 $274 = $255 ^ $neg$0;
 $275 = $252 ^ $273;
 $276 = (_i64Subtract(($274|0),($275|0),($neg$0|0),($273|0))|0);
 $277 = tempRet0;
 $278 = $277;$279 = $276;
 tempRet0 = $278;
 STACKTOP = sp;return ($279|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$$i22 = 0, $$0 = 0.0, $$02$i = 0, $$08$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$10$i = 0, $$14$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$38$i = 0, $$388$i = 0, $$397$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa43$i = 0, $$lnz$0$i = 0;
 var $$neg20$i = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i17 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us53$i = 0, $$x$4$i = 0, $$y$3$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0;
 var $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0, $484 = 0.0, $485 = 0.0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0.0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0.0, $682 = 0, $683 = 0.0;
 var $684 = 0.0, $685 = 0.0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0.0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0.0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0.0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$061$i = 0, $a$1$i = 0, $a$2$ph40$i = 0;
 var $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$427$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$07$i = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$169 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$364 = 0, $c$4 = 0;
 var $c$5 = 0, $c$6 = 0, $carry$063$i = 0, $carry1$0$us$i = 0, $carry1$0$us49$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us54$i = 0, $carry3$030$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us44$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0;
 var $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i9 = 0, $gotdig$2$i = 0, $gotdig$2$i11 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$381$i = 0, $gotdig$393$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i12 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0;
 var $gotrad$194$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$025$i = 0, $i$068 = 0, $i$1$i = 0, $i$166 = 0, $i$263 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$086$i = 0, $j$096$i = 0, $j$2$i = 0, $j$371$i = 0, $k$0$lcssa$i = 0, $k$084$i = 0;
 var $k$095$i = 0, $k$2$i = 0, $k$3$i = 0, $k$462$i = 0, $k$5$in$us$i = 0, $k$5$in$us48$i = 0, $k$5$us$i = 0, $k$5$us50$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us56$i = 0, $k$628$i = 0, $lnz$0$lcssa$i = 0, $lnz$079$i = 0, $lnz$092$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0;
 var $or$cond106$not = 0, $or$cond11$i = 0, $or$cond12$us$i = 0, $or$cond12$us55$i = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond7$i = 0, $or$cond789$i = 0, $or$cond8 = 0, $rp$0$lcssa162$i = 0, $rp$060$i = 0, $rp$1$i18 = 0, $rp$2$ph38$i = 0, $rp$3$i$ph = 0;
 var $rp$3$ph33$i = 0, $rp$426$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$313$i = 0, $x$4$lcssa$i = 0, $x$48$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$39$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph39$i = 0, $z$1$us$i = 0, $z$1$us45$i = 0, $z$2$us$i = 0, $z$2$us47$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us57$i = 0, $z$4$i = 0, $z$5$ph$i = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 $12 = ($9|0)==(45);
 do {
  if ((($9|0) == 43) | (($9|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $9;$sign$0 = 1;
  }
 } while(0);
 $c$169 = $c$0;$i$068 = 0;
 while(1) {
  $23 = $c$169 | 32;
  $24 = (227424648 + ($i$068)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$169;$i$0$lcssa = $i$068;
   break;
  }
  $28 = ($i$068>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$169;
   }
  } while(0);
  $36 = (($i$068) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$169 = $c$2;$i$068 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)<(4);
   $39 = ($pok|0)==(0);
   $or$cond = $38 | $39;
   if (!($or$cond)) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $52 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($52) {
     $c$364 = $c$1$lcssa;$i$263 = 0;
     while(1) {
      $53 = $c$364 | 32;
      $54 = (227424664 + ($i$263)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55 << 24 >> 24;
      $57 = ($53|0)==($56|0);
      if (!($57)) {
       $c$5 = $c$364;$i$3 = $i$263;
       break L34;
      }
      $58 = ($i$263>>>0)<(2);
      do {
       if ($58) {
        $59 = HEAP32[$0>>2]|0;
        $60 = HEAP32[$1>>2]|0;
        $61 = ($59>>>0)<($60>>>0);
        if ($61) {
         $62 = (($59) + 1|0);
         HEAP32[$0>>2] = $62;
         $63 = HEAP8[$59>>0]|0;
         $64 = $63&255;
         $c$4 = $64;
         break;
        } else {
         $65 = (___shgetc($f)|0);
         $c$4 = $65;
         break;
        }
       } else {
        $c$4 = $c$364;
       }
      } while(0);
      $66 = (($i$263) + 1)|0;
      $67 = ($66>>>0)<(3);
      if ($67) {
       $c$364 = $c$4;$i$263 = $66;
      } else {
       $c$5 = $c$4;$i$3 = $66;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 0)) {
    $113 = ($c$5|0)==(48);
    do {
     if ($113) {
      $114 = HEAP32[$0>>2]|0;
      $115 = HEAP32[$1>>2]|0;
      $116 = ($114>>>0)<($115>>>0);
      if ($116) {
       $117 = (($114) + 1|0);
       HEAP32[$0>>2] = $117;
       $118 = HEAP8[$114>>0]|0;
       $119 = $118&255;
       $122 = $119;
      } else {
       $120 = (___shgetc($f)|0);
       $122 = $120;
      }
      $121 = $122 | 32;
      $123 = ($121|0)==(120);
      if (!($123)) {
       $321 = HEAP32[$1>>2]|0;
       $322 = ($321|0)==(0|0);
       if ($322) {
        $c$6 = 48;
        break;
       }
       $323 = HEAP32[$0>>2]|0;
       $324 = (($323) + -1|0);
       HEAP32[$0>>2] = $324;
       $c$6 = 48;
       break;
      }
      $124 = HEAP32[$0>>2]|0;
      $125 = HEAP32[$1>>2]|0;
      $126 = ($124>>>0)<($125>>>0);
      if ($126) {
       $127 = (($124) + 1|0);
       HEAP32[$0>>2] = $127;
       $128 = HEAP8[$124>>0]|0;
       $129 = $128&255;
       $c$0$i = $129;$gotdig$0$i = 0;
      } else {
       $130 = (___shgetc($f)|0);
       $c$0$i = $130;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $169 = 0;$172 = 0;$212 = 0;$214 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $131 = HEAP32[$0>>2]|0;
       $132 = HEAP32[$1>>2]|0;
       $133 = ($131>>>0)<($132>>>0);
       if ($133) {
        $134 = (($131) + 1|0);
        HEAP32[$0>>2] = $134;
        $135 = HEAP8[$131>>0]|0;
        $136 = $135&255;
        $c$0$i = $136;$gotdig$0$i = 1;
        continue;
       } else {
        $137 = (___shgetc($f)|0);
        $c$0$i = $137;$gotdig$0$i = 1;
        continue;
       }
      }
      L66: do {
       if ((label|0) == 70) {
        $138 = HEAP32[$0>>2]|0;
        $139 = HEAP32[$1>>2]|0;
        $140 = ($138>>>0)<($139>>>0);
        if ($140) {
         $141 = (($138) + 1|0);
         HEAP32[$0>>2] = $141;
         $142 = HEAP8[$138>>0]|0;
         $143 = $142&255;
         $c$1$ph$i = $143;
        } else {
         $144 = (___shgetc($f)|0);
         $c$1$ph$i = $144;
        }
        $145 = ($c$1$ph$i|0)==(48);
        if ($145) {
         $155 = -1;$156 = -1;
         while(1) {
          $146 = HEAP32[$0>>2]|0;
          $147 = HEAP32[$1>>2]|0;
          $148 = ($146>>>0)<($147>>>0);
          if ($148) {
           $149 = (($146) + 1|0);
           HEAP32[$0>>2] = $149;
           $150 = HEAP8[$146>>0]|0;
           $151 = $150&255;
           $154 = $151;
          } else {
           $152 = (___shgetc($f)|0);
           $154 = $152;
          }
          $153 = ($154|0)==(48);
          if (!($153)) {
           $169 = 0;$172 = 0;$212 = $155;$214 = $156;$c$2$i = $154;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break L66;
          }
          $157 = (_i64Add(($155|0),($156|0),-1,-1)|0);
          $158 = tempRet0;
          $155 = $157;$156 = $158;
         }
        } else {
         $169 = 0;$172 = 0;$212 = 0;$214 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
      } while(0);
      L79: while(1) {
       $159 = (($c$2$i) + -48)|0;
       $160 = ($159>>>0)<(10);
       do {
        if ($160) {
         $d$0$i = $159;
         label = 84;
        } else {
         $161 = $c$2$i | 32;
         $162 = (($161) + -97)|0;
         $163 = ($162>>>0)<(6);
         $164 = ($c$2$i|0)==(46);
         $or$cond$i = $163 | $164;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L79;
         }
         if ($164) {
          $165 = ($gotrad$0$i|0)==(0);
          if ($165) {
           $712 = $172;$713 = $169;$714 = $172;$715 = $169;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L79;
          }
         } else {
          $166 = ($c$2$i|0)>(57);
          $167 = (($161) + -87)|0;
          $$38$i = $166 ? $167 : $159;
          $d$0$i = $$38$i;
          label = 84;
          break;
         }
        }
       } while(0);
       if ((label|0) == 84) {
        label = 0;
        $168 = ($169|0)<(0);
        $170 = ($169|0)==(0);
        $171 = ($172>>>0)<(8);
        $173 = $170 & $171;
        $174 = $168 | $173;
        do {
         if ($174) {
          $175 = $x$0$i << 4;
          $176 = (($d$0$i) + ($175))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
         } else {
          $177 = ($169|0)<(0);
          $178 = ($169|0)==(0);
          $179 = ($172>>>0)<(14);
          $180 = $178 & $179;
          $181 = $177 | $180;
          if ($181) {
           $182 = (+($d$0$i|0));
           $183 = $scale$0$i * 0.0625;
           $184 = $183 * $182;
           $185 = $y$0$i + $184;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
           break;
          }
          $186 = ($d$0$i|0)!=(0);
          $187 = ($gottail$0$i|0)==(0);
          $or$cond3$i = $186 & $187;
          if ($or$cond3$i) {
           $188 = $scale$0$i * 0.5;
           $189 = $y$0$i + $188;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
          } else {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          }
         }
        } while(0);
        $190 = (_i64Add(($172|0),($169|0),1,0)|0);
        $191 = tempRet0;
        $712 = $212;$713 = $214;$714 = $190;$715 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $192 = HEAP32[$0>>2]|0;
       $193 = HEAP32[$1>>2]|0;
       $194 = ($192>>>0)<($193>>>0);
       if ($194) {
        $195 = (($192) + 1|0);
        HEAP32[$0>>2] = $195;
        $196 = HEAP8[$192>>0]|0;
        $197 = $196&255;
        $169 = $715;$172 = $714;$212 = $712;$214 = $713;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $198 = (___shgetc($f)|0);
        $169 = $715;$172 = $714;$212 = $712;$214 = $713;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $199 = ($gotdig$2$i|0)==(0);
      if ($199) {
       $200 = HEAP32[$1>>2]|0;
       $201 = ($200|0)==(0|0);
       if (!($201)) {
        $202 = HEAP32[$0>>2]|0;
        $203 = (($202) + -1|0);
        HEAP32[$0>>2] = $203;
       }
       if ($39) {
        ___shlim($f,0);
       } else {
        if (!($201)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i|0)==(0);
      $211 = $210 ? $172 : $212;
      $213 = $210 ? $169 : $214;
      $215 = ($169|0)<(0);
      $216 = ($169|0)==(0);
      $217 = ($172>>>0)<(8);
      $218 = $216 & $217;
      $219 = $215 | $218;
      if ($219) {
       $221 = $172;$222 = $169;$x$313$i = $x$0$i;
       while(1) {
        $220 = $x$313$i << 4;
        $223 = (_i64Add(($221|0),($222|0),1,0)|0);
        $224 = tempRet0;
        $225 = ($224|0)<(0);
        $226 = ($224|0)==(0);
        $227 = ($223>>>0)<(8);
        $228 = $226 & $227;
        $229 = $225 | $228;
        if ($229) {
         $221 = $223;$222 = $224;$x$313$i = $220;
        } else {
         $x$3$lcssa$i = $220;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $230 = $c$2$lcssa$i | 32;
      $231 = ($230|0)==(112);
      do {
       if ($231) {
        $232 = (_scanexp($f,$pok)|0);
        $233 = tempRet0;
        $234 = ($232|0)==(0);
        $235 = ($233|0)==(-2147483648);
        $236 = $234 & $235;
        if ($236) {
         if ($39) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $237 = HEAP32[$1>>2]|0;
          $238 = ($237|0)==(0|0);
          if ($238) {
           $249 = 0;$250 = 0;
           break;
          }
          $239 = HEAP32[$0>>2]|0;
          $240 = (($239) + -1|0);
          HEAP32[$0>>2] = $240;
          $249 = 0;$250 = 0;
          break;
         }
        } else {
         $249 = $232;$250 = $233;
        }
       } else {
        $241 = HEAP32[$1>>2]|0;
        $242 = ($241|0)==(0|0);
        if ($242) {
         $249 = 0;$250 = 0;
        } else {
         $243 = HEAP32[$0>>2]|0;
         $244 = (($243) + -1|0);
         HEAP32[$0>>2] = $244;
         $249 = 0;$250 = 0;
        }
       }
      } while(0);
      $245 = (_bitshift64Shl(($211|0),($213|0),2)|0);
      $246 = tempRet0;
      $247 = (_i64Add(($245|0),($246|0),-32,-1)|0);
      $248 = tempRet0;
      $251 = (_i64Add(($247|0),($248|0),($249|0),($250|0))|0);
      $252 = tempRet0;
      $253 = ($x$3$lcssa$i|0)==(0);
      if ($253) {
       $254 = (+($sign$0|0));
       $255 = $254 * 0.0;
       $$0 = $255;
       STACKTOP = sp;return (+$$0);
      }
      $256 = (0 - ($emin$0$ph))|0;
      $257 = ($252|0)>(0);
      $258 = ($252|0)==(0);
      $259 = ($251>>>0)>($256>>>0);
      $260 = $258 & $259;
      $261 = $257 | $260;
      if ($261) {
       $262 = (___errno_location()|0);
       HEAP32[$262>>2] = 34;
       $263 = (+($sign$0|0));
       $264 = $263 * 1.7976931348623157E+308;
       $265 = $264 * 1.7976931348623157E+308;
       $$0 = $265;
       STACKTOP = sp;return (+$$0);
      }
      $266 = (($emin$0$ph) + -106)|0;
      $267 = ($266|0)<(0);
      $268 = $267 << 31 >> 31;
      $269 = ($252|0)<($268|0);
      $270 = ($252|0)==($268|0);
      $271 = ($251>>>0)<($266>>>0);
      $272 = $270 & $271;
      $273 = $269 | $272;
      if ($273) {
       $275 = (___errno_location()|0);
       HEAP32[$275>>2] = 34;
       $276 = (+($sign$0|0));
       $277 = $276 * 2.2250738585072014E-308;
       $278 = $277 * 2.2250738585072014E-308;
       $$0 = $278;
       STACKTOP = sp;return (+$$0);
      }
      $274 = ($x$3$lcssa$i|0)>(-1);
      if ($274) {
       $283 = $251;$284 = $252;$x$48$i = $x$3$lcssa$i;$y$39$i = $y$0$i;
       while(1) {
        $279 = !($y$39$i >= 0.5);
        $280 = $x$48$i << 1;
        if ($279) {
         $$pn$i = $y$39$i;$x$5$i = $280;
        } else {
         $281 = $280 | 1;
         $282 = $y$39$i + -1.0;
         $$pn$i = $282;$x$5$i = $281;
        }
        $y$4$i = $y$39$i + $$pn$i;
        $285 = (_i64Add(($283|0),($284|0),-1,-1)|0);
        $286 = tempRet0;
        $287 = ($x$5$i|0)>(-1);
        if ($287) {
         $283 = $285;$284 = $286;$x$48$i = $x$5$i;$y$39$i = $y$4$i;
        } else {
         $292 = $285;$293 = $286;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $292 = $251;$293 = $252;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $288 = ($emin$0$ph|0)<(0);
      $289 = $288 << 31 >> 31;
      $290 = (_i64Subtract(32,0,($emin$0$ph|0),($289|0))|0);
      $291 = tempRet0;
      $294 = (_i64Add(($292|0),($293|0),($290|0),($291|0))|0);
      $295 = tempRet0;
      $296 = (0)>($295|0);
      $297 = (0)==($295|0);
      $298 = ($bits$0$ph>>>0)>($294>>>0);
      $299 = $297 & $298;
      $300 = $296 | $299;
      if ($300) {
       $301 = ($294|0)<(0);
       $$$i = $301 ? 0 : $294;
       $$02$i = $$$i;
      } else {
       $$02$i = $bits$0$ph;
      }
      $302 = ($$02$i|0)<(53);
      do {
       if ($302) {
        $303 = (84 - ($$02$i))|0;
        $304 = (+_scalbn(1.0,$303));
        $305 = (+($sign$0|0));
        $306 = (+_copysignl((+$304),(+$305)));
        $307 = ($$02$i|0)<(32);
        $308 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $307 & $308;
        if (!($or$cond4$i)) {
         $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
         break;
        }
        $309 = $x$4$lcssa$i & 1;
        $310 = ($309|0)==(0);
        $311 = $309 ^ 1;
        $$x$4$i = (($311) + ($x$4$lcssa$i))|0;
        $$y$3$i = $310 ? 0.0 : $y$3$lcssa$i;
        $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $$x$4$i;$y$5$i = $$y$3$i;
       } else {
        $$pre$i = (+($sign$0|0));
        $$pre$phi$iZ2D = $$pre$i;$bias$07$i = 0.0;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
       }
      } while(0);
      $312 = (+($x$6$i>>>0));
      $313 = $$pre$phi$iZ2D * $312;
      $314 = $bias$07$i + $313;
      $315 = $$pre$phi$iZ2D * $y$5$i;
      $316 = $315 + $314;
      $317 = $316 - $bias$07$i;
      $318 = $317 != 0.0;
      if (!($318)) {
       $319 = (___errno_location()|0);
       HEAP32[$319>>2] = 34;
      }
      $320 = (+_scalbnl($317,$292));
      $$0 = $320;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $325 = (0 - ($sum$i))|0;
    $$08$i = $c$6;$gotdig$0$i9 = 0;
    while(1) {
     if ((($$08$i|0) == 46)) {
      label = 139;
      break;
     } else if (!((($$08$i|0) == 48))) {
      $$2$i = $$08$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 0;
      break;
     }
     $326 = HEAP32[$0>>2]|0;
     $327 = HEAP32[$1>>2]|0;
     $328 = ($326>>>0)<($327>>>0);
     if ($328) {
      $329 = (($326) + 1|0);
      HEAP32[$0>>2] = $329;
      $330 = HEAP8[$326>>0]|0;
      $331 = $330&255;
      $$08$i = $331;$gotdig$0$i9 = 1;
      continue;
     } else {
      $332 = (___shgetc($f)|0);
      $$08$i = $332;$gotdig$0$i9 = 1;
      continue;
     }
    }
    L168: do {
     if ((label|0) == 139) {
      $333 = HEAP32[$0>>2]|0;
      $334 = HEAP32[$1>>2]|0;
      $335 = ($333>>>0)<($334>>>0);
      if ($335) {
       $336 = (($333) + 1|0);
       HEAP32[$0>>2] = $336;
       $337 = HEAP8[$333>>0]|0;
       $338 = $337&255;
       $$1$ph$i = $338;
      } else {
       $339 = (___shgetc($f)|0);
       $$1$ph$i = $339;
      }
      $340 = ($$1$ph$i|0)==(48);
      if ($340) {
       $349 = -1;$350 = -1;
       while(1) {
        $341 = HEAP32[$0>>2]|0;
        $342 = HEAP32[$1>>2]|0;
        $343 = ($341>>>0)<($342>>>0);
        if ($343) {
         $344 = (($341) + 1|0);
         HEAP32[$0>>2] = $344;
         $345 = HEAP8[$341>>0]|0;
         $346 = $345&255;
         $$1$be$i = $346;
        } else {
         $347 = (___shgetc($f)|0);
         $$1$be$i = $347;
        }
        $348 = ($$1$be$i|0)==(48);
        if (!($348)) {
         $$2$i = $$1$be$i;$716 = $349;$717 = $350;$gotdig$2$i11 = 1;$gotrad$0$i12 = 1;
         break L168;
        }
        $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
        $352 = tempRet0;
        $349 = $351;$350 = $352;
       }
      } else {
       $$2$i = $$1$ph$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 1;
      }
     }
    } while(0);
    HEAP32[$x$i>>2] = 0;
    $353 = (($$2$i) + -48)|0;
    $354 = ($353>>>0)<(10);
    $355 = ($$2$i|0)==(46);
    $or$cond789$i = $354 | $355;
    L182: do {
     if ($or$cond789$i) {
      $356 = (($x$i) + 496|0);
      $$397$i = $$2$i;$358 = 0;$359 = 0;$718 = $355;$719 = $353;$720 = $716;$721 = $717;$gotdig$393$i = $gotdig$2$i11;$gotrad$194$i = $gotrad$0$i12;$j$096$i = 0;$k$095$i = 0;$lnz$092$i = 0;
      while(1) {
       do {
        if ($718) {
         $cond$i = ($gotrad$194$i|0)==(0);
         if ($cond$i) {
          $722 = $358;$723 = $359;$724 = $358;$725 = $359;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = 1;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
         } else {
          $$388$i = $$397$i;$405 = $720;$406 = $721;$421 = $358;$424 = $359;$gotdig$381$i = $gotdig$393$i;$j$086$i = $j$096$i;$k$084$i = $k$095$i;$lnz$079$i = $lnz$092$i;
          break L182;
         }
        } else {
         $357 = ($k$095$i|0)<(125);
         $360 = (_i64Add(($358|0),($359|0),1,0)|0);
         $361 = tempRet0;
         $362 = ($$397$i|0)!=(48);
         if (!($357)) {
          if (!($362)) {
           $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
           break;
          }
          $372 = HEAP32[$356>>2]|0;
          $373 = $372 | 1;
          HEAP32[$356>>2] = $373;
          $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
          break;
         }
         $$lnz$0$i = $362 ? $360 : $lnz$092$i;
         $363 = ($j$096$i|0)==(0);
         $364 = (($x$i) + ($k$095$i<<2)|0);
         if ($363) {
          $storemerge$i = $719;
         } else {
          $365 = HEAP32[$364>>2]|0;
          $366 = ($365*10)|0;
          $367 = (($$397$i) + -48)|0;
          $368 = (($367) + ($366))|0;
          $storemerge$i = $368;
         }
         HEAP32[$364>>2] = $storemerge$i;
         $369 = (($j$096$i) + 1)|0;
         $370 = ($369|0)==(9);
         $371 = $370&1;
         $$k$0$i = (($371) + ($k$095$i))|0;
         $$10$i = $370 ? 0 : $369;
         $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$194$i;$j$2$i = $$10$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $374 = HEAP32[$0>>2]|0;
       $375 = HEAP32[$1>>2]|0;
       $376 = ($374>>>0)<($375>>>0);
       if ($376) {
        $377 = (($374) + 1|0);
        HEAP32[$0>>2] = $377;
        $378 = HEAP8[$374>>0]|0;
        $379 = $378&255;
        $$3$be$i = $379;
       } else {
        $380 = (___shgetc($f)|0);
        $$3$be$i = $380;
       }
       $381 = (($$3$be$i) + -48)|0;
       $382 = ($381>>>0)<(10);
       $383 = ($$3$be$i|0)==(46);
       $or$cond7$i = $382 | $383;
       if ($or$cond7$i) {
        $$397$i = $$3$be$i;$358 = $724;$359 = $725;$718 = $383;$719 = $381;$720 = $722;$721 = $723;$gotdig$393$i = $gotdig$4$i;$gotrad$194$i = $gotrad$2$i;$j$096$i = $j$2$i;$k$095$i = $k$2$i;$lnz$092$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$386 = $724;$387 = $722;$389 = $725;$390 = $723;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 162;
        break;
       }
      }
     } else {
      $$3$lcssa$i = $$2$i;$386 = 0;$387 = $716;$389 = 0;$390 = $717;$gotdig$3$lcssa$i = $gotdig$2$i11;$gotrad$1$lcssa$i = $gotrad$0$i12;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 162;
     }
    } while(0);
    if ((label|0) == 162) {
     $384 = ($gotrad$1$lcssa$i|0)==(0);
     $385 = $384 ? $386 : $387;
     $388 = $384 ? $389 : $390;
     $$388$i = $$3$lcssa$i;$405 = $385;$406 = $388;$421 = $386;$424 = $389;$gotdig$381$i = $gotdig$3$lcssa$i;$j$086$i = $j$0$lcssa$i;$k$084$i = $k$0$lcssa$i;$lnz$079$i = $lnz$0$lcssa$i;
    }
    $391 = ($gotdig$381$i|0)!=(0);
    if ($391) {
     $392 = $$388$i | 32;
     $393 = ($392|0)==(101);
     if ($393) {
      $394 = (_scanexp($f,$pok)|0);
      $395 = tempRet0;
      $396 = ($394|0)==(0);
      $397 = ($395|0)==(-2147483648);
      $398 = $396 & $397;
      do {
       if ($398) {
        if ($39) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $399 = HEAP32[$1>>2]|0;
         $400 = ($399|0)==(0|0);
         if ($400) {
          $403 = 0;$404 = 0;
          break;
         }
         $401 = HEAP32[$0>>2]|0;
         $402 = (($401) + -1|0);
         HEAP32[$0>>2] = $402;
         $403 = 0;$404 = 0;
         break;
        }
       } else {
        $403 = $394;$404 = $395;
       }
      } while(0);
      $407 = (_i64Add(($403|0),($404|0),($405|0),($406|0))|0);
      $408 = tempRet0;
      $420 = $407;$423 = $408;
     } else {
      label = 171;
     }
    } else {
     label = 171;
    }
    if ((label|0) == 171) {
     $409 = ($$388$i|0)>(-1);
     if ($409) {
      $410 = HEAP32[$1>>2]|0;
      $411 = ($410|0)==(0|0);
      if ($411) {
       $420 = $405;$423 = $406;
      } else {
       $412 = HEAP32[$0>>2]|0;
       $413 = (($412) + -1|0);
       HEAP32[$0>>2] = $413;
       $420 = $405;$423 = $406;
      }
     } else {
      $420 = $405;$423 = $406;
     }
    }
    if (!($391)) {
     $414 = (___errno_location()|0);
     HEAP32[$414>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $415 = HEAP32[$x$i>>2]|0;
    $416 = ($415|0)==(0);
    if ($416) {
     $417 = (+($sign$0|0));
     $418 = $417 * 0.0;
     $$0 = $418;
     STACKTOP = sp;return (+$$0);
    }
    $419 = ($420|0)==($421|0);
    $422 = ($423|0)==($424|0);
    $425 = $419 & $422;
    $426 = ($424|0)<(0);
    $427 = ($424|0)==(0);
    $428 = ($421>>>0)<(10);
    $429 = $427 & $428;
    $430 = $426 | $429;
    $or$cond$i15 = $425 & $430;
    do {
     if ($or$cond$i15) {
      $431 = ($bits$0$ph>>>0)>(30);
      if (!($431)) {
       $432 = $415 >>> $bits$0$ph;
       $433 = ($432|0)==(0);
       if (!($433)) {
        break;
       }
      }
      $434 = (+($sign$0|0));
      $435 = (+($415>>>0));
      $436 = $434 * $435;
      $$0 = $436;
      STACKTOP = sp;return (+$$0);
     }
    } while(0);
    $437 = (($emin$0$ph|0) / -2)&-1;
    $438 = ($437|0)<(0);
    $439 = $438 << 31 >> 31;
    $440 = ($423|0)>($439|0);
    $441 = ($423|0)==($439|0);
    $442 = ($420>>>0)>($437>>>0);
    $443 = $441 & $442;
    $444 = $440 | $443;
    if ($444) {
     $445 = (___errno_location()|0);
     HEAP32[$445>>2] = 34;
     $446 = (+($sign$0|0));
     $447 = $446 * 1.7976931348623157E+308;
     $448 = $447 * 1.7976931348623157E+308;
     $$0 = $448;
     STACKTOP = sp;return (+$$0);
    }
    $449 = (($emin$0$ph) + -106)|0;
    $450 = ($449|0)<(0);
    $451 = $450 << 31 >> 31;
    $452 = ($423|0)<($451|0);
    $453 = ($423|0)==($451|0);
    $454 = ($420>>>0)<($449>>>0);
    $455 = $453 & $454;
    $456 = $452 | $455;
    if ($456) {
     $457 = (___errno_location()|0);
     HEAP32[$457>>2] = 34;
     $458 = (+($sign$0|0));
     $459 = $458 * 2.2250738585072014E-308;
     $460 = $459 * 2.2250738585072014E-308;
     $$0 = $460;
     STACKTOP = sp;return (+$$0);
    }
    $461 = ($j$086$i|0)==(0);
    if ($461) {
     $k$3$i = $k$084$i;
    } else {
     $462 = ($j$086$i|0)<(9);
     if ($462) {
      $463 = (($x$i) + ($k$084$i<<2)|0);
      $$promoted$i = HEAP32[$463>>2]|0;
      $465 = $$promoted$i;$j$371$i = $j$086$i;
      while(1) {
       $464 = ($465*10)|0;
       $466 = (($j$371$i) + 1)|0;
       $exitcond$i = ($466|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $465 = $464;$j$371$i = $466;
       }
      }
      HEAP32[$463>>2] = $464;
     }
     $467 = (($k$084$i) + 1)|0;
     $k$3$i = $467;
    }
    $468 = ($lnz$079$i|0)<(9);
    do {
     if ($468) {
      $469 = ($lnz$079$i|0)<=($420|0);
      $470 = ($420|0)<(18);
      $or$cond3$i16 = $469 & $470;
      if ($or$cond3$i16) {
       $471 = ($420|0)==(9);
       if ($471) {
        $472 = (+($sign$0|0));
        $473 = HEAP32[$x$i>>2]|0;
        $474 = (+($473>>>0));
        $475 = $472 * $474;
        $$0 = $475;
        STACKTOP = sp;return (+$$0);
       }
       $476 = ($420|0)<(9);
       if ($476) {
        $477 = (+($sign$0|0));
        $478 = HEAP32[$x$i>>2]|0;
        $479 = (+($478>>>0));
        $480 = $477 * $479;
        $481 = (8 - ($420))|0;
        $482 = (227424680 + ($481<<2)|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = (+($483|0));
        $485 = $480 / $484;
        $$0 = $485;
        STACKTOP = sp;return (+$$0);
       }
       $486 = Math_imul($420, -3)|0;
       $$neg20$i = (($bits$0$ph) + 27)|0;
       $487 = (($$neg20$i) + ($486))|0;
       $488 = ($487|0)>(30);
       $$pre$i17 = HEAP32[$x$i>>2]|0;
       if (!($488)) {
        $489 = $$pre$i17 >>> $487;
        $490 = ($489|0)==(0);
        if (!($490)) {
         break;
        }
       }
       $491 = (+($sign$0|0));
       $492 = (+($$pre$i17>>>0));
       $493 = $491 * $492;
       $494 = (($420) + -10)|0;
       $495 = (227424680 + ($494<<2)|0);
       $496 = HEAP32[$495>>2]|0;
       $497 = (+($496|0));
       $498 = $493 * $497;
       $$0 = $498;
       STACKTOP = sp;return (+$$0);
      }
     }
    } while(0);
    $499 = (($420|0) % 9)&-1;
    $500 = ($499|0)==(0);
    if ($500) {
     $a$2$ph40$i = 0;$e2$0$ph$i = 0;$rp$2$ph38$i = $420;$z$1$ph39$i = $k$3$i;
    } else {
     $501 = ($420|0)>(-1);
     $502 = (($499) + 9)|0;
     $503 = $501 ? $499 : $502;
     $504 = (8 - ($503))|0;
     $505 = (227424680 + ($504<<2)|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = ($k$3$i|0)==(0);
     if ($507) {
      $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $420;$z$0$i = 0;
     } else {
      $508 = (1000000000 / ($506|0))&-1;
      $a$061$i = 0;$carry$063$i = 0;$k$462$i = 0;$rp$060$i = $420;
      while(1) {
       $509 = (($x$i) + ($k$462$i<<2)|0);
       $510 = HEAP32[$509>>2]|0;
       $511 = (($510>>>0) % ($506>>>0))&-1;
       $512 = (($510>>>0) / ($506>>>0))&-1;
       $513 = (($512) + ($carry$063$i))|0;
       HEAP32[$509>>2] = $513;
       $514 = Math_imul($511, $508)|0;
       $515 = ($k$462$i|0)==($a$061$i|0);
       $516 = ($513|0)==(0);
       $or$cond11$i = $515 & $516;
       $517 = (($k$462$i) + 1)|0;
       if ($or$cond11$i) {
        $518 = $517 & 127;
        $519 = (($rp$060$i) + -9)|0;
        $a$1$i = $518;$rp$1$i18 = $519;
       } else {
        $a$1$i = $a$061$i;$rp$1$i18 = $rp$060$i;
       }
       $520 = ($517|0)==($k$3$i|0);
       if ($520) {
        break;
       } else {
        $a$061$i = $a$1$i;$carry$063$i = $514;$k$462$i = $517;$rp$060$i = $rp$1$i18;
       }
      }
      $521 = ($514|0)==(0);
      if ($521) {
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $k$3$i;
      } else {
       $522 = (($k$3$i) + 1)|0;
       $523 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$523>>2] = $514;
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $522;
      }
     }
     $524 = (9 - ($503))|0;
     $525 = (($524) + ($rp$0$lcssa162$i))|0;
     $a$2$ph40$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph38$i = $525;$z$1$ph39$i = $z$0$i;
    }
    L280: while(1) {
     $526 = ($rp$2$ph38$i|0)<(18);
     $527 = (($x$i) + ($a$2$ph40$i<<2)|0);
     if ($526) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph39$i;
      while(1) {
       $529 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $529;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $530 = (($x$i) + ($k$5$us$i<<2)|0);
        $531 = HEAP32[$530>>2]|0;
        $532 = (_bitshift64Shl(($531|0),0,29)|0);
        $533 = tempRet0;
        $534 = (_i64Add(($532|0),($533|0),($carry1$0$us$i|0),0)|0);
        $535 = tempRet0;
        $536 = ($535>>>0)>(0);
        $537 = ($535|0)==(0);
        $538 = ($534>>>0)>(1000000000);
        $539 = $537 & $538;
        $540 = $536 | $539;
        if ($540) {
         $541 = (___udivdi3(($534|0),($535|0),1000000000,0)|0);
         $542 = tempRet0;
         $543 = (___uremdi3(($534|0),($535|0),1000000000,0)|0);
         $544 = tempRet0;
         $$sink$off0$us$i = $543;$carry1$1$us$i = $541;
        } else {
         $$sink$off0$us$i = $534;$carry1$1$us$i = 0;
        }
        HEAP32[$530>>2] = $$sink$off0$us$i;
        $545 = (($z$2$us$i) + 127)|0;
        $546 = $545 & 127;
        $547 = ($k$5$us$i|0)!=($546|0);
        $548 = ($k$5$us$i|0)==($a$2$ph40$i|0);
        $or$cond12$us$i = $547 | $548;
        if ($or$cond12$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $549 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $549 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $550 = (($k$5$us$i) + -1)|0;
        if ($548) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $550;$z$2$us$i = $z$3$us$i;
        }
       }
       $551 = (($e2$0$us$i) + -29)|0;
       $552 = ($carry1$1$us$i|0)==(0);
       if ($552) {
        $e2$0$us$i = $551;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa43$i = $551;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $528 = ($rp$2$ph38$i|0)==(18);
      if ($528) {
       $e2$0$us44$i = $e2$0$ph$i;$z$1$us45$i = $z$1$ph39$i;
      } else {
       $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph33$i = $rp$2$ph38$i;$z$5$ph$i = $z$1$ph39$i;
       break;
      }
      while(1) {
       $553 = HEAP32[$527>>2]|0;
       $554 = ($553>>>0)<(9007199);
       if (!($554)) {
        $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$us44$i;$rp$3$ph33$i = 18;$z$5$ph$i = $z$1$us45$i;
        break L280;
       }
       $555 = (($z$1$us45$i) + 127)|0;
       $carry1$0$us49$i = 0;$k$5$in$us48$i = $555;$z$2$us47$i = $z$1$us45$i;
       while(1) {
        $k$5$us50$i = $k$5$in$us48$i & 127;
        $556 = (($x$i) + ($k$5$us50$i<<2)|0);
        $557 = HEAP32[$556>>2]|0;
        $558 = (_bitshift64Shl(($557|0),0,29)|0);
        $559 = tempRet0;
        $560 = (_i64Add(($558|0),($559|0),($carry1$0$us49$i|0),0)|0);
        $561 = tempRet0;
        $562 = ($561>>>0)>(0);
        $563 = ($561|0)==(0);
        $564 = ($560>>>0)>(1000000000);
        $565 = $563 & $564;
        $566 = $562 | $565;
        if ($566) {
         $567 = (___udivdi3(($560|0),($561|0),1000000000,0)|0);
         $568 = tempRet0;
         $569 = (___uremdi3(($560|0),($561|0),1000000000,0)|0);
         $570 = tempRet0;
         $$sink$off0$us53$i = $569;$carry1$1$us54$i = $567;
        } else {
         $$sink$off0$us53$i = $560;$carry1$1$us54$i = 0;
        }
        HEAP32[$556>>2] = $$sink$off0$us53$i;
        $571 = (($z$2$us47$i) + 127)|0;
        $572 = $571 & 127;
        $573 = ($k$5$us50$i|0)!=($572|0);
        $574 = ($k$5$us50$i|0)==($a$2$ph40$i|0);
        $or$cond12$us55$i = $573 | $574;
        if ($or$cond12$us55$i) {
         $z$3$us57$i = $z$2$us47$i;
        } else {
         $575 = ($$sink$off0$us53$i|0)==(0);
         $k$5$z$2$us56$i = $575 ? $k$5$us50$i : $z$2$us47$i;
         $z$3$us57$i = $k$5$z$2$us56$i;
        }
        $576 = (($k$5$us50$i) + -1)|0;
        if ($574) {
         break;
        } else {
         $carry1$0$us49$i = $carry1$1$us54$i;$k$5$in$us48$i = $576;$z$2$us47$i = $z$3$us57$i;
        }
       }
       $577 = (($e2$0$us44$i) + -29)|0;
       $578 = ($carry1$1$us54$i|0)==(0);
       if ($578) {
        $e2$0$us44$i = $577;$z$1$us45$i = $z$3$us57$i;
       } else {
        $$lcssa43$i = $577;$carry1$1$lcssa$lcssa$i = $carry1$1$us54$i;$z$3$lcssa$lcssa$i = $z$3$us57$i;
        break;
       }
      }
     }
     $579 = (($rp$2$ph38$i) + 9)|0;
     $580 = (($a$2$ph40$i) + 127)|0;
     $581 = $580 & 127;
     $582 = ($581|0)==($z$3$lcssa$lcssa$i|0);
     if ($582) {
      $583 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $584 = $583 & 127;
      $585 = (($x$i) + ($584<<2)|0);
      $586 = HEAP32[$585>>2]|0;
      $587 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $588 = $587 & 127;
      $589 = (($x$i) + ($588<<2)|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = $590 | $586;
      HEAP32[$589>>2] = $591;
      $z$4$i = $584;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $592 = (($x$i) + ($581<<2)|0);
     HEAP32[$592>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph40$i = $581;$e2$0$ph$i = $$lcssa43$i;$rp$2$ph38$i = $579;$z$1$ph39$i = $z$4$i;
    }
    L311: while(1) {
     $629 = (($z$5$ph$i) + 1)|0;
     $627 = $629 & 127;
     $630 = (($z$5$ph$i) + 127)|0;
     $631 = $630 & 127;
     $632 = (($x$i) + ($631<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph33$i;
     while(1) {
      $605 = ($rp$3$i$ph|0)==(18);
      $633 = ($rp$3$i$ph|0)>(27);
      $$14$i = $633 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$025$i = 0;
       while(1) {
        $595 = (($i$025$i) + ($a$3$i))|0;
        $596 = $595 & 127;
        $597 = ($596|0)==($z$5$ph$i|0);
        if ($597) {
         $i$1$i = 2;
         break;
        }
        $598 = (($x$i) + ($596<<2)|0);
        $599 = HEAP32[$598>>2]|0;
        $600 = (227424672 + ($i$025$i<<2)|0);
        $601 = HEAP32[$600>>2]|0;
        $602 = ($599>>>0)<($601>>>0);
        if ($602) {
         $i$1$i = 2;
         break;
        }
        $603 = ($599>>>0)>($601>>>0);
        $594 = (($i$025$i) + 1)|0;
        if ($603) {
         $i$1$i = $i$025$i;
         break;
        }
        $593 = ($594|0)<(2);
        if ($593) {
         $i$025$i = $594;
        } else {
         $i$1$i = $594;
         break;
        }
       }
       $604 = ($i$1$i|0)==(2);
       $or$cond13$i = $604 & $605;
       if ($or$cond13$i) {
        break L311;
       }
       $608 = (($$14$i) + ($e2$1$i))|0;
       $609 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($609) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $608;
       } else {
        break;
       }
      }
      $610 = 1 << $$14$i;
      $611 = (($610) + -1)|0;
      $612 = 1000000000 >>> $$14$i;
      $a$427$i = $a$3$i;$carry3$030$i = 0;$k$628$i = $a$3$i;$rp$426$i = $rp$3$i$ph;
      while(1) {
       $613 = (($x$i) + ($k$628$i<<2)|0);
       $614 = HEAP32[$613>>2]|0;
       $615 = $614 & $611;
       $616 = $614 >>> $$14$i;
       $617 = (($616) + ($carry3$030$i))|0;
       HEAP32[$613>>2] = $617;
       $618 = Math_imul($615, $612)|0;
       $619 = ($k$628$i|0)==($a$427$i|0);
       $620 = ($617|0)==(0);
       $or$cond15$i = $619 & $620;
       $621 = (($k$628$i) + 1)|0;
       $622 = $621 & 127;
       $623 = (($rp$426$i) + -9)|0;
       $rp$5$i = $or$cond15$i ? $623 : $rp$426$i;
       $a$5$i = $or$cond15$i ? $622 : $a$427$i;
       $624 = ($622|0)==($z$5$ph$i|0);
       if ($624) {
        break;
       } else {
        $a$427$i = $a$5$i;$carry3$030$i = $618;$k$628$i = $622;$rp$426$i = $rp$5$i;
       }
      }
      $625 = ($618|0)==(0);
      if ($625) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $626 = ($627|0)==($a$5$i|0);
      if (!($626)) {
       break;
      }
      $634 = HEAP32[$632>>2]|0;
      $635 = $634 | 1;
      HEAP32[$632>>2] = $635;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
     }
     $628 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$628>>2] = $618;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $608;$rp$3$ph33$i = $rp$5$i;$z$5$ph$i = $627;
    }
    $606 = $a$3$i & 127;
    $607 = ($606|0)==($z$5$ph$i|0);
    if ($607) {
     $636 = (($627) + -1)|0;
     $637 = (($x$i) + ($636<<2)|0);
     HEAP32[$637>>2] = 0;
     $z$7$i = $627;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $638 = (($x$i) + ($606<<2)|0);
    $639 = HEAP32[$638>>2]|0;
    $640 = (+($639>>>0));
    $641 = (($a$3$i) + 1)|0;
    $642 = $641 & 127;
    $643 = ($642|0)==($z$7$i|0);
    if ($643) {
     $702 = (($z$7$i) + 1)|0;
     $703 = $702 & 127;
     $704 = (($703) + -1)|0;
     $705 = (($x$i) + ($704<<2)|0);
     HEAP32[$705>>2] = 0;
     $z$7$1$i = $703;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $706 = $640 * 1.0E+9;
    $707 = (($x$i) + ($642<<2)|0);
    $708 = HEAP32[$707>>2]|0;
    $709 = (+($708>>>0));
    $710 = $706 + $709;
    $667 = (+($sign$0|0));
    $649 = $667 * $710;
    $687 = (($e2$1$i) + 53)|0;
    $645 = (($687) - ($emin$0$ph))|0;
    $711 = ($645|0)<($bits$0$ph|0);
    if ($711) {
     $644 = ($645|0)<(0);
     $$$i22 = $644 ? 0 : $645;
     $$09$i = $$$i22;$denormal$0$i = 1;
    } else {
     $$09$i = $bits$0$ph;$denormal$0$i = 0;
    }
    $646 = ($$09$i|0)<(53);
    if ($646) {
     $647 = (105 - ($$09$i))|0;
     $648 = (+_scalbn(1.0,$647));
     $650 = (+_copysignl((+$648),(+$649)));
     $651 = (53 - ($$09$i))|0;
     $652 = (+_scalbn(1.0,$651));
     $653 = (+_fmodl((+$649),(+$652)));
     $654 = $649 - $653;
     $655 = $650 + $654;
     $bias$0$i = $650;$frac$0$i = $653;$y$1$i23 = $655;
    } else {
     $bias$0$i = 0.0;$frac$0$i = 0.0;$y$1$i23 = $649;
    }
    $656 = (($a$3$i) + 2)|0;
    $657 = $656 & 127;
    $658 = ($657|0)==($z$7$1$i|0);
    do {
     if ($658) {
      $frac$2$i = $frac$0$i;
     } else {
      $659 = (($x$i) + ($657<<2)|0);
      $660 = HEAP32[$659>>2]|0;
      $661 = ($660>>>0)<(500000000);
      do {
       if ($661) {
        $662 = ($660|0)==(0);
        if ($662) {
         $663 = (($a$3$i) + 3)|0;
         $664 = $663 & 127;
         $665 = ($664|0)==($z$7$1$i|0);
         if ($665) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $666 = $667 * 0.25;
        $668 = $666 + $frac$0$i;
        $frac$1$i = $668;
       } else {
        $669 = ($660>>>0)>(500000000);
        if ($669) {
         $670 = $667 * 0.75;
         $671 = $670 + $frac$0$i;
         $frac$1$i = $671;
         break;
        }
        $672 = (($a$3$i) + 3)|0;
        $673 = $672 & 127;
        $674 = ($673|0)==($z$7$1$i|0);
        if ($674) {
         $675 = $667 * 0.5;
         $676 = $675 + $frac$0$i;
         $frac$1$i = $676;
         break;
        } else {
         $677 = $667 * 0.75;
         $678 = $677 + $frac$0$i;
         $frac$1$i = $678;
         break;
        }
       }
      } while(0);
      $679 = (53 - ($$09$i))|0;
      $680 = ($679|0)>(1);
      if (!($680)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $681 = (+_fmodl((+$frac$1$i),1.0));
      $682 = $681 != 0.0;
      if ($682) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $683 = $frac$1$i + 1.0;
      $frac$2$i = $683;
     }
    } while(0);
    $684 = $y$1$i23 + $frac$2$i;
    $685 = $684 - $bias$0$i;
    $686 = $687 & 2147483647;
    $688 = (-2 - ($sum$i))|0;
    $689 = ($686|0)>($688|0);
    do {
     if ($689) {
      $690 = (+Math_abs((+$685)));
      $691 = !($690 >= 9007199254740992.0);
      if ($691) {
       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i24 = $685;
      } else {
       $692 = ($denormal$0$i|0)!=(0);
       $693 = ($$09$i|0)==($645|0);
       $or$cond16$i = $692 & $693;
       $denormal$1$i = $or$cond16$i ? 0 : $denormal$0$i;
       $694 = $685 * 0.5;
       $695 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $695;$y$2$i24 = $694;
      }
      $696 = (($e2$2$i) + 50)|0;
      $697 = ($696|0)>($325|0);
      if (!($697)) {
       $698 = ($denormal$2$i|0)!=(0);
       $699 = $frac$2$i != 0.0;
       $or$cond17$i = $698 & $699;
       if (!($or$cond17$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
        break;
       }
      }
      $700 = (___errno_location()|0);
      HEAP32[$700>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $685;
     }
    } while(0);
    $701 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $701;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 3)) {
    $68 = HEAP32[$0>>2]|0;
    $69 = HEAP32[$1>>2]|0;
    $70 = ($68>>>0)<($69>>>0);
    if ($70) {
     $71 = (($68) + 1|0);
     HEAP32[$0>>2] = $71;
     $72 = HEAP8[$68>>0]|0;
     $73 = $72&255;
     $76 = $73;
    } else {
     $74 = (___shgetc($f)|0);
     $76 = $74;
    }
    $75 = ($76|0)==(40);
    if ($75) {
     $i$4 = 1;
    } else {
     $77 = HEAP32[$1>>2]|0;
     $78 = ($77|0)==(0|0);
     if ($78) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $79 = HEAP32[$0>>2]|0;
     $80 = (($79) + -1|0);
     HEAP32[$0>>2] = $80;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $81 = HEAP32[$0>>2]|0;
     $82 = HEAP32[$1>>2]|0;
     $83 = ($81>>>0)<($82>>>0);
     if ($83) {
      $84 = (($81) + 1|0);
      HEAP32[$0>>2] = $84;
      $85 = HEAP8[$81>>0]|0;
      $86 = $85&255;
      $89 = $86;
     } else {
      $87 = (___shgetc($f)|0);
      $89 = $87;
     }
     $88 = (($89) + -48)|0;
     $90 = ($88>>>0)<(10);
     $91 = (($89) + -65)|0;
     $92 = ($91>>>0)<(26);
     $or$cond8 = $90 | $92;
     if (!($or$cond8)) {
      $93 = (($89) + -97)|0;
      $94 = ($93>>>0)<(26);
      $95 = ($89|0)==(95);
      $or$cond5 = $94 | $95;
      if (!($or$cond5)) {
       break;
      }
     }
     $107 = (($i$4) + 1)|0;
     $i$4 = $107;
    }
    $96 = ($89|0)==(41);
    if ($96) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $97 = HEAP32[$1>>2]|0;
    $98 = ($97|0)==(0|0);
    if (!($98)) {
     $99 = HEAP32[$0>>2]|0;
     $100 = (($99) + -1|0);
     HEAP32[$0>>2] = $100;
    }
    if ($39) {
     $102 = (___errno_location()|0);
     HEAP32[$102>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $101 = ($i$4|0)==(0);
    $brmerge107 = $101 | $98;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4;
    }
    while(1) {
     $103 = (($$in) + -1)|0;
     $104 = HEAP32[$0>>2]|0;
     $105 = (($104) + -1|0);
     HEAP32[$0>>2] = $105;
     $106 = ($103|0)==(0);
     if ($106) {
      $$0 = nan;
      break;
     } else {
      $$in = $103;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else {
    $108 = HEAP32[$1>>2]|0;
    $109 = ($108|0)==(0|0);
    if (!($109)) {
     $110 = HEAP32[$0>>2]|0;
     $111 = (($110) + -1|0);
     HEAP32[$0>>2] = $111;
    }
    $112 = (___errno_location()|0);
    HEAP32[$112>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond106$not = $notrhs | $notlhs;
  $brmerge = $or$cond106$not | $42;
  if (!($brmerge)) {
   $i$166 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$166) + -1)|0;
    $48 = ($47>>>0)>(3);
    if ($48) {
     $i$166 = $47;
    } else {
     break;
    }
   }
  }
 }
 $49 = (+($sign$0|0));
 $50 = $49 * inf;
 $51 = $50;
 $$0 = $51;
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $c$0 = 0, $c$1$be = 0;
 var $c$18 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$23 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond2 = 0, $phitmp16 = 0, $x$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 if ((($10|0) == 43) | (($10|0) == 45)) {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)<(10);
  $22 = ($pok|0)==(0);
  $or$cond = $21 | $22;
  if ($or$cond) {
   $c$0 = $20;$neg$0 = $11;
  } else {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  }
 } else {
  $c$0 = $10;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $95 = -2147483648;$96 = 0;
   tempRet0 = $95;
   STACKTOP = sp;return ($96|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $95 = -2147483648;$96 = 0;
  tempRet0 = $95;
  STACKTOP = sp;return ($96|0);
 } else {
  $c$18 = $c$0;$x$09 = 0;
 }
 while(1) {
  $33 = (($c$18) + -48)|0;
  $34 = (($33) + ($x$09))|0;
  $35 = HEAP32[$0>>2]|0;
  $36 = HEAP32[$2>>2]|0;
  $37 = ($35>>>0)<($36>>>0);
  if ($37) {
   $38 = (($35) + 1|0);
   HEAP32[$0>>2] = $38;
   $39 = HEAP8[$35>>0]|0;
   $40 = $39&255;
   $c$1$be = $40;
  } else {
   $41 = (___shgetc($f)|0);
   $c$1$be = $41;
  }
  $42 = (($c$1$be) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($34|0)<(214748364);
  $$ = $43 & $44;
  if (!($$)) {
   break;
  }
  $phitmp16 = ($34*10)|0;
  $c$18 = $c$1$be;$x$09 = $phitmp16;
 }
 $45 = ($34|0)<(0);
 $46 = $45 << 31 >> 31;
 $47 = (($c$1$be) + -48)|0;
 $48 = ($47>>>0)<(10);
 if ($48) {
  $51 = $34;$52 = $46;$c$23 = $c$1$be;
  while(1) {
   $53 = (___muldi3(($51|0),($52|0),10,0)|0);
   $54 = tempRet0;
   $55 = ($c$23|0)<(0);
   $56 = $55 << 31 >> 31;
   $57 = (_i64Add(($c$23|0),($56|0),-48,-1)|0);
   $58 = tempRet0;
   $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
   $60 = tempRet0;
   $61 = HEAP32[$0>>2]|0;
   $62 = HEAP32[$2>>2]|0;
   $63 = ($61>>>0)<($62>>>0);
   if ($63) {
    $64 = (($61) + 1|0);
    HEAP32[$0>>2] = $64;
    $65 = HEAP8[$61>>0]|0;
    $66 = $65&255;
    $c$2$be = $66;
   } else {
    $67 = (___shgetc($f)|0);
    $c$2$be = $67;
   }
   $68 = (($c$2$be) + -48)|0;
   $69 = ($68>>>0)<(10);
   $70 = ($60|0)<(21474836);
   $71 = ($60|0)==(21474836);
   $72 = ($59>>>0)<(2061584302);
   $73 = $71 & $72;
   $74 = $70 | $73;
   $or$cond2 = $69 & $74;
   if ($or$cond2) {
    $51 = $59;$52 = $60;$c$23 = $c$2$be;
   } else {
    $89 = $59;$90 = $60;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $89 = $34;$90 = $46;$c$2$lcssa = $c$1$be;
 }
 $49 = (($c$2$lcssa) + -48)|0;
 $50 = ($49>>>0)<(10);
 if ($50) {
  while(1) {
   $75 = HEAP32[$0>>2]|0;
   $76 = HEAP32[$2>>2]|0;
   $77 = ($75>>>0)<($76>>>0);
   if ($77) {
    $78 = (($75) + 1|0);
    HEAP32[$0>>2] = $78;
    $79 = HEAP8[$75>>0]|0;
    $80 = $79&255;
    $c$3$be = $80;
   } else {
    $81 = (___shgetc($f)|0);
    $c$3$be = $81;
   }
   $82 = (($c$3$be) + -48)|0;
   $83 = ($82>>>0)<(10);
   if (!($83)) {
    break;
   }
  }
 }
 $84 = HEAP32[$2>>2]|0;
 $85 = ($84|0)==(0|0);
 if (!($85)) {
  $86 = HEAP32[$0>>2]|0;
  $87 = (($86) + -1|0);
  HEAP32[$0>>2] = $87;
 }
 $88 = ($neg$0|0)!=(0);
 $91 = (_i64Subtract(0,0,($89|0),($90|0))|0);
 $92 = tempRet0;
 $93 = $88 ? $91 : $89;
 $94 = $88 ? $92 : $90;
 $95 = $94;$96 = $93;
 tempRet0 = $95;
 STACKTOP = sp;return ($96|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $13 = (($f) + 100|0);
  HEAP32[$13>>2] = $2;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 STACKTOP = sp;return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = (($wc) + -57344)|0;
 $13 = ($12>>>0)<(8192);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 1]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 1]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre6 = HEAP32[$0>>2]|0;
    $8 = $$pre6;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $8 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $8;
 $9 = $6;
 $10 = (($7) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 1]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 1]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 1]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i103$i = 0, $$0$lcssa$i127$i = 0, $$0$lcssa$i142$i = 0, $$0$lcssa$i37 = 0, $$0$lcssa$i38$i = 0, $$0$lcssa$i43 = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i45$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i55$i = 0, $$0$lcssa$i59 = 0, $$0$lcssa$i62$i = 0;
 var $$0$lcssa$i66 = 0, $$0$lcssa$i68$i = 0, $$0$lcssa$i75$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i96$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i101$i = 0, $$01$i125$i = 0, $$01$i140$i = 0, $$01$i35 = 0, $$01$i36$i = 0, $$01$i43$i = 0, $$01$i50 = 0, $$01$i53$i = 0, $$01$i57 = 0, $$01$i60$i = 0, $$01$i64 = 0, $$01$i66$i = 0;
 var $$01$i73$i = 0, $$01$i74 = 0, $$01$i94$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i40 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0;
 var $$12$i119$i = 0, $$12$i134$i = 0, $$12$i87$i = 0, $$13 = 0, $$14 = 0, $$15 = 0, $$17 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$2$us159$i = 0.0, $$20$i = 0, $$20$us$i = 0, $$21$i = 0, $$210$$23$i = 0, $$210$$25$i = 0, $$210$i = 0, $$22$i = 0.0, $$23$i = 0, $$25$i = 0;
 var $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$412175$i = 0, $$5193$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us322$i = 0, $$a$3$us323$i = 0, $$a$3324$i = 0, $$a$3325$i = 0, $$fl$4 = 0, $$lcssa300$i = 0, $$lcssa92 = 0, $$mask$i = 0, $$mask$i30 = 0, $$mask1$i = 0, $$mask1$i29 = 0;
 var $$neg151$i = 0, $$neg152$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr146$i = 0, $$pre = 0, $$pre$i = 0, $$pre290 = 0, $$pre292 = 0, $$pre319$i = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0.0, $1037 = 0.0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1045$phi = 0, $1046 = 0, $1046$phi = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0.0;
 var $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0.0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0.0;
 var $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0.0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0.0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0.0;
 var $586 = 0.0, $587 = 0.0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0.0, $726 = 0.0, $727 = 0, $728 = 0.0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0;
 var $a$1 = 0, $a$1$lcssa$i = 0, $a$1263$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3249$i = 0, $a$3249$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0;
 var $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0;
 var $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $brmerge$i = 0;
 var $buf = 0, $buf$i = 0, $carry$0255$i = 0, $carry3$0243$i = 0, $carry3$0243$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0254$i = 0, $d$0256$i = 0, $d$1242$i = 0, $d$1242$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4183$i = 0, $d$5174$i = 0, $d$6192$i = 0, $e$0238$i = 0, $e$1$i = 0;
 var $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1200$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0100 = 0, $fl$0104 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0166 = 0;
 var $i$0168 = 0, $i$0237$i = 0, $i$03$i = 0, $i$03$i22 = 0, $i$1$lcssa$i = 0, $i$1174 = 0, $i$1230$i = 0, $i$2217$i = 0, $i$289 = 0, $i$3209$i = 0, $i$388 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i24 = 0, $isdigit11 = 0, $isdigit2$i = 0, $isdigit2$i21 = 0, $isdigit9 = 0, $isdigittmp = 0, $isdigittmp$i = 0;
 var $isdigittmp$i23 = 0, $isdigittmp1$i = 0, $isdigittmp1$i20 = 0, $isdigittmp10 = 0, $isdigittmp8 = 0, $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1210$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1$lcssa = 0, $l$1167 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0;
 var $mb = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i100$i = 0, $or$cond$i35$i = 0, $or$cond$i42$i = 0, $or$cond$i49 = 0, $or$cond$i52$i = 0, $or$cond$i56 = 0, $or$cond$i59$i = 0, $or$cond$i63 = 0, $or$cond$i71 = 0, $or$cond$i72$i = 0, $or$cond$i73 = 0, $or$cond$i93$i = 0, $or$cond28$i = 0, $or$cond28173$i = 0, $or$cond29$i = 0, $or$cond4$i = 0;
 var $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4296 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1165$i = 0;
 var $round$0164$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us158$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us160$i = 0, $s1$0$i = 0, $s7$0180$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0169$i = 0, $s9$0$i = 0, $s9$1188$i = 0, $s9$2$i = 0, $sext = 0;
 var $sext84 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge12 = 0, $storemerge7103 = 0, $storemerge798 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$18$i = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0169 = 0, $ws$1175 = 0, $y$03$i = 0;
 var $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1$lcssa$i = 0, $z$1262$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3248$i = 0, $z$3248$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 560|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 840|0;
 $pad$i = sp + 584|0;
 $buf = sp + 520|0;
 $wc = sp;
 $mb = sp + 852|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = (($ebuf0$i) + 12|0);
 $7 = (($ebuf0$i) + 11|0);
 $8 = $6;
 $9 = (($8) - ($0))|0;
 $10 = (-2 - ($0))|0;
 $11 = (($8) + 2)|0;
 $12 = (($big$i) + 288|0);
 $13 = (($buf$i) + 9|0);
 $14 = $13;
 $15 = (($buf$i) + 8|0);
 $1045 = 0;$1046 = 0;$22 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$22>>0]|0;
  $23 = ($21<<24>>24)==(0);
  if ($23) {
   label = 344;
   break;
  } else {
   $1047 = $21;$25 = $22;
  }
  while(1) {
   if ((($1047<<24>>24) == 0)) {
    $$lcssa92 = $25;$z$0$lcssa = $25;
    break;
   } else if ((($1047<<24>>24) == 37)) {
    $27 = $25;$z$093 = $25;
    label = 9;
    break;
   }
   $24 = (($25) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1047 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = (($27) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$lcssa92 = $27;$z$0$lcssa = $z$093;
      break L12;
     }
     $30 = (($z$093) + 1|0);
     $31 = (($27) + 2|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $27 = $31;$z$093 = $30;
      label = 9;
     } else {
      $$lcssa92 = $31;$z$0$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $z$0$lcssa;
  $35 = $22;
  $36 = (($34) - ($35))|0;
  if ($1) {
   (___fwritex($22,$36,$f)|0);
  }
  $37 = ($z$0$lcssa|0)==($22|0);
  if (!($37)) {
   $l10n$0$phi = $l10n$0;$1046$phi = $1046;$1045$phi = $1045;$22 = $$lcssa92;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$0$phi;$1046 = $1046$phi;$1045 = $1045$phi;
   continue;
  }
  $38 = (($$lcssa92) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $isdigittmp = (($40) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $41 = (($$lcssa92) + 2|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42<<24>>24)==(36);
   if ($43) {
    $44 = (($$lcssa92) + 3|0);
    $$pre290 = HEAP8[$44>>0]|0;
    $46 = $$pre290;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $44;
   } else {
    $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
   }
  } else {
   $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
  }
  $45 = $46 << 24 >> 24;
  $47 = (($45) + -32)|0;
  $48 = ($47>>>0)<(32);
  L25: do {
   if ($48) {
    $50 = $45;$55 = $46;$fl$0104 = 0;$storemerge7103 = $storemerge;
    while(1) {
     $49 = (($50) + -32)|0;
     $51 = 1 << $49;
     $52 = $51 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $65 = $55;$fl$0100 = $fl$0104;$storemerge798 = $storemerge7103;
      break L25;
     }
     $54 = $55 << 24 >> 24;
     $56 = (($54) + -32)|0;
     $57 = 1 << $56;
     $58 = $57 | $fl$0104;
     $59 = (($storemerge7103) + 1|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 << 24 >> 24;
     $62 = (($61) + -32)|0;
     $63 = ($62>>>0)<(32);
     if ($63) {
      $50 = $61;$55 = $60;$fl$0104 = $58;$storemerge7103 = $59;
     } else {
      $65 = $60;$fl$0100 = $58;$storemerge798 = $59;
      break;
     }
    }
   } else {
    $65 = $46;$fl$0100 = 0;$storemerge798 = $storemerge;
   }
  } while(0);
  $64 = ($65<<24>>24)==(42);
  do {
   if ($64) {
    $66 = (($storemerge798) + 1|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $isdigittmp10 = (($68) + -48)|0;
    $isdigit11 = ($isdigittmp10>>>0)<(10);
    if ($isdigit11) {
     $69 = (($storemerge798) + 2|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(36);
     if ($71) {
      $72 = (($nl_type) + ($isdigittmp10<<2)|0);
      HEAP32[$72>>2] = 10;
      $73 = HEAP8[$66>>0]|0;
      $74 = $73 << 24 >> 24;
      $75 = (($74) + -48)|0;
      $76 = (($nl_arg) + ($75<<3)|0);
      $77 = $76;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) + 4)|0;
      $81 = $80;
      $82 = HEAP32[$81>>2]|0;
      $83 = (($storemerge798) + 3|0);
      $l10n$2 = 1;$storemerge12 = $83;$w$0 = $79;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $84 = ($l10n$1|0)==(0);
     if (!($84)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     if (!($1)) {
      $100 = $66;$fl$1 = $fl$0100;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $85 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge12 = $66;$w$0 = $85;
    }
    $86 = ($w$0|0)<(0);
    if ($86) {
     $87 = $fl$0100 | 8192;
     $88 = (0 - ($w$0))|0;
     $100 = $storemerge12;$fl$1 = $87;$l10n$3 = $l10n$2;$w$1 = $88;
    } else {
     $100 = $storemerge12;$fl$1 = $fl$0100;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $89 = $65 << 24 >> 24;
    $isdigittmp1$i = (($89) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $92 = $89;$95 = $storemerge798;$i$03$i = 0;
     while(1) {
      $90 = ($i$03$i*10)|0;
      $91 = (($92) + -48)|0;
      $93 = (($91) + ($90))|0;
      $94 = (($95) + 1|0);
      $96 = HEAP8[$94>>0]|0;
      $97 = $96 << 24 >> 24;
      $isdigittmp$i = (($97) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $92 = $97;$95 = $94;$i$03$i = $93;
      } else {
       break;
      }
     }
     $98 = ($93|0)<(0);
     if ($98) {
      $$0 = -1;
      label = 362;
      break L1;
     } else {
      $100 = $94;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = $93;
     }
    } else {
     $100 = $storemerge798;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $99 = HEAP8[$100>>0]|0;
  $101 = ($99<<24>>24)==(46);
  L46: do {
   if ($101) {
    $102 = (($100) + 1|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = ($103<<24>>24)==(42);
    if (!($104)) {
     $125 = $103 << 24 >> 24;
     $isdigittmp1$i20 = (($125) + -48)|0;
     $isdigit2$i21 = ($isdigittmp1$i20>>>0)<(10);
     if ($isdigit2$i21) {
      $128 = $125;$131 = $102;$i$03$i22 = 0;
     } else {
      $1048 = $102;$p$0 = 0;
      break;
     }
     while(1) {
      $126 = ($i$03$i22*10)|0;
      $127 = (($128) + -48)|0;
      $129 = (($127) + ($126))|0;
      $130 = (($131) + 1|0);
      $132 = HEAP8[$130>>0]|0;
      $133 = $132 << 24 >> 24;
      $isdigittmp$i23 = (($133) + -48)|0;
      $isdigit$i24 = ($isdigittmp$i23>>>0)<(10);
      if ($isdigit$i24) {
       $128 = $133;$131 = $130;$i$03$i22 = $129;
      } else {
       $1048 = $130;$p$0 = $129;
       break L46;
      }
     }
    }
    $105 = (($100) + 2|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106 << 24 >> 24;
    $isdigittmp8 = (($107) + -48)|0;
    $isdigit9 = ($isdigittmp8>>>0)<(10);
    if ($isdigit9) {
     $108 = (($100) + 3|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = ($109<<24>>24)==(36);
     if ($110) {
      $111 = (($nl_type) + ($isdigittmp8<<2)|0);
      HEAP32[$111>>2] = 10;
      $112 = HEAP8[$105>>0]|0;
      $113 = $112 << 24 >> 24;
      $114 = (($113) + -48)|0;
      $115 = (($nl_arg) + ($114<<3)|0);
      $116 = $115;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($116) + 4)|0;
      $120 = $119;
      $121 = HEAP32[$120>>2]|0;
      $122 = (($100) + 4|0);
      $1048 = $122;$p$0 = $118;
      break;
     }
    }
    $123 = ($l10n$3|0)==(0);
    if (!($123)) {
     $$0 = -1;
     label = 362;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $124 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1048 = $105;$p$0 = $124;
    } else {
     $1048 = $105;$p$0 = 0;
    }
   } else {
    $1048 = $100;$p$0 = -1;
   }
  } while(0);
  $135 = $1048;$st$0 = 0;
  while(1) {
   $134 = HEAP8[$135>>0]|0;
   $136 = $134 << 24 >> 24;
   $137 = (($136) + -65)|0;
   $138 = ($137>>>0)>(57);
   if ($138) {
    $$0 = -1;
    label = 362;
    break L1;
   }
   $139 = (($135) + 1|0);
   $140 = ((227424712 + (($st$0*58)|0)|0) + ($137)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($142) + -1)|0;
   $144 = ($143>>>0)<(8);
   if ($144) {
    $135 = $139;$st$0 = $142;
   } else {
    break;
   }
  }
  $145 = ($141<<24>>24)==(0);
  if ($145) {
   $$0 = -1;
   label = 362;
   break;
  }
  $146 = ($141<<24>>24)==(19);
  $147 = ($argpos$0|0)>(-1);
  L65: do {
   if ($146) {
    if ($147) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1049 = $1045;$1050 = $1046;
     label = 63;
    }
   } else {
    if ($147) {
     $148 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$148>>2] = $142;
     $149 = (($nl_arg) + ($argpos$0<<3)|0);
     $150 = $149;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $153 = (($150) + 4)|0;
     $154 = $153;
     $155 = HEAP32[$154>>2]|0;
     $156 = $152;
     $1049 = $155;$1050 = $156;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 362;
     break L1;
    }
    $157 = ($141&255)>(20);
    if ($157) {
     $199 = $134;$207 = $1046;$229 = $1045;
    } else {
     do {
      switch ($142|0) {
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $165 = $arglist_current14;
       $166 = $165;
       $167 = HEAP32[$166>>2]|0;
       $168 = (($165) + 4)|0;
       $169 = $168;
       $170 = HEAP32[$169>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $171 = $167;
       $1051 = $171;$1052 = $170;
       label = 64;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$190 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $190;$191 = HEAP32[tempDoublePtr>>2]|0;
       $192 = HEAP32[tempDoublePtr+4>>2]|0;
       $193 = $191;
       $1051 = $193;$1052 = $192;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$194 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $194;$195 = HEAP32[tempDoublePtr>>2]|0;
       $196 = HEAP32[tempDoublePtr+4>>2]|0;
       $197 = $195;
       $1049 = $196;$1050 = $197;
       label = 63;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $159 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $160 = ($159|0)<(0);
       $161 = $160 << 31 >> 31;
       $162 = $159;
       $1051 = $162;$1052 = $161;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $158 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $1051 = $158;$1052 = $1045;
       label = 64;
       break L65;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $172 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $173 = $172&65535;
       $174 = $173 << 16 >> 16;
       $175 = ($174|0)<(0);
       $176 = $175 << 31 >> 31;
       $sext84 = $172 << 16;
       $177 = $sext84 >> 16;
       $178 = $177;
       $1051 = $178;$1052 = $176;
       label = 64;
       break L65;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $163 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $164 = $163;
       $1051 = $164;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $181 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $182 = $181&255;
       $183 = $182 << 24 >> 24;
       $184 = ($183|0)<(0);
       $185 = $184 << 31 >> 31;
       $sext = $181 << 24;
       $186 = $sext >> 24;
       $187 = $186;
       $1051 = $187;$1052 = $185;
       label = 64;
       break L65;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $179 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i29 = $179 & 65535;
       $180 = $$mask1$i29;
       $1051 = $180;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $188 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i30 = $188 & 255;
       $189 = $$mask$i30;
       $1051 = $189;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      default: {
       $1051 = $1046;$1052 = $1045;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1051 = $1050;$1052 = $1049;
    label = 64;
   } else {
    $1045 = $1049;$1046 = $1050;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre292 = HEAP8[$135>>0]|0;
   $199 = $$pre292;$207 = $1051;$229 = $1052;
  }
  $198 = $199 << 24 >> 24;
  $200 = ($st$0|0)==(0);
  if ($200) {
   $t$0 = $198;
  } else {
   $201 = $198 & 15;
   $202 = ($201|0)==(3);
   $203 = $198 & -33;
   $$ = $202 ? $203 : $198;
   $t$0 = $$;
  }
  $204 = $fl$1 & 8192;
  $205 = ($204|0)==(0);
  $206 = $fl$1 & -65537;
  $fl$1$ = $205 ? $fl$1 : $206;
  L92: do {
   switch ($t$0|0) {
   case 105: case 100:  {
    $267 = $207;
    $268 = ($229|0)<(0);
    if ($268) {
     $269 = (_i64Subtract(0,0,($267|0),($229|0))|0);
     $270 = tempRet0;
     $271 = $269;
     $277 = $271;$279 = $270;$pl$0 = 1;$prefix$0 = 227425176;
     label = 89;
     break L92;
    }
    $272 = $fl$1$ & 2048;
    $273 = ($272|0)==(0);
    if ($273) {
     $274 = $fl$1$ & 1;
     $275 = ($274|0)==(0);
     $$15 = $275 ? 227425176 : ((227425176 + 2|0));
     $277 = $207;$279 = $229;$pl$0 = $274;$prefix$0 = $$15;
     label = 89;
    } else {
     $277 = $207;$279 = $229;$pl$0 = 1;$prefix$0 = ((227425176 + 1|0));
     label = 89;
    }
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 77;
    break;
   }
   case 117:  {
    $277 = $207;$279 = $229;$pl$0 = 0;$prefix$0 = 227425176;
    label = 89;
    break;
   }
   case 112:  {
    $222 = ($p$0>>>0)>(8);
    $223 = $222 ? $p$0 : 8;
    $224 = $fl$1$ | 8;
    $fl$3 = $224;$p$1 = $223;$t$1 = 120;
    label = 77;
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 0:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $216 = ($cnt$1|0)<(0);
     $217 = $216 << 31 >> 31;
     $218 = $207;
     $219 = $218;
     HEAP32[$219>>2] = $cnt$1;
     $220 = (($218) + 4)|0;
     $221 = $220;
     HEAP32[$221>>2] = $217;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $214 = $cnt$1&65535;
     HEAP16[$207>>1] = $214;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $208 = ($cnt$1|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = $207;
     $211 = $210;
     HEAP32[$211>>2] = $cnt$1;
     $212 = (($210) + 4)|0;
     $213 = $212;
     HEAP32[$213>>2] = $209;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $215 = $cnt$1&255;
     HEAP8[$207>>0] = $215;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 99:  {
    $319 = $207;
    $320 = $319&255;
    HEAP8[$4>>0] = $320;
    $1053 = $229;$1054 = $207;$a$2 = $4;$fl$6 = $206;$p$5 = 1;$pl$2 = 0;$prefix$2 = 227425176;$z$2 = $2;
    break;
   }
   case 115:  {
    $324 = ($207|0)==(0|0);
    $$17 = $324 ? 227425192 : $207;
    $a$1 = $$17;
    label = 99;
    break;
   }
   case 111:  {
    $249 = $207;
    $250 = ($249|0)==(0);
    $251 = ($229|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i43 = $2;
    } else {
     $$03$i40 = $2;$254 = $249;$258 = $229;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = (($$03$i40) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i43 = $257;
       break;
      } else {
       $$03$i40 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $308 = $207;$311 = $229;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 227425176;
     label = 94;
    } else {
     $$13 = $252 ? 227425176 : ((227425176 + 5|0));
     $266 = $252&1;
     $$14 = $266 ^ 1;
     $308 = $207;$311 = $229;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$14;$prefix$1 = $$13;
     label = 94;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $368 = $207;
    HEAP32[tempDoublePtr>>2] = $368;HEAP32[tempDoublePtr+4>>2] = $229;$369 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $370 = ($229|0)<(0);
    if ($370) {
     $371 = -$369;
     $$07$i = $371;$pl$0$i = 1;$prefix$0$i = 227425200;
    } else {
     $372 = $fl$1$ & 2048;
     $373 = ($372|0)==(0);
     if ($373) {
      $374 = $fl$1$ & 1;
      $375 = ($374|0)==(0);
      $$$i = $375 ? ((227425200 + 1|0)) : ((227425200 + 6|0));
      $$07$i = $369;$pl$0$i = $374;$prefix$0$i = $$$i;
     } else {
      $$07$i = $369;$pl$0$i = 1;$prefix$0$i = ((227425200 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$376 = HEAP32[tempDoublePtr>>2]|0;
    $377 = HEAP32[tempDoublePtr+4>>2]|0;
    $378 = $377 & 2146435072;
    $379 = ($378>>>0)<(2146435072);
    $380 = ($378|0)==(2146435072);
    $381 = (0)<(0);
    $382 = $380 & $381;
    $383 = $379 | $382;
    if (!($383)) {
     $384 = $t$0 & 32;
     $385 = ($384|0)!=(0);
     $386 = $385 ? 227425224 : 227425232;
     $387 = ($$07$i != $$07$i) | (0.0 != 0.0);
     if ($387) {
      $388 = $385 ? 227425240 : 227425248;
      $pl$1$i = 0;$s1$0$i = $388;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $386;
     }
     $389 = (($pl$1$i) + 3)|0;
     $390 = $fl$1$ & 8192;
     $391 = ($390|0)==(0);
     $392 = ($389|0)<($w$1|0);
     $or$cond$i35$i = $391 & $392;
     if ($or$cond$i35$i) {
      $393 = (($w$1) - ($389))|0;
      $394 = ($393>>>0)>(256);
      $395 = $394 ? 256 : $393;
      _memset(($pad$i|0),32,($395|0))|0;
      $396 = ($393>>>0)>(255);
      if ($396) {
       $$01$i36$i = $393;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $397 = (($$01$i36$i) + -256)|0;
        $398 = ($397>>>0)>(255);
        if ($398) {
         $$01$i36$i = $397;
        } else {
         $$0$lcssa$i38$i = $397;
         break;
        }
       }
      } else {
       $$0$lcssa$i38$i = $393;
      }
      (___fwritex($pad$i,$$0$lcssa$i38$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $399 = $fl$1$ & 73728;
     $400 = ($399|0)==(8192);
     $or$cond$i42$i = $400 & $392;
     if ($or$cond$i42$i) {
      $401 = (($w$1) - ($389))|0;
      $402 = ($401>>>0)>(256);
      $403 = $402 ? 256 : $401;
      _memset(($pad$i|0),32,($403|0))|0;
      $404 = ($401>>>0)>(255);
      if ($404) {
       $$01$i43$i = $401;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $405 = (($$01$i43$i) + -256)|0;
        $406 = ($405>>>0)>(255);
        if ($406) {
         $$01$i43$i = $405;
        } else {
         $$0$lcssa$i45$i = $405;
         break;
        }
       }
      } else {
       $$0$lcssa$i45$i = $401;
      }
      (___fwritex($pad$i,$$0$lcssa$i45$i,$f)|0);
     }
     $w$$i = $392 ? $w$1 : $389;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $407 = (+_frexpl($$07$i,$e2$i));
    $408 = $407 * 2.0;
    $409 = $408 != 0.0;
    if ($409) {
     $410 = HEAP32[$e2$i>>2]|0;
     $411 = (($410) + -1)|0;
     HEAP32[$e2$i>>2] = $411;
    }
    $412 = $t$0 | 32;
    $413 = ($412|0)==(97);
    if ($413) {
     $414 = $t$0 & 32;
     $415 = ($414|0)==(0);
     $416 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $415 ? $prefix$0$i : $416;
     $417 = $pl$0$i | 2;
     $418 = ($p$0>>>0)>(11);
     $419 = (12 - ($p$0))|0;
     $re$0$i = $418 ? 0 : $419;
     $420 = ($re$0$i|0)==(0);
     do {
      if ($420) {
       $$1$i = $408;
      } else {
       $re$1165$i = $re$0$i;$round$0164$i = 8.0;
       while(1) {
        $421 = (($re$1165$i) + -1)|0;
        $422 = $round$0164$i * 16.0;
        $423 = ($421|0)==(0);
        if ($423) {
         break;
        } else {
         $re$1165$i = $421;$round$0164$i = $422;
        }
       }
       $424 = HEAP8[$prefix$0$$i>>0]|0;
       $425 = ($424<<24>>24)==(45);
       if ($425) {
        $426 = -$408;
        $427 = $426 - $422;
        $428 = $422 + $427;
        $429 = -$428;
        $$1$i = $429;
        break;
       } else {
        $430 = $408 + $422;
        $431 = $430 - $422;
        $$1$i = $431;
        break;
       }
      }
     } while(0);
     $432 = HEAP32[$e2$i>>2]|0;
     $433 = ($432|0)<(0);
     $434 = (0 - ($432))|0;
     $435 = $433 ? $434 : $432;
     $436 = ($435|0)<(0);
     if ($436) {
      $437 = ($435|0)<(0);
      $438 = $437 << 31 >> 31;
      $$05$i$i = $6;$439 = $435;$440 = $438;
      while(1) {
       $441 = (___uremdi3(($439|0),($440|0),10,0)|0);
       $442 = tempRet0;
       $443 = $441 | 48;
       $444 = $443&255;
       $445 = (($$05$i$i) + -1|0);
       HEAP8[$445>>0] = $444;
       $446 = (___udivdi3(($439|0),($440|0),10,0)|0);
       $447 = tempRet0;
       $448 = ($440>>>0)>(9);
       $449 = ($440|0)==(9);
       $450 = ($439>>>0)>(4294967295);
       $451 = $449 & $450;
       $452 = $448 | $451;
       if ($452) {
        $$05$i$i = $445;$439 = $446;$440 = $447;
       } else {
        break;
       }
      }
      $$0$lcssa$i48$i = $445;$$01$lcssa$off0$i$i = $446;
     } else {
      $$0$lcssa$i48$i = $6;$$01$lcssa$off0$i$i = $435;
     }
     $453 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($453) {
      $$1$lcssa$i$i = $$0$lcssa$i48$i;
     } else {
      $$12$i$i = $$0$lcssa$i48$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $454 = (($y$03$i$i>>>0) % 10)&-1;
       $455 = $454 | 48;
       $456 = $455&255;
       $457 = (($$12$i$i) + -1|0);
       HEAP8[$457>>0] = $456;
       $458 = (($y$03$i$i>>>0) / 10)&-1;
       $459 = ($y$03$i$i>>>0)<(10);
       if ($459) {
        $$1$lcssa$i$i = $457;
        break;
       } else {
        $$12$i$i = $457;$y$03$i$i = $458;
       }
      }
     }
     $460 = ($$1$lcssa$i$i|0)==($6|0);
     if ($460) {
      HEAP8[$7>>0] = 48;
      $estr$0$i = $7;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $461 = HEAP32[$e2$i>>2]|0;
     $462 = $461 >> 31;
     $463 = $462 & 2;
     $464 = (($463) + 43)|0;
     $465 = $464&255;
     $466 = (($estr$0$i) + -1|0);
     HEAP8[$466>>0] = $465;
     $467 = (($t$0) + 15)|0;
     $468 = $467&255;
     $469 = (($estr$0$i) + -2|0);
     HEAP8[$469>>0] = $468;
     $470 = ($p$0|0)>(0);
     $471 = $fl$1$ & 8;
     $472 = ($471|0)==(0);
     if ($470) {
      if ($472) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $473 = (~~(($$2$us$us$i)));
        $474 = (227425256 + ($473)|0);
        $475 = HEAP8[$474>>0]|0;
        $476 = $475&255;
        $477 = $476 | $414;
        $478 = $477&255;
        $479 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $478;
        $480 = (+($473|0));
        $481 = $$2$us$us$i - $480;
        $482 = $481 * 16.0;
        $483 = $479;
        $484 = (($483) - ($0))|0;
        $485 = ($484|0)==(1);
        if ($485) {
         $486 = (($s$0$us$us$i) + 2|0);
         HEAP8[$479>>0] = 46;
         $s$1$us$us$i = $486;
        } else {
         $s$1$us$us$i = $479;
        }
        $487 = $482 != 0.0;
        if ($487) {
         $$2$us$us$i = $482;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $488 = (~~(($$2$us$i)));
        $489 = (227425256 + ($488)|0);
        $490 = HEAP8[$489>>0]|0;
        $491 = $490&255;
        $492 = $491 | $414;
        $493 = $492&255;
        $494 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $493;
        $495 = (+($488|0));
        $496 = $$2$us$i - $495;
        $497 = $496 * 16.0;
        $498 = $494;
        $499 = (($498) - ($0))|0;
        $500 = ($499|0)==(1);
        if ($500) {
         $501 = (($s$0$us$i) + 2|0);
         HEAP8[$494>>0] = 46;
         $s$1$us$i = $501;
        } else {
         $s$1$us$i = $494;
        }
        $502 = $497 != 0.0;
        if ($502) {
         $$2$us$i = $497;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      if ($472) {
       $$2$us159$i = $$1$i;$s$0$us158$i = $buf$i;
       while(1) {
        $503 = (~~(($$2$us159$i)));
        $504 = (227425256 + ($503)|0);
        $505 = HEAP8[$504>>0]|0;
        $506 = $505&255;
        $507 = $506 | $414;
        $508 = $507&255;
        $509 = (($s$0$us158$i) + 1|0);
        HEAP8[$s$0$us158$i>>0] = $508;
        $510 = (+($503|0));
        $511 = $$2$us159$i - $510;
        $512 = $511 * 16.0;
        $513 = $509;
        $514 = (($513) - ($0))|0;
        $515 = ($514|0)==(1);
        $516 = $512 != 0.0;
        $or$cond$i71 = $515 & $516;
        if ($or$cond$i71) {
         $517 = (($s$0$us158$i) + 2|0);
         HEAP8[$509>>0] = 46;
         $s$1$us160$i = $517;
        } else {
         $s$1$us160$i = $509;
        }
        if ($516) {
         $$2$us159$i = $512;$s$0$us158$i = $s$1$us160$i;
        } else {
         $s$1$lcssa$i = $s$1$us160$i;
         break;
        }
       }
      } else {
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $518 = (~~(($$2$i)));
        $519 = (227425256 + ($518)|0);
        $520 = HEAP8[$519>>0]|0;
        $521 = $520&255;
        $522 = $521 | $414;
        $523 = $522&255;
        $524 = (($s$0$i) + 1|0);
        HEAP8[$s$0$i>>0] = $523;
        $525 = (+($518|0));
        $526 = $$2$i - $525;
        $527 = $526 * 16.0;
        $528 = $524;
        $529 = (($528) - ($0))|0;
        $530 = ($529|0)==(1);
        if ($530) {
         $531 = (($s$0$i) + 2|0);
         HEAP8[$524>>0] = 46;
         $s$1$i = $531;
        } else {
         $s$1$i = $524;
        }
        $532 = $527 != 0.0;
        if ($532) {
         $$2$i = $527;$s$0$i = $s$1$i;
        } else {
         $s$1$lcssa$i = $s$1$i;
         break;
        }
       }
      }
     }
     $533 = ($p$0|0)==(0);
     $$pre319$i = $s$1$lcssa$i;
     do {
      if ($533) {
       label = 173;
      } else {
       $534 = (($10) + ($$pre319$i))|0;
       $535 = ($534|0)<($p$0|0);
       if (!($535)) {
        label = 173;
        break;
       }
       $536 = $469;
       $537 = (($11) + ($p$0))|0;
       $538 = (($537) - ($536))|0;
       $l$0$i = $538;
      }
     } while(0);
     if ((label|0) == 173) {
      label = 0;
      $539 = $469;
      $540 = (($9) - ($539))|0;
      $541 = (($540) + ($$pre319$i))|0;
      $l$0$i = $541;
     }
     $542 = (($l$0$i) + ($417))|0;
     $543 = $fl$1$ & 73728;
     $544 = ($543|0)==(0);
     $545 = ($542|0)<($w$1|0);
     $or$cond$i52$i = $544 & $545;
     if ($or$cond$i52$i) {
      $546 = (($w$1) - ($542))|0;
      $547 = ($546>>>0)>(256);
      $548 = $547 ? 256 : $546;
      _memset(($pad$i|0),32,($548|0))|0;
      $549 = ($546>>>0)>(255);
      if ($549) {
       $$01$i53$i = $546;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $550 = (($$01$i53$i) + -256)|0;
        $551 = ($550>>>0)>(255);
        if ($551) {
         $$01$i53$i = $550;
        } else {
         $$0$lcssa$i55$i = $550;
         break;
        }
       }
      } else {
       $$0$lcssa$i55$i = $546;
      }
      (___fwritex($pad$i,$$0$lcssa$i55$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$417,$f)|0);
     $552 = ($543|0)==(65536);
     $or$cond$i59$i = $552 & $545;
     if ($or$cond$i59$i) {
      $553 = (($w$1) - ($542))|0;
      $554 = ($553>>>0)>(256);
      $555 = $554 ? 256 : $553;
      _memset(($pad$i|0),48,($555|0))|0;
      $556 = ($553>>>0)>(255);
      if ($556) {
       $$01$i60$i = $553;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $557 = (($$01$i60$i) + -256)|0;
        $558 = ($557>>>0)>(255);
        if ($558) {
         $$01$i60$i = $557;
        } else {
         $$0$lcssa$i62$i = $557;
         break;
        }
       }
      } else {
       $$0$lcssa$i62$i = $553;
      }
      (___fwritex($pad$i,$$0$lcssa$i62$i,$f)|0);
     }
     $559 = (($$pre319$i) - ($0))|0;
     (___fwritex($buf$i,$559,$f)|0);
     $560 = $469;
     $561 = (($8) - ($560))|0;
     $562 = (($l$0$i) - ($561))|0;
     $563 = (($562) - ($559))|0;
     $564 = ($563|0)>(0);
     if ($564) {
      $565 = ($563>>>0)>(256);
      $566 = $565 ? 256 : $563;
      _memset(($pad$i|0),48,($566|0))|0;
      $567 = ($563>>>0)>(255);
      if ($567) {
       $$01$i66$i = $563;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $568 = (($$01$i66$i) + -256)|0;
        $569 = ($568>>>0)>(255);
        if ($569) {
         $$01$i66$i = $568;
        } else {
         $$0$lcssa$i68$i = $568;
         break;
        }
       }
      } else {
       $$0$lcssa$i68$i = $563;
      }
      (___fwritex($pad$i,$$0$lcssa$i68$i,$f)|0);
     }
     (___fwritex($469,$561,$f)|0);
     $570 = ($543|0)==(8192);
     $or$cond$i72$i = $570 & $545;
     if ($or$cond$i72$i) {
      $571 = (($w$1) - ($542))|0;
      $572 = ($571>>>0)>(256);
      $573 = $572 ? 256 : $571;
      _memset(($pad$i|0),32,($573|0))|0;
      $574 = ($571>>>0)>(255);
      if ($574) {
       $$01$i73$i = $571;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $575 = (($$01$i73$i) + -256)|0;
        $576 = ($575>>>0)>(255);
        if ($576) {
         $$01$i73$i = $575;
        } else {
         $$0$lcssa$i75$i = $575;
         break;
        }
       }
      } else {
       $$0$lcssa$i75$i = $571;
      }
      (___fwritex($pad$i,$$0$lcssa$i75$i,$f)|0);
     }
     $w$18$i = $545 ? $w$1 : $542;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$18$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $577 = ($p$0|0)<(0);
    $$p$i = $577 ? 6 : $p$0;
    if ($409) {
     $578 = $408 * 268435456.0;
     $579 = HEAP32[$e2$i>>2]|0;
     $580 = (($579) + -28)|0;
     HEAP32[$e2$i>>2] = $580;
     $$3$i = $578;$582 = $580;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $408;$582 = $$pre$i;
    }
    $581 = ($582|0)<(0);
    $$31$i = $581 ? $big$i : $12;
    $$4$i = $$3$i;$z$0$i = $$31$i;
    while(1) {
     $583 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $583;
     $584 = (($z$0$i) + 4|0);
     $585 = (+($583>>>0));
     $586 = $$4$i - $585;
     $587 = $586 * 1.0E+9;
     $588 = $587 != 0.0;
     if ($588) {
      $$4$i = $587;$z$0$i = $584;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $589 = ($$pr$i|0)>(0);
    if ($589) {
     $591 = $$pr$i;$a$1263$i = $$31$i;$z$1262$i = $584;
     while(1) {
      $590 = ($591|0)>(29);
      $592 = $590 ? 29 : $591;
      $d$0254$i = (($z$1262$i) + -4|0);
      $593 = ($d$0254$i>>>0)<($a$1263$i>>>0);
      do {
       if ($593) {
        $a$2$ph$i = $a$1263$i;
       } else {
        $carry$0255$i = 0;$d$0256$i = $d$0254$i;
        while(1) {
         $594 = HEAP32[$d$0256$i>>2]|0;
         $595 = (_bitshift64Shl(($594|0),0,($592|0))|0);
         $596 = tempRet0;
         $597 = (_i64Add(($595|0),($596|0),($carry$0255$i|0),0)|0);
         $598 = tempRet0;
         $599 = (___uremdi3(($597|0),($598|0),1000000000,0)|0);
         $600 = tempRet0;
         HEAP32[$d$0256$i>>2] = $599;
         $601 = (___udivdi3(($597|0),($598|0),1000000000,0)|0);
         $602 = tempRet0;
         $d$0$i = (($d$0256$i) + -4|0);
         $603 = ($d$0$i>>>0)<($a$1263$i>>>0);
         if ($603) {
          break;
         } else {
          $carry$0255$i = $601;$d$0256$i = $d$0$i;
         }
        }
        $604 = ($601|0)==(0);
        if ($604) {
         $a$2$ph$i = $a$1263$i;
         break;
        }
        $605 = (($a$1263$i) + -4|0);
        HEAP32[$605>>2] = $601;
        $a$2$ph$i = $605;
       }
      } while(0);
      $z$2$i = $z$1262$i;
      while(1) {
       $606 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($606)) {
        break;
       }
       $607 = (($z$2$i) + -4|0);
       $608 = HEAP32[$607>>2]|0;
       $609 = ($608|0)==(0);
       if ($609) {
        $z$2$i = $607;
       } else {
        break;
       }
      }
      $610 = HEAP32[$e2$i>>2]|0;
      $611 = (($610) - ($592))|0;
      HEAP32[$e2$i>>2] = $611;
      $612 = ($611|0)>(0);
      if ($612) {
       $591 = $611;$a$1263$i = $a$2$ph$i;$z$1262$i = $z$2$i;
      } else {
       $$pr146$i = $611;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr146$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $584;
    }
    $613 = ($$pr146$i|0)<(0);
    L251: do {
     if ($613) {
      $614 = (($$p$i) + 25)|0;
      $615 = (($614|0) / 9)&-1;
      $616 = (($615) + 1)|0;
      $617 = ($412|0)==(102);
      if ($617) {
       $618 = $$31$i;
       $619 = (($$31$i) + ($616<<2)|0);
       $621 = $$pr146$i;$a$3249$us$i = $a$1$lcssa$i;$z$3248$us$i = $z$1$lcssa$i;
       while(1) {
        $620 = (0 - ($621))|0;
        $622 = ($620|0)>(9);
        $$20$us$i = $622 ? 9 : $620;
        $623 = ($a$3249$us$i>>>0)<($z$3248$us$i>>>0);
        do {
         if ($623) {
          $648 = 1 << $$20$us$i;
          $642 = (($648) + -1)|0;
          $645 = 1000000000 >>> $$20$us$i;
          $carry3$0243$us$i = 0;$d$1242$us$i = $a$3249$us$i;
          while(1) {
           $640 = HEAP32[$d$1242$us$i>>2]|0;
           $641 = $640 & $642;
           $643 = $640 >>> $$20$us$i;
           $644 = (($643) + ($carry3$0243$us$i))|0;
           HEAP32[$d$1242$us$i>>2] = $644;
           $631 = Math_imul($641, $645)|0;
           $646 = (($d$1242$us$i) + 4|0);
           $647 = ($646>>>0)<($z$3248$us$i>>>0);
           if ($647) {
            $carry3$0243$us$i = $631;$d$1242$us$i = $646;
           } else {
            break;
           }
          }
          $627 = HEAP32[$a$3249$us$i>>2]|0;
          $628 = ($627|0)==(0);
          $629 = (($a$3249$us$i) + 4|0);
          $$a$3$us$i = $628 ? $629 : $a$3249$us$i;
          $630 = ($631|0)==(0);
          if ($630) {
           $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $z$3248$us$i;
           break;
          }
          $632 = (($z$3248$us$i) + 4|0);
          HEAP32[$z$3248$us$i>>2] = $631;
          $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $632;
         } else {
          $624 = HEAP32[$a$3249$us$i>>2]|0;
          $625 = ($624|0)==(0);
          $626 = (($a$3249$us$i) + 4|0);
          $$a$3$us322$i = $625 ? $626 : $a$3249$us$i;
          $$a$3$us323$i = $$a$3$us322$i;$z$4$us$i = $z$3248$us$i;
         }
        } while(0);
        $633 = $z$4$us$i;
        $634 = (($633) - ($618))|0;
        $635 = $634 >> 2;
        $636 = ($635|0)>($616|0);
        $$z$4$us$i = $636 ? $619 : $z$4$us$i;
        $637 = HEAP32[$e2$i>>2]|0;
        $638 = (($637) + ($$20$us$i))|0;
        HEAP32[$e2$i>>2] = $638;
        $639 = ($638|0)<(0);
        if ($639) {
         $621 = $638;$a$3249$us$i = $$a$3$us323$i;$z$3248$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us323$i;$z$3$lcssa$i = $$z$4$us$i;
         break L251;
        }
       }
      } else {
       $650 = $$pr146$i;$a$3249$i = $a$1$lcssa$i;$z$3248$i = $z$1$lcssa$i;
      }
      while(1) {
       $649 = (0 - ($650))|0;
       $651 = ($649|0)>(9);
       $$20$i = $651 ? 9 : $649;
       $652 = ($a$3249$i>>>0)<($z$3248$i>>>0);
       do {
        if ($652) {
         $656 = 1 << $$20$i;
         $657 = (($656) + -1)|0;
         $658 = 1000000000 >>> $$20$i;
         $carry3$0243$i = 0;$d$1242$i = $a$3249$i;
         while(1) {
          $659 = HEAP32[$d$1242$i>>2]|0;
          $660 = $659 & $657;
          $661 = $659 >>> $$20$i;
          $662 = (($661) + ($carry3$0243$i))|0;
          HEAP32[$d$1242$i>>2] = $662;
          $663 = Math_imul($660, $658)|0;
          $664 = (($d$1242$i) + 4|0);
          $665 = ($664>>>0)<($z$3248$i>>>0);
          if ($665) {
           $carry3$0243$i = $663;$d$1242$i = $664;
          } else {
           break;
          }
         }
         $666 = HEAP32[$a$3249$i>>2]|0;
         $667 = ($666|0)==(0);
         $668 = (($a$3249$i) + 4|0);
         $$a$3$i = $667 ? $668 : $a$3249$i;
         $669 = ($663|0)==(0);
         if ($669) {
          $$a$3325$i = $$a$3$i;$z$4$i = $z$3248$i;
          break;
         }
         $670 = (($z$3248$i) + 4|0);
         HEAP32[$z$3248$i>>2] = $663;
         $$a$3325$i = $$a$3$i;$z$4$i = $670;
        } else {
         $653 = HEAP32[$a$3249$i>>2]|0;
         $654 = ($653|0)==(0);
         $655 = (($a$3249$i) + 4|0);
         $$a$3324$i = $654 ? $655 : $a$3249$i;
         $$a$3325$i = $$a$3324$i;$z$4$i = $z$3248$i;
        }
       } while(0);
       $671 = $z$4$i;
       $672 = $$a$3325$i;
       $673 = (($671) - ($672))|0;
       $674 = $673 >> 2;
       $675 = ($674|0)>($616|0);
       if ($675) {
        $676 = (($$a$3325$i) + ($616<<2)|0);
        $z$5$i = $676;
       } else {
        $z$5$i = $z$4$i;
       }
       $677 = HEAP32[$e2$i>>2]|0;
       $678 = (($677) + ($$20$i))|0;
       HEAP32[$e2$i>>2] = $678;
       $679 = ($678|0)<(0);
       if ($679) {
        $650 = $678;$a$3249$i = $$a$3325$i;$z$3248$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3325$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $680 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    $681 = $$31$i;
    do {
     if ($680) {
      $682 = $a$3$lcssa$i;
      $683 = (($681) - ($682))|0;
      $684 = $683 >> 2;
      $685 = ($684*9)|0;
      $686 = HEAP32[$a$3$lcssa$i>>2]|0;
      $687 = ($686>>>0)<(10);
      if ($687) {
       $e$1$i = $685;
       break;
      } else {
       $e$0238$i = $685;$i$0237$i = 10;
      }
      while(1) {
       $688 = ($i$0237$i*10)|0;
       $689 = (($e$0238$i) + 1)|0;
       $690 = ($686>>>0)<($688>>>0);
       if ($690) {
        $e$1$i = $689;
        break;
       } else {
        $e$0238$i = $689;$i$0237$i = $688;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $691 = ($412|0)!=(102);
    $692 = $691 ? $e$1$i : 0;
    $693 = (($$p$i) - ($692))|0;
    $694 = ($412|0)==(103);
    $695 = ($$p$i|0)!=(0);
    $$21$i = $694 & $695;
    $$neg151$i = $$21$i << 31 >> 31;
    $696 = (($693) + ($$neg151$i))|0;
    $697 = $z$3$lcssa$i;
    $698 = (($697) - ($681))|0;
    $699 = $698 >> 2;
    $700 = ($699*9)|0;
    $701 = (($700) + -9)|0;
    $702 = ($696|0)<($701|0);
    if ($702) {
     $703 = (($696) + 9216)|0;
     $704 = (($703|0) / 9)&-1;
     $$sum$i = (($704) + -1023)|0;
     $705 = (($$31$i) + ($$sum$i<<2)|0);
     $706 = (($703|0) % 9)&-1;
     $j$0229$i = (($706) + 1)|0;
     $707 = ($j$0229$i|0)<(9);
     if ($707) {
      $i$1230$i = 10;$j$0231$i = $j$0229$i;
      while(1) {
       $708 = ($i$1230$i*10)|0;
       $j$0$i = (($j$0231$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $708;
        break;
       } else {
        $i$1230$i = $708;$j$0231$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $709 = HEAP32[$705>>2]|0;
     $710 = (($709>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $711 = ($710|0)==(0);
     if ($711) {
      $$sum15$i = (($704) + -1022)|0;
      $712 = (($$31$i) + ($$sum15$i<<2)|0);
      $713 = ($712|0)==($z$3$lcssa$i|0);
      if ($713) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $705;$e$3$i = $e$1$i;
      } else {
       label = 233;
      }
     } else {
      label = 233;
     }
     do {
      if ((label|0) == 233) {
       label = 0;
       $714 = (($709>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $715 = $714 & 1;
       $716 = ($715|0)==(0);
       $$22$i = $716 ? 9007199254740992.0 : 9007199254740994.0;
       $717 = (($i$1$lcssa$i|0) / 2)&-1;
       $718 = ($710>>>0)<($717>>>0);
       do {
        if ($718) {
         $small$0$i = 0.5;
        } else {
         $719 = ($710|0)==($717|0);
         if ($719) {
          $$sum16$i = (($704) + -1022)|0;
          $720 = (($$31$i) + ($$sum16$i<<2)|0);
          $721 = ($720|0)==($z$3$lcssa$i|0);
          if ($721) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $722 = ($pl$0$i|0)==(0);
       do {
        if ($722) {
         $round6$1$i = $$22$i;$small$1$i = $small$0$i;
        } else {
         $723 = HEAP8[$prefix$0$i>>0]|0;
         $724 = ($723<<24>>24)==(45);
         if (!($724)) {
          $round6$1$i = $$22$i;$small$1$i = $small$0$i;
          break;
         }
         $725 = $$22$i * -1.0;
         $726 = $small$0$i * -1.0;
         $round6$1$i = $725;$small$1$i = $726;
        }
       } while(0);
       $727 = (($709) - ($710))|0;
       HEAP32[$705>>2] = $727;
       $728 = $round6$1$i + $small$1$i;
       $729 = $728 != $round6$1$i;
       if (!($729)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $705;$e$3$i = $e$1$i;
        break;
       }
       $730 = (($727) + ($i$1$lcssa$i))|0;
       HEAP32[$705>>2] = $730;
       $731 = ($730>>>0)>(999999999);
       if ($731) {
        $a$5223$i = $a$3$lcssa$i;$d$2222$i = $705;
        while(1) {
         $732 = (($d$2222$i) + -4|0);
         HEAP32[$d$2222$i>>2] = 0;
         $733 = ($732>>>0)<($a$5223$i>>>0);
         if ($733) {
          $734 = (($a$5223$i) + -4|0);
          HEAP32[$734>>2] = 0;
          $a$6$i = $734;
         } else {
          $a$6$i = $a$5223$i;
         }
         $735 = HEAP32[$732>>2]|0;
         $736 = (($735) + 1)|0;
         HEAP32[$732>>2] = $736;
         $737 = ($736>>>0)>(999999999);
         if ($737) {
          $a$5223$i = $a$6$i;$d$2222$i = $732;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $732;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $705;
       }
       $738 = $a$5$lcssa$i;
       $739 = (($681) - ($738))|0;
       $740 = $739 >> 2;
       $741 = ($740*9)|0;
       $742 = HEAP32[$a$5$lcssa$i>>2]|0;
       $743 = ($742>>>0)<(10);
       if ($743) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $741;
        break;
       } else {
        $e$2218$i = $741;$i$2217$i = 10;
       }
       while(1) {
        $744 = ($i$2217$i*10)|0;
        $745 = (($e$2218$i) + 1)|0;
        $746 = ($742>>>0)<($744>>>0);
        if ($746) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $745;
         break;
        } else {
         $e$2218$i = $745;$i$2217$i = $744;
        }
       }
      }
     } while(0);
     $747 = (($d$3$i) + 4|0);
     $748 = ($z$3$lcssa$i>>>0)>($747>>>0);
     $$z$3$i = $748 ? $747 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $749 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $750 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($750)) {
      $$lcssa300$i = 0;
      break;
     }
     $751 = (($z$6$i) + -4|0);
     $752 = HEAP32[$751>>2]|0;
     $753 = ($752|0)==(0);
     if ($753) {
      $z$6$i = $751;
     } else {
      $$lcssa300$i = 1;
      break;
     }
    }
    do {
     if ($694) {
      $754 = ($$p$i|0)==(0);
      $755 = $754&1;
      $$$p$i = (($755) + ($$p$i))|0;
      $756 = ($$$p$i|0)>($e$4$ph$i|0);
      $757 = ($e$4$ph$i|0)>(-5);
      $or$cond4$i = $756 & $757;
      if ($or$cond4$i) {
       $758 = (($t$0) + -1)|0;
       $$neg152$i = (($$$p$i) + -1)|0;
       $759 = (($$neg152$i) - ($e$4$ph$i))|0;
       $$013$i = $758;$$210$i = $759;
      } else {
       $760 = (($t$0) + -2)|0;
       $761 = (($$$p$i) + -1)|0;
       $$013$i = $760;$$210$i = $761;
      }
      $762 = $fl$1$ & 8;
      $763 = ($762|0)==(0);
      if (!($763)) {
       $$114$i = $$013$i;$$311$i = $$210$i;
       break;
      }
      do {
       if ($$lcssa300$i) {
        $764 = (($z$6$i) + -4|0);
        $765 = HEAP32[$764>>2]|0;
        $766 = ($765|0)==(0);
        if ($766) {
         $j$2$i = 9;
         break;
        }
        $767 = (($765>>>0) % 10)&-1;
        $768 = ($767|0)==(0);
        if ($768) {
         $i$3209$i = 10;$j$1210$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $769 = ($i$3209$i*10)|0;
         $770 = (($j$1210$i) + 1)|0;
         $771 = (($765>>>0) % ($769>>>0))&-1;
         $772 = ($771|0)==(0);
         if ($772) {
          $i$3209$i = $769;$j$1210$i = $770;
         } else {
          $j$2$i = $770;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $773 = $$013$i | 32;
      $774 = ($773|0)==(102);
      $775 = $z$6$i;
      $776 = (($775) - ($681))|0;
      $777 = $776 >> 2;
      $778 = ($777*9)|0;
      $779 = (($778) + -9)|0;
      if ($774) {
       $780 = (($779) - ($j$2$i))|0;
       $781 = ($780|0)<(0);
       $$23$i = $781 ? 0 : $780;
       $782 = ($$210$i|0)<($$23$i|0);
       $$210$$23$i = $782 ? $$210$i : $$23$i;
       $$114$i = $$013$i;$$311$i = $$210$$23$i;
       break;
      } else {
       $783 = (($779) + ($e$4$ph$i))|0;
       $784 = (($783) - ($j$2$i))|0;
       $785 = ($784|0)<(0);
       $$25$i = $785 ? 0 : $784;
       $786 = ($$210$i|0)<($$25$i|0);
       $$210$$25$i = $786 ? $$210$i : $$25$i;
       $$114$i = $$013$i;$$311$i = $$210$$25$i;
       break;
      }
     } else {
      $$114$i = $t$0;$$311$i = $$p$i;
     }
    } while(0);
    $787 = ($$311$i|0)!=(0);
    if ($787) {
     $791 = 1;
    } else {
     $788 = $fl$1$ & 8;
     $789 = ($788|0)!=(0);
     $791 = $789;
    }
    $790 = $791&1;
    $792 = $$114$i | 32;
    $793 = ($792|0)==(102);
    if ($793) {
     $794 = ($e$4$ph$i|0)>(0);
     $795 = $794 ? $e$4$ph$i : 0;
     $$pn$i = $795;$estr$2$i = 0;
    } else {
     $796 = ($e$4$ph$i|0)<(0);
     $797 = $796 ? $749 : $e$4$ph$i;
     $798 = ($797|0)<(0);
     if ($798) {
      $799 = ($797|0)<(0);
      $800 = $799 << 31 >> 31;
      $$05$i79$i = $6;$801 = $797;$802 = $800;
      while(1) {
       $803 = (___uremdi3(($801|0),($802|0),10,0)|0);
       $804 = tempRet0;
       $805 = $803 | 48;
       $806 = $805&255;
       $807 = (($$05$i79$i) + -1|0);
       HEAP8[$807>>0] = $806;
       $808 = (___udivdi3(($801|0),($802|0),10,0)|0);
       $809 = tempRet0;
       $810 = ($802>>>0)>(9);
       $811 = ($802|0)==(9);
       $812 = ($801>>>0)>(4294967295);
       $813 = $811 & $812;
       $814 = $810 | $813;
       if ($814) {
        $$05$i79$i = $807;$801 = $808;$802 = $809;
       } else {
        break;
       }
      }
      $$0$lcssa$i84$i = $807;$$01$lcssa$off0$i85$i = $808;
     } else {
      $$0$lcssa$i84$i = $6;$$01$lcssa$off0$i85$i = $797;
     }
     $815 = ($$01$lcssa$off0$i85$i|0)==(0);
     if ($815) {
      $estr$1$ph$i = $$0$lcssa$i84$i;
     } else {
      $$12$i87$i = $$0$lcssa$i84$i;$y$03$i86$i = $$01$lcssa$off0$i85$i;
      while(1) {
       $816 = (($y$03$i86$i>>>0) % 10)&-1;
       $817 = $816 | 48;
       $818 = $817&255;
       $819 = (($$12$i87$i) + -1|0);
       HEAP8[$819>>0] = $818;
       $820 = (($y$03$i86$i>>>0) / 10)&-1;
       $821 = ($y$03$i86$i>>>0)<(10);
       if ($821) {
        $estr$1$ph$i = $819;
        break;
       } else {
        $$12$i87$i = $819;$y$03$i86$i = $820;
       }
      }
     }
     $822 = $estr$1$ph$i;
     $823 = (($8) - ($822))|0;
     $824 = ($823|0)<(2);
     if ($824) {
      $estr$1200$i = $estr$1$ph$i;
      while(1) {
       $825 = (($estr$1200$i) + -1|0);
       HEAP8[$825>>0] = 48;
       $826 = $825;
       $827 = (($8) - ($826))|0;
       $828 = ($827|0)<(2);
       if ($828) {
        $estr$1200$i = $825;
       } else {
        $estr$1$lcssa$i = $825;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $829 = $e$4$ph$i >> 31;
     $830 = $829 & 2;
     $831 = (($830) + 43)|0;
     $832 = $831&255;
     $833 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$833>>0] = $832;
     $834 = $$114$i&255;
     $835 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$835>>0] = $834;
     $836 = $835;
     $837 = (($8) - ($836))|0;
     $$pn$i = $837;$estr$2$i = $835;
    }
    $838 = (($pl$0$i) + 1)|0;
    $839 = (($838) + ($$311$i))|0;
    $l$1$i = (($839) + ($790))|0;
    $840 = (($l$1$i) + ($$pn$i))|0;
    $841 = $fl$1$ & 73728;
    $842 = ($841|0)==(0);
    $843 = ($840|0)<($w$1|0);
    $or$cond$i93$i = $842 & $843;
    if ($or$cond$i93$i) {
     $844 = (($w$1) - ($840))|0;
     $845 = ($844>>>0)>(256);
     $846 = $845 ? 256 : $844;
     _memset(($pad$i|0),32,($846|0))|0;
     $847 = ($844>>>0)>(255);
     if ($847) {
      $$01$i94$i = $844;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $848 = (($$01$i94$i) + -256)|0;
       $849 = ($848>>>0)>(255);
       if ($849) {
        $$01$i94$i = $848;
       } else {
        $$0$lcssa$i96$i = $848;
        break;
       }
      }
     } else {
      $$0$lcssa$i96$i = $844;
     }
     (___fwritex($pad$i,$$0$lcssa$i96$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $850 = ($841|0)==(65536);
    $or$cond$i100$i = $850 & $843;
    if ($or$cond$i100$i) {
     $851 = (($w$1) - ($840))|0;
     $852 = ($851>>>0)>(256);
     $853 = $852 ? 256 : $851;
     _memset(($pad$i|0),48,($853|0))|0;
     $854 = ($851>>>0)>(255);
     if ($854) {
      $$01$i101$i = $851;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $855 = (($$01$i101$i) + -256)|0;
       $856 = ($855>>>0)>(255);
       if ($856) {
        $$01$i101$i = $855;
       } else {
        $$0$lcssa$i103$i = $855;
        break;
       }
      }
     } else {
      $$0$lcssa$i103$i = $851;
     }
     (___fwritex($pad$i,$$0$lcssa$i103$i,$f)|0);
    }
    do {
     if ($793) {
      $857 = ($a$8$ph$i>>>0)>($$31$i>>>0);
      $r$0$a$8$i = $857 ? $$31$i : $a$8$ph$i;
      $d$4183$i = $r$0$a$8$i;
      while(1) {
       $858 = HEAP32[$d$4183$i>>2]|0;
       $859 = ($858|0)==(0);
       if ($859) {
        $$1$lcssa$i112$i = $13;
       } else {
        $$12$i110$i = $13;$y$03$i109$i = $858;
        while(1) {
         $860 = (($y$03$i109$i>>>0) % 10)&-1;
         $861 = $860 | 48;
         $862 = $861&255;
         $863 = (($$12$i110$i) + -1|0);
         HEAP8[$863>>0] = $862;
         $864 = (($y$03$i109$i>>>0) / 10)&-1;
         $865 = ($y$03$i109$i>>>0)<(10);
         if ($865) {
          $$1$lcssa$i112$i = $863;
          break;
         } else {
          $$12$i110$i = $863;$y$03$i109$i = $864;
         }
        }
       }
       $866 = ($d$4183$i|0)==($r$0$a$8$i|0);
       do {
        if ($866) {
         $870 = ($$1$lcssa$i112$i|0)==($13|0);
         if (!($870)) {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         HEAP8[$15>>0] = 48;
         $s7$1$i = $15;
        } else {
         $867 = ($$1$lcssa$i112$i>>>0)>($buf$i>>>0);
         if ($867) {
          $s7$0180$i = $$1$lcssa$i112$i;
         } else {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         while(1) {
          $868 = (($s7$0180$i) + -1|0);
          HEAP8[$868>>0] = 48;
          $869 = ($868>>>0)>($buf$i>>>0);
          if ($869) {
           $s7$0180$i = $868;
          } else {
           $s7$1$i = $868;
           break;
          }
         }
        }
       } while(0);
       $871 = $s7$1$i;
       $872 = (($14) - ($871))|0;
       (___fwritex($s7$1$i,$872,$f)|0);
       $873 = (($d$4183$i) + 4|0);
       $874 = ($873>>>0)>($$31$i>>>0);
       if ($874) {
        break;
       } else {
        $d$4183$i = $873;
       }
      }
      if (!($787)) {
       $875 = $fl$1$ & 8;
       $876 = ($875|0)==(0);
       if ($876) {
        break;
       }
      }
      (___fwritex(227425272,1,$f)|0);
      $877 = ($873>>>0)<($z$6$i>>>0);
      $878 = ($$311$i|0)>(0);
      $or$cond28173$i = $877 & $878;
      if ($or$cond28173$i) {
       $$412175$i = $$311$i;$d$5174$i = $873;
       while(1) {
        $879 = HEAP32[$d$5174$i>>2]|0;
        $880 = ($879|0)==(0);
        if ($880) {
         $s8$0169$i = $13;
         label = 300;
        } else {
         $$12$i119$i = $13;$y$03$i118$i = $879;
         while(1) {
          $881 = (($y$03$i118$i>>>0) % 10)&-1;
          $882 = $881 | 48;
          $883 = $882&255;
          $884 = (($$12$i119$i) + -1|0);
          HEAP8[$884>>0] = $883;
          $885 = (($y$03$i118$i>>>0) / 10)&-1;
          $886 = ($y$03$i118$i>>>0)<(10);
          if ($886) {
           break;
          } else {
           $$12$i119$i = $884;$y$03$i118$i = $885;
          }
         }
         $887 = ($884>>>0)>($buf$i>>>0);
         if ($887) {
          $s8$0169$i = $884;
          label = 300;
         } else {
          $s8$0$lcssa$i = $884;
         }
        }
        if ((label|0) == 300) {
         while(1) {
          label = 0;
          $888 = (($s8$0169$i) + -1|0);
          HEAP8[$888>>0] = 48;
          $889 = ($888>>>0)>($buf$i>>>0);
          if ($889) {
           $s8$0169$i = $888;
           label = 300;
          } else {
           $s8$0$lcssa$i = $888;
           break;
          }
         }
        }
        $890 = ($$412175$i|0)>(9);
        $891 = $890 ? 9 : $$412175$i;
        (___fwritex($s8$0$lcssa$i,$891,$f)|0);
        $892 = (($d$5174$i) + 4|0);
        $893 = (($$412175$i) + -9)|0;
        $894 = ($892>>>0)<($z$6$i>>>0);
        $895 = ($893|0)>(0);
        $or$cond28$i = $894 & $895;
        if ($or$cond28$i) {
         $$412175$i = $893;$d$5174$i = $892;
        } else {
         $$412$lcssa$i = $893;
         break;
        }
       }
      } else {
       $$412$lcssa$i = $$311$i;
      }
      $896 = ($$412$lcssa$i|0)>(0);
      if (!($896)) {
       break;
      }
      $897 = ($$412$lcssa$i>>>0)>(256);
      $898 = $897 ? 256 : $$412$lcssa$i;
      _memset(($pad$i|0),48,($898|0))|0;
      $899 = ($$412$lcssa$i>>>0)>(255);
      if ($899) {
       $$01$i125$i = $$412$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $900 = (($$01$i125$i) + -256)|0;
        $901 = ($900>>>0)>(255);
        if ($901) {
         $$01$i125$i = $900;
        } else {
         $$0$lcssa$i127$i = $900;
         break;
        }
       }
      } else {
       $$0$lcssa$i127$i = $$412$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i127$i,$f)|0);
     } else {
      $902 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa300$i ? $z$6$i : $902;
      $903 = ($$311$i|0)>(-1);
      do {
       if ($903) {
        $904 = $fl$1$ & 8;
        $$not$i = ($904|0)!=(0);
        $$5193$i = $$311$i;$d$6192$i = $a$8$ph$i;
        while(1) {
         $905 = HEAP32[$d$6192$i>>2]|0;
         $906 = ($905|0)==(0);
         if ($906) {
          label = 311;
         } else {
          $$12$i134$i = $13;$y$03$i133$i = $905;
          while(1) {
           $907 = (($y$03$i133$i>>>0) % 10)&-1;
           $908 = $907 | 48;
           $909 = $908&255;
           $910 = (($$12$i134$i) + -1|0);
           HEAP8[$910>>0] = $909;
           $911 = (($y$03$i133$i>>>0) / 10)&-1;
           $912 = ($y$03$i133$i>>>0)<(10);
           if ($912) {
            break;
           } else {
            $$12$i134$i = $910;$y$03$i133$i = $911;
           }
          }
          $913 = ($910|0)==($13|0);
          if ($913) {
           label = 311;
          } else {
           $s9$0$i = $910;
          }
         }
         if ((label|0) == 311) {
          label = 0;
          HEAP8[$15>>0] = 48;
          $s9$0$i = $15;
         }
         $914 = ($d$6192$i|0)==($a$8$ph$i|0);
         do {
          if ($914) {
           $918 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $919 = ($$5193$i|0)>(0);
           $brmerge$i = $919 | $$not$i;
           if (!($brmerge$i)) {
            $s9$2$i = $918;
            break;
           }
           (___fwritex(227425272,1,$f)|0);
           $s9$2$i = $918;
          } else {
           $915 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($915) {
            $s9$1188$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $916 = (($s9$1188$i) + -1|0);
            HEAP8[$916>>0] = 48;
            $917 = ($916>>>0)>($buf$i>>>0);
            if ($917) {
             $s9$1188$i = $916;
            } else {
             $s9$2$i = $916;
             break;
            }
           }
          }
         } while(0);
         $920 = $s9$2$i;
         $921 = (($14) - ($920))|0;
         $922 = ($921|0)<($$5193$i|0);
         $$$5$i = $922 ? $921 : $$5193$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $923 = (($$5193$i) - ($921))|0;
         $924 = (($d$6192$i) + 4|0);
         $925 = ($924>>>0)<($z$6$$i>>>0);
         $926 = ($923|0)>(-1);
         $or$cond29$i = $925 & $926;
         if ($or$cond29$i) {
          $$5193$i = $923;$d$6192$i = $924;
         } else {
          break;
         }
        }
        $927 = ($923|0)>(0);
        if (!($927)) {
         break;
        }
        $928 = ($923>>>0)>(256);
        $929 = $928 ? 256 : $923;
        _memset(($pad$i|0),48,($929|0))|0;
        $930 = ($923>>>0)>(255);
        if ($930) {
         $$01$i140$i = $923;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $931 = (($$01$i140$i) + -256)|0;
          $932 = ($931>>>0)>(255);
          if ($932) {
           $$01$i140$i = $931;
          } else {
           $$0$lcssa$i142$i = $931;
           break;
          }
         }
        } else {
         $$0$lcssa$i142$i = $923;
        }
        (___fwritex($pad$i,$$0$lcssa$i142$i,$f)|0);
       }
      } while(0);
      $933 = $estr$2$i;
      $934 = (($8) - ($933))|0;
      (___fwritex($estr$2$i,$934,$f)|0);
     }
    } while(0);
    $935 = ($841|0)==(8192);
    $or$cond$i$i = $935 & $843;
    if ($or$cond$i$i) {
     $936 = (($w$1) - ($840))|0;
     $937 = ($936>>>0)>(256);
     $938 = $937 ? 256 : $936;
     _memset(($pad$i|0),32,($938|0))|0;
     $939 = ($936>>>0)>(255);
     if ($939) {
      $$01$i$i = $936;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $940 = (($$01$i$i) + -256)|0;
       $941 = ($940>>>0)>(255);
       if ($941) {
        $$01$i$i = $940;
       } else {
        $$0$lcssa$i$i = $940;
        break;
       }
      }
     } else {
      $$0$lcssa$i$i = $936;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$30$i = $843 ? $w$1 : $840;
    $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$30$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 67:  {
    $331 = $207;
    HEAP32[$wc>>2] = $331;
    HEAP32[$5>>2] = 0;
    $1055 = $wc;$1056 = $wc;$p$4296 = -1;
    label = 104;
    break;
   }
   case 109:  {
    $321 = (___errno_location()|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = (_strerror(($322|0))|0);
    $a$1 = $323;
    label = 99;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     $1057 = $207;$1058 = $207;$i$0166 = 0;
     label = 110;
    } else {
     $1055 = $207;$1056 = $207;$p$4296 = $p$0;
     label = 104;
    }
    break;
   }
   default: {
    $1053 = $229;$1054 = $207;$a$2 = $22;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 227425176;$z$2 = $2;
   }
   }
  } while(0);
  L445: do {
   if ((label|0) == 77) {
    label = 0;
    $225 = $207;
    $226 = $t$1 & 32;
    $227 = ($225|0)==(0);
    $228 = ($229|0)==(0);
    $230 = $227 & $228;
    if ($230) {
     $308 = $207;$311 = $229;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 227425176;
     label = 94;
    } else {
     $$012$i = $2;$232 = $225;$239 = $229;
     while(1) {
      $231 = $232 & 15;
      $233 = (227425256 + ($231)|0);
      $234 = HEAP8[$233>>0]|0;
      $235 = $234&255;
      $236 = $235 | $226;
      $237 = $236&255;
      $238 = (($$012$i) + -1|0);
      HEAP8[$238>>0] = $237;
      $240 = (_bitshift64Lshr(($232|0),($239|0),4)|0);
      $241 = tempRet0;
      $242 = ($240|0)==(0);
      $243 = ($241|0)==(0);
      $244 = $242 & $243;
      if ($244) {
       break;
      } else {
       $$012$i = $238;$232 = $240;$239 = $241;
      }
     }
     $245 = $fl$3 & 8;
     $246 = ($245|0)==(0);
     if ($246) {
      $308 = $207;$311 = $229;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 227425176;
      label = 94;
     } else {
      $247 = $t$1 >> 4;
      $248 = (227425176 + ($247)|0);
      $308 = $207;$311 = $229;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $248;
      label = 94;
     }
    }
   }
   else if ((label|0) == 89) {
    label = 0;
    $276 = $277;
    $278 = ($279>>>0)>(0);
    $280 = ($279|0)==(0);
    $281 = ($276>>>0)>(4294967295);
    $282 = $280 & $281;
    $283 = $278 | $282;
    if ($283) {
     $$05$i = $2;$284 = $276;$285 = $279;
     while(1) {
      $286 = (___uremdi3(($284|0),($285|0),10,0)|0);
      $287 = tempRet0;
      $288 = $286 | 48;
      $289 = $288&255;
      $290 = (($$05$i) + -1|0);
      HEAP8[$290>>0] = $289;
      $291 = (___udivdi3(($284|0),($285|0),10,0)|0);
      $292 = tempRet0;
      $293 = ($285>>>0)>(9);
      $294 = ($285|0)==(9);
      $295 = ($284>>>0)>(4294967295);
      $296 = $294 & $295;
      $297 = $293 | $296;
      if ($297) {
       $$05$i = $290;$284 = $291;$285 = $292;
      } else {
       break;
      }
     }
     $$0$lcssa$i45 = $290;$$01$lcssa$off0$i = $291;
    } else {
     $$0$lcssa$i45 = $2;$$01$lcssa$off0$i = $276;
    }
    $298 = ($$01$lcssa$off0$i|0)==(0);
    if ($298) {
     $308 = $277;$311 = $279;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 94;
    } else {
     $$12$i = $$0$lcssa$i45;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $299 = (($y$03$i>>>0) % 10)&-1;
      $300 = $299 | 48;
      $301 = $300&255;
      $302 = (($$12$i) + -1|0);
      HEAP8[$302>>0] = $301;
      $303 = (($y$03$i>>>0) / 10)&-1;
      $304 = ($y$03$i>>>0)<(10);
      if ($304) {
       $308 = $277;$311 = $279;$a$0 = $302;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 94;
       break;
      } else {
       $$12$i = $302;$y$03$i = $303;
      }
     }
    }
   }
   else if ((label|0) == 99) {
    label = 0;
    $325 = (_memchr($a$1,0,$p$0)|0);
    $326 = ($325|0)==(0|0);
    if ($326) {
     $327 = (($a$1) + ($p$0)|0);
     $1053 = $229;$1054 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 227425176;$z$2 = $327;
     break;
    } else {
     $328 = $325;
     $329 = $a$1;
     $330 = (($328) - ($329))|0;
     $1053 = $229;$1054 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $330;$pl$2 = 0;$prefix$2 = 227425176;$z$2 = $325;
     break;
    }
   }
   else if ((label|0) == 104) {
    label = 0;
    $i$0168 = 0;$l$1167 = 0;$ws$0169 = $1055;
    while(1) {
     $336 = HEAP32[$ws$0169>>2]|0;
     $337 = ($336|0)==(0);
     if ($337) {
      $i$0$lcssa = $i$0168;$l$1$lcssa = $l$1167;
      break;
     }
     $338 = (_wctomb($mb,$336)|0);
     $339 = ($338|0)>(-1);
     if (!($339)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     $340 = (($p$4296) - ($i$0168))|0;
     $341 = ($338>>>0)>($340>>>0);
     $335 = (($338) + ($i$0168))|0;
     if ($341) {
      $1057 = $1055;$1058 = $1056;$i$0166 = $i$0168;
      label = 110;
      break L445;
     }
     $333 = (($ws$0169) + 4|0);
     $334 = ($335>>>0)<($p$4296>>>0);
     if ($334) {
      $i$0168 = $335;$l$1167 = $338;$ws$0169 = $333;
     } else {
      $i$0$lcssa = $335;$l$1$lcssa = $338;
      break;
     }
    }
    $342 = ($l$1$lcssa|0)<(0);
    if ($342) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1057 = $1055;$1058 = $1056;$i$0166 = $i$0$lcssa;
     label = 110;
    }
   }
  } while(0);
  if ((label|0) == 94) {
   label = 0;
   $305 = ($p$2|0)>(-1);
   $306 = $fl$4 & -65537;
   $$fl$4 = $305 ? $306 : $fl$4;
   $307 = $308;
   $309 = ($307|0)==(0);
   $310 = ($311|0)==(0);
   $312 = $309 & $310;
   $313 = ($p$2|0)==(0);
   $or$cond = $312 & $313;
   if ($or$cond) {
    $1053 = $311;$1054 = $308;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $314 = $a$0;
    $315 = (($3) - ($314))|0;
    $316 = $312&1;
    $317 = (($316) + ($315))|0;
    $318 = ($p$2|0)>($317|0);
    $p$2$ = $318 ? $p$2 : $317;
    $1053 = $311;$1054 = $308;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 110) {
   label = 0;
   $343 = $fl$1$ & 73728;
   $344 = ($343|0)==(0);
   $345 = ($i$0166|0)<($w$1|0);
   $or$cond$i56 = $344 & $345;
   if ($or$cond$i56) {
    $346 = (($w$1) - ($i$0166))|0;
    $347 = ($346>>>0)>(256);
    $348 = $347 ? 256 : $346;
    _memset(($pad$i|0),32,($348|0))|0;
    $349 = ($346>>>0)>(255);
    if ($349) {
     $$01$i57 = $346;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $350 = (($$01$i57) + -256)|0;
      $351 = ($350>>>0)>(255);
      if ($351) {
       $$01$i57 = $350;
      } else {
       $$0$lcssa$i59 = $350;
       break;
      }
     }
    } else {
     $$0$lcssa$i59 = $346;
    }
    (___fwritex($pad$i,$$0$lcssa$i59,$f)|0);
   }
   $352 = ($i$0166|0)==(0);
   L479: do {
    if (!($352)) {
     $i$1174 = 0;$ws$1175 = $1057;
     while(1) {
      $353 = HEAP32[$ws$1175>>2]|0;
      $354 = ($353|0)==(0);
      if ($354) {
       break L479;
      }
      $355 = (_wctomb($mb,$353)|0);
      $356 = (($355) + ($i$1174))|0;
      $357 = ($356|0)>($i$0166|0);
      if ($357) {
       break L479;
      }
      $358 = (($ws$1175) + 4|0);
      (___fwritex($mb,$355,$f)|0);
      $359 = ($356>>>0)<($i$0166>>>0);
      if ($359) {
       $i$1174 = $356;$ws$1175 = $358;
      } else {
       break;
      }
     }
    }
   } while(0);
   $360 = ($343|0)==(8192);
   $or$cond$i63 = $360 & $345;
   if ($or$cond$i63) {
    $361 = (($w$1) - ($i$0166))|0;
    $362 = ($361>>>0)>(256);
    $363 = $362 ? 256 : $361;
    _memset(($pad$i|0),32,($363|0))|0;
    $364 = ($361>>>0)>(255);
    if ($364) {
     $$01$i64 = $361;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $365 = (($$01$i64) + -256)|0;
      $366 = ($365>>>0)>(255);
      if ($366) {
       $$01$i64 = $365;
      } else {
       $$0$lcssa$i66 = $365;
       break;
      }
     }
    } else {
     $$0$lcssa$i66 = $361;
    }
    (___fwritex($pad$i,$$0$lcssa$i66,$f)|0);
   }
   $367 = $345 ? $w$1 : $i$0166;
   $1045 = $229;$1046 = $1058;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $367;$l10n$0 = $l10n$3;
   continue;
  }
  $942 = $z$2;
  $943 = $a$2;
  $944 = (($942) - ($943))|0;
  $945 = ($p$5|0)<($944|0);
  $$p$5 = $945 ? $944 : $p$5;
  $946 = (($pl$2) + ($$p$5))|0;
  $947 = ($w$1|0)<($946|0);
  $w$2 = $947 ? $946 : $w$1;
  $948 = $fl$6 & 73728;
  $949 = ($948|0)==(0);
  $950 = ($946|0)<($w$2|0);
  $or$cond$i73 = $949 & $950;
  if ($or$cond$i73) {
   $951 = (($w$2) - ($946))|0;
   $952 = ($951>>>0)>(256);
   $953 = $952 ? 256 : $951;
   _memset(($pad$i|0),32,($953|0))|0;
   $954 = ($951>>>0)>(255);
   if ($954) {
    $$01$i74 = $951;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $955 = (($$01$i74) + -256)|0;
     $956 = ($955>>>0)>(255);
     if ($956) {
      $$01$i74 = $955;
     } else {
      $$0$lcssa$i76 = $955;
      break;
     }
    }
   } else {
    $$0$lcssa$i76 = $951;
   }
   (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $957 = ($948|0)==(65536);
  $or$cond$i49 = $957 & $950;
  if ($or$cond$i49) {
   $958 = (($w$2) - ($946))|0;
   $959 = ($958>>>0)>(256);
   $960 = $959 ? 256 : $958;
   _memset(($pad$i|0),48,($960|0))|0;
   $961 = ($958>>>0)>(255);
   if ($961) {
    $$01$i50 = $958;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $962 = (($$01$i50) + -256)|0;
     $963 = ($962>>>0)>(255);
     if ($963) {
      $$01$i50 = $962;
     } else {
      $$0$lcssa$i52 = $962;
      break;
     }
    }
   } else {
    $$0$lcssa$i52 = $958;
   }
   (___fwritex($pad$i,$$0$lcssa$i52,$f)|0);
  }
  $964 = ($944|0)<($$p$5|0);
  if ($964) {
   $965 = (($$p$5) - ($944))|0;
   $966 = ($965>>>0)>(256);
   $967 = $966 ? 256 : $965;
   _memset(($pad$i|0),48,($967|0))|0;
   $968 = ($965>>>0)>(255);
   if ($968) {
    $$01$i35 = $965;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $969 = (($$01$i35) + -256)|0;
     $970 = ($969>>>0)>(255);
     if ($970) {
      $$01$i35 = $969;
     } else {
      $$0$lcssa$i37 = $969;
      break;
     }
    }
   } else {
    $$0$lcssa$i37 = $965;
   }
   (___fwritex($pad$i,$$0$lcssa$i37,$f)|0);
  }
  (___fwritex($a$2,$944,$f)|0);
  $971 = ($948|0)==(8192);
  $or$cond$i = $971 & $950;
  if (!($or$cond$i)) {
   $1045 = $1053;$1046 = $1054;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $972 = (($w$2) - ($946))|0;
  $973 = ($972>>>0)>(256);
  $974 = $973 ? 256 : $972;
  _memset(($pad$i|0),32,($974|0))|0;
  $975 = ($972>>>0)>(255);
  if ($975) {
   $$01$i = $972;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $976 = (($$01$i) + -256)|0;
    $977 = ($976>>>0)>(255);
    if ($977) {
     $$01$i = $976;
    } else {
     $$0$lcssa$i = $976;
     break;
    }
   }
  } else {
   $$0$lcssa$i = $972;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1045 = $1053;$1046 = $1054;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $978 = ($f|0)==(0|0);
  if (!($978)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $979 = ($l10n$0|0)==(0);
  if ($979) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$289 = 1;
  }
  while(1) {
   $980 = (($nl_type) + ($i$289<<2)|0);
   $981 = HEAP32[$980>>2]|0;
   $982 = ($981|0)==(0);
   if ($982) {
    $i$388 = $i$289;
    break;
   }
   $983 = (($nl_arg) + ($i$289<<3)|0);
   $984 = ($981>>>0)>(20);
   L540: do {
    if (!($984)) {
     do {
      switch ($981|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $985 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$983>>2] = $985;
       break L540;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $986 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $987 = ($986|0)<(0);
       $988 = $987 << 31 >> 31;
       $989 = $983;
       $990 = $989;
       HEAP32[$990>>2] = $986;
       $991 = (($989) + 4)|0;
       $992 = $991;
       HEAP32[$992>>2] = $988;
       break L540;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $993 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $994 = $983;
       $995 = $994;
       HEAP32[$995>>2] = $993;
       $996 = (($994) + 4)|0;
       $997 = $996;
       HEAP32[$997>>2] = 0;
       break L540;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $998 = $arglist_current44;
       $999 = $998;
       $1000 = HEAP32[$999>>2]|0;
       $1001 = (($998) + 4)|0;
       $1002 = $1001;
       $1003 = HEAP32[$1002>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1004 = $983;
       $1005 = $1004;
       HEAP32[$1005>>2] = $1000;
       $1006 = (($1004) + 4)|0;
       $1007 = $1006;
       HEAP32[$1007>>2] = $1003;
       break L540;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1008 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1009 = $1008&65535;
       $1010 = $1009 << 16 >> 16;
       $1011 = ($1010|0)<(0);
       $1012 = $1011 << 31 >> 31;
       $1013 = $983;
       $1014 = $1013;
       HEAP32[$1014>>2] = $1010;
       $1015 = (($1013) + 4)|0;
       $1016 = $1015;
       HEAP32[$1016>>2] = $1012;
       break L540;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1017 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1017 & 65535;
       $1018 = $983;
       $1019 = $1018;
       HEAP32[$1019>>2] = $$mask1$i;
       $1020 = (($1018) + 4)|0;
       $1021 = $1020;
       HEAP32[$1021>>2] = 0;
       break L540;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1022 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1023 = $1022&255;
       $1024 = $1023 << 24 >> 24;
       $1025 = ($1024|0)<(0);
       $1026 = $1025 << 31 >> 31;
       $1027 = $983;
       $1028 = $1027;
       HEAP32[$1028>>2] = $1024;
       $1029 = (($1027) + 4)|0;
       $1030 = $1029;
       HEAP32[$1030>>2] = $1026;
       break L540;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1031 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1031 & 255;
       $1032 = $983;
       $1033 = $1032;
       HEAP32[$1033>>2] = $$mask$i;
       $1034 = (($1032) + 4)|0;
       $1035 = $1034;
       HEAP32[$1035>>2] = 0;
       break L540;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1036 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$983>>3] = $1036;
       break L540;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1037 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$983>>3] = $1037;
       break L540;
       break;
      }
      default: {
       break L540;
      }
      }
     } while(0);
    }
   } while(0);
   $1038 = (($i$289) + 1)|0;
   $1039 = ($1038|0)<(10);
   if ($1039) {
    $i$289 = $1038;
   } else {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1042 = (($nl_type) + ($i$388<<2)|0);
   $1043 = HEAP32[$1042>>2]|0;
   $1044 = ($1043|0)==(0);
   $1041 = (($i$388) + 1)|0;
   if (!($1044)) {
    $$0 = -1;
    label = 362;
    break;
   }
   $1040 = ($1041|0)<(10);
   if ($1040) {
    $i$388 = $1041;
   } else {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 362) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=227425280+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i,0);
 $4 = (+___floatscan($f$i,1,1));
 $5 = (($f$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtol($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i,0);
 $7 = (___intscan($f$i,$base,1,-2147483648,0)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 STACKTOP = sp;return ($7|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa34 = 0, $$013 = 0, $$1$lcssa = 0, $$17 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond12 = 0, $s$0$lcssa = 0, $s$0$lcssa33 = 0, $s$014 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 $4 = ($n|0)==(0);
 $or$cond12 = $3 | $4;
 L1: do {
  if ($or$cond12) {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  } else {
   $5 = $c&255;
   $$013 = $n;$s$014 = $src;
   while(1) {
    $6 = HEAP8[$s$014>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa34 = $$013;$s$0$lcssa33 = $s$014;
     label = 6;
     break L1;
    }
    $8 = (($s$014) + 1|0);
    $9 = (($$013) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)==(0);
    $13 = ($9|0)==(0);
    $or$cond = $12 | $13;
    if ($or$cond) {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    } else {
     $$013 = $9;$s$014 = $8;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$3 = 0;$s$2 = $s$0$lcssa;
  } else {
   $$0$lcssa34 = $$0$lcssa;$s$0$lcssa33 = $s$0$lcssa;
   label = 6;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa33>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa34;$s$2 = $s$0$lcssa33;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa34>>>0)>(3);
    L11: do {
     if ($18) {
      $$17 = $$0$lcssa34;$w$08 = $s$0$lcssa33;
      while(1) {
       $19 = HEAP32[$w$08>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$17;$w$0$lcssa = $w$08;
        break L11;
       }
       $26 = (($w$08) + 4|0);
       $27 = (($$17) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$17 = $27;$w$08 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa34;$w$0$lcssa = $s$0$lcssa33;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$15>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$24;$s$2 = $s$15;
       break L8;
      }
      $32 = (($s$15) + 1|0);
      $33 = (($$24) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$24 = $33;$s$15 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = (($l$04) + 1|0);
    $6 = (($r$05) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 STACKTOP = sp;return ($12|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&1](a1|0,a2|0,a3|0)|0;
  }

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,_sn_write];

  return { _i64Subtract: _i64Subtract, _free: _free, _main: _main, _strncpy: _strncpy, _memmove: _memmove, _strlen: _strlen, _memset: _memset, _malloc: _malloc, _i64Add: _i64Add, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, _emscripten_replace_memory: _emscripten_replace_memory, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__strncpy = asm["_strncpy"]; asm["_strncpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strncpy.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};

var real__emscripten_replace_memory = asm["_emscripten_replace_memory"]; asm["_emscripten_replace_memory"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_replace_memory.apply(null, arguments);
};
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



